<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Overview of Tizen UI Development</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#benefit">Benefits of EFL</a></li>
			<li><a href="#key">Key Characteristics of EFL</a></li>
			<li><a href="#efl_structure">EFL Structure on Tizen</a></li>
			<li><a href="#ui_hierarchy">UI Hierarchy Structure</a></li>
			<li><a href="#library">Elementary UI Component Library</a></li>
		</ul>		
	</div></div>
</div>		
<div id="container"><div id="contents"><div class="content">	
<h1>Overview of Tizen UI Development</h1>
		
<p>This tutorial gives a brief description of UI structures and demonstrates how you can develop and design native UI applications with tools.</p>

<p>This documentation has been created based on the mobile profile.</p>

<p>When talking about the development of Tizen native UI applications, you cannot avoid EFL. Tizen platform uses EFL as a UI framework that provides both a visual outlook for user applications and significant performance benefits.</p> 
<p>EFL stands for Enlightenment Foundation Libraries. Enlightenment is a project consisting of Enlightenment window manager, EFL libraries, and various utilities and applications. Originally, Enlightenment was a project to build a Window Manager for X11. However, it has grown much since then. At the moment, it still produces the Window Manager, but it has evolved to cover mobile, wearable, and TV UI needs (for example, for Tizen projects) as well as the traditional desktop UI. Although Tizen adopts EFL as the UI framework, the UI framework and EFL are not the same thing. Since EFL is mainly a project for the Window Manager, in the Tizen UI framework, its features are defined for mobile, wearable, and TV characteristics.</p>

<h2 id="benefit">Benefits of EFL</h2>

<p>EFL provides streamlined graphic core libraries that you need to create powerful applications. EFL needs lower memory but provides high performance, and supports a retained mode graphics system and user-centric features, such as themes, 2D/3D effects, and accessibility. In addition, EFL supports various resolutions with the same layout, fast and small file systems, a variety of programming language bindings, and separation of UI and logic. Even though the EFL UI toolkit is used mainly for 2D-based Tizen native applications, it also supports 2.5D and 3D effects and 3D objects.</p>
<p>An important aspect of EFL is efficiency, both in speed and size:</p>

<ul>
	<li>The core EFL libraries, even with Elementary, are about half the size of the equivalent &quot;small stack&quot; of GTK+ (used, for example, by GNOME), and about one quarter the size of Qt. Of course, with these kinds of numbers, you can always argue over what exactly constitutes an equivalent measurement.</li>
	<li>EFL is low on actual memory usage at runtime, with memory footprints a fraction the size of those in the GTK+ and Qt environments.</li>
	<li>EFL is fast, considering what it does. Some libraries claim to be very fast - but then, it is easy to be fast when you only handle simple and straightforward tasks. EFL is fast, while also tackling the more complex rendering problems involving, for example, alpha blending, interpolated scaling, and transforms with dithering.</li>
</ul>

<h2 id="key">Key Characteristics of EFL</h2>
<p>The key characteristics of EFL explain why Tizen has adopted EFL as its UI framework:</p>
<ul>
	<li>Fast performance</li>
	<li>Small memory footprint</li>
	<li>Various back-end engine support</li>
	<li>UI and logic separation</li>
	<li>Themeable and scalable</li>
	<li>Animations</li>
	<li>Language bindings and hardware acceleration</li>
	<li>Flexibility</li>
</ul>
<p>The following sections describe the most important features (fast performance, and UI and logic separation) in more detail.</p>
<h3>Fast Performance with the Retained-mode Rendering</h3>
<p>The main reason Tizen uses EFL is its speed. EFL is highly optimized by using a scene graph and retained-mode rendering, resulting in EFL being fast even in software rendering.</p>
<p>A graphics system adopting the retained mode is basically responsible for responding to all repaint requests for rendering the application objects. Clients do not directly cause actual rendering, but objects are redrawn when parts of them are updated. In other words, since EFL (Evas) works with the retained mode, there is no need to command any drawing.</p>

<p class="figure">Figure: Retained-mode rendering</p> 
<p align="center"><img alt="Retained-mode rendering" src="../../images/ui_builder_retained_mode.png" /></p>

<h3>Separation of UI and Logic with Edje</h3>
<p>EFL supports EDC files for the UI layout and theme:</p>
<ul>
	<li>The EDC file can separate the UI layout (EDC) and logic by having the layout description in a plain text file and the logic code in the C or C++ source files.</li>
	<li>The EDC files support themes, which can be changed at runtime without restarting the application.</li>
	<li>UI components are customizable so that each application can create its own customized theme to overlay above the default theme, adding customized versions of UI components to achieve a specific look and feel.</li>
</ul>
<p>The following figure describes the behavior of the EDC files.</p>

<p class="figure">Figure: EDC file behavior</p> 
<p align="center"><img alt="EDC file behavior" src="../../images/ui_builder_edc.png" /></p>

<h2 id="efl_structure">EFL Structure on Tizen</h2>
<p>EFL is a collection of libraries that cover a range of functionality from managing the application life-cycle to rendering graphical objects. EFL libraries build on top of each other in layers, steadily becoming higher-level, yet allowing access to lower levels. The higher up you go, the less you have to do yourself. Elementary is at the top, but you still access the layers below it for common tasks, as there is no need for Elementary to wrap things that work perfectly well as-is.</p>
<p>To learn more about each library, go to <a href="../../../../org.tizen.ui.practices/html/cover_page.htm">UI Practices</a>. This section only briefly describes the hierarchical structure of your application on Tizen.</p>

<p class="figure">Figure: EFL structure</p> 
<p align="center"><img alt="EFL structure" src="../../images/ui_builder_efl_structure.png" /></p>
 
<p>When you create a basic EFL application, you use the following main libraries as a basis:</p>
<ul>
	<li>Elementary is the top-most library with which you create your EFL application. It provides all the functions you need to create a window, create simple and complex layouts, manage the life-cycle of a view, and add UI components (a full set with, for example, buttons, boxes, scrollers, and sliders).</li>
	<li>EFL Core Library consists of several libraries that build on top of each other in layers, steadily becoming higher-level, yet allowing access to lower levels. 
	<p>EFL Core Library provides the following main libraries:</p>
	<ul>
		<li>Edje library provides a powerful theme. You can use it to create your own UI components and use them in your application. You can also extend the default theme.</li>
		<li>Ecore library manages the main loop of your application. The main loop is one of the most important concepts you need to know to develop an application. The main loop is where events are handled, and where you interact with the user through the callback mechanism.</li>
		<li>Evas library is responsible for managing the drawing of your content. All graphical objects that you create are Evas objects. Evas handles the window state by filling the canvas with objects and manipulating their states. In contrast to other canvas libraries, such as Cairo, OpenGL, and XRender, Evas is not a drawing library but a scene graph library that retains the state of all objects. Evas objects are created and then manipulated until they are no longer needed, at which point they are deleted. This allows you to work in the same terms that a designer thinks in: it is a direct mapping, as opposed to having to convert the concepts into drawing commands in the right order, and calculate minimum drawing calls needed to get the job done.</li>
		<li>Eina library is the basis of all the EFL libraries. Eina is a toolbox that implements an API for data types in an efficient way. It contains all the functions needed to create lists and hashes, manage shared strings and open shared libraries, and handle errors and memory pools.</li>
	</ul></li>
</ul>

<h2 id="ui_hierarchy">UI Hierarchy Structure</h2>
<p>To develop a UI application, you must understand the hierarchy structure used in EFL.</p>
<p>To manage multiple views with EFL on Tizen applications, create a naviframe object. The naviframe can contain multiple views, and is a top-layer object which can help your application to manage and switch views. If your application has only one view, you do not need the naviframe.</p>
<p>The following figure illustrates the most popular view hierarchy for managing multiple views.</p>

<p class="figure">Figure: View hierarchy for multiple views</p> 
<p align="center"><img alt="View hierarchy for multiple views" src="../../images/ui_builder_view_hierarchy.png" /></p>

<ul>
	<li>Window, which is the bottom-most UI component holding a canvas object for drawing, to represent a block of memory that gets composited to the screen.</li>
	<li>Conformant, which shows the virtual keyboard, indicator, softkey, and clipboard areas. 
	<p>If you do not need those components, you do not need the conformant either.</p></li>
	<li>Naviframe, which is used in applications that show multiple views through their lives with back and forth transitions between them. 
	<p>If you want to manage just 1 view, there is no need to add the naviframe.</p></li>
	<li>UI Container (such as grid, table, or box), which helps to arrange UI components.</li>
	<li>UI Component (such as button, background, icon, or image), which presents the UI layout.</li>
</ul>

<p>If you want to make a structure for each situation (single and multiple views), the following figure illustrates a possible structure.</p>

<p class="figure" id="UI_figure">Figure: UI hierarchy structure</p> 
<p align="center"><img alt="UI hierarchy structure" src="../../images/ui_builder_ui_hierarchy.png" /></p>

<h2 id="library">Elementary UI Component Library</h2>
<p>The EFL Elementary is a set of fast, finger-friendly, scalable, and themeable UI component libraries. The number of supported UI components is around 80, including both containers and non-containers. Originally, the Elementary was developed as part of the Window Manager development on Desktop devices. For the mobile profile, Tizen reused the proper UI components and created new ones, and then enhanced and adjusted all of them for Tizen native applications.</p>

<p>The UI components are mobile-friendly: for example, the naviframe component supports view-management for multiple views, the entry component supports many modes (such as password, single/multi-line, and edit/no-edit), the index component supports fast access to another group of UI items, and the toolbar component shows a menu when an item is selected.</p>
<p>The mobile UI components were designed to allow the user to interact with touch screen-equipped mobile devices. Therefore, when developing mobile applications, you can easily use them through the mobile-related infrastructure in company with view management and when reacting to touch events and the user finger size.</p>
<h3>UI Components</h3>

<ul>
	<li>Win: The win component is the root window component that is often used in an application. It allows you to create some content in it, and it is handled by the window manager.</li>
	<li>Conformant: A conformant is a container component that accounts for the space taken by the indicator, virtual keyboard, and softkey areas.</li>
	<li>Naviframe: A naviframe component consists of a stack of views. New views are pushed on top of previous ones, and only the top-most view is displayed.</li>
	<li>Popup: The popup component shows a popup area that can contain a little area, a content are, and an action area.</li>
	<li>Ctxpopup: The ctxpopup component is a contextual popup that can show a list of items.</li>
	<li>Scroller: A scroller holds (and clips) a single object and allows you to scroll across it.</li>
	<li>Grid: In a grid, objects are placed at specific positions along a fixed grid.</li>
	<li>Table: A table is like a box but with 2 dimensions.</li>
	<li>Box: A box is one of the simplest EFL container components, and it allows you to arrange the UI components in a specific order horizontally or vertically.</li>
	<li>Panes: A panes component adds a draggable bar between 2 content sections. The sections are resized when the bar is dragged.</li>
	<li>Panel: The panel component is an animated object that can contain child objects. It can be expanded or contracted by clicking on the button on its edge.</li>
	<li>List: The list component is a very simple list for managing a small number of items. If you need to manage a lot of items, use the genlist component instead.</li>
	<li>Genlist: The genlist component displays a scrollable list of items. It can hold a lot of items while still being fast and memory-efficient (only the visible items are allocated memory).</li>
	<li>Toolbar: The toolbar component is a scrollable list of items. It can also show a menu when an item is selected. Only one item can be selected at a time.</li>
	<li>Multibuttonentry: A multi-button entry is a UI component letting a user enter and each chunk of text managed as a set of buttons.</li>
	<li>Gengrid: The gengrid component displays objects on a grid layout and renders only the visible objects.</li>
	<li>Index: Index is a UI component which gives you an index for fast access to a group of other UI items.</li>
	<li>Flipselector: Fileselector is a UI component which has a set of text items and flips up or down the selector to change the text on it.</li>
	<li>Background: The background component can be used to set a solid background decoration to a window or a container object. It works like an image, but has some background-specific properties, such as setting it to a tiled, centered, scaled, or stretched mode.</li>
	<li>Datetime: The datetime component can display and input date and time values.</li>
	<li>Image: The image component can load and display an image from a file or memory.</li>
	<li>Label: The label component displays text with simple HTML-like markup.</li>
	<li>Progressbar: The progressbar component can be used to display the progress status of a given task.</li>
	<li>Layout: A layout is a container component that takes a standard Edje design file and wraps it very thinly in a UI component.</li>
	<li>Map: Map is a UI component which specializes in displaying a map. It uses the <a href="http://openstreetmap.org/" target="_blank">OpenStreetMap</a> provider.</li>
	<li>Calendar: Calendar is a UI component which displays month views.</li>
	<li>Colorselector: The colorselector component provides a color selector. It has different modes, each of them showing a different configuration of color selection.</li>
	<li>Entry: The entry component is a box in which the user can enter text.</li>
	<li>Spinner: The spinner component enables the user to increase or decrease a numeric value by using arrow buttons.</li>
	<li>Slider: The slider component is a draggable bar that is used to select a value from a range of values.</li>
	<li>Button: The button component is a simple push button. It is composed of a label icon and an icon object, and has an auto-repeat feature.</li>
	<li>Check: The check component toggles a Boolean value between true and false.</li>
	<li>Radio: The radio component can display 1 or more options, but the user can only select one of them. The UI component is composed of an indicator (selected/unselected), an optional icon, and an optional label. Even though it is usually grouped with 2 or more other radio components, it can also be used alone.</li>

</ul>
   
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

