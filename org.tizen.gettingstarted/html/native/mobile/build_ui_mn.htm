<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Building a Simple Mobile Native UI</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#data">Defining the Data Structure</a></li>
			<li><a href="#register">Registering Life-cycle Callbacks</a></li>
			<li><a href="#ui">Creating UI Objects</a></li>
		</ul>
	</div></div>	
</div>	

<div id="container"><div id="contents"><div class="content">
	
<h1>Building a Simple Mobile Native UI</h1>

<p>This tutorial demonstrates how to create a simple user interface for a mobile device using EFL.</p>
 

<p>This tutorial consists of the following:</p>
<ol>
<li>Defining the data structure</li> 
<li>Registering life-cycle callbacks</li>
<li>Creating UI objects</li>
</ol>

<h2 id="data" name="data">Defining the Data Structure</h2>

<p>A pointer to important objects is stored in the following data structure:</p>

<pre class="prettyprint">
typedef struct 
appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} appdata_s;
</pre>

<h2 id="register" name="register">Registering Life-cycle Callbacks</h2>
<p>The <span style="font-family: Courier New,Courier,monospace">main()</span> function has callbacks that manage specific parts of the application life-cycle:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">app_create</span> 
<ul><li>Called when the application process starts.</li>
<li>Used to create UI components.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_terminate</span> 
<ul><li>Called while the application process is terminating.</li>
<li>Called after the main loop quits.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_resume</span> (UI applications only)
<ul><li>Called when the application window is shown.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_pause</span> (UI applications only)
<ul><li>Called when the application window is totally hidden.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_control</span> 
<ul><li>Called after the <span style="font-family: Courier New,Courier,monospace">app_create</span> callback when the process starts or called when a launch request is received while the process is running.</li>
<li>Can receive <span style="font-family: Courier New,Courier,monospace">app_control</span> data (parameters for launching the application).</li>
<li>Used to implement parameter-specific actions of the application.</li>
</ul></li></ul>

<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if(ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;app_main() failed. Err=%d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="ui" name="ui">Creating UI Objects</h2>
<p>The <span style="font-family: Courier New,Courier,monospace">app_create()</span> function is called when the process starts, and it calls the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>

<pre class="prettyprint">
static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;// Initialize UI resources and application data
&nbsp;&nbsp;&nbsp;// If this function returns true, the application main loop starts
&nbsp;&nbsp;&nbsp;// If this function returns false, the application is terminated
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>In the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, you can create a simple user interface that consists of window, conformant, and label objects. The function receives a pointer to fill in the <span style="font-family: Courier New,Courier,monospace">ad</span> structure.</p>

<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;&lt;align=center&gt;Hello EFL&lt;/align&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;label);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<p>To break down the above code:</p>

<ul>
<li>
<p>Window objects can be created by using the <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span> function and adding callbacks on window objects. One of the callbacks handles the <span style="font-family: Courier New,Courier,monospace">delete,request</span> event when the window is to be closed, and the other handles the <span style="font-family: Courier New,Courier,monospace">EEXT_CALLBACK_BACK</span> event when the hardware back key is pressed.</p>

<pre class="prettyprint">
// Window
// Create and initialize elm_win, which is mandatory to manipulate a window
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
{
&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}
evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);
</pre>
</li>
<li>	
<p>You can create a conformant object that is based on the window. The conformant goes inside the window first.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">elm_win_indicator_mode_set()</span> function decides whether the indicator is visible, and the <span style="font-family: Courier New,Courier,monospace">elm_win_indicator_opacity_set()</span> function sets the indicator opacity mode.</p>
<p>You can set the conformant object as a resize object of the window by using the <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> function. It means that the conformant size and position are controlled by the window object directly.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function makes the conformant object visible.</p>

<pre class="prettyprint">
// Conformant
// Create and initialize elm_conformant, which is mandatory for the base GUI 
// to have a proper size when an indicator or virtual keypad is visible
ad-&gt;conform = elm_conformant_add(ad-&gt;win);
elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
evas_object_show(ad-&gt;conform);
</pre>
</li>
<li>	
<p>You can add a label object for text by using the <span style="font-family: Courier New,Courier,monospace">elm_label_add()</span> function. It adds a new label to the parent (conformant object).</p>
<p>You can also set the text to the label by using the <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function.</p>

<pre class="prettyprint">
// Label
// Create an actual view of the base GUI
// Modify this part to change the view
ad-&gt;label = elm_label_add(ad-&gt;conform);
elm_object_text_set(ad-&gt;label, &quot;&lt;align=center&gt;Hello EFL&lt;/align&gt;&quot;);
evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_object_content_set(ad-&gt;conform, ad-&gt;label);
</pre>
</li>
<li>	
<p>When all the UI components are ready, make the window object visible by using the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function. This sets the window to display everything on the screen at once.</p>

<pre class="prettyprint">
// Show the window after the base GUI is set up
evas_object_show(ad-&gt;win);
</pre>
</li>
</ul>
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

