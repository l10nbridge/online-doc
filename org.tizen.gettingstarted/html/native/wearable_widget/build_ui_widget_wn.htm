<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Building a Simple Wearable Native Widget UI</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Widget Application</a></li>
			<li><a href="#create">Creating the Widget Application</a></li>
			<li><a href="#callback">Managing Widget Instance Life-cycle Callbacks</a></li>
			<li><a href="#ui">Drawing the Widget UI</a></li>
			<li><a href="#data">Managing Private Data for the Widget Instance</a></li>
		</ul>
	</div></div>	
</div>	

<div id="container"><div id="contents"><div class="content">
	
<h1>Building a Simple Wearable Native Widget UI</h1>

<p>The following example is based on a template project for a wearable widget application, which was introduced in <a href="create_project_widget_wn.htm">Creating a Wearable Widget Application Project</a>.</p>
<p>The template project makes it easy to create your widget application. Without modification, you can build and run the project. However, it is important to  understand the following template code to customize it.</p>


<h2 id="init" name="init">Initializing the Widget Application</h2>

<p>To initialize the widget application:</p>

<ol>
<li>To use the functions and data types of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;widget_app.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;widget_app.h&gt;
</pre>

<p>All header files that you need are already included in the <span style="font-family: Courier New,Courier,monospace">MyWidget.h</span> file, which is generated by the SDK when the template project is created.</p></li>
<li>Edit the widget application settings in the <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#widget_app">manifest</a> file.</li>
</ol>

<h2 id="create" name="create">Creating the Widget Application</h2>

<p>To create the widget application:</p>

<ol>
<li>Start and initialize the application with the <span style="font-family: Courier New,Courier,monospace">main()</span> function.

<p>Set up the <span style="font-family: Courier New,Courier,monospace">widget_app_lifecycle_callback_s</span> structure variable for the widget application life-cycle callbacks, define the functions themselves (<span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> for <a href="#initial">initialization</a> and <span style="font-family: Courier New,Courier,monospace">widget_app_terminate()</span> for <a href="#term">termination</a>), and call the <span style="font-family: Courier New,Courier,monospace">widget_app_main()</span> function to start the application event loop:</p>

<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;widget_app_lifecycle_callback_s ops = {NULL,};
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;ops.create = widget_app_create;
&nbsp;&nbsp;&nbsp;ops.terminate = widget_app_terminate;

&nbsp;&nbsp;&nbsp;ret = widget_app_main(argc, argv, &amp;ops, NULL);
&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;widget_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>
<li id="initial">Use the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> life-cycle function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API to initialize any resources that can be shared among widget instances. This function is called before the main event loop starts.

<pre class="prettyprint">
static widget_class_h 
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s ops = {NULL,};
</pre>
</li>
<li>Register the callback functions and make a class for widget instances.

<p>At the end of the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> function, remember to create a widget instance class and return a handle for it, so that the handle can be used for making widget instances.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre></li>

<li id="term">When you no longer need the widget application, release the resources and terminate the application:

<pre class="prettyprint">
static void
widget_app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
}
</pre></li></ol>

<h2 id="callback" name="callback">Managing Widget Instance Life-cycle Callbacks</h2>

<p>The widget application provides a life-cycle and methods for making and managing a widget class. The application has one process, whose responsibility it is to make a class in the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> callback function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API. With this class, the framework can make instances whenever applications for widget viewers (such as home screen or lock screen) request for a widget instance.</p>
<p>The widget instance has its own life-cycle, which is similar to the widget application. However, the widget instance is just an object that is shown by the applications for widget viewers. Many widget instances can be running on the same widget application process.</p>

<p>To manage the widget instance life-cycle:</p>

<ol>
<li>Define the widget instance life-cycle callbacks:

<ul><li>This callback is triggered when the widget instance is created.
<p>Initialize resources for the widget instance and <a href="../../../../org.tizen.tutorials/html/native/app_framework/widget_tutorial_n.htm#get_window">draw the UI</a>. If the bundle content is not <span style="font-family: Courier New,Courier,monospace">NULL</span>, restore the previous status.</p>

<pre class="prettyprint">
static int 
widget_instance_create(widget_context_h context, bundle *content, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;if (content != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Recover the previous status with the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create the UI

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when the widget instance is destroyed.
<p>Release all widget resources. If the <span style="font-family: Courier New,Courier,monospace">reason</span> for the termination is not <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html#ga50c912e59019e4e719851bae110baa02">WIDGET_APP_DESTROY_TYPE_PERMANENT</a>, store the current status with the incoming bundle.</p>

<pre class="prettyprint">
static int 
widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Save the current status at the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
} 
</pre></li>
<li>This callback is triggered when the widget instance is paused.
<p>Take the necessary actions since the widget instance becomes invisible. The framework can destroy a paused widget instance.</p>

<pre class="prettyprint">
static int 
widget_instance_pause(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when the widget instance is resumed.
<p>Take the necessary actions since the widget instance becomes visible.</p>

<pre class="prettyprint">
static int 
widget_instance_resume(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when a widget update event is received.
<p>Take the necessary actions for the widget update. If the <span style="font-family: Courier New,Courier,monospace">force</span> parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, the widget can be updated even in the pause state.</p>

<pre class="prettyprint">
static int 
widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li></ul>
</li>
<li>Register the callbacks in the <span style="font-family: Courier New,Courier,monospace">widget_instance_lifecycle_callback_s</span> structure during the widget application initialization:

<pre class="prettyprint">
static widget_class_h 
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s ops = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.create = widget_instance_create,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.destroy = widget_instance_destroy,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pause = widget_instance_pause,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.resume = widget_instance_resume,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.update = widget_instance_update,
&nbsp;&nbsp;&nbsp;};
   
&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre></li>
</ol>

<h2 id="ui" name="ui">Drawing the Widget UI</h2>

<p>To draw the widget UI, you must get a window object with the <span style="font-family: Courier New,Courier,monospace">widget_app_get_elm_win()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API and create the UI on the home screen:</p>

<pre class="prettyprint">
#include &lt;widget_app_efl.h&gt;

typedef struct 
widget_instance_data 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;if (content != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Recover the previous status with the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);
&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_FAULT;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;win, w, h);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;wid-&gt;conform = elm_conformant_add(wid-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(wid-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(wid-&gt;win, wid-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;label, w, h / 3);
&nbsp;&nbsp;&nbsp;evas_object_move(wid-&gt;label, w / 4, h / 3);
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;label);
&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Hello widget&quot;);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;win);

&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
} 
</pre>

<h2 id="data" name="data">Managing Private Data for the Widget Instance</h2>

<p>Widget instances can have private data. The data usually includes view objects to make a screen for each widget instance. The framework provides an easy way to find private data from the widget context handle, which is provided as a parameter in the callback functions. The following example shows how to make private data and use it:</p>

<ul>
<li>You can define a private data structure and attach it to the widget instance by calling the <span style="font-family: Courier New,Courier,monospace">widget_app_context_set_tag()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API:

<pre class="prettyprint">
typedef struct 
widget_instance_data 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);

&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);
}
</pre>   
</li>
<li>You can get the private data from the widget instance by calling the <span style="font-family: Courier New,Courier,monospace">widget_app_context_get_tag()</span> function of the Widget Application API:
<pre class="prettyprint">
static int
widget_instance_update(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;wid);
&nbsp;&nbsp;&nbsp;if (wid-&gt;label)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Update Widget&quot;);
}
</pre></li>
<li>Make sure that all the resources that you allocate are freed in the callback function for the widget instance destructor:
<pre class="prettyprint">
static int
widget_instance_destroy(widget_context_h context,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_destroy_type_e reason, bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;wid);

&nbsp;&nbsp;&nbsp;if (wid-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;free(wid);

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
</ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

