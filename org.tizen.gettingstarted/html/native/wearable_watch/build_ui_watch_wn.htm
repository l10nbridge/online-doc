<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Building a Simple Wearable Native Watch UI</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Watch Application</a></li>
			<li><a href="#ui">Drawing the Watch UI</a></li>
			<li><a href="#ambient">Using the Ambient Mode</a></li>
		</ul>
	</div></div>	
</div>	

<div id="container"><div id="contents"><div class="content">
	
<h1>Building a Simple Wearable Native Watch UI</h1>

<p>The following example is based on a template project for a wearable watch application, which was introduced in <a href="create_project_watch_wn.htm">Creating a Wearable Watch Application Project</a>.</p>
<p>The template project makes it easy to create your watch application. Without modification, you can build and run the project. However, it is important to  understand the following template code to customize it.</p>


<h2 id="init" name="init">Initializing the Watch Application</h2>

<p>To initialize the watch application:</p>

<ol>
<li>To use the functions and data types of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;watch_app.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;watch_app.h&gt;
</pre>
<p>All header files that you need are already included in the <span style="font-family: Courier New,Courier,monospace">watchapplication.h</span> file, which is generated by the SDK when the template project is created.</p>
</li>
<li>Set the life-cycle callbacks in the <a href="../../../../org.tizen.native.wearable.apireference/structwatch__app__lifecycle__callback__s.html">watch_app_lifecycle_callback_s</a> structure, and pass the structure to the <span style="font-family: Courier New,Courier,monospace">watch_app_main()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application</a> API to start the watch application event loop:
<pre class="prettyprint">
int 
main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s callback = {0,};

&nbsp;&nbsp;&nbsp;callback.create = app_create;
&nbsp;&nbsp;&nbsp;callback.time_tick = app_time_tick;

&nbsp;&nbsp;&nbsp;ret = watch_app_main(argc, argv, &amp;callback, &amp;ad);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">create</span> event is triggered before the application main loop starts. In this callback, you can initialize the application resources, such as create windows and data structures.
<pre class="prettyprint">
static bool 
app_create(int width, int height, void* data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;// This usually means initializing the UI and application data

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">time_tick</span> event is triggered at least once per second. The watch applications can get the current time from the <span style="font-family: Courier New,Courier,monospace">watch_time</span> time handle to draw a normal watch.
<pre class="prettyprint">
static void 
app_time_tick(watch_time_h watch_time, void* data)
{
&nbsp;&nbsp;&nbsp;// Called at least once per second
&nbsp;&nbsp;&nbsp;// Draw a normal watch with the hour, minute, and second
}
</pre>
</li></ul>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">For more information on the application life-cycle callbacks, see <a href="../../../../org.tizen.guides/html/native/app/application_n.htm">Application</a>.</td> 
    </tr> 
   </tbody> 
  </table>
</li>
</ol>

<h2 id="ui" name="ui">Drawing the Watch UI</h2>

<p>To draw the watch UI, you need the current time handle and the window object of the idle screen:</p>

<ol>
<li>Get the window object with the <span style="font-family: Courier New,Courier,monospace">watch_app_get_elm_win()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application</a> API:

<pre class="prettyprint">
typedef struct 
appdata
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} appdata_s;

static void 
create_base_gui(appdata_s *ad, int width, int height)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;watch_time_h watch_time = NULL;
&nbsp;&nbsp;&nbsp;ret = watch_app_get_elm_win(&amp;ad-&gt;win);

&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;win, width, height);
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);      
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;label, width, height / 3);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;label, 0, height / 3);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label); 
&nbsp;&nbsp;&nbsp;ret = watch_time_get_current_time(&amp;watch_time);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get current time. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;update_watch(ad, watch_time, 0);
&nbsp;&nbsp;&nbsp;watch_time_delete(watch_time);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}

static bool 
app_create(int width, int height, void *date)
{
&nbsp;&nbsp;&nbsp;// Define system callbacks

&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad, width, height);

&nbsp;&nbsp;&nbsp;return true;
} 
</pre>
</li>
<li>You can get the current local time handle in the <span style="font-family: Courier New,Courier,monospace">time_tick</span> callback function and then draw the watch UI with the handle. For example, you can use the <span style="font-family: Courier New,Courier,monospace">watch_time_get_minute()</span> function of the Watch Application API to retrieve the current minute value.
<pre class="prettyprint">
static void 
update_watch(appdata_s *ad, watch_time_h watch_time, int ambient)
{
&nbsp;&nbsp;&nbsp;char watch_text[TEXT_BUF_SIZE];
&nbsp;&nbsp;&nbsp;int hour24, minute, second;
&nbsp;&nbsp;&nbsp;if (watch_time == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;watch_time_get_hour24(watch_time, &amp;hour24);
&nbsp;&nbsp;&nbsp;watch_time_get_minute(watch_time, &amp;minute);
&nbsp;&nbsp;&nbsp;watch_time_get_second(watch_time, &amp;second);
&nbsp;&nbsp;&nbsp;if (!ambient) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(watch_text, TEXT_BUF_SIZE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;align=center&gt;Hello Watch&lt;br/&gt;%02d:%02d:%02d&lt;/align&gt;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour24, minute, second);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(watch_text, TEXT_BUF_SIZE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;align=center&gt;Hello Watch&lt;br/&gt;%02d:%02d&lt;/align&gt;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour24, minute);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, watch_text);
}

static void 
app_time_tick(watch_time_h watch_time, void* data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;update_watch(ad, watch_time, 0);
} 
</pre></li></ol>

<h2 id="ambient" name="ambient">Using the Ambient Mode</h2>

<p>In a low-powered wearable device, an ambient mode is available. In this mode, the watch application shows a limited UI and receives only the ambient tick event every minute to reduce power consumption.</p>
<p>The details of the limited UI drawn in the ambient mode depend on the device. Usually, when designing the ambient mode UI, draw a black and white UI only, and use less than 20% of the pixels on the screen. If you do not want to draw your own ambient mode UI, set the <span style="font-family: Courier New,Courier,monospace">ambient-support</span> attribute to <span style="font-family: Courier New,Courier,monospace">false</span> in the watch application manifest file to allow the platform to show a default ambient mode UI.</p>


  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To use the ambient mode, the user must enable it in the device settings. In addition, in the Gear S2 device, the ambient mode activates only when you are wearing the watch on the wrist.</td> 
    </tr> 
   </tbody> 
  </table>
  
<p>To use the ambient mode:</p>

<ol>
<li>Define the ambient mode callbacks:
<ul><li>The <span style="font-family: Courier New,Courier,monospace">ambient_changed</span> callback is called when the ambient mode is enabled or disabled in the device. You can use the callback to initialize your ambient mode UI.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">ambient_tick</span> callback is called every minute while the device is in the ambient mode. You can use the callback to update the time on your watch application in the ambient mode. In this callback, do not perform time-consuming tasks and always update the UI as fast as possible. The platform can put the device to sleep shortly after the ambient tick expires.</li>
</ul>
<pre class="prettyprint">
static void 
app_ambient_tick(watch_time_h watch_time, void* data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;update_watch(ad, watch_time, 1);
}

static void 
app_ambient_changed(bool ambient_mode, void* data)
{
&nbsp;&nbsp;&nbsp;if (ambient_mode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare to enter the ambient mode
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare to exit the ambient mode
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Register the ambient mode callbacks:
<pre class="prettyprint">
int 
main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;callback.create = app_create;
&nbsp;&nbsp;&nbsp;callback.time_tick = app_time_tick;

&nbsp;&nbsp;&nbsp;callback.ambient_tick = app_ambient_tick;
&nbsp;&nbsp;&nbsp;callback.ambient_changed = app_ambient_changed;

&nbsp;&nbsp;&nbsp;ret = watch_app_main(argc, argv, &amp;event_callback, &amp;ad);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
</ol>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

