<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Debugging Applications</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#debug">Debug View</a></li>
			<li><a href="#methods">Application Debugging Methods</a></li>
			<li><a href="#remote">Remote Debugging</a></li>
			<li><a href="#logs">Debugging with Logs</a></li>
			<li><a href="#break">Break Points</a></li>
			<li><a href="#watch">Watch Points</a></li>
			<li><a href="#emulator">Debugging Applications on the Emulator</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Debugging Applications</h1> 
  <p>Debugging your application enables you to understand its flow of control. With the Tizen IDE, you can use various <a href="#methods">application debugging methods</a>. However, remember that the best way to debug an application is to not make bugs in the first place, so learn how to <a href="#logs">prevent bugs by using logs</a>.</p> 
  <p>The debugging environment uses <a href="http://www.gnu.org/software/gdb/gdb.html" target="_blank">GDB</a> (GNU Debugger) for debugging with the Emulator and a target device. GDB can debug both locally and <a href="#remote">remotely</a>. To ease the debugging process, you can set <a href="#break">break points</a> and <a href="#watch">watch points</a>, step in, step out, and step over break points, and watch variables to track the changes in their values in the <strong>Debug</strong> view.</p> 
  <p>Debugging native applications with Tizen IDE is same as with Eclipse CDT. For more information, see <a href="http://help.eclipse.org/luna/index.jsp?topic=%2Forg.eclipse.cdt.doc.user%2Ftasks%2Fcdt_o_debug.htm" target="blank">Debugging in Eclipse</a>.</p> 
  <h2 id="debug" name="debug">Debug View</h2> 
  <p>The <strong>Debug</strong> view provides debug control buttons that help you to track source code easily.</p> 

  <p>You can control debug execution in various ways. After a break point suspends the program execution, you can step through your program or suspend the program by force. To control the execution, use the following control buttons in the <strong>Debug</strong> view.</p> 
  <table> 
   <caption>
     Table: Debug view control buttons 
   </caption> 
   <tbody> 
    <tr> 
     <th>Button</th> 
     <th>Shortcut key</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><img alt="Resume" src="../images/debug_view_resume.png" /></td> 
     <td>F8</td> 
     <td>Resumes a suspended thread.</td> 
    </tr> 
    <tr> 
     <td><img alt="Step Into" src="../images/debug_view_stepinto.png" /></td> 
     <td>F5</td> 
     <td>Steps into the highlighted statement. <p>Executes the current line, and if the line contains a method, steps into the method.</p></td> 
    </tr> 
    <tr> 
     <td><img alt="Step Over" src="../images/debug_view_stepover.png" /></td> 
     <td>F6</td> 
     <td>Steps over the highlighted statement. <p>Executes the current line, and if the line contains a method, executes the method without entering it.</p></td> 
    </tr> 
    <tr> 
     <td><img alt="Step Return" src="../images/debug_view_stepreturn.png" /></td> 
     <td>F7</td> 
     <td>Step out of the current method.</td> 
    </tr> 
    <tr> 
     <td><img alt="Suspend" src="../images/debug_view_suspend.png" /></td> 
     <td>-</td> 
     <td>Suspends the selected thread.</td> 
    </tr> 
    <tr> 
     <td><img alt="Terminate" src="../images/debug_view_terminate.png" /></td> 
     <td>Ctrl + F2</td> 
     <td>Terminates the selected debug target.</td> 
    </tr> 
   </tbody> 
  </table> 
  
  <h2 name="methods" id="methods">Application Debugging Methods</h2> 
  <p>You can apply the normal or attached method for debugging a Tizen application.</p> 

  <h3 id="basic" name="basic">Normal Debugging</h3> 
  <p>The normal debugging method is used to debug from start to finish an executable Tizen application, which can be run as a standalone. To debug the application:</p> 
  <ol> 
   <li><p>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Debug As &gt; Tizen native Application</strong>.</p> <p>Debugging starts.</p> </li> 
   <li><p>To stop the program execution, select <strong>Run &gt; Suspend</strong> in the IDE menu. The program can be stopped also by a break point you have set before debugging.</p> </li> 
  </ol> 
  <p>You can debug the source code by, for example, checking variables, registers, and memory. You can also use the <strong>Step Over</strong>, <strong>Step In</strong>, and <strong>Resume</strong> buttons in the <strong>Debug</strong> view for step-by-step debugging actions.</p> 
  
  <h3 id="attach" name="attach">Attached Debugging</h3> 
  <p>The attached debugging method is effective for debugging Tizen applications that have no external interaction with the UI, such as middle-ware and libraries. This method attaches the &quot;gdb&quot; debugger to an application which is running in a target.</p> 
  <p>If the IDE workspace has a project that contains the source code of the application currently running on the target, you can apply &quot;attach debugging&quot; at a source level.</p> 
  <p>To debug the application:</p> 
  <ol> 
   <li><p>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Debug As &gt; Tizen native Application - Attach</strong>.</p> <p>The <strong>Select Process</strong> window shows the list of processes currently running on the target system.</p> </li> 
   <li><p>Select the process to which you want to attach the debugger, and click <strong>OK</strong>.</p> <p>Debugging starts.</p> <p>Note that if you type the name of the application in the text field shown on the upper part on the window, all processes matching the application are listed in the lower part.</p> </li> 
  </ol> 
 <h2 name="remote" id="remote">Remote Debugging</h2> 
  <p>The Tizen SDK supports remote debugging. Remote debugging is used to debug the OS Kernel or a system which cannot support local debugging. Remote debugging requires a &quot;GDB client&quot; on the host side and a &quot;GDB server&quot; on the target side. Both sides must be connected by serial or TCP/IP communication.</p> 
  <p class="figure">Figure: Remote debugging</p> 
  <p><img alt="Remote debugging" src="../images/remote_debug.png" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
  <h3 id="debug_remote" name="debug_remote">Remote Debugging Process</h3> 
  <p>A cross remote debugging environment is used to support the armel architecture of the Tizen devices. This means that the &quot;cross gdb&quot; and &quot;gdb server&quot; are used instead of native gdb and gdb server. Tizen also supports native (i386) remote debugging for the i386 emulator.</p> 
  <p>The Eclipse CDT based IDE supports the UI and control of the debugging process. The following figure shows the control flow of the remote debugging process.</p> 
  <p class="figure">Figure: Remote debugging control flow</p> 
  <p><img alt="Remote debugging control flow" src="../images/remote_debug_sdk.png" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
  
  <h2 name="logs" id="logs">Debugging with Logs</h2>

<p>EFL provides a tool (<span style="font-family: Courier New,Courier,monospace;">EINA_LOG</span>) for logging information. It has the following levels:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVEL_CRITICAL = 0</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVEL_ERR = 1</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVEL_WARN = 2</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVEL_INFO = 3</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVEL_DBG = 4</span></li>
</ul>

<p>Execute the application using one of the following commands:</p>
<pre class="prettyprint">
EINA_LOG_LEVEL=1 ./sample
// OR
export EINA_LOG_LEVEL=1
</pre>

<p>Use the <span style="font-family: Courier New,Courier,monospace;">EINA_LOG_LEVELS=elementary:1,evas:4</span> parameters to see the logs domain by domain, and change the log level using <span style="font-family: Courier New,Courier,monospace;">EINA_LOG_ABORT_LEVEL</span>.</p>
<p>To terminate the application when <span style="font-family: Courier New,Courier,monospace;">EINA_LOG</span> is shown, use <span style="font-family: Courier New,Courier,monospace;">EINA_LOG_ABORT=1</span>.</p>

<h3>Already Deleted Parameter Log</h3>
<p>The following log is shown when the <span style="font-family: Courier New,Courier,monospace;">ecore_idler_del()</span> function is used and the pointer address is deleted again.</p>
<p>When you use <span style="font-family: Courier New,Courier,monospace;">ecore_timer</span>, <span style="font-family: Courier New,Courier,monospace;">ecore_animator</span>, and <span style="font-family: Courier New,Courier,monospace;">ecore_idler</span>, you can often see this log.</p>

<pre class="prettyprint">
ERR&lt;4268&gt;:ecore ecore.c:558 _ecore_magic_fail()
*** ECORE ERROR: Ecore Magic Check Failed!!!
*** IN FUNCTION: ecore_idler_del()
ERR&lt;4268&gt;:ecore ecore.c:562 _ecore_magic_fail()&nbsp;&nbsp;&nbsp;Input handle has already been freed!
ERR&lt;4268&gt;:ecore ecore.c:571 _ecore_magic_fail() *** NAUGHTY PROGRAMMER!!!
*** SPANK SPANK SPANK!!!
*** Now go fix your code. Tut tut tut!
</pre>

<p>To fix the problem:</p>

<ol><li><p>Make a new <span style="font-family: Courier New,Courier,monospace;">ecore_idler</span> and save the pointer address to <span style="font-family: Courier New,Courier,monospace;">myidler</span>:</p>

<pre class="prettyprint">Ecore_Idler *myidler = ecore_idler_add(_idler_cb, data);</pre></li>

<li><p>Define the idler callback. When it returns <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_CANCEL</span>, the <span style="font-family: Courier New,Courier,monospace;">ecore_idler</span> is deleted. The pointer address in <span style="font-family: Courier New,Courier,monospace;">myidler</span> is not deleted. So you add <span style="font-family: Courier New,Courier,monospace;">myidler = NULL</span>:</p>
<pre class="prettyprint">
static Eina_Bool
_idler_cb(void *data)
{
&nbsp;&nbsp;&nbsp;myidler = NULL; 
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}
</pre>
<p>Similarly, if you use the <span style="font-family: Courier New,Courier,monospace;">ecore_idler_del()</span> function, add <span style="font-family: Courier New,Courier,monospace;">myidler = NULL</span>:</p>
<pre class="prettyprint">
if (myidler)
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_idler_del(myidler);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myidler = NULL;
}
</pre></li></ol>

<h3>Parameter Logs</h3>
<p>The following log is shown when the <span style="font-family: Courier New,Courier,monospace;">ecore_idler_del()</span> parameter is of the wrong type:</p>
<pre class="prettyprint">
ERR&lt;4266&gt;:ecore ecore.c:558 _ecore_magic_fail()
*** ECORE ERROR: Ecore Magic Check Failed!!!
*** IN FUNCTION: ecore_idler_del()
ERR&lt;4266&gt;:ecore ecore.c:568 _ecore_magic_fail()&nbsp;&nbsp;&nbsp;Input handle is wrong type
&nbsp;&nbsp;&nbsp;Expected: f7c614f3 - Ecore_Idler (Idler)
&nbsp;&nbsp;&nbsp;Supplied: 71737723 - &lt;UNKNOWN&gt;
ERR&lt;4266&gt;:ecore ecore.c:571 _ecore_magic_fail() *** NAUGHTY PROGRAMMER!!!
*** SPANK SPANK SPANK!!!
*** Now go fix your code. Tut tut tut!
</pre>


<h3>Part Name Logs</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">elm_object_part_content_set()</span> function is often used as follows:</p>
<pre class="prettyprint">
btn = elm_button_add(win)
elm_object_part_content_set(btn, &quot;hahaha&quot;, tmp);
</pre>
<p>The following log is shown when the <span style="font-family: Courier New,Courier,monospace;">hahaha</span> swallow part does not exist:</p>
<pre class="prettyprint">
ERR&lt;6919&gt;:elementary elm_layout.c:969 _elm_layout_elm_container_content_set() could not swallow 0x80000005a000002e into part 'hahaha'
</pre>

<h3>Premultiplied Color Log</h3>
<p>Evas supports a premultiplied color, where the RGB color values must be less than the alpha value:</p>

<pre class="prettyprint">evas_object_color_set(rect, 255, 0, 0, 100);</pre>
<p>If you write the above code, the following ERR log is shown:</p>

<pre class="prettyprint">ERR&lt;4639&gt;:evas_main lib/evas/canvas/evas_object_main.c:1313 _evas_object_color_set() Evas only handles pre multiplied colors!</pre>

<h3>EDC Logs</h3>
<p>The following examples are common mistakes when writing EDC:</p>

<ul><li>
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;circular_dependency&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;part1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 127 0 0 127;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 100 100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// FIXME: Circular Dependency !!
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 127 127;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 100 100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// FIXME: Circular Dependency !!
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;part1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;part1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If you write the EDC code like above, part1 is calculated by part2 and part2 is calculated by part1. The following log is shown because a recursive calculation has happened:</p>

<pre class="prettyprint">
ERR&lt;4365&gt;:edje lib/edje/edje_calc.c:3144 _edje_part_recalc() Circular dependency when calculating part &quot;part1&quot;. Already calculating XY [03] axes. Need to calculate Y [02] axes
</pre></li>

<li><pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;fixed&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;part1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 127 0 0 127;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 100 100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// FIXME: Ambiguous Size Setting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;part2&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 127 127;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 50 50;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 50 50;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>Part1 is calculated by part2 and part1 is of the minimum size, (100, 100). But the size of part2 is no bigger than 50. So edje has no idea how to calculate part1. Use <span style="font-family: Courier New,Courier,monospace;">fixed: 1 1;</span> on part1 for the correct calculation to fix the problem:</p>

<pre class="prettyprint">ERR&lt;4357&gt;:edje lib/edje/edje_util.c:3069 _edje_object_size_min_restricted_calc() file, group fixed has a non-fixed part 'part1'. Adding 'fixed: 1 1;' to source EDC may help. Continuing discarding faulty part.
</pre></li></ul>

<h2 name="break" id="break">Break Points</h2> 
  <p>A break point suspends the execution of a program at the location where the break point is set.</p> 
  <p>To set or unset a break point, right-click in the marker bar area on the left side of the editor, and select <strong>Toggle Breakpoint</strong>.</p> 
<!--
  <p class="figure">Figure: Setting break points</p> 
  <p style="text-align:center;"><img align="center" alt="Setting break points" src="../images/breakpoint_set.png" /></p> 
-->
  <p>You can view and manage the existing break points in the <strong>Breakpoints</strong> view:</p> 
  <ul> 
   <li>To remove a break point, right-click it and select <strong>Remove</strong>. <p>When you remove a break point, the corresponding icon is removed from the marker bar are in the editor too.</p> </li> 
   <li>To enable or disable a break point, toggle the check box of the break point, or right-click the break point and select <strong>Enable</strong> or <strong>Disable</strong>. <p>This allows you to temporarily disable a break point without losing the information it contains.</p> </li> 
  </ul> 
  <h3 id="properties" name="properties">Break Point Properties</h3> 
  <p>You can set break point properties for actions that are executed along with the break point code.</p> 
  <p>To edit the properties:</p> 
  <ol> 
   <li>Right-click in the marker bar area and select <strong>Breakpoint Properties</strong>.</li> 
   <li>To define actions, select <strong>Actions</strong> in the left side menu.</li> 
   <li>Click <strong>New</strong> and select an action type. The available action types are: 
    <ul> 
     <li>Sound Action <p>You can make sound when the break point stops.</p> </li> 
     <li>Log Action <p>You can see log messages in the <strong>Console</strong> view.</p> </li> 
     <li>Resume Action <p>The program execution continues after a specified time.</p> </li> 
     <li>External Tool Action <p>You can make your own action.</p> </li> 
    </ul></li> 
   <li>To define common properties where the break point stops, select <strong>Common</strong> in the left side menu. <p>For example, you can specify a condition using an expression. The break point stops the execution only if the condition is matched. The <strong>Ignore count</strong> field defines the count where the break point stops.</p></li> 
  </ol> 
  
  <h2 name="watch" id="watch">Watch Points</h2> 
  <p>A watch point suspends the execution of a program at the location where the expression is read or written.</p> 
  <p>To add a watch point:</p> 
  <ol> 
   <li>In the <strong>Variables</strong>, <strong>Outline</strong>, or <a href="#expressions">Expressions</a> view, right-click a variable, and select <strong>Add Watchpoint (C/C++)</strong>.</li> 
   <li>Define the details and click <strong>OK</strong>.</li> 
  </ol> 
  <p class="figure">Figure: Watch point details</p> 
  <p><img alt="Watch point details" src="../images/watchpoint_setting.png" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
  <p>The added watch points are displayed in the <strong>Breakpoints</strong> view.</p> 
  <p>To execute watch points, set the read/write access of the expression you want to watch. When running the application, the program breaks when the address of the expression is valid.</p> 
    
	
	<h3 name="expressions" id="expressions">Expressions View</h3> 
  <p>The <strong>Expressions</strong> view allows you to evaluate the data related to expressions.</p> 
  <p>The <strong>Expressions</strong> view can be used in the following ways:</p> 
  <ul> 
   <li>In the <strong>Expressions</strong> view: 
    <ol> 
     <li>Right-click and select <strong>Add Watch Expression</strong>.</li> 
     <li>Type the expression that you want to evaluate.</li> 
    </ol></li> 
   <li>In the <strong>Variables</strong> view: 
    <ol> 
     <li>Select the variable to watch.</li> 
     <li>Drag and drop it into the <strong>Expressions</strong> view.</li> 
    </ol></li> 
  </ul> 
  <p class="figure">Figure: Expressions view</p> 
  <p style="text-align:center;"><img alt="Expressions view" src="../images/expressions.png" /></p> 
  
  <h2 name="emulator" id="emulator">Debugging Applications on the Emulator</h2> 
  <p>You can debug Tizen native applications on the 
  	<a href="../../../org.tizen.devtools/html/common_tools/emulator.htm">
  	Emulator</a> using the <strong>Project Explorer</strong> view or the Tizen IDE menu.</p> 
  <p>To debug your application on the Emulator:</p> 
  <ol> 
   <li>Start the Emulator in the <strong>Connections</strong> view.<p></p></li> 
   <li><p>Start the debugging by doing one of the following:</p> 
    <ul> 
     <li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Debug As &gt; Tizen native Application</strong>.</li> 
     <li>In the Tizen IDE menu, go to <strong>Debug &gt; Debug As &gt; Tizen native Application</strong>.</li> 
     <li>On the Tizen IDE toolbar, click <strong>Debug</strong>.</li> 
    </ul> <p>If the application binary does not exist, it is built automatically for the Emulator.</p> <p>If many active Emulator instances are connected, select the Emulator to run the application from the dialog box.</p></li> 
   <li><p>The debug messages are displayed in the IDE&#39;s <strong>Console</strong> view. To see the GDB console, in the <strong>Console</strong> view, click the <strong>Display Selected Console</strong> button and select the option containing <strong>gdb</strong>. With the GDB console, you can also execute GDB commands.</p> <p>To display verbose GDB output in the GDB console:</p> 
    <ul> 
     <li>Right-click the <strong>Project Explorer</strong> view and select <strong>Debug As &gt; Debug Configurations</strong>.</li> 
     <li>On the <strong>Debugger</strong> tab, select <strong>Verbose console mode</strong> check box.</li> 
     <li>Click <strong>Debug</strong>.</li> 
    </ul> </li>

   <li><p>Use the application in the Emulator as you would in a target device.</p> 
   	<p>While the application is running, the IDE&#39;s 
   		<a href="../../../org.tizen.devtools/html/common_tools/log_view.htm">
   		Log view</a> shows the log, debug, and exception messages from the methods defined in the log macros.</p> </li>
	
   <li><p>To stop debugging, do one of the following:</p> 
    <ul> 
     <li>In the Tizen IDE, in the <strong>Console</strong> or <strong>Debug</strong> view, click the <strong>Terminate</strong> button. If the application execution is not suspended before you click the <strong>Terminate</strong> button, touch an arbitrary control on the screen or press a hard key on the Emulator after clicking <strong>Terminate</strong>.</li> 
     <li>On the Emulator, press the <strong>End</strong> key.</li> 
    </ul></li> 
  </ol> 
  <p>After debugging, run your application again to check its functionality and to ensure that the bugs detected during the debugging process are fixed. </p> 
  <p>In the Emulator settings, you can change the display language settings, keyboard language settings, proxy address, and location settings. In addition, you can use the 
  	<a href="../../../org.tizen.devtools/html/common_tools/emulator.htm#ecp">Emulator Control Panel</a> to generate application events (such as sensor data, incoming calls, or location data) for debugging and testing purposes.</p> 
  
  
	
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>