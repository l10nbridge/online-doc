<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Alarm: Setting and Managing Alarms</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#init">Initializing the Alarm Functionality</a></li>
			<li><a href="#scenario_1">Setting an Alarm after Specific Time</a></li>
			<li><a href="#scenario_2">Setting an Alarm on a Specific Date</a></li>
			<li><a href="#scenario_3">Setting a Recurring Alarm at a Specific Time of the Day</a></li>
			<li><a href="#scenario_4">Listing All Scheduled Alarms and Canceling an Alarm</a></li>			
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/alarm_n.htm">Alarm Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ALARM__MODULE.html">Alarm API for Mobile Native</a></li> 
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ALARM__MODULE.html">Alarm API for Wearable Native</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Alarm: Setting and Managing Alarms</h1>


<p>This tutorial demonstrates how you can set various alarms and cancel them when no longer needed.</p> 

<h2>Warm-up</h2>
<p>Become familiar with the Alarm API basics by learning about:</p>

<ul>
	<li><a href="#init">Initializing the Alarm Functionality</a>
	<p>Initialize the alarm functionality for use.</p></li>
	<li><a href="#scenario_1">Setting an Alarm after Specific Time</a>
	<p>Set single alarms at specific times.</p></li>
	<li><a href="#scenario_2">Setting an Alarm on a Specific Date</a>
	<p>Set an alarm on a specific date.</p></li>
	<li><a href="#scenario_3">Setting a Recurring Alarm at a Specific Time of the Day</a>
	<p>Set a recurring alarm for a period of time at a specific time.</p></li>
	<li><a href="#scenario_4">Listing All Scheduled Alarms and Canceling an Alarm</a>
	<p>List all alarms and cancel them.</p></li>	
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the Alarm API, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/alarm.get&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/alarm.set&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

<h2 id="init" name="init">Initializing the Alarm Functionality</h2>

<p>To initialize the alarm functionality:</p>
<ol><li>To use the functions and data types of the Alarm API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ALARM__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ALARM__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;app_alarm.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;app_alarm.h&gt;
</pre></li>
</ol>

<h2 id="scenario_1" name="scenario_1">Setting an Alarm after Specific Time</h2>

<table class="note">
    <tbody>
     <tr>
      <th class="note">Note</th>
     </tr>
     <tr>
      <td class="note">Since 2.4, the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_after_delay()</span> function does not support an exact period and delay to minimize the wake-ups of the device. The system can adjust when the alarm expires.</td>
     </tr>
    </tbody>
</table>


<p>To set an alarm after a specific time:</p>

<ol>

<li>
<p><strong>Implement the AlarmRegister application</strong></p>
<ol type="a"><li>
<p>To identify which application to start when the alarm expires, the Alarm API needs the <span style="font-family: Courier New,Courier,monospace">app_control_h</span> handle.</p>
<p>Obtain the <span style="font-family: Courier New,Courier,monospace">app_control_h</span> handle of a specific app by calling the <span style="font-family: Courier New,Courier,monospace">app_control_set_app_id()</span> function. You can get the AlarmTarget <span style="font-family: Courier New,Courier,monospace">app_id</span> from the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file. </p>

<pre class="prettyprint">
bool
init_alarm()
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;&nbsp;int DELAY = 2;
&nbsp;&nbsp;&nbsp;&nbsp;int REMIND = 1;
&nbsp;&nbsp;&nbsp;&nbsp;int alarm_id;

&nbsp;&nbsp;&nbsp;&nbsp;app_control_h app_control = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;ret = app_control_create(&amp;app_control);
&nbsp;&nbsp;&nbsp;&nbsp;ret = app_control_set_operation(app_control, APP_CONTROL_OPERATION_DEFAULT);
&nbsp;&nbsp;&nbsp;&nbsp;ret = app_control_set_app_id(app_control, &quot;org.tizen.alarmslave&quot;);
</pre>
</li>

<li>

	<p>To schedule an alarm after a delay, use the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_after_delay()</span> function:</p>
 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;ret = alarm_schedule_after_delay(app_control, DELAY, REMIND, &amp;alarm_id);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre> 
</li></ol></li>

<li>
<p><strong>Implement the AlarmTarget application</strong></p>
<p>A scheduled alarm calls AlarmTarget&#39;s <span style="font-family: Courier New,Courier,monospace">app_control_cb()</span> callback when the alarm expires:</p>

<pre class="prettyprint">
void
service_app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;app_control called by Alarm API.&quot;);
}
</pre>
</li>
</ol>

<h2 id="scenario_2" name="scenario_2">Setting an Alarm on a Specific Date</h2>

<p>To schedule an alarm on a specific date, use the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_at_date()</span> function.</p>
<p>The second parameter defines the time of the first active alarm. It can be defined using the <span style="font-family: Courier New,Courier,monospace">tm</span> struct included in the <span style="font-family: Courier New,Courier,monospace">&lt;time.h&gt;</span> header file. The following table lists the selected <span style="font-family: Courier New,Courier,monospace">tm</span> fields.</p>

<table> 
   <caption>
     Table: tm fields 
   </caption> 
   <tbody> 
    <tr> 
     <th>Member</th> 
     <th>Type</th> 
	 <th>Meaning</th>
	 <th>Range</th>
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_sec</span></td> 
     <td>int</td> 
	 <td>Seconds after the minute</td> 
	 <td>0-61*</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_min</span></td> 
     <td>int</td> 
	 <td>Minutes after the hour</td> 
	 <td>0-59</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_hour</span></td> 
     <td>int</td> 
	 <td>Hours since midnight</td> 
	 <td>0-23</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_mday</span></td> 
     <td>int</td> 
	 <td>Day of the month</td> 
	 <td>1-31</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_mon</span></td> 
     <td>int</td> 
	 <td>Months since January</td> 
	 <td>0-11</td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">tm_year</span></td> 
     <td>int</td> 
	 <td>Years since 1900</td> 
	 <td></td> 
    </tr> 	
   </tbody> 
  </table> 

			
<p>The following code schedules an application control to invoke after 4 seconds (using the <span style="font-family: Courier New,Courier,monospace">date.tm_sec</span> member). Using, for example, <span style="font-family: Courier New,Courier,monospace">date.tm_mday</span>, can set the alarm to another day of the month. Since the third parameter is set to 0, the alarm is executed only once.</p>
<pre class="prettyprint">
struct tm date;
ret = alarm_get_current_time(&amp;date);

date.tm_sec+=4;
ret = alarm_schedule_at_date(app, &amp;date, 0, &amp;alarm_id);
</pre>

<table class="note">
    <tbody>
     <tr>
      <th class="note">Note</th>
     </tr>
     <tr>
      <td class="note">The <span style="font-family: Courier New,Courier,monospace">alarm_schedule_at_date()</span> function has been deprecated since Tizen 2.4. Use the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_once_at_date()</span> function instead.</td>
     </tr>
    </tbody>
</table>


<h2 id="scenario_3" name="scenario_3">Setting a Recurring Alarm at a Specific Time of the Day</h2>


<p>To schedule an alarm on a specific time of the day with a recurrence, use the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_with_recurrence_week_flag()</span> function.</p>
<p>The third parameter defines the day of the week on which the alarm recurs. The value is defined with the <span style="font-family: Courier New,Courier,monospace">enum alarm_week_flag_e</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ALARM__MODULE.html#gaa2b3960fe55c63cb3f6739758bd172ee">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ALARM__MODULE.html#gaa2b3960fe55c63cb3f6739758bd172ee">wearable</a> applications), and can be a combination of days, for example <span style="font-family: Courier New,Courier,monospace">ALARM_WEEK_FLAG_TUESDAY | ALARM_WEEK_FLAG_FRIDAY</span>. The value can also be a binary, such as <span style="font-family: Courier New,Courier,monospace">1&lt;&lt;3 | 1&lt;&lt;6</span>.</p>

<p>The following code schedules an application control to invoke on TUESDAY and FRIDAY:</p>
  
<pre class="prettyprint">
struct tm date;
ret = alarm_get_current_time(&amp;date);

time_t time_current = mktime(&amp;date);
dlog_print(DLOG_INFO, TAG, &quot;Schedule on date: %s &quot;, ctime(&amp;time_current));
ret = alarm_schedule_with_recurrence_week_flag(app_control, &amp;date,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ALARM_WEEK_FLAG_TUESDAY | ALARM_WEEK_FLAG_FRIDAY, &amp;alarm_id);
</pre>

<h2 id="scenario_4" name="scenario_4">Listing All Scheduled Alarms and Canceling an Alarm</h2>


<p>To list all scheduled alarms, use the <span style="font-family: Courier New,Courier,monospace">alarm_foreach_registered_alarm()</span> function.</p>

<p>To cancel a specific scheduled alarm, use the <span style="font-family: Courier New,Courier,monospace">alarm_cancel()</span> function with the alarm ID. To cancel all alarms registered by the application, use the <span style="font-family: Courier New,Courier,monospace">alarm_cancel_all()</span> function.</p>

<p>The following code implements the callback for the <span style="font-family: Courier New,Courier,monospace">alarm_foreach_registered_alarm()</span> function. It lists all registered alarms and alarm recurrence days. At the end of the function, the <span style="font-family: Courier New,Courier,monospace">alarm_cancel()</span> function is called to cancel every scheduled alarm.</p>
<pre class="prettyprint">
static bool
on_foreach_registered_alarm(int alarm_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int flag;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;struct tm date;
&nbsp;&nbsp;&nbsp;&nbsp;time_t time_current;

&nbsp;&nbsp;&nbsp;&nbsp;ret = alarm_get_scheduled_date(alarm_id, &amp;date);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ALARM_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Get time Error: %d &quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;/* Logging scheduled alarm info */
&nbsp;&nbsp;&nbsp;&nbsp;time_current = mktime(&amp;date);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Registered alarm:%d on date:%s &quot;, alarm_id, ctime(&amp;time_current));

&nbsp;&nbsp;&nbsp;&nbsp;ret = alarm_get_scheduled_recurrence_week_flag(alarm_id, &amp;flag);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret == 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_SUNDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on SUNDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_MONDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on MONDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_TUESDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on TUESDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_WEDNESDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on WEDNESDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_THURSDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on THURSDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_FRIDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on FRIDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (flag &amp; ALARM_WEEK_FLAG_SATURDAY)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, TAG, &quot;Alarm Recurrence on SATURDAY \n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/* Cancel scheduled alarms */
&nbsp;&nbsp;&nbsp;&nbsp;ret = alarm_cancel(alarm_id);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ALARM_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Cancel Error: %d &quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

ret = alarm_foreach_registered_alarm(on_foreach_registered_alarm, NULL);
if (ret != ALARM_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, TAG, &quot;Listing Error: %d &quot;, ret);
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
