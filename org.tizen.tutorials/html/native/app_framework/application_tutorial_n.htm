<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Application: Using Alarms, Preferences, AppControl, and Other Fundamentals</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#fundamentals">Handling the Application Fundamentals</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/application_n.htm">Application Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__APPLICATION__MODULE.html">Application API for Mobile Native</a></li> 
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__APPLICATION__MODULE.html">Application API for Wearable Native</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Application: Using Alarms, Preferences, AppControl, and Other Fundamentals</h1>


<p>This tutorial demonstrates how you can manage application fundamentals, such as application life-cycle callbacks.</p> 

<h2>Warm-up</h2>
<p>Become familiar with the Application API basics by learning about:</p>

<ul>
	<li><a href="#fundamentals">Handling the Application Fundamentals</a> <p>Define the application entry point and life-cycle callbacks.</p></li>
</ul>

<p>For additional application-related features, see:</p> 
<ul>
	<li><a href="alarm_tutorial_n.htm">Alarm: Setting and Managing Alarms</a> 
	<p>Set and cancel various alarms.</p></li>	
	<li><a href="appcontrol_tutorial_n.htm">App Control: Launching Applications and Managing Groups</a> 
	<p>Launch other applications and manage application groups.</p></li>	
	<li><a href="event_tutorial_n.htm">Event: Managing Events</a> 
	<p>Broadcast and subscribe to system and user-defined events.</p></li>	
	<li><a href="preference_tutorial_n.htm">Preference: Managing Preferences</a> 
	<p>Manage application preferences.</p></li>		
</ul>

 <h2 id="fundamentals" name="fundamentals">Handling the Application Fundamentals</h2>

<p>The Application API is the framework all Tizen applications are based on. It is simple and only handles interactions between applications and the operating system.</p>
<p>An application starts with the <span style="font-family: Courier New,Courier,monospace;">main()</span> function. It initializes the Application API and starts it.</p>
<p>The following code is the minimal application using the Application API. It only builds and runs.</p>
<pre class="prettyprint">
// Add this include to be able to use the functions from the Application API
#include &lt;app.h&gt;

int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;// Create a ui_app_lifecycle_callback_s object and initialize its contents to 0
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;// Run the application
&nbsp;&nbsp;&nbsp;return ui_app_main(&amp;argc, &amp;argv, &amp;event_callback, NULL);
}
</pre>

<p>The Application API has 2 classes of application state callbacks: those about the application&#39;s life-cycle and those about the system.</p>
<p>The application&#39;s life-cycle callbacks are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">create</span>: First initialization, comes after <span style="font-family: Courier New,Courier,monospace;">ui_app_main()</span> has been called and initializes UI.</li>
<li><span style="font-family: Courier New,Courier,monospace;">control</span>: Triggered when the application is started to do something. It can be called several times during the lifespan of an application, it shows the screen for the action requested. It requires specific information given to the callback.</li>
<li><span style="font-family: Courier New,Courier,monospace;">terminate</span>: Saves work, releases resources, and exits.</li>
<li><span style="font-family: Courier New,Courier,monospace;">pause</span>: Sets the application&#39;s window not visible and switches to a mode which uses less resources.</li>
<li><span style="font-family: Courier New,Courier,monospace;">resume</span>: Sets the application&#39;s window to be visible again.</li>
</ul>

<p>The system-related callbacks can be handled with the <span style="font-family: Courier New,Courier,monospace;">app_event_cb()</span> callback:</p>
<ul>
	   <li><span style="font-family: Courier New,Courier,monospace;">APP_EVENT_LOW_MEMORY</span>: Event type responsible for saving data in the main memory to a persistent memory or storage to avoid data loss in case the Tizen platform Low Memory Killer kills your application to get more free memory. The event is also used to release any cached data in the main memory to secure more free memory.</li>
	   <li><span style="font-family: Courier New,Courier,monospace;">APP_EVENT_LOW_BATTERY</span>: Event type responsible for saving data in the main memory to a persistent memory or storage to avoid data loss in case the power goes off completely. The event is also used to stop heavy CPU consumption or power consumption activities to save the remaining power.</li>
	   <li><span style="font-family: Courier New,Courier,monospace;">APP_EVENT_DEVICE_ORIENTATION_CHANGED</span>: Event type responsible for changing the display orientation to match the device orientation.</li>
	   <li><span style="font-family: Courier New,Courier,monospace;">APP_EVENT_LANGUAGE_CHANGED</span>: Event type responsible for refreshing the display into the new language.</li>
	   <li><span style="font-family: Courier New,Courier,monospace;">APP_EVENT_REGION_FORMAT_CHANGED</span>: Event type responsible for refreshing the display into the new time zone.</li>
</ul>

<p>A basic implementation is shown in the following example:</p>
<pre class="prettyprint">
#include &lt;app.h&gt;

// Structure to store the data for application&#39;s logic; it is given
// to each callback invoked through the Application API
typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;char *several;
&nbsp;&nbsp;&nbsp;char *fields;
} appdata_s;

static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before main event loop starts; this
&nbsp;&nbsp;&nbsp;// usually means initializing UI and application&#39;s data (the &quot;data&quot;
&nbsp;&nbsp;&nbsp;// parameter to this function)

&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_gui(ad);

&nbsp;&nbsp;&nbsp;// If this function returns true, the main loop of application starts
&nbsp;&nbsp;&nbsp;// If this function returns false, the application is terminated
&nbsp;&nbsp;&nbsp;return true;
}

static void
app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;// Handles the launch request, show the user the task requested through the
&nbsp;&nbsp;&nbsp;// &quot;app_control&quot; parameter (detailed in the next section)
}

static void
app_pause(void *data)
{
&nbsp;&nbsp;&nbsp;// Takes necessary actions when application becomes invisible
}

static void
app_resume(void *data)
{
&nbsp;&nbsp;&nbsp;// Takes necessary actions when application becomes visible
}

static void
app_terminate(void *data)
{
&nbsp;&nbsp;&nbsp;// Releases all resources
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;if (!ad) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// If specific steps are needed:
&nbsp;&nbsp;&nbsp;// destroy_gui(ad);
}

int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;// Sets the callbacks for the application&#39;s logic; explanation on the
&nbsp;&nbsp;&nbsp;// implementation below
&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;// Note the &amp;ad below; this is how the struct is given to callbacks
&nbsp;&nbsp;&nbsp;return ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
}
</pre>

<p> The last section of this tutorial describes app control. It is a mechanism through which an application receives additional information about why it was started and with which parameters.</p>
<p>An application receives a handle to an app control object in the <span style="font-family: Courier New,Courier,monospace;">app_control</span> callback. A definition for that callback is: </p>
<pre class="prettyprint">app_control_cb(app_control_h app_control, void *user_data);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">app_control_h</span> type is opaque and information can only be extracted from it through functions from the SDK.</p>
<p>The most interesting ones are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">app_control_get_operation()</span>: Retrieves a string describing which operation the application was started for.</li>
<li><span style="font-family: Courier New,Courier,monospace;">app_control_get_mime()</span>: Retrieves the MIME type of the data (such as image/jpg).</li>
<li><span style="font-family: Courier New,Courier,monospace;">app_control_get_app_extra_data()</span>: Gets the string value associated with the given key.</li>
<li><span style="font-family: Courier New,Courier,monospace;">app_control_get_app_extra_data_array()</span>: Gets the string array associated with the given key (first check with <span style="font-family: Courier New,Courier,monospace;">app_control_is_extra_data_array()</span> whether the data associated with a key is an array).</li>
</ul>
<p>If other functions are needed, check the <span style="font-family: Courier New,Courier,monospace;">app.h</span> header.</p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
