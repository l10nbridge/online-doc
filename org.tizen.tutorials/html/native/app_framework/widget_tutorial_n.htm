<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Widget Application: Creating Widget Applications</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Widget Application</a></li>
			<li><a href="#create">Creating the Widget Application</a></li>	 
			<li><a href="#life-cycle">Managing Widget Object Life-cycle Callbacks</a></li>	 
			<li><a href="#get_window">Drawing the Widget UI</a></li>	 
			<li><a href="#get_instance">Managing the Widget Instance</a></li>	 		
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/widget_n.htm">Widget Application Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Widget Application: Creating Widget Applications</h1>

  
<p>This tutorial demonstrates how you can create a widget application.</p>

  
<h2>Warm-up</h2>
<p>Become familiar with the Widget Application API basics by learning about:</p>
	<ul>
		 <li><a href="#init">Initializing the Widget Application</a>
		 <p>Initialize a widget application for use.</p></li>
		 <li><a href="#create">Creating the Widget Application</a>
		 <p>Create a widget application, and define and register the system callbacks.</p></li>	 
		 <li><a href="#life-cycle">Managing Widget Object Life-cycle Callbacks</a>
		 <p>Define and register the life-cycle callbacks.</p></li>	 
		 <li><a href="#get_window">Drawing the Widget UI</a>
		 <p>Create a UI object of the widget on the home screen.</p></li>	 
		 <li><a href="#get_instance">Managing the Widget Instance</a>
		 <p>Get the widget instance and the instance ID.</p></li>	 		 
	</ul>


 <h2 id="init" name="init">Initializing the Widget Application</h2>
 
<p>To initialize the widget application:</p>
<ol>
<li>To use the functions and data types of the Widget Application API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WIDGET__APP__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;widget_app.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;widget_app.h&gt;
</pre></li>
<li>Edit the widget application settings in the <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#widget_app">manifest</a> file.</li>
</ol>

 <h2 id="create">Creating the Widget Application</h2> 
 
<p>To create the widget application:</p>
<ol>
<li>
<p>Start and initialize the application with the <span style="font-family: Courier New,Courier,monospace">main()</span> function.</p>
<p>Set up the <span style="font-family: Courier New,Courier,monospace">widget_app_lifecycle_callback_s</span> structure variable for the widget instance life-cycle callbacks, define the life-cycle functions for the widget application itself (<span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> for initialization and <span style="font-family: Courier New,Courier,monospace">widget_app_terminate()</span> for termination), and call the <span style="font-family: Courier New,Courier,monospace">widget_app_main()</span> to start the application event loop.</p>
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;widget_app_lifecycle_callback_s ops = {0,};
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;ops.create = widget_app_create;
&nbsp;&nbsp;&nbsp;ops.terminate = widget_app_terminate;

&nbsp;&nbsp;&nbsp;ret = widget_app_main(argc, argv, &amp;ops, NULL);
&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;widget_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
} 
</pre>
</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> function to initialize any resources that can be shared among widget instances. This function is called before the main event loop starts.
<pre class="prettyprint">
widget_class_h widget_app_create (void *user_data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before main event loop starts
&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s obj_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;// Register the callback functions for the widget object life-cycle
</pre>
</li>

<li>Register the callback functions for the system events.
<p>At the end of the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> function, remember to create a widget instance class and return a handle for it, so that the handle can be used for making widget instances.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Register the callback functions for system events
&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_low_battery, NULL);
&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_low_memory, NULL);
&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_lang_changed, NULL);
&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APP_EVENT_REGION_FORMAT_CHANGED, widget_app_region_changed, NULL);

&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre>
<p>When the system-related callback are no longer needed, remove them with the <span style="font-family: Courier New,Courier,monospace">widget_app_remove_event_handler()</span> function.</p>
</li>

<li>Define the callback functions for the system events:
<pre class="prettyprint">
void widget_app_lang_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take actions when language setting changes and messages must be translated
&nbsp;&nbsp;&nbsp;char *locale = NULL;
&nbsp;&nbsp;&nbsp;app_event_get_language(event_info, &amp;locale);
&nbsp;&nbsp;&nbsp;elm_language_set(locale);
&nbsp;&nbsp;&nbsp;free(locale);
}
 
void widget_app_region_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take actions when the time zone changes
}
 
void widget_app_low_battery(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take actions when system is running low on battery (less than 5%)
&nbsp;&nbsp;&nbsp;// Save the work and avoid battery-intensive processes
&nbsp;&nbsp;&nbsp;widget_app_exit();
}
 
void widget_app_low_memory(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take actions when system is running on low memory
&nbsp;&nbsp;&nbsp;// Save the work and release resources; if necessary, some apps can be killed
&nbsp;&nbsp;&nbsp;widget_app_exit();
}
</pre>
</li>

<li>When you no longer need the widget application, release the resources and terminate the application:
<pre class="prettyprint">
static void
widget_app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
} 
</pre>
</li>
</ol>

<h2 id="life-cycle">Managing Widget Object Life-cycle Callbacks</h2>
<p>To manage the widget object life-cycle:</p>
<ol>
<li>Define the widget object life-cycle callbacks:
<ul>
<li>This callback is triggered when the widget instance is created.
<p>Initialize resources for this widget instance and <a href="#get_window">draw the UI</a>. If bundle content is not NULL, restore the previous status.</p>
<pre class="prettyprint">
int widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*) malloc(sizeof(widget_instance_data_s));
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;if (content != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Recover the previous status with the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create the UI

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>

<li>This callback is triggered when the widget instance is destroyed. 
<p>Release all widget resources. If the <span style="font-family: Courier New,Courier,monospace">reason</span> for the termination is not <span style="font-family: Courier New,Courier,monospace">WIDGET_APP_DESTROY_TYPE_PERMANENT</span>, store the current status with the incoming bundle.</p>
<pre class="prettyprint">
int widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason, bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Save the current status at the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
} 
</pre>

</li>

<li>This callback is triggered when the widget instance is paused.
<p>Take the necessary actions since the widget instance becomes invisible. The framework can destroy a paused widget instance.</p>
<pre class="prettyprint">
int widget_instance_pause(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
<li>This callback is triggered when the widget instance is resumed.
<p>Take the necessary actions since the widget instance becomes visible.</p>
<pre class="prettyprint">
int widget_instance_resume(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
<li>This callback is triggered before the widget instance is resized.
<p>Take the necessary actions to accommodate the new size.</p>
<pre class="prettyprint">
int widget_instance_resize(widget_context_h context, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
} 
</pre>
</li>
<li>This callback is triggered when a widget update event is received.
<p>Take the necessary actions for the widget update. If the <span style="font-family: Courier New,Courier,monospace">force</span> parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, the widget can be updated even in the pause state.</p>
<pre class="prettyprint">
int widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
</ul>
</li>

<li>Register the callbacks in the <span style="font-family: Courier New,Courier,monospace">widget_instance_lifecycle_callback_s</span> structure during the widget application initialization:
<pre class="prettyprint">
widget_class_h widget_app_create (void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s obj_callback = {0,};
&nbsp;&nbsp;&nbsp;// Register the callback functions
&nbsp;&nbsp;&nbsp;obj_callback.create = widget_instance_create;
&nbsp;&nbsp;&nbsp;obj_callback.destroy = widget_instance_destroy;
&nbsp;&nbsp;&nbsp;obj_callback.pause = widget_instance_pause;
&nbsp;&nbsp;&nbsp;obj_callback.resume = widget_instance_resume;
&nbsp;&nbsp;&nbsp;obj_callback.resize = widget_instance_resize;
&nbsp;&nbsp;&nbsp;obj_callback.update = widget_instance_update;

&nbsp;&nbsp;&nbsp;// Register system-related callbacks

&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre>
</li>
</ol>

<h2 id="get_window">Drawing the Widget UI</h2>

<p>To draw the widget UI, you must get a window object with the <span style="font-family: Courier New,Courier,monospace">widget_app_get_elm_win()</span> function and create the UI on the home screen:</p>
<pre class="prettyprint">
#include &lt;widget_app_efl.h&gt;

typedef struct widget_instance_data 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} 
widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*) malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;if (content != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Recover the previous status with the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);
&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_FAULT;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;win, w, h);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;wid-&gt;conform = elm_conformant_add(wid-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(wid-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(wid-&gt;win, wid-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;label, w, h / 3);
&nbsp;&nbsp;&nbsp;evas_object_move(wid-&gt;label, 0, h / 3);
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;label);
&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Hello widget&quot;);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;win);

&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}

int widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason, bundle *content, void *user_data)
{

&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Save the current status at the bundle object
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&wid);

&nbsp;&nbsp;&nbsp;if (wid-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;free(wid);

&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}

</pre>

<h2 id="get_instance">Managing the Widget Instance</h2>

<p>To manage the widget instance:</p>
<ol>
<li>You can set a customized widget instance with the <span style="font-family: Courier New,Courier,monospace">widget_app_context_set_tag()</span> function when the instance is created. To update or destroy the customized widget, get the instance with the <span style="font-family: Courier New,Courier,monospace">widget_app_context_get_tag()</span> function.
<pre class="prettyprint">
typedef struct 
{
&nbsp;&nbsp;&nbsp;int val1;
} user_defined_s;


int widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;user_defined_s *uds = (user_defined_s*)malloc(sizeof(user_defined_s));
&nbsp;&nbsp;&nbsp;uds-&gt;val1 = 0;
&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, uds);
}

int widget_instance_destroy(widget_context_h context, widget_destroy_type_e reason, bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;user_defined_s *uds = NULL;
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;uds);
&nbsp;&nbsp;&nbsp;free(uds);
}

int widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;user_defined_s *uds = NULL;
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;uds);
&nbsp;&nbsp;&nbsp;uds-&gt;val1 = 1;
}
</pre>
</li>

<li>Get the widget instance ID:
<pre class="prettyprint">
int widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;const char *inst_id = NULL;
&nbsp;&nbsp;&nbsp;inst_id = widget_app_get_id(context);
}
</pre></li>
</ol>



<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
