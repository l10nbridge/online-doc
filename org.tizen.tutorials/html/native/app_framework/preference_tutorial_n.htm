<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Preference: Managing Preferences</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#manage_pref">Managing Application Preferences</a></li>			
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/application_n.htm">Application Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PREFERENCE__MODULE.html">Preference API for Mobile Native</a></li> 
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__PREFERENCE__MODULE.html">Preference API for Wearable Native</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Preference: Managing Preferences</h1>


<p>This tutorial demonstrates how you can manage application preferences.</p> 

<h2>Warm-up</h2>
<p>Become familiar with the Preference API basics by learning about:</p>

<ul>
	<li><a href="#manage_pref">Managing Application Preferences</a><p>Manage application preferences.</p></li>
</ul>

 <h2 id="manage_pref" name="manage_pref">Managing Application Preferences</h2>

 <p>You can set and get application preference data. Any stored preference data can also be shared with among the applications in the same package.</p>
 
<p>To manage preferences:</p>

<ol><li>			
<p>To use the functions and data types of the Preference API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PREFERENCE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__PREFERENCE__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;app.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;app_preference.h&gt;
</pre></li>

<li>Store and retrieve simple type variables.
<p>To store a variable, you must create a key-value pair. Use the following functions to create a key-value pair for a specific simple type:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_set_int(const char *key, int value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_set_double(const char *key, double value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_set_boolean(const char *key, bool value)</span></li></ul>

<p>Before storing or retrieving a variable, check whether it exists using:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_is_existing(const char *key, bool *existing)</span></li></ul>

<p>Use the following functions to retrieve a stored variable of a given simple type:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">preference_get_int(const char *key, int *value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_get_double(const char *key, double *value)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">preference_get_boolean(const char *key, bool *value)</span></li></ul>


<pre class="prettyprint">
const char *integer_key = &quot;integer_key&quot;;
int integer_value = 1;
int integer_output;

preference_set_int(integer_key, integer_value);

preference_is_existing(integer_key, &amp;existing);

preference_get_int(integer_key, &amp;integer_output);
</pre></li>


<li>Use the following functions to store and retrieve string variables:

<ul>
 <li><span style="font-family: Courier New,Courier,monospace">preference_set_string(const char *key, const char *value)</span></li>
 <li><span style="font-family: Courier New,Courier,monospace">preference_get_string(const char *key, char **value)</span></li>
</ul>

<p>Release the value returned by the get function using the <span style="font-family: Courier New,Courier,monospace">free()</span> function.</p>
<pre class="prettyprint">
const char *string_key = &quot;string_key&quot;;
const char *string_value = &quot;Sample content&quot;;
char *string_output;
bool existing;

preference_set_string(string_key, string_value);

preference_is_existing(string_key, &amp;existing);

preference_get_string(string_key, &amp;string_output);

free(string_output);
</pre></li>

<li>Track variables.
<p>You can set a different callback function to each variable. The callback function is invoked each time the variable is changed.</p>

<pre class="prettyprint">
int previous_value;

preference_set_changed_cb(integer_key, preference_changed_cb_impl, &amp;previous_value);
</pre>

<p>Pass custom parameters to the callback function in the <span style="font-family: Courier New,Courier,monospace">user_data</span> field.</p>

<pre class="prettyprint">
void 
preference_changed_cb_impl(const char *key, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;int integer_output = 0;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;[preference_changed_cb_impl]\n&quot;);
&nbsp;&nbsp;&nbsp;preference_get_int(key, &amp;integer_output);
     
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Key: %s has changed its value to %d \n&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key, integer_output);
}
</pre>


<p>Unset a callback function based on a variable key.</p>
<pre class="prettyprint">preference_unset_changed_cb(const char *key);</pre></li>


<li>List all records with the foreach function. The function calls a specific callback function for each key-value pair in the database. You can pass additional data to the function in the <span style="font-family: Courier New,Courier,monospace">user_data</span> field.

<pre class="prettyprint">preference_foreach_item(preference_foreach_item_cb, NULL);</pre>

<p>If the callback function returns <span style="font-family: Courier New,Courier,monospace">false</span>, or if all the records have been opened, the foreach function ends.</p>
 
<pre class="prettyprint">
bool 
preference_foreach_item_cb(const char *key, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;[preference_foreach_item_cb]\n&quot;);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Key found: %s\n&quot;, key);

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li>Delete records one by one using a unique key. You can also delete all records for an application using the <span style="font-family: Courier New,Courier,monospace">remove_all()</span> function.

<pre class="prettyprint">
preference_remove(const char *key)

preference_remove_all(void)
</pre></li></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
