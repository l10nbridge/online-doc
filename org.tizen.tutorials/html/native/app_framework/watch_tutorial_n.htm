<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Watch Application: Creating a Watch Application</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			 <li><a href="#init">Initializing the Watch Application</a></li>
			 <li><a href="#lifecycle">Managing Life-cycle Callbacks</a></li>
			 <li><a href="#systemrelated">Managing System-related Callbacks</a></li>
			 <li><a href="#timehandle">Drawing the Watch UI</a></li>
			 <li><a href="#current">Getting the Current Time</a></li>
			 <li><a href="#ambient">Using the Ambient Mode</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/watch_n.htm">Watch Application Guide</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Watch Application: Creating a Watch Application</h1>

  
<p>This tutorial demonstrates how you can create a watch application, set the time, and use the ambient mode.</p>

<p>This feature is supported in wearable applications only.</p>
  
<h2>Warm-up</h2>
<p>Become familiar with the Watch Application API basics by learning about:</p>
	<ul>
		 <li><a href="#init">Initializing the Watch Application</a>
		 <p>Initialize a watch application for use.</p></li>
		 <li><a href="#lifecycle">Managing Life-cycle Callbacks</a>
		 <p>Set the necessary callbacks for application life-cycle management.</p></li>
		 <li><a href="#systemrelated">Managing System-related Callbacks</a>
		 <p>Manage the callbacks that monitor system status changes.</p></li>
		 <li><a href="#timehandle">Drawing the Watch UI</a>
		 <p>Manage the time handle and retrieve the window object for the watch UI.</p></li>
		 <li><a href="#current">Getting the Current Time</a>
		 <p>Get the current time or time zone.</p></li>
		 <li><a href="#ambient">Using the Ambient Mode</a>
		 <p>Use the ambient mode to show limited information on the screen.</p></li>		 
	</ul>


 <h2 id="init" name="init">Initializing the Watch Application</h2>

<p>To initialize the watch application:</p>
<ol>
<li>To use the functions and data types of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;watch_app.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;watch_app.h&gt;
</pre>
</li>
<li>To use the <span style="font-family: Courier New,Courier,monospace"> watch_app_ambient_tick_cb()</span> callback in the ambient mode, add the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/alarm.set</span> privilege to the manifest file of the application.
</li>
<li>Edit the watch application settings in the <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#watch_app">manifest</a> file.</li>
</ol>

<h2 id="lifecycle" name="lifecycle">Managing Life-cycle Callbacks</h2> 

<p>To manage life-cycle callbacks:</p>
<ol>
<li><p>Register the necessary callbacks:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">create</span> event is triggered before the application main loop starts. In this callback, you can initialize the application resources, such as create windows and data structures. 
<pre class="prettyprint">
bool 
app_create(int width, int height, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;// This usually means initializing the UI and application data

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">app_control</span> event is triggered when another application sends a launch request to the application.
<pre class="prettyprint">
void 
app_control(app_control_h app_control, void* user_data) 
{
&nbsp;&nbsp;&nbsp;// Handle the launch request
&nbsp;&nbsp;&nbsp;// Show the user the task requested through the &quot;app_control&quot; parameter
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">pause</span> event is triggered when the application is completely obscured by another application and becomes invisible.
<pre class="prettyprint">
void 
app_pause(void* user_data) 
{
&nbsp;&nbsp;&nbsp;// Take necessary actions when application becomes invisible 
&nbsp;&nbsp;&nbsp;// Release the resources needed to draw the normal watch 
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">resume</span> event is triggered when the application becomes visible.
<pre class="prettyprint">
void 
app_resume(void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take the necessary actions when application becomes visible
&nbsp;&nbsp;&nbsp;// Acquire the resources needed to draw the normal watch 
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">terminate</span> event is triggered when the application main loop exits.
<pre class="prettyprint">
void 
app_terminate(void* user_data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">time_tick</span> event is triggered at least once per second. The watch applications can get the current time from the <span style="font-family: Courier New,Courier,monospace">watch_time</span> time handle to draw a normal watch.
<pre class="prettyprint">
void 
app_time_tick(watch_time_h watch_time, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Called at least once per second
&nbsp;&nbsp;&nbsp;// Draw a normal watch with the hour, minute, and second
}
</pre>
</li>
</ul>
</li>
<li>Set the life-cycle callbacks in the <span style="font-family: Courier New,Courier,monospace">watch_app_lifecycle_callback_s</span> structure, and pass the structure to the <span style="font-family: Courier New,Courier,monospace">watch_app_main()</span> function that starts the watch application event loop:
<pre class="prettyprint">
int 
main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;appdata ad = {0,};
&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s callback = {0,};

&nbsp;&nbsp;&nbsp;callback.create = app_create;
&nbsp;&nbsp;&nbsp;callback.app_control = app_control;
&nbsp;&nbsp;&nbsp;callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;callback.time_tick = app_time_tick;
&nbsp;&nbsp;&nbsp;// Ambient mode callbacks

&nbsp;&nbsp;&nbsp;int ret = watch_app_main(argc, argv, &amp;callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
</ol>

<h2 id="systemrelated" name="systemrelated">Managing System-related Callbacks</h2>

<p>To manage callbacks related to system status changes:</p>

<ol>	
<li><p>Define the following callback functions:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">lang_changed()</span>: Triggered when the system language changes and the messages are translated.</li>
<li><span style="font-family: Courier New,Courier,monospace">region_changed()</span>: Triggered when the time zone changes.</li>
<li><span style="font-family: Courier New,Courier,monospace">low_memory()</span>: Triggered when the system is running low on memory. Use the callback to save the current work and release resources; if this is not enough, the platform frees resources automatically and can even kill some applications.</li>
<li><span style="font-family: Courier New,Courier,monospace">low_battery()</span>: Triggered when the system is running low on battery (less than 5%). Use the callback to save the current work and avoid battery-draining workloads.</li>
</ul>

<pre class="prettyprint">
void 
lang_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take the necessary actions when the language setting changes
}
 
void 
region_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take the necessary actions when the region setting changes
}
 
void 
low_battery(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take the necessary actions when the system is running low on battery
&nbsp;&nbsp;&nbsp;watch_app_exit();
}
 
void 
low_memory(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take the necessary actions when the system is running low on memory
&nbsp;&nbsp;&nbsp;watch_app_exit();
}
</pre></li>
<li><p>Register the callback functions:</p>
<pre class="prettyprint">
bool 
app_create(void *user_date)
{
&nbsp;&nbsp;&nbsp;// Register a callback for each system event
&nbsp;&nbsp;&nbsp;if (watch_app_add_event_handler(&amp;handler, APP_EVENT_LANGUAGE_CHANGED, lang_changed, NULL) != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_add_event_handler() failed&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (watch_app_add_event_handler(&amp;handler, APP_EVENT_REGION_FORMAT_CHANGED, region_changed, NULL) != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_add_event_handler() failed&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (watch_app_add_event_handler(&amp;handler, APP_EVENT_LOW_BATTERY, low_battery, NULL) != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_add_event_handler() failed&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (watch_app_add_event_handler(&amp;handler, APP_EVENT_LOW_MEMORY, low_ memory, NULL) != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_add_event_handler() failed&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
</ol>

<h2 id="timehandle" name="timehandle">Drawing the Watch UI</h2>
<p>To draw the watch UI, you need the current time handle and the window object of the idle screen:</p>

<ol>
<li>Get the window object with the <span style="font-family: Courier New,Courier,monospace">watch_app_get_elm_win()</span> function:
<pre class="prettyprint">
#include &lt;watch_app_efl.h&gt;

typedef struct 
{
&nbsp;&nbsp;&nbsp;Evas *evas;
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
} appdata;

static void 
__create_base_gui(appdata *ad, int width, int height)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;watch_time_h watch_time = NULL;
&nbsp;&nbsp;&nbsp;ret = watch_app_get_elm_win(&amp;ad-&gt;win);

&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;win, width, height);
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);      
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;label, width, height / 3);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;label, 0, height / 3);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label); 
</pre>
</li>
<li>Get the time handle for the current time with the <span style="font-family: Courier New,Courier,monospace">watch_time_get_current_time()</span> function:

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = watch_time_get_current_time(&amp;watch_time);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get current time. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;__update_watch(ad, watch_time);
}

bool 
app_create(void *user_date)
{
&nbsp;&nbsp;&nbsp;// Define system callbacks

&nbsp;&nbsp;&nbsp;appdata *ad = data;
&nbsp;&nbsp;&nbsp;__create_base_gui(ad, width, height);

&nbsp;&nbsp;&nbsp;return true;
} 
</pre>
</li>
<li>When you no longer need the <span style="font-family: Courier New,Courier,monospace">watch_time_h</span> time handle, release it with the <span style="font-family: Courier New,Courier,monospace">watch_time_delete()</span> function. 
</li>
</ol>

<h2 id="current" name="current">Getting the Current Time</h2>

<p>You can get the current local time in various formats using the Watch Application methods and the time handle. When retrieving the current local time, the time handle parameter cannot be <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>For example, you can use the <span style="font-family: Courier New,Courier,monospace">watch_time_get_minute()</span> function to retrieve the current minute value.</p>
<pre class="prettyprint">
static void 
__update_watch(appdata *ad, watch_time_h watch_time)
{
&nbsp;&nbsp;&nbsp;watch_text[TEXT_BUF_SIZE];
&nbsp;&nbsp;&nbsp;int hour24, minute, second;

&nbsp;&nbsp;&nbsp;if (watch_time == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;watch_time_get_hour24(watch_time, &amp;hour24);
&nbsp;&nbsp;&nbsp;watch_time_get_minute(watch_time, &amp;minute);
&nbsp;&nbsp;&nbsp;watch_time_get_second(watch_time, &amp;second);
&nbsp;&nbsp;&nbsp;snprintf(watch_text, TEXT_BUF_SIZE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;align=center&gt;Hello Watch&lt;br/&gt;%02d:%02d:%02d&lt;/align&gt;",
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour24, minute, second);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, watch_text);
} 

static void 
__create_base_gui(appdata *ad, int width, int height)
{
&nbsp;&nbsp;&nbsp;// Get the window object and time handle

&nbsp;&nbsp;&nbsp;__update_watch(ad, watch_time);
} 
</pre>

<p>You can also get the UTC time and time zone, if needed, using the <span style="font-family: Courier New,Courier,monospace">watch_time_get_utc_time()</span>, <span style="font-family: Courier New,Courier,monospace">watch_time_get_utc_timestamp()</span>, and <span style="font-family: Courier New,Courier,monospace">watch_time_get_time_zone()</span> functions.</p>

<h2 id="ambient" name="ambient">Using the Ambient Mode</h2>

<p>To use the ambient mode:</p>
<ol>
<li>Define the ambient mode callbacks. 
<ul><li><p>The <span style="font-family: Courier New,Courier,monospace">ambient_changed</span> event is triggered when the ambient mode is enabled or disabled in the device. You can use the callback to initialize your ambient mode UI.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">ambient_tick</span> event is triggered every minute while the device is in the ambient mode. You can use the callback to update the time on your watch application in the ambient mode. In this callback, do not perform time-consuming task and always update the UI as fast as possible. The platform can put the device to sleep shortly after the ambient tick expires.</p></li></ul>
<pre class="prettyprint">
void 
app_ambient_tick(watch_time_h watch_time, void* user_data)
{
&nbsp;&nbsp;&nbsp;appdata *ad = user_data;
&nbsp;&nbsp;&nbsp;__update_watch(ad, watch_time);
}

void 
app_ambient_changed(bool ambient_mode, void* user_data)
{
&nbsp;&nbsp;&nbsp;if (ambient_mode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare to enter the ambient mode
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare to exit the ambient mode
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Register the ambient mode callbacks:
<pre class="prettyprint">
int 
main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;appdata ad = {0,};
&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s callback = {0,};

&nbsp;&nbsp;&nbsp;// Other life-cycle callbacks

&nbsp;&nbsp;&nbsp;callback.ambient_tick = app_ambient_tick;
&nbsp;&nbsp;&nbsp;callback.ambient_changed = app_ambient_changed;

&nbsp;&nbsp;&nbsp;int ret = watch_app_main(argc, argv, &amp;callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
} 
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
