<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Attach panel: Attaching Content from Other Applications</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			 <li><a href="#init">Initializing an Attach Panel</a></li>
			 <li><a href="#create">Creating an Attach Panel</a></li>
			 <li><a href="#manage">Managing an Attach Panel</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/app/attach_panel_n.htm">Attach panel Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PANEL__ATTACH__MODULE.html">Attach panel API for Mobile Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

	<h1>Attach panel: Attaching Content from Other Applications</h1>

  
<p>This tutorial demonstrates how you can add an attach panel into which the user can attach content from other applications.</p>

<p>This feature is supported in mobile applications only.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Attach panel API basics by learning about:</p>
	<ul>
		 <li><a href="#init">Initializing an Attach Panel</a>
		 <p>Initialize an attach panel for use.</p></li>
		 <li><a href="#create">Creating an Attach Panel</a>
		 <p>Create an attach panel, add content categories, and set callbacks. When no longer needed, delete the attach panel.</p></li>
		 <li><a href="#manage">Managing an Attach Panel</a>
		 <p>Set extra data to a content category, show and hide the panel, and get the panel state.</p></li>
	</ul>


 <h2 id="init" name="init">Initializing an Attach Panel</h2>

 <p>To initialize an attach panel for use:</p>
 <ol>
 <li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PANEL__ATTACH__MODULE.html">Attach panel</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;attach_panel.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;attach_panel.h&gt;
</pre>
</li>
<li>
<p>Declare global variables.</p>
<p>To create and manage an attach panel, you must create variables for a conformant and the attach panel.</p>
<pre class="prettyprint">
static struct 
{
&nbsp;&nbsp;&nbsp;Evas_Object *conformant;
&nbsp;&nbsp;&nbsp;attach_panel_h attach_panel;
} s_info = 
{
&nbsp;&nbsp;&nbsp;.conformant = NULL,
&nbsp;&nbsp;&nbsp;.attach_panel = NULL,
};

static void 
_create_conformant(Evas_Object *win)
{
&nbsp;&nbsp;&nbsp;Evas_Object *conformant = NULL;
&nbsp;&nbsp;&nbsp;conformant = elm_conformant_add(win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(conformant, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(win, conformant);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_show(conformant);

&nbsp;&nbsp;&nbsp;s_info.conformant = conformant;
}
</pre>
</li>
<li>
<p>If you want to add the camera or voice recorder UI gadget in the attach panel, or add an application to be launched from the <strong>More</strong> tab, set the applicable privileges in the manifest file of your application:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/camera&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/recorder&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Launch privilege allows you to launch apps from the More tab--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/appmanager.launch&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
</li>
</ol>

 <h2 id="create" name="create">Creating an Attach Panel</h2>
 
 <p>To create an attach panel:</p>

<ol>
<li>Create the attach panel using the <span style="font-family: Courier New,Courier,monospace">attach_panel_create()</span> function.
<p>When the attach panel is created, its state is hidden by default. To show the created panel, use the <span style="font-family: Courier New,Courier,monospace">attach_panel_show()</span> function.</p>
 
<pre class="prettyprint">
attach_panel_h attach_panel = NULL;
int ret = ATTACH_PANEL_ERROR_NONE;

ret = attach_panel_create(s_info.conformant, &amp;attach_panel);
if (ret != ATTACH_PANEL_ERROR_NONE || !attach_panel)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
attach_panel_show(attach_panel);
s_info.attach_panel = attach_panel;
</pre>
</li>
<li>Based on the type of content you want the user to be able to select for the attach panel, add content categories using the <span style="font-family: Courier New,Courier,monospace">attach_panel_add_content_category()</span> function. The available content categories are defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PANEL__ATTACH__MODULE.html#gada3a2db6ac8e7d42b7dff7c3cc48720b">attach_panel_content_category</a> enumerator.
<p>The content categories in the <strong>More</strong> tab are shown in the frequency, recently used, and alphabetical sequence.</p>
<p>To deliver more information to the UI gadget or called application, add the data with a bundle.</p>

<pre class="prettyprint">
bundle *extra_data = NULL;

extra_data = bundle_create();
if (!extra_data) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

bundle_add_str(extra_data, http://tizen.org/appcontrol/data/total_count, &quot;3&quot;);

attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_IMAGE, extra_data);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CAMERA, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VOICE, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VIDEO, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_AUDIO, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CALENDAR, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CONTACT, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_MYFILES, NULL);
attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VIDEO_RECORDER, NULL);

attach_panel_show(s_info.attach_panel);
bundle_free(extra_data);
</pre>
</li>
<li>Register and define callbacks:

<ul><li>To get the data that the user selects in the called application, register a callback using the <span style="font-family: Courier New,Courier,monospace">attach_panel_set_result_cb()</span> function. The callback is triggered when the user selects and conforms something to attach on the caller application. When you use this callback, you must use the <span style="font-family: Courier New,Courier,monospace">app_control_get_extra_data_array()</span> function to get the received data.</li>
<li>To get the published events from the panel side, register a callback using the <span style="font-family: Courier New,Courier,monospace">attach_panel_set_event_cb()</span> function. The callback is triggered when reserved events (defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PANEL__ATTACH__MODULE.html#ga722a6d81e76fc1c4567a1bf920b4da3e">attach_panel_event</a> enumerator) are published from the panel side.</li></ul>

<pre class="prettyprint">
static void 
_result_cb(attach_panel_h attach_panel, attach_panel_content_category_e content_category, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_h result, app_control_result_e result_code, void *data)                                 
{
&nbsp;&nbsp;&nbsp;char **select = NULL;
&nbsp;&nbsp;&nbsp;int i = 0;
&nbsp;&nbsp;&nbsp;int length = 0;
&nbsp;&nbsp;&nbsp;int ret = APP_CONTROL_ERROR_NONE;
&nbsp;&nbsp;&nbsp;if (!result) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (APP_CONTROL_RESULT_SUCCEEDED != result_code) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = app_control_get_extra_data_array(result, &quot;http://tizen.org/appcontrol/data/selected&quot;, &amp;select, &amp;length);
&nbsp;&nbsp;&nbsp;if (APP_CONTROL_ERROR_NONE != ret || !select) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;for (; i &lt; length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;path is %s, %d\n&quot;, select[i], length);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(select[i]);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;free(select);
}

static void 
_event_cb(attach_panel_h attach_panel, attach_panel_event_e event, void *event_info, void *data)
{
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;if (!) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;switch (event) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ATTACH_PANEL_EVENT_SHOW_START:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ATTACH_PANEL_EVENT_SHOW_FINISH:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ATTACH_PANEL_EVENT_HIDE_START:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case ATTACH_PANEL_EVENT_HIDE_FINISH:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}

static int 
app_control(void *data)
{
&nbsp;&nbsp;&nbsp;attach_panel_set_result_cb(s_info.attach_panel, _result_cb, NULL);
&nbsp;&nbsp;&nbsp;attach_panel_set_event_cb(s_info.attach_panel, _event_cb, NULL);
}
</pre>
</li>
<li>When no longer needed, destroy the attach panel with the <span style="font-family: Courier New,Courier,monospace">attach_panel_destroy()</span> function. If the attach panel is shown when you destroy it, the panel is first hidden and then destroyed.

 <p>If you only need to remove a specific content category, use the <span style="font-family: Courier New,Courier,monospace">attach_panel_remove_content_category()</span> function.</p>

<pre class="prettyprint">
bool visible = false;

if (s_info.attach_panel) 
{
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_IMAGE);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CAMERA);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VOICE);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VIDEO);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_AUDIO);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CALENDAR);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CONTACT);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_MYFILES);
&nbsp;&nbsp;&nbsp;attach_panel_remove_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_VIDEO_RECORDER);

&nbsp;&nbsp;&nbsp;attach_panel_unset_result_cb(s_info.attach_panel);
&nbsp;&nbsp;&nbsp;attach_panel_unset_event_cb(s_info.attach_panel);

&nbsp;&nbsp;&nbsp;attach_panel_destroy(s_info.attach_panel);
&nbsp;&nbsp;&nbsp;s_info.attach_panel = NULL;
}
</pre>
</li>
</ol>


 <h2 id="manage" name="manage">Managing an Attach Panel</h2>
 
 
<p>To manage an attach panel:</p>

<ul>
<li>To set some information to the content category after adding the category, use the <span style="font-family: Courier New,Courier,monospace">attach_panel_set_extra_data()</span> function, which sets extra data to send to the content category using a bundle:

<pre class="prettyprint">
static void 
_reset_bundle(void *data)
{
&nbsp;&nbsp;&nbsp;bundle *extra_data = NULL;
&nbsp;&nbsp;&nbsp;int ret = APP_CONTROL_ERROR_NONE;

&nbsp;&nbsp;&nbsp;extra_data = bundle_create();
&nbsp;&nbsp;&nbsp;if (!extra_data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bundle_add_str(extra_data, http://tizen.org/appcontrol/data/total_count, &quot;5&quot;);
&nbsp;&nbsp;&nbsp;ret = attach_panel_set_extra_data(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_IMAGE, extra_data);
&nbsp;&nbsp;&nbsp;if (ATTACH_PANEL_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;bundle_free(extra_data);
}
</pre></li>
<li>To show or hide the attach panel, use the <span style="font-family: Courier New,Courier,monospace">attach_panel_show()</span> and <span style="font-family: Courier New,Courier,monospace">attach_panel_hide()</span> functions:

<pre class="prettyprint">
attach_panel_h attach_panel;
int ret = ATTACH_PANEL_ERROR_NONE;

if (s_info.attach_panel) 
{
&nbsp;&nbsp;&nbsp;attach_panel_hide(s_info.attach_panel);
}
else 
{
&nbsp;&nbsp;&nbsp;ret = attach_panel_create(s_info.conformant, &amp;attach_panel);
&nbsp;&nbsp;&nbsp;if(ret != ATTACH_PANEL_ERROR_NONE || !attach_panel)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;attach_panel_add_content_category(s_info.attach_panel, ATTACH_PANEL_CONTENT_CATEGORY_CAMERA, NULL);
&nbsp;&nbsp;&nbsp;attach_panel_show(attach_panel);
&nbsp;&nbsp;&nbsp;s_info.attach_panel = attach_panel;
}
</pre></li>
<li>To know whether the attach panel is visible, use the <span style="font-family: Courier New,Courier,monospace">attach_panel_get_visibility()</span> function. It fills the second parameter with a Boolean value that shows whether the panel is visible.

<pre class="prettyprint">
bool visible = false;

if (s_info.attach_panel) 
{
&nbsp;&nbsp;&nbsp;attach_panel_get_visibility(s_info.attach_panel, &amp;visible);
&nbsp;&nbsp;&nbsp;if (visible) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attach_panel_hide(s_info.attach_panel);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attach_panel_show(s_info.attach_panel);
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ul>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
