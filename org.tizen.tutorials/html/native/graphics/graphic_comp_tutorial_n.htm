<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Graphic UI Component: Drawing Simple Images Using Evas Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#rectangle">Drawing a Rectangle or Line</a></li>
			<li><a href="#gradation">Implementing Gradation</a></li>
			<li><a href="#resizing">Resizing Images</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/graphics/graphics_guide_n.htm">Graphics Guides</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Graphic UI Component: Drawing Simple Images Using Evas Objects</h1>


<p>This tutorial demonstrates how you can draw a rectangle or a line image on the screen using Evas objects available in the EFL UI component library.</p>
<p>The EFL has the following types of non-container objects with a visual appearance that can be drawn on the canvas:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_Rectangle</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_Image</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_Text</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_Line</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_TextBlock</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Evas_Object_Polygon</span></li>
</ul>

<h2>Warm-up</h2>
<p>Become familiar with the Evas API basics by learning about:</p>
<ul>
<li><a href="#rectangle">Drawing a Rectangle or Line</a>
<p>Draw a rectangle or a line object on the screen in various sizes and colors.</p></li>
<li><a href="#gradation">Implementing Gradation</a>
<p>Represent a gradation effect using the rectangle object.</p></li>
<li><a href="#resizing">Resizing Images</a>
<p>Adjust the loaded image size and draw on the screen.</p></li>

</ul>

<h2 id="rectangle" name="rectangle">Drawing a Rectangle or Line</h2>


<p>To draw random rectangles and lines on the screen:</p>
<ol>
<li>Create an <span style="font-family: Courier New,Courier,monospace">elm_layout</span> into which objects can be added:
<pre class="prettyprint">
static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *rect, *line;
&nbsp;&nbsp;&nbsp;Evas *e;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;e = evas_object_evas_get(layout);
</pre>
</li>
<li>Draw 10 rectangles with random size, location, color, and transparency. 
<p>Display the rectangles on <span style="font-family: Courier New,Courier,monospace">evas</span>.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Draw rectangles
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt;= 10; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x, y, w, h, r, g, b, a;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = rand() % 800;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = rand() % 800;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = rand() % 255;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect = evas_object_rectangle_add(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(rect, w, h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(rect, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(rect, r, g, b, a);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(rect);
&nbsp;&nbsp;&nbsp;}
</pre>
<p>The coordinates and sizes cannot be expanded beyond the screen size.</p>
</li>
<li>Draw 10 lines with random length, location, color, and transparency. 
<p>Display the lines on <span style="font-family: Courier New,Courier,monospace">evas</span>.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Draw lines
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt;= 10; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x1, y1, x2, y2, r, g, b, a;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x1 = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y1 = rand() % 800;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x2 = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y2 = rand() % 800;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = rand() % 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = rand() % 255;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line = evas_object_line_add(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_line_xy_set(line, x1, y1, x2, y2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(line, r, g, b, a);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(line);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>
<p>The coordinates cannot be expanded beyond the screen size.</p>
</li>
</ol>

<p>The following figure illustrates the result.</p>

  <p class="figure">Figure: Rectangles and lines</p> 
  <p align="center"><img alt="Rectangles and lines" src="../../images/demo_rectangle2.png" /></p>

<h2 id="gradation" name="gradation">Implementing Gradation</h2>

<p>
To draw a row of small rectangles on the screen starting from the bottom and drawing each new rectangle slightly higher than the previous one, while changing the color between each row:</p>
<ol>
<li>Create an <span style="font-family: Courier New,Courier,monospace">elm_layout</span> into which the rows can be added:
<pre class="prettyprint">
static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *rect, *line;
&nbsp;&nbsp;&nbsp;Evas *e;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;e = evas_object_evas_get(layout);

&nbsp;&nbsp;&nbsp;int x, y, w, h, r, g, b, a;
&nbsp;&nbsp;&nbsp;x = 0;
&nbsp;&nbsp;&nbsp;y = 0;
&nbsp;&nbsp;&nbsp;w = 480;
&nbsp;&nbsp;&nbsp;h = 10;
&nbsp;&nbsp;&nbsp;r = 0;
&nbsp;&nbsp;&nbsp;g = 0;
&nbsp;&nbsp;&nbsp;b = 0;
&nbsp;&nbsp;&nbsp;a = 255;
</pre>
</li>
<li>Draw 200 rectangles and display them on <span style="font-family: Courier New,Courier,monospace">evas</span>:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Draw rects
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; 200; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rect = evas_object_rectangle_add(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(rect, w, h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(rect, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y +=4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(rect, r, g, b, a);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (r &lt; 255)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r +=4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (g &lt; 255)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g +=4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b +=4;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(rect);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>
</li>
</ol>

<p>The following figure illustrates the result.</p>

<p class="figure">Figure: Gradation</p> 
<p align="center"><img alt="Gradation" src="../../images/demo_gradation2.png" /></p> 

<h2 id="resizing" name="resizing">Resizing Images</h2>

<p>To resize images:</p>
<ol>
<li>Create an <span style="font-family: Courier New,Courier,monospace">elm_layout</span> into which the images can be added:
<pre class="prettyprint">
static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *img;
&nbsp;&nbsp;&nbsp;char buf[PATH_MAX];
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;win);
</pre>
</li>
<li>Add the same image 10 times on the screen, each time using random size and coordinates:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt;= 10; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x, y, w, h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = rand() % 800;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = rand() % 480;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = rand() % 800;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img = elm_image_add(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s/image.jpg&quot;, ICON_DIR);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_image_file_set(img, buf, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(img, w, h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(img, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(img);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>
</li>
</ol>

<p>The following figure illustrates the result.</p>

<p class="figure">Figure: Image resizing</p> 
<p align="center"><img alt="Image resizing" src="../../images/demo_resizing2.png" /></p> 

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
