<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>OpenGL ES: Using OpenGL ES Graphics</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">	 
		 <li>EvasGL
			 <ul class="toc">
				<li><a href="#prerequisites">Prerequisites</a></li>
			    <li><a href="#declaration">Declaring EvasGL Objects</a></li>
			    <li><a href="#creating">Creating the Elm Window and EvasGL</a></li>
			    <li><a href="#getapi">Getting OpenGL ES APIs</a></li>
			    <li><a href="#callbacks">Using Callbacks</a></li>
			    <li><a href="#nativeset">Setting a Surface into the Image Object</a></li>
			</ul>
		</li>
		 <li><a href="#ext">Using OpenGL ES Extensions</a></li>
	     <li><a href="#evas_ext">Using EvasGL Extensions</a></li>
	     <li><a href="#direct">Using Direct Rendering</a></li>
	     <li><a href="#client">Using Client-side Rotation</a></li> 	 
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES Guide</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>OpenGL ES: Using OpenGL ES Graphics</h1>


	<p>This tutorial demonstrates how you can handle OpenGL ES graphics with the GLView component EvasGL. Before using this tutorial, make sure you are familiar with the basics introduced in the <a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES</a> guide.</p>

<h2>Warm-up</h2>
<p>Become familiar with the OpenGL ES API basics by learning about:</p>
<ul>	 
	  <li>EvasGL 
	  <ul>
	   <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the EvasGL functionality.</p></li>
	   <li><a href="#declaration">Declaring EvasGL Objects</a>
	   <p>Declare the application data.</p></li>
	   <li><a href="#creating">Creating the Elm Window and EvasGL</a>
	   <p>Create a window and EvasGL.</p></li>
	   <li><a href="#getapi">Getting OpenGL ES APIs</a>
	   <p>Get OpenGL ES function pointers.</p></li>
	   <li><a href="#callbacks">Using Callbacks</a>
	   <p>Set the callbacks.</p></li>
	   <li><a href="#nativeset">Setting a Surface into the Image Object</a>
	   <p>Set a native surface into the image object.</p></li> 
	  </ul>	  
	  </li>
	  <li><a href="#ext">Using OpenGL ES Extensions</a>
	  <p>Check whether an extension is available, and call it.</p></li>
	  <li><a href="#evas_ext">Using EvasGL Extensions</a>
	  <p>Check whether an Evas extension is available, and use it.</p></li>
	  <li><a href="#direct">Using Direct Rendering</a>
	  <p>Enhance performance through the Direct Rendering option.</p></li>
	  <li><a href="#client">Using Client-side Rotation</a>
	  <p>Use client-side rotation when the application is using Direct Rendering.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>The EvasGL use cases assume that the application uses EvasGL directly instead of using the GLView. (If the application uses a GLView, EvasGL is created internally.)</p>

<p>To be able to call GL functions directly, first declare the global variable using the <span style="font-family: Courier New,Courier,monospace">EVAS_GL_GLOBAL_GLES2_DEFINE()</span> macro. Then, create an EvasGL and use the <span style="font-family: Courier New,Courier,monospace">EVAS_GL_GLOBAL_GLES2_USE()</span> macro, which is similar to the GLView macro. For more detailed information, see the <span style="font-family: Courier New,Courier,monospace">Evas_GL_GLES2_Helpers.h</span> file.</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;Evas_GL_GLES2_Helpers.h&gt;

/*
   This code is placed at the beginning of any function using GLES 2.0 APIs
   When using this macro, you can call all glFunctions without changing their code
   For details, see Evas_GL_GLES2_Helpers.h
*/
EVAS_GL_GLOBAL_GLES2_DEFINE();
</pre>

<h2 id="declaration" name="declaration">Declaring EvasGL Objects</h2>

<p>To hold all the objects for your EvasGL application, define the application data structure:</p>

<pre class="prettyprint">
struct appdata {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win; /* Application window */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *img; /* OpenGL ES canvas */

&nbsp;&nbsp;&nbsp;&nbsp;Evas_GL *evasgl; /* EvasGL object for rendering GL in Evas */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_GL_Context *ctx; /* EvasGL context object, a GL rendering context in Evas GL */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_GL_Surface *sfc; /* EvasGL surface object, a GL rendering target in Evas GL */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_GL_Config *cfg; /* EvasGL surface configuration object for surface creation */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord sfc_w;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord sfc_h;

&nbsp;&nbsp;&nbsp;&nbsp;unsigned int program;
&nbsp;&nbsp;&nbsp;&nbsp;unsigned int vtx_shader;
&nbsp;&nbsp;&nbsp;&nbsp;unsigned int fgmt_shader;
&nbsp;&nbsp;&nbsp;&nbsp;unsigned int vbo;
};
typedef struct appdata appdata_s;
</pre>
 
<h2 id="creating" name="creating">Creating the Elm Window and EvasGL</h2>

<p>To create the Elm window and EvasGL:</p>
<ol>
    <li>Create a window and EvasGL.
       <p>For developing an application with Elementary, you create a window by using the Elementary utility function, <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span>. To develop a GL application and make the application use the GPU, you must call the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function before creating the window.</p>
 
<pre class="prettyprint">
Evas_Object *win;

/*
   To use OpenGL ES, the application must switch on hardware acceleration
   To enable that, call elm_config_accel_preference_set() with &quot;opengl&quot;
   before creating the Elm window
   This function is supported since 2.3.
*/
elm_config_accel_preference_set(&quot;opengl&quot;);
/* Creating Elm window */
ad-&gt;win = elm_win_util_standard_add(&quot;Evas_GL Example&quot;, &quot;Evas_GL Example&quot;);
</pre>

<p>You can create the EvasGL handler using the <span style="font-family: Courier New,Courier,monospace">evas_gl_new()</span> function. This initializer takes the Evas canvas on which OpenGL ES is to be used as a parameter. When developing an application with Elementary, use the canvas of your window:</p>
<pre class="prettyprint">
ad-&gt;evasgl = evas_gl_new(evas_object_evas_get(ad-&gt;win));
</pre>

<p>To free the memory allocated to the handler, use the <span style="font-family: Courier New,Courier,monospace">evas_gl_free()</span> function.</p>
</li>

<li>Create a surface.

<p>You must allocate a new config object to fill out the surface using the <span style="font-family: Courier New,Courier,monospace">evas_gl_config_new()</span> function. As long as Evas creates the config object, it takes care of any backward compatibility issues. Once you have your config object, you can specify the surface settings:</p>

<pre class="prettyprint">
appdata_s *ad;
ad-&gt;cfg = evas_gl_config_new();
ad-&gt;cfg-&gt;color_format = EVAS_GL_RGBA_8888; /* Surface color format */
ad-&gt;cfg-&gt;depth_bits = EVAS_GL_DEPTH_BIT_24; /* Surface depth format */
ad-&gt;cfg-&gt;stencil_bits = EVAS_GL_STENCIL_NONE; /* Surface stencil format */
ad-&gt;cfg-&gt;options_bits = EVAS_GL_OPTIONS_NONE; /* Configuration options (here, no extra options are used) */
</pre>

<p>Once you have configured the surface behavior, you must initialize the surface using the <span style="font-family: Courier New,Courier,monospace">evas_gl_surface_create()</span> function. This function takes the given Evas_GL object as the first parameter and the pixel format, and the configuration of the rendering surface as the second parameter. The last 2 parameters are the width and height of the surface, which you can recover directly from the window.</p>

<pre class="prettyprint">
Evas_Coord w, h;
evas_object_geometry_get(ad-&gt;win, NULL, NULL, &amp;w, &amp;h);
ad-&gt;sfc = evas_gl_surface_create(ad-&gt;evasgl, ad-&gt;cfg, w, h);
</pre>

<p>To manually delete a GL surface, use the <span style="font-family: Courier New,Courier,monospace">evas_gl_surface_destroy()</span> function.</p></li>

<li>Create a context.

<p>Create a context for Evas_GL using the <span style="font-family: Courier New,Courier,monospace">evas_gl_context_create()</span> function. You can merge the context with a higher context definition that you must pass as a second parameter.</p>

<pre class="prettyprint">
ad-&gt;ctx = evas_gl_context_create(ad-&gt;evasgl, NULL);

/*
   This macro sets the global variable holding the GL API,
   so that it is available to the application
   Use it right after setting up the GL context object
   For details, see Evas_GL_GLES2_Helpers.h
*/
EVAS_GL_GLOBAL_GLES2_USE(ad-&gt;evasgl, ad-&gt;ctx);
</pre>

<p>To delete the context later, use the <span style="font-family: Courier New,Courier,monospace">evas_gl_context_destroy()</span> function. To delete the entire configuration object, use the <span style="font-family: Courier New,Courier,monospace">evas_gl_config_free()</span> function instead.</p>
</li>
</ol>

<h2 id="getapi" name="getapi">Getting OpenGL ES APIs</h2>

<p>If you want to get the OpenGL ES API, you can get the API for rendering OpenGL ES with the <span style="font-family: Courier New,Courier,monospace">evas_gl_api_get()</span> function. This function returns a structure that contains all the OpenGL ES functions you can use to render in Evas. These functions consist of all the standard OpenGL ES 2.0 functions and any extra ones Evas has decided to provide in addition. If you have your code ported to OpenGL ES 2.0, it is easy to render to Evas.</p>

<p>If you already use a global macro, such as <span style="font-family: Courier New,Courier,monospace">EVAS_GL_GLOBAL_GLES2_XXX()</span>, you need not get the APIs.</p>

<pre class="prettyprint">
Evas_GL_API *glapi;
glapi = evas_gl_api_get(ad-&gt;evasgl);
</pre>

<h2 id="callbacks" name="callbacks">Using Callbacks</h2>

<p>When you have configured the EvasGL environment, you can declare a UI component in which all the OpenGL ES transformation takes place. In the following example, the image component is used, because it provides callbacks that allow you to play with mouse events and coordinates. The image component is set to inherit the size of the parent window.</p>

<ol>
<li>Add the image component:
<pre class="prettyprint">
ad-&gt;img = evas_object_image_filled_add(evas_object_evas_get(ad-&gt;win));
</pre>
</li>

<li>
<p>Define the &quot;OpenGL ES main loop&quot; function that is called every time the program attempts to get pixels from the image. Put all the OpenGL ES statements in charge of rendering the scene in this callback.</p>

<pre class="prettyprint">
evas_object_image_pixels_get_callback_set(ad-&gt;img, img_pixels_get_cb, ad);
</pre>
</li>

<li>
<p>Define a function that takes care of the drawing using EvasGL (called the OpenGL ES main loop):</p>

<pre class="prettyprint">
static void
img_pixels_get_cb(void *data, Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;&nbsp;/* Rendering process */
&nbsp;&nbsp;&nbsp;&nbsp;evas_gl_make_current(ad-&gt;evasgl, ad-&gt;sfc, ad-&gt;ctx);
&nbsp;&nbsp;&nbsp;&nbsp;/* Because the surface size can be changed, set the viewport in this callback */
&nbsp;&nbsp;&nbsp;&nbsp;glViewport(0, 0, ad-&gt;sfc_w, ad-&gt;sfc_h);
&nbsp;&nbsp;&nbsp;&nbsp;/* Paint it blue */
&nbsp;&nbsp;&nbsp;&nbsp;glClearColor(0.2, 0.2, 0.6, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT);
&nbsp;&nbsp;&nbsp;&nbsp;/* Usual OpenGL ES draw commands come here */
&nbsp;&nbsp;&nbsp;&nbsp;/* draw_scene(); */
}</pre>

<p>At every tick, set the given context as a current context for the given surface using the <span style="font-family: Courier New,Courier,monospace">evas_gl_make_current()</span> function.</p>
</li>

<li>You can use the <span style="font-family: Courier New,Courier,monospace">Ecore_Animator</span> to define the OpenGL ES main loop.
<p>To use the <span style="font-family: Courier New,Courier,monospace">Ecore_Animator</span>, create a callback that is called on every animation tick. This animation callback is used only to mark the image as &quot;dirty&quot;, meaning that it needs an update next time Evas renders. It calls the pixel get callback that redraws the scene.</p>

<p>The animator callback function is also triggered when the display is off. Use the <span style="font-family: Courier New,Courier,monospace">ecore_animator_freeze()</span> and <span style="font-family: Courier New,Courier,monospace">ecore_animator_thaw()</span> functions in the <span style="font-family: Courier New,Courier,monospace">app_pause_cb()</span> and <span style="font-family: Courier New,Courier,monospace">app_resume_cb()</span> callbacks for power saving.</p>

<pre class="prettyprint">
static Eina_Bool
animate_cb(void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *img = data;
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_pixels_dirty_set(img, EINA_TRUE);

&nbsp;&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}

ecore_animator_add(animate_cb, ad-&gt;img);
</pre></li>

<li><p>Define other callbacks, as needed. These callbacks have an impact on the drawing depending on the mouse, resize, and deletion events:</p>

<pre class="prettyprint">
evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_DEL, img_del_cb, ad);
evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_DOWN, mouse_down_cb, ad);
evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_UP, mouse_up_cb, ad);
evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_MOVE, mouse_move_cb, ad);
evas_object_event_callback_add(ad-&gt;win, EVAS_CALLBACK_RESIZE, win_resize_cb, ad);
</pre></li>

<li>
<p>Because the window size can be changed, set a resize callback for the window. In the callback, you must recreate an <span style="font-family: Courier New,Courier,monospace">Evas_GL_Surface</span> and reset the viewport size with the new window size:</p>
 
<pre class="prettyprint">
static void
win_resize_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;sfc) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_native_surface_set(ad-&gt;img, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_gl_surface_destroy(ad-&gt;evasgl, ad-&gt;sfc);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;sfc = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, NULL, NULL, &amp;ad-&gt;sfc_w, &amp;ad-&gt;sfc_h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_size_set(ad-&gt;img, ad-&gt;sfc_w, ad-&gt;sfc_h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;img, ad-&gt;sfc_w, ad-&gt;sfc_h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;img);

&nbsp;&nbsp;&nbsp;&nbsp;if (!ad-&gt;sfc) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Native_Surface ns;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;sfc = evas_gl_surface_create(ad-&gt;evasgl, ad-&gt;cfg, ad-&gt;sfc_w, ad-&gt;sfc_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_gl_native_surface_get(ad-&gt;evasgl, ad-&gt;sfc, &amp;ns);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_native_surface_set(ad-&gt;img, &amp;ns);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_pixels_dirty_set(ad-&gt;img, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre></li>
</ol>

<h2 id="nativeset" name="nativeset">Setting a Surface into the Image Object</h2>

<p>You can fill in the native surface information from the given EvasGL surface. For example, to adapt the surface to the target image when the size of the canvas changes:</p>  

<pre class="prettyprint">
Evas_Native_Surface ns;
evas_gl_native_surface_get(ad-&gt;evasgl, ad-&gt;sfc, &amp;ns);
evas_object_image_native_surface_set(ad-&gt;img, &amp;ns);
</pre>

<h2 id="ext" name="ext">Using OpenGL ES Extensions</h2>

<p>EvasGL, offering an abstraction layer above OpenGL ES, provides an easy mechanism to check for support and use OpenGL ES extensions:</p>

<ol>
	<li>Detect support for an extension.
	<p>In OpenGL ES, you must always call the <span style="font-family: Courier New,Courier,monospace;">glGetString(GL_EXTENSIONS)</span> function. Make sure that the extension name is present in the list and then dynamically find the function pointer using the <span style="font-family: Courier New,Courier,monospace;">dlsym()</span>, <span style="font-family: Courier New,Courier,monospace;">eglGetProcAddress()</span>, or <span style="font-family: Courier New,Courier,monospace;">glXGetProcAddress()</span> function.</p>

	<p>Since EvasGL exposes only a structure with the function pointers set to internal wrappers or the proper OpenGL ES implementation library, it can also expose all the detected extensions simply by setting their function pointers.</p>

	<p>To detect support for the <span style="font-family: Courier New,Courier,monospace;">GL_OES_get_program_binary</span> extension or equivalent, and to get the function pointer associated:</p>

<pre class="prettyprint">
Evas_GL_API *gl = elm_glview_api_get(glview);

/* Check for support for the Program Binary OES extension */
if (gl-&gt;glGetProgramBinaryOES)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Program binary extension is supported.\n&quot;);
</pre>
	</li>
	<li>Call an extension.
	<p>Calling an extension is similar to calling a function:</p>

<pre class="prettyprint">
if (gl-&gt;glGetProgramBinaryOES) {
&nbsp;&nbsp;&nbsp;&nbsp;char buf[4096];
&nbsp;&nbsp;&nbsp;&nbsp;size_t len;
&nbsp;&nbsp;&nbsp;&nbsp;Glenum fmt;
&nbsp;&nbsp;&nbsp;&nbsp;gl-&gt;glGetProgramBinaryOES(prgid, sizeof(buf), &amp;len, &amp;fmt, buf);
}
</pre>
	</li>
</ol>

<h2 id="evas_ext" name="evas_ext">Using EvasGL Extensions</h2>

<p>EvasGL is not only an abstraction layer on top of OpenGL ES, but also on top of EGL and GLX. As such, EvasGL tries to imitate EGL in a platform-independent manner, and exposes the underlying platform extensions when it can.</p>

<p>Image and sync support are the most commonly used EvasGL extensions. Both can be used for multi-thread rendering, but EvasGL images can also be used to share images between contexts.</p>

<ul>
<li>To use the image extension:

<p>There are 2 versions of the <span style="font-family: Courier New,Courier,monospace;">evasglCreateImage()</span> function, out of which extra <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Context</span> is taken as a parameter. It is recommended to call the  <span style="font-family: Courier New,Courier,monospace;">evasglCreateImageForContext()</span> function if you are dealing with multiple contexts, otherwise calling the <span style="font-family: Courier New,Courier,monospace;">evasglCreateImage()</span> function is sufficient.</p>

<ol>
	<li>Check for support.
	<p>Before using this extension, check whether it is supported.</p>

<pre class="prettyprint">
if (gl-&gt;evasglCreateImageForContext &amp;&amp; gl-&gt;evasglDestroyImage)
&nbsp;&nbsp;&nbsp;&nbsp;/* Good... */
</pre>
	</li>
	<li>Create an image.
	<p>Create a render buffer and bind it to an EvasGL image.</p>

<pre class="prettyprint">
const int width = 64;
const int height = 64;
GLuint fbo;
GLuint color_rb;
EvasGLImage *image;
Evas_GL *evgl;
Evas_GL_Context *ctx;

gl-&gt;GenFramebuffers(1, &amp;fbo);
gl-&gt;glBindFramebuffer(GL_FRAMEBUFFER_EXT, fbo);
gl-&gt;glGenRenderbuffers(1, &amp;color_rb);
gl-&gt;glBindRenderbuffer(GL_RENDERBUFFER_EXT, color_rb);
gl-&gt;glRenderbufferStorage(GL_RENDERBUFFER_EXT, GL_RGBA, width, height);
gl-&gt;glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GL_COLOR_ATTACHMENT0_EXT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GL_RENDERBUFFER_EXT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color_rb);

evgl = elm_glview_evas_gl_get(glview);
ctx = evas_gl_current_context_get(evgl);
image = gl-&gt;evasglCreateImageForContext(evgl, ctx, EVAS_GL_TEXTURE_2D,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void *)(intptr_t)color_rb, NULL);
</pre>

	<p>The EvasGL image is now created and available for use from another context.</p>
	</li>
	<li>Use an image.
	<p>Draw something in the texture and render that texture to the screen. The following example shows how to skip the draw function.</p>

<pre class="prettyprint">
gl-&gt;glBindFramebuffer(GL_FRAMEBUFFER_EXT, fbo);
draw_scene(glview);
</pre>

	<p>You can also bind the image to a texture for display on the back buffer:</p>

<pre class="prettyprint">
GLuint tex;

gl-&gt;glBindFramebuffer(GL_FRAMEBUFFER_EXT, 0);
gl-&gt;glGenTextures(1, &amp;tex);
gl-&gt;glBindTexture(GL_TEXTURE_2D, tex);
gl-&gt;glEGLImageTargetTexture2DOES(GL_TEXTURE_2D, image);
/* Draw the texture content on the screen */
static const GLint verts[12] = {-5, -6, -10,  5, -6, -10,  -5, 4, 10,  5, 4, 10};
static const GLint tex_coords[8] = {0, 0,  1, 0,  0, 1,  1, 1};

gl-&gt;glClearColor(0, 0, 0, 0);
gl-&gt;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
gl-&gt;glEnable(GL_TEXTURE_2D);
gl-&gt;glTexEnvf(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
gl-&gt;glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_REPEAT);
gl-&gt;glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
gl-&gt;glTexParameterf(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

gl-&gt;glEnableClientState(GL_VERTEX_ARRAY);
gl-&gt;glEnableClientState(GL_TEXTURE_COORD_ARRAY);
gl-&gt;glVertexPointer(3, GL_INT, 0, verts);
gl-&gt;glTexCoordPointer(2, GL_INT, 0, tex_coords);

gl-&gt;glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);

gl-&gt;glDisableClientState(GL_VERTEX_ARRAY);
gl-&gt;glDisableClientState(GL_COLOR_ARRAY);
gl-&gt;glDisable(GL_TEXTURE_2D);
</pre>

	<p>The image content can be shared between different contexts.</p>
	</li>
	<li>Destroy an image.
	<p>After releasing all the associated resources, such as FBO and textures, release the image object itself.</p>

<pre class="prettyprint">
gl-&gt;evasglDestroyImage(image);
</pre>
	</li>
</ol>
</li>
<li>To use the sync extension:

<p>Another commonly used extension is the fence sync extension along with the reusable sync and wait sync. This allows creating a semaphore-style object that is released as soon as all the previous render operations have been completed.</p>

<p>This guide does not explain the details of these extensions, as they must behave in a similar way to their EGL implementations.</p>

<p>As usual with extensions, check the support:</p>

<pre class="prettyprint">
if (gl-&gt;evasglCreateSync)
&nbsp;&nbsp;&nbsp;&nbsp;/* fence_sync must be supported */
</pre>
</li>
</ul>

<h2 id="direct" name="direct">Using Direct Rendering</h2>

<p>To enhance rendering performance, the Direct Rendering option is supported.</p>
<ul>
<li>
<p>To use direct rendering in GLView:</p>

<p>In GLView, the <span style="font-family: Courier New,Courier,monospace;">ELM_GLVIEW_DIRECT</span> option is one of GLView mode&#39;s enums and the option can be enabled using the <span style="font-family: Courier New,Courier,monospace;">elm_glview_mode_set()</span> function.</p>
<pre class="prettyprint">
/* Tizen 2.3 */
/* elm_config_accel_preference_set(&quot;opengl&quot;); */

/* Since Tizen 2.3.1 */
elm_config_accel_preference_set(&quot;opengl:depth24:stencil8:msaa_high&quot;);
Evas_Object *win = elm_win_util_standard_add(&quot;sample&quot;, &quot;sample&quot;);

Evas_Object *glview = elm_glview_add(win);
elm_glview_mode_set(glview, ELM_GLVIEW_DEPTH_24 | ELM_GLVIEW_STENCIL_8 | ELM_GLVIEW_MULTISAMPLE_HIGH);
</pre>

<p>To use the Direct Rendering mode since Tizen 2.3.1, set the same option values (depth, stencil, and MSAA) to a rendering engine and a GLView object. You can set the option values to a rendering engine using the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function and to a GLView object using the <span style="font-family: Courier New,Courier,monospace">elm_glview_mode_set()</span> function. If the GLView object option values are bigger or higher than the rendering engine&#39;s, the Direct Rendering mode is disabled.</p>
</li>
<li>
<p>To use direct rendering in EvasGL:</p>

<p>In EvasGL, the <span style="font-family: Courier New,Courier,monospace;">EVAS_GL_OPTIONS_DIRECT</span> is one of EvasGL&#39;s config options and the option can be enabled by setting the <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Config</span> option.</p>
<pre class="prettyprint">
/* Tizen 2.3 */
/* elm_config_accel_preference_set(&quot;opengl&quot;); */

/* Since Tizen 2.3.1 */
elm_config_accel_preference_set(&quot;opengl:depth24:stencil8:msaa_high&quot;);
Evas_Object *win = elm_win_util_standard_add(&quot;sample&quot;, &quot;sample&quot;);

Evas_GL_Config *cfg = evas_gl_config_new();
cfg = evas_gl_config_new();

cfg-&gt;color_format = EVAS_GL_RGB_888;
cfg-&gt;depth_bits = EVAS_GL_DEPTH_BIT_24;
cfg-&gt;stencil_bits = EVAS_GL_STENCIL_BIT_8;
cfg-&gt;options_bits = EVAS_GL_OPTIONS_DIRECT;
cfg-&gt;multisample_bits = EVAS_GL_MULTISAMPLE_HIGH;
</pre>

<p>To use the Direct Rendering mode since Tizen 2.3.1, set the same option values (depth, stencil, and MSAA) to a rendering engine and an <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Config</span> object. You can set the option values to a rendering engine using the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function. If the <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Config</span> object option values are bigger or higher than the rendering engine&#39;s, the Direct Rendering mode is disabled.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">If direct rendering is enabled, EvasGL renders directly to the back buffer of the window. Otherwise, EvasGL renders to the off screen buffer, then composited to the back buffer of the window.

<p>Although direct rendering is enabled, EvasGL not always renders directly to the back buffer. The following conditions disable direct rendering and force a fallback to indirect rendering in a frame buffer:</p>

<ul>
	<li>If the object&#39;s color is not 255,255,255,255.</li>
	<li>If the object has an Evas map.</li>
	<li>If the object size is different from the viewport (<span style="font-family: Courier New,Courier,monospace;">RESIZE_POLICY_SCALE</span>).</li>
	<li>If the window is rotated and <span style="font-family: Courier New,Courier,monospace;">CLIENT_SIDE_ROTATION</span> is not set.</li>
	<li>If the GLView policy is set to <span style="font-family: Courier New,Courier,monospace;">ALWAYS</span> render or the EvasGL does not use pixel getter callback.</li>
</ul></td> 
    </tr> 
   </tbody> 
  </table> 

    <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Caution</th> 
    </tr> 
    <tr> 
     <td class="note">In the render callback function, call only GL functions.
<p>In case the GL functions are called outside the render callback function, you must call the <span style="font-family: Courier New,Courier,monospace;">evas_gl_make_current()</span> function before the GL function calls. However, this results in a performance degradation due to context switching, and only works if the target surface is not an <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Surface</span> with Direct Rendering enabled.</p>	 

<p>If the target buffer is an <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Surface</span> with Direct Rendering enabled, all GL functions must be called from the render callback function only. All other operations can break the rendering order and the unexpected rendering occurs.</p></td> 
    </tr> 
   </tbody> 
  </table> 
  </li>
  </ul>

  <h2 id="client" name="client">Using Client-side Rotation</h2>

<p>The Client Side Rotation is a special value that indicates to EFL that the application  handles the view rotation when the device is rotated. This is needed only when the application requests Direct Rendering.</p>

<p>If the window is rotated and the Direct Rendering flag is set, Client Side Rotation can be used to avoid falling back to a frame buffer.</p>

<ul>
<li>To use GLView rotation:

<p>In GLView, the <span style="font-family: Courier New,Courier,monospace;">ELM_GLVIEW_CLIENT_SIDE_ROTATION</span> option is one of GLView mode&#39;s enums and the option can be enabled by using the <span style="font-family: Courier New,Courier,monospace;">elm_glview_mode_set()</span> function. This option is needed only when Direct Rendering is enabled.</p>
<pre class="prettyprint">
Evas_Object *gl;
gl = elm_glview_add(win);

elm_glview_mode_set(gl, ELM_GLVIEW_DEPTH | ELM_GLVIEW_DIRECT | ELM_GLVIEW_CLIENT_SIDE_ROTATION);
</pre>
</li>

<li>To use EvasGL rotation:

<p>In EvasGL, the <span style="font-family: Courier New,Courier,monospace;">EVAS_GL_OPTIONS_CLIENT_SIDE_ROTATION</span> is one of EvasGL&#39;s config options and this option can be enabled by setting the <span style="font-family: Courier New,Courier,monospace;">Evas_GL_Config</span> option.</p>
<pre class="prettyprint">
Evas_GL_Config *cfg;
cfg = evas_gl_config_new();

cfg-&gt;options_bits = EVAS_GL_OPTIONS_DIRECT | EVAS_GL_OPTIONS_CLIENT_SIDE_ROTATION;
</pre>

<p>Get the current rotation value:</p>
<pre class="prettyprint">
static void
_draw_gl(Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;
&nbsp;&nbsp;&nbsp;&nbsp;int rotation;
&nbsp;&nbsp;&nbsp;&nbsp;elm_glview_size_get(obj, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;&nbsp;rotation = evas_gl_rotation_get(ad-&gt;evasgl);

&nbsp;&nbsp;&nbsp;&nbsp;if (rotation % 180)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Adjust gl size */
}
</pre>

<p>To get the current rotation of the view, in degrees, call the <span style="font-family: Courier New,Courier,monospace;">evas_gl_rotation_get()</span> function to properly handle the current rotation of the view. It always returns 0 unless the option <span style="font-family: Courier New,Courier,monospace;">EVAS_GL_OPTIONS_CLIENT_SIDE_ROTATION</span> has been set. Indeed, in case of Direct Rendering to the back buffer, the client application is responsible for properly rotating its view. This can generally be done by applying a rotation to a view matrix.</p>
</li>
</ul>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
