<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Cairo: Drawing 2D Graphics</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/><br/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#image_backend">Creating Cairo with the Image Backend</a></li>
			<li><a href="#gl_backend">Creating Cairo with the GL Backend</a></li>
			<li><a href="#line">Drawing Lines</a></li>
			<li><a href="#image">Painting with Image Files</a></li>
			<li><a href="#text">Showing Text</a></li>
			<li><a href="#delete">Deleting Cairo</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/graphics/cairo_n.htm">Cairo Guide</a></li>
			<li><a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES Guide</a></li>
			<li><a href="../../../../org.tizen.ui.practices/html/native/efl/guides_efl_n.htm">EFL</a></li>			
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Cairo: Drawing 2D Graphics</h1>

<p>Cairo is a powerful open source 2D graphics library. You can use it in Tizen to draw 2D graphics.</p>

<p>This tutorial demonstrates how you can create 2D graphics using Cairo with image and GL backends, and draw lines, paint an image, and show text in your application.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Cairo API basics by learning about:</p>
<ul>
			<li><a href="#prerequisites">Prerequisites</a>
			<p>Make sure you fulfill the prerequisites before trying to use Cairo.</p></li>
			<li><a href="#image_backend">Creating Cairo with the Image Backend</a>
			<p>Create a Cairo context and surface with the image backend.</p></li>
			<li><a href="#gl_backend">Creating Cairo with the GL Backend</a>
			<p>Create a Cairo context and surface with the GL backend.</p></li>
			<li><a href="#line">Drawing Lines</a>
			<p>Draw straight and curved lines.</p></li>
			<li><a href="#image">Painting with Image Files</a>
			<p>Use PNG image files to draw surfaces.</p></li>
			<li><a href="#text">Showing Text</a>
			<p>Show a text with a specific font and properties on a surface.</p></li>
			<li><a href="#delete">Deleting Cairo</a>
			<p>When no longer needed, delete the Cairo resources.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>
<p>Before using the Cairo library in Tizen:</p>
<ul>
<li>You must understand the basic concepts of Cairo. For more information, see the <a href="http://www.cairographics.org/tutorial/" target="_blank">Cairo Tutorial in cairographics.org</a>.</li>
<li>In the Tizen framework, Cairo can use 2 different backends: image backend and Evas GL backend. You must check which backend is suitable for your work. For more information, see the <a href="../../../../org.tizen.guides/html/native/graphics/cairo_n.htm">Cairo guide</a>.</li>
<li>In creating native UI applications in Tizen, make sure you understand <a href="../../../../org.tizen.ui.practices/html/native/efl/guides_efl_n.htm">EFL and its features</a>.</li>
</ul>

<h2 id="image_backend">Creating Cairo with the Image Backend</h2>

<p>To create a Cairo context and surface with the image backend:</p>
<ol>
<li>To use the functions and data types of the Cairo image backend, include the <span style="font-family: Courier New,Courier,monospace">&lt;cairo.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;cairo.h&gt;
</pre>
</li>
<li>Create the window and the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image.
<p>Place an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image into your application&#39;s main window. For more information about creating and placing an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image, see <a href="../../../../org.tizen.ui.practices/html/native/efl/evas_basic_objects_n.htm">Basic Manipulation of Evas Objects</a> and the <a href="graphic_comp_tutorial_n.htm">Graphic UI Component tutorial</a>.</p>
<pre class="prettyprint">
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));
elm_win_resize_object_add(win, img);
evas_object_image_content_hint_set(img, EVAS_IMAGE_CONTENT_HINT_DYNAMIC);
evas_object_image_size_set(img, WIDTH, HEIGHT);
evas_object_resize(img, WIDTH, HEIGHT);
evas_object_show(img);
</pre>
</li>
<li>Create the Cairo context and surface.
<p>To use the Cairo API, create the Cairo context and surface using the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image. The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image is used in the example code as a rendering destination.</p>
<pre class="prettyprint">
int row_stride = cairo_format_stride_for_width(CAIRO_FORMAT_ARGB32, WIDTH);
unsigned char *imageData = (unsigned char*)evas_object_image_data_get(img, EINA_TRUE);
cairo_surface = cairo_image_surface_create_for_data(imageData, CAIRO_FORMAT_ARGB32, WIDTH, HEIGHT, row_stride);
cairo = cairo_create(cairo_surface);
</pre>
</li>
</ol>

<h2 id="gl_backend">Creating Cairo with the GL Backend</h2>

<p>For the Cairo GL backend in Tizen, you must know OpenGL. For more information, see the <a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES guide</a>.</p>
<p>To create Cairo with the GL backend:</p>
<ol>
<li>To use the functions and data types of the Cairo GL backend, include the <span style="font-family: Courier New,Courier,monospace">&lt;cairo.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace">&lt;cairo-evas-gl.h&gt;</span>, and <span style="font-family: Courier New,Courier,monospace">&lt;Evas_GL.h&gt;</span> header files in your application:
<pre class="prettyprint">
#include &lt;cairo.h&gt;
#include &lt;cairo-evas-gl.h&gt;
#include &lt;Evas_GL.h&gt;
</pre>
</li>
<li>Create the window, <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image, and Evas GL.
<p>Place an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image in the application&#39;s main window, and create and initialize Evas GL. Call the <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_get_callback_set()</span> function to initialize the Evas GL handle. The <span style="font-family: Courier New,Courier,monospace">cairo_drawing()</span> function must be set as the input parameter. For more information about creating and initializing Evas GL, see <a href="../../../../org.tizen.tutorials/html/native/graphics/opengl_tutorial_n.htm#creating">Creating the Elm Window and EvasGL</a>.</p>
<pre class="prettyprint">
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));

Evas_Native_Surface ns;
Evas_GL *evas_gl = evas_gl_new(evas_object_evas_get(img));
Evas_GL_Config *evas_gl_config = evas_gl_config_new();
evas_gl_config-&gt;color_format = EVAS_GL_RGBA_8888;

evas_gl_surface = evas_gl_surface_create(evas_gl, evas_gl_config, WIDTH, HEIGHT);
evas_gl_context = evas_gl_context_create(evas_gl, NULL);
evas_gl_native_surface_get(evas_gl, evas_gl_surface, &amp;ns);
evas_object_image_native_surface_set(img, &amp;ns);
evas_object_image_pixels_get_callback_set(img, cairo_drawing, 0);
</pre>
</li>
<li>Create the Cairo context and surface.
<p>Use the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image and Evas GL context to create the Cairo context and surface. Cairo can be used in a multi-threaded environment. By default, Cairo switches out the current GL context after each draw finishes. If no other thread uses Cairo for rendering, Cairo can use the non-thread-aware mode with the <span style="font-family: Courier New,Courier,monospace">cairo_gl_device_set_thread_aware()</span> function&#39;s second parameter set to 0.</p>
<pre class="prettyprint">
setenv(&quot;CAIRO_GL_COMPOSITOR&quot;, &quot;msaa&quot;, 1);
cairo_device = (cairo_device_t*)cairo_evas_gl_device_create(evas_gl, evas_gl_context);
cairo_gl_device_set_thread_aware(cairo_device, 0);
cairo_surface = (cairo_surface_t*)cairo_gl_surface_create_for_evas_gl(cairo_device, evas_gl_surface, evas_gl_config, WIDTH, HEIGHT);
cairo = cairo_create(cairo_surface);
</pre>
</li>
</ol>

<h2 id="line">Drawing Lines</h2>

<p>When drawing an image with Cairo, you must prepare the context (nouns) for each of the drawing verbs. For example, if you want to use the <span style="font-family: Courier New,Courier,monospace">cairo_stroke()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_fill()</span> function, create a path first. Similarly, in case of using the <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function, you must position your text by its insertion point. A primary source is needed for using the <span style="font-family: Courier New,Courier,monospace">cairo_paint()</span> function and a second source pattern or surface is prepared for using the <span style="font-family: Courier New,Courier,monospace">cairo_mask()</span> function. For more information, see the <a href="http://www.cairographics.org/tutorial/" target="_blank">Cairo Tutorial in cairographics.org</a>.</p>
<p>The following figure shows an example of lines drawn using Cairo.</p>
<p class="figure">Figure: Lines drawn using Cairo</p> 
<p align="center"><img alt="Lines drawn using Cairo" src="../../images/cairo_draw_lines.png" /></p>

<p>To draw lines:</p>
<ol>
<li>Prepare the sources.
<p>Prior to drawing a line, prepare and select sources. There are 3 main sources in Cairo - colors, gradients, and images:</p>
<ul>
<li>Colors use a uniform hue and opacity for the entire source. You can select these without any preparation with the <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgb()</span> function and <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgba()</span> functions.
<pre class="prettyprint">
cairo_set_source_rgba(cairo, 1.0, 0.0, 0.0, 1.0);
</pre>
</li>
<li>Gradients describe a progression of colors by setting a start and stop reference location and a series of &quot;stops&quot; along the way. There are linear and radial gradients built from 2 points. Stops are added to the gradient with the <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgb()</span> and <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgba()</span> functions which take a color like the <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgb()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgba()</span> function, as well as an offset to indicate where it lies between the reference locations.</li>
<li>Images include both surfaces loaded from the existing files with the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_from_png()</span> function and surfaces created from within Cairo as an earlier destination. For more information about these Cairo APIs, see <a href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html" target="_blank">the cairo_pattern_t in cairographics.org</a>.</li>
</ul>
</li>
<li>Set the starting point.
<p>Cairo uses a connect-the-dots style system for creating paths. To draw a line from a starting point to an ending point, set the starting point of the line with the <span style="font-family: Courier New,Courier,monospace">cairo_move_to()</span> function. This sets the current reference point without making the path connect the previous point to it.</p>
<pre class="prettyprint">
cairo_move_to(cairo, 100, 100);
</pre>
</li>
<li>Draw the shapes.
<ul>
<li>Draw a straight line.
<p>After setting a starting point as (100, 100), you can draw a straight line to an ending point using the <span style="font-family: Courier New,Courier,monospace">cairo_line_to()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_rel_line_to()</span> function. With these functions, the ending point is set as absolute coordinates and relative coordinates respectively, Here, (200, 150) is the absolute coordinates and (100, -50) is the relative coordinates.</p>
<pre class="prettyprint">
cairo_line_to(cairo, 200, 150);
cairo_rel_line_to(cairo, 100, -50);
</pre>
</li>
<li>Draw an arc.
<p>Arcs are parts of the outside of a circle. The point you directly specify is the center of the circle that makes up the addition to the path. Both a starting and an ending point on the circle must be specified, and these points are connected either clockwise using the <span style="font-family: Courier New,Courier,monospace">cairo_arc()</span> or counter-clockwise using the <span style="font-family: Courier New,Courier,monospace">cairo_arc_negative()</span> function.</p>
<pre class="prettyprint">
cairo_arc(cairo, 200, 200, 100 * sqrt(2), -0.25 * M_PI, 0.25 * M_PI);
</pre>
</li>
<li>Draw a curve.
<p>Curves in Cairo are cubic Bézier splines. They start at the current reference point and smoothly follow the direction of 2 other points (without going through them) to get to a third specified point. Like lines, there are both absolute (<span style="font-family: Courier New,Courier,monospace">cairo_curve_to()</span>) and relative (<span style="font-family: Courier New,Courier,monospace">cairo_rel_curve_to()</span>) functions. Note that the relative variant specifies all points relative to the previous reference point, rather than each relative to the preceding control point of the curve.</p>
<pre class="prettyprint">
cairo_rel_curve_to(cairo, -100, -50, -100, 50, -200, 0);
</pre>
</li>
<li>Close the path.
<p>Cairo can also close the path by drawing a straight line to the beginning of the current sub-path. This straight line can be useful for the last edge of a polygon.</p>
<pre class="prettyprint">
cairo_close_path(cairo);
</pre>
</li>
</ul>
</li>
</ol>

<h2 id="image">Painting with Image Files</h2>

<p>With images, Cairo supports the functionality only for the PNG format. These functions for PNG are experimental, so use them with care. For more information about PNG support, see <a href="http://www.cairographics.org/manual/cairo-PNG-Support.html" target="_blank">PNG Support in cairographics.org</a>.</p>

<p>The following figure shows an example of painting with an image file.</p>
<p class="figure">Figure: Painting with image file</p> 
<p align="center"><img alt="Lines drawn using Cairo" src="../../images/cairo_image_png_sample.png" /></p>

<p>To paint with image files:</p>
<ol>
<li>Get the image resource.
<p>The following code snippet shows how to prepare image data for your application. To get an application&#39;s resource image data, use the <span style="font-family: Courier New,Courier,monospace">app_get_resource_path()</span> function. This gets a stored PNG image file path to use as a resource. For more information about the <span style="font-family: Courier New,Courier,monospace">app_get_resource_path()</span> function, see the App Common API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__APP__COMMON__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__APP__COMMON__MODULE.html">wearable</a> applications.</p>
<pre class="prettyprint">
char image_filepath[256];
char *source_filename = &quot;image.png&quot;;
char *resource_path = app_get_resource_path();
snprintf(image_filepath, 256, &quot;%s/%s&quot;, resource_path, source_filename);
free(resource_path);
</pre>
</li>
<li>Create the source surface.
<p>To paint using the image data from the PNG file, first create a source surface. The image data is a source surface to paint on the destination surface.</p>
<pre class="prettyprint">
cairo_surface_t *image = cairo_image_surface_create_from_png(image_filepath);
cairo_set_source_surface(cairo, image, 0, 0);
</pre>
</li>
<li>Paint the Cairo surface.
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_paint()</span> function uses a mask that transfers the entire source to the destination. It can be considered an infinitely large mask, or no mask, but the result is the same. To set a compositing operator, use the <span style="font-family: Courier New,Courier,monospace">cairo_set_operator()</span> and paint a Cairo surface using the source pattern obtained before. For more information about the <span style="font-family: Courier New,Courier,monospace">cairo_set_operator()</span> function, see <a href="http://www.cairographics.org/operators/" target="_blank">operators in cairographics.org</a>.</p>
<pre class="prettyprint">
cairo_set_operator(cairo, CAIRO_OPERATOR_SOURCE);
cairo_paint(cairo);
</pre>
</li>
</ol>

<h2 id="text">Showing Text</h2>

<p>In Cairo, the <span style="font-family: Courier New,Courier,monospace">cairo_font_face_t</span> class represents a particular font at a particular weight, slant, and other characteristics. For more information for using the cairo font, see <a href="http://www.cairographics.org/manual/cairo-cairo-font-face-t.html" target="_blank">cairo_font_face_t of cairographics.org</a>.</p>

<p>The following figure shows an example of text shown using Cairo.</p>
<p class="figure">Figure: Text shown using Cairo</p> 
<p align="center"><img alt="Text shown using Cairo" src="../../images/cairo_text_sample.png" /></p>

<p>To show text:</p>
<ol>
<li>Prepare a text to use as a resource:
<pre class="prettyprint">
const char *utf8 = &quot;Hello, Tizen!&quot;;
</pre>
</li>
<li>Set text configurations.
<p>In this example, create a font face implicitly using the <span style="font-family: Courier New,Courier,monospace">cairo_select_font_face()</span> function. The text is a kind of &quot;mask&quot; you are about to work with. To use a mask, you need a font type and font size. Set the font type as &quot;Sans&quot;, and font size as 52.</p>
<pre class="prettyprint">
cairo_select_font_face(cairo, &quot;Sans&quot;, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
cairo_set_font_size(cairo, 52.0);
</pre>
</li>
<li>Show the text.
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function forms the mask from the text. You can think of the <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function as a shortcut for creating a path with the <span style="font-family: Courier New,Courier,monospace">cairo_text_path()</span> and using the <span style="font-family: Courier New,Courier,monospace">cairo_fill()</span> function to transfer it.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function caches glyphs, and it is much more efficient if you work with a lot of text. Note that this function is experimental and must be handled with care. For more information about Cairo text, see the <a href="http://www.cairographics.org/manual/cairo-text.html" target="_blank">description of cairo_text</a>.</p>
<pre class="prettyprint">
cairo_text_extents_t extents;
cairo_text_extents(cairo, utf8, &amp;extents);
cairo_move_to(cairo, 10, 10);
cairo_show_text(cairo, utf8);
</pre>
</li>
</ol>

<h2 id="delete">Deleting Cairo</h2>

<p>Delete the Cairo resources when they are no longer needed.</p>
<p>In the <span style="font-family: Courier New,Courier,monospace">cairo_destroy()</span> function, a reference count for a Cairo context is decreased by one. If the count is to be zero, the Cairo context and all associated resources must be freed. The same steps apply for the <span style="font-family: Courier New,Courier,monospace">cairo_surface_destroy()</span> function as well.</p>
<pre class="prettyprint">
cairo_surface_destroy(surface);
cairo_destroy(cairo);
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
