<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>i18n: Managing Characters, Numbers, and Locales</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#characters">Managing Characters and Strings</a></li>
			<li><a href="#dates">Managing Dates and Calendar</a></li>
			<li><a href="#locales">Managing Locales</a></li>
			<li><a href="#numbers">Managing Numbers</a></li>
			<li><a href="#ubrk">Managing Iteration Using Ubrk</a></li>
			<li><a href="#uenum">Managing Enumerations</a></li>
			<li><a href="#tmz">Managing Time Zones</a></li>
			<li><a href="#uset">Managing Sets</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/base/i18n_n.htm">i18n Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">i18n API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">i18n API for Wearable Native</a></li>
		</ul>
       
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>i18n: Managing Characters, Numbers, and Locales</h1>


<p>This tutorial demonstrates how you can manage numbers, and date, time, and locale information.</p>
<h2>Warm-up</h2>

 <p>Become familiar with the i18n API basics by learning about:</p> 
		<ul>
			<li><a href="#characters">Managing Characters and Strings</a>
		   <p>Convert and manage characters and strings.</p></li>
		   <li><a href="#dates">Managing Dates and Calendar</a>
			<p>Manage dates and calendar.</p></li>
		   <li><a href="#locales">Managing Locales</a>
			<p>Manage locales, which represent a specific geographical, political, or cultural region.</p></li>
		   <li><a href="#numbers">Managing Numbers</a>
			<p>Format and parse numbers for any locale.</p></li>
    		<li><a href="#ubrk">Managing Iteration Using Ubrk</a>
            <p>Iterate through strings using Ubrk.</p></li>
			<li><a href="#uenum">Managing Enumerations</a>
            <p>Create, acquire, and use enumerations.</p></li>
			<li><a href="#tmz">Managing Time Zones</a>
            <p>Get the time zone name, ID, DST savings, raw offset, and region code.</p></li>
			<li><a href="#uset">Managing Sets</a>
			<p>Manage sets of characters and strings.</p></li>

	
	</ul>

<h2 id="characters" name="characters">Managing Characters and Strings</h2>

<p>Character and string management tasks include:</p>
<ul>
<li><a href="#compare">Comparing Ustrings</a></li>
<li><a href="#strings">Converting strings to Ustrings</a></li>
<li><a href="#ustrings">Converting Ustrings to strings</a></li>
<li><a href="#unicode">Getting the Unicode block of a character</a></li>
<li><a href="#property">Getting the property value of a character</a></li>
<li><a href="#normalize">Normalizing Ustrings</a></li>
<li><a href="#search">Searching text in a Ustring</a></li>
<li><a href="#uppercase">Changing the case in a Ustring</a></li>
<li><a href="#concatenate">Concatenating Ustrings</a></li>
<li><a href="#substring">Finding a substring</a></li>
</ul>

	  <table class="note">
	   <tbody>
		<tr>
		 <th class="note">Note</th>
		</tr>
		<tr>
		 <td class="note">
		 <ul><li>All source and destination buffers must be different.</li>
		 <li>To use the functions and data types of the i18n API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre></li></ul></td>
		</tr>
	   </tbody>
	  </table>

<h3 id="compare" name="compare">Comparing Ustrings</h3>
<p>To compare 2 Ustrings for bitwise equality, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_compare()</span> function.</p>
<p>The obtained result is equal to 0 if the compared Ustrings are equal. The result is a negative value if the first Ustring is smaller bitwise than the second one, and a positive value if the first Ustring is greater than the second one.</p>
<pre class="prettyprint">
#define BUF_SIZE 64

i18n_uchar s1[BUF_SIZE];
i18n_ustring_copy_ua(s1, &quot;Tizen&quot;);
i18n_uchar s2[BUF_SIZE];
i18n_ustring_copy_ua(s2, &quot;Bada&quot;);
int32_t result = i18n_ustring_compare(s1, s2);
</pre>

<p>For a more complex, locale-sensitive comparison, use the Ucollator API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCOLLATOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCOLLATOR__MODULE.html">wearable</a> applications):</p>
<ol>
<li>Create a Ucollator using the <span style="font-family: Courier New,Courier,monospace">i18n_ucollator_create()</span> function. <p>Specify the locale as the first parameter and a handle to the created Ucollator as the second parameter.</p>
<pre class="prettyprint">
i18n_ucollator_h coll;
i18n_ucollator_create(I18N_ULOCALE_US, &amp;coll);
</pre></li>
<li>Set the Ucollator strength using the <span style="font-family: Courier New,Courier,monospace">i18n_ucollator_set_strength()</span> function.
<p>The strength influences how the strings are compared. The following strength levels are available:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_DEFAULT_STRENGTH</span>: Default</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_PRIMARY</span>: Compares the primary differences only, such as different base letters (&quot;a&quot; vs. &quot;b&quot;).</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_SECONDARY</span>: Compares primary and secondary differences, such as different accented forms of the same base letter (&quot;a&quot; vs. &quot;Ã¤&quot;).</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_TERTIARY</span>: Compares primary, secondary, and tertiary differences, such as case differences (&quot;a&quot; vs. &quot;A&quot;).</li>
</ul>

<pre class="prettyprint">
i18n_ucollator_set_strength(coll, I18N_UCOLLATOR_DEFAULT_STRENGTH);
</pre></li>
<li>Compare 2 Ustrings.
<p>To compare 2 Ustrings, you have 2 options:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">i18n_ucollator_equal()</span>: Shows whether the compared Ustrings are equal.</li>
<li><span style="font-family: Courier New,Courier,monospace">i18n_ucollator_str_collator()</span>: Shows whether the first Ustring is equal to, smaller, or greater than the second Ustring (<span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_EQUAL</span>, <span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_LESS</span>, or <span style="font-family: Courier New,Courier,monospace">I18N_UCOLLATOR_GREATER</span>).</li>
</ul>

<pre class="prettyprint">
i18n_ubool equal;
i18n_ucollator_equal(coll, s1, -1, s2, -1, &amp;equal);

i18n_ucollator_result_e result;
i18n_ucollator_str_collator(coll, s1, -1, s2, -1, &amp;result);
</pre></li>
<li>When no longer needed, destroy the Ucollator using the <span style="font-family: Courier New,Courier,monospace">i18n_ucollator_destroy()</span> function:
<pre class="prettyprint">
i18n_ucollator_destroy(coll);
</pre></li></ol>

<h3 id="strings" name="strings">Converting Strings to Ustrings</h3>
<p>To convert strings to Ustrings:</p>

<ul><li><p>To convert a byte string to a Unicode string (Ustring), use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_copy_ua()</span> function:</p>
<pre class="prettyprint">
const char *src = &quot;Tizen&quot;;
i18n_uchar dest[BUF_SIZE];
i18n_ustring_copy_ua(dest, src);
</pre></li>
<li><p>To convert a byte string to a Ustring while defining a maximum number of characters to be copied, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_copy_ua_n()</span> function and set the character limit as the third parameter:</p>
<pre class="prettyprint">
const char *src = &quot;Tizen&quot;;
i18n_uchar dest[BUF_SIZE];
i18n_ustring_copy_ua_n(dest, src, BUF_SIZE);
</pre></li>
<li><p>To convert a UTF-8 string to a UTF-16 string, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_from_UTF8()</span> function.</p>
<p>The function returns the length of the converted string and an error code variable as out parameters.</p>
<pre class="prettyprint">
const char *src = &quot;Tizen&quot;;
i18n_uchar dest[BUF_SIZE];
int dest_len;
i18n_uerror_code_e error_code = I18N_ERROR_NONE;
i18n_ustring_from_UTF8(dest, BUF_SIZE, &amp;dest_len, src, -1, &amp;error_code);
</pre></li></ul>

<h3 id="ustrings" name="ustrings">Converting Ustrings to Strings</h3>
<p>To convert Ustrings to strings:</p>

<ul>
<li><p>To convert a Ustring to a byte string, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_copy_au()</span> function:</p>
<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_ustring_copy_ua(src, &quot;Tizen&quot;);
char dest[BUF_SIZE];
i18n_ustring_copy_au(dest, src);
</pre></li>
<li><p>To convert a Ustring to a byte string while defining a maximum number of characters to be copied, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_copy_au_n()</span> function and set the character limit as the third parameter:</p>
<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_ustring_copy_ua(src, &quot;Tizen&quot;);
char dest[BUF_SIZE];
i18n_ustring_copy_au_n(dest, src, BUF_SIZE);
</pre></li>

<li><p>To convert a UTF-16 string to a UTF-8 string, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_to_UTF8()</span> function.</p>
<p>The function returns the length of the converted string and an error code variable as out parameters.</p>
<p>To get the length of a Ustring, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_get_length()</span> function.</p>

<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_ustring_copy_ua(src, &quot;Tizen&quot;);
char dest[BUF_SIZE];
int dest_len;
i18n_uerror_code_e error_code = I18N_ERROR_NONE;
i18n_ustring_to_UTF8(dest, BUF_SIZE, &amp;dest_len, src, i18n_ustring_get_length(src), &amp;error_code);
</pre></li></ul>

<h3 id="unicode" name="unicode">Getting the Unicode Block of a Character</h3>
<p>To get information about the location of a specified character, use the <span style="font-family: Courier New,Courier,monospace">i18n_uchar_get_ublock_code()</span> function.</p>
<p>The function returns, as an out parameter, the Unicode allocation block that contains the specified character. The Unicode blocks are defined in the <span style="font-family: Courier New,Courier,monospace">i18n_uchar_ublock_code_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html#gaa338daff96b0e62243e25fe240e4eda5">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html#gaa338daff96b0e62243e25fe240e4eda5">wearable</a> applications).</p>
<pre class="prettyprint">
i18n_uchar character = 0xC131;
i18n_uchar_ublock_code_e ublock;
i18n_uchar_get_ublock_code(character, &amp;ublock);
</pre>

<h3 id="property" name="property">Getting the Property Value of a Character</h3>

<p>To get the property value of a specified character, use the <span style="font-family: Courier New,Courier,monospace">i18n_uchar_get_int_property_value()</span> function.</p>
<p>The character properties are defined in the <span style="font-family: Courier New,Courier,monospace">i18n_uchar_uproperty_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html#gaa57de8e60ee941839fdfd80833106757">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html#gaa57de8e60ee941839fdfd80833106757">wearable</a> applications).</p>

<p>The following example shows how to read the East Asian width property:</p>
<pre class="prettyprint">
i18n_uchar character = 0xC131;
int32_t property_value;
i18n_uchar_get_int_property_value(character, I18N_UCHAR_EAST_ASIAN_WIDTH, &amp;property_value);
</pre>


<h3 id="normalize" name="normalize">Normalizing Ustrings</h3>
<p>To normalize a Ustring:</p>
<ol>
<li>Get a Unormalizer instance using the <span style="font-family: Courier New,Courier,monospace">i18n_unormalization_get_instance()</span> function of the Unormalization API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNORMALIZATION__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNORMALIZATION__MODULE.html">wearable</a> applications). 
<p>To use the built-in normalizer, set the first parameter to <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>
<pre class="prettyprint">
i18n_unormalizer_h normalizer;
i18n_unormalization_get_instance(NULL, &quot;nfc&quot;, I18N_UNORMALIZATION_DECOMPOSE, &amp;normalizer);
</pre>
</li>

<li>Normalize a Ustring or Uchar with the obtained normalizer using the <span style="font-family: Courier New,Courier,monospace">i18n_unormalization_normalize()</span> function:
<pre class="prettyprint">
i18n_uchar src = 0xACE0;
i18n_uchar dest[4];
int dest_str_len;
i18n_unormalization_normalize(normalizer, &amp;src, 1, dest, 4, &amp;dest_str_len);
</pre></li></ol>

<h3 id="search" name="search">Searching Text in a Ustring</h3>
<p>To search a substring in a Ustring:</p>
<ol>
<li>Create a search iterator using the <span style="font-family: Courier New,Courier,monospace">i18n_usearch_create_new()</span> function of the Usearch API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__USEARCH__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__USEARCH__MODULE.html">wearable</a> applications):
<pre class="prettyprint">
i18n_uchar text[BUF_SIZE];
i18n_ustring_copy_ua(text, &quot;TIZEN&quot;);
i18n_uchar pattern[BUF_SIZE];
i18n_ustring_copy_ua(pattern, &quot;ZEN&quot;);
i18n_usearch_h usearch;
i18n_usearch_create_new(pattern, -1, text, -1, I18N_ULOCALE_US, NULL, &amp;usearch);
</pre></li>
<li>Get the index of the first match (the first occurrence of the found pattern) using the <span style="font-family: Courier New,Courier,monospace">i18n_usearch_first()</span> function:
<pre class="prettyprint">
int index;
i18n_usearch_first(usearch, &amp;index);
</pre></li>
<li>When no longer needed, destroy the search iterator using the <span style="font-family: Courier New,Courier,monospace">i18n_usearch_destroy()</span> function:
<pre class="prettyprint">
i18n_usearch_destroy(usearch);
</pre></li></ol>

<h3 id="uppercase" name="uppercase">Changing the Case in a Ustring</h3>
<p>To change the case in a Ustring:</p>
<ol>
<li>To change all characters&#39; case in a Ustring, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_to_upper()</span> or <span style="font-family: Courier New,Courier,monospace">i18n_ustring_to_lower()</span> function:

<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_ustring_copy_ua(src, &quot;Tizen&quot;);
i18n_uchar dest[BUF_SIZE];
i18n_ustring_to_upper(dest, BUF_SIZE, src, -1, I18N_ULOCALE_US, &amp;error_code);
i18n_ustring_to_lower(dest, BUF_SIZE, src, -1, I18N_ULOCALE_US, &amp;error_code);
</pre>
</li>
<li>To change the string case to title case, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_to_title_new()</span> function:
<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_ustring_copy_ua(src, &quot;Tizen&quot;);
i18n_uchar dest[BUF_SIZE];
i18n_ustring_to_title_new(dest, BUF_SIZE, src, BUF_SIZE, NULL, NULL);
</pre>
</li>
</ol>

<h3 id="concatenate" name="concatenate">Concatenating Ustrings</h3>
<p>To concatenate 2 Ustrings, use the <span style="font-family: Courier New,Courier,monospace">18n_ustring_cat()</span> or <span style="font-family: Courier New,Courier,monospace">18n_ustring_cat_n()</span> function.</p>
<p>The functions differ in that the latter takes a third parameter to define a maximum number of characters to append to the destination string.</p>
<pre class="prettyprint">
i18n_uchar src[BUF_SIZE];
i18n_uchar dest[BUF_SIZE];

i18n_ustring_copy_ua(dest, &quot;Destination string&quot;);
i18n_ustring_copy_ua(src, &quot;Appended string&quot;);

i18n_ustring_cat_n(dest, src, BUF_SIZE);
// Or
i18n_ustring_cat(dest, src);
</pre>

<h3 id="substring" name="substring">Finding a Substring</h3>
<p>To find a substring in a Ustring, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_string()</span> function.</p>
<p>The result is a pointer to the first occurrence of the substring, or <span style="font-family: Courier New,Courier,monospace">NULL</span> if the substring is not found. You can use pointer arithmetic to find the index of the character at which the first occurrence begins.</p>

<pre class="prettyprint">
i18n_uchar s[BUF_SIZE];
i18n_uchar substring[BUF_SIZE];

i18n_uchar *result = i18n_ustring_string(s, substr);

if (result == NULL)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Substring not found&quot;);
}
else
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Substring index: %d&quot;, result - s);
}
</pre>

	
<h2 id="dates" name="dates">Managing Dates and Calendar</h2>


<p>To create and use a calendar:</p>
<ol>
<li><p>To use the functions and data types of the Ucalendar (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html">wearable</a> applications), Udate (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html">wearable</a> applications), and Udatepg (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UDATEPG__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UDATEPG__MODULE.html">wearable</a> applications) APIs, include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre>
<ul>
	<li>The Ucalendar API is used for converting between an <span style="font-family: Courier New,Courier,monospace">i18n_udate</span> object and a set of integer fields, such as <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_YEAR</span>, <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_MONTH</span>, <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_DAY</span>, and <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_HOUR</span>.</li>
	<li>The Udate API is used to convert dates and times from their internal representations to a textual form and back again in a language-independent manner.</li>
	<li>The Udatepg API is used to generate date format patterns, such as &quot;yy-MM-dd&quot;.</li>
</ul>

</li>
<li>To create a Ucalendar, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_create()</span> function:
<pre class="prettyprint">
i18n_uchar timezone[BUF_SIZE];
const char *timezone_name = &quot;America/New_York&quot;;
int timezone_name_len = strlen(timezone_name);
i18n_ustring_copy_ua_n(timezone, timezone_name, timezone_name_len + 1);
i18n_ucalendar_h ucalendar;
i18n_ucalendar_create(timezone, -1, I18N_ULOCALE_US, I18N_UCALENDAR_DEFAULT, &amp;ucalendar);
</pre></li>

<li>To set a date in the Ucalendar, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_set_date_time()</span> function.
<p>In the following example, the date is set as 1 July 2014, 9:00:00.</p>
<p>To define the month, you can use numbers (month reduced by 1, such as 0 for January and 1 for February), or to avoid mistakes, the values of the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_months_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html#ga094cacb2ef9ee4805e42e276fec5ae2f">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html#ga094cacb2ef9ee4805e42e276fec5ae2f">wearable</a> applications).</p>
<pre class="prettyprint">
i18n_ucalendar_set_date_time(ucalendar, 2014, I18N_UCALENDAR_JULY, 1, 9, 0, 0);</pre>
<p>To set a date using milliseconds from the epoch, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_set_milliseconds()</span> function:</p>
<pre class="prettyprint">
i18n_udate udate;
// udate must be set
i18n_ucalendar_set_milliseconds(ucalendar, udate);
</pre>
<p>To add a specified period to the Ucalendar, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_add()</span> function.</p>
<p>Specify the date field to modify (such as year, week, or day) using the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_date_fields_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html#gaee345f9992035a07732d16d69c41c192">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html#gaee345f9992035a07732d16d69c41c192">wearable</a> applications) as the second parameter, and the amount to modify as the third parameter (use a negative value to subtract from the existing value).</p>
<pre class="prettyprint">i18n_ucalendar_add(ucalendar, I18N_UCALENDAR_HOUR, 3);</pre></li>

<li>To get a date from the Ucalendar, you can use various functions:
<ul>
<li>To get a specific date field from a Ucalendar instance, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get()</span> function and define the wanted date field with the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_date_fields_e</span> enumeration:
<pre class="prettyprint">
int uday;
i18n_ucalendar_get(ucalendar, I18N_UCALENDAR_DAY_OF_YEAR, &amp;uday);
</pre>
</li>
<li>To get a date from a Ucalendar in milliseconds from the epoch, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get_milliseconds()</span> function:
<pre class="prettyprint">
i18n_udate date;
i18n_ucalendar_get_milliseconds(ucalendar, &amp;date);
</pre>
</li>
<li>To get the actual current date from the system, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get_now()</span> function. The obtained date is represented as milliseconds from the epoch.
<pre class="prettyprint">
i18n_udate now;
i18n_ucalendar_get_now(&amp;now);
</pre>
</li>
</ul>
<p>To check whether the Ucalendar date is in daylight saving time, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_is_in_daylight_time()</span> function:</p>
<pre class="prettyprint">
bool dst;
i18n_ucalendar_is_in_daylight_time(ucalendar, &amp;dst);
</pre>
</li>

<li>To format a date, you can use a pattern generator or define a date format:
<ul>
<li>Using a pattern generator:
<ol type="a">
<li>To create a Udatepg pattern generator instance, use the <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_create()</span> function and define the desired locale as the first parameter:
<pre class="prettyprint">
i18n_udatepg_h udatepg;
i18n_udatepg_create(I18N_ULOCALE_UK, &amp;udatepg);
</pre>
</li>
<li>To generate a date best pattern with the pattern generator, use the <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_get_best_pattern()</span> function. 
<p>As the second parameter, you need a draft format, which defines the fields to be displayed (for example, E for the day of the week, M for month, y for year, d for the day of the month, and D for day of the year).</p>
<pre class="prettyprint">
int pattern_len;
i18n_uchar format[BUF_SIZE];
i18n_ustring_copy_ua_n(format, &quot;EEEdMMMyyyyHHmmssz&quot;, BUF_SIZE);
i18n_uchar best_pattern[BUF_SIZE];
i18n_udatepg_get_best_pattern(udatepg, format, BUF_SIZE, best_pattern, BUF_SIZE, &amp;pattern_len);
</pre>
</li>
</ol>
</li>
<li>Using a date format:
<ol>
<li>To create a date format, use the <span style="font-family: Courier New,Courier,monospace">i18n_udate_create()</span> function.
<p>As the first and second parameter, specify the formatting style for time and date using the values of the <span style="font-family: Courier New,Courier,monospace">i18n_udate_format_style_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html#gaee2461e926bc151486d380c43bc4f2a3">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html#gaee2461e926bc151486d380c43bc4f2a3">wearable</a> applications).</p>
<pre class="prettyprint">
i18n_udate_format_h date_format;
const char *timezone_name = &quot;Asia/Seoul&quot;;
int timezone_name_len = strlen(timezone_name);
i18n_ustring_copy_ua_n(timezone, timezone_name, timezone_name_len + 1);
i18n_udate_create(I18N_UDATE_FULL, I18N_UDATE_FULL, I18N_ULOCALE_UK, timezone, -1, best_pattern, -1, &amp;date_format);
</pre>
</li>
<li>To obtain a Ustring with a specified date and the created date format, use the <span style="font-family: Courier New,Courier,monospace">i18n_udate_format_date()</span> function:
<pre class="prettyprint">
i18n_uchar date_result[BUF_SIZE];
int date_len;
i18n_udate_format_date(date_format, now, date_result, BUF_SIZE, NULL, &amp;date_len);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>When no longer needed, destroy the Ucalendar, Udatepg, and Udate instances using the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_destroy()</span>, <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_destroy()</span>, and <span style="font-family: Courier New,Courier,monospace">i18n_udate_destroy()</span> functions:
<pre class="prettyprint">
i18n_ucalendar_destroy(ucalendar);
i18n_udatepg_destroy(udatepg);
i18n_udate_destroy(date_format);
</pre></li>
</ol>

<h2 id="locales" name="locales">Managing Locales</h2>

<p>To manage the features of a specific geographical, political, or cultural region:</p>

<ol>
<li><p>To use the functions and data types of the Ulocale API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__ULOCALE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__ULOCALE__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre></li>
<li>To manage locale information:
<ul>
<li>To get the language code associated with a locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_language()</span> function:
<pre class="prettyprint">
char language[BUF_SIZE];
int lang_len;
i18n_ulocale_get_language(I18N_ULOCALE_GERMANY, language, BUF_SIZE, &amp;lang_len);
</pre></li>

<li>To get the language ISO-3 code for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_iso3_language()</span> function:
<pre class="prettyprint">
const char *language_iso = i18n_ulocale_get_iso3_language(I18N_ULOCALE_GERMANY);
</pre>
</li>

<li>To get the full name of the language for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_display_language()</span> function.
<p>In the following example, the name of the &quot;fr_CA&quot; locale is obtained in German:</p>
<pre class="prettyprint">
char *locale = I18N_ULOCALE_CANADA_FRENCH;
i18n_uchar language_name[BUF_SIZE];
int lang_len;
i18n_ulocale_get_display_language(locale, I18N_ULOCALE_GERMANY, language_name, BUF_SIZE, &amp;lang_len);
</pre>
</li>

<li>To get the line orientation for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_line_orientation()</span> function:
<pre class="prettyprint">
const char *locale = I18N_ULOCALE_ENGLISH;
i18n_ulocale_layout_type_e type;
i18n_ulocale_get_line_orientation(locale, &amp;type);
</pre></li>

<li>To get the character orientation for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_character_orientation()</span> function:
<pre class="prettyprint">
const char *locale = I18N_ULOCALE_ENGLISH;
i18n_ulocale_layout_type_e type;
i18n_ulocale_get_character_orientation(locale, &amp;type);
</pre></li>

<li>To get the variant code for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_variant()</span> function.
<p>The function returns the actual size of the variant code.</p>
<pre class="prettyprint">
const char *locale = I18N_ULOCALE_ENGLISH;
char *variant = malloc(sizeof(char) * BUF_SIZE);
int32_t variant_len = i18n_ulocale_get_variant(locale, variant, BUF_SIZE);
</pre>
</li>

<li>To get a full name for the specified locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_display_name()</span> function. 
<p>In the following example, the name of the &quot;fr_CA&quot; locale is obtained in German:</p>
<pre class="prettyprint">
i18n_uchar name[BUF_SIZE];
int name_len;
i18n_ulocale_get_display_name(I18N_ULOCALE_CANADA_FRENCH, I18N_ULOCALE_GERMANY, name, BUF_SIZE, &amp;name_len);
</pre>
</li>

<li>To get or set the default locale, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_default()</span> or <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_set_default()</span> function:
<pre class="prettyprint">
// Get
char *locale;
i18n_ulocale_get_default(&amp;locale);

// Set
i18n_ulocale_set_default(I18N_ULOCALE_KOREA);</pre></li>
</ul></li>
</ol>

<h2 id="numbers" name="numbers">Managing Numbers</h2>

<p>To format and parse numbers for a locale:</p>
<ol>
<li><p>To use the functions and data types of the Unumber API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre></li>
<li>To create a number format, use the <span style="font-family: Courier New,Courier,monospace">i18n_unumber_create()</span> function.
<p>Define the style as the first parameter using the <span style="font-family: Courier New,Courier,monospace">i18n_unumber_format_style_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html#ga4edc8cb72e7f46e05d8cdfe24cf386f1">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html#ga4edc8cb72e7f46e05d8cdfe24cf386f1">wearable</a> applications).</p>
<p>The fourth parameter sets the locale (<span style="font-family: Courier New,Courier,monospace">NULL</span> for default). Some string shortcuts for specific locales are defined in the <span style="font-family: Courier New,Courier,monospace">utils_i18n_types.h</span> header file. For example, <span style="font-family: Courier New,Courier,monospace">I18N_ULOCALE_US</span> is equal to &quot;en_US&quot;.</p>
<pre class="prettyprint">
i18n_unumber_format_h num_format;
i18n_unumber_format_style_e format_style = I18N_UNUMBER_CURRENCY;
const char* locale = I18N_ULOCALE_US;
i18n_unumber_create(format_style, NULL, -1, locale, NULL, &amp;num_format);
</pre>
</li>
<li>To use the created number format to format a given number based on the rules of a specified locale, you can use various <span style="font-family: Courier New,Courier,monospace">i18n_unumber_format_XXX()</span> functions.
<p>The following example formats a double-type number:</p>
<pre class="prettyprint">
#define BUF_SIZE 64
i18n_uchar myString[BUF_SIZE];
double myNumber = 4.5;
i18n_unumber_format_double(num_format, myNumber, myString, BUF_SIZE, NULL);
</pre>

<p>The result set in the <span style="font-family: Courier New,Courier,monospace">myString</span> variable is equal to:</p>
<pre class="prettyprint">
$4.50
</pre>
</li>
<li>To get a symbol associated with the created number format, use the <span style="font-family: Courier New,Courier,monospace">i18n_unumber_get_symbol()</span> function. 
<p>The second parameter uses the values of the <span style="font-family: Courier New,Courier,monospace">i18n_unumber_format_symbol_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html#ga9abb496f12b9fd47244060af5ecbc39e">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html#ga9abb496f12b9fd47244060af5ecbc39e">wearable</a> applications) to define the symbol to be retrieved.</p>
<p>The function returns the symbol used in the given locale. In the following example, it returns the currency <span style="font-family: Courier New,Courier,monospace">$</span> sign:</p>
<pre class="prettyprint">
i18n_uchar buffer[BUF_SIZE];
int buf_len;
i18n_unumber_format_symbol_e symbol = I18N_UNUMBER_CURRENCY_SYMBOL;
i18n_unumber_get_symbol(num_format, symbol, buffer, BUF_SIZE, &amp;buf_len);
</pre>
</li>

<li>When no longer needed, destroy the number format with the <span style="font-family: Courier New,Courier,monospace">i18n_unumber_destroy()</span> function:
<pre class="prettyprint">
i18n_unumber_destroy(num_format);
</pre>
</li>

</ol>

<h2 id="ubrk" name="ubrk">Managing Iteration Using Ubrk</h2>

<p>To manipulate or iterate through strings, you can use the Ubrk library. It helps you to treat strings as a set of characters, words, or sentences:</p>
<ol>
<li><p>To use the functions and data types of the Ubrk API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UBRK__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UBRK__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre></li>

<li>To create an iterator to iterate through a string, use the <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_create()</span> function. 
<p>The first parameter defines the type of the iterator:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UBRK_WORD</span> for word iteration</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UBRK_CHARACTER</span> for character iteration</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UBRK_LINE</span> for line iteration</li>
<li><span style="font-family: Courier New,Courier,monospace">I18N_UBRK_SENTENCE</span> for sentence iteration</li>
</ul>
<pre class="prettyprint">
i18n_ubreak_iterator_h boundary;
const char *str = &quot;Twinkle, twinkle little star&quot;;
int str_len = strlen(str);
i18n_uchar* stringToExamine = malloc(sizeof(i18n_uchar)*(str_len + 1));
i18n_ustring_copy_ua(stringToExamine, str);
i18n_ubrk_create(I18N_UBRK_WORD, I18N_ULOCALE_US, stringToExamine, -1, &amp;boundary);
</pre></li>

<li>To change the position of the iterator, you can use several functions, such as <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_first()</span>, <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_last()</span>, <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_next()</span>, and <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_previous()</span>. 
<p>The following example retrieves the boundaries of the first word in the <span style="font-family: Courier New,Courier,monospace">stringToExamine</span> string. The <span style="font-family: Courier New,Courier,monospace">start</span> and <span style="font-family: Courier New,Courier,monospace">end</span> variables represent the boundaries of the first word, in this example 0 and 7.</p>
<pre class="prettyprint">
int32_t start = i18n_ubrk_first(boundary);
int32_t end = i18n_ubrk_next(boundary);
</pre>
</li>

<li>To retrieve a string delimited with the <span style="font-family: Courier New,Courier,monospace">start</span> and <span style="font-family: Courier New,Courier,monospace">end</span> boundary variables, use the <span style="font-family: Courier New,Courier,monospace">i18n_ustring_copy_n()</span> function.
<p>The second parameter defines the source string, and the third parameter defines the maximum number of characters to copy.</p>
<pre class="prettyprint">
i18n_ustring_copy_n(result, &amp;str[start], end-start);
</pre></li>

<li>When no longer needed, destroy the ubreak iterator with the <span style="font-family: Courier New,Courier,monospace">i18n_ubrk_destroy()</span> function. Remember to free all allocated memory with the <span style="font-family: Courier New,Courier,monospace">free()</span> function.
<pre class="prettyprint">
i18n_ubrk_destroy(boundary);
</pre></li>
</ol>

<h2 id="uenum" name="uenum">Managing Enumerations</h2>
<p>To create collections of strings and iterate through them:</p>
<ol>
<li>
<p>To use the functions and data types of the Uenumeration API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UENUMERATION__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UENUMERATION__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre>
</li>
<li><a href="#create_enum">Create an enumeration</a>.</li>
</ol>

<p>You can also <a href="#get_enum">obtain enumerations from specific functions</a>.</p>

<h3 id="create_enum" name="create_enum">Creating an Enumeration</h3>
<p>To create an enumeration based on existing strings:</p>
<ol>
<li>Define an array of strings (pointers to <span style="font-family: Courier New,Courier,monospace">char</span>):
<pre class="prettyprint">
const char* strings[] = {&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;, &quot;Fourth&quot;};

// Length of the pointers array (the number of strings)
int32_t size = sizeof(strings) / sizeof(strings[0]);
</pre>
</li>

<li>Create an enumeration of the <span style="font-family: Courier New,Courier,monospace">char</span> strings:
<pre class="prettyprint">
i18n_uenumeration_h strings_enum;

i18n_uenumeration_char_strings_enumeration_create(strings, size, &amp;strings_enum);
</pre>

<p>In case of <span style="font-family: Courier New,Courier,monospace">i18n_uchar</span> strings, use the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_uchar_strings_enumeration_create()</span> function.</p>
</li>

<li>Get the number of elements:
<pre class="prettyprint">
int32_t count = i18n_uenumeration_count(strings_enum);
</pre>
<p>If the enumeration was created successfully, the value is equal to the <span style="font-family: Courier New,Courier,monospace">size</span> variable used above.</p>
</li>

<li>Iterate through the <span style="font-family: Courier New,Courier,monospace">char</span> elements using the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_next()</span> function, until it returns <span style="font-family: Courier New,Courier,monospace">NULL</span>.
<p>The string is null-terminated, and the <span style="font-family: Courier New,Courier,monospace">len</span> variable is the length of the string.</p>
<p>Do not free the returned string. The returned pointer is valid until a function is called for the enumeration.</p>
<pre class="prettyprint">
const char *element = NULL;
int len;

element = i18n_uenumeration_next(strings_enum, &amp;len);
while (element != NULL)
{
&nbsp;&nbsp;&nbsp;// Use the returned string

&nbsp;&nbsp;&nbsp;element = i18n_uenumeration_next(strings_enum, &amp;len);
}
</pre>

<p>In case of <span style="font-family: Courier New,Courier,monospace">i18n_uchar</span> strings, use the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_unext()</span> function.</p>
</li>

<li>When no longer needed, destroy the enumeration with the <span style="font-family: Courier New,Courier,monospace">18n_uenumeration_destroy()</span> function:
<pre class="prettyprint">
18n_uenumeration_destroy(strings_enum);
</pre>
</li>

</ol>

<h3 id="get_enum" name="get_enum">Obtaining an Enumeration</h3>
<p>Certain functions in the i18n module provide enumerations of values related to them. After the enumeration is obtained, you can iterate through its values.</p>
<ul>
<li>To get an enumeration of available time zones and iterate through them, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_timezones_create()</span> function:
<pre class="prettyprint">
i18n_uenumeration_h timezones;
i18n_ucalendar_timezones_create(&amp;timezones);

int32_t count = i18n_uenumeration_count(timezones);

const char *tz = NULL;
int len;

tz = i18n_uenumeration_next(timezones, &amp;len);
while (tz != NULL)
{
&nbsp;&nbsp;&nbsp;// Use the time zone string

&nbsp;&nbsp;&nbsp;tz = i18n_uenumeration_next(timezones, &amp;len);
}

i18n_uenumeration_destroy(timezones);
</pre>
</li>
<li>After creating a date pattern generator for a given locale, you can obtain an enumeration of all the pattern skeletons in a canonical form.
<p>To get the enumeration and iterate through the skeletons, use the <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_skeletons_create()</span> function:</p>
<pre class="prettyprint">
i18n_udatepg_h udatepg;
i18n_udatepg_create(I18N_ULOCALE_UK, &amp;udatepg);

i18n_uenumeration_h skeletons;
i18n_udatepg_skeletons_create(udatepg, &amp;skeletons);

i18n_udatepg_destroy(udatepg);

int32_t count = i18n_uenumeration_count(skeletons);

const char *sk = NULL;
int len;

sk = i18n_uenumeration_next(skeletons, &amp;len);
while (sk != NULL)
{
&nbsp;&nbsp;&nbsp;// Use the skeleton string

&nbsp;&nbsp;&nbsp;sk = i18n_uenumeration_next(skeletons, &amp;len);
}

i18n_uenumeration_destroy(skeletons);
</pre>
</li>
<li>To get an enumeration of keywords for a given locale string and iterate through the keywords, use the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_keywords_create()</span> function:
<pre class="prettyprint">
const char *loc_string = &quot;en_US@collation=PHONEBOOK;calendar=GREGORIAN;currency=USD&quot;;

i18n_uenumeration_h keywords;
i18n_ulocale_keywords_create(loc_string, &amp;keywords);

int32_t count = i18n_uenumeration_count(keywords);

const char *keyword = NULL;
int len;

keyword = i18n_uenumeration_next(keywords, &amp;len);
while (keyword != NULL) 
{
&nbsp;&nbsp;&nbsp;// Use the keyword string

&nbsp;&nbsp;&nbsp;keyword = i18n_uenumeration_next(keywords, &amp;len);
}

i18n_uenumeration_destroy(keywords);
</pre>
</li>
</ul>
	

<h2 id="tmz" name="tmz">Managing Time Zones</h2>
<p>To manage time zone details, such as the time zone offset and daylight savings:</p>

<ol><li><p>To use the functions and data types of the Timezone API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__TIMEZONE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__TIMEZONE__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre></li>

<li>To retrieve time zone information:

<ul><li><p>To get the default time zone based on the time zone where the program is running, use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_create_default()</span> function:</p>
<pre class="prettyprint">
i18n_timezone_h tmz;
i18n_timezone_create_default(&amp;tmz);
</pre></li>

<li><p>To get the display name of the time zone, use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_get_display_name()</span> function:</p>
<pre class="prettyprint">
char *display_name;
i18n_timezone_get_display_name(tmz, &amp;display_name);
</pre></li>

<li><p>To get the time zone ID, use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_get_id()</span> function:</p>
<pre class="prettyprint">
char *timezone_id;
i18n_timezone_get_id(tmz, &amp;timezone_id);
</pre></li>

<li>
<p>To check whether a given time zone uses daylight savings time (DST), use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_use_daylight_time()</span> function:</p>
<pre class="prettyprint">
bool dst_savings;
i18n_timezone_use_daylight_time(tmz, &amp;dst_savings);
</pre></li>

<li>
<p>To get the daylight savings (the amount of time to be added to the local standard time to get the local wall clock time), use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_get_dst_savings()</span> function.</p>
<p>The result is returned in milliseconds (3600000 ms = 1 hour). In the following example, milliseconds are changed to minutes (1 min = 60000 ms).</p>
<pre class="prettyprint">
#define MS_TO_MIN 60000
int32_t dst_savings;
i18n_timezone_get_dst_savings(tmz, &amp;dst_savings/MS_TO_MIN);
</pre>
</li>

<li><p>To get the raw GMT offset, use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_get_raw_offset()</span> function.</p>
<p>The result is the number of milliseconds to add to GMT to get the local time, before taking DST into account, and it is returned in milliseconds. In the following example, milliseconds are changed to minutes (1 min = 60000 ms).</p>
<pre class="prettyprint">
#define MS_TO_MIN 60000
int32_t offset_milliseconds;
i18n_timezone_get_raw_offset(tmz, &amp;offset_milliseconds/MS_TO_MIN);
</pre>
</li>

<li><p>To get the region code associated with the time zone ID, use the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_get_region()</span> function:</p>
<pre class="prettyprint">
char region[BUF_SIZE];
int32_t region_len = -1;
i18n_timezone_get_region(timezone_id, region, &amp;region_len, BUF_SIZE);
</pre></li></ul></li>

<li><p>When no longer needed, destroy the time zone instance with the <span style="font-family: Courier New,Courier,monospace">i18n_timezone_destroy()</span> function:</p>
<pre class="prettyprint">
i18n_timezone_destroy(tmz);
</pre></li></ol>	
	
<h2 id="uset" name="uset">Managing Sets</h2>
<p>You can create sets, which contain characters and strings. You can iterate through the set elements and carry out various operations on the set.</p>
<p>To manage sets:</p>
<ol>

<li>To use the functions and data types of the Uset API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__USET__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__USET__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;utils_i18n.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;utils_i18n.h&gt;
</pre>
</li>

<li>To create a set, use various <span style="font-family: Courier New,Courier,monospace">i18n_uset_create_XXX()</span> functions.
<p>The following example creates an empty set:</p>
<pre class="prettyprint">
i18n_uset_h set;
i18n_uset_create_empty(&amp;set);
</pre>
</li>
<li>To manage character sets:
<p>A character set contains characters as its elements.</p>
<ul>
<li>Add characters from a string to the set using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_add_all_code_points()</span> function:
<pre class="prettyprint">
const char *text = &quot;Example string&quot;;
i18n_uchar u_input_text[BUF_SIZE];
i18n_ustring_copy_ua(u_input_text, text);

i18n_uset_add_all_code_points(set, u_input_text, -1);
</pre>
</li>

<li>Get the list of characters in the set using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_char_at()</span> function:
<pre class="prettyprint">
int chars_count = i18n_uset_size(set);
int i;

// Get all characters in the set
for (i = 0; i &lt; chars_count; i++) 
{
&nbsp;&nbsp;&nbsp;i18n_uchar32 uchar = i18n_uset_char_at(set, i);
}
</pre>
</li>

<li>Check whether the set contains a specific character using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_contains()</span> function:
<pre class="prettyprint">
i18n_ubool contains_character = i18n_uset_contains(set, &#39;a&#39;);
</pre>
</li>

<li>Check whether the set contains characters from a specific range using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_contains_range()</span> function.
<p>The following example uses the range &quot;a-c&quot;.</p>
<pre class="prettyprint">
i18n_ubool contains_character = i18n_uset_contains_range(set, &#39;a&#39;, &#39;c&#39;);
</pre>
</li>

<li>Check whether the set contains characters from another set using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_contains_all()</span> function:
<pre class="prettyprint">
i18n_uset_h compare_set = NULL;
i18n_uset_create_empty(&amp;compare_set);
// Fill the second set

i18n_ubool contains_character = i18n_uset_contains_all(set, compare_set);
</pre>
</li>
</ul>
</li>
<li>To manage string sets:
<p>A string set contains strings as its elements.</p>	
<ul>
<li>Add a string to the set using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_add_string()</span> function.
<p>The entire string is a single element.</p>
<pre class="prettyprint">
const char *text = &quot;Example string&quot;;
i18n_uchar u_input_text[BUF_SIZE];
i18n_ustring_copy_ua(u_input_text, text);
 
i18n_uset_add_string(set, u_input_text, -1);
</pre>
</li>

<li>List all strings in the set using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_get_item()</span> function.
<p>The function returns the length of a string item, or 0, if the item is a range.</p>
<pre class="prettyprint">
int strings_count = i18n_uset_get_item_count(set);
int32_t len = 0;
int32_t i;
for (i = 0; i &lt; strings_count; ++i) 
{
&nbsp;&nbsp;&nbsp;i18n_uchar32 start, end;
&nbsp;&nbsp;&nbsp;i18n_uchar string[100];
&nbsp;&nbsp;&nbsp;len = i18n_uset_get_item(set, i, &amp;start, &amp;end, string, 100);
&nbsp;&nbsp;&nbsp;if (len != 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String was found, use the &#39;string&#39; variable
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Check whether the set contains a string using the <span style="font-family: Courier New,Courier,monospace">i18n_uset_contains_string()</span> function:
<pre class="prettyprint">
const char *input_string = &quot;Input string&quot;;
int input_string_len = strlen(input_string);
i18n_uchar *input_ustring = malloc(sizeof(i18n_uchar) * (input_string_len + 1));
i18n_ustring_copy_ua(input_ustring, input_string);

i18n_ubool contains = i18n_uset_contains_string(set, input_ustring, -1);
</pre>
</li>
</ul>
</li>
</ol>

	
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
