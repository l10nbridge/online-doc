<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
	<title>Key Manager: Using Keys and Certificates, and Implementing Access Control</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#initialize">Initializing the Key Manager</a></li>
			<li>Repository management
				<ul class="toc">
					<li><a href="#savingkey">Saving, Getting, or Removing a Key</a></li>
					<li><a href="#savingcert">Saving, Getting, or Removing a Certificate</a></li>
					<li><a href="#savingdata">Saving, Getting, or Removing Data</a></li>
				</ul>
			</li>
			<li><a href="#creatingkey">Creating Key Pairs</a></li>
			<li><a href="#creatingsignat">Creating or Verifying Signatures</a></li>
			<li><a href="#verifying">Verifying or Getting a Certificate Chain</a></li>
			<li><a href="#pkcs">Loading a Certificate or a PKCS#12 File</a></li>
			<li><a href="#access">Implementing Access Control</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/security/key_manager_n.htm">Key Manager Guide</a></li>
			<li> <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__KEY__MANAGER__MODULE.html">Key Manager API for Mobile Native</a></li>
			<li> <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__KEY__MANAGER__MODULE.html">Key Manager API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Key Manager: Using Keys and Certificates, and Implementing Access Control</h1>


<p>This tutorial demonstrates how you can use the key manager to create a secure repository for keys, certificates, and sensitive data.</p>


	<h2>Warm-up</h2>
	<p>Become familiar with the Key Manager API basics by learning about:</p>
<ul>
<li><a href="#initialize">Initializing the Key Manager</a>
<p>Define the header file and privileges required to use the key manager.</p></li>

<li>Repository management
	<ul>
		<li><a href="#savingkey">Saving, Getting, or Removing a Key</a>
		<p>Store, get, or remove a key.</p></li>

		<li><a href="#savingcert">Saving, Getting, or Removing a Certificate</a>
		<p>Store, get, or remove a certificate.</p></li>

		<li><a href="#savingdata">Saving, Getting, or Removing Data</a>
		<p>Store, get, or remove data.</p></li>
	</ul>
</li>
<li><a href="#creatingkey">Creating Key Pairs</a>
<p>Create an RSA/ECDSA private or public key pair and store it inside the key manager.</p></li>

<li><a href="#creatingsignat">Creating or Verifying Signatures</a>
<p>Create or verify a signature on a given message.</p></li>

<li><a href="#verifying">Verifying or Getting a Certificate Chain</a>
<p>Verify a certificate chain and get it.</p></li>

<li><a href="#pkcs">Loading a Certificate or a PKCS#12 File</a>
<p>Load a certificate or key from a certificate file or a <span style="font-family: Courier New,Courier,monospace;">PKCS#12</span> file.</p></li>

<li><a href="#access">Implementing Access Control</a>
<p>Set access control rules for each individual client&#39;s data, certificates, and keys.</p></li>
</ul>
		
<h2 id="initialize" name="initialize">Initializing the Key Manager</h2>

<p>To define the header file and privileges required to use the key manager:</p>
<ol>		
<li><p>To use the Key Manager privileged API, declare the <span style="font-family: Courier New,Courier,monospace;">http://tizen.org/privilege/keymanager</span> privilege in the <span style="font-family: Courier New,Courier,monospace;">manifest.xml</span> file of the application package.</p></li>
<li><p>To use the functions and data types of the Key Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__KEY__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__KEY__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;ckmc/ckmc-manager.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;ckmc/ckmc-manager.h&gt;
</pre></li></ol>

<h2 id="savingkey" name="savingkey">Saving, Getting, or Removing a Key</h2>

<p>To store, remove, and retrieve client keys from the key manager:</p>

<ol><li>Store a new key.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_key_s test_key;
ckmc_policy_s store_policy;
char* alias= &quot;mykey&quot;;
char* key_password = NULL;

char* binary_key = &quot;-----BEGIN PUBLIC KEY-----\n&quot;
&nbsp;&nbsp;&nbsp;&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2b1bXDa+S8/MGWnMkru4\n&quot;
&nbsp;&nbsp;&nbsp;&quot;T4tUddtZNi0NVjQn9RFH1NMa220GsRhRO56F77FlSVFKfSfVZKIiWg6C+DVCkcLf\n&quot;
&nbsp;&nbsp;&nbsp;&quot;zXJ/Z0pvwOQYBAqVMFjV6efQGN0JzJ1Unu7pPRiZl7RKGEI+cyzzrcDyrLLrQ2W7\n&quot;
&nbsp;&nbsp;&nbsp;&quot;0ZySkNEOv6Frx9JgC5NExuYY4lk2fQQa38JXiZkfyzif2em0px7mXbyf5LjccsKq\n&quot;
&nbsp;&nbsp;&nbsp;&quot;v1e+XLtMsL0ZefRcqsP++NzQAI8fKX7WBT+qK0HJDLiHrKOTWYzx6CwJ66LD/vvf\n&quot;
&nbsp;&nbsp;&nbsp;&quot;j55xtsKDLVDbsotvf8/m6VLMab+vqKk11TP4tq6yo0mwyTADvgl1zowQEO9I1W6o\n&quot;
&nbsp;&nbsp;&nbsp;&quot;zQIDAQAB\n&quot;
&nbsp;&nbsp;&nbsp;&quot;-----END PUBLIC KEY-----&quot;;

test_key.raw_key =  (unsigned char *) binary_key;
test_key.key_size = strlen(binary_key);
test_key.key_type = CKMC_KEY_NONE; // The real key type is determined by the key manager
test_key.password = NULL; // This means the binary_key is not encrypted with any password

store_policy.password = key_password; // NULL means that the test_key is not encrypted with a per key password
store_policy.extractable = true; // This means that the key value is extractable

ret = ckmc_save_key(alias, test_key, store_policy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>Get a key from the key manager.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_key_s *test_key;
char* alias= &quot;mykey&quot;;
char* key_password = NULL;

ret = ckmc_get_key(alias, key_password, &amp;test_key);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;key size =%d\n&quot;, test_key-&gt;key_size);

ckmc_key_free(test_key); // Called when the key is no longer needed
</pre></li>

<li>Get the key alias list.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_alias_list_s *alias_list;
ckmc_alias_list_s *plist;
ckmc_key_s *test_key;
char* key_password = NULL;
int count_list = 0;

ret = ckmc_get_key_alias_list(&amp;alias_list);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

plist = alias_list;
do
{
&nbsp;&nbsp;&nbsp;ckmc_get_key(plist-&gt;alias, key_password, &amp;test_key);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%d th key : key size =%d\n&quot;, ++count_list, test_key-&gt;key_size);
&nbsp;&nbsp;&nbsp;ckmc_key_free(test_key);
&nbsp;&nbsp;&nbsp;plist = plist-&gt;next;
}
while(plist != NULL);

ckmc_alias_list_all_free(alias_list); // Called when the list is no longer needed.
</pre></li>
<li>Remove the key.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char* alias= &quot;mykey&quot;;

ret = ckmc_remove_alias(alias);
if (CKMC_ERROR_NONE != ret) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
<table class="note">
 <tbody>
  <tr>
  <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">Note that a few Key manager APIs have been <strong>deprecated since Tizen 2.4</strong>. 
 For example, several ckmc_remove_* () have been replaced by ckmc_remove_alias(). Although the deprecated APIs continue to be available, it is strongly recommended to use new APIs. For more information on the deprecated information, please refer to the <a href="../../../../org.tizen.native.mobile.apireference/group_CAPIKEYMANAGER_MODULE.html">Key-manager API References</a>.</td>
  </tr>
 </tbody>
</table>
</li></ol>

<h2 id="savingcert" name="savingcert">Saving, Getting, or Removing a Certificate</h2>

<p>To store, remove, or retrieve the client certificate from the key manager:</p>

<ol><li>Store a new certificate.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

char* password = NULL;
ckmc_cert_s cert;
const char *alias = &quot;myCert&quot;;
ckmc_policy_s test_policy;

const char *certPem = &quot;-----BEGIN CERTIFICATE-----\n&quot;
&quot;MIIEgDCCA2igAwIBAgIIcjtBYJGQtOAwDQYJKoZIhvcNAQEFBQAwSTELMAkGA1UE\n&quot;
&quot;BhMCVVMxEzARBgNVBAoTCkdvb2dsZSBJbmMxJTAjBgNVBAMTHEdvb2dsZSBJbnRl\n&quot;
&quot;cm5ldCBBdXRob3JpdHkgRzIwHhcNMTQwNTIyMTEyOTQyWhcNMTQwODIwMDAwMDAw\n&quot;
&quot;WjBtMQswCQYDVQQGEwJVUzETMBEGA1UECAwKQ2FsaWZvcm5pYTEWMBQGA1UEBwwN\n&quot;
&quot;TW91bnRhaW4gVmlldzETMBEGA1UECgwKR29vZ2xlIEluYzEcMBoGA1UEAwwTYWNj\n&quot;
&quot;b3VudHMuZ29vZ2xlLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n&quot;
&quot;ALtlLWVWPN3q3bSEQl1Z97gPdgl5vbgJOZSAr0ZY0tJCuFLBbUKetJWryyE+5KpG\n&quot;
&quot;gMMpLS4v8/bvXaZc6mAs+RfAqGM24C3vQg5hPnj4dflnhL0WiOCZBurm1tV4oexk\n&quot;
&quot;HLXs3jr/jpnb738AQpj8zZ9a4VEBuHJRZALnWZ/XhqU+dvYomAoRQNuL5OhkT7uu\n&quot;
&quot;d0NKJL9JjYLyQglGgE2sVsWv2kj7EO/P9Q6NEKt9BGmhMsFvtfeKUaymynaxpR1g\n&quot;
&quot;wEPlqYvB38goh1dIOgVLT0OVyLImeg5Mdwar/8c1U0OYhLOc6PJapOZAfUkE+3+w\n&quot;
&quot;xYt8AChLN1b5szOwInrCVpECAwEAAaOCAUYwggFCMB0GA1UdJQQWMBQGCCsGAQUF\n&quot;
&quot;BwMBBggrBgEFBQcDAjAeBgNVHREEFzAVghNhY2NvdW50cy5nb29nbGUuY29tMGgG\n&quot;
&quot;CCsGAQUFBwEBBFwwWjArBggrBgEFBQcwAoYfaHR0cDovL3BraS5nb29nbGUuY29t\n&quot;
&quot;L0dJQUcyLmNydDArBggrBgEFBQcwAYYfaHR0cDovL2NsaWVudHMxLmdvb2dsZS5j\n&quot;
&quot;b20vb2NzcDAdBgNVHQ4EFgQU0/UtToEtNIfwDwHuYGuVKcj0xK8wDAYDVR0TAQH/\n&quot;
&quot;BAIwADAfBgNVHSMEGDAWgBRK3QYWG7z2aLV29YG2u2IaulqBLzAXBgNVHSAEEDAO\n&quot;
&quot;MAwGCisGAQQB1nkCBQEwMAYDVR0fBCkwJzAloCOgIYYfaHR0cDovL3BraS5nb29n\n&quot;
&quot;bGUuY29tL0dJQUcyLmNybDANBgkqhkiG9w0BAQUFAAOCAQEAcGNI/X9f0g+7ij0o\n&quot;
&quot;ehLpk6vxSMQGrmOZ4+PG/MC9SLClCkt7zJkfU7erZnyVXyxCpwlljq+Wk9YTPUOq\n&quot;
&quot;xD/V2ikQVSAANoxGJFO9UoL5jzWusPhKKv8CcM7fuiERz8K+CfBcqfxbgI5rH0g5\n&quot;
&quot;dYclmLC81cJ/08i+9Nltvxv69Y3hGfEICT6K+EdSxwnQzOhpMZmvxZsIj+d6CVNa\n&quot;
&quot;9ICYgUthsNQVWzrIs5wknpjjZ9liDMwJX0vu8A0rce4X/Lna5hh2bW9igz2iP5WM\n&quot;
&quot;9fuwdbTw4y3jfPQgszU4YZxWxhMzccxe058Qx1tLndAknBQEBesQjXytVQpuM1SV\n&quot;
&quot;rHva8A==\n&quot;
&quot;-----END CERTIFICATE-----\n&quot;;

test_policy.password = password;
test_policy.extractable = true;

cert.raw_cert =  (unsigned char *) certPem;
cert.cert_size = strlen(certPem);
cert.data_format = CKMC_FORM_PEM;

ret = ckmc_save_cert(alias, cert, test_policy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>Get a certificate from the key manager.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_cert_s *test_cert;
char* alias= &quot;myCert&quot;;
char* password = NULL;

ret = ckmc_get_cert(alias, password, &amp;test_cert);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;cert size =%d\n&quot;, test_cert-&gt;cert_size);

ckmc_cert_free(test_cert); // Called when the certificate is no longer needed
</pre></li>
<li>Get the certificate alias list.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_alias_list_s *alias_list;
ckmc_alias_list_s *plist;
ckmc_cert_s *test_cert;
char* password = NULL;
int count_list = 0;

ret = ckmc_get_cert_alias_list(&amp;alias_list);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

plist = alias_list;
do
{
&nbsp;&nbsp;&nbsp;ckmc_get_cert(plist-&gt;alias, password, &amp;test_cert);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%d th cert : cert size =%d\n&quot;, ++count_list, test_cert-&gt;cert_size);
&nbsp;&nbsp;&nbsp;ckmc_cert_free(test_cert);
&nbsp;&nbsp;&nbsp;plist = plist-&gt;next;
}
while(plist != NULL);

ckmc_alias_list_all_free(alias_list); // Called when the list is no longer needed
</pre></li>

<li>Remove the certificate.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char* alias= &quot;myCert&quot;;

ret = ckmc_remove_alias(alias);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li></ol>

<h2 id="savingdata" name="savingdata">Saving, Getting, or Removing Data</h2>

<p>To store, remove, or retrieve client data on or from the key manager:</p>

<ol><li>Store new data.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

char* password = NULL;
ckmc_raw_buffer_s test_data;
const char *alias = &quot;myData&quot;;
ckmc_policy_s test_policy;

const char *char_bin_data = &quot;My Binary Data&quot;;

test_policy.password = password;
test_policy.extractable = true;

test_data.data = (unsigned char *) char_bin_data;
test_data.size = strlen(char_bin_data);
ret = ckmc_save_data(alias, test_data, test_policy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>Get data from the key manager.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

char* password = NULL;
ckmc_raw_buffer_s *test_data;
const char *alias = &quot;myData&quot;;

ret = ckmc_get_data(alias, password, &amp;test_data);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;data size =%d\n&quot;, test_data-&gt; size);

ckmc_buffer_free(test_data); // Called when the buffer is no longer needed
</pre></li>

<li>Get the data alias list.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_alias_list_s *alias_list;
ckmc_alias_list_s *plist;
ckmc_raw_buffer_s *test_data;
char* password = NULL;
int count_list = 0;

ret = ckmc_get_data_alias_list(&amp;alias_list);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

plist = alias_list;
do
{
&nbsp;&nbsp;&nbsp;ckmc_get_data(plist-&gt;alias, password, &amp;test_data);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%d th data : data size =%d\n&quot;, ++count_list, test_data-&gt;size);
&nbsp;&nbsp;&nbsp;ckmc_buffer_free(test_data);
&nbsp;&nbsp;&nbsp;plist = plist-&gt;next;
}
while(plist != NULL);

ckmc_alias_list_all_free(alias_list); // Called when the list is no longer needed
</pre></li>
<li>Remove data.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char* alias= &quot;myData&quot;;

ret = ckmc_remove_alias(alias);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li></ol>

<h2 id="creatingkey" name="creatingkey">Creating Key Pairs</h2>

<p>To generate asymmetric key pairs - the RSA, ECDSA, or DSA key pair:</p>

<ul><li><p>Create the RSA key pair:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

size_t size = 2048; // Key Manager supports 1024, 2048, 4096
const char *private_key_alias = &quot;PRV_RSA1&quot;;
const char *public_key_alias = &quot;PUB_RSA1&quot;;
ckmc_policy_s policy_private_key;
ckmc_policy_s policy_public_key;

// This private key is encrypted with a password additionally
policy_private_key.password = (char *)&quot;pri_password&quot;;
policy_private_key.extractable = false; // This key cannot be extracted from the key manager

policy_public_key.password = NULL;
policy_public_key.extractable = true;

ret = ckmc_create_key_pair_rsa(size, private_key_alias, public_key_alias, policy_private_key, policy_public_key);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li><p>Create the ECDSA key pair:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_ec_type_e ectype = CKMC_EC_PRIME192V1;
const char *private_key_alias = &quot;PRV_ECDSA1&quot;;
const char *public_key_alias = &quot;PUB_ECDSA1&quot;;
ckmc_policy_s policy_private_key;
ckmc_policy_s policy_public_key;

// This private key is encrypted with the password additionally
policy_private_key.password = (char *)&quot;pri_password&quot;;
policy_private_key.extractable = false; // This key cannot be extracted from the key manager

policy_public_key.password = NULL;
policy_public_key.extractable = true;

ret = ckmc_create_key_pair_ecdsa(ectype, private_key_alias, public_key_alias, policy_private_key, policy_public_key);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li><p>Create the DSA  key pair:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

size_t size = 1024;
const char *private_key_alias = &quot;PRV_DSA1&quot;;
const char *public_key_alias = &quot;PUB-DSA1&quot;;
ckmc_policy_s policy_private_key;
ckmc_policy_s policy_public_key;

// This private key is encrypted with a password additionally
policy_private_key.password = (char *)&quot;pri_password&quot;;
policy_private_key.extractable = false;

policy_public_key.password = NULL;
policy_public_key.extractable = true;

ret = ckmc_create_key_pair_dsa(size, private_key_alias, public_key_alias, policy_private_key, policy_public_key);
if (CKMC_ERROR_NONE != ret)

{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li></ul>

<h2 id="creatingsignat" name="creatingsignat">Creating or Verifying Signatures</h2>

			<p>To create or verify signatures:</p>
<ol><li>Store a private and public key.
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char *pub_alias = &quot;pub1&quot;;
const char *pri_alias = &quot;prv1&quot;;
char *key_passwd = (char *) &quot;1234&quot;;
char *pri_passwd = NULL;
char *pub_passwd = NULL;
ckmc_hash_algo_e hash_algo = CKMC_HASH_SHA256;
ckmc_rsa_padding_algo_e pad_algo = CKMC_PKCS1_PADDING;
ckmc_raw_buffer_s *signature;

ckmc_key_s pubkey;
ckmc_policy_s pubpolicy;
ckmc_key_s prikey;
ckmc_policy_s pripolicy;

const char *prv = &quot;-----BEGIN RSA PRIVATE KEY-----\n&quot;
&nbsp;&nbsp;&nbsp;&quot;Proc-Type: 4,ENCRYPTED\n&quot;
&nbsp;&nbsp;&nbsp;&quot;DEK-Info: DES-EDE3-CBC,6C6507B11671DABC\n&quot;
&nbsp;&nbsp;&nbsp;&quot;\n&quot;
&nbsp;&nbsp;&nbsp;&quot;YiKNviNqc/V/i241CKtAVsNckesE0kcaka3VrY7ApXR+Va93YoEwVQ8gB9cE/eHH\n&quot;
&nbsp;&nbsp;&nbsp;&quot;S0j3ZS1PAVFM/qo4ZnPdMzaSLvTQw0GAL90wWgF3XQ+feMnWyBObEoQdGXE828TB\n&quot;
&nbsp;&nbsp;&nbsp;&quot;SLz4UOIQ55Dx6JSWTfEhwAlPs2cEWD14xvuxPzAEzBIYmWmBBsCN94YgFeRTzjH0\n&quot;
&nbsp;&nbsp;&nbsp;&quot;TImoYVMN60GgOfZWw6rXq9RaV5dY0Y6F1piypCLGD35VaXAutdHIDvwUGECPm7SN\n&quot;
&nbsp;&nbsp;&nbsp;&quot;w05jRro53E1vb4mYlZEY/bs4q7XEOI5+ZKT76Xn0oEJNX1KRL1h2q8fgUkm5j40M\n&quot;
&nbsp;&nbsp;&nbsp;&quot;uQj71aLR9KyIoQARwGLeRy09tLVjH3fj66CCMqaPcxcIRIyWi5yYBB0s53ipm6A9\n&quot;
&nbsp;&nbsp;&nbsp;&quot;CYuyc7MS2C0pOdWKsDvYsHR/36KUiIdPuhF4AbaTqqO0eWeuP7Na7dGK56Fl+ooi\n&quot;
&nbsp;&nbsp;&nbsp;&quot;cUpJr7cIqMl2vL25B0jW7d4TB3zwCEkVVD1fBPeNoZWo30z4bILcBqjjPkQfHZ2e\n&quot;
&nbsp;&nbsp;&nbsp;&quot;xNraG3qI4FHjoPT8JEE8p+PgwaMoINlICyIMKiCdvwz9yEnsHPy7FkmatpS+jFoS\n&quot;
&nbsp;&nbsp;&nbsp;&quot;mg8R9vMwgK/HGEm0dmb/7/a0XsG2jCDm6cOmJdZJFQ8JW7hFs3eOHpNlQYDChG2D\n&quot;
&nbsp;&nbsp;&nbsp;&quot;A1ExslqBtbpicywTZhzFdYU/hxeCr4UqcY27Zmhr4JlBPMyvadWKeOqCamWepjbT\n&quot;
&nbsp;&nbsp;&nbsp;&quot;T/MhWJbmWgZbI5s5sbpu7cOYubQcUIEsTaQXGx/KEzGo1HLn9tzSeQfP/nqjAD/L\n&quot;
&nbsp;&nbsp;&nbsp;&quot;T5t1Mb8o4LuV/fGIT33Q3i2FospJMqp2JINNzG18I6Fjo08PTvJ3row40Rb76+lJ\n&quot;
&nbsp;&nbsp;&nbsp;&quot;wN1IBthgBgsgsOdB6XNc56sV+uq2TACsNNWw+JnFRCkCQgfF/KUrvN+WireWq88B\n&quot;
&nbsp;&nbsp;&nbsp;&quot;9UPG+Hbans5A6K+y1a+bzfdYnKws7x8wNRyPxb7Vb2t9ZTl5PBorPLVGsjgf9N5X\n&quot;
&nbsp;&nbsp;&nbsp;&quot;tCdBlfJsUdXot+EOxrIczV5zx0JIB1Y9hrDG07RYkzPuJKxkW7skqeLo8oWGVpaQ\n&quot;
&nbsp;&nbsp;&nbsp;&quot;LGWvuebky1R75hcSuL3e4QHfjBHPdQ31fScB884tqkbhBAWr2nT9bYEmyT170bno\n&quot;
&nbsp;&nbsp;&nbsp;&quot;8QkyOSb99xZBX55sLDHs9p61sTJr2C9Lz/KaWQs+3hTkpwSjSRyjEMH2n491qiQX\n&quot;
&nbsp;&nbsp;&nbsp;&quot;G+kvLEnvtR8sl9zinorj/RfsxyPntAxudfY3qaYUu2QkLvVdfTVUVbxS/Fg8f7B3\n&quot;
&nbsp;&nbsp;&nbsp;&quot;hEjCtpKgFjPxQuHE3didNOr5xM7mkmLN/QA7yHVgdpE64T5mFgC3JcVRpcR7zBPH\n&quot;
&nbsp;&nbsp;&nbsp;&quot;3OeXHgjrhDfN8UIX/cq6gNgD8w7O0rhHa3mEXI1xP14ykPcJ7wlRuLm9P3fwx5A2\n&quot;
&nbsp;&nbsp;&nbsp;&quot;jQrVKJKw1Nzummmspn4VOpJY3LkH4Sxo4e7Soo1l1cxJpzmERwgMF+vGz1L70+DG\n&quot;
&nbsp;&nbsp;&nbsp;&quot;M0hVrz1PxlOsBBFgcdS4TB91DIs/RcFDqrJ4gOPNKCgBP+rgTXXLFcxUwJfE3lKg\n&quot;
&nbsp;&nbsp;&nbsp;&quot;Kmpwdne6FuQYX3eyRVAmPgOHbJuRQCh/V4fYo51UxCcEKeKy6UgOPEJlXksWGbH5\n&quot;
&nbsp;&nbsp;&nbsp;&quot;VFmlytYW6dFKJvjltSmK6L2r+TlyEQoXwTqe4bkfhB2LniDEq28hKQ==\n&quot;
&nbsp;&nbsp;&nbsp;&quot;-----END RSA PRIVATE KEY-----\n&quot;;

const char *pub = &quot;-----BEGIN PUBLIC KEY-----\n&quot;
&nbsp;&nbsp;&nbsp;&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA2b1bXDa+S8/MGWnMkru4\n&quot;
&nbsp;&nbsp;&nbsp;&quot;T4tUddtZNi0NVjQn9RFH1NMa220GsRhRO56F77FlSVFKfSfVZKIiWg6C+DVCkcLf\n&quot;
&nbsp;&nbsp;&nbsp;&quot;zXJ/Z0pvwOQYBAqVMFjV6efQGN0JzJ1Unu7pPRiZl7RKGEI+cyzzrcDyrLLrQ2W7\n&quot;
&nbsp;&nbsp;&nbsp;&quot;0ZySkNEOv6Frx9JgC5NExuYY4lk2fQQa38JXiZkfyzif2em0px7mXbyf5LjccsKq\n&quot;
&nbsp;&nbsp;&nbsp;&quot;v1e+XLtMsL0ZefRcqsP++NzQAI8fKX7WBT+qK0HJDLiHrKOTWYzx6CwJ66LD/vvf\n&quot;
&nbsp;&nbsp;&nbsp;&quot;j55xtsKDLVDbsotvf8/m6VLMab+vqKk11TP4tq6yo0mwyTADvgl1zowQEO9I1W6o\n&quot;
&nbsp;&nbsp;&nbsp;&quot;zQIDAQAB\n&quot;
&nbsp;&nbsp;&nbsp;&quot;-----END PUBLIC KEY-----\n&quot;;
pubkey.raw_key = (unsigned char *)pub;
pubkey.key_size = strlen(pub);
pubkey.key_type = CKMC_KEY_NONE;
pubkey.password = NULL;

pubpolicy.password = pub_passwd;
pubpolicy.extractable = false;

pripolicy.password = pri_passwd;
pripolicy.extractable = true;

prikey.raw_key = (unsigned char *)prv;
prikey.key_size = strlen(prv);
prikey.key_type = CKMC_KEY_NONE;
prikey.password = key_passwd; // The private key, prv, is encrypted with the key_password

ret = ckmc_save_key(pri_alias, prikey, pripolicy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

ret = ckmc_save_key(pub_alias, pubkey, pubpolicy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>Create and verify the signature:
<ul>
<li>Create and verify using a hash algorithm:
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char *message = &quot;message test&quot;;
ckmc_raw_buffer_s msg_buff;
ckmc_raw_buffer_s *signature;
ckmc_hash_algo_e hash_algo = CKMC_HASH_SHA256;
ckmc_rsa_padding_algo_e pad_algo = CKMC_PKCS1_PADDING;

const char *pub_alias = &quot;pub1&quot;;
const char *pri_alias = &quot;prv1&quot;;
char *pri_passwd = NULL;
char *pub_passwd = NULL;

msg_buff.data = (unsigned char *)message;
msg_buff.size = strlen(message);

ret = ckmc_create_signature (pri_alias, pri_passwd, msg_buff, hash_algo, pad_algo, &amp;signature);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

ret = ckmc_verify_signature (pub_alias, pub_passwd, msg_buff, *signature, hash_algo, pad_algo);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>Create and verify without a hash algorithm:
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char *message = &quot;message test&quot;;
ckmc_raw_buffer_s msg_buff;
ckmc_raw_buffer_s *signature;
ckmc_hash_algo_e hash_algo = CKMC_HASH_NONE; // Do not use a hash algorithm 
ckmc_rsa_padding_algo_e pad_algo = CKMC_PKCS1_PADDING;

const char *pub_alias = &quot;pub1&quot;;
const char *pri_alias = &quot;prv1&quot;;
char *pri_passwd = NULL;
char *pub_passwd = NULL;

msg_buff.data = (unsigned char *)message;
msg_buff.size = strlen(message);

ret = ckmc_create_signature (pri_alias, pri_passwd, msg_buff, hash_algo, pad_algo, &amp;signature);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

ret = ckmc_verify_signature (pub_alias, pub_passwd, msg_buff, *signature, hash_algo, pad_algo);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>
</ul>
</li></ol>

<h2 id="verifying" name="verifying">Verifying or Getting a Certificate Chain</h2>

			<p>To verify and get a certificate chain using raw certificates or a certificate alias for untrusted certificates:</p>
<ul><li><p>Get a certificate chain with raw certificates.</p>
<p>The key manager verifies a certificate chain and returns it. The trusted root certificate of the chain must exist in the system certificate storage.</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_cert_s c_cert; // For a user certificate
ckmc_cert_s c_cert1; // For an intermediate untrusted CA certificate
ckmc_cert_list_s untrustedcerts; // Linked list of untrusted CA certificate
ckmc_cert_list_s *cert_chain_list; // Linked list of a certificate chain

int cnt = 0;
ckmc_cert_list_s *current;
ckmc_cert_list_s *next;

const char * ee =
&quot;-----BEGIN CERTIFICATE-----\n&quot;
&quot;MIIF0TCCBLmgAwIBAgIQaPGTP4aS7Ut/WDNaBzdQrDANBgkqhkiG9w0BAQUFADCB\n&quot;
&quot;ujELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\n&quot;
&quot;ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2Ug\n&quot;
&quot;YXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNjE0MDIGA1UEAxMr\n&quot;
&quot;VmVyaVNpZ24gQ2xhc3MgMyBFeHRlbmRlZCBWYWxpZGF0aW9uIFNTTCBDQTAeFw0x\n&quot;
&quot;NDAyMjAwMDAwMDBaFw0xNTAyMjAyMzU5NTlaMIHmMRMwEQYLKwYBBAGCNzwCAQMT\n&quot;
&quot;AlBMMR0wGwYDVQQPExRQcml2YXRlIE9yZ2FuaXphdGlvbjETMBEGA1UEBRMKMDAw\n&quot;
&quot;MDAyNTIzNzELMAkGA1UEBhMCUEwxDzANBgNVBBEUBjAwLTk1MDEUMBIGA1UECBML\n&quot;
&quot;bWF6b3dpZWNraWUxETAPBgNVBAcUCFdhcnN6YXdhMRYwFAYDVQQJFA1TZW5hdG9y\n&quot;
&quot;c2thIDE4MRMwEQYDVQQKFAptQmFuayBTLkEuMQwwCgYDVQQLFANESU4xGTAXBgNV\n&quot;
&quot;BAMUEHd3dy5tYmFuay5jb20ucGwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n&quot;
&quot;AoIBAQDph6x8V6xUW/+651+qHF+UmorH9uaz2ZrX2bIWiMKIJFmpDDHlxcapKkqE\n&quot;
&quot;BV04is83aiCpqKtc2ZHy2g4Hpj1eSF5BP2+OAlo0YUQZPIeRRdiMjmeAxw/ncBDx\n&quot;
&quot;9rQBuCJ4XTD6cqQox5SI0TASOZ+wyAEjbDRXzL73XqRAFZ1LOpb2ONkolS+RutMB\n&quot;
&quot;vshvCsWPeNe7eGLuOh6DyC6r1vX9xhw3xnjM2mTSvmtimgzSLacNGKqRrsucUgcb\n&quot;
&quot;0+O5C2jZAtAMLyZksL92cxmWbtVzUYzem4chjHu5cRxUlPNzUJWrrczueB7Ip4A8\n&quot;
&quot;aQuFMfNXYc0x+WLWjy//urypMKjhAgMBAAGjggGjMIIBnzAbBgNVHREEFDASghB3\n&quot;
&quot;d3cubWJhbmsuY29tLnBsMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQDAgWgMB0GA1Ud\n&quot;
&quot;JQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBEBgNVHSAEPTA7MDkGC2CGSAGG+EUB\n&quot;
&quot;BxcGMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMw\n&quot;
&quot;HQYDVR0OBBYEFN37iGaS7mZnENxZ9FGqNLR+QgoMMB8GA1UdIwQYMBaAFPyKULqe\n&quot;
&quot;uSVae1WFT5UAY4/pWGtDMEIGA1UdHwQ7MDkwN6A1oDOGMWh0dHA6Ly9FVlNlY3Vy\n&quot;
&quot;ZS1jcmwudmVyaXNpZ24uY29tL0VWU2VjdXJlMjAwNi5jcmwwfAYIKwYBBQUHAQEE\n&quot;
&quot;cDBuMC0GCCsGAQUFBzABhiFodHRwOi8vRVZTZWN1cmUtb2NzcC52ZXJpc2lnbi5j\n&quot;
&quot;b20wPQYIKwYBBQUHMAKGMWh0dHA6Ly9FVlNlY3VyZS1haWEudmVyaXNpZ24uY29t\n&quot;
&quot;L0VWU2VjdXJlMjAwNi5jZXIwDQYJKoZIhvcNAQEFBQADggEBAD0wO+rooUrIM4qp\n&quot;
&quot;PHhp+hkXK6WMQ2qzGOmbMcZjw0govg5vkzkefPDryIXXbrF8mRagiJNMSfNaWWeh\n&quot;
&quot;Cj41OV24EdUl0OLbFxNzcvub599zRs/apfaRLTfsmlmOgi0/YP305i+3tJ2ll946\n&quot;
&quot;P+qV1wXnXqTqEdIl4Ys3+1HmDCdTB1hoDwAAzqRVUXZ5+iiwPAU7R/LTHfMjV1ke\n&quot;
&quot;8jtNFfrorlZMCfVH/7eEnHJvVjOJt+YFe4aFMzE+DfuYIK7MH+olC2v79kBwbnEQ\n&quot;
&quot;fvHMA9gFwOYLUBBdSfcocp8EKZ+mRlNPGR/3LBrPeaQQ0GZEkxzRK+v/aNTuiYfr\n&quot;
&quot;oFXtrg0=\n&quot;
&quot;-----END CERTIFICATE-----\n&quot;;

const char *im =
&quot;-----BEGIN CERTIFICATE-----\n&quot;
&quot;MIIF5DCCBMygAwIBAgIQW3dZxheE4V7HJ8AylSkoazANBgkqhkiG9w0BAQUFADCB\n&quot;
&quot;yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\n&quot;
&quot;ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\n&quot;
&quot;U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\n&quot;
&quot;ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\n&quot;
&quot;aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMTYxMTA3MjM1OTU5WjCBujEL\n&quot;
&quot;MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\n&quot;
&quot;ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQg\n&quot;
&quot;aHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNjE0MDIGA1UEAxMrVmVy\n&quot;
&quot;aVNpZ24gQ2xhc3MgMyBFeHRlbmRlZCBWYWxpZGF0aW9uIFNTTCBDQTCCASIwDQYJ\n&quot;
&quot;KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJjboFXrnP0XeeOabhQdsVuYI4cWbod2\n&quot;
&quot;nLU4O7WgerQHYwkZ5iqISKnnnbYwWgiXDOyq5BZpcmIjmvt6VCiYxQwtt9citsj5\n&quot;
&quot;OBfH3doxRpqUFI6e7nigtyLUSVSXTeV0W5K87Gws3+fBthsaVWtmCAN/Ra+aM/EQ\n&quot;
&quot;wGyZSpIkMQht3QI+YXZ4eLbtfjeubPOJ4bfh3BXMt1afgKCxBX9ONxX/ty8ejwY4\n&quot;
&quot;P1C3aSijtWZfNhpSSENmUt+ikk/TGGC+4+peGXEFv54cbGhyJW+ze3PJbb0S/5tB\n&quot;
&quot;Ml706H7FC6NMZNFOvCYIZfsZl1h44TO/7Wg+sSdFb8Di7Jdp91zT91ECAwEAAaOC\n&quot;
&quot;AdIwggHOMB0GA1UdDgQWBBT8ilC6nrklWntVhU+VAGOP6VhrQzASBgNVHRMBAf8E\n&quot;
&quot;CDAGAQH/AgEAMD0GA1UdIAQ2MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRw\n&quot;
&quot;czovL3d3dy52ZXJpc2lnbi5jb20vY3BzMD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6\n&quot;
&quot;Ly9FVlNlY3VyZS1jcmwudmVyaXNpZ24uY29tL3BjYTMtZzUuY3JsMA4GA1UdDwEB\n&quot;
&quot;/wQEAwIBBjARBglghkgBhvhCAQEEBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZ\n&quot;
&quot;MFcwVRYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7\n&quot;
&quot;GS4wJRYjaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwKQYDVR0R\n&quot;
&quot;BCIwIKQeMBwxGjAYBgNVBAMTEUNsYXNzM0NBMjA0OC0xLTQ3MD0GCCsGAQUFBwEB\n&quot;
&quot;BDEwLzAtBggrBgEFBQcwAYYhaHR0cDovL0VWU2VjdXJlLW9jc3AudmVyaXNpZ24u\n&quot;
&quot;Y29tMB8GA1UdIwQYMBaAFH/TZafC3ey78DAJ80M5+gKvMzEzMA0GCSqGSIb3DQEB\n&quot;
&quot;BQUAA4IBAQCWovp/5j3t1CvOtxU/wHIDX4u6FpAl98KD2Md1NGNoElMMU4l7yVYJ\n&quot;
&quot;p8M2RE4O0GJis4b66KGbNGeNUyIXPv2s7mcuQ+JdfzOE8qJwwG6Cl8A0/SXGI3/t\n&quot;
&quot;5rDFV0OEst4t8dD2SB8UcVeyrDHhlyQjyRNddOVG7wl8nuGZMQoIeRuPcZ8XZsg4\n&quot;
&quot;z+6Ml7YGuXNG5NOUweVgtSV1LdlpMezNlsOjdv3odESsErlNv1HoudRETifLriDR\n&quot;
&quot;fip8tmNHnna6l9AW5wtsbfdDbzMLKTB3+p359U64drPNGLT5IO892+bKrZvQTtKH\n&quot;
&quot;qQ2mRHNQ3XBb7a1+Srwi1agm5MKFIA3Z\n&quot;
&quot;-----END CERTIFICATE-----\n&quot;;

c_cert.raw_cert = (unsigned char *) ee;
c_cert.cert_size = strlen(ee);
c_cert.data_format = CKMC_FORM_PEM;

c_cert1.raw_cert = (unsigned char *) im;
c_cert1.cert_size = strlen(im);
c_cert1.data_format = CKMC_FORM_PEM;

untrustedcerts.cert = &amp;c_cert1;
untrustedcerts.next = NULL;

ret = ckmc_get_cert_chain(&amp;c_cert, &amp;untrustedcerts, &amp;cert_chain_list);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

next=cert_chain_list;
do
{
&nbsp;&nbsp;&nbsp;current = next;
&nbsp;&nbsp;&nbsp;next = current-&gt;next;
}
while(next != NULL);

ckmc_cert_list_all_free(cert_chain_list); // Called when the list is no longer needed
</pre></li>

<li><p>Get a certificate chain with aliases of untrusted CA certificates.</p>
<p>The key manager verifies a certificate chain and returns it. The trusted root certificate of the chain must exist in the system certificate storage.</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

char* password = NULL;
const char *ca_alias = &quot;untrusted_ca_cert1&quot;;
ckmc_policy_s test_policy;

ckmc_cert_s c_cert; // For a user certificate
ckmc_cert_s c_cert1; // For an intermediate untrusted CA certificate
ckmc_alias_list_s untrustedcerts; // Linked list of untrusted CA certificate&#39;s alias
ckmc_cert_list_s *cert_chain_list; // Linked list of a certificate chain

int cnt = 0;
ckmc_cert_list_s *current;
ckmc_cert_list_s *next;

const char * ee =
&quot;-----BEGIN CERTIFICATE-----\n&quot;
&quot;MIIF0TCCBLmgAwIBAgIQaPGTP4aS7Ut/WDNaBzdQrDANBgkqhkiG9w0BAQUFADCB\n&quot;
&quot;ujELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\n&quot;
&quot;ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2Ug\n&quot;
&quot;YXQgaHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNjE0MDIGA1UEAxMr\n&quot;
&quot;VmVyaVNpZ24gQ2xhc3MgMyBFeHRlbmRlZCBWYWxpZGF0aW9uIFNTTCBDQTAeFw0x\n&quot;
&quot;NDAyMjAwMDAwMDBaFw0xNTAyMjAyMzU5NTlaMIHmMRMwEQYLKwYBBAGCNzwCAQMT\n&quot;
&quot;AlBMMR0wGwYDVQQPExRQcml2YXRlIE9yZ2FuaXphdGlvbjETMBEGA1UEBRMKMDAw\n&quot;
&quot;MDAyNTIzNzELMAkGA1UEBhMCUEwxDzANBgNVBBEUBjAwLTk1MDEUMBIGA1UECBML\n&quot;
&quot;bWF6b3dpZWNraWUxETAPBgNVBAcUCFdhcnN6YXdhMRYwFAYDVQQJFA1TZW5hdG9y\n&quot;
&quot;c2thIDE4MRMwEQYDVQQKFAptQmFuayBTLkEuMQwwCgYDVQQLFANESU4xGTAXBgNV\n&quot;
&quot;BAMUEHd3dy5tYmFuay5jb20ucGwwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEK\n&quot;
&quot;AoIBAQDph6x8V6xUW/+651+qHF+UmorH9uaz2ZrX2bIWiMKIJFmpDDHlxcapKkqE\n&quot;
&quot;BV04is83aiCpqKtc2ZHy2g4Hpj1eSF5BP2+OAlo0YUQZPIeRRdiMjmeAxw/ncBDx\n&quot;
&quot;9rQBuCJ4XTD6cqQox5SI0TASOZ+wyAEjbDRXzL73XqRAFZ1LOpb2ONkolS+RutMB\n&quot;
&quot;vshvCsWPeNe7eGLuOh6DyC6r1vX9xhw3xnjM2mTSvmtimgzSLacNGKqRrsucUgcb\n&quot;
&quot;0+O5C2jZAtAMLyZksL92cxmWbtVzUYzem4chjHu5cRxUlPNzUJWrrczueB7Ip4A8\n&quot;
&quot;aQuFMfNXYc0x+WLWjy//urypMKjhAgMBAAGjggGjMIIBnzAbBgNVHREEFDASghB3\n&quot;
&quot;d3cubWJhbmsuY29tLnBsMAkGA1UdEwQCMAAwDgYDVR0PAQH/BAQDAgWgMB0GA1Ud\n&quot;
&quot;JQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjBEBgNVHSAEPTA7MDkGC2CGSAGG+EUB\n&quot;
&quot;BxcGMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LnZlcmlzaWduLmNvbS9jcHMw\n&quot;
&quot;HQYDVR0OBBYEFN37iGaS7mZnENxZ9FGqNLR+QgoMMB8GA1UdIwQYMBaAFPyKULqe\n&quot;
&quot;uSVae1WFT5UAY4/pWGtDMEIGA1UdHwQ7MDkwN6A1oDOGMWh0dHA6Ly9FVlNlY3Vy\n&quot;
&quot;ZS1jcmwudmVyaXNpZ24uY29tL0VWU2VjdXJlMjAwNi5jcmwwfAYIKwYBBQUHAQEE\n&quot;
&quot;cDBuMC0GCCsGAQUFBzABhiFodHRwOi8vRVZTZWN1cmUtb2NzcC52ZXJpc2lnbi5j\n&quot;
&quot;b20wPQYIKwYBBQUHMAKGMWh0dHA6Ly9FVlNlY3VyZS1haWEudmVyaXNpZ24uY29t\n&quot;
&quot;L0VWU2VjdXJlMjAwNi5jZXIwDQYJKoZIhvcNAQEFBQADggEBAD0wO+rooUrIM4qp\n&quot;
&quot;PHhp+hkXK6WMQ2qzGOmbMcZjw0govg5vkzkefPDryIXXbrF8mRagiJNMSfNaWWeh\n&quot;
&quot;Cj41OV24EdUl0OLbFxNzcvub599zRs/apfaRLTfsmlmOgi0/YP305i+3tJ2ll946\n&quot;
&quot;P+qV1wXnXqTqEdIl4Ys3+1HmDCdTB1hoDwAAzqRVUXZ5+iiwPAU7R/LTHfMjV1ke\n&quot;
&quot;8jtNFfrorlZMCfVH/7eEnHJvVjOJt+YFe4aFMzE+DfuYIK7MH+olC2v79kBwbnEQ\n&quot;
&quot;fvHMA9gFwOYLUBBdSfcocp8EKZ+mRlNPGR/3LBrPeaQQ0GZEkxzRK+v/aNTuiYfr\n&quot;
&quot;oFXtrg0=\n&quot;
&quot;-----END CERTIFICATE-----\n&quot;;

const char *im =
&quot;-----BEGIN CERTIFICATE-----\n&quot;
&quot;MIIF5DCCBMygAwIBAgIQW3dZxheE4V7HJ8AylSkoazANBgkqhkiG9w0BAQUFADCB\n&quot;
&quot;yjELMAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQL\n&quot;
&quot;ExZWZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTowOAYDVQQLEzEoYykgMjAwNiBWZXJp\n&quot;
&quot;U2lnbiwgSW5jLiAtIEZvciBhdXRob3JpemVkIHVzZSBvbmx5MUUwQwYDVQQDEzxW\n&quot;
&quot;ZXJpU2lnbiBDbGFzcyAzIFB1YmxpYyBQcmltYXJ5IENlcnRpZmljYXRpb24gQXV0\n&quot;
&quot;aG9yaXR5IC0gRzUwHhcNMDYxMTA4MDAwMDAwWhcNMTYxMTA3MjM1OTU5WjCBujEL\n&quot;
&quot;MAkGA1UEBhMCVVMxFzAVBgNVBAoTDlZlcmlTaWduLCBJbmMuMR8wHQYDVQQLExZW\n&quot;
&quot;ZXJpU2lnbiBUcnVzdCBOZXR3b3JrMTswOQYDVQQLEzJUZXJtcyBvZiB1c2UgYXQg\n&quot;
&quot;aHR0cHM6Ly93d3cudmVyaXNpZ24uY29tL3JwYSAoYykwNjE0MDIGA1UEAxMrVmVy\n&quot;
&quot;aVNpZ24gQ2xhc3MgMyBFeHRlbmRlZCBWYWxpZGF0aW9uIFNTTCBDQTCCASIwDQYJ\n&quot;
&quot;KoZIhvcNAQEBBQADggEPADCCAQoCggEBAJjboFXrnP0XeeOabhQdsVuYI4cWbod2\n&quot;
&quot;nLU4O7WgerQHYwkZ5iqISKnnnbYwWgiXDOyq5BZpcmIjmvt6VCiYxQwtt9citsj5\n&quot;
&quot;OBfH3doxRpqUFI6e7nigtyLUSVSXTeV0W5K87Gws3+fBthsaVWtmCAN/Ra+aM/EQ\n&quot;
&quot;wGyZSpIkMQht3QI+YXZ4eLbtfjeubPOJ4bfh3BXMt1afgKCxBX9ONxX/ty8ejwY4\n&quot;
&quot;P1C3aSijtWZfNhpSSENmUt+ikk/TGGC+4+peGXEFv54cbGhyJW+ze3PJbb0S/5tB\n&quot;
&quot;Ml706H7FC6NMZNFOvCYIZfsZl1h44TO/7Wg+sSdFb8Di7Jdp91zT91ECAwEAAaOC\n&quot;
&quot;AdIwggHOMB0GA1UdDgQWBBT8ilC6nrklWntVhU+VAGOP6VhrQzASBgNVHRMBAf8E\n&quot;
&quot;CDAGAQH/AgEAMD0GA1UdIAQ2MDQwMgYEVR0gADAqMCgGCCsGAQUFBwIBFhxodHRw\n&quot;
&quot;czovL3d3dy52ZXJpc2lnbi5jb20vY3BzMD0GA1UdHwQ2MDQwMqAwoC6GLGh0dHA6\n&quot;
&quot;Ly9FVlNlY3VyZS1jcmwudmVyaXNpZ24uY29tL3BjYTMtZzUuY3JsMA4GA1UdDwEB\n&quot;
&quot;/wQEAwIBBjARBglghkgBhvhCAQEEBAMCAQYwbQYIKwYBBQUHAQwEYTBfoV2gWzBZ\n&quot;
&quot;MFcwVRYJaW1hZ2UvZ2lmMCEwHzAHBgUrDgMCGgQUj+XTGoasjY5rw8+AatRIGCx7\n&quot;
&quot;GS4wJRYjaHR0cDovL2xvZ28udmVyaXNpZ24uY29tL3ZzbG9nby5naWYwKQYDVR0R\n&quot;
&quot;BCIwIKQeMBwxGjAYBgNVBAMTEUNsYXNzM0NBMjA0OC0xLTQ3MD0GCCsGAQUFBwEB\n&quot;
&quot;BDEwLzAtBggrBgEFBQcwAYYhaHR0cDovL0VWU2VjdXJlLW9jc3AudmVyaXNpZ24u\n&quot;
&quot;Y29tMB8GA1UdIwQYMBaAFH/TZafC3ey78DAJ80M5+gKvMzEzMA0GCSqGSIb3DQEB\n&quot;
&quot;BQUAA4IBAQCWovp/5j3t1CvOtxU/wHIDX4u6FpAl98KD2Md1NGNoElMMU4l7yVYJ\n&quot;
&quot;p8M2RE4O0GJis4b66KGbNGeNUyIXPv2s7mcuQ+JdfzOE8qJwwG6Cl8A0/SXGI3/t\n&quot;
&quot;5rDFV0OEst4t8dD2SB8UcVeyrDHhlyQjyRNddOVG7wl8nuGZMQoIeRuPcZ8XZsg4\n&quot;
&quot;z+6Ml7YGuXNG5NOUweVgtSV1LdlpMezNlsOjdv3odESsErlNv1HoudRETifLriDR\n&quot;
&quot;fip8tmNHnna6l9AW5wtsbfdDbzMLKTB3+p359U64drPNGLT5IO892+bKrZvQTtKH\n&quot;
&quot;qQ2mRHNQ3XBb7a1+Srwi1agm5MKFIA3Z\n&quot;
&quot;-----END CERTIFICATE-----\n&quot;;

c_cert.raw_cert = (unsigned char *) ee;
c_cert.cert_size = strlen(ee);
c_cert.data_format = CKMC_FORM_PEM;

c_cert1.raw_cert = (unsigned char *) im;
c_cert1.cert_size = strlen(im);
c_cert1.data_format = CKMC_FORM_PEM;

test_policy.password = password;
test_policy.extractable = true;

ret = ckmc_save_cert(ca_alias, c_cert1, test_policy);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

untrustedcerts.alias = (char *)ca_alias;
untrustedcerts.next = NULL;

ret = ckmc_get_cert_chain_with_alias(&amp;c_cert, &amp;untrustedcerts, &amp;cert_chain_list);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

next=cert_chain_list;
do
{
&nbsp;&nbsp;&nbsp;current = next;
&nbsp;&nbsp;&nbsp;next = current-&gt;next;
}
while(next != NULL);

ckmc_cert_list_all_free(cert_chain_list); // Called when the list is no longer needed
</pre></li></ul>

<h2 id="pkcs" name="pkcs">Loading a Certificate or a PKCS#12 File</h2>

<p>To load certificates (from a file with the DER or PEM format) or a private key, a certificate, or CA certificates (from a PKCS#12 file):</p>

<ul><li><p>Load from a certificate file.</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_cert_s *pcert;
// defined_media_storage_directory can be obtained with the storage_get_directory() function
const char *file_name = &quot;&lt;defined_media_storage_directory&gt;/ckmc_test_cert.pem&quot;; 

ret = ckmc_load_cert_from_file(file_name, &amp;pcert);
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;cert size =%d\n&quot;, pcert-&gt;cert_size);

ckmc_cert_free(pcert); // Called when the certificate is no longer needed
</pre></li>

<li><p>Load from a PKCS#12 file.</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

ckmc_pkcs12_s *ppkcs12 = NULL;
// defined_media_storage_directory can be obtained with the storage_get_directory() function
const char *p12file = &quot;&lt;defined_media_storage_directory&gt;/ckmc_p12_test.p12&quot;; 
const char *password = &quot;password&quot;;  // PKCS#12 file can be protected by a password

ret = ckmc_pkcs12_load(p12file, password, &amp;ppkcs12);
if (CKMC_ERROR_NONE != ret || ppkcs12 == NULL)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

if (ppkcs12->priv_key != NULL)
{
&nbsp;&nbsp;&nbsp;// Check a private key
}

if (ppkcs12->cert != NULL)
{
&nbsp;&nbsp;&nbsp;// Check a certificate

}

int cnt = 0;
ckmc_cert_list_s *tmp_list = ppkcs12->ca_chain;
while(tmp_list!= NULL)
{
&nbsp;&nbsp;&nbsp;// Check a certificate list

&nbsp;&nbsp;&nbsp;tmp_list = tmp_list -&gt;next;
}

ckmc_pkcs12_free(ppkcs12);; // Called when the pkcs12 data is no longer needed
</pre>
</li></ul>

<h2 id="access" name="access">Implementing Access Control</h2>

<p>To implement access control rules for each individual client&#39;s data, certificates, and keys:</p>

<ol><li><p>Store test data:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

char* password = NULL;
ckmc_raw_buffer_s test_data;
const char *alias = &quot;targetData&quot;;
ckmc_policy_s test_policy;

const char *char_bin_data = &quot;Access control test Data&quot;;

test_policy.password = password;
test_policy.extractable = true;

test_data.data = (unsigned char *) char_bin_data;
test_data.size = strlen(char_bin_data);
ret = ckmc_save_data(alias, test_data, test_policy);
if (CKMC_ERROR_NONE != ret)

{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li><p>Set a rule to allow access:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char *target1 = &quot;accessor-allow-1&quot;;
const char *target2 = &quot;accessor-allow-2&quot;;
const char *alias = &quot;targetData&quot;;

ret = ckmc_set_permission(alias, target1, CKMC_PERMISSION_READ); // Only allow reading data
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

ret = ckmc_set_permission(alias, target2, CKMC_PERMISSION_READ | CKMC_PERMISSION_REMOVE); // Allow reading and deleting data
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li><p>Set a rule to deny access:</p>
<pre class="prettyprint">
int ret = CKMC_ERROR_NONE;

const char *target = &quot;denied-accessor&quot;;
const char *alias = &quot;targetData&quot;;

ret = ckmc_set_permission(alias, target, CKMC_PERMISSION_READ); // Allow the target user to a read (alias)
if (CKMC_ERROR_NONE != ret)
{
&nbsp;&nbsp;&nbsp;// Error handling
}

ret = ckmc_set_permission(alias, target, CKMC_PERMISSION_NONE); // Deny the target user access to data (alias)
if (CKMC_ERROR_NONE != ret)

{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
 
 </body>
 </html>
