<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>MTP: Transferring Files with Media Transfer Protocol</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#init">Initializing the MTP</a></li>
            <li><a href="#device_list">Getting the MTP Device List</a></li>
            <li><a href="#device_info">Getting MTP Device Information</a></li>
            <li><a href="#storages">Getting the MTP Storages</a></li>
            <li><a href="#storage_info">Getting MTP Storage Information</a></li>
            <li><a href="#object_handle">Getting the Object Handle</a></li>
            <li><a href="#object_info">Getting MTP Object Information</a></li>
            <li><a href="#object_and_thumbnail">Getting the Object and Thumbnail</a></li>
            <li><a href="#events">Managing MTP Events</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/network/mtp_n.htm">MTP Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__MTP__MODULE.html">MTP API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__MTP__MODULE.html">MTP API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>MTP: Transferring Files with Media Transfer Protocol</h1>

<p>This tutorial demonstrates how you can manage the Media Transfer Protocol (MTP) and get files from the MTP responder.</p>

<h2>Warm-up</h2>

<p>Become familiar with the MTP API basics by learning about:</p>

<ul>
    <li><p><a href="#init">Initializing the MTP</a></p>
        <p>Initialize the MTP for use.</p></li>
    <li><p><a href="#device_list">Getting the MTP Device List</a></p>
        <p>Retrieve a list of MTP devices connected to the MTP initiator.</p></li>
    <li><p><a href="#device_info">Getting MTP Device Information</a></p>
        <p>Retrieve information about an MTP device.</p></li>
    <li><p><a href="#storages">Getting the MTP Storages</a></p>
        <p>Retrieve a list of storages in an MTP device.</p></li>
    <li><p><a href="#storage_info">Getting MTP Storage Information</a></p>
        <p>Retrieve information about a storage.</p></li>
    <li><p><a href="#object_handle">Getting the Object Handle</a></p>
        <p>Retrieve the object handle from the MTP device.</p></li>
    <li><p><a href="#object_info">Getting MTP Object Information</a></p>
        <p>Retrieve information about an MTP object.</p></li>
    <li><p><a href="#object_and_thumbnail">Getting the Object and Thumbnail</a></p>
        <p>Retrieve the object and thumbnail from the storage.</p></li>
    <li><p><a href="#events">Managing MTP Events</a></p>
        <p>Use callbacks to receive MTP events.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the MTP API, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/mtp&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To store a file if the input or output path leads to a media storage--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/mediastorage&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To store a file if the input or output path leads to an external storage--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/externalstorage&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

<h2 id="init" name="init">Initializing the MTP</h2>

<p>To initialize the MTP for use:</p>

<ol>
<li>
<p>To use the functions and data types of the MTP API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__MTP__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__MTP__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;mtp.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;mtp.h&gt;
</pre>
</li>
<li><p>Make sure that MTP is supported in your target device.</p></li>
<li>
<p>To initialize the MTP connection, call the <span style="font-family: Courier New,Courier,monospace">mtp_initialize()</span> function. If the function does not return an error, the MTP is ready for use.</p>
<pre class="prettyprint">
int
manager_test_initialize(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_initialize();
&nbsp;&nbsp;&nbsp;&nbsp;if (ret == MTP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;Initialize successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;Initialize failed, ret [%d]&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>
<p>When the MTP is no longer needed, free all resources and deinitialize it:</p>
<pre class="prettyprint">
int
manager_test_deinitialize(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_deinitialize();
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d] : deinitialize&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
</ol>

<h2 id="device_list" name="device_list">Getting the MTP Device List</h2>

<p>To get the MTP devices connected to the MTP initiator, retrieve the MTP device list with the <span style="font-family: Courier New,Courier,monospace">mtp_get_devices()</span> function.</p>

<p>To select the device you want, retrieve information about the devices in the device list with the <span style="font-family: Courier New,Courier,monospace">mtp_deviceinfo_get_XXX()</span> functions. The following example retrieves the manufacturer (for example, &quot;Samsung Electronics Co., Ltd.&quot;) and model name (for example, &quot;SM-A700L&quot;) for each device in the list.</p>

<pre class="prettyprint">
int
manager_test_get_devices(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;int bus_location = 0;
&nbsp;&nbsp;&nbsp;&nbsp;int device_number = 0;
&nbsp;&nbsp;&nbsp;&nbsp;int device_count;
&nbsp;&nbsp;&nbsp;&nbsp;mtp_device_h *mtp_devices = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_devices(&amp;mtp_devices, &amp;device_count);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret != MTP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;mtp_get_devices failed!!!&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;if (device_count == 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;device does not exist!!!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; device_count; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;mtp_device[%d] handle - %d&quot;, i, mtp_devices[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_deviceinfo_get_manufacturer_name(mtp_devices[i], &amp;name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_free(name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_deviceinfo_get_model_name(mtp_devices[i], &amp;name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_free(name);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;Select first device&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;mtp_device = mtp_devices[0];

&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: 1st mtp device [%d]&quot;, ret, mtp_device);

&nbsp;&nbsp;&nbsp;&nbsp;END();

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="device_info" name="device_info">Getting MTP Device Information</h2>

<p>To obtain information on the MTP device, use the <span style="font-family: Courier New,Courier,monospace">mtp_deviceinfo_get_XXX()</span> functions. To avoid memory leaks, free the character array variable with the <span style="font-family: Courier New,Courier,monospace">free()</span> function when no longer needed.</p>

<p>The following example retrieves the device serial number:</p>

<pre class="prettyprint">
mtp_device_h mtp_device; /* Get this variable using mtp_get_devices() */

int
deviceinfo_test_get_serialnumber(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *serial_number = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_deviceinfo_get_serial_number(mtp_device, &amp;serial_number);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: serialnumber[%s]&quot;, ret, serial_number);

&nbsp;&nbsp;&nbsp;&nbsp;if (serial_number == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(serial_number);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="storages" name="storages">Getting the MTP Storages</h2>

<p>To obtain a list of MTP storages in an MTP device, use the <span style="font-family: Courier New,Courier,monospace">mtp_get_storages()</span> function. To avoid memory leaks, free the storage array variable with the <span style="font-family: Courier New,Courier,monospace">free()</span> function when no longer needed.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The storage variable is used in all storage-related functions. Manage it with care.</td>
        </tr>
    </tbody>
</table>

<pre class="prettyprint">
mtp_device_h mtp_device; /* Get this variable using mtp_get_devices() */

int
manager_test_get_storages(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;mtp_storage_h *mtp_storages = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_storages(mtp_device, &amp;mtp_storages, &amp;storage_count);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: storage_count[%d]&quot;, ret, storage_count);

&nbsp;&nbsp;&nbsp;&nbsp;if (storage_count == 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;storage does not exist!!!&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; storage_count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;mtp storage %d [%d]&quot;, i, mtp_storages[i]);

&nbsp;&nbsp;&nbsp;&nbsp;if (mtp_storages != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(mtp_storages);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="storage_info" name="storage_info">Getting MTP Storage Information</h2>

<p>To obtain information on the MTP storage, use the <span style="font-family: Courier New,Courier,monospace">mtp_storageinfo_get_XXX()</span> functions. To avoid memory leaks, free the character array variable with the <span style="font-family: Courier New,Courier,monospace">free()</span> function when no longer needed.</p>

<p>The following example retrieves the storage description:</p>

<pre class="prettyprint">
mtp_device_h mtp_device; /* Get this variable using mtp_get_devices() */
mtp_storage_h mtp_storage; /* Get this variable using mtp_get_storages() */

int
storageinfo_test_get_description(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *description = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_storageinfo_get_description(mtp_device, mtp_storage, &amp;description);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: description[%s]&quot;, ret, description);

&nbsp;&nbsp;&nbsp;&nbsp;if (description != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(description);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="object_handle" name="object_handle">Getting the Object Handle</h2>

<p>To obtain the object handle, get the unique ID value of the object handles from the MTP responder.</p>

<p>When first using the <span style="font-family: Courier New,Courier,monospace">mtp_get_object_handles()</span> function, set the parent object handle to 0 to search the root folder of the storage.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Because the object handle uses a value from another function as a parameter, manage the variable with care.</td>
        </tr>
    </tbody>
</table>

<pre class="prettyprint">
mtp_device_h mtp_device;
mtp_storage_h mtp_storage;

int
manager_test_get_object_handles(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;mtp_object_h *folder_list;
&nbsp;&nbsp;&nbsp;&nbsp;mtp_object_h *file_list;
&nbsp;&nbsp;&nbsp;&nbsp;int folder_count;
&nbsp;&nbsp;&nbsp;&nbsp;int file_count;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_object_handles(mtp_device, mtp_storage, MTP_FILETYPE_FOLDER, 0, &amp;folder_list, &amp;folder_count);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: folder_count in root [%d]&quot;, ret, folder_count);

&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; folder_count; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_objectinfo_get_file_name(mtp_device, folder_list[i], &amp;folder_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: object handle [%d], folder name [%s]&quot;, ret, folder_list[i], folder_name);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_object_handles(mtp_device, mtp_storage, MTP_FILETYPE_JPEG, mtp_object, &amp;file_list, &amp;file_count);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: file_count in root [%d]&quot;, ret, file_count);

&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; file_count; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_objectinfo_get_file_name(mtp_device, file_list[i], &amp;file_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: object handle [%d] file name [%s]&quot;, ret, file_list[i], file_name);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Depending on how you use this API, the performance of the application varies greatly. Typically, MTP transfer through the USB layer is not fast. In addition, larger files on the MTP device take a longer time for the function to handle.
                <p>Rather than getting the object handles inside the device all at once, consider gradually obtaining them through user input. (It is easier to understand the MTP device when it is plugged into the computer.)</p>
            </td>
        </tr>
    </tbody>
</table>

<h2 id="object_info" name="object_info">Getting MTP Object Information</h2>

<p>To obtain information on the MTP object, use the <span style="font-family: Courier New,Courier,monospace">mtp_objectinfo_get_XXX()</span> functions. To avoid memory leaks, free the character array variable with the <span style="font-family: Courier New,Courier,monospace">free()</span> function when no longer needed.</p>

<p>The following example retrieves the object file name:</p>

<pre class="prettyprint">
mtp_device_h mtp_device; /* Get this variable using mtp_get_devices() */
mtp_object_h mtp_object; /* Get this variable using mtp_get_object_handles() */

int
objectinfo_test_get_filename(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_objectinfo_get_file_name(mtp_device, mtp_object, &amp;name);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: object id[%d] filename[%s]&quot;, ret, mtp_object, name);

&nbsp;&nbsp;&nbsp;&nbsp;if (name != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(name);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h2 id="object_and_thumbnail" name="object_and_thumbnail">Getting the Object and Thumbnail</h2>

<p>To get the object and thumbnail: </p>

<ol>
<li>
<p>Get the object data from the MTP responder using the <span style="font-family: Courier New,Courier,monospace">mtp_get_object()</span> function:</p>
<pre class="prettyprint">
mtp_device_h mtp_device;
mtp_object_h mtp_object_handle;

int
manager_test_get_object(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;char filepath[100] = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;snprintf(filepath, 100, &quot;/opt/usr/media/Downloads/JpegObject_%d.jpg&quot;, mtp_object_handle);

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_object(mtp_device, mtp_object_handle, filepath);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: input id[%d]&quot;, ret, mtp_object_handle);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>
<p>If the file is an image file and has a thumbnail, import the thumbnail using the <span style="font-family: Courier New,Courier,monospace">mtp_get_thumbnail()</span> function:</p>
<pre class="prettyprint">
mtp_device_h mtp_device;
mtp_object_h mtp_object_handle;

int
manager_test_get_object(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;char filepath[100] = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;snprintf(filepath, 100, &quot;/opt/usr/media/Downloads/JpegObject_%d.jpg&quot;, mtp_object_handle);

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_get_thumbnail(mtp_device, mtp_object_handle, filepath);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d]: input id[%d]&quot;, ret, mtp_object_handle);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
</ol>

<h2 id="events" name="events">Managing MTP Events</h2>

<p>To receive an event that occurred in the MTP initiator, add the event callback with the <span style="font-family: Courier New,Courier,monospace">mtp_add_mtp_event_cb()</span> function and define the callback.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">event_parameter</span> parameter defines the type of the event:</p>

<ul>
<li><p>Device event type is <span style="font-family: Courier New,Courier,monospace">mtp_device_h</span>.</p></li>
<li><p>Storage event type is <span style="font-family: Courier New,Courier,monospace">mtp_storage_h</span>.</p></li>
<li><p>Object event type is <span style="font-family: Courier New,Courier,monospace">mtp_object_h</span>.</p></li>
</ul>

<p>If the received event is <span style="font-family: Courier New,Courier,monospace">MTP_EVENT_TURNED_OFF</span>, the <span style="font-family: Courier New,Courier,monospace">event_parameter</span> parameter has no meaning. When this event occurs, free all MTP-related resources.</p>

<pre class="prettyprint">
void
__test_mtp_event_cb(mtp_event_e state, int event_parameter, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;state [%d] : %d&quot;, state, event_parameter);
&nbsp;&nbsp;&nbsp;&nbsp;if (state == MTP_EVENT_DEVICE_ADDED || state == MTP_EVENT_DEVICE_REMOVED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtp_device_h mtp_device = (mtp_device_h) event_parameter;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do something */
&nbsp;&nbsp;&nbsp;&nbsp;} else if (state == MTP_EVENT_STORAGE_ADDED || state == MTP_EVENT_STORAGE_REMOVED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtp_storage_h mtp_storage = (mtp_storage_h) event_parameter;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do something */
&nbsp;&nbsp;&nbsp;&nbsp;} else if (state == MTP_EVENT_OBJECT_ADDED || state == MTP_EVENT_OBJECT_ADDED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mtp_object_h mtp_object = (mtp_object_h) event_parameter;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do something */
&nbsp;&nbsp;&nbsp;&nbsp;} else if (state == MTP_EVENT_TURNED_OFF) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_deinitialize();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(&quot;ret[%d] : Terminated daemon&quot;, ret);
&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;}
}

int
application_test_event_callback(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ret = mtp_add_mtp_event_cb(__test_mtp_event_cb, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>