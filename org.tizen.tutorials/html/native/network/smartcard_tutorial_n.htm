<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Smartcard: Accessing Secure Elements</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#service">Using the SE Service</a></li>
			<li><a href="#reader">Managing the Reader</a></li>
			<li><a href="#session">Managing Sessions</a></li>
			<li><a href="#channel">Managing Channels</a></li>
			<li><a href="#send">Sending a Transmission</a></li>			
		</ul>        
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/network/smartcard_n.htm">Smartcard Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">Smartcard API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">Smartcard API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Smartcard: Accessing Secure Elements</h1>

  
<p>This tutorial demonstrates how you can manage smart card features and access secure elements (SE).</p>

<h2>Warm-up</h2>
<p>Become familiar with the Smartcard API basics by learning about:</p>
	<ul>
		<li><a href="#service">Using the SE Service</a>
		<p>Initialize the SE service and retrieve available readers.</p></li>
		<li><a href="#reader">Managing the Reader</a>
		<p>Retrieve the reader name, check whether the SE is present in the reader, open sessions, and close all sessions.</p></li>
		<li><a href="#session">Managing Sessions</a>
		<p>Retrieve session information, open basic and logical channels, and close channels and the session.</p></li>
		<li><a href="#channel">Managing Channels</a>
		<p>Retrieve channel information, select the next applet, transmit APDU commands, and close the channel.</p></li>
		<li><a href="#send">Sending a Transmission</a>
		<p>Retrieve a reader, open a session and a logical channel, and transmit an APDU command over the channel.</p></li>
	</ul>
	
 <h2 id="service" name="service">Using the SE Service</h2>

<p>To use the SE service:</p>
<ol><li>
<p>Initialize the smart card service for use:</p>
<pre class="prettyprint">
int ret;
ret = smartcard_initialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard initialize success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard initialize failed&quot;);
</pre>
<p>The service is no longer needed, deinitialize it:</p>
<pre class="prettyprint">
int ret;
ret = smartcard_deinitialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard deinitialize success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard deinitialize failed&quot;);
</pre>
</li>

<li><p>Retrieve the available readers with the <span style="font-family: Courier New,Courier,monospace;">smartcard_get_readers()</span> function:</p>
<pre class="prettyprint">
int pLength;
int *phReaders = NULL;

ret = smartcard_get_readers(&amp;phReaders, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_get_readers is success&quot;);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;reader handle : %d&quot;, phReaders[0]);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;readers length : %d&quot;, pLength);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_get_readers failed : %d&quot;, ret);
}
</pre></li>
</ol>

 <h2 id="reader" name="reader">Managing the Reader</h2>
			
<p>To manage a reader:</p>			

<ol><li>
<p>Retrieve the name of the reader with the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_get_name()</span> function:</p>
<pre class="prettyprint">
int ret;
char * pReader = NULL;

ret = smartcard_reader_get_name(reader, &amp;pReader);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_get_name success&quot;);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;reader name : %s&quot;, pReader);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_get_name failed : %d&quot;, ret);
}
</pre>
</li>

<li><p>Before establishing a session, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_is_secure_element_present()</span> function to make sure that the SE is present in the reader:</p>

<pre class="prettyprint">
int ret;
bool is_present = false;

ret = smartcard_reader_is_secure_element_present(reader, &amp;is_present);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_is_secure_element_present is success&quot;);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;reader secure element present : %d&quot;, is_present);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_is_secure_element_present failed : %d&quot;, ret);
}
</pre>
</li>


<li><p>Open  a session to connect to the SE in the reader using the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_open_session()</span> function.</p>
<p>When you no longer need the session, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_close_sessions()</span> function to close all sessions opened on the specific reader.</p>
<pre class="prettyprint">
int ret;
int session;
ret = smartcard_reader_open_session(reader, &amp;session);

if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;ret = smartcard_reader_close_sessions(reader);
&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_close_sessions success&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_reader_close_sessions failed : %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;open session failed : %d&quot;, ret);
}
</pre></li>
</ol>


 <h2 id="session" name="session">Managing Sessions</h2>

<p>You can manage a session using the session instance that you have created when opening the session with a reader. The session instance is the first parameter in all session-related APIs.</p> 
 
<p>To manage sessions:</p>

<ul><li>Retrieve the reader that provides the session:
<pre class="prettyprint">int ret;
int reader;

ret = smartcard_session_get_reader(session, &amp;reader);
ret = smartcard_reader_get_name(reader, &amp;pReader);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_get_reader success&quot;);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;reader name : %s&quot;, pReader);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_get_reader failed&quot;);
}
</pre></li>
<li>Retrieve the answer to reset (ATR) of the SE:
<pre class="prettyprint">
int ret;
unsigned char *pAtr;
int pLength;

ret = smartcard_session_get_atr(session, &amp;pAtr, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_get_atr success : %d&quot;, pLength);
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;%x &quot;, (int)pAtr[i]);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_get_atr failed&quot;);
}
</pre></li>
<li>Open a basic or logical channel.
<p>A basic channel is defined in the ISO/IEC 7816-4 specification (the one that has number 0). To open a logical channel with the SE, you must select the applet represented by the given Application ID (AID).</p>
<pre class="prettyprint">
int ret;
unsigned char aid[] = {0x00, 0x01, 0x02, 0x03};
int channel;

// Open basic channel
ret = smartcard_session_open_basic_channel(session, aid, 4, 0x00, &amp;channel);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_open_basic_channel is success : %d&quot;, channel);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_open_basic_channel failed&quot;);

// Open logical channel
ret = smartcard_session_open_logical_channel(session, aid, 12, 0x04, &amp;channel);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_open_basic_channel is success : %d&quot;, (channel);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_open_basic_channel failed : %d&quot;, ret);
</pre>
</li>
<li>Close all channels opened for a specific session:

<pre class="prettyprint">
int ret;
ret = smartcard_session_close_channels(session);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_close_channels is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_close_channels failed&quot;);
</pre>
</li>
<li>Close a session and check that it is truly closed:

<pre class="prettyprint">
int ret;
bool is_closed;

ret = smartcard_session_close(session);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_close is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_close failed&quot;);

ret = smartcard_session_is_closed(session, &amp;is_closed);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_closed == true)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_is_closed is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_session_is_closed failed&quot;);
</pre>
</li></ul>

 <h2 id="channel" name="channel">Managing Channels</h2>

<p>You can manage a channel using the channel instance that you have created when opening the channel with a session. The channel instance is the first parameter in all channel-related APIs.</p>  
 
<p>To manage channels:</p>

<ul>
<li>Retrieve the session that has opened the specific channel:
<pre class="prettyprint">int ret;
int session_handle;

ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;ret = smartcard_channel_get_session(channel, &amp;session_handle);

&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_get_session is success: %d&quot;, session_handle);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_get_session failed&quot;);
}
</pre></li>

<li>Check whether a specific channel is a basic or logical channel:
<pre class="prettyprint">
int ret;
bool is_basic;

ret = smartcard_channel_is_basic_channel(channel, &amp;is_basic);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_basic == false)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_is_basic_channel is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_is_basic_channel failed&quot;);
</pre></li>

<li>Select the next applet on the specific channel that matches to the partial Application ID (AID):
<pre class="prettyprint">
ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;bool is_next = true;
&nbsp;&nbsp;&nbsp;ret = smartcard_channel_select_next(channel, &amp;is_next);
&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_next == false)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_select_next is success&quot;);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_select_next failed&quot;);
}
</pre>
<p>To get a response for the selection command, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_channel_get_select_response()</span> function:</p>
<pre class="prettyprint">
int i, ret;
unsigned char* pSelectResponse;
int pLength;

ret = smartcard_channel_get_select_response(channel, &amp;pSelectResponse, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_get_select_response is success&quot;);
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_print(&quot;%x &quot;, (int)pSelectResponse[i]);
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_get_select_response failed&quot;);
}
</pre>
</li>

<li>Check whether a specific channel is closed:

<pre class="prettyprint">
int ret;
bool is_close;

ret = smartcard_channel_close(channel);
ret = smartcard_channel_is_closed(channel, &amp;is_close);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_close == true)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_is_closed is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_is_closed failed&quot;);
</pre>
</li>
<li>Close the channel opened for a specific SE:

<pre class="prettyprint">
int ret;

ret = smartcard_channel_close(channel);
                        
if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_close is success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_close failed : %d&quot;, ret);
</pre>
</li>
<li>Transmit an APDU command (as per ISO/IEC 7816-4) to the SE:

<pre class="prettyprint">
ret = smartcard_channel_transmit(channel, command, 4, &amp;response, &amp;resp_len);

if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit is success&quot;);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;response is &quot;);
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; resp_len; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;%x &quot;, (int)response[i]);
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;\n&quot;); 
}
else
{
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit failed&quot;);
}
</pre>
<p>To get a response for the transmission, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_channel_transmit_retrieve_response()</span> function:</p>
<pre class="prettyprint">
int i;
unsigned char * ptransmitResponse;

ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit(channel, command, 11, &amp;response, &amp;resp_len);
&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit_retrieve_response(channel, &amp;ptransmitResponse, &amp;pLength);

&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit_get_response is success&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;response is &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;%x &quot;, (int)ptransmitResponse[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit_get_response failed&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li></ul>

<h2 id="send" name="send">Sending a Transmission</h2>

<p>This use case covers the entire work flow of sending an APDU transmission from getting a reader to closing the session afterwards.</p>

<p>To send a transmission:</p>

<ol><li>Define the required variables and initialize the smart card service for use:
<pre class="prettyprint">
int i = 0;
int pLength;
int *phReaders = NULL;
int session;
int channel;
unsigned char aid[] = {0xA0, 0x00, 0x00, 0x00, 0x63, 0x50, 0x4B, 0x43, 0x53, 0x2D, 0x31, 0x35};
unsigned char command[] = {0x00, 0x28, 0x00, 0x00};
unsigned char *response = NULL;
int resp_len = 50;

ret = smartcard_initialize();
if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard initialize success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard initialize failed&quot;);</pre>
</li>

<li>Get the available readers:
<pre class="prettyprint">
ret = smartcard_get_readers(&amp;phReaders, &amp;pLength);</pre>
</li>

<li>Open a session:
<pre class="prettyprint">
if (ret == SMARTCARD_ERROR_NONE &amp;&amp; pLength != 0)
{
&nbsp;&nbsp;&nbsp;ret = smartcard_reader_open_session(phReaders[0], &amp;session);</pre>
</li>

<li>Open a logical channel:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE &amp;&amp; session != 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);</pre>
</li>

<li>Transmit the command:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit(channel, command, 4, &amp;response, &amp;resp_len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit is success&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;response is &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; resp_len; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;%x &quot;, (int)response[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard_channel_transmit failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}</pre>
</li>
<li>Close the session:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = smartcard_session_close(session);
}
</pre>
</li>
<li>Deinitialize the service:
<pre class="prettyprint">
ret = smartcard_deinitialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard deinitialize success&quot;);
else
&nbsp;&nbsp;&nbsp;TC_PRT(&quot;smartcard deinitialize failed&quot;);
</pre>
</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
</html>