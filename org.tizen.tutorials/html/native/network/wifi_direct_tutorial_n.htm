<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Wi-Fi Direct: Managing Wi-Fi Direct&trade;</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>		
			<li><a href="#initialization">Initializing Wi-Fi Direct&trade;</a></li>		
			<li><a href="#activating">Activating Wi-Fi Direct&trade;</a></li>	
			<li>Peers and groups
			<ul class="toc">
			<li><a href="#getting_device_info">Getting the Wi-Fi Direct&trade; Peer Device Information</a></li>			
			<li><a href="#connecting_device">Connecting to a Specific Wi-Fi Direct&trade; Peer Device</a></li>			
			<li><a href="#creating_group">Managing Wi-Fi Direct&trade; Groups</a></li>	
			</ul></li>
			<li><a href="#deactivating">Deactivating Wi-Fi Direct&trade;</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/network/wifi_direct_n.htm">Wi-Fi Direct Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__DIRECT__MODULE.html">Wi-Fi Direct API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Wi-Fi Direct: Managing Wi-Fi Direct&trade;</h1>

  
<p>This tutorial demonstrates how you can manage Wi-Fi Direct&trade; connections.</p>

<p>This feature is supported in mobile applications only.</p>
  
<h2>Warm-up</h2>
<p>Become familiar with the Wi-Fi Direct API basics by learning about:</p>
		<ul>
			<li><a href="#prerequisites">Prerequisites</a>
		    <p>Set the required permissions.</p></li>
			<li><a href="#initialization">Initializing Wi-Fi Direct&trade;</a>
			<p>Initialize Wi-Fi Direct&trade; for using all Wi-Fi Direct&trade; functions.</p></li>			
			<li><a href="#activating">Activating Wi-Fi Direct&trade;</a>
			<p>Activate the Wi-Fi Direct&trade; local device asynchronously.</p></li>	
			<li>Peers and groups
			<ul>			
			<li><a href="#getting_device_info">Getting the Wi-Fi Direct&trade; Peer Device Information</a>
			<p>Obtain the Wi-Fi Direct&trade; peer device information.</p></li>			
			<li><a href="#connecting_device">Connecting to a Specific Wi-Fi Direct&trade; Peer Device</a>
			<p>Connect to a specific Wi-Fi Direct&trade; peer device.</p></li>			
			<li><a href="#creating_group">Managing Wi-Fi Direct&trade; Groups</a>
			<p>Create a Wi-Fi Direct&trade; group and make your device the group owner.</p></li>
			</ul></li>		
			<li><a href="#deactivating">Deactivating Wi-Fi Direct&trade;</a>
			<p>Deactivate the Wi-Fi Direct&trade; local device asynchronously.</p></li>
		</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the Wi-Fi Direct API, the application has to request permission by adding the following privilege to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/wifidirect&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

 <h2 id="initialization" name="initialization">Initializing Wi-Fi Direct&trade;</h2>

<p>To be able to use all Wi-Fi Direct&trade; functions, initialize Wi-Fi Direct&trade;:</p>

<ol>

<li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__DIRECT__MODULE.html">Wi-Fi Direct</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;wifi_direct.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;wifi_direct.h&gt;
</pre></li>
<li>Call the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_initialize()</span> function:

<pre class="prettyprint">
int error_code;

error_code = wifi_direct_initialize();
</pre>
</li>

<li><p>To get the Wi-Fi Direct&trade; activation and deactivation events, set up the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_device_state_changed_cb()</span> callback:</p>

<pre class="prettyprint">
void 
device_state_changed_cb(wifi_direct_error_e error_code, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_device_state_e device_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data);

error_code = wifi_direct_set_device_state_changed_cb(device_state_changed_cb, NULL);
</pre>
</li>

<li><p>To get the Wi-Fi Direct&trade; discovery events, set up the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_discovery_state_changed_cb()</span> callback:</p>

<pre class="prettyprint">
void 
discovery_state_changed_cb(wifi_direct_error_e error_code,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_discovery_state_e discovery_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data);

error_code = wifi_direct_set_discovery_state_changed_cb(discovery_state_changed_cb, NULL);
</pre>
</li>

<li><p>To get Wi-Fi Direct&trade; connection events, set up the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_connection_state_changed_cb()</span> callback:</p>

<pre class="prettyprint">
void 
connection_state_changed_cb(wifi_direct_error_e error_code, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_connection_state_e connection_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data);

error_code = wifi_direct_set_connection_state_changed_cb(connection_state_changed_cb, NULL);
</pre>
</li></ol>

 <h2 id="activating" name="activating">Activating Wi-Fi Direct&trade;</h2>

<p>To activate a Wi-Fi Direct&trade; local device and to check the Wi-Fi Direct&trade; local device state:</p>


<ol><li>Activate a Wi-Fi Direct&trade; local device
<p>Define the <span style="font-family: Courier New,Courier,monospace;">device_state_changed_cb()</span> callback function, which is invoked whenever a Wi-Fi Direct&trade; local device activates or deactivates. In the following example, an information message is printed in the console.</p>

<pre class="prettyprint">
static void 
device_state_changed_cb(wifi_direct_error_e error_code, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_discovery_state_e discovery_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data)
{
&nbsp;&nbsp;&nbsp;if (device_state == WIFI_DIRECT_DEVICE_STATE_ACTIVATED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Activate Wi-Fi Direct&trade; device!\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (device_state == WIFI_DIRECT_DEVICE_STATE_DEACTIVATED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Deactivate Wi-Fi Direct&trade; device!\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li><p>Switch on the Wi-Fi Direct&trade; local device with the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_activate()</span> function.</p>
<p>After the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_activate()</span> function is completed, the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_device_state_changed_cb()</span> callback is invoked.</p>

<pre class="prettyprint">
error_code = wifi_activate(NULL);
</pre></li>

<li>Check the Wi-Fi Direct&trade; state.
<p>You can check the Wi-Fi Direct&trade; local device state using the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_get_state()</span> function:</p>

<pre class="prettyprint">
wifi_direct_state_e state = WIFI_DIRECT_STATE_DEACTIVATED;
wifi_direct_get_state(&amp;state);
printf(&quot;Wi-Fi Direct&trade; state: %d.\n&quot;, state);
</pre></li></ol>

 <h2 id="getting_device_info" name="getting_device_info">Getting the Wi-Fi Direct&trade; Peer Device Information</h2>

<p>To discover nearby Wi-Fi Direct&trade; peer devices, and after discovering, to print the results of the discovery, such as Wi-Fi Direct&trade; peer device information:</p>

<ol><li>Define a callback function for the discovery, to be called when the discovery state is changed:

<pre class="prettyprint">
void 
discovery_state_changed_cb(wifi_direct_error_e error_code, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_discovery_state_e discovery_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data)
{
&nbsp;&nbsp;&nbsp;switch (discovery_state) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_ONLY_LISTEN_STARTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;DISCOVERY_STATE: ONLY_LISTEN_STARTED&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCOVERY_STARTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;DISCOVERY_STATE: DISCOVERY_STARTED&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCOVERY_FOUND:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;DISCOVERY_STATE: DISCOVERY_FOUND&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCOVERY_FINISHED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;DISCOVERY_STATE: DISCOVERY_FINISHED&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;UNKNOWN_DISCOVERY_STATE&quot;;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return &quot;UNKNOWN_DISCOVERY_STATE&quot;;
}
</pre></li>

<li>Start the discovery by scanning for nearby devices.
<p>When the Wi-Fi Direct&trade; discovery state changes, the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_discovery_state_changed_cb()</span> function is called.</p>

<pre class="prettyprint">
wifi_direct_start_discovery(false, 0);
</pre></li>

<li>Show the search results.

<p>Show the discovery result using the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_discovered_peer_cb()</span> callback, which is invoked by the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_foreach_discovered_peers()</span> function. In the following example, the Wi-Fi Direct&trade; peer device information is printed.</p>

<pre class="prettyprint">
bool 
discovered_peer_cb(wifi_direct_discovered_peer_info_s *peer, void *user_data) 
{
&nbsp;&nbsp;&nbsp;if (NULL != peer) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;\nDevice Name: %s&quot;, peer-&gt;device_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;\nMac Address: %s&quot;, peer-&gt;mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
}

int rv = wifi_direct_foreach_discovered_peers(discovered_peer_cb, NULL);
</pre>

<p>You can also get other information, including the connection state, device type, Wi-Fi display information, and WPS type.</p></li></ol>

 <h2 id="connecting_device" name="connecting_device">Connecting to a Specific Wi-Fi Direct&trade; Peer Device</h2>

<p>To connect to a specific device:</p>

<ol><li>Define the callback function for the connection state.

<p>The connection event received from the Wi-Fi Direct&trade; framework invokes a callback. The following example defines a <span style="font-family: Courier New,Courier,monospace;">connection_state_changed_cb()</span> callback to handle all Wi-Fi Direct&trade; connection events.</p>

<pre class="prettyprint">
static void 
connection_state_changed_cb(wifi_direct_error_e error_code, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_connection_state_e connection_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *mac_address, void *user_data) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;Connection state changed to: [%d] [%s]\n&quot;, connection_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test_wfd_convert_connection_state_to_string(connection_state));

&nbsp;&nbsp;&nbsp;bool accept_connection = false;
&nbsp;&nbsp;&nbsp;int rv = 0;

&nbsp;&nbsp;&nbsp;switch (connection_state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_WPS_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Outgoing requests
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_wps_type_e wps_mode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_get_local_wps_type(&amp;wps_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Incoming requests
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_wps_type_e wps_mode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_get_local_wps_type(&amp;wps_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_INVITATION_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Invitation request from peer
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISASSOCIATION_IND:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCONNECTION_IND:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Peer: [%s] disconnected.\n&quot;, mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_IN_PROGRESS:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Connection in progress\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_RSP:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code == WIFI_DIRECT_ERROR_CONNECTION_FAILED) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(MAKE_RED&quot;Time Out or connection failed&quot;RESET_COLOR&quot;\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_GROUP_CREATED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_GROUP_DESTROYED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCONNECTION_RSP:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle the event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Unknown State Received\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>Connect with a Wi-Fi Direct&trade; peer device.

<p>Check whether Wi-Fi Direct&trade; is activated using the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_get_state()</span> function, and then get the specific device address.</p> 
<p>You can obtain the address directly from the user (as in the following example), or by calling the <span style="font-family: Courier New,Courier,monospace;">wifi_direct_foreach_discovered_peers()</span> function to the address through the device discovery process.</p>

<pre class="prettyprint">
char * mac_address = NULL;
wifi_direct_state_e state;
int error_code;

wifi_direct_get_state(&amp;state);
if (state &lt; WIFI_DIRECT_STATE_ACTIVATED)
&nbsp;&nbsp;&nbsp;return -1;
	
mac_address = calloc(1, 32*sizeof(char));
if (!mac_address) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;cannot allocate memory&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;\nEnter Mac_address: &quot;);
if (scanf(&quot; %s&quot;, mac_address) &lt; 1) 
{
&nbsp;&nbsp;&nbsp;free(mac_address);

&nbsp;&nbsp;&nbsp;return -1;
}
if (strlen(mac_address) &gt; 23)
{
&nbsp;&nbsp;&nbsp;printf(&quot;\nWrong Mac_address&quot;);
}

error_code = wifi_direct_connect(mac_address);
if (error_code != WIFI_DIRECT_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;Failed to connect\n&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;Connection step finished\n&quot;);
</pre></li>

<li>When the connection is no longer needed, disconnect from the Wi-Fi Direct&trade; device:

<pre class="prettyprint">
char * mac_address = NULL;
wifi_direct_state_e state;
int error_code;

wifi_direct_get_state(&amp;state);
if (state &lt; WIFI_DIRECT_STATE_ACTIVATED)
&nbsp;&nbsp;&nbsp;return -1;
	
mac_address = calloc(1, 32*sizeof(char));
if (!mac_address) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;cannot allocate memory&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;\nEnter Mac_address: &quot;);
if (scanf(&quot; %s&quot;, mac_address) &lt; 1) 
{
&nbsp;&nbsp;&nbsp;free(mac_address);

&nbsp;&nbsp;&nbsp;return -1;
}
if (strlen(mac_address) &gt; 23)
{
&nbsp;&nbsp;&nbsp;printf(&quot;\nWrong Mac_address&quot;);
}

error_code = wifi_direct_disconnect(mac_address);
if (error_code != WIFI_DIRECT_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;printf(&quot;Failed to disconnect\n&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;Disconnection step finished\n&quot;);
</pre></li></ol>

 <h2 id="creating_group" name="creating_group">Managing Wi-Fi Direct&trade; Groups</h2>

<p>To create an autonomous Wi-Fi Direct&trade; group and to make your device the autonomous group owner:</p>

<ol><li>Create a Wi-Fi Direct&trade; group and become a group owner:

<pre class="prettyprint">
wifi_direct_state_e state;
int error_code;

wifi_direct_get_state(&amp;state);
if (state &lt; WIFI_DIRECT_STATE_ACTIVATED || state &gt; WIFI_DIRECT_STATE_DISCOVERING) 
{
&nbsp;&nbsp;&nbsp;return -1;
}

error_code = wifi_direct_create_group();
if (error_code != WIFI_DIRECT_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;Failed to create wifi direct group\n&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;Connection step finished\n&quot;);
</pre></li>

<li>When Wi-Fi Direct &trade; connections or group is no longer needed, destroy all connections and the group:

<pre class="prettyprint">
wifi_direct_state_e state;
int error_code;

wifi_direct_get_state(&amp;state);
if (state &lt; WIFI_DIRECT_STATE_CONNECTED) 
{
&nbsp;&nbsp;&nbsp;return -1;
}

error_code = wifi_direct_destroy_group();
if (error_code != WIFI_DIRECT_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;printf(&quot;Failed to destroy wifi direct group\n&quot;);

&nbsp;&nbsp;&nbsp;return -1;
}

printf(&quot;Disconnection step finished\n&quot;);
</pre></li></ol>

 <h2 id="deactivating" name="deactivating">Deactivating Wi-Fi Direct&trade;</h2>

<p>To deactivate Wi-Fi Direct&trade; when it is no longer needed (or the application is exiting):</p>
<ol>
<li>
<p>Power off the local device using the <span style="font-family: Courier New,Courier,monospace">wifi_direct_deactivate()</span> function:</p>
<pre class="prettyprint">
wifi_direct_deactivate(NULL);
</pre>
</li>

<li>Unset the callbacks:
<pre class="prettyprint">
// Unset the activation or deactivation event callback
wifi_direct_unset_device_state_changed_cb(NULL);

// Unset the discovery event callback 
wifi_direct_unset_discovery_state_changed_cb(NULL);

// Unset the connection event callback
wifi_direct_unset_connection_state_changed_cb(NULL);
</pre>
</li>

<li>
<p>Release Wi-Fi Direct&trade;:</p>
<pre class="prettyprint">
wifi_direct_deinitialize();
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
</html>