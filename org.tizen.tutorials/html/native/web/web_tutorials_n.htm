<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Web: Managing Web Pages and Web Content</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
    		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#init">Initializing the EWK WebKit</a>
			</li>
			<li><a href="#window">Creating a Window Object</a>
			</li>
			<li><a href="#layout">Setting the Window Layout and View</a>
			</li>
			<li><a href="#keymouse">Handling Key and Mouse Events</a>
			</li>
			<li><a href="#show">Showing the Window and Setting the Focus</a>
			</li>
			<li><a href="#helper">Finding a Window</a>
			</li>
			<li><a href="#finalize">Finalizing the Application</a>
			</li>
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/web/web_guide_n.htm">Web Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__FRAMEWORK.html">Web API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WEB__FRAMEWORK.html">Web API for Wearable Native</a></li>
		</ul>
       
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Web: Managing Web Pages and Web Content</h1>

<p>This tutorial demonstrates how you can create a simple Web browser.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Web API basics by learning about:</p>
	<ul>
		<li><a href="#init">Initializing the EFL WebKit</a>
		<p>Initialize the EFL WebKit (EWK) for use.</p></li>
		<li><a href="#window">Creating a Window Object</a>
		<p>Create a window object.</p></li>
		<li><a href="#layout">Setting the Window Layout and View</a>
		<p>Create the window layout and set the window smart view and settings.</p></li>
		<li><a href="#keymouse">Handling Key and Mouse Events</a>
		<p>Handle the key and mouse event.</p></li>
		<li><a href="#show">Showing the Window and Setting the Focus</a>
		<p>Show a window and set the focus.</p></li>
		<li><a href="#helper">Finding a Window</a>
		<p>Use the helper functions to find a window.</p></li>
		<li><a href="#finalize">Finalizing the Application</a>
		<p>Finalize the application.</p></li>
	</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the Web API, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To launch another application conditionally--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/appmanager.launch&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To create, update, and delete content--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/content.write&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To use the Internet connection--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/internet&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To provide user notifications, such as messages and badges--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/notification&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To use the user location data--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/location&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To manage the device cameras to preview and capture pictures--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/camera&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To access, read, and write to the external storage--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/externalstorage&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To access the display--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/display&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To create a network connection--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.get&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
	
 <h2 id="init" name="init">Initializing the EWK WebKit</h2>

<p>To initialize the EWK WebKit:</p>
<ol><li>To use the functions and data types of the WebView API (in <a href="../../../../org.tizen.native.mobile.apireference/group__WEBVIEW.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__WEBVIEW.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;EWebKit.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;Ecore.h&gt;
#include &lt;Ecore_Evas.h&gt;
#include &lt;Ecore_Getopt.h&gt;
#include &lt;Eet.h&gt;
#include &lt;Eina.h&gt;
#include &lt;Elementary.h&gt;
#include &lt;Evas.h&gt;
#include &lt;EWebKit.h&gt;
#include &lt;app.h&gt;
</pre>
<p>The sample browser created in this tutorial also requires the <span style="font-family: Courier New,Courier,monospace;">&lt;Ecore.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Ecore_Evas.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Ecore_Getopt.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Eet.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Eina.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Elementary.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace;">&lt;Evas.h&gt;</span>, and <span style="font-family: Courier New,Courier,monospace;">&lt;app.h&gt;</span> header files.</p>

</li>
<li>The sample browser uses several Evas objects to build the browser UI. To easily manage the UI elements, store the browser window data (including the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> instances) in the <span style="font-family: Courier New,Courier,monospace">Browser_window</span> data structure:
<pre class="prettyprint">
struct _Browser_Window {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *elm_window;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *ewk_view;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *back_button;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *forward_button;
};
typedef struct _Browser_Window Browser_Window;

EXPORT_API int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;int args = 1;
&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window window;
&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;window, 0x00, sizeof(Browser_Window));

&nbsp;&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s ops;
&nbsp;&nbsp;&nbsp;&nbsp;memset(&amp;ops, 0x00, sizeof(ui_app_lifecycle_callback_s));

&nbsp;&nbsp;&nbsp;&nbsp;ops.create = br_app_create;

&nbsp;&nbsp;&nbsp;&nbsp;return ui_app_main(argc, argv, &amp;ops, &amp;window);
}
</pre></li>

<li>To create a window, call the <span style="font-family: Courier New,Courier,monospace">window_create()</span> function in the <span style="font-family: Courier New,Courier,monospace">br_app_create()</span> life-cycle callback function:
<pre class="prettyprint">
window = window_create(NULL, 0, 0, EINA_FALSE);
</pre></li></ol>

 <h2 id="window" name="window">Creating a Window Object</h2>

<p>To create a window object:</p>
<ol>
<li>To create a window object, use the <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> function:
 
<pre class="prettyprint">
static Browser_Window*
window_create(Evas_Object *opener, int width, int height, Eina_Bool view_mode)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Allocate memory */
&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window *window = calloc(1, sizeof(Browser_Window));
&nbsp;&nbsp;&nbsp;&nbsp;if (!window) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* &quot;ERROR: could not create browser window.&quot; */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/* If you want to use GPU acceleration, use the following function */
&nbsp;&nbsp;&nbsp;&nbsp;/* elm_config_accel_preference_set(&quot;opengl:depth24:stencil8&quot;); */

&nbsp;&nbsp;&nbsp;&nbsp;/* Create window */
&nbsp;&nbsp;&nbsp;&nbsp;window-&gt;elm_window = elm_win_add(NULL, &quot;minibrowser-window&quot;, ELM_WIN_BASIC);
</pre></li>

<li>Add a smart callback to the window to handle the window deletion event. 
<p>In the callback, call the <span style="font-family: Courier New,Courier,monospace">window_close()</span> function for the object returned from the <span style="font-family: Courier New,Courier,monospace">window_find_with_elm_window()</span> function call.</p>
 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(window-&gt;elm_window, &quot;delete,request&quot;, on_window_deletion, &amp;window);
}

static void
on_window_deletion(void *user_data, Evas_Object *elm_window, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;window_close(window_find_with_elm_window(elm_window));
}
</pre></li></ol>


 <h2 id="layout" name="layout">Setting the Window Layout and View</h2>

<p>Create the layout for the browser window. The layout contains 2 boxes:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">vertical_layout</span> contains the view object that displays the browser pages.</li>
<li><span style="font-family: Courier New,Courier,monospace">horizontal_layout</span> is a top bar that contains the buttons used to move between browser pages.</li>
</ul>

<p class="figure">Figure: Window layout</p>
<p align="center"><img alt="Window layout" src="../../images/window_layout.png"/></p>


<ol>
<li><p>Create new boxes:</p>
<ol type="a">
<li>Add the boxes using the <span style="font-family: Courier New,Courier,monospace">elm_box_add()</span> function.</li>
<li>Set the hints for the object weight using the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_weight_set()</span> function.
<p>The <span style="font-family: Courier New,Courier,monospace">EVAS_HINT_EXPAND</span> and <span style="font-family: Courier New,Courier,monospace">EVAS_HINT_FILL</span> are macro definitions for the values 1.0  and -1.0.</p></li>
<li>Add the <span style="font-family: Courier New,Courier,monospace">vertical_layout</span> box as a resize subobject of the window using the <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> function.
<p>The resize subobject size and position are controlled by the window directly.</p></li>
<li>Add a subobject at the end of the pack list using the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> function. </li>
<li>Make the object visible using the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function.</li>
</ol>

<pre class="prettyprint">
/* Create vertical layout */
Evas_Object *vertical_layout = elm_box_add(window-&gt;elm_window);
elm_box_padding_set(vertical_layout, 0, 2);
evas_object_size_hint_weight_set(vertical_layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(window-&gt;elm_window, vertical_layout);
evas_object_show(vertical_layout);

/* Create horizontal layout for top bar */
Evas_Object *horizontal_layout = elm_box_add(window-&gt;elm_window);
elm_box_horizontal_set(horizontal_layout, EINA_TRUE);
evas_object_size_hint_weight_set(horizontal_layout, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(horizontal_layout, EVAS_HINT_FILL, 0.0);
elm_box_pack_end(vertical_layout, horizontal_layout);
evas_object_show(horizontal_layout);
</pre>
</li>

<li>Create a window view to display the browser pages and set the user agent:
<ul>
<li>To create the view, use the <span style="font-family: Courier New,Courier,monospace">ewk_view_add()</span> function.</li>
<li>To set the user agent, use the <span style="font-family: Courier New,Courier,monospace">ewk_view_user_agent_set()</span> function.</li>
</ul>

<pre class="prettyprint">
static Browser_Window*
window_create(Evas_Object *opener, int width, int height, Eina_Bool view_mode)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas *evas = evas_object_evas_get(window-&gt;elm_window);
&nbsp;&nbsp;&nbsp;&nbsp;window-&gt;ewk_view = ewk_view_add(evas);

&nbsp;&nbsp;&nbsp;&nbsp;ewk_view_user_agent_set(window-&gt;ewk_view, user_agent_string);
}
</pre>
</li>
</ol>

 <h2 id="keymouse" name="keymouse">Handling Key and Mouse Events</h2>
 
<p>To handle mouse or key events in the window:</p>
<ol>
<li>Set callbacks for the mouse and key events using the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function:

<pre class="prettyprint">
static Browser_Window*
window_create(Evas_Object *opener, int width, int height, Eina_Bool view_mode)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Key down event */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(window-&gt;ewk_view, EVAS_CALLBACK_KEY_DOWN, on_key_down, window);
&nbsp;&nbsp;&nbsp;&nbsp;/* Mouse down event */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(window-&gt;ewk_view, EVAS_CALLBACK_MOUSE_DOWN, on_mouse_down, window);
}
</pre>
</li>
<li>Define the key event down callback.
<p>The <span style="font-family: Courier New,Courier,monospace">ev-&gt;key</span> instance contains the name of the key that caused the event.</p>
<p>To handle pressed key modifiers, such as <strong>Ctrl</strong> or <strong>Alt</strong>, use the <span style="font-family: Courier New,Courier,monospace">evas_key_modifier_is_set()</span> function. To get the <span style="font-family: Courier New,Courier,monospace">Evas_Modifier</span> object that contains information about which key modifiers are registered, call the <span style="font-family: Courier New,Courier,monospace">evas_key_modifier_get()</span> function, passing the <span style="font-family: Courier New,Courier,monospace">Evas</span> canvas object as a parameter.</p>

<pre class="prettyprint">
static void
on_key_down(void *user_data, Evas *e, Evas_Object *ewk_view, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window *window = (Browser_Window *)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Event_Key_Down *ev = (Evas_Event_Key_Down*)event_info;

&nbsp;&nbsp;&nbsp;&nbsp;const Evas_Modifier *mod = evas_key_modifier_get(e);
&nbsp;&nbsp;&nbsp;&nbsp;Eina_Bool ctrlPressed = evas_key_modifier_is_set(mod, &quot;Control&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;Eina_Bool altPressed = evas_key_modifier_is_set(mod, &quot;Alt&quot;);
}
</pre>

<p>For example, if the <strong>Alt + Left Arrow</strong> key combination is pressed, the <span style="font-family: Courier New,Courier,monospace">(!strcmp(ev-&gt;key, &quot;Left&quot;) &amp;&amp; altPressed)</span> statement must evaluate to <span style="font-family: Courier New,Courier,monospace">TRUE</span>.</p>

<p>The following table shows how the key combinations match to specific view functions.</p>
<table> 
   <caption>
     Table: Key behavior
   </caption> 
   <tbody> 
    <tr> 
     <th>Key</th> 
     <th>Behavior</th>
	 <th>API</th>	 
    </tr> 
    <tr> 
	<td>Alt+Left</td>
     <td>Go to the previous view in the browsing history.</td>
	<td><span style="font-family: Courier New,Courier,monospace">ewk_view_back()</span></td>	     
    </tr> 	
    <tr> 
	<td>Alt+Right</td>
     <td>Go to the next view in the browsing history.</td>
	<td><span style="font-family: Courier New,Courier,monospace">ewk_view_forward()</span></td>	     
    </tr> 
	    <tr> 
	<td>F5</td>
     <td>Reload the view.</td>
	<td><span style="font-family: Courier New,Courier,monospace">ewk_view_reload()</span></td>	     
    </tr> 
	    <tr> 
	<td>Alt+F5</td>
     <td>Reload the view bypassing the cache.</td>
	<td><span style="font-family: Courier New,Courier,monospace">ewk_view_bypass_cache()</span></td>	     
    </tr> 
	    <tr> 
	<td>F6</td>
     <td>Stop loading the view.</td>
	<td><span style="font-family: Courier New,Courier,monospace">ewk_view_stop()</span></td>	     
    </tr> 
   </tbody> 
</table> 
</li>
<li>Define the mouse down event callback.
<p>The mouse down event information is stored in the <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Down</span> instance. Similarly as in the key events, the <span style="font-family: Courier New,Courier,monospace">ev-&gt;button</span> instance contains information on which button was pressed.</p>
<p>In the following example, pressing the first button calls the <span style="font-family: Courier New,Courier,monospace">view_focus_set()</span> function to update the focus:</p>

<pre class="prettyprint">
static void
on_mouse_down(void *user_data, Evas *e, Evas_Object *ewk_view, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window *window = (Browser_Window *)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Event_Mouse_Down *ev = (Evas_Event_Mouse_Down *)event_info;

&nbsp;&nbsp;&nbsp;&nbsp;if (ev-&gt;button == 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_focus_set(window, EINA_TRUE);
}
</pre>
</li>
</ol>

 <h2 id="show" name="show">Showing the Window and Setting the Focus</h2>

<p>In EFL, the UI focus control is implemented in an Elementary, not Evas, object. Therefore, the application using EWK derived from an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> must control the focus itself.</p>
<p>To show the window with the view object (<span style="font-family: Courier New,Courier,monospace">ewk_view</span>) and set the focus to the view:</p>
<ol>
<li>
<p>Steal focus away from the <span style="font-family: Courier New,Courier,monospace">elm_window</span> object and give it to the <span style="font-family: Courier New,Courier,monospace">ewk_view</span>.</p>
<p>Unfocus the window with the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_set()</span> function, and move the focus to the view with the <span style="font-family: Courier New,Courier,monospace">evas_object_focus_set()</span> function:</p>

<pre class="prettyprint">
static void
view_focus_set(Browser_Window *window, Eina_Bool focus)
{
&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   You steal focus away from the elm focus model and start to do things
&nbsp;&nbsp;&nbsp;&nbsp;   manually, so elm has no clue what is up. Tell elm to unfocus
&nbsp;&nbsp;&nbsp;&nbsp;   the top level UI component
&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_focus_set(elm_object_top_widget_get(window-&gt;elm_window), EINA_FALSE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_focus_set(window-&gt;ewk_view, focus);
};
</pre>
</li>
<li>
<p>Within the <span style="font-family: Courier New,Courier,monospace">window_create()</span> function, use the  <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function to make the window visible, and call the <span style="font-family: Courier New,Courier,monospace">view_focus_set()</span> function to perform the focus change defined above:</p>

<pre class="prettyprint">
window_create()
{
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(window-&gt;elm_window, window-&gt;ewk_view);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(window-&gt;ewk_view);

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(window-&gt;elm_window);

&nbsp;&nbsp;&nbsp;&nbsp;view_focus_set(window, EINA_TRUE);

&nbsp;&nbsp;&nbsp;&nbsp;return window;
}
</pre>
</li>
</ol>

 <h2 id="helper" name="helper">Finding a Window</h2>
 
<p>You can use helper functions to find window structures:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">window_find_with_elm_window()</span> helper function takes the <span style="font-family: Courier New,Courier,monospace">elm_window</span> as a parameter and returns a pointer to the <span style="font-family: Courier New,Courier,monospace">Browser_Window</span> object that the window is part of.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">window_find_with_ewk_view()</span> function does the same for <span style="font-family: Courier New,Courier,monospace">ewk_view</span>.</li>
</ul>
<p>Both functions use the <span style="font-family: Courier New,Courier,monospace">EINA_LIST_FOREACH</span> macro to iterate over the window list.</p>

<pre class="prettyprint">
static Browser_Window*
window_find_with_elm_window(Evas_Object *elm_window)
{
&nbsp;&nbsp;&nbsp;&nbsp;Eina_List *l;
&nbsp;&nbsp;&nbsp;&nbsp;void *data;

&nbsp;&nbsp;&nbsp;&nbsp;if (!elm_window)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;

&nbsp;&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(windows, l, data) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window *window = (Browser_Window *)data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (window-&gt;elm_window == elm_window)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return window;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
}

static Browser_Window*
window_find_with_ewk_view(Evas_Object *ewk_view)
{
&nbsp;&nbsp;&nbsp;&nbsp;Eina_List *l;
&nbsp;&nbsp;&nbsp;&nbsp;void *data;

&nbsp;&nbsp;&nbsp;&nbsp;if (!ewk_view)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;

&nbsp;&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(windows, l, data) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Browser_Window *window = (Browser_Window *)data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (window-&gt;ewk_view == ewk_view)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return window;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>

 <h2 id="finalize" name="finalize">Finalizing the Application</h2>

<p>To close the application correctly:</p>
<ol>
<li>To clean up any resources your application has allocated, use the <span style="font-family: Courier New,Courier,monospace">ewk_shutdown()</span> function in the termination life-cycle callback:

<pre class="prettyprint">
static void
br_app_terminate(void *app_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;ewk_shutdown();
}
</pre>
</li>
<li>
<p>In the <span style="font-family: Courier New,Courier,monospace">main()</span> function, register the termination callback:</p>

<pre class="prettyprint">
main()
{
&nbsp;&nbsp;&nbsp;&nbsp;ops.create = br_app_create;
&nbsp;&nbsp;&nbsp;&nbsp;ops.terminate = br_app_terminate;

&nbsp;&nbsp;&nbsp;&nbsp;return ui_app_main(argc, argv, &amp;ops, &amp;window);
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
