<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Camera: Controlling a Camera Device</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#init">Initializing the Camera</a></li>
            <li><a href="#display">Setting the Display for the Camera Preview</a></li>
            <li><a href="#photo">Taking a Photo</a></li>
            <li><a href="#attributes">Setting Camera Attributes</a></li>
            <li><a href="#release">Releasing Resources</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/camera_n.htm">Camera Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">Camera API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">Camera API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Camera: Controlling a Camera Device</h1>

<p>This tutorial demonstrates how you can start a camera preview, configure various attributes, and take a photo.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Camera API basics by learning about:</p>

<ul>
    <li><a href="#init">Initializing the Camera</a>
        <p>Initialize the camera for use.</p></li>
    <li><a href="#display">Setting the Display for the Camera Preview</a>
        <p>Customize the display settings for the camera preview.</p></li>
    <li><a href="#photo">Taking a Photo</a>
        <p>Start the camera preview and capture an image.</p></li>
    <li><a href="#attributes">Setting Camera Attributes</a>
        <p>Set the camera preview, zoom, and brightness attributes.</p></li>
    <li><a href="#release">Releasing Resources</a>
        <p>Stop the camera, deregister the callbacks, and destroy the camera handle and release all its resources.</p></li>
</ul>

<h2 id="init" name="init">Initializing the Camera</h2>

<p>To initialize the camera for use:</p>

<ol>

<li>

<p>To use the functions and data types of the Camera API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;camera.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;camera.h&gt;
</pre>

</li>
    <li><a href="#create">Create the camera handle.</a></li>
    <li><a href="#configure">Configure the camera.</a></li>
    <li><a href="#callbacks">Handle the camera preview and auto-focus callbacks.</a></li>
</ol>

<h3 id="create" name="create">Creating the Camera Handle</h3>

<p>To create the camera handle:</p>

<ol>

<li>

<p>Create a structure for storing the global data related to the camera handle. In this tutorial, the <span style="font-family: Courier New,Courier,monospace">camdata</span> structure is used to store the <span style="font-family: Courier New,Courier,monospace">g_camera</span> variable, which is the camera handle.</p>

<pre class="prettyprint">
typedef struct
_camdata
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *rect;
&nbsp;&nbsp;&nbsp;Evas *evas;
&nbsp;&nbsp;&nbsp;camera_h g_camera; // Camera handle
} camdata;

static camdata cam_data;
</pre>

</li>

<li>

<p>Create 2 auxiliary variables for controlling whether taking photos (<span style="font-family: Courier New,Courier,monospace">g_enable_shot</span>) and auto-focusing (<span style="font-family: Courier New,Courier,monospace">g_enable_focus</span>) are allowed. These variables are used in the <span style="font-family: Courier New,Courier,monospace">_camera_preview_cb()</span> and <span style="font-family: Courier New,Courier,monospace">_camera_focus_cb()</span> callbacks.</p>

<pre class="prettyprint">
static bool g_enable_shot = false;
static bool g_enable_focus = true;
</pre>

</li>

<li>

<p>Create the camera handle using the <span style="font-family: Courier New,Courier,monospace">camera_create()</span> function:</p>

<pre class="prettyprint">
int error_code = 0;

// Create the camera handle
error_code = camera_create(CAMERA_DEVICE_CAMERA0, &amp;cam_data.g_camera);
if (error_code == CAMERA_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;error code = %d&quot;, error_code);
}
else
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">CAMERA_DEVICE_CAMERA0</span> parameter means that the currently activated device camera is 0, which is the primary camera. You can select between the primary (0) and secondary (1) camera. These values are defined in the <span style="font-family: Courier New,Courier,monospace">camera_device_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#gab030be4ec6b05144c3f2a732541e4104">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#gab030be4ec6b05144c3f2a732541e4104">wearable</a> applications).</p>

</li>

<li>

<p>Check the current state of the camera using the <span style="font-family: Courier New,Courier,monospace">camera_get_state()</span> function:</p>

<pre class="prettyprint">
camera_state_e state;

// Check the camera state after creating the camera
error_code = camera_get_state(cam_data.g_camera, &amp;state);
</pre>


<p>The returned state is one of the values defined in the <span style="font-family: Courier New,Courier,monospace">camera_state_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga28cde1b92417f9ce43dde605ed822cde">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga28cde1b92417f9ce43dde605ed822cde">wearable</a> applications). If the state is not <span style="font-family: Courier New,Courier,monospace">CAMERA_STATE_CREATED</span>, re-initialize the camera by recreating the handle.</p>

</li>

</ol>

<h3 id="configure" name="configure">Configuring the Camera</h3>

<p>To configure the camera:</p>

<ol>

<li>

<p>Set the image quality using the <span style="font-family: Courier New,Courier,monospace">camera_attr_set_image_quality()</span> function:</p>

<pre class="prettyprint">
error_code = camera_attr_set_image_quality(cam_data.g_camera, 100);
</pre>

<p>The image quality value can range from 1 (lowest quality) to 100 (highest quality).</p>

</li>

<li>

<p>Set the display for showing preview images by using the <span style="font-family: Courier New,Courier,monospace">camera_set_display()</span> function with 1 of the camera display types (<span style="font-family: Courier New,Courier,monospace">CAMERA_DISPLAY_TYPE_EVAS</span> or <span style="font-family: Courier New,Courier,monospace">CAMERA_DISPLAY_TYPE_OVERLAY</span>). These values are defined in the <span style="font-family: Courier New,Courier,monospace">camera_display_type_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga3ddd0982778fdfacd3694d643d1610ac">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga3ddd0982778fdfacd3694d643d1610ac">wearable</a> applications).</p>

<table class="note">
 <tbody>
  <tr>
  <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">Depending on the device, the application must set the display preferences using the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function.</td>
  </tr>
 </tbody>
</table>

<p>The following example code sets the display according to the <span style="font-family: Courier New,Courier,monospace">display_type</span> parameter, whose type is <span style="font-family: Courier New,Courier,monospace">camera_display_type_e</span>. The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function must be called before previewing and thus the camera state must be <span style="font-family: Courier New,Courier,monospace">CAMERA_STATE_CREATED</span>.</p>

<pre class="prettyprint">
int error_code = CAMERA_ERROR_NONE;
Evas_Object *g_eo = NULL;

static void
create_base_gui(camdata *cam_data, camera_display_type_e display_type)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;elm_config_accel_preference_set(&quot;opengl&quot;);
&nbsp;&nbsp;&nbsp;// PACKAGE contains the package name&#39;s character info
&nbsp;&nbsp;&nbsp;cam_data-&gt;win = elm_win_add(NULL, PACKAGE, ELM_WIN_BASIC);

&nbsp;&nbsp;&nbsp;evas_object_resize(cam_data-&gt;win, 240, 320);

&nbsp;&nbsp;&nbsp;evas_object_move(cam_data-&gt;win, 0, 0);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(cam_data-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;cam_data-&gt;evas = evas_object_evas_get(cam_data-&gt;win);

&nbsp;&nbsp;&nbsp;switch (display_type)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case CAMERA_DISPLAY_TYPE_EVAS:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the Evas image object for drawing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_eo = evas_object_image_add(cam_data-&gt;evas);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_size_set(g_eo, 240, 320);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_fill_set(g_eo, 0, 0, 240, 320);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(g_eo, 240, 320);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(g_eo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(cam_data.win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case CAMERA_DISPLAY_TYPE_OVERLAY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cam_data-&gt;rect = evas_object_rectangle_add(cam_data-&gt;evas);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(cam_data-&gt;rect, 240, 320);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(cam_data-&gt;rect, 0, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(cam_data-&gt;rect, 0, 0, 0, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_render_op_set(cam_data-&gt;rect, EVAS_RENDER_COPY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(cam_data-&gt;rect, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(cam_data-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}

error_code = camera_set_display(cam_data.g_camera, CAMERA_DISPLAY_TYPE_OVERLAY, GET_DISPLAY(cam_data.win));
if (error_code != CAMERA_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, &quot;camera_set_display failed [0x%x]&quot;, ret);
&nbsp;&nbsp;&nbsp;camera_destroy(cam_data.g_camera);
&nbsp;&nbsp;&nbsp;cam_data.g_camera = 0;

&nbsp;&nbsp;&nbsp;return;
}
</pre>

</li>

<li>

<p>Set the camera preview resolution using the <span style="font-family: Courier New,Courier,monospace">camera_set_preview_resolution()</span> function. You must call this function before previewing.</p>

<p>To find out which resolutions can be set for the camera preview on a specific device, use the <span style="font-family: Courier New,Courier,monospace">camera_foreach_supported_preview_resolution()</span> function. The foreach function invokes a callback for each supported preview resolution, and, as all foreach functions, stops when the callback returns <span style="font-family: Courier New,Courier,monospace">false</span>.</p>

<p>The following example code sets the camera preview resolution to the first found supported resolution:</p>

<pre class="prettyprint">
int resolution[2];

static bool
_preview_resolution_cb(int width, int height, void *user_data)
{
&nbsp;&nbsp;&nbsp;int *resolution = (int*)user_data;
&nbsp;&nbsp;&nbsp;resolution[0] = width;
&nbsp;&nbsp;&nbsp;resolution[1] = height;

&nbsp;&nbsp;&nbsp;return false;
}

// Find a resolution that is supported by the device
error_code = camera_foreach_supported_preview_resolution(cam_data.g_camera, _preview_resolution_cb, resolution);

// Set the supported resolution for camera preview
error_code = camera_set_preview_resolution(cam_data.g_camera, resolution[0], resolution[1]);
</pre>

</li>

<li>

<p>Set the capture format using the <span style="font-family: Courier New,Courier,monospace">camera_set_capture_format()</span> function:</p>

<pre class="prettyprint">
error_code = camera_set_capture_format(cam_data.g_camera, CAMERA_PIXEL_FORMAT_JPEG);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">camera_pixel_format_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga18b291f5f688ef92692b0cc273fd6ece">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html#ga18b291f5f688ef92692b0cc273fd6ece">wearable</a> applications) defines the available capture formats.</p>

</li>

</ol>

<h3 id="callbacks" name="callbacks">Handling the Camera Preview and Auto-focus Callbacks</h3>

<p>To register callbacks for handling the camera preview and auto-focus:</p>

<ol>

<li id="callbacks_preview" name="callbacks_preview">

<p>To receive notifications about newly previewed frames, register a callback using the <span style="font-family: Courier New,Courier,monospace">camera_set_preview_cb()</span> function. The callback is invoked once per frame during a preview.</p>

<pre class="prettyprint">
error_code = camera_set_preview_cb(cam_data.g_camera, _camera_preview_cb, NULL);
</pre>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace">_camera_preview_cb()</span> callback, which starts auto-focusing using the <span style="font-family: Courier New,Courier,monospace">camera_start_focusing()</span> function:</p>

<pre class="prettyprint">
static void
_camera_preview_cb(camera_preview_data_s *frame, void *user_data)
{
&nbsp;&nbsp;&nbsp;int error_code = 0;

&nbsp;&nbsp;&nbsp;if (g_enable_focus == true)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = camera_start_focusing(cam_data.g_camera, true);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code == CAMERA_ERROR_NOT_SUPPORTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = camera_start_focusing(cam_data.g_camera, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_enable_focus = false;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">camera_start_focusing()</span> function takes as parameters the camera handle and a Boolean flag defining whether the camera must continuously maintain focus. The function is initially called with the continuous mode set to <span style="font-family: Courier New,Courier,monospace">true</span>. If the function call returns <span style="font-family: Courier New,Courier,monospace">CAMERA_ERROR_NOT_SUPPORTED</span>, the function is relaunched with the continuous mode set to <span style="font-family: Courier New,Courier,monospace">false</span>.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">g_enable_focus</span> flag is set to <span style="font-family: Courier New,Courier,monospace">true</span> at the application startup. When the <span style="font-family: Courier New,Courier,monospace">_camera_preview_cb()</span> callback is invoked for the first time, that is, for the first frame of the preview, the camera starts auto-focusing and the flag is set to <span style="font-family: Courier New,Courier,monospace">false</span>. Subsequent calls to the callback (for the remaining frames of the preview) do not provoke any action, since the <span style="font-family: Courier New,Courier,monospace">if</span> block that checks the <span style="font-family: Courier New,Courier,monospace">g_enable_focus</span> flag and runs the auto-focusing is skipped. This prevents the auto-focusing process from restarting after the first previewed frame.</p>

</li>

<li id="callbacks_focus" name="callbacks_focus">

<p>To receive notifications about auto-focus state changes, register a callback using the <span style="font-family: Courier New,Courier,monospace">camera_set_focus_changed_cb()</span> function. The callback is invoked every time the auto-focus state changes.</p>

<pre class="prettyprint">
error_code = camera_set_focus_changed_cb(cam_data.g_camera, _camera_focus_cb, NULL);
</pre>

<p>Before auto-focusing starts, the auto-focus state is <span style="font-family: Courier New,Courier,monospace">CAMERA_FOCUS_STATE_RELEASED</span>. After the <span style="font-family: Courier New,Courier,monospace">camera_start_focusing()</span> function is called, the camera starts auto-focusing and the state changes to <span style="font-family: Courier New,Courier,monospace">CAMERA_FOCUS_STATE_ONGOING</span>. If the auto-focusing finishes successfully, the state changes to <span style="font-family: Courier New,Courier,monospace">CAMERA_FOCUS_STATE_FOCUSED</span>. If the auto-focusing fails, the state changes to <span style="font-family: Courier New,Courier,monospace">CAMERA_FOCUS_STATE_FAILED</span>.</p>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace">_camera_focus_cb()</span> callback, which starts capturing focused frames using the <span style="font-family: Courier New,Courier,monospace">camera_start_capture()</span> function:</p>

<pre class="prettyprint">
static void
_camera_focus_cb(camera_focus_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;if (state == CAMERA_FOCUS_STATE_FOCUSED &amp;&amp; g_enable_shot == true)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//  Start capturing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = camera_start_capture(cam_data.g_camera, _camera_capturing_cb, _camera_completed_cb, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_enable_shot = false;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If the camera is in the <span style="font-family: Courier New,Courier,monospace">CAMERA_FOCUS_STATE_FOCUSED</span> state and the <span style="font-family: Courier New,Courier,monospace">g_enable_shot</span> flag is set to <span style="font-family: Courier New,Courier,monospace">true</span>, the callback starts the capturing process. The <span style="font-family: Courier New,Courier,monospace">g_enable_shot</span> flag is set to <span style="font-family: Courier New,Courier,monospace">false</span> to prevent the capturing process from restarting after the first captured frame.</p>

</li>

</ol>

<h2 id="display" name="display">Setting the Display for the Camera Preview</h2>

<p>Before displaying the camera preview on the screen, check the camera display settings. You can use the default display settings provided by the Camera framework, or you can customize the display settings to meet your needs.</p>

<p>To customize the display settings:</p>

<ul>

<li>

<p>Camera selection and orientation</p>

<p>Before you can correctly customize the display settings, you need to know which camera is active (front or back) and at what angle the physical camera is being held (orientation).</p>

<ul>

<li>

<p>To determine the active camera, check the <span style="font-family: Courier New,Courier,monospace">camera_device_e</span> enumerator:</p>

<pre class="prettyprint">
typedef enum
{
&nbsp;&nbsp;&nbsp;CAMERA_DEVICE_CAMERA0 = 0, // Primary camera
&nbsp;&nbsp;&nbsp;CAMERA_DEVICE_CAMERA1 // Secondary camera
} camera_device_e;
</pre>

<p>The back camera is usually the primary camera, and the front camera is usually the secondary camera. If, for example, you created the camera handle for the primary camera, the camera preview shows the back camera view.</p>

</li>

<li>

<p>To determine the current camera angle, use the <span style="font-family: Courier New,Courier,monospace">camera_attr_get_lens_orientation()</span> function:</p>

<pre class="prettyprint">
int angle = 0;
int error_code = 0;

error_code = camera_attr_get_lens_orientation(cam_data.g_camera, &amp;angle);
</pre>

<p>The returned value of the <span style="font-family: Courier New,Courier,monospace">angle</span> variable is in degrees.</p>

</li>

</ul>

<p>Once you know the active camera and its current orientation angle, or tilt, you can calculate how to rotate the display to match the camera orientation, and whether and how to flip the display to create the mirror effect in case the front camera is active.</p>

<p>To correctly rotate the display as the camera orientation changes, think about the orientation and direction of the physical camera lens relative to the display. If the camera faces away from the display, the camera orientation is calculated clockwise across the display. If the camera faces the same way as the display, the camera orientation is calculated counter-clockwise across the display. For example, if the camera and display face in opposite directions, the right side of the image is at 90 degrees, and if the camera and display face in the same direction, the right side is at 270 degrees (360 - 90).</p>

</li>

<li>

<p>Display rotation</p>

<p>The display rotation setting is preset to a default value for each camera.</p>

<p>Before changing the display rotation value, retrieve the default value using the <span style="font-family: Courier New,Courier,monospace">camera_get_display_rotation()</span> function:</p>

<pre class="prettyprint">
camera_rotation_e rotation = 0;
int error_code = 0;

// Get the default display rotation value
error_code = camera_get_display_rotation(cam_data.g_camera, &amp;rotation);
</pre>

<p>Calculate and set a new display rotation value based on the current camera orientation:</p>

<pre class="prettyprint">
int lens_orientation = 0;
int error_code = 0;
camera_rotation_e display_rotation = CAMERA_ROTATION_NONE;
int display_rotation_angle = 0;

// Get the recommended display rotation value
error_code = camera_attr_get_lens_orientation(cam_data.g_camera, &amp;lens_orientation);
display_rotation_angle = (360 - lens_orientation) % 360;

// Convert the display rotation value to an enum type
switch (display_rotation_angle)
{
&nbsp;&nbsp;&nbsp;case 0: display_rotation = CAMERA_ROTATION_NONE; break;
&nbsp;&nbsp;&nbsp;case 90: display_rotation = CAMERA_ROTATION_90; break;
&nbsp;&nbsp;&nbsp;case 180: display_rotation = CAMERA_ROTATION_180; break;
&nbsp;&nbsp;&nbsp;case 270: display_rotation = CAMERA_ROTATION_270; break;
&nbsp;&nbsp;&nbsp;default: display_rotation = CAMERA_ROTATION_NONE; break;
}

// Set the display rotation
error_code = camera_set_display_rotation(cam_data.g_camera, display_rotation);
</pre>

</li>

<li>

<p>Display flip</p>

<p>The display flip setting is preset to a default value for each camera. For example, to support the mirror mode, the secondary (front) camera is set as flipped by default.</p>

<p>Before changing the display flip value, retrieve the default value using the <span style="font-family: Courier New,Courier,monospace">camera_get_display_flip()</span> function:</p>

<pre class="prettyprint">
camera_flip_e flip = 0
int error_code = 0;

// Get the default display flip value
error_code = camera_get_display_flip(cam_data.g_camera, &amp;flip);
</pre>

<p>Calculate and set a new display flip value based on the direction the camera is facing and the current camera orientation:</p>

<pre class="prettyprint">
// If the camera is facing in the same direction as the display, apply flip to the front camera because of the mirror effect

int lens_orientation = 0;
int error_code = 0;
camera_flip_e camera_default_flip = MM_FLIP_NONE;

// Get the recommended display rotation value
error_code = camera_attr_get_lens_orientation(cam_data.g_camera, &amp;lens_orientation);
display_rotation_angle = (360 - lens_orientation) % 360;

// Set the mirror display
if (display_rotation_angle == 90 || display_rotation_angle == 270)
{
&nbsp;&nbsp;&nbsp;camera_default_flip = MM_FLIP_VERTICAL;
}
else
{
&nbsp;&nbsp;&nbsp;camera_default_flip = MM_FLIP_HORIZONTAL;
}

// Set the display flip
error_code = camera_set_display_flip(cam_data.g_camera, camera_default_flip);
</pre>

<p>The system applies display flip after display rotation, so you must always calculate the correct display flip value after determining the display rotation.</p>

</li>

</ul>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">In case of an overlay surface, when the device orientation changes, the displayed camera preview does not rotate automatically. If you want to rotate the display according to the device orientation, use the <span style="font-family: Courier New,Courier,monospace">camera_set_display_rotation()</span> function within the <span style="font-family: Courier New,Courier,monospace">app_device_orientation_cb()</span> callback used by the application.
   <p>In case of an Evas surface, the Evas object for the camera display is rotated by the window manager used by the application, not by the <span style="font-family: Courier New,Courier,monospace">camera_set_display_rotation()</span> function.</p></td>
  </tr>
 </tbody>
</table>

<h2 id="photo" name="photo">Taking a Photo</h2>

<p>To take a photo:</p>

<ol>

<li>

<p><a href="#init">After initializing the camera</a>, start the camera preview using the <span style="font-family: Courier New,Courier,monospace">camera_start_preview()</span> function:</p>

<pre class="prettyprint">
error_code = camera_start_preview(cam_data.g_camera);
</pre>

<p>The camera preview draws preview frames on the screen and allows you to capture frames as still images.</p>

<p>After starting the camera preview, the application flows as follows:</p>

<ol type="a">

<li>

<p>To handle the camera preview, the application calls the <a href="#callbacks_preview">camera preview callback</a>.</p>

</li>

<li>

<p>The camera preview callback calls the <span style="font-family: Courier New,Courier,monospace">camera_start_focusing()</span> function, which starts the auto-focusing process.</p>

</li>

<li>

<p>To handle the auto-focusing process, the application calls the <a href="#callbacks_focus">camera auto-focus callback</a>.</p>

</li>

<li>

<p>The camera auto-focus callback calls the <span style="font-family: Courier New,Courier,monospace">camera_start_capture()</span> function, which starts the capturing process.</p>

</li>

<li>

<p>To handle the capturing process, the application calls the <span style="font-family: Courier New,Courier,monospace">camera_capturing_cb()</span> callback.</p>

</li>

</ol>

</li>

<li>

<p>To capture an image:</p>

<ol type="a">

<li>

<p>Implement the <span style="font-family: Courier New,Courier,monospace">camera_capturing_cb()</span> callback.</p>

<p>This callback is invoked once for each captured frame, and is used to get information about the captured image. The image is <a href="#configure">saved in the format</a> set by the <span style="font-family: Courier New,Courier,monospace">camera_set_capture_format()</span> function.</p>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace">_camera_capturing_cb()</span> callback, which saves the captured frame as a JPEG image:</p>

<pre class="prettyprint">
static void
_camera_capturing_cb(camera_image_data_s* image, camera_image_data_s* postview, camera_image_data_s* thumbnail, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Writing image to file&quot;);
&nbsp;&nbsp;&nbsp;FILE *file = fopen(g_fname, &quot;w+&quot;);

&nbsp;&nbsp;&nbsp;if (image-&gt;data != NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fwrite(image-&gt;data, 1, image-&gt;size, file);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;fclose(file);
}
</pre>

</li>

<li>

<p>To receive a notification when the image has been captured, implement the <span style="font-family: Courier New,Courier,monospace">camera_capture_completed_cb()</span> callback.</p>

<p>This callback is invoked after the <span style="font-family: Courier New,Courier,monospace">camera_capturing_cb()</span> callback completes, and is used for notification and for restarting the camera preview.</p>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace">_camera_completed_cb()</span> callback, which waits 0.025 seconds before restarting the camera preview with auto-focusing:</p>

<pre class="prettyprint">
static void
_camera_completed_cb(void *user_data)
{
&nbsp;&nbsp;&nbsp;int error_code = 0;

&nbsp;&nbsp;&nbsp;usleep(25000);  // Display the captured image for 0.025 seconds

&nbsp;&nbsp;&nbsp;// Restart the camera preview
&nbsp;&nbsp;&nbsp;error_code = camera_start_preview(cam_data.g_camera);

&nbsp;&nbsp;&nbsp;g_enable_focus = true;
}
</pre>

<p>By waiting 0.025 seconds before restarting the camera preview, the callback keeps the captured image on the screen for 0.025 seconds.</p>

</li>

</ol>

</li>

</ol>

<h2 id="attributes" name="attributes">Setting Camera Attributes</h2>

<p>You can set various camera attributes with the Attributes API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__ATTRIBUTES__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__ATTRIBUTES__MODULE.html">wearable</a> applications).</p>

<p>To set some attributes:</p>

<ul>

<li>

<p>Camera preview attributes:</p>

<p>The camera preview attributes are a group of attributes that you can set before starting the preview. The following example code sets the FPS and image quality attributes:</p>

<pre class="prettyprint">
error_code = camera_attr_set_preview_fps(cam_data.g_camera, CAMERA_ATTR_FPS_AUTO);

error_code = camera_attr_set_image_quality(cam_data.g_camera, 100);
</pre>

</li>

<li>

<p>Camera zoom attribute:</p>

<p>Set the zoom level using the <span style="font-family: Courier New,Courier,monospace">camera_attr_set_zoom()</span> function. Retrieve the range of available zoom level values using the <span style="font-family: Courier New,Courier,monospace">camera_attr_get_zoom_range()</span> function. The following example code retrieves the available zoom level range and sets the zoom level to minimum:</p>

<pre class="prettyprint">
int min, max;

error_code = camera_attr_get_zoom_range(cam_data.g_camera, &amp;min, &amp;max);

error_code = camera_attr_set_zoom(cam_data.g_camera, min);
</pre>

</li>

<li>

<p>Camera brightness attribute:</p>

<p>Retrieve the range of available brightness level values using the <span style="font-family: Courier New,Courier,monospace">camera_attr_get_brightness_range()</span> function, and the current brightness level using the <span style="font-family: Courier New,Courier,monospace">camera_attr_get_brightness()</span> function:</p>

<pre class="prettyprint">
int min, max;
static int g_bright_level;

error_code = camera_attr_get_brightness_range(cam_data.g_camera, &amp;min, &amp;max);

error_code = camera_attr_get_brightness(cam_data.g_camera, &amp;g_bright_level);
</pre>

<p>Set a new brightness level using the <span style="font-family: Courier New,Courier,monospace">camera_attr_set_brightness()</span> function:</p>

<pre class="prettyprint">
if (g_bright_level &gt;= LEVEL_UPPER_BOUND)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Brightness is set to maximum level&quot;);
&nbsp;&nbsp;&nbsp;g_bright_level = LEVEL_UPPER_BOUND - 1;
}
else if (g_bright_level &lt;= LEVEL_LOWER_BOUND)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Brightness is set to minimum level&quot;);
&nbsp;&nbsp;&nbsp;g_bright_level = LEVEL_LOWER_BOUND + 1;
}
else
{
&nbsp;&nbsp;&nbsp;g_bright_level++;
}

// Set the brightness level
error_code = camera_attr_set_brightness(cam_data.g_camera, g_bright_level);
</pre>

</li>

</ul>

<h2 id="release" name="release">Releasing Resources</h2>

<p>After you have finished working with the camera, stop the camera and clean up the application environment:</p>

<ol>

<li>

<p>If auto-focus is switched on, switch if off using the <span style="font-family: Courier New,Courier,monospace">camera_cancel_focusing()</span> function:</p>

<pre class="prettyprint">
error_code = camera_cancel_focusing(cam_data.g_camera);
</pre>

</li>

<li>

<p>Stop the camera preview using the <span style="font-family: Courier New,Courier,monospace">camera_stop_preview()</span> function:</p>

<pre class="prettyprint">
error_code = camera_stop_preview(cam_data.g_camera);
</pre>

</li>

<li>

<p>Deregister the camera preview and auto-focus callbacks using the <span style="font-family: Courier New,Courier,monospace">camera_unset_preview_cb()</span> and <span style="font-family: Courier New,Courier,monospace">camera_unset_focus_changed_cb()</span> functions:</p>

<pre class="prettyprint">
// Deregister the camera preview callback
error_code = camera_unset_preview_cb(cam_data.g_camera);

// Deregister the auto-focus callback
error_code = camera_unset_focus_changed_cb(cam_data.g_camera);
</pre>

</li>

<li>

<p>Destroy the camera handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">camera_destroy()</span> function:</p>

<pre class="prettyprint">
error_code = camera_destroy(cam_data.g_camera);
</pre>

</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>