<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Recorder: Recording Audio and Video</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
            <li>Audio recorder
                <ul class="toc">
                    <li><a href="#prepare_audio">Preparing the Audio Recorder</a></li>
                    <li><a href="#record_audio">Recording Audio</a></li>
                </ul>
            </li>
            <li>Video recorder
                <ul class="toc">
                    <li><a href="#prepare_video">Preparing the Video Recorder</a></li>
                    <li><a href="#record_video">Recording a Video</a></li>
                </ul>
            </li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/recorder_n.htm">Recorder Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html">Recorder API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">Camera API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html">Recorder API for Wearable Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">Camera API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Recorder: Recording Audio and Video</h1>

<p>This tutorial demonstrates how you can record audio and video.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Recorder and Camera API basics by learning about:</p>

<ul>
	<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the recorder functionality.</p></li>
    <li>Audio recorder
        <ul>
            <li><a href="#prepare_audio">Preparing the Audio Recorder</a>
                <p>Initialize the audio recorder for use.</p></li>
            <li><a href="#record_audio">Recording Audio</a>
                <p>Record audio and save the recording.</p></li>
        </ul>
    </li>
    <li>Video recorder
        <ul>
            <li><a href="#prepare_video">Preparing the Video Recorder</a>
                <p>Initialize the video recorder for use.</p></li>
            <li><a href="#record_video">Recording a Video</a>
                <p>Record video and save the recording.</p></li>
        </ul>
    </li>
</ul>


<h2 id="prerequisites">Prerequisites</h2>


<p>To use the functions and data types of the Recorder (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html">wearable</a> applications) and Camera (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CAMERA__MODULE.html">wearable</a> applications) APIs, include the <span style="font-family: Courier New,Courier,monospace;">&lt;camera.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace;">&lt;recorder.h&gt;</span> header files in your application:</p>
<pre class="prettyprint">
#include &lt;recorder.h&gt;
#include &lt;camera.h&gt;

#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
</pre>
<p>In this tutorial, you also need the <span style="font-family: Courier New,Courier,monospace;">&lt;stdio.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace;">&lt;unistd.h&gt;</span> header files to use standard file input and output functions and system calls.</p>


<h2 id="prepare_audio" name="prepare_audio">Preparing the Audio Recorder</h2>

<p>To initialize the audio recorder for use:</p>

<ol>

<li>
<p>To create a handle for the audio recorder, use the <span style="font-family: Courier New,Courier,monospace">recorder_create_audiorecorder()</span> function:</p>
<pre class="prettyprint">
static recorder_h g_recorder;

/* Create the audio recorder handle */
int error_code = recorder_create_audiorecorder(&amp;g_recorder);
if (error_code == RECORDER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;error code = %d&quot;, error_code);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>
<p>The function sets the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span>.</p>
</li>

<li>
<p>To receive a notification whenever the audio recorder state changes:</p>
<ol type="a">
<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">recorder_set_state_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_set_state_changed_cb(g_recorder, _state_changed_cb, NULL);
</pre>
</li>
<li>
<p>Define the state change callback.</p>
<p>The following example code implements a simple callback that prints the previous and current audio recorder states:</p>
<pre class="prettyprint">
static void
_state_changed_cb(recorder_state_e previous, recorder_state_e current, bool by_policy, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;_recorder_state_changed_cb (prev: %d, curr: %d)\n&quot;, previous, current);
}
</pre>
</li>
</ol>
</li>

<li id="init_audio_att">
<p>To set various audio recording attributes:</p>
<ul>
<li>
<p>Set the audio codec for encoding the audio stream using the <span style="font-family: Courier New,Courier,monospace">recorder_set_audio_encoder()</span> function:</p>
<pre class="prettyprint">
#define FILENAME_PREFIX &quot;AUDIO&quot;
struct tm localtime = {0};
time_t rawtime = time(NULL);
char filename[256] = {&#39;\0&#39;};
size_t size;

/* Set the audio encoder */
error_code = recorder_set_audio_encoder(g_recorder, RECORDER_AUDIO_CODEC_AAC);

/* Set the audio sample rate */
error_code = recorder_attr_set_audio_samplerate(rec_data.recorder, 44100);
</pre>
<p>The possible audio codec values are defined in the <span style="font-family: Courier New,Courier,monospace">recorder_audio_codec_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga431bd585d929f13a71ecefd58ed17d46">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga431bd585d929f13a71ecefd58ed17d46">wearable</a> applications).</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">In the Emulator, set the sample rate to 44100 and use a stereo channel with the AAC codec, and set the sample rate below 8000 and use a mono channel with the AMR codec.</td>
        </tr>
    </tbody>
</table>
</li>
<li>
<p>Based on the audio codec, set the correct file format using the <span style="font-family: Courier New,Courier,monospace">recorder_set_file_format()</span> function. For example, if you set the codec to AAC, set the file format to 3GP.</p>
<pre class="prettyprint">
/* Set the file format according to the audio encoder */
error_code = recorder_set_file_format(g_recorder, RECORDER_FILE_FORMAT_3GP);
</pre>
<p>The possible file format values are defined in the <span style="font-family: Courier New,Courier,monospace">recorder_file_format_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga7d3dbf7b0b3ef68101562b89e81ecf1e">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga7d3dbf7b0b3ef68101562b89e81ecf1e">wearable</a> applications).</p>
</li>
<li>
<p>Based on the file format, define the correct file name, and set it using the <span style="font-family: Courier New,Courier,monospace">recorder_set_filename()</span> function. The function takes as a parameter the full path and name of the file to which the recorded audio data is to be stored.</p>
<pre class="prettyprint">
/* Create the file name */
if (localtime_r(&amp;rawtime, &amp;localtime) != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;size = snprintf(filename, sizeof(filename), &quot;%s/%s-%04i-%02i-%02i_%02i:%02i:%02i.3gp&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_get_data_path(), FILENAME_PREFIX,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localtime.tm_year + 1900, localtime.tm_mon + 1, localtime.tm_mday,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localtime.tm_hour, localtime.tm_min, localtime.tm_sec);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}

/* Set the full path and file name */
/* Set the file name according to the file format */
error_code = recorder_set_filename(g_recorder, filename);
</pre>
</li>
<li>
<p>Set the file size limit, encoder bitrate, audio device, and sample rate:</p>
<pre class="prettyprint">
/* Set the maximum file size to 1024 (kB) */
error_code = recorder_attr_set_size_limit(g_recorder, 1024);

/* Set the audio encoder bitrate */
error_code = recorder_attr_set_audio_encoder_bitrate(g_recorder, 28800);

/* Set the audio device to microphone */
error_code = recorder_attr_set_audio_device(g_recorder, RECORDER_AUDIO_DEVICE_MIC);

/* Set the audio sample rate */
error_code = recorder_attr_set_audio_samplerate(g_recorder, 44100);
</pre>
<p>The possible audio device values are defined in the <span style="font-family: Courier New,Courier,monospace">recorder_audio_device_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga0e73accfbca1b992c29a2128acebbbf3">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga0e73accfbca1b992c29a2128acebbbf3">wearable</a> applications).</p>
</li>
</ul>
<p>For more information on available attributes, see the Attributes API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__ATTRIBUTES__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__ATTRIBUTES__MODULE.html">wearable</a> applications).</p>
</li>

<li>
<p>To receive a notification when the audio recorder reaches the recording limit:</p>
<ol type="a">
<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">recorder_set_recording_limit_reached_cb()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_set_recording_limit_reached_cb(g_recorder, _recorder_recording_limit_reached_cb, NULL);
</pre>
</li>
<li>
<p>Define the recording limit callback.</p>
<p>The following example code implements a simple callback that prints a notification about reaching the recording limit:</p>
<pre class="prettyprint">
static void
_recorder_recording_limit_reached_cb(recorder_recording_limit_type_e type, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Recording limit reached: %d\n&quot;, type);
}
</pre>
</li>
</ol>
</li>

</ol>

<h2 id="record_audio" name="record_audio">Recording Audio</h2>

<p>To record audio:</p>

<ol>

<li>
<p>Prepare the audio recorder using the <span style="font-family: Courier New,Courier,monospace">recorder_prepare()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_prepare(g_recorder);
</pre>
<p>The function sets the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span>.</p>
</li>

<li>
<p>Start recording audio using the <span style="font-family: Courier New,Courier,monospace">recorder_start()</span> function. If the target file path and name have been set to an existing file, the existing file is replaced with a new file.</p>
<pre class="prettyprint">
error_code = recorder_start(g_recorder);
</pre>
<p>The function sets the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span>.</p>
</li>

<li>
<p>To pause and resume recording:</p>
<ol type="a">
<li>
<p>Check the audio recorder state using the <span style="font-family: Courier New,Courier,monospace">recorder_get_state()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_get_state(g_recorder, &amp;state);
</pre>
<p>If the state is <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span>, you can pause recording.</p>
</li>
<li>
<p>Pause recording using the <span style="font-family: Courier New,Courier,monospace">recorder_pause()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_pause(g_recorder);
</pre>
<p>The function sets the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_PAUSED</span>.</p>
</li>
<li><p>Resume recording using the <span style="font-family: Courier New,Courier,monospace">recorder_start()</span> function.</p></li>
</ol>
</li>

<li>
<p>To stop recording:</p>
<ol type="a">
<li><p>Check the audio recorder state using the <span style="font-family: Courier New,Courier,monospace">recorder_get_state()</span> function. If the state is <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span> or <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_PAUSED</span>, you can stop recording.</p></li>
<li>
<p>To stop recording:</p>
<ul><li>To discard the recording, use the <span style="font-family: Courier New,Courier,monospace">recorder_cancel()</span> function.</li>
<li>To save the recorded data, use the <span style="font-family: Courier New,Courier,monospace">recorder_commit()</span> function.</li></ul>

<p>Both functions set the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span>.</p>
<p>The following example code first checks the audio recorder state, and then stops the recorder and saves the recorded data to a file:</p>
<pre class="prettyprint">
/* Check the audio recorder state */
static bool
_recorder_expect_state(recorder_h recorder, recorder_state_e expected_state)
{
&nbsp;&nbsp;&nbsp;&nbsp;recorder_state_e state;
&nbsp;&nbsp;&nbsp;&nbsp;int error_code = recorder_get_state(recorder, &amp;state);

&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;recorder state = %d, expected recorder state = %d&quot;, state, expected_state);
&nbsp;&nbsp;&nbsp;&nbsp;if (state == expected_state)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return TRUE;

&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
}

/* Stop the recorder and save the recorded data to a file */
if (_recorder_expect_state(g_recorder, RECORDER_STATE_RECORDING) || _recorder_expect_state(g_recorder, RECORDER_STATE_PAUSED)) {
&nbsp;&nbsp;&nbsp;&nbsp;error_code = recorder_commit(g_recorder);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != RECORDER_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>
</li>

<li>
<p>After you have finished recording, release all resources allocated to the audio recorder:</p>
<ol type="a">
<li>
<p>Deregister the recording limit callback using the <span style="font-family: Courier New,Courier,monospace">recorder_unset_recording_limit_reached_cb()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_unset_recording_limit_reached_cb(g_recorder);
</pre>
</li>
<li>
<p>Reset the audio recorder using the <span style="font-family: Courier New,Courier,monospace">recorder_unprepare()</span> function.</p>
<pre class="prettyprint">
error_code = recorder_unprepare(g_recorder);
</pre>
<p>The function changes the audio recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span>.</p>
</li>
<li>
<p>Deregister the state change callback using the <span style="font-family: Courier New,Courier,monospace">recorder_unset_state_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_unset_state_changed_cb(g_recorder);
</pre>
</li>
<li>
<p>Release the audio recorder resources using the <span style="font-family: Courier New,Courier,monospace">recorder_destroy()</span> function:</p>
<pre class="prettyprint">
error_code = recorder_destroy(g_recorder);
</pre>
<p>The function sets the audio recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_NONE</span>.</p>
</li>
</ol>
</li>

</ol>

<h2 id="prepare_video" name="prepare_video">Preparing the Video Recorder</h2>

<p>To initialize the video recorder for use:</p>

<ol>

<li>
<p>Define a structure for storing the camera and video recorder handles and a Boolean variable specifying whether the video recorder is switched off:</p>
<pre class="prettyprint">
struct recdata {
&nbsp;&nbsp;&nbsp;&nbsp;bool shutdown;
&nbsp;&nbsp;&nbsp;&nbsp;recorder_h recorder;
&nbsp;&nbsp;&nbsp;&nbsp;camera_h camera;
};
</pre>
</li>

<li>
<p>Define variables for configuring the camera and video recorder:</p>
<pre class="prettyprint">
static const int RECORD_TIME=2;
static const int RECORD_LIMIT=4;
#define FILENAME_PREFIX &quot;VIDEO&quot;
static int g_bitrate = 288000;
static int duration;
static int playing=0;
static int ret;
</pre>
</li>

<li><p><a href="#camera_config">Configure the camera.</a></p></li>

<li><p><a href="#register_callbacks">Register notifications for reaching the recording limit.</a></p></li>

<li><p><a href="#recorder_config">Configure the video recorder.</a></p></li>

</ol>

<h3 id="camera_config">Configuring the Camera</h3>

<p>To configure the camera:</p>

<ol>

<li>
<p>Create the structure for the camera and video recorder handles:</p>
<pre class="prettyprint">
static recdata rec_data;
</pre>
<p>You can also declare variables to store, for example, the  record time, video file paths, bit rate, record limit, flag, and return value.</p>
</li>

<li>
<p>Create the camera handle using the <span style="font-family: Courier New,Courier,monospace">camera_create()</span> function. The function takes as parameters the camera handle and the hardware camera to access.</p>
<pre class="prettyprint">
int error_code = 0;

rec_data.shutdown = FALSE;
rec_data.camera = NULL;
rec_data.recorder = NULL;

/* Create the camera handle */
error_code = camera_create(CAMERA_DEVICE_CAMERA0, &amp;rec_data.camera);
if (error_code == CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;error code = %d&quot;, error_code);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>
<p>The function sets the camera state to <span style="font-family: Courier New,Courier,monospace">CAMERA_STATE_CREATED</span>. To query the state, use the <span style="font-family: Courier New,Courier,monospace">camera_get_state()</span> function.</p>
</li>

<li><p>Set the display for the camera preview using the <span style="font-family: Courier New,Courier,monospace">camera_set_display()</span> function. For more information, see <a href="camera_tutorial_n.htm#configuring_callback">Configuring the Camera and its Callbacks</a> in the Camera tutorial.</p></li>

</ol>

<h3 id="register_callbacks">Registering the Recording Limit Callback</h3>

<p>To receive notifications about reaching the recording limit:</p>

<ol>

<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace;">recorder_set_recording_limit_reached_cb()</span> function:</p>
<pre class="prettyprint">
ret = recorder_set_recording_limit_reached_cb(rec_data.recorder, _recorder_recording_limit_reached_cb, 0);
</pre>
</li>

<li>
<p>Define the recording limit callback.</p>
<p>The following example code implements a simple callback that prints a notification about reaching the recording limit:</p>
<pre class="prettyprint">
static void
_recorder_recording_limit_reached_cb(recorder_recording_limit_type_e type, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, &quot;Video Recorder&quot;, &quot;Recording limit reached: %d\n&quot;, type);
}
</pre>
</li>

<li>
<p>To test whether the callback works properly, use the <span style="font-family: Courier New,Courier,monospace;">sleep()</span> function to reach the recording limit:</p>
<pre class="prettyprint">
ret = recorder_start(rec_data.recorder);

sleep(RECORD_LIMIT + 1); /* Waits longer than the recording limit */
ret = recorder_pause(rec_data.recorder);
</pre>
</li>

</ol>

<h3 id="recorder_config">Configuring the Video Recorder</h3>

<p>To configure the video recorder:</p>

<ol>

<li>
<p>To create the video recorder handle, use the <span style="font-family: Courier New,Courier,monospace">recorder_create_videorecorder()</span> function. The function takes as parameters the camera handle and the video recorder handle.</p>
<pre class="prettyprint">
/* Create the video recorder handle */
error_code = recorder_create_videorecorder(rec_data.camera, &amp;rec_data.recorder);
if (error_code == RECORDER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;error code = %d&quot;, error_code);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>
<p>The function sets the video recorder state to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span>. To query the state, use the <span style="font-family: Courier New,Courier,monospace">recorder_get_state()</span> function.</p>
</li>

<li>
<p>To receive a notification whenever the video recorder state changes:</p>
<ol type="a">
<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">recorder_set_state_changed_cb()</span> function:</p>
<pre class="prettyprint">
/* Set the state change callback for the video recorder */
error_code = recorder_set_state_changed_cb(rec_data.recorder, on_state_changed_cb, NULL);
if (error_code == RECORDER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;error code = %d&quot;, error_code);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>
</li>
<li>
<p>Define the state change callback.</p>
<p>The following example code implements a simple callback that prints the previous and current video recorder states:</p>
<pre class="prettyprint">
/* State change callback for the video recorder */
static void
on_state_changed_cb(recorder_state_e previous, recorder_state_e current, bool by_asm, void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;_recorder_state_changed_cb (prev: %d, curr: %d)\n&quot;, previous, current);
}
</pre>
</li>
</ol>
</li>

<li>
<p>To set various video recording attributes:</p>
<ul>
<li>
<p>To set the video codec for encoding the video stream:</p>
<ol type="a">
<li>
<p>Check which video codecs the device supports.</p>
<p>To check the codecs, use the <span style="font-family: Courier New,Courier,monospace">recorder_foreach_supported_video_encoder()</span> function. The function takes as its second parameter a callback that is invoked once for each codec supported by the video recorder (defined in the first parameter).</p>
<p>While the callback returns <span style="font-family: Courier New,Courier,monospace">true</span>, the loop continues to the next supported codec, if any. The loop ends when the callback returns <span style="font-family: Courier New,Courier,monospace">false</span>.</p>
<p>In the following example code, the callback loop ends after finding the first supported codec:</p>
<pre class="prettyprint">
recorder_video_codec_e supported_codec;

static bool
_video_encoder_cb(recorder_video_codec_e codec, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;recorder_video_codec_e * supported_codec = (recorder_video_codec_e*)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;*supported_codec = codec;

&nbsp;&nbsp;&nbsp;&nbsp;return false;
}

error_code = recorder_foreach_supported_video_encoder(rec_data.recorder, _video_encoder_cb, &amp;supported_codec);
</pre>
<p>The possible video codec values are defined in the <span style="font-family: Courier New,Courier,monospace">recorder_video_codec_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#gaaf3f0deeb1717f568e2b93bb9a375b63">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#gaaf3f0deeb1717f568e2b93bb9a375b63">wearable</a> applications).</p>
</li>
<li>
<p>Set the video codec using the <span style="font-family: Courier New,Courier,monospace">recorder_set_video_encoder()</span> function:</p>
<pre class="prettyprint">
/* Set the video encoder for the video recorder */
error_code = recorder_set_video_encoder(rec_data.recorder, supported_codec);
</pre>
</li>
</ol>
</li>
<li>
<p>To set the video encoder bitrate, use the <span style="font-family: Courier New,Courier,monospace">recorder_attr_set_video_encoder_bitrate()</span> function:</p>
<pre class="prettyprint">
/* Set the video encoder bitrate */
error_code = recorder_attr_set_video_encoder_bitrate(rec_data.recorder, g_bitrate);
</pre>
</li>
<li>
<p>To set the file format for the video file:</p>
<ol type="a">
<li>
<p>Check which file formats the device supports.</p>
<p>To check the formats, use the <span style="font-family: Courier New,Courier,monospace">recorder_foreach_supported_file_format()</span> function. The function takes as its second parameter a callback that is invoked once for each format supported by the video recorder (defined in the first parameter).</p>
</li>
<li>
<p>Set the file format using the <span style="font-family: Courier New,Courier,monospace">recorder_set_file_format()</span> function. Make sure the file format matches the video codec.</p>
<pre class="prettyprint">
/* Set the file format */
error_code = recorder_set_file_format(rec_data.recorder, RECORDER_FILE_FORMAT_MP4);
</pre>
<p>The possible file format values are defined in the <span style="font-family: Courier New,Courier,monospace">recorder_file_format_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga7d3dbf7b0b3ef68101562b89e81ecf1e">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__MODULE.html#ga7d3dbf7b0b3ef68101562b89e81ecf1e">wearable</a> applications).</p>
</li>
</ol>
</li>
<li>
<p>To set the file name, use the <span style="font-family: Courier New,Courier,monospace">recorder_set_filename()</span> function. The function takes as a parameter the full path and name of the file to which the recorded video data is to be stored. Make sure the file extension matches the file format.</p>
<pre class="prettyprint">
struct tm localtime = {0};
time_t rawtime = time(NULL);
char filename[256] = {&#39;\0&#39;};
size_t size;

/* Create the file name */
if (localtime_r(&amp;rawtime, &amp;localtime) != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;size = snprintf(filename, sizeof(filename), &quot;%s/%s-%04i-%02i-%02i_%02i:%02i:%02i.mp4&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_get_data_path(), FILENAME_PREFIX,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localtime.tm_year + 1900, localtime.tm_mon + 1, localtime.tm_mday,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localtime.tm_hour, localtime.tm_min, localtime.tm_sec);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
/* Set the full path and file name */
error_code = recorder_set_filename(rec_data.recorder, filename);
</pre>
</li>
<li><p>To set the audio encoder, audio encoder bitrate, and audio sample rate, use the <span style="font-family: Courier New,Courier,monospace">recorder_set_audio_encoder()</span>, <span style="font-family: Courier New,Courier,monospace">recorder_attr_set_audio_encoder_bitrate()</span>, and <span style="font-family: Courier New,Courier,monospace">recorder_attr_set_audio_samplerate()</span> functions, <a href="#init_audio_att">as with the audio encoder</a>.</p></li>
</ul>
<p>For more information on available attributes, see the Attributes API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__ATTRIBUTES__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RECORDER__ATTRIBUTES__MODULE.html">wearable</a> applications).</p>
</li>



</ol>

<h2 id="record_video" name="record_video">Recording a Video</h2>

<p>To record a video:</p>

<ol>

<li>
<p>Prepare the video recorder using the <span style="font-family: Courier New,Courier,monospace">recorder_prepare()</span> function:</p>
<pre class="prettyprint">
/* Prepare the recorder */
error_code = recorder_prepare(rec_data.recorder);
</pre>
<p>The function changes the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span>.</p>
</li>

<li>
<p>Start recording using the <span style="font-family: Courier New,Courier,monospace">recorder_start()</span> function. If the target file path and name have been set to an existing file, the existing file is replaced with a new file.</p>
 <pre class="prettyprint">
/* Start the recorder */
error_code = recorder_start(rec_data.recorder);
</pre>
<p>The function changes the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span>.</p>
</li>

<li>
<p>To pause and resume recording:</p>
<ol type="a">
<li>
<p>Pause recording using the <span style="font-family: Courier New,Courier,monospace">recorder_pause()</span> function:</p>
<pre class="prettyprint">
/* Pause the recorder */
error_code = recorder_pause(rec_data.recorder);
</pre>
<p>The function changes the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_PAUSED</span>.</p>
</li>
<li><p>Resume recording using the <span style="font-family: Courier New,Courier,monospace">recorder_start()</span> function.</p></li>
</ol>
</li>

<li>
<p>To stop recording:</p>
<ul>
<li>
<p>To stop recording without saving the recorded data, use the <span style="font-family: Courier New,Courier,monospace">recorder_cancel()</span> function. No data is saved to the target file.</p>
<pre class="prettyprint">
/* Stop the recorder without saving the recorded data */
error_code = recorder_cancel(rec_data.recorder);
</pre>
</li>

<li>
<p>To stop recording and save the recorded data, use the <span style="font-family: Courier New,Courier,monospace">recorder_commit()</span> function. The data is saved to the target file.</p>
<pre class="prettyprint">
/* Stop the recorder and save the recorded data to a file */
error_code = recorder_commit(rec_data.recorder);
</pre>
</li>
</ul>
<p>Both functions change the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_RECORDING</span> or <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_PAUSED</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span>.</p>
</li>

<li>
<p>After you have finished recording, release all resources allocated to the video recorder:</p>
<ol type="a">
<li>
<p>Deregister the recording limit callback using the <span style="font-family: Courier New,Courier,monospace;">recorder_unset_recording_limit_reached_cb()</span> function:</p>
<pre class="prettyprint">
/* Deregister the recording limit callback */
ret = recorder_unset_recording_limit_reached_cb(rec_data.recorder);
</pre>
</li>
<li>
<p>Reset the video recorder using the <span style="font-family: Courier New,Courier,monospace">recorder_unprepare()</span> function:</p>
<pre class="prettyprint">
/* Unprepare the recorder */
error_code = recorder_unprepare(rec_data-&gt;recorder);
</pre>
<p>The function changes the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_READY</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span>.</p>
</li>
<li>
<p>Deregister the state change callback using the <span style="font-family: Courier New,Courier,monospace">recorder_unset_state_changed_cb()</span> function:</p>
<pre class="prettyprint">
/* Deregister the state change callback */
error_code = recorder_unset_state_changed_cb(rec_data.recorder);
</pre>
</li>
<li>
<p>Release the video recorder resources using the <span style="font-family: Courier New,Courier,monospace">recorder_destroy()</span> function:</p>
<pre class="prettyprint">
/* Destroy the recorder handle */
error_code = recorder_destroy(rec_data.recorder);
</pre>
<p>The function changes the video recorder state from <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_CREATED</span> to <span style="font-family: Courier New,Courier,monospace">RECORDER_STATE_NONE</span>.</p>
</li>
</ol>
</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>