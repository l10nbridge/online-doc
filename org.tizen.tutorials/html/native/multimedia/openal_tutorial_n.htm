<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>OpenAL: Managing Playback Streams</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
         <p class="toc-title">Content</p>
        <ul class="toc">
                <li><a href="#init">Initializing OpenAL</a></li>
                <li><a href="#request">Requesting a Source and Audio Buffer</a></li>
                <li><a href="#play">Managing Audio Stream Playback</a></li>
				<li><a href="#buffer">Using Buffer Queuing for Stream Playback</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/openal_n.htm">OpenAL Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__OPENAL__FRAMEWORK.html">OpenAL API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__OPENSRC__OPENAL__FRAMEWORK.html">OpenAL API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>OpenAL: Managing Playback Streams</h1>

<p>This tutorial demonstrates how you can manage playback stream using OpenAL.</p>
<p>For additional OpenAL code samples, see <a href="http://kcat.strangesoft.net/openal.html#examples" target="_blank">Example Code</a>.</p>

<h2>Warm-up</h2>

<p>Become familiar with the OpenAL API basics by learning about:</p>

<ul>
    <li><a href="#init">Initializing OpenAL</a>
        <p>Initialize OpenAL for use.</p></li>
    <li><a href="#request">Requesting a Source and Audio Buffer</a>
        <p>Request a source, and prepare and request an audio buffer.</p></li>
    <li><a href="#play">Managing Audio Stream Playback</a>
        <p>Play and stop the playback.</p></li>
	<li><a href="#buffer">Using Buffer Queuing for Stream Playback</a>
        <p>Queue one or multiple buffers to be used as a streamed audio source.</p></li>	
</ul>

<h2 id="init" name="init">Initializing OpenAL</h2>

<p>To initialize OpenAL for use:</p>
<ol>
<li>
<p>To use the functions and data types of the OpenAL API (in <a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__OPENAL__FRAMEWORK.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__OPENSRC__OPENAL__FRAMEWORK.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;AL/al.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace;">&lt;AL/alc.h&gt;</span> header files in your application:</p>

<pre class="prettyprint">
#include &lt;AL/al.h&gt;
#include &lt;AL/alc.h&gt;
</pre>
</li>

<li>
<p>Get and open the default device.</p>
<p>To retrieve available devices, verify that a given extension is available, query the available device list, and open it.</p>
<p>To get the available device list, use the <span style="font-family: Courier New,Courier,monospace;">alcGetString()</span> string query function.</p>
<pre class="prettyprint">
// Verify that a given extension is available for the current context
enumeration = alcIsExtensionPresent(NULL, &quot;ALC_ENUMERATION_EXT&quot;);
if (enumeration == AL_FALSE)
{
&nbsp;&nbsp;&nbsp;LOGI(&quot;[%s] enumeration extension not available&quot;, __func__);
}

// Return a list of available devices
// Each device name is separated by a single NULL character and the list is terminated with 2 NULL characters
deviceNameList = alcGetString(NULL, ALC_DEVICE_SPECIFIER));

// Get a default device name
defaultDeviceName = alcGetString(NULL, ALC_DEFAULT_DEVICE_SPECIFIER);

// Open the default device
device = alcOpenDevice(defaultDeviceName);
if (!device)
{
&nbsp;&nbsp;&nbsp;LOGI(&quot;[%s] unable to open default device&quot;, __func__);
  
&nbsp;&nbsp;&nbsp;return;
}

LOGI(&quot;[%s] Device : %s &quot;, __func__, alcGetString(device, ALC_DEVICE_SPECIFIER));
</pre>
<p>With the default device name, the <span style="font-family: Courier New,Courier,monospace;">alcOpenDevice()</span> function opens the audio device through the pulseaudio layer.</p>
</li>

<li>
<p>If the device is opened successfully, create a context using the <span style="font-family: Courier New,Courier,monospace;">alcCreateContext()</span> function and set the active context using the <span style="font-family: Courier New,Courier,monospace;">alcMakeContextCurrent()</span> with the device. Once the device is associated with a current context, the AL commands are applied to that context.</p>

<pre class="prettyprint">
// Create context
context = alcCreateContext(device, NULL);
if (context == NULL)
{
&nbsp;&nbsp;&nbsp;alcCloseDevice(device);
&nbsp;&nbsp;&nbsp;LOGI(&quot;[%s] failed to create context&quot;, __func__);
  
&nbsp;&nbsp;&nbsp;return;
}

// Set active context
if (!alcMakeContextCurrent(context))
{
&nbsp;&nbsp;&nbsp;alcDestroyContext(context);
&nbsp;&nbsp;&nbsp;alcCloseDevice(device);
&nbsp;&nbsp;&nbsp;LOGI(&quot;[%s] failed to make default context&quot;, __func__);
  
&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
</ol>

<h2 id="request" name="request">Requesting a Source and Audio Buffer</h2>

<p>To request a source and audio buffer:</p>

<ol>
<li>
<p>You must control sound playing through a source object. Request a source using the <span style="font-family: Courier New,Courier,monospace;">alSources()</span> function and update the source attributes (such as the default gain and sound position).</p>

<pre class="prettyprint">
// Request a source name
alGenSources((ALuint)1, &amp;source);

// Set the default volume
alSourcef(source, AL_GAIN, 1);

// Set the default position of the sound
alSource3f(source, AL_POSITION, 0, 0, 0);
</pre>
</li>

<li>
<p>Request a buffer and specify the allocated PCM buffer and size.</p>
<p>In this example, to read the WAV file from file system, the <span style="font-family: Courier New,Courier,monospace;">_data_buffer</span> heap memory is allocated using the <span style="font-family: Courier New,Courier,monospace;">malloc()</span> function. The <span style="font-family: Courier New,Courier,monospace;">dataSize</span> parameter defines the amount of data to be buffered.</p>

<pre class="prettyprint">
// Request a buffer name
alGenBuffers(1, &amp;buffer);

ALuint frequency = 22050;
ALenum format = AL_FORMAT_MONO8;

// Specify sample data using alBufferData
alBufferData(buffer, format, _data_buffer, dataSize, frequency);
</pre>

<p>The following table defines the supported audio sample formats.</p>

<table>
<caption>Table: Supported audio sample formats</caption>
<tbody>
<tr>
 <th>Format</th>
 <th>Description</th>
</tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace;">AL_FORMAT_MONO8</span></td>
 <td>Unsigned 8-bit mono audio sample</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace;">AL_FORMAT_MONO16</span></td>
 <td>Unsigned 16-bit mono audio sample</td>
 </tr>
  <tr>
 <td><span style="font-family: Courier New,Courier,monospace;">AL_FORMAT_STEREO8</span></td>
 <td>Unsigned 8-bit stereo audio sample (interleaved)</td>
 </tr>
  <tr>
 <td><span style="font-family: Courier New,Courier,monospace;">AL_FORMAT_STEREO16</span></td>
 <td>Unsigned 16-bit stereo audio sample (interleaved)</td>
 </tr>
 </tbody></table>
</li>
</ol>

<h2 id="play" name="play">Managing Audio Stream Playback</h2>

<p>You can manage the playback through the following state transition commands:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">alSourcePlay(ALuint sName)</span>: Play, replay, or resume a source</li>
<li><span style="font-family: Courier New,Courier,monospace;">alSourceStop(ALuint sName)</span>: Stop a list of sources</li>
<li><span style="font-family: Courier New,Courier,monospace;">alSourceRewind(ALuint sName)</span>: Rewind a source (set the playback position to the beginning)</li>
<li><span style="font-family: Courier New,Courier,monospace;">alSourcePause(ALuint sName)</span>: Pause a source</li></ul>


<p>To play or stop the audio stream:</p>

<ol>
<li>
<p>To play the audio stream, implement the start event of the playback action (for example, a start button click)</p>
<p>In this example, the whole audio buffer is allocated and filled before the playback starts using the <span style="font-family: Courier New,Courier,monospace;">alSourcei()</span> function. The second parameter specifies the source type as static. Start the audio playback right after changing the state to play.</p>

<pre class="prettyprint">
// Function: _on_click1()
// Source specifies the current buffer object
alSourcei(source, AL_BUFFER, buffer);

// Change state to play
alSourcePlay(source);
</pre>
</li>

<li>
<p>When a stop event is triggered, change the playback state to stop to end the audio playback:</p>

<pre class="prettyprint">
// Function: _on_click2()
// Change state to stop
alSourceStop(source);
</pre>
</li>

<li>
<p>When the playback is finished, release the resources. Clean up the source, buffer, context, and device:</p>

<pre class="prettyprint">
alDeleteSources(1, &amp;source);
alDeleteBuffers(1, &amp;buffer);
device = alcGetContextsDevice(context);
alcMakeContextCurrent(NULL);
alcDestroyContext(context);
alcCloseDevice(device);
</pre>
</li>
</ol>

<h2 id="buffer" name="buffer">Using Buffer Queuing for Stream Playback</h2>

<p>OpenAL provides a buffer queuing method for the streamed audio source, in which one or more buffers can be queued and dequeued after consumed:</p>



<ol>
<li>
<p>Multiple buffers (or one buffer) must be submitted before you can start the playback:</p>

<pre class="prettyprint">
#define DATA_CHUNK_SIZE (1024)

// This example uses 4 buffers and 1 source
static ALuint buffer[4], source;

alGenSources((ALuint)1, &amp;source);
alGenBuffers(4, buffer);

// Fill all the buffers with audio data from the wave file
for (iLoop = 0; iLoop &lt; 4; iLoop++)
{
&nbsp;&nbsp;&nbsp;alBufferData(buffer[iLoop], AL_FORMAT_MONO8, pData, DATA_CHUNK_SIZE, 22050);
&nbsp;&nbsp;&nbsp;alSourceQueueBuffers(source, 1, &amp;buffer[iLoop]);
}
</pre>
</li>

<li>
<p>Start the playback stream and push the buffer (for example, 1024 bytes) periodically on click events.</p>
<p>If a loop detects a number of consumed buffers (<span style="font-family: Courier New,Courier,monospace;">iBuffersProcessed</span>) by querying <span style="font-family: Courier New,Courier,monospace;">AL_BUFFERS_PROCESSED</span>, unqueue the consumed buffer with the <span style="font-family: Courier New,Courier,monospace;">alSourceUnqueueBuffers()</span> function. Fill and queue again with the <span style="font-family: Courier New,Courier,monospace;">alSourceQueueBuffers()</span> function to keep the playback going.</p>
<p>Run the loop in a thread separate from the application main thread.</p>

<pre class="prettyprint">
// Start to play streamed audio
alSourcePlay(source);
LOGI(&quot;[%s] alSourcePlay&quot;, __func__);

// Buffer queuing loop must operate in a new thread
iBuffersProcessed = 0;
while (!thread_finish)
{
&nbsp;&nbsp;&nbsp;usleep(10 * 1000);  // Sleep 10 msec periodically

&nbsp;&nbsp;&nbsp;alGetSourcei(source, AL_BUFFERS_PROCESSED, &amp;iBuffersProcessed);

&nbsp;&nbsp;&nbsp;iTotalBuffersProcessed += iBuffersProcessed;
&nbsp;&nbsp;&nbsp;ALOGI(&quot;Buffers Processed %d&quot;, iTotalBuffersProcessed);

&nbsp;&nbsp;&nbsp;// For each processed buffer, remove it from the source queue, read next chunk of audio
&nbsp;&nbsp;&nbsp;// data from disk, fill buffer with new data, and add it to the source queue
&nbsp;&nbsp;&nbsp;while (iBuffersProcessed)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Remove the buffer from the queue (uiBuffer contains the buffer ID for the unqueued buffer)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uiBuffer = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alSourceUnqueueBuffers(source, 1, &amp;uiBuffer);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Read more pData audio data (if there is any)

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Copy audio data to buffer
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alBufferData(uiBuffer, AL_FORMAT_MONO8, pData, DATA_CHUNK_SIZE, 22050);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Insert audio buffer to source queue
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alSourceQueueBuffers(source, 1, &amp;uiBuffer);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;iBuffersProcessed--;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>