<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Media Codec: Encoding and Decoding Media Files</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing Media Codecs</a></li>
			<li><a href="#manage">Managing Media Codecs</a></li>
			<li><a href="#release">Releasing Resources</a></li>
		</ul>       
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/media_codecs_n.htm">Media Codec Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CODEC__MODULE.html">Media Codec API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CODEC__MODULE.html">Media Codec API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Media Codec: Encoding and Decoding Media Files</h1>

  
<p>This tutorial demonstrates how you can encode and decode media files.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Media Codec API basics by learning about:</p>

<ul><li>
<a href="#init">Initializing Media Codecs</a>
<p>Initialize the media codecs for use.</p></li>

<li><a href="#manage">Managing Media Codecs</a>
<p>Prepare and start the codec.</p></li>

<li><a href="#release">Releasing Resources</a>
<p>Reset the codec and destroy the handle.</p></li></ul>
 

 <h2 id="init" name="init">Initializing Media Codecs</h2>
<h3 name="configure" id="configure">Creating and Configuring Media Codecs</h3>
<p>Before using the Media codec:</p>
<ol>
<li><p>To use the functions and data types of the Media Codec API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CODEC__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CODEC__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;media_codec.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;media_codec.h&gt;
</pre></li>
<li>Define a handle for the media codec and pass it to the <span style="font-family: Courier New,Courier,monospace">mediacodec_create()</span> function. The handle must be passed to all other Media Codec APIs.
<pre class="prettyprint">
mediacodec_h *mediacodec;
ret = mediacodec_create(&amp;mediacodec);</pre>
</li>
<li>If the handle is created normally, set the codec and configuration using the <span style="font-family: Courier New,Courier,monospace">mediacodec_set_codec()</span> function.
<p>The enumerations <span style="font-family: Courier New,Courier,monospace">mediacodec_codec_type_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CODEC__MODULE.html#ga2e7775fb3609e4349c742b1d9eb5febc">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CODEC__MODULE.html#ga2e7775fb3609e4349c742b1d9eb5febc">wearable</a> applications) and <span style="font-family: Courier New,Courier,monospace">mediacodec_support_type_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CODEC__MODULE.html#gab01ad3dbb4989537108a5c9f2062447a">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CODEC__MODULE.html#gab01ad3dbb4989537108a5c9f2062447a">wearable</a> applications) define the media codec type and support type.</p>
<pre class="prettyprint">ret = mediacodec_set_codec(mediacodec, (mediacodec_codec_type_e)codecid, flag); </pre>
</li>
<li>To configure the video encoder and decoder:
<pre class="prettyprint">ret = mediacodec_set_venc_info(mediacodec, width, height, fps, target_bits);

ret = mediacodec_set_vdec_info(mediacodec, width, height);
</pre>

<p>To configure the audio encoder and decoder:</p>
<pre class="prettyprint">ret = mediacodec_set_aenc_info(mediacodec, samplerate, channel, bit, bitrate);

ret = mediacodec_set_adec_info(mediacodec, samplerate, channel, bit);
</pre>
</li>
</ol>

<h3 name="callbacks" id="callbacks">Setting Callbacks</h3>

<p>To set callbacks:</p>

<ol>
<li>
<p>To receive notifications when the input buffers are used, register a callback using the <span style="font-family: Courier New,Courier,monospace">mediacodec_set_input_buffer_used_cb()</span> function. The callback is invoked when the input buffers are queued to the codec.</p>
<pre class="prettyprint">ret = mediacodec_set_input_buffer_used_cb(mediacodec, _input_buffer_used_cb, NULL);</pre>

<p>If a <span style="font-family: Courier New,Courier,monospace">media_packet</span> is used, it must be destroyed when the callback is invoked:</p>
<pre class="prettyprint">static void 
_input_buffer_used_cb(media_packet_h pkt, void *user_data)
{
&nbsp;&nbsp;&nbsp;media_packet_destroy(pkt);
   
&nbsp;&nbsp;&nbsp;return;
}
</pre></li>
<li>
<p>To receive notifications when the output buffers are dequeued, register a callback using the <span style="font-family: Courier New,Courier,monospace">mediacodec_set_output_buffer_available_cb()</span> function. The callback is invoked when the output buffers are dequeued.</p>
<pre class="prettyprint">ret = mediacodec_set_output_buffer_available_cb(mediacodec, _output_buffer_available_cb, mediacodec);</pre>
<p>If the <span style="font-family: Courier New,Courier,monospace">media_packet</span> is dequeued from the codec, this callback is invoked.</p>
<p>You can get the output packet through the <span style="font-family: Courier New,Courier,monospace">mediacodec_get_output()</span> function when the callback is invoked:</p>
<pre class="prettyprint">static void 
_output_buffer_available_cb(media_packet_h pkt, void *user_data)
{
&nbsp;&nbsp;&nbsp;media_packet_h out_pkt;
&nbsp;&nbsp;&nbsp;mediacodec_h mediacodec = (mediacodec_h)user_data;

&nbsp;&nbsp;&nbsp;if (pkt != NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mediacodec_get_output(mediacodec, &amp;out_pkt, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;media_packet_destroy(out_pkt);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
}
</pre></li>
</ol>

 <h2 id="manage" name="manage">Managing Media Codecs</h2>
<h3 name="packet" id="packet">Filling the Packet with Data</h3>
<p>Once the <span style="font-family: Courier New,Courier,monospace">media_packet</span> is allocated with corresponding codec MIME types, you can fill it with data:</p>

<ol>
<li>Get the data pointer from the <span style="font-family: Courier New,Courier,monospace">media_packet</span> and set the buffer size on the preallocated packet:
<pre class="prettyprint">unsigned char nal[48] = {0x00, 0x00, 0x00, 0x01, 0x67, 0x4D, 0x40, 0x33,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x9A, 0x73, 0x80, 0xA0, 0x08, 0xB4, 0x20, 0x00,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x32, 0xE9, 0xE0, 0x09, 0x89, 0x68, 0x11, 0xE3,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x06, 0x23, 0xC0, 0x00, 0x00, 0x00, 0x01, 0x68,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0xEE, 0x3C, 0x80, 0x00, 0x00, 0x00, 0x01, 0x65,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0x88, 0x80, 0x01, 0x48, 0x00, 0x06, 0x57, 0xFD};

media_format_h fmt;
media_packet_h pkt;
void *data;

ret = media_format_set_video_mime (fmt, MEDIA_FORMAT_H264_SP);
ret = media_format_set_video_width(fmt, 1280);
ret = media_format_set_video_height(fmt, 544);
ret = media_packet_create_alloc(fmt, NULL, NULL, &amp;pkt);

ret = media_packet_get_buffer_data_ptr (pkt, &amp;data);
memcpy(data, nal, 48);
ret = media_packet_set_buffer_size (pkt, 48);
</pre>
</li>
<li>If the memory buffer can contain extra padding bytes after each pixel roe, you can check whether the stride in the uncompressed video frame is not the same as the video width. In that case, the strided copy is needed:
<pre class="prettyprint">void 
_fill_buffer(media_packet_h pkt, unsigned char *yuv, int width, int height)
{
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;// Y plane
&nbsp;&nbsp;&nbsp;media_packet_get_video_stride_width(pkt, 0, &amp;stride);
&nbsp;&nbsp;&nbsp;media_packet_get_video_plane_data_ptr(pkt, 0, &amp;data);

&nbsp;&nbsp;&nbsp;for (i = 0 ; i &lt; height; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memcpy(data, yuv, width);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data += stride;
&nbsp;&nbsp;&nbsp;} 
}</pre>
</li>
 </ol>
<h3 name="management" id="management">Managing Mediacodec</h3>

<p>The Media Codec usage follows a basic pattern:</p>
<ol><li>Create and configure the Media Codec handle.</li>
<li>Loop until done:
<ul><li>If an input buffer is ready, read a chunk of input and copy it into the buffer.</li> 
<li>If an output buffer is ready, copy the output from the buffer.</li></ul></li>
<li>Release the Media Codec handle.</li></ol> 


<p>To manage the codec process loop:</p>

<ol>
<li>If the prerequisites are set normally, prepare the media codec using the <span style="font-family: Courier New,Courier,monospace">mediacodec_prepare()</span> function.

<pre class="prettyprint">ret = mediacodec_prepare(mediacodec);
</pre>
</li>
<li>Before calling the <span style="font-family: Courier New,Courier,monospace">mediacodec_process_input()</span> function, set the flag in the <span style="font-family: Courier New,Courier,monospace">media_packet</span>.
<p>If the <span style="font-family: Courier New,Courier,monospace">media_packet</span> contains codec data, such as SPS or PPS in case of H.264, you must set the codec config flag using the <span style="font-family: Courier New,Courier,monospace">media_packet_set_flags()</span> function:</p>
<pre class="prettyprint">ret = media_packet_set_flags(pkt, MEDIA_PACKET_CODEC_CONFIG);
</pre>

<p>If the <span style="font-family: Courier New,Courier,monospace">media_packet</span> contains the end of stream, you must set the end of stream (eos) flag. The eos callback is invoked if the eos packet is decoded or encoded and the eos callback is set.</p>
<pre class="prettyprint">ret = media_packet_set_flags(pkt, MEDIA_PACKET_END_OF_STREAM);
</pre></li>


<li>Start the media codec using the <span style="font-family: Courier New,Courier,monospace">mediacodec_process_input()</span> and <span style="font-family: Courier New,Courier,monospace">mediacodec_get_output()</span> functions.
<pre class="prettyprint">media_packet_h in_buf = NULL;
ret = mediacodec_process_input(mediacodec, in_buf, 0);

media_packet_h output_buf = NULL;
ret = mediacodec_get_output(mediacodec, &amp;output_buf, 0);
</pre>
</li>
<li>After calling the <span style="font-family: Courier New,Courier,monospace">mediacodec_get_output()</span> function, you can check the frame using the <span style="font-family: Courier New,Courier,monospace">media_packet</span>. You can check whether the <span style="font-family: Courier New,Courier,monospace">media_packet</span> contains key frame or codec data:
<pre class="prettyprint">bool keyframe;
bool codec_config;

ret = media_packet_is_sync_frame(pkt, &amp;keyframe);
ret = media_packet_is_codec_config(pkt, &amp;codec_config);
</pre>
</li>
</ol>

 <h2 id="release" name="release">Releasing Resources</h2>

<p>After you have finished work with the media codec, reset the codec and destroy the handle using the <span style="font-family: Courier New,Courier,monospace">mediacodec_unprepare()</span> and <span style="font-family: Courier New,Courier,monospace">mediacodec_destroy()</span> functions:</p>
<pre class="prettyprint">ret = mediacodec_unprepare(mediacodec);

ret = mediacodec_destroy(mediacodec);
</pre>
<p>Afterwards, the media codec state is changed to <span style="font-family: Courier New,Courier,monospace">MEDIACODEC_STATE_NONE</span>.</p>
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
