<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Screen Mirroring: Mirroring screen and sound</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a class="opensection" href="#init">Initializing the screen mirroring sink</a></li>
			<li><a class="opensection" href="#prepare">Preparing the screen mirroring sink</a></li>
			<li><a class="opensection" href="#connect">Connecting and Starting the screen mirroring sink</a></li>
			<li><a class="opensection" href="#release">Releasing Resources</a></li>
			<li><a class="opensection" href="#handle">Handling exception of the screen mirroring sink</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/screen_mirroring_n.htm">Screen Mirroring Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SCMIRRORING_SINK__MODULE.html">Screen Mirroring sink API</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Screen Mirroring: Mirroring screen and sound</h1>
  <div class="cont"><div class="static-cont">
<p>This tutorial demonstrates how you can play screen mirroring as sink.</p>

<h2>Warm-up</h2>
<p>Become familiar with Screen Mirroring API basics by learning about:</p>

<ul>
 <li><a class="opensection" href="#init">Initializing the screen mirroring sink</a>
   <p>Initialize the screen mirroring sink for use.</p>
 </li>
 <li><a class="opensection" href="#prepare">Preparing the screen mirroring sink</a>
   <p>Set specific information, and prepare the screen mirroring sink.</p>
 </li>
 <li><a class="opensection" href="#connect">Connecting and Starting the screen mirroring sink</a>
  <p>Connect and Start the screen mirroring sink.</p>
 </li>
 <li><a class="opensection" href="#release">Releasing Resources</a>
  <p>Disconnect and unprepare the screen mirroring sink, and destroy the sink handle and release all its resources.</p>
 </li>
 <li><a class="opensection" href="#handle">Handling exception of the screen mirroring sink</a>
  <p>Handle exception of the screen mirroring sink</p>
 </li>

</ul>

<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>

		<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
 <h2 id="init" name="init" class="items-tit-h2">Initializing the screen mirroring sink</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">
<p>To initialize the screen mirroring sink.</p>

<ol><li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SCMIRRORING_SINK__MODULE.html">Screen Mirroring sink</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;scmirroring_type.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace">&lt;scmirroring_sink.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;scmirroring_type.h&gt;
#include &lt;scmirroring_sink.h&gt;
</pre></li>

 <li><p>Create a screen mirroring sink handle using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_create()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_NULL</span> immediately.</p>
<pre class="prettyprint">
static scmirroring_sink_h g_scmirroring;

static int init_scmirroring_sink()
{
&nbsp;&nbsp;&nbsp;int ret = SCMIRRORING_ERROR_NONE;
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_create(&g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "scmirroring_sink_create fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return TRUE;
}
</pre></li>
</ol>

		<li>
			<div class="devicespec-tit">
 <h2 id="prepare" name="prepare" class="items-tit-h2">Preparing the screen mirroring sink</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">
<p>To prepare the screen mirroring sink:</p>

<ol>
 <li>Register a callback function using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_set_state_changed()</span> function for checking scmirroring sink state.</li>
 <li>Set a display object using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_set_display()</span> function before calling <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_prepare()</span> function.</li>
 <li>Prepare the screen mirroring sink using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_prepare()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_PREPARED</span> immediately.

<pre class="prettyprint">
static void scmirroring_state_callback(scmirroring_error_e error_code, scmirroring_state_e state, void *user_data);

static int prepare_scmirroring_sink(scmirroring_display_type_e display_type, Evas_Object* display_object)
{
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_set_state_changed_cb(g_scmirroring, scmirroring_state_callback, NULL);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "scmirroring_sink_set_state_changed_cb fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_set_display(g_scmirroring, display_type, display_object);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "scmirroring_sink_set_display fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_prepare(g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "scmirroring_sink_prepare fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return TRUE;
}

static void scmirroring_state_callback(scmirroring_error_e error_code, scmirroring_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "Received Callback error code[%d], state[%d]", error_code, state);

&nbsp;&nbsp;&nbsp;switch(state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NULL:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PREPARED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PLAYING:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PAUSED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_DISCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " state[%d] Invalid State", state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return;
}</pre>
 </li>

</ol>
	</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="connect" name="connect" class="items-tit-h2">Connecting and Starting the screen mirroring sink
</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">
<p>To connect and start the screen mirroring sink:</p>

<ol>
 <li>Set IP and port number using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_set_ip_and_port()</span> function before calling <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_connect()</span> function.</li>
 <li>Connect the screen mirroring sink to the screen mirroring source using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_connect()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_CONNECTED</span> asynchronously. You should check to change the state using state callback function.</li>
 <li>Start the screen mirroring sink using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_start()</span> function when the screen mirroring state is <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_CONNECTED</span>. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_PLAYING</span> asynchronously.
 </li>

<pre class="prettyprint">
static void scmirroring_state_callback(scmirroring_error_e error_code, scmirroring_state_e state, void *user_data);

static int start_scmirroring_sink(const char* peer_ip, const char* peer_port)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_set_ip_and_port(g_scmirroring, peer_ip, peer_port);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_set_ip_and_port fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_connect(g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_connect fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return TRUE:
}

static void scmirroring_state_callback(scmirroring_error_e error_code, scmirroring_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "Received Callback error code[%d], state[%d]", error_code, state);

&nbsp;&nbsp;&nbsp;switch(state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NULL:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PREPARED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_start(g_scmirroring);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_start fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PLAYING:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PAUSED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_DISCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " state[%d] Invalid State", state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return;
}</pre>
</ol>
		<li>
			<div class="devicespec-tit">
 <h2 id="release" name="release" class="items-tit-h2">Releasing Resources</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">
<p>After you have finished working with the screen mirroring sink, disconnect the screen mirroring sink and release all resources:</p>

<ol>
 <li>Disconnect the screen mirroring sink using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_disconnect()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_DISCONNECTED</span> immediately.</li>
 <li>Unprepare the screen mirroring sink using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_unprepare()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_NULL</span> immediately.</li>
 <li>Destroy the screen mirroring sink using <span style="font-family: Courier New,Courier,monospace">scmirroring_sink_destroy()</span> function. The screen mirroring state will be <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_NONE</span> immediately.</li>
 <pre class="prettyprint">
static int destroy_scmirroring_sink()
{
&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_disconnect(g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_disconnect fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_unprepare(g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_unprepare fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_destroy(g_scmirroring);
&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_destroy fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return FALSE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return TRUE;
}
 </pre>
</ol>
	</div>
		</li>
<li>
			<div class="devicespec-tit">
 <h2 id="handle" name="handle" class="items-tit-h2">Handling exception of the screen mirroring</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">
<p>To handle exception of the screen mirroring:</p>

<ol>
 <li> If the state callback function is received <span style="font-family: Courier New,Courier,monospace">SCMIRRORING_STATE_DISCONNECTED</span> state, you should release the screen mirroring sink. The situation is caused by the source device disconnects the session or the screen mirroring sink has internal problem.  </li>
 <pre class="prettyprint">
static void scmirroring_state_callback(scmirroring_error_e error_code, scmirroring_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "Received Callback error code[%d], state[%d]", error_code, state);

&nbsp;&nbsp;&nbsp;switch(state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NULL:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PREPARED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PLAYING:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_PAUSED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_DISCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = scmirroring_sink_unprepare(g_scmirroring);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(ret != SCMIRRORING_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " scmirroring_sink_unprepare fail [%d]", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Fill what you want to do*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SCMIRRORING_STATE_NONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, " state[%d] Invalid State", state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return;
}
 </pre>
</ol>
	</div>
		</li>
	</ul>
</div>
</div>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
