<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Sound Manager: Managing Sound Parameters</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#set">Setting the Sound Session Type</a></li>
			<li><a href="#manage">Managing Volume Control</a></li>
			<li><a href="#query">Querying Sound Devices</a></li>
			<li><a href="#session">Managing Sound Manager Session Parameters</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/sound_manager_n.htm">Sound Manager Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">Sound Manager API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">Sound Manager API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Sound Manager: Managing Sound Parameters</h1>

  
<p>This tutorial demonstrates how you manage sounds.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Sound Manager API basics by learning about:</p>  
<ul>  
<li><a href="#set">Setting the Sound Session Type</a>
<p>Set a sound session type for your application.</p></li>

<li><a href="#manage">Managing Volume Control</a>
<p>Control the volume of your application.</p></li>

<li><a href="#query">Querying Sound Devices</a>
<p>Query sound device information.</p></li></ul>


<h2>Follow-up</h2>
<p>Once we have learned the basics of the Sound Manager API, we can now move on to more advanced tasks, including:</p>
<ul>  
<li><a href="#session">Managing Sound Manager Session Parameters</a>
<p>Obtain and set basic sound session parameters, such as volume and sound type of the actual sound sessions.</p></li></ul>
 
 <h2 id="set" name="set">Setting the Sound Session Type</h2>

<p>To set your application sound session type and monitor session changes:</p>


<ol><li><p>To use the functions and data types of the Sound Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sound_manager.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;sound_manager.h&gt;
</pre></li>

<li>Set the sound session type.
<p>Set the application sound session type using the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_session_type()</span> function. The function sets the type of your sound session across the system.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">sound_session_type_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga125699870d48881ea153a4fce7140958">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga125699870d48881ea153a4fce7140958">wearable</a> applications) defines the available sound session types.</p>
<pre class="prettyprint">int error_code;
 
error_code = sound_manager_set_session_type(SOUND_SESSION_TYPE_MEDIA);
</pre></li>

<li>Subscribe to the session change notifications.
<p>To be informed when a sound session change has occurred, define the <span style="font-family: Courier New,Courier,monospace">sound_session_interrupted_cb()</span> callback function:</p>
<pre class="prettyprint">static void sound_session_interrupted_cb(sound_session_interrupted_code_e code, void *user_data) 
{
&nbsp;&nbsp;&nbsp;if (code == SOUND_SESSION_INTERRUPTED_BY_MEDIA)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Session has been interrupted by media application, handle accordingly
&nbsp;&nbsp;&nbsp;if (code == SOUND_SESSION_INTERRUPTED_COMPLETED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Interruption completed, handle accordingly
}
</pre></li>

<li><p>To register the callback function, call <span style="font-family: Courier New,Courier,monospace">sound_manager_set_session_interrupted_cb()</span> with a callback and the data which passes the user data:</p>
<pre class="prettyprint">error_code = sound_manager_set_session_interrupted_cb(_sound_session_interrupted_cb, NULL);
</pre></li></ol>

 <h2 id="manage" name="manage">Managing Volume Control</h2>

<p>To control your application volume:</p>

<ol><li><p>To use the functions and data types of the Sound Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sound_manager.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;sound_manager.h&gt;
</pre></li>

<li>Subscribe to the volume change notifications.
<p>Define the <span style="font-family: Courier New,Courier,monospace">sound_manager_volume_changed_cb()</span> callback function, which is called every time the sound volume changes. Register the callback function using the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_volume_changed_cb()</span> function. When the volume changes and the callback function is invoked, use the callback to see which sound type has changed and what the new volume level is.</p>

<pre class="prettyprint">#define MBUF 128
 
int error_code;
 
static void _sound_manager_volume_changed_cb(sound_type_e type, unsigned int volume, void* user_data)  
{
&nbsp;&nbsp;&nbsp;char buf[MBUF] = {0, };
 
&nbsp;&nbsp;&nbsp;snprintf(buf, MBUF, &quot;(%d) type volume changed to (%d)&quot;, type, volume);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;Sound Manager&quot;, &quot;Volume Changed : %s&quot;, buf);
}

error_code = sound_manager_set_volume_changed_cb(_sound_manager_volume_changed_cb, NULL);
</pre></li>

<li>Get the maximum and current volume.
<p>To get the current volume, call the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_volume()</span> function with the sound type and the <span style="font-family: Courier New,Courier,monospace">int</span> value where the function places the current volume. You can call this function for every sound media type. To get the maximum volume, call the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_max_volume()</span> function with similar parameters.</p>
<pre class="prettyprint">
int ret;
sound_session_type_e type = SOUND_SESSION_TYPE_MEDIA;

int max_vol = 0;

ret = sound_manager_get_max_volume(type, &amp;max_vol);

int cur_vol = 0;

ret = sound_manager_get_volume(type, &amp;cur_vol);
</pre></li>

<li>Set a new volume.
<p>To set a new volume level, call the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_volume()</span> function. In the following example code, the first parameter is the sound type and the second parameter is a value received from the slider in the application UI, with which the user sets the volume value.</p>
<pre class="prettyprint">
int ret;
sound_session_type_e type = SOUND_SESSION_TYPE_MEDIA;
int value;

// Make sure the value is within the system max volume by using the sound_manager_get_max_volume() function 

ret = sound_manager_set_volume(type, value);
</pre></li></ol>

 <h2 id="query" name="query">Querying Sound Devices</h2>

<p>To query for information:</p>
<ol><li>To use the functions and data types of the Sound Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sound_manager.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;sound_manager.h&gt;
</pre></li>
<li>To query the information of the connected sound devices:
<ul><li>To access sound devices and their information:
<ol type="a">

<li>Set the mask.
<p>Define a combination of masks to narrow down the sound devices whose information you need.</p>
<pre class="prettyprint">
int ret;
int _ret;
sound_device_mask_e mask = SOUND_DEVICE_IO_DIRECTION_OUT_MASK | 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_DEVICE_IO_DIRECTION_BOTH_MASK | 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_DEVICE_STATE_ACTIVATED_MASK;
</pre></li>
<li>Get a sound device list handle and device handle.
<p>To query the desired sound device information, you need a connected sound device list, and the sound device handle. Use the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_current_device_list()</span> function to get the list handle of the currently connected sound devices. Use this handle as an input parameter for the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_next_device()</span> and <span style="font-family: Courier New,Courier,monospace">sound_manager_get_prev_device()</span> functions to get each sound device handle.</p>
<pre class="prettyprint">
sound_device_list_h list;
sound_device_h device;
sound_device_type_e type;
sound_device_io_direction_e direction;

ret = sound_manager_get_current_device_list(mask, &amp;list);
</pre></li>
<li>Get sound device information.
<p>With the sound device handle, you can query the sound device information (there is a dedicated function for each type of information: device type, IO direction, ID, name, and state). With the query functions, use the sound device handle as the first parameter (input), and the device information type enumerator as the second parameter (output).</p>
<p>The following example shows the sequential progress of getting information of sound device type and IO direction.</p>
<pre class="prettyprint">
while ((_ret = sound_manager_get_next/prev_device(list, &amp;device)) != SOUND_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_type(device, &amp;type);
 
&nbsp;&nbsp;&nbsp;if (type == SOUND_DEVICE_BLUETOOTH) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Sound device type is Bluetooth, handle accordingly
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (type == SOUND_DEVICE_AUDIO_JACK) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_io_direction(device, &amp;direction);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (direction == BOTH)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// The sound device has both headphone and mic, handle accordingly
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;}
}
if (_ret == SOUND_MANAGER_ERROR_NO_DATA) 
{
&nbsp;&nbsp;&nbsp;// End of the available devices, handle accordingly
}
</pre></li></ol></li>
<li>To monitor the device connection changes:
<ol type="a"><li>To receive a notification whenever the sound device connection state changes, define the <span style="font-family: Courier New,Courier,monospace">sound_device_connected_cb</span> callback function.
<pre class="prettyprint">
static void _sound_device_connected_cb(sound_device_h device, bool is_connected, void* user_data) 
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;sound_device_type_e type;

&nbsp;&nbsp;&nbsp;if (is_connected) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_type(device, &amp;type);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (type == SOUND_DEVICE_BLUETOOTH) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Sound device type is Bluetooth, handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_type(device, &amp;type);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (type == SOUND_DEVICE_BLUETOOTH) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Sound device type is Bluetooth, handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>To register the callback function, call the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_device_connected_cb()</span> with the defined callback and data which passes the user data. Use the mask to narrow down the callback information.
<pre class="prettyprint">
mask = SOUND_DEVICE_IO_DIRECTION_OUT_MASK | SOUND_DEVICE_IO_DIRECTION_BOTH_MASK;

ret = sound_manager_set_device_connected_cb(mask, _sound_device_connected_cb, NULL);
</pre>

<p>Remember that the initial state of the connected sound device is deactivated.</p></li></ol></li>

<li>To monitor the device information changes:
<ol type="a"><li>To receive a notification whenever the sound device information changes, define the <span style="font-family: Courier New,Courier,monospace">sound_device_information_changed_cb</span> callback function.
<pre class="prettyprint">
static void _sound_device_information_changed_cb(sound_device_h device, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sound_device_changed_info_e changed_info, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void* user_data) 
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;sound_device_type_e type;
&nbsp;&nbsp;&nbsp;sound_device_state_e state;
&nbsp;&nbsp;&nbsp;sound_device_io_direction_e direction;

&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_type(device, &amp;type);
&nbsp;&nbsp;&nbsp;if (type == SOUND_DEVICE_BLUETOOTH) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (changed_info  == SOUND_DEVICE_CHANGED_INFO_STATE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_state(device, &amp;state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (state == SOUND_DEVICE_STATE_DEACTIVATED) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Bluetooth device has been deactivated, handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sound_manager_get_device_io_direction(device, &amp;direction);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (direction == SOUND_DEVICE_IO_DIRECTION_OUT) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// IO direction of the Bluetooth device is now out, handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Handle accordingly
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>To register the callback function, call the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_device_information_changed_cb()</span> with the defined callback and data which passes the user data. Use the mask to narrow down the callback information.
<pre class="prettyprint">
mask = SOUND_DEVICE_IO_DIRECTION_OUT_MASK | SOUND_DEVICE_IO_DIRECTION_BOTH_MASK;

ret = sound_manager_set_device_information_changed_cb(mask, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_sound_device_information_changed_cb, NULL);
</pre>
</li></ol></li>
</ul> </li></ol>

<h2 id="session" name="session">Managing Sound Manager Session Parameters</h2>

<p>To obtain and modify basic sound session parameters:</p>

<ol>
<li><p>To use the functions and data types of the Sound Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sound_manager.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;sound_manager.h&gt;
</pre>
</li>
<li>Store the parameter data.
<p>The session parameters are stored in the following enumeration structures:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">sound_session_type_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga125699870d48881ea153a4fce7140958">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga125699870d48881ea153a4fce7140958">wearable</a> applications)</li>
<li><span style="font-family: Courier New,Courier,monospace">sound_session_option_for_during_play_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga132bd49bd7d0f5037cc292f9c7ad1c32">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga132bd49bd7d0f5037cc292f9c7ad1c32">wearable</a> applications)</li>
<li><span style="font-family: Courier New,Courier,monospace">sound_session_option_for_starting_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga26a030df874992a461af04255c6c3eef">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga26a030df874992a461af04255c6c3eef">wearable</a> applications)</li>
<li><span style="font-family: Courier New,Courier,monospace">sound_session_option_for_resumption_e</span> (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga20d1d7fa84dc322f03b58d42806cd9d9">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga20d1d7fa84dc322f03b58d42806cd9d9">wearable</a> applications)</li></ul>


</li>

<li>Detect interruptions.
<ol type="a"><li>
<p>To detect and track session status changes, register a callback function:</p>

<pre class="prettyprint">
sound_manager_set_session_interrupted_cb(_sound_session_interrupted_cb, NULL);
</pre></li>

<li><p>Define the callback function content. The <span style="font-family: Courier New,Courier,monospace">sound_session_interrupted_code_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga9d7c723a05f1eab1b1d535bfad527b93">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__SESSION__MODULE.html#ga9d7c723a05f1eab1b1d535bfad527b93">wearable</a> applications) defines the available interruption sources.</p>

<pre class="prettyprint">
void _sound_session_interrupted_cb(sound_session_interrupted_code_e code, void * userdata)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Interrupt code: %d\n&quot;, code);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_COMPLETED %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_MEDIA %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_CALL %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_EARJACK_UNPLUG %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_RESOURCE_CONFLICT %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_ALARM %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_EMERGENCY %d | &quot;\
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_INTERRUPTED_BY_NOTIFICATION %d\n\n&quot;,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_COMPLETED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_MEDIA,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_CALL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_EARJACK_UNPLUG,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_RESOURCE_CONFLICT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_ALARM,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_EMERGENCY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_INTERRUPTED_BY_NOTIFICATION);
}
</pre>
</li></ol></li>

<li>Manage the session type.
<p>To get a valid sound session, the Tone Player API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__TONE__PLAYER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__TONE__PLAYER__MODULE.html">wearable</a> applications) is used in this tutorial. For more information, see the <a href="tone_player_tutorial_n.htm">Tone Player Tutorial</a>.</p>
<p>To determine and change the session type, use the following functions:</p>

<pre class="prettyprint">
#include &lt;tone_player.h&gt;
int id;
sound_session_type_e type;

tone_player_start(TONE_TYPE_ANSI_DIAL, SOUND_SESSION_TYPE_MEDIA, 10000, &amp;id);

sound_manager_get_session_type(&amp;type);

dlog_print(DLOG_INFO, LOG_TAG, &quot;-Session type %d :\n&quot;
&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_TYPE_MEDIA %d | &quot;\
&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_TYPE_ALARM %d | &quot;\
&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_TYPE_NOTIFICATION %d | &quot;\
&nbsp;&nbsp;&nbsp;&quot;SOUND_SESSION_TYPE_EMERGENCY %d \n&quot;,
&nbsp;&nbsp;&nbsp;type,
&nbsp;&nbsp;&nbsp;SOUND_SESSION_TYPE_MEDIA,
&nbsp;&nbsp;&nbsp;SOUND_SESSION_TYPE_ALARM,
&nbsp;&nbsp;&nbsp;SOUND_SESSION_TYPE_NOTIFICATION,
&nbsp;&nbsp;&nbsp;SOUND_SESSION_TYPE_EMERGENCY);

sound_manager_set_session_type(SOUND_SESSION_TYPE_NOTIFICATION);
</pre>
</li>

<li>Manage the session options.
<p>To determine the sound session behavior after an interruption or start, or during the playback, use the following functions:</p>

<pre class="prettyprint">
sound_session_option_for_starting_e start;
sound_session_option_for_during_play_e play;
sound_session_option_for_resumption_e res;

sound_manager_get_media_session_option(&amp;start, &amp;play);
sound_manager_get_media_session_resumption_option(&amp;res);

sound_manager_set_media_session_option(SOUND_SESSION_OPTION_PAUSE_OTHERS_WHEN_START,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_SESSION_OPTION_INTERRUPTIBLE_DURING_PLAY);

sound_manager_set_media_session_resumption_option(SOUND_SESSION_OPTION_RESUMPTION_BY_SYSTEM_OR_MEDIA_PAUSED);
</pre>
</li>

<li>Clean up.
<p>When the interrupt callback is no longer needed, deregister it:</p>

<pre class="prettyprint">
sound_manager_unset_session_interrupted_cb();
</pre>
</li>
</ol>     

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
