<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Media Controller: Communicating Between the Server and Client for Media Control</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
 		<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#init_media">Initializing the Media Controller</a></li>
				<li><a href="#get_media">Getting Metadata and Playback Information</a></li>
				<li><a href="#send_media">Transferring Commands to the Server</a></li>
		</ul>  
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/media_controller_n.htm">Media Controller Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">Media Controller API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">Media Controller API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Media Controller: Communicating Between the Server and Client for Media Control</h1>
  
<p>This tutorial demonstrates how you can transfer information between the server and the client.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Media Controller API basics by learning about:</p>

	<ul>
			<li><a href="#init_media">Initializing the Media Controller</a>
			<p>Initialize the media controller for use.</p></li>
			<li><a href="#get_media">Getting Metadata and Playback Information</a>
			<p>Create a media controller handle, communicate with the server, and get metadata and playback information.</p></li>
			<li><a href="#send_media">Transferring Commands to the Server</a>
			<p>Create a media controller handle, communicate with the server, and transfer the command to the control.</p></li>
	</ul>
        
 <h2 id="init_media" name="init_media">Initializing the Media Controller</h2>

<p>To initialize the media controller server:</p>
  <ol>
<li><p>To use the functions and data types of the Media Controller server API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_server.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;media_controller_server.h&gt;
</pre></li><li><p>To work with the Media Controller Server API, create a handle to the media controller server that updates the latest information, and processes the job requested by the client. A global variable is used in this tutorial.</p>

<pre class="prettyprint">
static mc_server_h g_server_h = NULL;
</pre></li>
</ol>
<p>To initialize the media controller client:</p>
<ol>
<li><p>To use the functions and data types of the Media Controller client API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_client.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;media_controller_client.h&gt;
</pre></li><li><p>The client requests the information from the server side, and transfers commands to control. Like on the server side, create a handle to the media controller client:</p>

<pre class="prettyprint">
static mc_client_h g_client_h = NULL;
</pre></li>
</ol>  

<h2 id="get_media" name="get_media">Getting Metadata and Playback Information</h2>

<p>To update metadata and playback information (on the server side):</p>
<ol>
<li>Create the media controller server handle with the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre></li>
<li>Set the playback information to be updated with the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state()</span> function. As parameters, define the media controller server handle and the playback state. 
<p>After the information is set, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_update_playback_info()</span> function to update the information.</p>

<pre class="prettyprint">
ret = mc_server_set_playback_state(g_mc_server, MEDIA_PLAYBACK_STATE_PLAYING);

ret = mc_server_update_playback_info(g_mc_server);
</pre>
<p>Other playback information or metadata is handled similarly.</p>
</li>
<li>When no longer needed, free the media controller server handle:
<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre></li>
</ol>
<p>To get metadata and playback information (on the client side):</p>
<ol>
<li>Create the media controller client handle with the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre></li>
<li>Get the playback information from the server with the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_playback_info()</span> function.  
<p>Before using the function, you must know the name of the server to which the request is sent. Use the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function to find out the server name and state.</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_playback_h playback = NULL;
mc_server_state_e server_state;
mc_playback_states_e playback_state;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);

ret = mc_client_get_server_playback_info(g_client_h, server_name, &amp;playback);

ret = mc_client_get_playback_state(playback, &amp;playback_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Playback State: %d\n&quot;, playback_state);
</pre></li>
<li>When no longer needed, free the media controller client handle:
<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre></li>
</ol>

 <h2 id="send_media" name="send_media">Transferring Commands to the Server</h2>

<p>To transfer a command to the server (on the client side):</p>
<ol>
<li>Create the media controller client handle with the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre></li>
<li>Transfer the playback command to the server with the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_playback_state_command()</span> function. 
<p>Before using the function, you must know the name of the server to which the command is sent. Use the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function to find out the server name.</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_playback_h playback = NULL;
mc_server_state_e server_state;
mc_playback_states_e playback_state = MEDIA_PLAYBACK_STATE_PLAYING;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);

ret = mc_client_send_playback_state_command(g_client_h, server_name, playback_state);
</pre>
<p>If you use the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_custom_command()</span> function, you can transfer various command as you want.</p>
</li>
<li>When no longer needed, free the media controller client handle:
<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre></li>
</ol>
<p>To process the received command (on the server side):</p>
<ol>
<li>Create the media controller server handle with the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre></li>
<li>Define a callback that is invoked when the server receives a command:
<pre class="prettyprint">
void command_received_cb(const char* client_name, mc_playback_states_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Client Name: %s, Playback state: %d\n&quot;, client_name, state);
}
</pre>
</li>
<li>Register the callback.
<p>To handle the incoming command, you have to register the callback using the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state_command_received_cb()</span> function. If the client transfers a custom command, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_custom_command_received_cb()</span> function.</p>
<pre class="prettyprint">
ret = mc_server_set_playback_state_command_received_cb(g_mc_server, command_received_cb, NULL);
</pre>
</li>
<li>When no longer needed, free the media controller server handle:
<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre></li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
