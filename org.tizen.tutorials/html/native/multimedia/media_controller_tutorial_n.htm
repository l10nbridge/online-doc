<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Media Controller: Communicating Between the Server and Client for Media Control</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#init_media">Initializing the Media Controller</a></li>
            <li><a href="#get_media">Updating and Retrieving Information</a></li>
            <li><a href="#send_media">Sending and Processing Commands</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/media_controller_n.htm">Media Controller Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">Media Controller API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Media Controller: Communicating Between the Server and Client for Media Control</h1>

<p>This tutorial demonstrates how you can transfer information and send commands between the media controller server and client.</p>

<p>This feature is supported in mobile applications only.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Media Controller API basics by learning about:</p>

<ul>
    <li><a href="#init_media">Initializing the Media Controller</a>
        <p>Initialize the media controller server and client for use.</p></li>
    <li><a href="#get_media">Updating and Retrieving Information</a>
        <p>Update the metadata and playback information on the server side, and then retrieve the metadata and playback information on the client side.</p></li>
    <li><a href="#send_media">Sending and Processing Commands</a>
        <p>Send a command to the server from the client side, and then process the command on the server side.</p></li>
</ul>

<h2 id="init_media" name="init_media">Initializing the Media Controller</h2>

<p>To initialize the media controller server for use:</p>

<ol>

<li>

<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__SERVER__MODULE.html">Media Controller Server</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_server.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;media_controller_server.h&gt;
</pre>

</li>

<li>

<p>To work with the Media Controller Server API, define a handle variable for the media controller server:</p>

<pre class="prettyprint">
static mc_server_h g_server_h = NULL;
</pre>

<p>The server updates the metadata and playback information, and processes the requests and commands sent by the client.</p>

<p>This tutorial uses a global variable for the handle.</p>

</li>

</ol>

<p>To initialize the media controller client for use:</p>

<ol>

<li>

<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__CLIENT__MODULE.html">Media Controller Client</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_client.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;media_controller_client.h&gt;
</pre>

</li>

<li>

<p>To work with the Media Controller Client API, define a handle variable for the media controller client:</p>

<pre class="prettyprint">
static mc_client_h g_client_h = NULL;
</pre>

<p>The client requests metadata and playback information from the server, and sends playback commands to server.</p>

<p>This tutorial uses a global variable for the handle.</p>

</li>

</ol>

<h2 id="get_media" name="get_media">Updating and Retrieving Information</h2>

<p>To update the metadata and playback information on the server side:</p>

<ol>

<li>

<p>Create the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre>

</li>

<li>

<p>Set the metadata or playback information to be updated using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_server_set_XXX()</span> function, and then update the metadata or playback information using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_server_update_XXX()</span> function.</p>

<p>For example, to update the playback state information, set the information to be updated using the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state()</span> function, and then update the information using the <span style="font-family: Courier New,Courier,monospace;">mc_server_update_playback_info()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_set_playback_state(g_mc_server, MC_PLAYBACK_STATE_PLAYING);

ret = mc_server_update_playback_info(g_mc_server);
</pre>

</li>

<li>

<p>When no longer needed, destroy the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_destroy()</span> function:</p>

<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre>

</li>

</ol>

<p>To retrieve the metadata and playback information on the client side:</p>

<ol>

<li>

<p>Create the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre>

</li>

<li>

<p>Retrieve the server name using the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function:</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_server_state_e server_state;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);
</pre>

</li>

<li>

<p>Retrieve the metadata or playback information from the server using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_XXX()</span> function. Use the server name retrieved in the previous step to identify the server.</p>

<p>For example, to retrieve the playback information from the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_playback_info()</span> function:</p>

<pre class="prettyprint">
mc_playback_h playback = NULL;
mc_playback_states_e playback_state;

ret = mc_client_get_server_playback_info(g_client_h, server_name, &amp;playback);

ret = mc_client_get_playback_state(playback, &amp;playback_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Playback State: %d\n&quot;, playback_state);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">mc_client_get_playback_state()</span> function retrieves the playback state from the playback information returned by the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_playback_info()</span> function.</p>

</li>

<li>

<p>When no longer needed, destroy the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_destroy()</span> function:</p>

<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre>

</li>

</ol>

<h2 id="send_media" name="send_media">Sending and Processing Commands</h2>

<p>To send a command to the server from the client side:</p>

<ol>

<li>

<p>Create the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre>

</li>

<li>

<p>Retrieve the server name using the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function:</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_server_state_e server_state;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);
</pre>

</li>

<li>

<p>Send the command to the server using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_client_send_XXX()</span> function. Use the server name retrieved in the previous step to identify the server.</p>

<p>For example, to send a playback state change command to the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_playback_state_command()</span> function with the new state defined in the third parameter:</p>

<pre class="prettyprint">
mc_playback_h playback = NULL;
mc_playback_states_e playback_state = MC_PLAYBACK_STATE_PLAYING;

ret = mc_client_send_playback_state_command(g_client_h, server_name, playback_state);
</pre>

<p>If you want to define your own commands to send to the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_custom_command()</span> function.</p>

</li>

<li>

<p>When no longer needed, destroy the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_destroy()</span> function:</p>

<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre>

</li>

</ol>

<p>To process the received command on the server side:</p>

<ol>

<li>

<p>Create the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre>

</li>

<li>

<p>Define the callback that is invoked when the server receives the command.</p>

<p>For example, to define a callback for playback state change commands:</p>

<pre class="prettyprint">
void
command_received_cb(const char* client_name, mc_playback_states_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Client Name: %s, Playback state: %d\n&quot;, client_name, state);
}
</pre>

</li>

<li>

<p>Register the callback:</p>

<ul>

<li>

<p>To register a callback for playback state change commands, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state_command_received_cb()</span> function.</p>

</li>

<li>

<p>To register a callback for a custom command, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_custom_command_received_cb()</span> function.</p>

</li>

</ul>

<p>For example, to register a callback for playback state change commands:</p>

<pre class="prettyprint">
ret = mc_server_set_playback_state_command_received_cb(g_mc_server, command_received_cb, NULL);
</pre>

</li>

<li>

<p>When no longer needed, destroy the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_destroy()</span> function:</p>

<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre>

</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>