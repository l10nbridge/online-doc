<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Video Util: Transcoding Media Files</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing Video Utilities</a></li>
			<li><a href="#manage">Managing Transcoding</a></li>
			<li><a href="#set">Setting Parameters</a></li>
			<li><a href="#get">Monitoring the Transcoding Progress</a></li>
		</ul>    
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/video_util_n.htm">Video Util Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VIDEO__UTIL__MODULE.html">Video Util API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Video Util: Transcoding Media Files</h1>

  
<p>This tutorial demonstrates how you can transcode and trim video files.</p>

<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>
<h2>Warm-up</h2>

<p>Become familiar with the Video Util API basics by learning about:</p>

  <ul>
	<li><a href="#init">Initializing Video Utilities</a>
	<p>Initialize the video utilities for use.</p></li>
	<li><a href="#manage">Managing Transcoding</a>
  	<p>Start, cancel, and finish the transcoding process and monitor its progress.</p></li>
   </ul>
 <h2>Follow-up</h2> 
 <p>Once we have learned the basics of the Video Util API, we can now move on to more advanced tasks, including:</p>
 <ul>
	<li><a href="#set">Setting Parameters</a>
	<p>Set basic parameters for the video utility.</p></li>
	<li><a href="#get">Monitoring the Transcoding Progress</a>
  	<p>Get progress information about the transcoding process.</p></li>
  </ul>
 
 <h2 id="init" name="init">Initializing Video Utilities</h2>

<p>Before using the video util:</p>
  
  <ol>
  <li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VIDEO__UTIL__MODULE.html">Video Util</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;video_util.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;video_util.h&gt;
</pre></li>
<li>Declare a variable, which identifies the video util handle used for transcoding:
  
<pre class="prettyprint">video_util_h *handle;</pre></li>

<li><p>Create the handle:</p>
<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);
</pre></li>

<li><p>If the handle is created normally, set the input files with the <span style="font-family: Courier New,Courier,monospace">video_util_set_file_path()</span> function:</p>

<pre class="prettyprint">int video_util_set_file_path(video_util_h handle, const char *path);
</pre> </li>

<li><p>Set the file format with the <span style="font-family: Courier New,Courier,monospace">video_util_set_file_format()</span> function. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VIDEO__UTIL__MODULE.html#gad9c070cbb59f3107cefd280ec06e2966">video_util_file_format_e</a> enumeration defines the available file formats.</p>

<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);
ret = video_util_set_file_format(video_h, VIDEO_UTIL_FILE_FORMAT_3GP);
</pre></li>

<li><p>Set the video codec with the <span style="font-family: Courier New,Courier,monospace">video_util_set_video_codec()</span> function. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VIDEO__UTIL__MODULE.html#gabadbb5a64155f42fe180bedac40f289e">video_util_video_codec_e</a> enumeration defines the available video codecs.</p>

<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);
ret = video_util_set_video_codec(video_h, VIDEO_UTIL_VIDEO_CODEC_MPEG4);
</pre></li>

<li><p>Set the audio codec with the <span style="font-family: Courier New,Courier,monospace">video_util_set_audio_codec()</span> function. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VIDEO__UTIL__MODULE.html#ga48da7f77144a99f5733a90d62805c435">video_util_audio_codec_e</a> enumeration defines the available audio codecs.</p>
<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);
ret = video_util_set_audio_codec(video_h, VIDEO_UTIL_AUDIO_CODEC_AAC);
</pre></li>

<li><p>Set the seek mode with the <span style="font-family: Courier New,Courier,monospace">video_util_set_accurate_mode()</span> function.</p>

<p>If the accurate mode is enabled, the user can get an accurate frame for the given duration in the <span style="font-family: Courier New,Courier,monospace">video_util_start_transcoding()</span> function.</p>

<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);

ret = video_util_set_accurate_mode(video_h, 0);
</pre></li>

<li><p>Set the resolution with the <span style="font-family: Courier New,Courier,monospace">video_util_set_resolution()</span> function:</p>
<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);

ret = video_util_set_resolution(video_h, 176, 144);
</pre>
<p>If transcoding is done with the original input (&#39;trim&#39;), both the width and height are 0.</p></li>

<li><p>Set the FPS with the <span style="font-family: Courier New,Courier,monospace">video_util_set_fps()</span> function:</p>

<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);

ret = video_util_set_fps(video_h, 10);
</pre></li>
<li><p>When the handle is no longer needed, free the memory: </p>

<pre class="prettyprint">
error_code = video_util_destroy(handle);
</pre></li></ol>

 <h2 id="manage" name="manage">Managing Transcoding</h2>

<p>To manage the transcoding process:</p>  

<ol><li><p>If the prerequisites are set normally, start the transcoding with the <span style="font-family: Courier New,Courier,monospace">video_util_start_transcoding()</span> function.</p> 
<pre class="prettyprint">
ret = video_util_start_transcoding(video_h);
</pre></li>

<li><p>While transcoding:</p>
<ul><li>Call the <span style="font-family: Courier New,Courier,monospace">video_util_get_progress_transcoding()</span> function to get the current progress.
</li>

<li>Call the <span style="font-family: Courier New,Courier,monospace">video_util_cancel_transcoding()</span> function to cancel the transcoding process.
<p>The function uses a handle created using the <span style="font-family: Courier New,Courier,monospace">video_util_create()</span> function. If you call this function after the complete transcoding callback is <span style="font-family: Courier New,Courier,monospace">TRUE</span>, you cannot cancel the transcoding.</p>
<pre class="prettyprint">
video_util_h video_h = NULL;
ret = video_util_create(&amp;video_h);

ret = video_util_cancel_transcoding(video_h);
</pre>
</li></ul></li>

<li><p>When the transcoding returns a complete callback, destroy the handle with the <span style="font-family: Courier New,Courier,monospace">video_util_destroy()</span> function.</p>

<p>This function destroys the handle of a completed transcoding. The function contains the cancel function, if it is called during the transcoding process.</p>
<p>If you do not call the destroy function after completing the transcoding, new transcoding is not possible, and a memory crash can occur.</p></li></ol>

 <h2 id="set" name="set">Setting Parameters</h2>

<p>To set the basic parameters of the video util:</p>

<ol>
<li><a href="#init">Initialize the video utilities</a>.</li>
<li>Check the supported file format.
<ol type="a"><li><p>Check the supported file formats:</p>

<pre class="prettyprint">
error_code = video_util_foreach_supported_file_format(handle, video_util_file_supported, NULL);
</pre>

<p>The first parameter refers to the handle of the video util, and the second parameter to the callback function to be invoked.</p></li>



<li><p>Define the callback function:</p>

<pre class="prettyprint">
static bool video_util_file_supported(video_util_file_format_e format, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;format %s\n&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format == VIDEO_UTIL_FILE_FORMAT_3GP? &quot;VIDEO_UTIL_FILE_FORMAT_3GP&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format == VIDEO_UTIL_FILE_FORMAT_MP4? &quot;VIDEO_UTIL_FILE_FORMAT_MP4&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;VIDEO_UTIL_FILE_FORMAT_MAX&quot;);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre></li></ol>
</li>

<li>Check the supported codecs.
<ol type="a"><li><p>Check the supported audio and video codecs:</p>

<pre class="prettyprint">
video_util_foreach_supported_video_codec(handle, video_util_video_supported, NULL);

video_util_foreach_supported_audio_codec(handle, video_util_audio_supported, NULL);
</pre>

<p>The first parameter refers to the handle of the video util, and the second parameter to the callback function to be invoked.</p></li>

<li>

<p>Define the callback functions:</p>

<pre class="prettyprint">
static bool video_util_video_supported(video_util_video_codec_e codec, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;video codec %s\n&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec == VIDEO_UTIL_VIDEO_CODEC_MPEG4? &quot;VIDEO_UTIL_VIDEO_CODEC_MPEG4&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec == VIDEO_UTIL_VIDEO_CODEC_H263? &quot;VIDEO_UTIL_VIDEO_CODEC_H263&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec == VIDEO_UTIL_VIDEO_CODEC_H264? &quot;VIDEO_UTIL_VIDEO_CODEC_H264": 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;VIDEO_UTIL_VIDEO_CODEC_NONE&quot;);

&nbsp;&nbsp;&nbsp;return 0;
}

static bool video_util_audio_supported(video_util_audio_codec_e codec, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;audio codec %s\n&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec==VIDEO_UTIL_AUDIO_CODEC_AAC? &quot;VIDEO_UTIL_AUDIO_CODEC_AAC&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codec==VIDEO_UTIL_AUDIO_CODEC_AMRNB? &quot;VIDEO_UTIL_AUDIO_CODEC_AMRNB&quot;: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;VIDEO_UTIL_AUDIO_CODEC_NONE&quot;);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre></li></ol>

<p>To check the support for a specified codec, such as <span style="font-family: Courier New,Courier,monospace;">VIDEO_UTIL_VIDEO_CODEC_MPEG4</span>:</p>

<pre class="prettyprint">
static bool video_util_video_supported(video_util_video_codec_e codec, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (codec == VIDEO_UTIL_VIDEO_CODEC_MPEG4)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data = true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}

bool supported = false;
video_util_foreach_supported_video_codec(handle, video_util_video_supported, &amp;supported);
dlog_print(DLOG_INFO, LOG_TAG, &quot;MPEG4 codec %s&quot;, supported?&quot;supported&quot;:&quot;not supported&quot;);
</pre>
</li>

<li>Set codecs.
<p>To set the audio and video codecs:</p>

<pre class="prettyprint">
error_code = video_util_set_audio_codec(handle, VIDEO_UTIL_AUDIO_CODEC_AAC);

error_code = video_util_set_video_codec(handle, VIDEO_UTIL_VIDEO_CODEC_MPEG4);
</pre>
</li>

<li>Set the resolution.
<p>To set the video resolution:</p>

<p>The first parameter refers to the handle of the video util, the second to the media width (if the width is 0, it is set to the original size where the minimum value is 128), and the third to the height of the media (if the height is 0, it is set to its original size, the minimum value being 96).</p>

<pre class="prettyprint">
int error_code = video_util_set_resolution(handle, 640, 480);
</pre>
</li>

<li>Set the FPS.
<p>To set the frames per second (FPS):</p>

<p>The first parameter refers to the handle of the video util and the second to the frame rate. The frame rate minimum value is 5 and the maximum value is 30.</p>

<pre class="prettyprint">
int error_code = video_util_set_fps(handle, 25);
</pre>
</li>
</ol>

 <h2 id="get" name="get">Monitoring the Transcoding Progress</h2>

<p>To get the progress of the video util:</p>
<ol>
<li><a href="#init">Initialize the video utilities</a>.</li>
<li>Execute the transcoding first.
<p>Check whether the transcoding works normally:</p>

<pre class="prettyprint">
error_code = video_util_start_transcoding(video_util_h handle, unsigned long start, unsigned long duration, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *out_path, video_util_transcoding_progress_cb progress_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video_util_transcoding_completed_cb completed_cb, void *user_data);
</pre>

<p>The first parameter refers to the handle of the video util, the second and third parameter to the argument for seek, the fourth parameter to the output path, and the fifth and sixth parameter to the callback function to be invoked and its parameter.</p></li>

<li>To get the transcoding progress, execute the <span style="font-family: Courier New,Courier,monospace;">video_util_get_progress_transcoding()</span> function within the <span style="font-family: Courier New,Courier,monospace;">progress_cb</span> callback of the <span style="font-family: Courier New,Courier,monospace;">video_util_start_transcoding()</span> function:

<pre class="prettyprint">
video_util_get_progress_transcoding(video_util_h handle, unsigned long *current_position, unsigned long *duration);
</pre>
</li>
</ol>

          
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
