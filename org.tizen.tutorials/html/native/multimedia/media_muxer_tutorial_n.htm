<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Media Muxer: Muxing Encoded Media Streams</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#prepare">Preparing the Media Muxer</a></li>
			<li><a href="#manage">Managing the Media Muxer</a></li>
			</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/multimedia/media_muxer_n.htm">Media Muxer Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIAMUXER__MODULE.html">Media Muxer API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIAMUXER__MODULE.html">Media Muxer API for Wearable Native</a></li>
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Media Muxer: Muxing Encoded Media Streams</h1> 

<p>This tutorial demonstrates how you can mux encoded media streams into a compatible container format.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Media Muxer API basics by learning about:</p>
<ul>
	<li><a href="#prerequisites">Prerequisites</a>
	<p>Prepare your application to use the media muxer functionality.</p></li>
	<li><a href="#prepare">Preparing the Media Muxer</a>
	<p>Initialize and configure the media muxer for use.</p></li>
	<li><a href="#manage">Managing the Media Muxer</a>
	<p>Create threads to use the media muxer.</p></li>
</ul> 


<h2 id="prerequisites">Prerequisites</h2>

<p>To use the functions and data types of the Media Muxer API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIAMUXER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIAMUXER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;mediamuxer.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;mediamuxer.h&gt;
</pre>

<h2 id="prepare">Preparing the Media Muxer</h2>

<p>To prepare the media muxer:</p>
<ol>
<li>Define a handle for the media muxer and pass it to the <span style="font-family: Courier New,Courier,monospace">mediamuxer_create()</span> function. The same handle must be passed to the rest of the media muxer functions.
<pre class="prettyprint">
mediamuxer_h *muxer;
ret = mediamuxer_create(&amp;muxer);
if (ret != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
</li>

<li>If the handle is created normally, set the output file path by passing the absolute uri path to the <span style="font-family: Courier New,Courier,monospace">mediamuxer_set_data_sink()</span> function:
<pre class="prettyprint">
char *path = &quot;/home/media/myfile.mp4&quot;
mediamuxer_output_format_e format = MEDIAMUXER_CONTAINER_FORMAT_MP4;
if (mediamuxer_set_data_sink(muxer, path, format)!= MEDIAMUXER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;mediamuxer_set_data_sink failed\n&quot;);
</pre>
</li>

<li>Add the necessary media tracks to the media muxer. The following function shows adding a video elementary track to be muxed. 
<p>A successful <span style="font-family: Courier New,Courier,monospace">mediamuxer_add_track()</span> function call returns a <span style="font-family: Courier New,Courier,monospace">track_index</span>. Whenever you have to deal with the track, the corresponding <span style="font-family: Courier New,Courier,monospace">track_index</span> must be used. Mapping a <span style="font-family: Courier New,Courier,monospace">track_index</span> to the corresponding media track is your responsibility.</p>
<pre class="prettyprint">
int
test_mediamuxer_add_track_video()
{
&nbsp;&nbsp;&nbsp;&nbsp;int track_index_vid = -1;
&nbsp;&nbsp;&nbsp;&nbsp;media_format_mimetype_e mimetype;
&nbsp;&nbsp;&nbsp;&nbsp;int width;
&nbsp;&nbsp;&nbsp;&nbsp;int height;
&nbsp;&nbsp;&nbsp;&nbsp;int avg_bps;
&nbsp;&nbsp;&nbsp;&nbsp;int max_bps;

&nbsp;&nbsp;&nbsp;&nbsp;media_format_create(&amp;media_format);
&nbsp;&nbsp;&nbsp;&nbsp;media_format_set_video_mime(media_format, MEDIA_FORMAT_H264_SP);
&nbsp;&nbsp;&nbsp;&nbsp;media_format_set_video_width(media_format, 640);
&nbsp;&nbsp;&nbsp;&nbsp;media_format_set_video_height(media_format, 480);
&nbsp;&nbsp;&nbsp;&nbsp;media_format_set_video_avg_bps(media_format, 256000);
&nbsp;&nbsp;&nbsp;&nbsp;media_format_set_video_max_bps(media_format, 256000);

&nbsp;&nbsp;&nbsp;&nbsp;/* Add the video track */
&nbsp;&nbsp;&nbsp;&nbsp;mediamuxer_add_track(myMuxer, media_format, &amp;track_index_vid);

&nbsp;&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Once all the tracks are added, start the media muxer:
<pre class="prettyprint">
if (mediamuxer_start(muxer) != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;mediamuxer_start API failed\n&quot;);
</pre>
</li>

<li>After a successful muxer start, call a write sample until all the samples of the respective track are written.
<p>The write sample is a specific track. It is your responsibility to use the appropriate <span style="font-family: Courier New,Courier,monospace">track_index</span> to choose the correct track, and to add the corresponding data to the muxer through the write sample. Repeat the same for the rest of the tracks. Before calling this function, create a valid handle for the <span style="font-family: Courier New,Courier,monospace">media_packet_h</span> handle to get the input samples. For more information, see <a href="../../../../org.tizen.guides/html/native/multimedia/media_tools_n.htm">Media Tool</a>.</p>
<pre class="prettyprint">
if (mediamuxer_write_sample(muxer, track_index, in_buf) != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;mediamuxer_write_sample API for track %d failed\n&quot;, track_index);
</pre>
</li>

<li>Once the EOS (End Of Stream) of a particular track is reached, call <span style="font-family: Courier New,Courier,monospace">mediamuxer_close_track()</span> function to finalize the track:
<pre class="prettyprint">
if (mediamuxer_close_track(muxer, track_index) != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;mediamuxer_close_track API failed\n&quot;);
</pre>
</li>
</ol>



<h2 id="manage" name="manage">Managing the Media Muxer</h2> 

<p>To manage the media muxer, the <span style="font-family: Courier New,Courier,monospace">mediamuxer_write_sample()</span> function is called in a loop until the EOS is reached. You can use multi-threading, writing samples corresponding to different tracks in different threads.</p>
<ol>
<li>You can create individual threads to manage each track simultaneously, but it is not mandatory. The following sample code explains how to call the <span style="font-family: Courier New,Courier,monospace">mediamuxer_write_sample()</span> function for a video track in a unique thread:
<pre class="prettyprint">
int
test_mediamuxer_write_sample()
{
&nbsp;&nbsp;&nbsp;&nbsp;pthread_t thread[1];
&nbsp;&nbsp;&nbsp;&nbsp;pthread_attr_t attr;
&nbsp;&nbsp;&nbsp;&nbsp;/* Initialize and set thread detached attribute */
&nbsp;&nbsp;&nbsp;&nbsp;pthread_attr_init(&amp;attr);
&nbsp;&nbsp;&nbsp;&nbsp;pthread_attr_setdetachstate(&amp;attr, PTHREAD_CREATE_DETACHED);
&nbsp;&nbsp;&nbsp;&nbsp;pthread_create(&amp;thread[0], &amp;attr, _write_video_data, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;pthread_create(&amp;thread[1], &amp;attr, _write_audio_data, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;/* Add audio track, which is not given in this tutorial */

&nbsp;&nbsp;&nbsp;&nbsp;pthread_attr_destroy(&amp;attr);

&nbsp;&nbsp;&nbsp;&nbsp;return 0;
}

void*
_write_video_data()
{
&nbsp;&nbsp;&nbsp;&nbsp;gint is_eos = 0;
&nbsp;&nbsp;&nbsp;&nbsp;int *status = (int *)g_malloc(sizeof(int) * 1);
&nbsp;&nbsp;&nbsp;&nbsp;v*status = -1;
&nbsp;&nbsp;&nbsp;&nbsp;int track_index_vid = 1; /* track_index = 1 for video */
&nbsp;&nbsp;&nbsp;&nbsp;media_packet_h vid_pkt;
&nbsp;&nbsp;&nbsp;&nbsp;while (!is_eos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Read encoded video data */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Get the proper video media packet from, for example, mediacodec/mediademuxer */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_func_get_media_packet(&amp;vid_pkt, &amp;is_eos);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!is_eos) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mediamuxer_write_sample(myMuxer, track_index_vid, vid_pkt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;media_packet_destroy(vid_pkt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_print(&quot;\nVideo while done in the test suite&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mediamuxer_close_track(myMuxer, track_index_vid);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return (void *)status;
}
</pre>
</li>

<li>After you have finished work with the media muxer handle, reset the media muxer and destroy the handle by using the <span style="font-family: Courier New,Courier,monospace">mediamuxer_stop()</span> and <span style="font-family: Courier New,Courier,monospace">mediamuxer_destroy()</span> functions. 
<p>The media muxer state changes to <span style="font-family: Courier New,Courier,monospace">MEDIAMUXER_STATE_NONE</span>.</p>
<pre class="prettyprint">
ret = mediamuxer_stop(muxer);
if (ret != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
ret = mediamuxer_destroy(muxer);
if (ret != MEDIAMUXER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
</li>
</ol>


    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

