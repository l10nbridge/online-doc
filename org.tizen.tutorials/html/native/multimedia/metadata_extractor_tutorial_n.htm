<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Metadata Extractor: Extracting Metadata from an Input Media File</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#get_metadata">Retrieving Metadata</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/metadata_extractor_n.htm">Metadata Extractor Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Metadata Extractor: Extracting Metadata from an Input Media File</h1>

<p>This tutorial demonstrates how you can extract metadata from media files.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Metadata Extractor API basics by learning about:</p>

<ul>
    <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the metadata extractor functionality.</p></li>
    <li><a href="#get_metadata">Retrieving Metadata</a>
        <p>Create a metadata extractor handle, bind the handle with a media file, and retrieve the metadata, artwork, lyrics, and frames.</p></li>
</ul>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">You can use the metadata extractor only with audio and video files. The metadata editor does not support image files.</td>
        </tr>
    </tbody>
</table>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the metadata extractor functionality:</p>

<ol>

<li>

<p>To use the functions and data types of the Metadata Extractor API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;metadata_extractor.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;metadata_extractor.h&gt;
</pre>

<p>To ensure that a Metadata Extractor function has been executed properly, make sure that the return value is equal to <span style="font-family: Courier New,Courier,monospace;">METADATA_EXTRACTOR_ERROR_NONE</span>.</p>

</li>

<li>

<p>To work with the Metadata Extractor API, define a handle variable for the metadata extractor:</p>

<pre class="prettyprint">
static metadata_extractor_h g_metadata_h = NULL;
</pre>

<p>This tutorial uses a global variable for the handle.</p>

</li>

<li>

<p>Make sure you have access to the files whose metadata you want to extract, and make sure the files contain metadata, since the Metadata Extractor API only works on files with metadata.</p>

<p>This tutorial uses 2 files: an MP3 audio file and an MP4 video file, which are accessed through their file paths. The following example code uses an internal storage, so you must include the <span style="font-family: Courier New,Courier,monospace;">storage.h</span> header file for the code to work.</p>

<pre class="prettyprint">
int internal_storage_id;
char *internal_music_storage_path;
char *internal_video_storage_path;
char *music_file_name = &quot;test_music.mp3&quot;;
char *video_file_name = &quot;test_video.mp4&quot;;
char *music_test_path;
char *video_test_path;

static bool
storage_cb(int storage_id, storage_type_e type, storage_state_e state,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

void
_get_internal_storage_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int error;
&nbsp;&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;error = storage_foreach_device_supported(storage_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_MUSIC, &amp;path);
&nbsp;&nbsp;&nbsp;&nbsp;if (error != STORAGE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_music_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_VIDEOS, &amp;path);
&nbsp;&nbsp;&nbsp;&nbsp;if (error != STORAGE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_video_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

void
_make_test_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int path_len = 0;

&nbsp;&nbsp;&nbsp;&nbsp;path_len = strlen(internal_music_storage_path) + strlen(music_file_name) + 1;
&nbsp;&nbsp;&nbsp;&nbsp;music_test_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;&nbsp;memset(music_test_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;&nbsp;strncat(music_test_path, internal_music_storage_path, strlen(internal_music_storage_path));
&nbsp;&nbsp;&nbsp;&nbsp;strncat(music_test_path, music_file_name, strlen(music_file_name));

&nbsp;&nbsp;&nbsp;&nbsp;path_len = strlen(internal_video_storage_path) + strlen(video_file_name) + 1;
&nbsp;&nbsp;&nbsp;&nbsp;video_test_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;&nbsp;memset(video_test_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;&nbsp;strncat(video_test_path, internal_video_storage_path, strlen(internal_video_storage_path));
&nbsp;&nbsp;&nbsp;&nbsp;strncat(video_test_path, video_file_name, strlen(video_file_name));
}
</pre>

</li>

</ol>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The Metadata Extractor functions can use both common content in the device storage (internal or external) and private content in your application data.</td>
        </tr>
    </tbody>
</table>

<h2 id="get_metadata" name="get_metadata">Retrieving Metadata</h2>

<p>To retrieve metadata from the file:</p>

<ol>

<li>

<p>Create the metadata extractor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_create()</span> function:</p>

<pre class="prettyprint">
ret = metadata_extractor_create(&amp;g_metadata_h);
</pre>

</li>

<li>

<p>Set the path to the file whose metadata you want to retrieve using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_set_path()</span> function:</p>

<pre class="prettyprint">
ret = metadata_extractor_set_path(g_metadata_h, video_test_path);

/* Or */

ret = metadata_extractor_set_path(g_metadata_h, music_test_path);
</pre>

<p>The function binds the metadata extractor handle (first parameter) with the file specified in the path variable (second parameter).</p>

</li>

<li>

<p>Retrieve the metadata from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_metadata()</span> function. Retrieve each piece of metadata (each metadata attribute) individually.</p>

<p>As parameters, define the metadata extractor handle, the attribute you want to retrieve, and a pointer to the <span style="font-family: Courier New,Courier,monospace;">char</span> variable in which you want to store the attribute value. The possible attributes are defined in the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_attr_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html#ga5b27fedbf5aaa22106f88b831c596872">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html#ga5b27fedbf5aaa22106f88b831c596872">wearable</a> applications).</p>

<p>The following example code retrieves the duration and prints it on the screen. You can retrieve other attributes by defining a different attribute enumerator as the second parameter.</p>

<pre class="prettyprint">
char *value = NULL;

ret = metadata_extractor_get_metadata(g_metadata_h, METADATA_DURATION, &amp;value);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;METADATA_DURATION: %s\n&quot;, value);
if (value != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(value);
&nbsp;&nbsp;&nbsp;&nbsp;value = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">value</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>

</li>

<li>

<p>In case of an audio file, retrieve the artwork from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_artwork()</span> function.</p>

<p>The retrieved artwork information is available in the 3 out parameters, which define the artwork image, image size, and MIME type.</p>

<p>The following example code retrieves the artwork and prints the image size and MIME type on the screen:</p>

<pre class="prettyprint">
int artwork_size = 0;
void *artwork = NULL;
char *artwork_mime = NULL;

ret = metadata_extractor_get_artwork(g_metadata_h, &amp;artwork, &amp;artwork_size, &amp;artwork_mime);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Artwork: size: %d, mime type: %s\n&quot;, artwork_size, artwork_mime);
if (artwork != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(artwork);
&nbsp;&nbsp;&nbsp;&nbsp;artwork = NULL;
}

if (artwork_mime != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(artwork_mime);
&nbsp;&nbsp;&nbsp;&nbsp;artwork_mime = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">artwork</span> and <span style="font-family: Courier New,Courier,monospace;">artwork_mime</span> variables using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variables.</p>

</li>

<li>

<p>In case of an audio file, retrieve the synchronized lyrics from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_synclyrics()</span> function.</p>

<p>The following example code retrieves the synchronized lyrics from index number 1 and prints the time information and lyrics on the screen:</p>

<pre class="prettyprint">
unsigned long time_info = 0;
char *lyrics = NULL;

ret = metadata_extractor_get_synclyrics(g_metadata_h, 1, &amp;time_info, &amp;lyrics);
if (lyrics != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Synclyrics: time_info: %d, lyrics: %s\n&quot;, time_info, lyrics);
&nbsp;&nbsp;&nbsp;&nbsp;free(lyrics);
&nbsp;&nbsp;&nbsp;&nbsp;lyrics = NULL;
}
</pre>

<p>To retrieve the synchronized lyrics index number, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_metadata()</span> function with the <span style="font-family: Courier New,Courier,monospace;">METADATA_SYNCLYRICS_NUM</span> attribute.</p>
<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">lyrics</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>

</li>

<li>

<p>In case of a video file, retrieve frames from the file in one of the following ways:</p>

<ul>
    <li><p>To retrieve a frame without specifying the time when the frame appears, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame()</span> function.</p></li>
    <li><p>To retrieve a frame at a specified time, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame_at_time()</span> function.</p></li>
</ul>

<p>The following example code first retrieves a frame at an unspecified time and prints the frame size, and then retrieves another frame at a specified time and prints its size:</p>

<pre class="prettyprint">
/* Use metadata_extractor_get_frame() */
int frame_size = 0;
void *frame = NULL;

ret = metadata_extractor_get_frame(g_metadata_h, &amp;frame, &amp;frame_size);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Frame: size: %d\n&quot;, frame_size);
if (frame != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(frame);
&nbsp;&nbsp;&nbsp;&nbsp;frame = NULL;
}

/* Use metadata_extractor_get_frame_at_time() */
unsigned long timestamp = 500;

ret = metadata_extractor_get_frame_at_time(g_metadata_h, timestamp, true, &amp;frame, &amp;frame_size);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Frame at %d: size: %d\n&quot;, timestamp, frame_size);
if (frame != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(frame);
&nbsp;&nbsp;&nbsp;&nbsp;frame = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">frame</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>
</li>
<li>

<p>When no longer needed, destroy the metadata extractor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_destroy()</span> function:</p>

<pre class="prettyprint">
metadata_extractor_destroy(g_metadata_h);
</pre>

</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>