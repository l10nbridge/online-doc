<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Player: Playing Multimedia Content from a File, Network, and Memory</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li>Player
				<ul class="toc">
					<li><a href="#init">Initializing the Player</a></li>
					<li><a href="#play_audio">Playing an Audio File</a></li>
					<li><a href="#play_video">Playing a Video File</a></li>
					<li><a href="#release">Stopping the Player and Releasing Resources</a></li>
				</ul>
			</li>
			<li>Multi-player
				<ul class="toc">
					<li><a href="#init_multiplayer">Initializing the Players</a></li>
					<li><a href="#play">Playing Multiple Files Simultaneously</a></li>
				</ul>
			</li>
			<li>Advanced player
				<ul class="toc">
					<li><a href="#set_parameters">Setting Display Parameters</a></li>
					<li><a href="#get_stream">Getting Stream Information</a></li>
					<li><a href="#insert">Inserting Subtitles</a></li>
				</ul>
			</li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/multimedia/player_n.htm">Player Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Player: Playing Multimedia Content from a File, Network, and Memory</h1>

  
<p>This tutorial demonstrates how you can play audio and video files and play multiple audio files simultaneously.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Player API basics by learning about:</p>
<ul>
	
	<li>Player
		<ul>
			 <li><a href="#init">Initialing the Player</a>
			 <p>Initialize the player for use.</p>
			 </li>
			 <li><a href="#play_audio">Playing an Audio File</a>
			  <p>Play an audio file.</p>
			 </li>
			 <li><a href="#play_video">Playing a Video File</a>
			  <p>Play a video file.</p>
			 </li>
			 <li><a href="#release">Stopping the Player and Releasing Resources</a>
			  <p>Stop the player and release the resources allocated to the player.</p>
			 </li>
		</ul>
	</li>
	<li>Multi-player
		<ul>
			 <li><a href="#init_multiplayer">Initializing the Players</a>
			 <p>Initialize the players for use.</p></li>
			 <li><a href="#play">Playing Multiple Files Simultaneously</a>
			  <p>Create multiple players for playing multiple files simultaneously.</p>
			 </li>
		</ul>
	</li>
</ul>

<h2>Follow-up</h2>

<p>Once we have learned the basics of the Player API, we can now move on to more advanced tasks, including:</p>
<ul>
	<li>Advanced player
		<ul>
			 <li><a href="#set_parameters">Setting Display Parameters</a>
			  <p>Set different display parameters.</p>
			 </li>
			  <li><a href="#get_stream">Getting Stream Information</a>
			  <p>Get information about the stream.</p>
			 </li>
			   <li><a href="#insert">Inserting Subtitles</a>
			  <p>Insert subtitles to video files.</p>
			 </li>
		</ul>
	</li>
</ul>

 <h2 id="init" name="init">Initializing the Player</h2>

<p>To initialize the player:</p>
<ol>
<li><p>To use the functions and data types of the Player API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;player.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace">&lt;Elementary.h&gt;</span>, and <span style="font-family: Courier New,Courier,monospace">&lt;glib.h&gt;</span> header files in your application:</p>
<pre class="prettyprint">#include &lt;player.h&gt;
#include &lt;Elementary.h&gt;
#include &lt;glib.h&gt;
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">&lt;Elementary.h&gt;</span> header file is needed for setting the display.</p></li>

<li>
<p>You must get the default path for this tutorial. For the following example code, you must include the <span style="font-family: Courier New,Courier,monospace;">&lt;storage.h&gt;</span> header file.</p>
<pre class="prettyprint">
#define MP3_SAMPLE &quot;SampleAudio.mp3&quot;;
#define MP4_SAMPLE &quot;SampleVideo.mp4&quot;;

int internal_storage_id;
char *audio_storage_path = NULL;
char *video_storage_path = NULL;
char *audio_path = NULL;
char *video_path = NULL;

static bool storage_cb(int storage_id, storage_type_e type, storage_state_e state, const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}

void _get_storage_path()
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;error_code = storage_foreach_device_supported(storage_cb, NULL);
&nbsp;&nbsp;&nbsp;error_code = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_MUSIC, &amp;path);
&nbsp;&nbsp;&nbsp;if (error_code != STORAGE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_VIDEOS, &amp;path);
&nbsp;&nbsp;&nbsp;if (error_code != STORAGE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;}
}

void _set_test_path()
{
&nbsp;&nbsp;&nbsp;int path_len = 0;

&nbsp;&nbsp;&nbsp;path_len = strlen(audio_storage_path) + strlen(MP3_SAMPLE) + 1;
&nbsp;&nbsp;&nbsp;audio_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;memset(audio_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;strncat(audio_path, audio_storage_path, strlen(audio_storage_path));
&nbsp;&nbsp;&nbsp;strncat(audio_path, MP3_SAMPLE, strlen(MP3_SAMPLE));

&nbsp;&nbsp;&nbsp;path_len = strlen(video_storage_path) + strlen(MP4_SAMPLE) + 1;
&nbsp;&nbsp;&nbsp;video_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;memset(video_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;strncat(video_path, video_storage_path, strlen(video_storage_path));
&nbsp;&nbsp;&nbsp;strncat(video_path, MP4_SAMPLE, strlen(MP4_SAMPLE));
}
</pre>
</li>

<li>
<p>Create a player handle and pass it to the <span style="font-family: Courier New,Courier,monospace;">player_create()</span> function. You need the player handle for defining which file to play and with what playback settings.</p>

<pre class="prettyprint">
typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;player_h player;
} 

static void init_base_player(appdata_s *ad) 
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;error_code = player_create(&amp;ad-&gt;player);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create&quot;);
&nbsp;&nbsp;&nbsp;// Do setting more for playback, like setting callback, setting_uri and prepare
}

static void create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Make window
&nbsp;&nbsp;&nbsp;// Make button
&nbsp;&nbsp;&nbsp;// Add callback to button
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button_init, &quot;clicked&quot;, init_base_player, ad);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button_end, &quot;clicked&quot;, release_base_player, ad);                 
&nbsp;&nbsp;&nbsp;// Create an Evas image object for the video surface
}

static void app_create(void *data) 
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}</pre>

</li>

<li>

<p>To receive notifications about playback interruptions, register a callback function using the <span style="font-family: Courier New,Courier,monospace;">player_set_interrupted_cb()</span>
function. The playback is interrupted and the callback triggered when
another multimedia application is run. The player state automatically
changes to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PAUSED</span> or <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span> according to the session policy. To get the current state, use the <span style="font-family: Courier New,Courier,monospace;">player_get_state()</span> function.</p>

<pre class="prettyprint">static void _player_interrupted_cb(player_interrupted_coded_e code, void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;player_state_e state;

&nbsp;&nbsp;&nbsp;player_get_state(ad-&gt;player, &amp;state);
&nbsp;&nbsp; log_print(DLOG_INFO, LOG_TAG, &quot;current player state = %d&quot;, state);
&nbsp;&nbsp;&nbsp;// If the state is PLAYER_STATE_PAUSED, update UI like button
}

static void init_base_player(appdata_s *ad)
{  
&nbsp;&nbsp;&nbsp;// Set an interruption callback if the application wants to know the point
&nbsp;&nbsp;&nbsp;error_code = player_set_interrupted_cb(g_player, _player_interrupted_cb, ad);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create&quot;);
}</pre>

</li>

<li>

<p>To receive a notification when the playback completes, register a callback function using the <span style="font-family: Courier New,Courier,monospace;">player_set_completed_cb()</span> function:</p>

<pre class="prettyprint">static void _player_completed_cb(void *data)
{
&nbsp;&nbsp; dlog_print(DLOG_INFO, &quot;Player&quot;, &quot;Playback End&quot;);
}

static void init_base_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Set a completed callback if the application wants to know the point
&nbsp;&nbsp;&nbsp;error_code = player_set_completed_cb(g_player, _player_completed_cb, ad);

&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to set completed cb&quot;);
}</pre>



</li>

<li>

<p>To receive notifications about player errors during the playback, register a callback function using the <span style="font-family: Courier New,Courier,monospace;">player_set_error_cb()</span> function:</p>

<pre class="prettyprint">static void init_base_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;error_code = player_set_error_cb(g_player, _player_error_cb, NULL);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to set error cb&quot;);
}</pre>

<p>The following example code implements the <span style="font-family: Courier New,Courier,monospace;">_player_error_cb()</span>
callback function. The callback is triggered when the player stops
working due to an error. The callback tries to change the player state
to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span> by calling the <span style="font-family: Courier New,Courier,monospace;">player_stop()</span> function. The callback then removes all other callbacks and resets the player by calling the <span style="font-family: Courier New,Courier,monospace;">player_unprepare()</span> function. At the end, the player is in the <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span> state, so you can release the resources allocated to the player.</p>

<pre class="prettyprint">static void _player_error_cb(int error_code, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;playback failed, error = %x&quot;, error_code);
}</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">Do not call the <span style="font-family: Courier New,Courier,monospace;">player_destroy()</span> function from the called context, as this can cause the <span style="font-family: Courier New,Courier,monospace;">PLAYER_ERROR_INVALID_OPERATION</span> error.</td>
  </tr>
 </tbody>
</table>

</li>

</ol>

 <h2 id="play_audio" name="play_audio">Playing an Audio File</h2>
 
<p>To play an audio file:</p>
<ol>
<li>
<p>Set the audio file path after creating the audio player handler.</p>

<p>To specify the source file to play, use the <span style="font-family: Courier New,Courier,monospace;">player_set_uri()</span> function:</p>

<pre class="prettyprint">error_code = player_set_uri(ad-&gt;player, audio_path);</pre>
</li>

<li>
<p>Prepare the player for playback.</p>

<p>Before you can start the playback, the player has to change its state from <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span> to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span>. To change the state, use the <span style="font-family: Courier New,Courier,monospace;">player_prepare()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare(ad-&gt;player);</pre>

</li>

<li>

<p>Play the audio file.</p>

<p>To start the playback, use the <span style="font-family: Courier New,Courier,monospace;">player_start()</span> function:</p>

<pre class="prettyprint">error_code = player_start(ad-&gt;player);</pre>

</li>

</ol>

 <h2 id="play_video" name="play_video">Playing a Video File</h2>

<p>To play a video file:</p>

<ol>
<li>
<p>Set the video file path.</p>

<p>To specify the source file to play, use the <span style="font-family: Courier New,Courier,monospace;">player_set_uri()</span> function:</p>

<pre class="prettyprint">error_code = player_set_uri(ad-&gt;player, video_path);</pre>

</li>

<li>

<p>Set the display on which the video is played.</p>

<p>To get the correct display handle, use the <span style="font-family: Courier New,Courier,monospace;">GET_DISPLAY()</span> function. To set the display, use the <span style="font-family: Courier New,Courier,monospace;">player_set_display()</span> function with the display handle.</p>

<pre class="prettyprint">error_code = player_set_display(g_player, PLAYER_DISPLAY_TYPE_OVERLAY, GET_DISPLAY(evas_obj));</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note">In case of an overlay surface, when the device orientation changes, the displayed video does not rotate automatically. If you want to change the video orientation according to the device orientation, use the <span style="font-family: Courier New,Courier,monospace;">player_set_display_rotation()</span> function within the <span style="font-family: Courier New,Courier,monospace;">app_device_orientation_cb()</span> callback function used by the application. In case of an Evas surface, the Evas object for the video is rotated by the window manager used by the application, not by the <span style="font-family: Courier New,Courier,monospace;">player_set_display_rotation()</span> function.</td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Prepare the player for playback.</p>

<p>Before you can start the playback, the player has to change its state from <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span> to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span>. To change the state, use the <span style="font-family: Courier New,Courier,monospace;">player_prepare()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare(ad-&gt;player);</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">player_prepare()</span> function works synchronously, so it can be blocked. To prepare the player asynchronously instead, use the <span style="font-family: Courier New,Courier,monospace;">player_prepare_async()</span> function:</p>

<pre class="prettyprint">error_code = player_prepare_async(ad-&gt;player, _prepared_cb, ad);</pre>

</li>

<li id="play_video_2">

<p>Play the video file:</p>

<ol type="a">

<li>

<p>Ensure that the player state has changed to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span>. To check the state, use the <span style="font-family: Courier New,Courier,monospace;">player_get_state()</span> function, and to start the playback, use the <span style="font-family: Courier New,Courier,monospace;">player_start()</span> function:</p>

<pre class="prettyprint">player_state_e state;
do 
{
&nbsp;&nbsp;&nbsp;error_code = player_get_state(ad-&gt;player, &amp;state);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;usleep(1000);
} while (state != PLAYER_STATE_READY);

if (error_code == PLAYER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;error_code = player_start(ad-&gt;player);
}</pre>

</li>

<li>

<p>To start the playback, use the <span style="font-family: Courier New,Courier,monospace;">player_start()</span> function:</p>

<pre class="prettyprint">error_code = player_start(g_player);</pre>
<p>After a successful call of this function, the player state is set to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PLAYING</span> and the playback of the media content stored in the previously specified file starts. The video file plays until you call the <span style="font-family: Courier New,Courier,monospace;">player_stop()</span> or <span style="font-family: Courier New,Courier,monospace;">player_pause()</span> function.</p>
</li>

<li>

<p>If you used the <span style="font-family: Courier New,Courier,monospace;">player_prepare_async()</span> function to prepare the player, use the following callback functions to handle the playback:</p>

<pre class="prettyprint">static void _prepared_cb(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;error_code = player_start(ad-&gt;player);
}</pre>

</li>

</ol>

</li>

</ol>

 <h2 id="release" name="release">Stopping the Player and Releasing Resources</h2>
 
<p>To stop the player when it is no longer needed:</p>
<ol><li>Reset the player using the <span style="font-family: Courier New,Courier,monospace;">player_unprepare()</span> function with the player handle as a parameter. Before using this function, make sure that the player is stopped using the <span style="font-family: Courier New,Courier,monospace;">player_stop()</span> function.<p></p>

<pre class="prettyprint">error_code = player_stop(player);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_stop() = %d&quot;, error_code);

error_code = player_unprepare(player);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_unprepare() = %d&quot;, error_code);
</pre></li>

<li><p>When the player is unprepared, it is in the <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span> state. Destroy the player handle using the <span style="font-family: Courier New,Courier,monospace;">player_destroy()</span> function.</p>

<pre class="prettyprint">error_code = player_destroy(player);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_destroy = %d&quot;, error_code);
</pre></li></ol>

 <h2 id="init_multiplayer" name="init_multiplayer">Initializing the Players</h2>

<p>To initialize the players:</p>
<ol>

<li><p>To use the functions and data types of the Player API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;player.h&gt;</span>, <span style="font-family: Courier New,Courier,monospace">&lt;stdio.h&gt;</span>, and <span style="font-family: Courier New,Courier,monospace">&lt;unistd.h&gt;</span> header files in your application:</p>
<pre class="prettyprint">
#include &lt;player.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
</pre></li>

<li>Declare the variables for player handlers, player states, file paths, playback time, and return value:

<pre class="prettyprint">
static player_h player_1, player_2, player_3;
static player_state_e state_1, state_2, state_3;
static int ret =0;
static char *path_1 = NULL;
static char *path_2 = NULL;
static char *path_3 = NULL;
char *resource_path = NULL;

resource_path = app_get_resource_path();
snprintf(path_1, sizeof(path_1)-1, &quot;%s/sample.3gp&quot;, resource_path);
snprintf(path_2, sizeof(path_2)-1, &quot;%s/test.wav&quot;, resource_path);
snprintf(path_3, sizeof(path_3)-1, &quot;%s/test2.wav&quot;, resource_path);
free(resource_path);

static const int PLAYBACK_TIME=6;</pre>

<p>To ensure that a function has been properly executed, always check its return value. If the return value differs from <span style="font-family: Courier New,Courier,monospace">PLAYER_ERROR_NONE</span>, an error has occurred.</p></li></ol>

 <h2 id="play" name="play">Playing Multiple Files Simultaneously</h2>
 
<p>To play multiple files simultaneously:</p>

<ol>

<li>

<p>To play multiple files at the same time, create a player handle for each file using the <span style="font-family: Courier New,Courier,monospace">player_create()</span> function:</p>

<pre class="prettyprint">ret = player_create(&amp;player_1);

ret = player_create(&amp;player_2);

ret = player_create(&amp;player_3);
</pre>

</li>

<li>

<p>To specify the source files to play, use the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function:</p>

<pre class="prettyprint">ret = player_set_uri(player_1, path_1);

ret = player_set_uri(player_2, path_2);

ret = player_set_uri(player_3, path_3);
</pre>

</li>

<li>

<p>Before you can start the playback, the players have to change their states from <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span>. To change the states, use the <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function:</p>


<pre class="prettyprint">ret = player_prepare (player_1);

ret = player_prepare (player_2);

ret = player_prepare (player_3);
</pre>

</li>

<li>

<p>Play the files:</p>

<ol type="a">

<li>

<p>Ensure that the player states have changed to <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span>. To check the states, use the <span style="font-family: Courier New,Courier,monospace">player_get_state()</span> function. It is recommended to implement a waiting loop for each player:</p>

<pre class="prettyprint">// Wait to prepare player_1
ret = player_get_state(player_1, &amp;state_1);

while(state_1 != PLAYER_STATE_READY)
{
&nbsp;&nbsp;&nbsp;ret = player_get_state(player_1, &amp;state_1);

&nbsp;&nbsp;&nbsp;usleep(1000);
}

// Wait to prepare player_2
ret = player_get_state(player_2, &amp;state_2);

while(state_2 != PLAYER_STATE_READY)
{
&nbsp;&nbsp;&nbsp;ret = player_get_state(player_2, &amp;state_2);

&nbsp;&nbsp;&nbsp;usleep(1000);
}

// Wait to prepare player_3
ret = player_get_state(player_3, &amp;state_3);

while(state_3 != PLAYER_STATE_READY)
{
&nbsp;&nbsp;&nbsp;ret = player_get_state(player_3, &amp;state_3);

&nbsp;&nbsp;&nbsp;usleep(1000);
}</pre>

</li>

<li>

<p>To start the playback, use the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function:</p>

<pre class="prettyprint">ret = player_start(player_1);

ret = player_start(player_2);

ret = player_start(player_3);
</pre>

</li>

</ol>

</li>

<li>
<p>To reset the players and destroy the player handles, use the <span style="font-family: Courier New,Courier,monospace">player_unprepare()</span> and <span style="font-family: Courier New,Courier,monospace">player_destroy()</span> functions, respectively:</p>

<pre class="prettyprint">ret = player_unprepare(player_1);
ret = player_destroy(player_1);

ret = player_unprepare(player_2);
ret = player_destroy(player_2);

ret = player_unprepare(player_3);
ret = player_destroy(player_3);
</pre>

</li>

</ol>

 <h2 id="set_parameters" name="set_parameters">Setting Display Parameters</h2>

<p>To set the display parameters:</p>
<ol>
	<li><a href="#init">Create the player handle</a> and <a href="#play_video">prepare the player</a>.</li>
	<li>Set the parameters:
	<ul>
		<li>Set the display.
		<ol type="a">
			<li><p>To play a video, set the display on which the video is rendered. Get the display handle from the window with the <span style="font-family: Courier New,Courier,monospace;">GET_DISPLAY()</span> function, and set the display type.</p>
			<p>The display is created from the <span style="font-family: Courier New,Courier,monospace;">player_set_display()</span> function called with the player handle, a <span style="font-family: Courier New,Courier,monospace;">player_display_type_e</span> display type, and a <span style="font-family: Courier New,Courier,monospace;">player_display_h</span> display handle.</p>
			<p>After successfully calling this function, the player is connected to the display handle.</p>
			<pre class="prettyprint">player_display_h display;
			
error_code = player_set_display(player, PLAYER_DISPLAY_TYPE_OVERLAY, GET_DISPLAY(evas_obj));
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_set_display = %d&quot;, error_code);</pre>
			</li>


			<li><p>When the source data and the display are set and the player status is <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span>, invoke the <span style="font-family: Courier New,Courier,monospace;">player_start()</span> function:</p>
<pre class="prettyprint">error_code = player_start(player);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_start = %d&quot;, error_code);</pre>
			<p>After a successful call of this function, the player state is set to <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PLAYING</span>. The playback of the media contents stored in the previously specified file starts. The video file plays until the <span style="font-family: Courier New,Courier,monospace;">player_stop()</span> or <span style="font-family: Courier New,Courier,monospace;">player_pause()</span> function is called.</p></li></ol></li>

<li>Set the display visibility.
			<ol type="a"><li><p>Before setting the visibility of the x surface video display, check that it has not already been done by using the <span style="font-family: Courier New,Courier,monospace;">player_is_display_visible()</span> function:</p>
<pre class="prettyprint">bool is_visible;

error_code = player_is_display_visible(player, &amp;is_visible);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_is_display_visible = %d&quot;, error_code);</pre></li>


			<li><p>If the <span style="font-family: Courier New,Courier,monospace;">is_visible</span> variable is set to <span style="font-family: Courier New,Courier,monospace;">false</span>, the visibility of the display can be set using the <span style="font-family: Courier New,Courier,monospace;">player_set_display_visible()</span> function:</p>

<pre class="prettyprint">if (!is_visible) 
{
&nbsp;&nbsp;&nbsp;error_code = player_set_display_visible(player, true);
&nbsp;&nbsp; dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_set_display_visible = %d&quot;, error_code);
}
</pre></li></ol></li>		

<li>Set the display mode.
			<ol type="a"><li><p>Check the possibility of using the video display mode using the <span style="font-family: Courier New,Courier,monospace;">player_is_display_mode_changeable()</span> function:</p>

<pre class="prettyprint">bool is_changeable;

error_code = player_is_display_mode_changeable(player, &amp;is_changeable);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_is_display_mode_changeable = %d&quot;, error_code);
</pre></li>
			<li><p>If the <span style="font-family: Courier New,Courier,monospace;">is_changeable</span> variable is set to <span style="font-family: Courier New,Courier,monospace;">true</span>, set the display mode using the <span style="font-family: Courier New,Courier,monospace;">player_set_display_mode()</span> function. The <span style="font-family: Courier New,Courier,monospace;">player_display_mode_e</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__DISPLAY__MODULE.html#gaafcf6f7487d8cb376e1851a6e1253f3a">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__DISPLAY__MODULE.html#gaafcf6f7487d8cb376e1851a6e1253f3a">wearable</a> applications) defines the available display modes.</p>
<pre class="prettyprint">if (is_changeable)
{
&nbsp;&nbsp;&nbsp;error_code = player_set_display_mode(player, PLAYER_DISPLAY_MODE_FULL_SCREEN);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_set_display_mode = %d&quot;, error_code);
}</pre></li></ol></li>

<li>Set the display rotation.
<p>Set the display rotation using the <span style="font-family: Courier New,Courier,monospace;">player_set_display_rotation()</span> function. The <span style="font-family: Courier New,Courier,monospace;">player_display_rotation_e</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__DISPLAY__MODULE.html#gab8c4c170d4b2628a09831edc8d652302">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__DISPLAY__MODULE.html#gab8c4c170d4b2628a09831edc8d652302">wearable</a> applications) defines the available display rotations.</p>

<pre class="prettyprint">error_code = player_set_display_rotation(player, PLAYER_DISPLAY_ROTATION_90);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_set_display_mode = %d&quot;, error_code);</pre></li></ul></li></ol>

			
 <h2 id="get_stream" name="get_stream">Getting Stream Information</h2>

<p>To get stream information:</p>
<ol>
<li><a href="#init">Create the player handle</a>, <a href="#play_video">prepare the player</a>, and <a href="#set_parameters">set the display</a>.

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">To get the stream information, the player state must be either <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PLAYING</span> or <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PAUSED</span>.</td>
</tr>
</tbody>
</table> </li>
<li>Get the stream information
<ul><li>Get the video size.

<p>Get the width and height of the video display using the <span style="font-family: Courier New,Courier,monospace;">player_get_video_size()</span> function:</p>

<pre class="prettyprint">int width, height;

error_code = player_get_video_size(player, &amp;width, &amp;height);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_is_display_visible = %d&quot;, error_code);</pre></li>

<li>Get the duration.
<p>Get the total media running time using the <span style="font-family: Courier New,Courier,monospace;">player_get_duration()</span> function. The duration is returned in milliseconds.</p>

<pre class="prettyprint">int duration;

error_code = player_get_duration(player, &amp;duration);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_duration = %d&quot;, error_code);</pre></li>

<li>Get the video stream info.
<p>Get the video stream information using the <span style="font-family: Courier New,Courier,monospace;">player_get_video_stream_info()</span> function. The function returns the number of frames per second and the video bit rate (in Hz).</p>

<pre class="prettyprint">int fps, bit_rate;

error_code = player_get_video_stream_info(player, &amp;fps, &amp;bit_rate);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_ get_video_stream_info = %d&quot;, error_code);
</pre></li>

<li>Get the codec info.
<p>Get information about the video codec using the <span style="font-family: Courier New,Courier,monospace;">player_get_codec_info()</span> function:</p>

<pre class="prettyprint">char *video_codec;

error_code = player_get_codec_info(player, NULL, &amp;video_codec);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_codec_info = %d&quot;, error_code);
</pre></li>

<li>Get the content info.
<p>Get information about the author, album, artist, genre, title, and year using the <span style="font-family: Courier New,Courier,monospace;">get_info_content()</span> function. The values are specified by the <span style="font-family: Courier New,Courier,monospace;">player_content_info_e</span> enumeration.</p>

<pre class="prettyprint">char *album, *artist, *author, *genre, *title, *year;

error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_ALBUM, &amp;album);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info album = %d&quot;, album);
error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_ARTIST, &amp;artist);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info artist = %d&quot;, artist);
error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_AUTHOR, &amp;author);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info author = %d&quot;, author);
error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_GENRE, &amp;genre);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info genre = %d&quot;, genre);
error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_TITLE, &amp;title);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info title = %d&quot;, title);
error_code = player_get_content_info(player, PLAYER_CONTENT_INFO_YEAR, &amp;year);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_get_content_info year = %d&quot;, year);
</pre>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The values must be released by the <span style="font-family: Courier New,Courier,monospace;">free()</span> function.</td>
</tr>
</tbody>
</table> </li>

<li>Get the album art.
<p>Get the album art using the <span style="font-family: Courier New,Courier,monospace;">player_get_album_art()</span> function. It returns the encoded artwork image and size.</p>

<pre class="prettyprint">void *album_art;
int size;

error_code = player_get_album_art(player, &amp;album_art, &amp;size);
dlog_print(DLOG_INFO, LOG_TAG, &quot;player_set_display_mode = %d&quot;, error_code);
</pre></li></ul></li></ol>

 <h2 id="insert" name="insert">Inserting Subtitles</h2>

<p>To insert subtitles to a video file:</p>
<ol><li><a href="#init">Create the player handle</a>.</li>
<li><p>To set the subtitle path, use the <span style="font-family: Courier New,Courier,monospace;">player_set_subtitle_path()</span> function:</p>
<pre class="prettyprint">#define SUBTITLE &quot;subtitles_test_file.srt&quot;

char *data_path = app_get_data_path();
int path_len = strlen(data_path) + 10;
char *path = malloc(path_len);
strncat(path, data_path, path_len);
strncat(path, SUBTITLE, path_len);

error_code = player_set_subtitle_path(player, path);
dlog_print(DLOG_ERROR, LOG_TAG, &quot;player_set_subtitle_path() = %d&quot;, error_code);
free(path);
</pre>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The subtitle path can be set when the player state is <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_IDLE</span>, <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_READY</span>, <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PLAYING</span>, or <span style="font-family: Courier New,Courier,monospace;">PLAYER_STATE_PAUSED</span>.</td>
</tr>
</tbody>
</table> 

<p>After setting the subtitle path, <a href="#play_video">set video display and prepare the player</a>. You can <a href="#play_video_2">play the video file</a> as usual, by starting the player.</p></li></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
