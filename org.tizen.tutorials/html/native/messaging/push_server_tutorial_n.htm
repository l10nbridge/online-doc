<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Push Server: Sending Push Notifications</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n_optional.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#send">Sending Push Notifications</a></li>
			<li><a href="#error_codes">Handling Error Codes</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
		<li><a href="../../../../org.tizen.guides/html/native/messaging/push_n.htm">Push Guide</a></li>
		<li><a href="push_tutorial_n.htm">Push Tutorial</a></li>
		<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MESSAGING__PUSH__PUBLIC__MODULE.html">Push API for Mobile Native</a></li>
		<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MESSAGING__PUSH__PUBLIC__MODULE.html">Push API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Push Server: Sending Push Notifications</h1>


<p>This tutorial demonstrates how you can send push notifications from the application server to an application.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Push API basics by learning about:</p>
	<ul>
		<li><a href="#send">Sending Push Notifications</a>
		<p>Send push notifications from the application server to an application.</p></li>
		<li><a href="#error_codes">Handling Error Codes</a>
		<p>Use error codes to identify and handle failures.</p></li>
	</ul>


 <h2 id="send" name="send">Sending Push Notifications</h2>

<p>Using the Tizen Push APIs, you can send notifications to your applications installed in Tizen devices. The basics of sending push notification are covered in the <a href="push_tutorial_n.htm">Push</a> tutorial. This use case covers more advanced information, such as sending multiple notifications in one request and sending multicast notifications.</p>

<p>To send push notifications:</p>

<ol>
<li>Determine the RQM server.
<p>The request manager (RQM) servers collect your push notifications before sending them to the applications. The RQM server must be chosen based on the first 2 digits of the registration ID.</p>

<table>
<caption>Table: RQM servers</caption>
<tbody>
<tr>
 <th>Prefix of the <span style="font-family: Courier New,Courier,monospace;">regId</span></th>
 <th>Region</th>
 <th>URL</th>
</tr>
<tr>
 <td>00</td>
 <td>US East</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://useast.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>02</td>
 <td>Asia Pacific Southeast</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apsoutheast.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>03</td>
 <td>EU West</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://euwest.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>04</td>
 <td>Asia Pacific Northeast</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apnortheast.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>05</td>
 <td>Korea</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apkorea.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>06</td>
 <td>China</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apchina.push.samsungosp.com.cn:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>50</td>
 <td>US East</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://useast.gateway.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>52</td>
 <td>Asia Pacific Southeast</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apsoutheast.gateway.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>53</td>
 <td>EU West</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://euwest.gateway.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>54</td>
 <td>Asia Pacific Northeast</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apnortheast.gateway.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>55</td>
 <td>Korea</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apkorea.gateway.push.samsungosp.com:8090/spp/pns/api/push</span></td>
</tr>
<tr>
 <td>56</td>
 <td>China</td>
 <td><span style="font-family: Courier New,Courier,monospace;">https://apchina.gateway.push.samsungosp.com.cn:8090/spp/pns/api/push</span></td>
</tr>
</tbody>
</table>

<p>For example, if the registration ID of the application that you want to send a notification to begins with 04, the URL of the RQM server must be <span style="font-family: Courier New,Courier,monospace;">https://apnortheast.push.samsungosp.com:8090/spp/pns/api/push</span>.</p>
</li>

<li>Create the notification message.
<p>A message is one of the fields that constitute a notification. The message field contains not only the message to show in the quick panel on the device, but also the behaviors that the device must take when receiving the notification. The message field is a string that consists of key-value pairs. The available pair options are given in the following table.</p>

<table>
<caption>Table: Message field key-value pairs</caption>
<tbody>
<tr>
 <th>Key</th>
 <th>Value</th>
 <th>Description</th>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">action</span></td>
 <td><span style="font-family: Courier New,Courier,monospace;">ALERT</span>: Store the message and alert the user.
	<p><span style="font-family: Courier New,Courier,monospace;">SILENT</span>: Store the message without alerting the user.</p>
	<p><span style="font-family: Courier New,Courier,monospace;">DISCARD</span>: Discard the message.</p>
	<p><span style="font-family: Courier New,Courier,monospace;">LAUNCH</span>: Forcibly launch the application and deliver the notification.</p></td>
 <td>Action to be performed if the application is not running. If no action is defined, the default behavior is <span style="font-family: Courier New,Courier,monospace;">SILENT</span>.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">alertMessage</span></td>
 <td>Up to 127 bytes</td>
 <td>Alert message shown to the user in the quick panel. If the action is not set as <span style="font-family: Courier New,Courier,monospace;">ALERT</span>, this value is meaningless.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">badgeOption</span></td>
 <td><span style="font-family: Courier New,Courier,monospace;">INCREASE</span>: Increase the badge number by the given value.
	<p><span style="font-family: Courier New,Courier,monospace;">DECREASE</span>: Decrease the badge number by the given value.</p>
	<p><span style="font-family: Courier New,Courier,monospace;">SET</span>: Set badge number to the given value.</p></td>
 <td>Option for updating the icon badge number. If the action is set as <span style="font-family: Courier New,Courier,monospace;">DISCARD</span>, the <span style="font-family: Courier New,Courier,monospace;">badgeOption</span> is ignored. If the badge option is not included, the icon badge number remains unchanged.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">badgeNumber</span></td>
 <td>0-999</td>
  <td>-</td>
</tr>
</tbody>
</table>

<p>For example, to show a &quot;Hi&quot; message in the quick panel and increase the badge count by 1 when the notification arrives at the device, the message field of the notification must be the following:</p>

<pre class="prettyprint">
&quot;badgeOption=INCREASE&amp;badgeNumber=1&amp;action=ALERT&amp;alertMessage=Hi&quot;
</pre>

<p>The message field takes effect only when the application is not running (more precisely, when the application is not connected to the push service). If a notification with the above message field arrives at the device where the application is running, the push service delivers the notification directly to the application. It does not show the &quot;Hi&quot; message in the quick panel or increase the badge count.</p>
</li>

<li>Use the Rest APIs for sending push notifications.
<ul>
<li id="single_req" name="single_req">Single request

<p>With the created message field, you can construct a notification using a JSON query and send it to the RQM server using the POST method. The following list contains the details:</p>
<ul>
<li>URI: URI of the RQM server chosen based on the first 2 digits of the registration ID</li>
<li>Method: POST</li>
<li>Data: JSON </li>
<li>Description: Request a notification push from the push server to the push service</li>
<li>Note: The total request message body must be less than the system default value, 200 kb. If not, &quot;3034 – error of too long chuned message data&quot; is returned. The system default value can be changed as needed.</li>
<li>Header

<p>There are 2 required fields: <span style="font-family: Courier New,Courier,monospace;">appID</span> and <span style="font-family: Courier New,Courier,monospace;">appSecret</span>.</p>

<p>The fields are given when you register the application, and they are used for application authentication. If either is missing, the push server rejects the request and returns &quot;3046 – error of application authentication&quot; error. Put these 2 parameters on the request header.</p>

</li>
<li>Arguments
<table>
<caption>Table: Arguments</caption>
<tbody>
<tr>
 <th>Key</th>
 <th>Description</th>
 <th>Additional information</th>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">encoding</span></td>
 <td>Encoding defines how the <span style="font-family: Courier New,Courier,monospace;">regId</span> is encoded.
<p>For most cases, the push server issues the <span style="font-family: Courier New,Courier,monospace;">regId</span> as a hex string by default, but if third-party providers state that they use the base64 encoding for the <span style="font-family: Courier New,Courier,monospace;">regId</span> at the application registration time, the <span style="font-family: Courier New,Courier,monospace;">regId</span> is base64-encoded.</p>
<p>If the <span style="font-family: Courier New,Courier,monospace;">regId</span> is base64-encoded, use the <span style="font-family: Courier New,Courier,monospace;">&quot;base64&quot;</span> value for this field. Otherwise, leave this field blank to allow the push server to handle the <span style="font-family: Courier New,Courier,monospace;">regId</span> as a hex string.</p></td>
 <td><ul><li>Optional</li>
 <li>Type: string</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul></td>
</tr>

<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">regID</span></td>
 <td>Distinguish a recipient from other recipients by assigning a unique registration ID to each recipient. <p>The registration ID is assigned when the application is installed in a device and marked to use an application service.</p>
<p>The current registration ID passing policy is as follows (it can change in the future):</p>
<ol type="a">
<li>The preloaded push service connects to the push server and registers the application.</li>
<li>The push server returns the registration ID to the push service.</li>
<li>The push service passes the ID to the application.</li>
<li>The push server passes the registration ID to an application server.
<p>In other applications, the application passes the registration ID to the application server.</p>
</li>
</ol></td>
 <td>
 <ul><li>Required</li>
 <li>Type: string</li></ul></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">requestID</span></td>
 <td>An application server needs to assign a request ID to each request. It enables you to distinguish one request from the others.</td>
 <td><ul><li>Required</li>
 <li>Type: string</li></ul></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">sender</span></td>
 <td>Information of the user who sends the notification.</td>
 <td>
 <ul><li>Optional</li>
 <li>Type: string</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">message</span></td>
 <td>The message the sender wants to deliver. It can be a multibyte character.
 <p>The message goes from an application server through the push server and push service to the application, which can handle the message.</p>
 <p>Maximum message length must be less than 2 kb. Make sure that if there is no message and <span style="font-family: Courier New,Courier,monospace;">appData</span>, the push server rejects the message and returns an error.</p></td>
 <td>
<ul><li>Conditionally mandatory
(if <span style="font-family: Courier New,Courier,monospace;">appData</span> is <span style="font-family: Courier New,Courier,monospace;">NULL</span>, this field is required)</li>
 <li>Type: string</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul>
</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">appData</span></td>
 <td>Applications can use this field to carry their own data. The handling of this data depends on the type defined with the <span style="font-family: Courier New,Courier,monospace;">type</span> key.
 <p>Make sure that if there is no message and no <span style="font-family: Courier New,Courier,monospace;">appData</span>, the push server rejects the message and returns an error.</p></td>
 <td>
 <ul><li>Conditionally mandatory (if message is <span style="font-family: Courier New,Courier,monospace;">NULL</span>, this field is required)</li>
 <li>Type: string</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul>
 </td>
</tr>

<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">reliableOption</span></td>
 <td>The push server guarantees reliable message delivery if the <span style="font-family: Courier New,Courier,monospace;">reliableOption</span> is set. The possible options are:
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace;">NoReliable</span>: Do not send any acknowledgment back to an application server and do not store the notification in the push server if the push service did not receive the notification.</li>
  <li><span style="font-family: Courier New,Courier,monospace;">Transport</span>: Send an acknowledgment back to the application server when the push service receives the notification.</li>
 </ul>
 <p>This is an optional field, and if it does not exist, the server applies its default value (<span style="font-family: Courier New,Courier,monospace;">Transport</span>). An acknowledgment at this point does not mean a response to the notification request, but an acknowledgment that the push service has received the notification. When the push service receives the notification, the push server sends this acknowledgment to the application server in a JSON format through HTTP.</p>
 </td>
 <td>
   <ul><li>Optional</li>
 <li>Type: string</li>
 <li>Default: transport</li></ul>
 </td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">sessionInfo</span></td>
 <td>Connection information of an application. Third-party applications can define this field by themselves.</td>
 <td>
    <ul><li>Optional</li>
 <li>Type: string</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul>
 </td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace;">timeStamp</span></td>
 <td>Server time in milliseconds when a notification request has been made.</td>
 <td>
     <ul><li>Optional</li>
 <li>Type: long</li>
 <li>Default: <span style="font-family: Courier New,Courier,monospace;">NULL</span></li></ul>
 </td>
</tr>
</tbody>
</table>
</li>
</ul>
<p>The following examples illustrate the notification:</p>
<ul>
<li>Example header:
<pre class="prettyprint">
appID: 1234567890987654
appSecret: dYo/o/m11gmWmjs7+5f+2zLNVOc=
</pre></li>

<li>Example request:
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;encoding&quot;: &quot;base64&quot; /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&quot;sender&quot;: &quot;oscal&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: 0 /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;message&quot;: &quot;badgeOption=INCREASE&amp;badgeNumber=1&amp;action=ALERT&amp;alertMessage=Hi&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;appData&quot;: &quot;{id:asdf&amp;passwd:1234}&quot;, /* Optional, (Opaque) */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;sessionInfo&quot;: &quot;002002&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&quot;timeStamp&quot;: 1234567890, /* Optional */
}
</pre>
</li>

<li>Example response:
<p>If the push server receives a notification request, the server returns a JSON string that contains the <span style="font-family: Courier New,Courier,monospace;">regID</span>, <span style="font-family: Courier New,Courier,monospace;">requestID</span>, status code, and status message. If the request contains a malformed JSON format, requests are not processed and are returned without the <span style="font-family: Courier New,Courier,monospace;">regID</span> and <span style="font-family: Courier New,Courier,monospace;">requestID</span> values. If the request is of the JSON format but has invalid data, no requests are processed and are considered as an error.</p>
<p>The response message only shows whether receiving the notification request was successful. The response message does not deal with whether the push service receives the notification. The order of the response message is the same as the request message order.</p>
<ul>
<li>
<p>The following example shows a response message when the request is successful:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when the request fails due to malformation:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3023,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of json mapping exception&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when the request fails due to abnormal data:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3008,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of not registered regID&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">In the above example, the 3008 error code means that the regID does not exist in the push server. It happens when your application of that particular regID was uninstalled or disabled by the user, and consequently the regID must be removed from your application server. When the application is reinstalled or enabled, it must repeat the <a href="push_tutorial_n.htm#registration">registration process</a> and send a new regID to your application server.</td>
        </tr>
    </tbody>
</table>
</li>
</ul>
</li>
</ul>
</li>
<li id="multi_req" name="multi_req">Multiple request
<p>You can construct a multiple request in a Rest API call. Currently, this feature is not supported for the registration IDs starting with 5.</p>
<p>The following list contains the details:</p>
<ul>
<li>URI: URI of the RQM server chosen based on the first 2 digits of the registration ID</li>
<li>Method: POST</li>
<li>Data: JSON </li>
<li>Description: Request a notification push from the push server to the push service</li>
<li>Argument: See the <a href="#single_req">single request</a></li>
<li>Note: The total request message body must be less than the system default value, 200 kb. If not, &quot;3034 – error of too long chuned message data&quot; is returned. The system default value can be changed as needed.</li>
<li>Example header:
<pre class="prettyprint">
appID: 1234567890987654
appSecret: dYo/o/m11gmWmjs7+5f+2zLNVOc=
</pre></li>

<li>Example request:
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;messages&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;encoding&quot;: &quot;base64&quot; /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sender&quot;: &quot;oscal&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: 0 /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;message&quot;: &quot;example&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;appData&quot;: &quot;{id:asdf&amp;passwd:1234}&quot;, /* Optional, (Opaque) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;reliableOption&quot;: &quot;Transport&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sessionInfo&quot;: &quot;192.168.0.1-8080-12345567&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;timeStamp&quot;: 1234567890, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;encoding&quot;: &quot;base64&quot; /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab234567&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000002&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sender&quot;: &quot;oscal&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: 0 /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;message&quot;: &quot;example&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;appData&quot;: &quot;{id:asdf&amp;passwd:1234}&quot;, /* Optional, (Opaque) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;reliableOption&quot;: &quot;Transport&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sessionInfo&quot;: &quot;192.168.0.1-8080-12345567&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;timeStamp&quot;: 1234567890, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;]}
}
</pre>
</li>

<li>Example response:
<ul>
<li>
<p>The following example shows a response message when the request is successful:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab234567&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000002&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when the request fails due to malformation:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3023,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of json mapping exception&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when some parts of the multiple request have failed and the others have not:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab234567&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000002&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3008,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of not registered regID&quot;+&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
</ul>
</li>
</ul>
</li>

<li id="multicast" name="multicast"> Multicast
<p>You can construct a multicast to send a push notification to multiple applications. Currently, this feature is not supported for the registration IDs starting with 5.</p>
<p>The following list contains the details:</p>
<ul>
<li>URI: URI of the RQM server chosen based on the first 2 digits of the registration ID</li>
<li>Method: POST</li>
<li>Data: JSON </li>
<li>Description: Request a notification push from the push server to the push service</li>
<li>Argument: See the <a href="#single_req">single request</a></li>
<li>Note: The total request message body must be less than the system default value, 200 kb. If not, &quot;3034 – error of too long chuned message data&quot; is returned. The system default value can be changed as needed.</li>
<li>Example header:
<pre class="prettyprint">
appID: 1234567890987654
appSecret: dYo/o/m11gmWmjs7+5f+2zLNVOc=
</pre></li>

<li>Example request:
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;messages&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;encoding&quot;: &quot;base64&quot; /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: [&quot;ab123456&quot;, &quot;ab234567&quot;, &quot;ab345678&quot;]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sender&quot;: &quot;oscal&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: 0 /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;message&quot;: &quot;example&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;appData&quot;: &quot;{id:asdf&amp;passwd:1234}&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sessionInfo&quot;: &quot;192.168.0.1-8080-12345567&quot;, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;timeStamp&quot;: 1234567890, /* Optional */
&nbsp;&nbsp;&nbsp;&nbsp;]}
}
</pre>
</li>

<li>Example response:
<ul>
<li>
<p>The following example shows a response message when the request is successful:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab234567&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000002&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab345678&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000002&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when the request fails due to malformation:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3023,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of json mapping exception&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
<li>
<p>The following example shows a response message when some parts of the multicast request have failed and the others have not:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&quot;results&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;[{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab123456&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 1000,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;Success&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab234567&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3008,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of not registered regID&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;regID&quot;: &quot;ab345678&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;requestID&quot;: &quot;0000001&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusCode&quot;: 3013,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;statusMsg&quot;: &quot;error of impossible to enqueue&quot;
&nbsp;&nbsp;&nbsp;&nbsp;}]
}
</pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>

<h2 id="error_codes" name="error_codes">Handling Error Codes</h2>

<p>If sending a push notification request fails for some reason, the response message contains an error code. Use the following table to identify the reason for the failure and take appropriate action.</p>

<table>
<caption>Table: Push notification error codes</caption>
<tbody>
<tr>
 <th>Status code</th>
 <th>Basic status message</th>
</tr>
<tr>
 <td>1000</td>
 <td>Success</td>
</tr>
<tr>
 <td>1001</td>
 <td>Failed</td>
</tr>
<tr>
 <td>1002</td>
 <td>Expired</td>
</tr>
<tr>
 <td>3001</td>
 <td>Error of unknown reason</td>
</tr>
<tr>
 <td>3002</td>
 <td>Internal server error</td>
</tr>
<tr>
 <td>3003</td>
 <td>Error of no appId field</td>
</tr>
<tr>
 <td>3004</td>
 <td>Error of no deviceToken field</td>
</tr>
<tr>
 <td>3005</td>
 <td>Error of no regID field</td>
</tr>
<tr>
 <td>3006</td>
 <td>Error of no requestID field</td>
</tr>
<tr>
 <td>3007</td>
 <td>Error of at least either message or appData is needed</td>
</tr>
<tr>
 <td>3008</td>
 <td>Error of not registered regID</td>
</tr>
<tr>
 <td>3009</td>
 <td>Error of not registered appID</td>
</tr>
<tr>
 <td>3010</td>
 <td>Error of malformed notification request data</td>
</tr>
<tr>
 <td>3011</td>
 <td>Error of fatal problems with mapping of content</td>
</tr>
<tr>
 <td>3012</td>
 <td>Error of insufficient field</td>
</tr>
<tr>
 <td>3013</td>
 <td>Error of impossible enqueue</td>
</tr>
<tr>
 <td>3014</td>
 <td>Error of notification to cancel is not in queue or already sent</td>
</tr>
<tr>
 <td>3015</td>
 <td>Error of I/O produced by failed, interrupted I/O operation or unknown reason</td>
</tr>
<tr>
 <td>3016</td>
 <td>Error of not supporting requested URI</td>
</tr>
<tr>
 <td>3017</td>
 <td>Error of not supporting requested method</td>
</tr>
<tr>
 <td>3018</td>
 <td>Error of notification data contains unreadable data or <span style="font-family: Courier New,Courier,monospace;">NULL</span></td>
</tr>
<tr>
 <td>3019</td>
 <td>Error of containing abnormal data</td>
</tr>
<tr>
 <td>3020</td>
 <td>Error of not supported reliability option</td>
</tr>
<tr>
 <td>3021</td>
 <td>Error of bad padding exception</td>
</tr>
<tr>
 <td>3022</td>
 <td>Error of json parse exception</td>
</tr>
<tr>
 <td>3023</td>
 <td>Error of json mapping</td>
</tr>
<tr>
 <td>3024</td>
 <td>Error of illegal blocksize</td>
</tr>
<tr>
 <td>3025</td>
 <td>Error occurred while decoding regID</td>
</tr>
<tr>
 <td>3026</td>
 <td>Error of no secret key field</td>
</tr>
<tr>
 <td>3027</td>
 <td>Error of not authenticated application</td>
</tr>
<tr>
 <td>3028</td>
 <td>Error of unsupported encoding type</td>
</tr>
<tr>
 <td>3029</td>
 <td>Error of unparseable request type</td>
</tr>
<tr>
 <td>3030</td>
 <td>Error of message length excess. message length is allowed up to 2kb</td>
</tr>
<tr>
 <td>3031</td>
 <td>Error of unsupported connectionTerm</td>
</tr>
<tr>
 <td>3032</td>
 <td>Error of not supporting chunked request body</td>
</tr>
<tr>
 <td>3033</td>
 <td>Error of illegal expiry date</td>
</tr>
<tr>
 <td>3034</td>
 <td>Error of illegal delay date</td>
</tr>
<tr>
 <td>3035</td>
 <td>Error of too long chuned message data</td>
</tr>
<tr>
 <td>3036</td>
 <td>Error of empty multiple request</td>
</tr>
<tr>
 <td>3037</td>
 <td>Error of notification key generation</td>
</tr>
<tr>
 <td>3038</td>
 <td>Error of create application</td>
</tr>
<tr>
 <td>3039</td>
 <td>Error of delete application</td>
</tr>
<tr>
 <td>3040</td>
 <td>Error of read application</td>
</tr>
<tr>
 <td>3041</td>
 <td>Error of update application</td>
</tr>
<tr>
 <td>3042</td>
 <td>Error of invalid timeStamp</td>
</tr>
<tr>
 <td>3043</td>
 <td>Error of invalid type</td>
</tr>
<tr>
 <td>3044</td>
 <td>Error of not registered application</td>
</tr>
<tr>
 <td>3045</td>
 <td>Error of application authentication failed</td>
</tr>
<tr>
 <td>3046</td>
 <td>Error of not allowed to use Push Server</td>
</tr>
</tbody>
</table>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
</html>