<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Messages: Creating and Sending SMS and MMS Messages</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>		
			<li><a href="#init">Initializing the Messages Service</a></li>
			<li><a href="#fetching">Fetching Messages from a Specified Message Box</a></li>
			<li><a href="#sending">Sending SMS or MMS Messages</a></li>
		</ul>       
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/messaging/messages_n.htm">Messages Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">Messages API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">Messages API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Messages: Creating and Sending SMS and MMS Messages</h1>

  
<p>This tutorial demonstrates how you can send SMS and MMS messages, and fetch messages from a specified message box.</p>

        <h2>Warm-up</h2>
        <p>Become familiar with the Messages API basics by learning about:</p>
        <ul>
            <li><a href="#init">Initializing the Messages Service</a>
			<p>Initialize the Messages service for use.</p></li>
			<li><a href="#fetching">Fetching Messages from a Specified Message Box</a>
			<p>Fetch all SMS or MMS messages from a given message box (such as Inbox or the sent items).</p></li>
			<li><a href="#sending">Sending SMS or MMS Messages</a>
			<p>Create and send a message, and add attachments to MMS messages.</p></li>
        </ul>
 
<h2 id="prerequisites">Prerequisites</h2>

<p>To use the Messages API, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/message.read&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/message.write&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
 
 <h2 id="init" name="init">Initializing the Messages Service</h2>

<p>To initialize the Messages service for use:</p>

<ol><li><p>To use the functions and data types of the Messages API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MESSAGING__MESSAGES__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;messages.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;messages.h&gt;
</pre></li>
<li><p>The Messages service works like a client-service architecture. In this architecture, a Tizen application is the client side and has to connect to the service before using the Messages API.</p>
<p>Establish a connection using the <span style="font-family: Courier New,Courier,monospace;">messages_open_service()</span> function:</p>

<pre class="prettyprint">
static messages_service_h service_handle = NULL;
int error_code;

error_code = messages_open_service(&amp;service_handle);

if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li><p>When a connection with the Messages service is no longer needed (or the application is exiting), call the <span style="font-family: Courier New,Courier,monospace;">messages_close_service()</span> function for proper connection closing:</p>

<pre class="prettyprint">
messages_close_service(service_handle);
service_handle = NULL;
</pre></li></ol>

 <h2 id="fetching" name="fetching">Fetching Messages from a Specified Message Box</h2>

<p>To fetch messages from a message box, use the <span style="font-family: Courier New,Courier,monospace;">messages_foreach_message()</span> function with the appropriate parameters. One of these parameters is the callback function called for each message matching the search criteria.</p>

<p>To fetch messages:</p>

<ol><li>Define the message search callback function.
<ol type="a">
<li><p>Within the callback, to print the message content (or to show it to the user in any other way), extract the message text, address, and type:</p>
<pre class="prettyprint">
char *message = NULL, *address = NULL;
messages_recipient_type_e rtype;
int error_code = MESSAGES_ERROR_NONE;

error_code = messages_get_text(msg, &amp;message);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to get message content&quot;);
}

error_code = messages_get_address(msg, 0, &amp;address, &amp;rtype);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to get recipient address&quot;);
}

messages_message_type_e mtype = MESSAGES_TYPE_UNKNOWN;
messages_get_message_type(msg, &amp;mtype);
</pre></li>

<li><p>For MMS messages, the subject and attachments attributes exist and can be extracted from the found message:</p>
<pre class="prettyprint">
if (MESSAGES_TYPE_MMS == mtype) 
{
&nbsp;&nbsp;&nbsp;char *subject = NULL;
&nbsp;&nbsp;&nbsp;error_code = messages_mms_get_subject(msg, &amp;subject);
&nbsp;&nbsp;&nbsp;if (error_code != MESSAGES_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to get MMS subject&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;int atcount = 0;
&nbsp;&nbsp;&nbsp;messages_mms_get_attachment_count(msg, &amp;atcount);
}
</pre></li>

<li><p>The memory allocated for the message given to the callback function and for all string variables extracted from the message has to be explicitly released before leaving the applicable visibility scope:</p>
<pre class="prettyprint">
free(subject);
free(message);
free(address);
</pre></li></ol></li>


<li>Perform the search.
<p>Call the <span style="font-family: Courier New,Courier,monospace;">messages_foreach_message()</span> function to retrieve all existing messages stored in different mailboxes. With the function parameters, you can limit the search results to a subset of all available messages based on:</p>
<ul><li>Message box type (inbox, outbox, sent items, drafts, or all of them)</li>
<li>Message type (such as SMS or MMS)</li>
<li>Keyword (for search based on text and subject)</li>
<li>Address (message recipient address)</li></ul>

<p>The following example shows a simple search for all SMS messages in all message boxes with a callback function named <span style="font-family: Courier New,Courier,monospace;">message_search_callback()</span>.</p>
<pre class="prettyprint">
int error_code;
error_code = messages_open_service(&amp;service_handle);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to open connection&quot;);
}

error_code = messages_foreach_message(service_handle, MESSAGES_MBOX_ALL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MESSAGES_TYPE_SMS, NULL, NULL, 0, 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messages_search_callback, NULL);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Messages searching failed&quot;);
}

messages_close_service(service_handle);
</pre></li></ol>

 <h2 id="sending" name="sending">Sending SMS or MMS Messages</h2>

<p>The Messaging API supports SMS (Short Message Service) messages and MMS (Multimedia Message Service) messages with attachments (image or video files).</p>
<p>To send a message:</p>
<ol><li>Create a message.
<p>To create an SMS or an MMS message, use the <span style="font-family: Courier New,Courier,monospace;">messages_create_message()</span> function. Specify the message type (<span style="font-family: Courier New,Courier,monospace;">MESSAGES_TYPE_SMS</span> or <span style="font-family: Courier New,Courier,monospace;">MESSAGES_TYPE_MMS</span>) when creating the message. The following example creates an SMS message.</p>
<pre class="prettyprint">
int error_code;
messages_message_h msg_hndl = NULL;

// Create an SMS message handle
error_code = messages_create_message(MESSAGES_TYPE_SMS, &amp;msg_hndl);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to create message&quot;);
}
</pre></li>
<li>Define the recipients and message body.
<p>Functions for setting the recipient address and the message body (the message text) are the same for SMS and MMS.</p>
<pre class="prettyprint">
error_code = messages_add_address(msg_hndl, &quot;123456789&quot;, MESSAGES_RECIPIENT_TO);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to add recipient address&quot;);
}

error_code = messages_set_text(msg_hndl, __PRETTY_FUNCTION__);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to set message text&quot;);
}
</pre></li>

<li>Set a subject and add an attachment for an MMS message (note that MMS sending is not supported on the Emulator).
<ul><li><p>Set a message subject:</p>
<pre class="prettyprint">
error_code = messages_mms_set_subject(msg_hndl, &quot;MMS test&quot;);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to set MMS subject&quot;);
}
</pre></li>
<li><p>Add attachments with their absolute path in the device file system. When adding the attachment, give the attachment type. Possible attachment types are image, audio, and video.</p>
<pre class="prettyprint">
error_code = messages_mms_add_attachment(g_message, MESSAGES_MEDIA_IMAGE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;/path/to/image/file&quot;);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to add attachment to MMS&quot;);
}
</pre></li></ul></li>

<li>Send the message.
<ol type="a">
<li><p>Define a callback for the <span style="font-family: Courier New,Courier,monospace;">messages_send_message()</span> function. You can use the callback to let the messaging service inform you about the message sending status. Use the first parameter to determine whether the sending succeeded:</p>
<pre class="prettyprint">
static void 
sent_msg_cb(messages_sending_result_e result, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (MESSAGES_SENDING_SUCCEEDED == result) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Message sending succeeded&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Message sending failed&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li><p>If the connection to the messaging service is open (you have the <span style="font-family: Courier New,Courier,monospace;">service_handle</span> handle) and the message itself (<span style="font-family: Courier New,Courier,monospace;">msg_hndl</span>) is successfully created, send the message using the <span style="font-family: Courier New,Courier,monospace;">messages_send_message()</span> function:</p>
<pre class="prettyprint">
error_code = messages_send_message(service_handle, msg_hndl, true, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sent_msg_cb, NULL);
if (error_code != MESSAGES_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Failed to send message&quot;);
}
</pre></li></ol></li></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
</html>