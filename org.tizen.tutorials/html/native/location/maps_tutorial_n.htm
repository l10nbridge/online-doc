<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=9" />
<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
<script type="text/javascript" src="../../scripts/snippet.js"></script>
<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
<title>Maps Service: Using the Map Service</title>
</head>


<body onload="prettyPrint()" style="overflow: auto;">


<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border">
		<div id="toc">
			<p class="toc-title">Content</p>
			<ul class="toc">
				<li><a href="#initial">Initializing the Map Service</a></li>
				<li><a href="#geocode">Using Geocode and Reverse Geocode Services</a></li>
				<li><a href="#search_place">Using the Place Search Service</a></li>
				<li><a href="#search_route">Using the Routing Service</a></li>
				<li><a href="#cancel">Canceling the Service Request</a></li>
				<li><a href="#address">Recognizing the Address Information</a></li>
				<li><a href="#place">Recognizing the Place Information</a></li>
				<li><a href="#route">Recognizing the Route Information</a></li>
				<li><a href="#preference">Customizing the Service Requests</a></li>
			</ul>
			<p class="toc-title">Related Info</p>
			<ul class="toc">
				<li><a href="../../../../org.tizen.guides/html/native/location/maps_n.htm">Maps Service Guide</a></li>
		    		<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS_SERVICE__MODULE.html">Maps Service API for Mobile Native</a></li>
			</ul>
	    	</div>
	</div>
</div>


<div id="container"><div id="contents"><div class="content">

<h1>Maps Service: Using the Map Service</h1>


<p>This tutorial demonstrates how you can use the map service to query geocodes and routes, and search for places.</p>

<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>


<h2>Warm-up</h2>
<p>Become familiar with the Maps Service API basics by learning about:</p>
<ul>
	<li><a href="#initial">Initializing the Map Service</a>
	<p>Select a map provider, check available capabilities, fulfill the prerequisites, create the Maps Service instance, and destroy it when no longer needed.</p></li>

	<li><a href="#geocode">Using Geocode and Reverse Geocode Services</a>
	<p>Get the geocode of a specified place, and the reverse geocode corresponding to specified geographical coordinates.</p></li>

	<li><a href="#search_place">Using the Place Search Service</a>
	<p>Search for places near a specified geographical position or inside a specified geographical area.</p></li>

	<li><a href="#search_route">Using the Routing Service</a>
	<p>Query the route from point A to point B, optionally passing through a number of specified waypoints.</p></li>

	<li><a href="#cancel">Canceling the Service Request</a>
	<p>Cancel the map service (geocode, routing, or place search) request.</p></li>
</ul>

<h2>Follow-up</h2>
<p>Once we have learned the basics of the Maps Service API, we can now move on to more advanced tasks, including:</p>
<ul>
	<li><a href="#address">Recognizing the Address Information</a>
	<p>Parse the information obtained from the reverse geocode service.</p></li>

	<li><a href="#place">Recognizing the Place Information</a>
	<p>Parse the information obtained from the place search service.</p></li>

	<li><a href="#route">Recognizing the Route Information</a>
	<p>Parse the information obtained from the routing service.</p></li>

	<li><a href="#preference">Customizing the Service Requests</a>
	<p>Prepare and send a set of extra preferences through a map service request and allow the map provider to generate a more accurate result.</p></li>
</ul>



<h2 id="initial" name="initial">Initializing the Map Service</h2>

<p>To start using the map service:</p>
<ol>
<li><p>To use the functions and data types of the Maps Service API, include the <span style="font-family: Courier New,Courier,monospace;"> &lt;maps_service.h&gt; </span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;maps_service.h&gt;
</pre>
</li>

<li>The Maps Service instance relies on a particular map provider. To get a list of available map providers, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_foreach_provider()</span> function:
<pre class="prettyprint">
static bool _maps_service_provider_info_cb(char* maps_provider, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the map provider name, passed as maps_provider

&nbsp;&nbsp;&nbsp;return bool;
}

void get_available_providers()
{
&nbsp;&nbsp;&nbsp;void *user_data = NULL;
&nbsp;&nbsp;&nbsp;const int error = maps_service_foreach_provider(_maps_service_provider_info_cb, user_data);

&nbsp;&nbsp;&nbsp;if (error == MAPS_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Select a provider from the available_providers vector
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Before you use the Maps Service API, create a Maps Service instance using the <span style="font-family: Courier New,Courier,monospace;">maps_service_create()</span> function:
<pre class="prettyprint">
maps_service_h maps = NULL;
int error = maps_service_create(&quot;Maps Provider&quot;, &amp;maps);
</pre>
</li>

<li>Set the security key appropriate to the selected map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_set_provider_key()</span> function:
<pre class="prettyprint">
error = maps_service_set_provider_key(maps, &quot;XXXYYYZZZ&quot;);
</pre>
</li>

<li>Check which services are supported by the selected map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_service_supported()</span> function:
<pre class="prettyprint">
bool supported = false;

// Check whether routing is available 
error = maps_service_provider_is_service_supported(maps, MAPS_SERVICE_SEARCH_ROUTE, &amp;supported);
const bool is_routing_supported = (error == MAPS_ERROR_NONE) ? supported : false;

// Check whether routing through specified waypoints is available
error = maps_service_provider_is_service_supported(maps, MAPS_SERVICE_SEARCH_ROUTE_WAYPOINTS, &amp;supported);
const bool is_routing_waypoints_supported = (error == MAPS_ERROR_NONE) ? supported : false;
</pre>
<p>To check for the availability of other services, follow the same approach using the keys from the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS_SERVICE__MODULE.html#XX">maps_service_e</a> enumerator.</p>
</li>

<li>Optionally, check which data features are available for the desired services using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function:
<pre class="prettyprint">
// Check whether route path data is supported
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_PATH, &amp;supported);
const bool is_route_path_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_path_supported) 
{
&nbsp;&nbsp;&nbsp;// Use route path
}

// Check whether segment path data is supported
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_SEGMENTS_PATH, &amp;supported);
const bool is_route_segment_path_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_segment_path_supported) 
{
&nbsp;&nbsp;&nbsp;// Use segment path
}

// Check whether segment maneuver data is supported
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_SEGMENTS_MANEUVERS, &amp;supported);
const bool is_route_segment_maneuvers_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_segment_maneuvers_supported) 
{
&nbsp;&nbsp;&nbsp;// Use segment maneuvers
}
</pre>
<p>To check the availability of other data features, follow the same approach using the keys from the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS_SERVICE__MODULE.html#XX">maps_service_data_e</a> enumerator.</p>
</li>

<li><p>Set general preferences, such as language and distance units, using the <span style="font-family: Courier New,Courier,monospace;">maps_service_set_preference()</span> function:</p>
<pre class="prettyprint">
// Create a preference set instance
maps_preference_h preference = NULL;
int error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Set the distance unit preference
error = maps_preference_set_distance_unit(preference, MAPS_DISTANCE_UNIT_M);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Set the language preference
error = maps_preference_set_language(preference, &quot;en-US&quot;);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Apply the set of preferences for the map service
error = maps_service_set_preference(maps, preference);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Destroy the preference set instance
error = maps_preference_destroy(preference);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
<p>Optionally, you can set the maximum amount of search results and a default country code using the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_max_results()</span> and <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_country_code()</span> functions respectively.</p>
<p>To set specific preferences for the map provider, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with key-value pairs, defined in the appropriate map provider documentation.</p>
<p>To get the preferences currently applied in the map provider, use the following functions:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_distance_unit()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_language()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_max_results()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_country_code()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get()</span> and
			<span style="font-family: Courier New,Courier,monospace;">maps_preference_foreach_property()</span>
			<p>These 2 functions retrieve the map provider-specific preferences not defined in the Maps Service API.</p></li>
	</ul>
</li>
</ol>


<h2 id="geocode" name="geocode">Using Geocode and Reverse Geocode Services</h2>

<p>To retrieve a geocode of a specified place, or the place information corresponding to given geographic coordinates, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<p>To retrieve a geocode:</p>
<ol>
<li>Make sure that your application has the <span style="font-family: Courier New,Courier,monospace;">http://tizen.org/privilege/internet</span> privilege.
</li>
<li>Request the geocode:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode()</span> function for a request based on a free-formed address:
<pre class="prettyprint">
// Search for geocode of the Samsung&#39;s campus &quot;Digital City&quot; in Suwon
error = maps_service_geocode(maps, &quot;Suwon, Digital City&quot;, preference, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode_inside_area()</span> function for a request inside a specified area:
<pre class="prettyprint">
maps_area_h bounds = NULL;
// Use maps_area_create_rectangle() or maps_area_create_circle() to create geographic bounds for geocoding

// Search for geocode of the Digital City within a specified geographic area
error = maps_service_geocode_inside_area(maps, &quot;Digital City&quot;, bounds, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;__maps_service_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode_by_structured_address()</span> function for a request for a place, specified as a structured address:
<pre class="prettyprint">
maps_address_h address = NULL;
// Use maps_address_create() to create an instance of an address
// Then use maps_address_set_xxx to initialize the address with the desired values

// Search for a geocode of a place, specified with a structured address 
error = maps_service_geocode_by_structured_address(maps, address, preference, __maps_service_geocode_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li></ul></li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_geocode_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool __maps_service_geocode_cb(maps_error_e result, int request_id, int index, int total, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_coordinates_h coordinates, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained coordinate data

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_coordinates_destroy(coordinates);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>


<p>To retrieve a reverse geocode:</p>
<ol>
<li>To retrieve a reverse geocode of specified geographic coordinates, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode()</span> function:
<pre class="prettyprint">
// Obtain the reverse geocode with specified coordinates
error = maps_service_reverse_geocode(maps, 37.257865, 127.053659, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_reverse_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_reverse_geocode_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static void __maps_service_reverse_geocode_cb(maps_error_e result, int request_id, int index, int total, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_address_h address, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained address

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_address_destroy(address);
}
</pre>
</li>

</ol>

<h2 id="search_place" name="search_place">Using the Place Search Service</h2>

<p>To search for a place with a diversity of searching parameters, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<p>To search for a place:</p>
<ol>
<li>Make sure that your application has the <span style="font-family: Courier New,Courier,monospace;">http://tizen.org/privilege/internet</span> privilege.
</li>
<li>Search for a place:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place()</span> function for a search within a specified distance around the center coordinates:
<pre class="prettyprint">
maps_coordinates_h position = NULL;
// Create the coordinates with maps_coordinates_create()

int distance = 500;
error = maps_service_search_place(maps, position, distance, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_area()</span> function for a search for a place within a specified geographic boundary:
<pre class="prettyprint">
maps_area_h boundary = NULL;
// Create the boundary with maps_area_create_rectangle() or maps_area_create_circle() 

error = maps_service_search_place_by_area(maps, boundary, filter, preference, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_address()</span> function for a search for a place based on an address within a specified geographic boundary:
<pre class="prettyprint">
maps_area_h boundary = NULL;
// Create the boundary with maps_area_create_rectangle() or maps_area_create_circle()

error = maps_service_search_place_by_address(maps, &quot;Digital City&quot;, boundary, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li></ul></li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_search_place_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool __maps_service_search_place_cb(maps_error_e error, int request_id, int index, int total, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_place_h place, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained place data

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_place_destroy(place);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>


<h2 id="search_route" name="search_route">Using the Routing Service</h2>

<p>To query a route from point A to point B, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<p>To query a route:</p>
<ol>
<li>Make sure that your application has the <span style="font-family: Courier New,Courier,monospace;">http://tizen.org/privilege/internet</span> privilege.
</li>
<li>Query the route:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route()</span> function for a route from one set of geographic coordinates to another:
<pre class="prettyprint">
maps_coordinates_h origin = NULL, destination = NULL;
// Create the coordinates with maps_coordinates_create()

error = maps_service_search_route(maps, origin, destination, preference, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>


<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_waypoints()</span> function for a route passing through a specified set of waypoints:
<pre class="prettyprint">
// Specify the number of waypoints
const int waypoint_num = 5;

// Create an array with the waypoint coordinates 
maps_coordinates_h* waypoint_list = NULL;

error = maps_service_search_route_waypoints(maps, waypoint_list, waypoint_num, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li></ul></li>


<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_search_route_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool __maps_service_search_route_cb(maps_error_e error, int request_id, int index, int total, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_route_h route, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained route data

&nbsp;&nbsp;&nbsp;// Release the results 
&nbsp;&nbsp;&nbsp;maps_route_destroy(route);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<h2 id="cancel" name="cancel">Canceling the Service Request</h2>

<p>To cancel a geocode, place search, or routing request, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_cancel_request()</span> function:</p>
<pre class="prettyprint">
// Cancel the request with a specified ID
error = maps_service_cancel_request(maps, request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>

<h2 id="address" name="address">Recognizing the Address Information</h2>

<p>The result of the <a href="#geocode">reverse geocode request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode()</span>) is retrieved from the map service using the <span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode_cb()</span> callback. The result is structured address data of the specified place.</p>
<p>Parse the address information using the following functions:</p>
<pre class="prettyprint">
// Obtain the building number 
char *building_number = NULL;
error = maps_address_get_building_number(address, &amp;building_number);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Use the building_number

free(building_number);

// Obtain the street name
char *street = NULL;
error = maps_address_get_street(address, &amp;street);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Use the street name

free(street);
</pre>
<p>Similarly, you can get other address features using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_district()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_city()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_state()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_country()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_country_code()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_county()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_postal_code()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_freetext()</span></li>
</ul>


<h2 id="place" name="place">Recognizing the Place Information</h2>

<p>The result of the <a href="#search_place">place search request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_search_place()</span>, <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_area()</span>, or <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_address()</span>) is retrieved from the map service using multiple iterations of the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_cb()</span> callback. The result is an instance of place data.</p>

	<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Different map providers are capable of providing different sets of place data features. Some map providers can extend the place data features with extra properties that are not specified in the Maps Service API. Such properties are organized as a key-value storage where the keys are the names of the properties.
	 
	 <p>If your map provider does not support a specific feature, the get function for the feature returns an error. To prevent problems, you can <a href="#initial">check which data features are available</a> in your map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function.</p>
	 </td> 
    </tr> 
   </tbody> 
  </table>

<p>To parse place data:</p>

<ol><li><p>To get the place information features, such as place name, location, and rating, use the following functions with a <span style="font-family: Courier New,Courier,monospace;">maps_place_h</span> place handle:</p>

<ul>
<li>To obtain the place name, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_name()</span> function:
<pre class="prettyprint">
// Obtain the place name
char *name = NULL;
error = maps_place_get_name(place, &amp;name);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}

// Use the place name

free(name);
</pre>
</li>

<li>To obtain the place location, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_location()</span> function:
<pre class="prettyprint">
// Obtain the place location
maps_coordinates_h location = NULL;
error = maps_place_get_location(place, &amp;location);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Use the place location

maps_coordinates_destroy(location);
</pre>
</li>

<li>To obtain the place rating, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_rating()</span> function:
<pre class="prettyprint">
// Obtain the place rating
maps_place_rating_h rating = NULL;
error = maps_place_get_rating(place, &amp;rating);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Use the place rating

maps_place_rating_destroy(rating);
</pre>
</li></ul>

<p>To obtain other place features, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_id()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_address()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_distance()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_uri()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_supplier_link()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_related_link()</span></li>
</ul>

</li>

<li><p>To get lists of place information features, such as categories, reviews, and attributes, use the following iterating functions:</p>
<ol type="a">
<li>To obtain a list of place categories, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_category()</span> function:
<pre class="prettyprint">
// Obtain a list of place categories 
error = maps_place_foreach_category(place, __maps_place_categories_cb, user_data);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_place_categories_cb()</span> callback:
<pre class="prettyprint">
static bool __maps_place_categories_cb(int index, int total, maps_place_category_h category, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained place category data

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_place_category_destroy(category);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>
<p>To obtain other place feature lists, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_attribute()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_contact()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_editorial()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_image()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_review()</span></li>
</ul></li>

<li><p>To get the extra properties that some map providers provide to extend the place data features defined in the Maps Service API:</p>
<ol type="a">
<li>To iterate through the retrieved extra properties, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_property()</span> function:
<pre class="prettyprint">
// Obtain the map provider-specific place data properties
error = maps_place_foreach_property(place, __maps_place_properties_cb, user_data);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_place_properties_cb()</span> callback:
<pre class="prettyprint">
static bool __maps_place_properties_cb(int index, int total, char* key, void* value, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained property:
&nbsp;&nbsp;&nbsp;// property_name: key
&nbsp;&nbsp;&nbsp;// property_value: value

&nbsp;&nbsp;&nbsp;// Release the property name and value
&nbsp;&nbsp;&nbsp;free(key);
&nbsp;&nbsp;&nbsp;free(value);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol></li></ol>

<h2 id="route" name="route">Recognizing the Route Information</h2>


<p>The result of the <a href="#search_route">route calculation request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_search_route()</span> or <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_waypoints()</span>) is retrieved from the map service using multiple iterations of the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_cb()</span> callback. The result is an instance of route data.</p>

	<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Different map providers are capable of providing different sets of route data features. Some map providers can extend the route data features with extra properties that are not specified in the Maps Service API. Such properties are organized as a key-value storage where the keys are the names of the properties.
	 
	 <p>If your map provider does not support a specific feature, the get function for the feature returns an error. To prevent problems, you can <a href="#initial">check which data features are available</a> in your map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function.</p>
	 </td> 
    </tr> 
   </tbody> 
  </table>

  
<p>To parse route data:</p>

<ol><li><p>To get the route information features, such as route ID, origin, destination, and total distance, use the following functions with a <span style="font-family: Courier New,Courier,monospace;">maps_route_h</span> place handle:</p>  
<ul>
<li>To obtain the route ID, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_route_id()</span> function:
<pre class="prettyprint">
// Obtain the route ID
char *id = NULL;
error = maps_route_get_route_id(route, &amp;id);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

// Use the route ID

free(id);
</pre>
</li>

<li>To obtain the route origin and destination, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_origin()</span> and <span style="font-family: Courier New,Courier,monospace;">maps_route_get_destination()</span> functions:
<pre class="prettyprint">
// Obtain the route origin and destination
maps_coordinates_h origin = NULL, destination = NULL;
error = maps_route_get_origin(route, &amp;origin);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}
error = maps_route_get_destination(route, &amp;destination);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}

// Use the route origin and destination

maps_coordinates_destroy(origin);
maps_coordinates_destroy(destination);
</pre>
</li>

<li>To obtain the route total distance, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_total_distance()</span> function:
<pre class="prettyprint">
// Obtain the total route distance
double total_distance = .0;
error = maps_route_get_total_distance(route, &amp;total_distance);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}
// Use the total route distance
</pre>
</li>
</ul>
<p>To obtain other route features, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_bounding_box()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_transport_mode()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_total_duration()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_distance_unit()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_supplier_link()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_related_link()</span></li>
</ul></li>
<li>
<p>To get lists of route information features, such as path or list of segments, use the following iterating functions:</p>
<ol type="a">
<li>To obtain the list of geographic points defining the route, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_path()</span> function:
<pre class="prettyprint">
error = maps_route_foreach_path(route, __maps_route_path_cb, user_data);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_path_cb()</span> callback:
<pre class="prettyprint">
static bool __maps_route_path_cb(int index, int total, maps_coordinates_h coordinates, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained route path coordinates

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_coordinates_destroy(coordinates);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>To obtain the list of route segments, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_segment()</span> function:
<pre class="prettyprint">
error = maps_route_foreach_segment(route, __maps_route_segment_cb, user_data);
if (error != MAPS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>
</li>

<li><p>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_segment_cb()</span> callback:</p>
<pre class="prettyprint">
static bool __maps_route_segment_cb(int index, int total,
maps_route_segment_h segment, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained route segment

&nbsp;&nbsp;&nbsp;// Release the results
&nbsp;&nbsp;&nbsp;maps_route_segment_destroy(segment);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol></li>

<li><p>To get the extra properties that some map providers provide to extend the route data features defined in the Maps Service API:</p>

<ol type="a">
<li>To iterate through the retrieved extra properties, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_property()</span> function:
<pre class="prettyprint">
// Obtain the map provider-specific route data properties
error = maps_route_foreach_property(route, __maps_route_properties_cb, user_data);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_properties_cb()</span> callback:
<pre class="prettyprint">
static bool __maps_route_properties_cb(int index, int total, char* key, void* value, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Handle the obtained property:
&nbsp;&nbsp;&nbsp;// property_name: key
&nbsp;&nbsp;&nbsp;// property_value: value

&nbsp;&nbsp;&nbsp;// Release the property name and value
&nbsp;&nbsp;&nbsp;free(key);
&nbsp;&nbsp;&nbsp;free(value);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol></li></ol>

<h2 id="preference" name="preference">Customizing the Service Requests</h2>

<p>All Maps Service API requests can be customized with additional preferences. Preparing and sending the <span style="font-family: Courier New,Courier,monospace;">preference</span> parameter with the service request allows the map provider to generate more accurate results.</p>
<p>To customize the service request:</p>
<ul>
	<li>To prepare preferences for the place search service, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with the following keys:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_PLACE_FILTER_TYPE</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_PLACE_FILTER_SORT_BY</span></li>
	</ul>
<p>The example from <a href="#search_place">Using the Place Search Service</a> can be modified as follows to include the customized preferences:</p>
<pre class="prettyprint">
// Create extra preferences for the place search service
error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
error = maps_preference_set_property(preference, MAPS_PLACE_FILTER_TYPE, &quot;restaurant&quot;);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

maps_coordinates_h position = NULL;
// Create the coordinates with maps_coordinates_create()

int distance = 500;
error = maps_service_search_place(maps, position, distance, filter, preference,  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}

maps_preference_destroy(preference);
</pre>
</li>

<li>To prepare preferences for the routing service, use the following functions:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_optimization()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_transport_mode()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_feature_weight()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_feature()</span></li>
	</ul>
	<p>You can also use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with the following keys:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_FREEFORM_ADDR_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_STRUCTED_ADDR_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_CIRCLE_AREA_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_RECT_AREA_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_GEOMETRY_BOUNDING_BOX</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_GEOMETRY_RETRIEVAL</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_GEOMETRY</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_BOUNDING_BOX</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_RETRIEVAL</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_REALTIME_TRAFFIC</span></li>
	</ul>

<p>The example from <a href="#search_route">Using the Routing Service</a> can be modified as follows to include the customized preferences:</p>
<pre class="prettyprint">
// Create extra preferences for the routing service
error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}
error = maps_preference_set_property(preference, MAPS_ROUTE_FREEFORM_ADDR_TO_AVOID, &quot;Suwon, Digital City&quot;);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}
error = maps_preference_set_route_optimization(preference, MAPS_ROUTE_TYPE_SHORTEST);
if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}

maps_coordinates_h origin = NULL, destination = NULL;
// Create the coordinates with maps_coordinates_create()

error = maps_service_search_route(maps, origin, destination, preference, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling 
}

maps_preference_destroy(preference);
</pre>
</li>
</ul>
<p>If your map provider requires any specific preferences, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with key-value pairs defined in the appropriate map provider documentation.</p>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div>
</div>
</div>


<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"><p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">    Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() 
{
	var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
 </html>
