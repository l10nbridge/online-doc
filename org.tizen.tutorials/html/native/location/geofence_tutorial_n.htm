<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Geofence Manager: Creating and Using Geofences</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#initial">Initializing the Geofence Service</a></li>
			<li><a href="#status">Getting the Geofence Event State</a></li>
			<li><a href="#track">Tracking the User for Geofence Alerts</a></li>
			<li><a href="#info">Retrieving Geofence Information</a></li>
		</ul>        
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/location/geofence_n.htm">Geofence Manager Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__GEOFENCE__MANAGER__MODULE.html">Geofence Manager API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Geofence Manager: Creating and Using Geofences</h1>

<p>This tutorial demonstrates how you can implement geofence-related information and services.</p>

<p>This feature is supported in mobile applications only.</p>
  
<h2>Warm-up</h2>
<p>Become familiar with Geofence Manager API basics by learning about:</p>
<ul>
<li><a href="#initial">Initializing the Geofence Service</a>
	<p>Create the geofence, start the geofence service, and stop it when no longer needed.</p></li>
<li><a href="#status">Getting the Geofence Event State</a>
	<p>Get the success or failure state of each event.</p></li>
<li><a href="#track">Tracking the User for Geofence Alerts</a>
	<p>Track the user location and update the geofence state.</p></li>
<li><a href="#info">Retrieving Geofence Information</a>
	<p>Get information on geofences.</p></li></ul>

	
			<h2 id="initial" name="initial">Initializing the Geofence Service</h2>
			
<p>To initialize the geofence features:</p>		
<ol><li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__GEOFENCE__MANAGER__MODULE.html">Geofence Manager</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;geofence_manager.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;geofence_manager.h&gt;
</pre></li>
<li><p>Create a geofence manager handle using the <span style="font-family: Courier New,Courier,monospace">geofence_manager_create()</span> function:</p>
<pre class="prettyprint">
geofence_manager_h manager;
geofence_manager_create(&amp;manager);
</pre>
<p>Each geofence manager is an independent service. The callbacks are set for a given geofence manager and are called only if the service is started by their manager.</p></li>

<li><p>Create a place to be used for the geofences:</p>
<pre class="prettyprint">
int place_id = -1; // This is for creating a place
geofence_manager_add_place(manager, &quot;place_name&quot;, &amp;place_id);
</pre>
<table class="note">
	<tbody>
		<tr>
			<th class="note">Note</th>
		</tr>
		<tr>
			<td class="note">
				A place is used to accommodate a number of geofences and is identified by a place ID. Each place can have a name. A geofence is identified by a geofence ID.
			</td>
		</tr>
	</tbody>
</table>
</li>
<li>Create the geofences:
<ol type="a">
<li>Geopoint geofence:
<pre class="prettyprint">
double latitude = 12.756738;
double longitude = 77.386474;
int radius = 100;
char* address = &quot;India&quot;; 
geofence_h fence_h;
geofence_create_geopoint(place_id, latitude, longitude, radius, address, &amp;fence_h);
</pre>
</li>
<li>Bluetooth geofence:
<pre class="prettyprint">
char* bssid = &quot;82:45:67:7E:4A:3B&quot;;
char* ssid = &quot;Cafeteria&quot;;
geofence_h fence_h;
geofence_create_bluetooth(place_id, bssid, ssid, &amp;fence_h);
</pre>
</li>
</ol>
<p>Add the geofence to the manager:</p>
<pre class="prettyprint">
int geofence_id = -1;
geofence_manager_add_fence(manager, fence_h, &amp;geofence_id);
</pre></li>

<li><p>Start the geofence service using the <span style="font-family: Courier New,Courier,monospace">geofence_manager_start()</span> function. </p>
<p>This call is asynchronous and only initiates the process of starting the service. Once the service is started, the registered callbacks are invoked when their corresponding events take place. To know when the service becomes enabled, use the <span style="font-family: Courier New,Courier,monospace">geofence_manager_set_geofence_state_changed_cb()</span> callback.</p>
<pre class="prettyprint">
geofence_manager_start(manager, geofence_id);
</pre></li>

<li><p>Using the geofence service for geopoints is power consuming, so if the service is not used, stop the status alerts using the <span style="font-family: Courier New,Courier,monospace">geofence_manager_stop()</span> function. Call the <span style="font-family: Courier New,Courier,monospace">geofence_manager_start()</span> function again if the alerts are needed.</p>
<pre class="prettyprint">
geofence_manager_stop(manager, geofence_id);
</pre></li>

<li><p>Destroy all used resources, such as the geofence manager handle, using the <span style="font-family: Courier New,Courier,monospace">geofence_manager_destroy()</span> function:</p>
<pre class="prettyprint">
geofence_manager_destroy(manager);
manager = NULL;
</pre>
<p>If you destroy the handle, there is no need to call the <span style="font-family: Courier New,Courier,monospace">geofence_manager_stop()</span> function to stop the service as the service is automatically stopped. Also, you do not have to unset the previously set callbacks.</p></li></ol>

				<h2 id="status" name="status">Getting the Geofence Event State</h2>
				
<p>To get the state of all geofence events, use the geofence event callback. The geofence event callback is invoked whenever there is a request from the user, for example, to add a geofence or to start a geofence service.</p>

<ol>
<li><p>Register the callback using the <span style="font-family: Courier New,Courier,monospace">geofence_manager_set_geofence_event_cb()</span> function:</p>
<pre class="prettyprint">
geofence_manager_set_geofence_event_cb(manager, geofence_event, NULL);
</pre> 
</li>
<li><p>Get the success or failure state of the event in the callback:</p>
<pre class="prettyprint">
geofence_manage_e user_action;
geofence_manager_error_e user_error;
void 
geofence_event(int place_id, int geofence_id, geofence_manager_error_e error, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geofence_manage_e manage, void *user_data)
{
&nbsp;&nbsp;&nbsp;user_action = manage;
&nbsp;&nbsp;&nbsp;user_error = error;
}
</pre>
<table class="note">
	<tbody>
		<tr>
			<th class="note">Note</th>
		</tr>
		<tr>
			<td class="note">
				This event callback is used to let the user know whether the request is successful in the server side. This event callback is invoked only in case of an asynchronous API. In case of a synchronous API, an error is immediately returned.
			</td>
		</tr>
	</tbody>
</table>

</li></ol>

			
				<h2 id="track" name="track">Tracking the User for Geofence Alerts</h2>
				
				
<p>To get information about the in or out state for the geofence:</p>
<ol>
<li>Receive event-based notifications:
<ol type="a"><li><p> You can get notifications about the in or out state updates using the state update callback. The callback is invoked on an event, receiving the current state of the user with respect to geofences with each call.</p>
<p>Register the geofence state update callback using the <span style="font-family: Courier New,Courier,monospace;">geofence_manager_set_geofence_state_changed_cb()</span> function.</p>
<pre class="prettyprint">
geofence_manager_set_geofence_state_changed_cb(manager, geofence_state_changed, NULL);
</pre></li>
<li><p>Define the callback function:</p>
<pre class="prettyprint">
void 
geofence_state_changed(int geofence_id, geofence_state_e state, void *user_data) {}
</pre></li></ol>
</li>
<li><p>Receive the current state on request.</p>
	<p>You can get the current state of the user with respect to a fence, such as the in or out state and the duration of the current state.</p>
<ol type="a"><li><p>To access the state or the duration, first create a status handle:</p>
<pre class="prettyprint">
int geofence_id = 1;
geofence_status_h status_h;
geofence_status_create(geofence_id, &amp;status_h);
</pre></li>
<li><p>To get the current state, call the <span style="font-family: Courier New,Courier,monospace;">geofence_status_get_state()</span> function:</p>
<pre class="prettyprint">
geofence_state_e state;
geofence_status_get_state(status_h, &amp;state);
</pre></li>
<li><p>To get the duration of the current state, call the <span style="font-family: Courier New,Courier,monospace;">geofence_status_get_duration()</span> function:</p>
<pre class="prettyprint">
int duration;
geofence_status_get_duration(status_h, &amp;duration);
</pre>
<p>The duration is provided in seconds.</p></li>
<li><p>When no longer needed, destroy the status handle with the <span style="font-family: Courier New,Courier,monospace;">geofence_status_destroy()</span> function:</p>
<pre class="prettyprint">
geofence_status_destroy(status_h);
</pre>
</li></ol></li>
</ol>


			
				<h2 id="info" name="info">Retrieving Geofence Information</h2>
				  <p>To get information about the geofence:</p>


<ul><li><p>Get common information (such as the type and place) about the geofences:</p>
<pre class="prettyprint">
geofence_type_e type;
int place_id;
geofence_get_type(fence_h, &amp;type);
geofence_get_place_id(fence_h, &amp;place_id);
</pre></li>
<li><p>Retrieve the geopoint geofence information:</p>
<pre class="prettyprint">
double latitude;
double longitude;
int radius;
char *address;
geofence_get_latitude(fence_h, &amp;latitude);
geofence_get_longitude(fence_h, &amp;longitude);
geofence_get_radius(fence_h, &amp;radius);
geofence_get_address(fence_h, &amp;address);

// Release the resource after use
free(address);
</pre></li>		
<li>Retrieve the Wi-Fi or Bluetooth geofence information:
<pre class="prettyprint">
char *bssid;
char *ssid;
geofence_get_bssid(fence_h, &amp;bssid);
geofence_get_ssid(fence_h, &amp;ssid);

// Release the resources after use
free(bssid);
free(ssid);
</pre></li></ul>

			
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>
<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>
<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>
</body>
</html>			
