<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>OAuth 2.0: Using the Authorization Framework</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#mgr_init">Initializing the OAuth 2.0 Manager</a></li>
			<li><a href="#request">Creating and Managing an OAuth 2.0 Request</a></li>
			<li><a href="#token">Requesting the Server for a Grant or Token</a></li>
			<li><a href="#response">Managing an OAuth 2.0 Response</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
        	<li><a href="../../../../org.tizen.guides/html/native/account/oauth2_n.htm">OAuth 2.0 Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__OAUTH2__MODULE.html">OAuth 2.0 API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>OAuth 2.0: Using the Authorization Framework</h1>

<p>This tutorial demonstrates how you can create a request for OAuth 2.0 authentication and authorization grant from a server, obtain an access token using the manager handle, and retrieve this info from the response handle returned in the callback.</p>

<p>This feature is supported in mobile applications only.</p>

<h2>Warm-up</h2>

<p>Become familiar with the OAuth 2.0 API basics by learning about:</p>
<ul>
		<li><a href="#mgr_init">Initializing the OAuth 2.0 Manager</a>
		<p>Initialize the OAuth 2.0 manager for use.</p></li>
		
		<li><a href="#request">Creating and Managing an OAuth 2.0 Request</a>
		<p>Create a request handle, set and retrieve request parameters, and pass the request to the OAuth 2.0 manager to request a token.</p></li>

		<li><a href="#token">Requesting the Server for a Grant or Token</a>
		<p>Request the authorization server for the required OAuth 2.0 grant or token using various methods and grant types.</p></li>

		<li><a href="#response">Managing an OAuth 2.0 Response</a>
		<p>Obtain information from the OAuth 2.0 response handle returned in a callback.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the OAuth 2.0 API, the application has to request permission by adding the following privilege to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/internet&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

<h2 id="mgr_init" name="mgr_init">Initializing the OAuth 2.0 Manager</h2>

<p>To initialize the OAuth 2.0 manager:</p>
<ol>
<li> <p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__OAUTH2__MODULE.html">OAuth 2.0</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;oauth2.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;oauth2.h&gt;
</pre>
<p>To ensure that an OAuth 2.0 function has been executed properly, make sure that the return is equal to <span style="font-family: Courier New,Courier,monospace;">ACCOUNT_ERROR_NONE</span>.</p>
</li>
<li><p>Declare the necessary global variables and create the manager handle using the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_create()</span> function:</p>

<pre class="prettyprint">
static oauth2_manager_h mgr = NULL;
int ret = OAUTH2_ERROR_NONE;
ret = oauth2_manager_create(&amp;mgr)
</pre></li>

<li>When you no longer need it, free the OAuth 2.0 manager handle with the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_destroy()</span> function:

<pre class="prettyprint">
ret = oauth2_manager_destroy(mgr);
</pre>
</li>
</ol>

 <h2 id="request" name="request">Creating and Managing an OAuth 2.0 Request</h2>

<p>To make a request with the OAuth 2.0 manager:</p>

<ol>
<li>Create an <span style="font-family: Courier New,Courier,monospace;">oauth2_request_h</span> request handle and use the <span style="font-family: Courier New,Courier,monospace;">oauth2_request_create()</span> function to create the OAuth 2.0 request:

<pre class="prettyprint">
oauth2_request_h request = NULL;
ret = oauth2_request_create(&amp;request);
</pre>
</li>
<li>Set the parameters needed for making an OAuth 2.0 request.
<p>You can set various request properties, such as end points for authentication and token, grant type, user name, and password.</p>

<pre class="prettyprint">
char* auth_url = &quot;https://accounts.google.com/o/oauth2/auth&quot;;
char* token_url = &quot;https://accounts.google.com/o/oauth2/token&quot;;
char* user_name = &quot;username&quot;;
char* password = &quot;password&quot;;

ret = oauth2_request_set_auth_end_point_url(request, auth_url);

ret = oauth2_request_set_token_end_point_url(request, token_url);

ret = oauth2_request_set_grant_type(request, OAUTH2_GRANT_TYPE_AUTH_CODE);

ret = oauth2_request_set_user_name(request, user_name);

ret = oauth2_request_set_password(request, password);
</pre>

<p>You can also retrieve request parameters from an existing request handle:</p>

<pre class="prettyprint">
char* auth_url = NULL;
char* token_url = NULL;
char* user_name = NULL;
char* password = NULL;
oauth2_grant_type_e grant_type;

ret = oauth2_request_get_auth_end_point_url(request, &amp;auth_url);

ret = oauth2_request_get_token_end_point_url(request, &amp;token_url);

ret = oauth2_request_get_grant_type(request, &amp;grant_type)

ret = oauth2_request_get_user_name(request, &amp;user_name);

ret = oauth2_request_get_password(request, &amp;password);
</pre>
</li>
<li>When you no longer need it, free the request handle with the <span style="font-family: Courier New,Courier,monospace;">oauth2_request_destroy()</span> function:

<pre class="prettyprint">
ret = oauth2_request_destroy(request);
</pre>
</li>
</ol>
	
 <h2 id="token" name="token">Requesting the Server for a Grant or Token</h2>

<p>To obtain the required authorization code or access token:</p>

<ul><li id="req_code">Request the authorization code.
<p>The authorization code grant type is used to obtain both access tokens and refresh tokens. It is a redirection-based flow that requires the client to interact with the server and receive the incoming requests (through redirection) from the authorization server.</p>
<p>To request the authorization code, use the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_request_authorization_grant()</span> function:</p>

<pre class="prettyprint">
void
grant_response_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Authorization code response callback */
&nbsp;&nbsp;&nbsp;&nbsp;char *auth_code = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_authorization_code(response, &amp;auth_code);
}

void
request_auth_code(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   Set all the required parameters needed as per the Web server&#39;s
&nbsp;&nbsp;&nbsp;&nbsp;   OAuth 2.0 authentication policy before making the request
&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;/* Set the response_type as &quot;code&quot; */
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_CODE);

&nbsp;&nbsp;&nbsp;&nbsp;/* Set the application client ID registered in the server */
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, &quot;app_client_id&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;/* Set the redirect URI for the server to redirect the flow after the authentication */
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, &quot;https://developer.tizen.org&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;/* Request the server for the authorization grant; the response from the server is returned in the callback */
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_authorization_grant(mgr, request, grant_response_cb, user_data);
}
</pre>
</li>
<li id="req_token">Request the access token.

<p>Access tokens are credentials used to access protected resources. An access token is a string representing an authorization issued to the client. Tokens represent specific access scopes and durations, granted by the resource owner, and enforced by the resource server and authorization server.</p>

<ul>
<li id="code_token">Request the access token with the authorization code.
<p>In the authorization code grant type, instead of requesting authorization directly from the resource owner, the client directs the resource owner to an authorization server, which in turn directs the resource owner back to the client with the authorization code.</p>
<ol type="a">
<li><a href="#req_code">Request the authorization code</a> with the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_request_authorization_grant()</span> function. The authorization code is returned in the callback.
<pre class="prettyprint">
void
request_auth_code(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   Set all the required parameters needed as per the Web server&#39;s
&nbsp;&nbsp;&nbsp;&nbsp;   OAuth 2.0 authentication policy before making the request
&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, &quot;https://login.live.com/oauth20_authorize.srf&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_token_end_point_url(request, &quot;https://login.live.com/oauth20_token.srf&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, &quot;https://developer.tizen.org&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, &quot;WINDOWS_CLIENT_ID&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, &quot;WINDOWS_CLIENT_SECRET&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_scope(request, &quot;wl.basic&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_CODE);

&nbsp;&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_authorization_grant(mgr, request, grant_response_cb, request);
}
</pre>
</li>
<li>Use the authorization code to request the access token by calling the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_request_access_token()</span> function. The response from the server is returned in a callback function where the access token can be retrieved:

<pre class="prettyprint">
void
access_token_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Access token response callback */

&nbsp;&nbsp;&nbsp;&nbsp;char *access_token = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_access_token(response, &amp;access_token);
}

void
grant_response_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Authorization code response callback */

&nbsp;&nbsp;&nbsp;&nbsp;char *auth_code = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_authorization_code(response, &amp;auth_code);

&nbsp;&nbsp;&nbsp;&nbsp;if (auth_code) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Request handle was passed as the user data */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = (oauth2_request_h) user_data;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_authorization_code(request, auth_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_access_token(mgr, request, access_token_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li></ol></li>

<li id="direct_token">Request the access token directly.

<p>You can request an access token in a single step without obtaining the authorization code explicitly. The code is obtained after the authentication and passed to the server to obtain the access token internally in case of the authorization code grant type. In case of the implicit, resource owner password credentials, and client credentials grant types, you can obtain the access token directly.</p>

<p>To obtain the access token directly, use the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_request_token()</span> function. The response from the server is included in the callback.</p>

<pre class="prettyprint">
void
token_response_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Access token response callback */

&nbsp;&nbsp;&nbsp;&nbsp;char *access_token = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_access_token(response, &amp;access_token);
}

void
request_access_token(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   Set all the required parameters needed as per the Web server&#39;s
&nbsp;&nbsp;&nbsp;&nbsp;   OAuth 2.0 authentication policy before making the request
&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, &quot;https://www.facebook.com/dialog/oauth&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, &quot;https://developer.tizen.org&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, &quot;SAMPLE_CLIENT_ID&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_scope(request, &quot;read_stream&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_TOKEN);

&nbsp;&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, token_response_cb, request);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != OAUTH2_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Access Token request failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul></li>
<li>Refresh the access token.
<p>Refresh tokens are credentials used to obtain access tokens. Refresh tokens are issued to the client by the authorization server and are used to obtain a new access token when the current access token becomes invalid or expires, or to obtain additional access tokens with an identical or narrower scope.</p>
<p>Use the <span style="font-family: Courier New,Courier,monospace;">oauth2_manager_refresh_access_token()</span> function to refresh an access token. The response from the server is included in the callback.</p>

<pre class="prettyprint">
void
token_response_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Access token response callback */

&nbsp;&nbsp;&nbsp;&nbsp;char *access_token = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_access_token(response, &amp;access_token);
}

void
refresh_token_response_cb(oauth2_response_h response, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char *acc_token = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_access_token(response, &amp;acc_token);

&nbsp;&nbsp;&nbsp;&nbsp;char *ref_token = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_refresh_token(response, &amp;ref_token);

&nbsp;&nbsp;&nbsp;&nbsp;char *auth_code = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_authorization_code(response, &amp;auth_code);
&nbsp;&nbsp;&nbsp;&nbsp;if (auth_code) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = (oauth2_manager_h) user_data;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   Set all the required parameters needed as per the Web server&#39;s
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   OAuth 2.0 authentication policy before making the request
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_refresh_token_url(request, &quot;https://www.googleapis.com/oauth2/v3/token&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_refresh_token(request, ref_token);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, &quot;GOOGLE_CLIENT_ID&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, &quot;GOOGLE_CLIENT_SECRET&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_grant_type(request, OAUTH2_GRANT_TYPE_REFRESH);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_authentication_type(request, OAUTH2_CLIENT_AUTHENTICATION_TYPE_REQUEST_BODY);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_refresh_access_token(mgr, request, token_response_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

void
request_access_token(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   Set all the required parameters needed as per the Web server&#39;s
&nbsp;&nbsp;&nbsp;&nbsp;   OAuth 2.0 authentication policy before making the request
&nbsp;&nbsp;&nbsp;&nbsp;*/

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, &quot;https://accounts.google.com/o/oauth2/auth&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_token_end_point_url(request, &quot;https://accounts.google.com/o/oauth2/token&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, &quot;https://localhost:8080&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, &quot;GOOGLE_CLIENT_ID&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, &quot;GOOGLE_CLIENT_SECRET&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_scope(request, &quot;email&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_CODE);

&nbsp;&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, refresh_token_response_cb, mgr);
}
</pre>
</li>
</ul>

<h2 id="response" name="response" class="items-tit-h2">Managing an OAuth 2.0 Response</h2>

<p>The response from the server is bundled in the <span style="font-family: Courier New,Courier,monospace;">oauth2_response_h</span> handle and returned in the callbacks, from which all the various response parameters can be obtained.</p>

<p>To manage the OAuth 2.0 response:</p>

<ol>
<li>Retrieve the response parameters from the response handle.
<p>You can get various response information, such as the authorization code, access token, state, and token type.</p>

<pre class="prettyprint">
char* auth_code = NULL;
char* access_token = NULL;
char* state = NULL;
char* token_type = NULL;

ret = oauth2_response_get_authorization_code(response, &amp;auth_code);

ret = oauth2_response_get_access_token(response, &amp;access_token);

ret = oauth2_response_get_state(response, &amp;state);

ret = oauth2_response_get_token_type(response, &amp;token_type);
</pre>
</li>

<li>Handle response errors.
<p>If the created request is incorrect or missing required permissions, the server response contains an error. Retrieve the error information from the response handle to check the issue:</p>

<pre class="prettyprint">
oauth2_error_h e_handle = NULL;
int error_code = 0;
int platform_error_code = 0;
char *description = NULL;
char *uri = NULL;
char *error_val = NULL;

oauth2_response_get_error(response, &amp;e_handle);

oauth2_error_get_code(e_handle, &amp;error_code, &amp;platform_error_code);

oauth2_error_get_description(e_handle, &amp;description);

oauth2_error_get_uri(e_handle, &amp;uri);

oauth2_error_get_custom_data(e_handle, &quot;error&quot;, &amp;error_val);
</pre>
</li>
<li>When you no longer need the it, free the response handle with the <span style="font-family: Courier New,Courier,monospace;">oauth2_response_destroy()</span> function:

<pre class="prettyprint">
ret = oauth2_response_destroy(response);
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
