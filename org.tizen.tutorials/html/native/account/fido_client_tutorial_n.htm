<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>FIDO Client Tutorial</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#find_auth">Find FIDO authenticator</a></li>
			<li><a href="#check_uaf_msg_supported">Check UAF Message Supported</a></li>
			<li><a href="#protocol_conversation">Protocol Conversation</a></li>
			<li><a href="#set_server_result">Set Server Result</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/account/fido_client_n.htm">FIDO Client Guide</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>FIDO Client</h1>

<p>This tutorial demonstrates how you can find the authenticator supported by the device, register the user, authenticate the user and then de-register the user.</p>
<p>Please make sure that FIDO UAF feature is supported by the device.</p>

<h2>Warm-up</h2>

<p>Become familiar with FIDO Framework API basics by learning about:</p>
<ul>
		<li><a href="#find_auth">Find FIDO authenticator</a>
		<p>Find the authenticators supported by the device.</p></li>

		<li><a href="#check_uaf_msg_supported">Check UAF Message Supported</a>
		<p>This function checks whether the given UAF protocol message can be processed by the device.</p></li>

		<li><a href="#protocol_conversation">Protocol Conversation</a>
		<p>The core UAF protocol consists of conceptual conversations between a FIDO UAF Client and FIDO Server, that are Registeration, Authenticatction and Derigesteration.</p></li>

		<li><a href="#set_server_result">Set Server Result</a>
		<p>Set Server Result is used to indicate the status code resulting from a FIDO UAF message delivered to the remote server.</p></li>
</ul>

<h2 id="find_auth" name="find_auth">Find FIDO authenticator</h2>

<p>Find Authenticator function is used to obtain the list of all available authenticators.</p>
<pre class="prettyprint">
void
start_discover(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = fido_foreach_authenticator(auth_list_cb, data);
}

static void
auth_list_cb(const fido_authenticator_h auth, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = user_data;
&nbsp;&nbsp;&nbsp;__print_authinfo(auth, ad);
}

static void
__print_authinfo(fido_authenticator_h auth, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;char *title =  NULL;
&nbsp;&nbsp;&nbsp;fido_authenticator_get_title(auth, &title);

&nbsp;&nbsp;&nbsp;char *aaid = NULL;
&nbsp;&nbsp;&nbsp;fido_authenticator_get_aaid(auth, &aaid);
}
</pre>

 <h2 id="check_uaf_msg_supported" name="check_uaf_msg_supported">Check UAF Message Supported</h2>

<p>This function checks whether the given UAF protocol message can be processed by the device.</p>

<li><p>After you click <strong>Check UAF Message Supported</strong> on the main screen, on success <strong>'TRUE'</strong> will be displayed in a pop up (as shown in the above figure).</p></li>

<pre class="prettyprint">
void
start_check_policy(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;bool is_supported = false;
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_is_supported(json_reg, &is_supported);

&nbsp;&nbsp;&nbsp;char str[2048] = {0,};
&nbsp;&nbsp;&nbsp;str[0] = '\0';

&nbsp;&nbsp;&nbsp;strcpy(str, "CHECK POLICY RESPONSE | ");
&nbsp;&nbsp;&nbsp;if (is_supported == true)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(str, "TRUE");
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(str, "FALSE");

&nbsp;&nbsp;&nbsp;create_popup(str, (appdata_s *) user_data);
&nbsp;&nbsp;&nbsp;free(error_string);
}
</pre>

<h2 id="protocol_conversation" name="protocol_conversation">Protocol Conversation</h2>

<p>The core UAF protocol consists of conceptual conversations between a FIDO UAF Client and FIDO Server.</p>

<ol><li><p><strong> Registeration.</strong></p></li>
<p>UAF allows the relying party to register a FIDO Authenticator with the user's account at the relying party. The relying party can specify a policy for supporting various FIDO Authenticator types. A FIDO UAF Client will only register existing authenticators in accordance with that policy.</p>

<pre class="prettyprint">
void
start_registration(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_get_response_message(json_reg, NULL, _process_cb, data);
}

static void
_process_cb(fido_error_e tizen_error_code, const char *uaf_response, void *user_data)
{
&nbsp;&nbsp;&nbsp;char str[2048] = {0,};
&nbsp;&nbsp;&nbsp;if (tizen_error_code == 0 && uaf_response != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const int max_popup_str_len = strlen(uaf_response) + 500;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *popup_str = calloc(1, max_popup_str_len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(popup_str, max_popup_str_len - 1, "UAF Response =%s", uaf_response);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create_popup(popup_str, (appdata_s *) user_data);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(popup_str);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<li><p><strong>Authentication.</strong></p></li>
<p>UAF allows the relying party to prompt the end user to authenticate using a previously registered FIDO Authenticator. This authentication can be invoked any time, at the relying party's discretion.</p>

<pre class="prettyprint">
void
start_auth(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_get_response_message(json_auth, NULL, _process_cb, data);
}
</pre>

<li><p><strong>Deregistration.</strong></p></li>
<p>The relying party can trigger the deletion of the account-related authentication key material.</p>

<pre class="prettyprint">
void
start_de_registration(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_get_response_message(json_dereg, NULL, _process_dereg_cb, data);
}

static void
_process_dereg_cb(int tizen_error_code, char *uaf_response, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *error_string = get_error_code(tizen_error_code);
&nbsp;&nbsp;&nbsp;create_popup(error_string, (appdata_s *) user_data);
&nbsp;&nbsp;&nbsp;free(error_string);
}
</pre></ol>
<h2 id="set_server_result" name="set_server_result" class="items-tit-h2">Set Server Result</h2>

<p>Set Server Result is used to indicate the status code resulting from a FIDO UAF message delivered to the remote server.</p>
<ol><li><p><strong>Set Server Result with Success</strong></p></li>


<pre class="prettyprint">
void
start_notify_pos(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;if (json_reg != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int ret = fido_uaf_get_response_message(json_reg, NULL, _process_cb_for_notify_pos, data);
}

static void
_process_cb_for_notify_pos(fido_error_e tizen_error_code, const char *uaf_response, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_set_server_result(FIDO_SERVER_STATUS_CODE_OK, uaf_response);

&nbsp;&nbsp;&nbsp;char *error_string = get_error_code(tizen_error_code);
&nbsp;&nbsp;&nbsp;create_popup(error_string, (appdata_s *) user_data);
&nbsp;&nbsp;&nbsp;free(error_string);
}
</pre>

<li><p><strong>Set Server Result with Failure</strong></p></li>

<pre class="prettyprint">
void
start_notify_neg(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_get_response_message(json_reg, NULL, _process_cb_for_notify_neg, data);
}

static void
_process_cb_for_notify_neg(fido_error_e tizen_error_code, const char *uaf_response, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = fido_uaf_set_server_result(0, uaf_response);

&nbsp;&nbsp;&nbsp;char *error_string = get_error_code(tizen_error_code);
&nbsp;&nbsp;&nbsp;create_popup(error_string, (appdata_s *) user_data);
&nbsp;&nbsp;&nbsp;free(error_string);
}
</pre></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
