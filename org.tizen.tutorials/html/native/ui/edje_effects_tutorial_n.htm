<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Edje Animation: Using the Edje Library to Create Animations</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a class="opensection" href="#startup">Animating on Application Start-up</a>
			</li>
			<li><a class="opensection" href="#click">Animating Object on Click</a>
			</li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">		
			<li><a href="../../../../org.tizen.guides/html/native/ui/animations_effects_n.htm#edje_animation">Edje Animation Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje__Animation.html">Edje Animation API</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Edje Animation: Using the Edje Library to Create Animations</h1>
  <div class="cont"><div class="static-cont">
  
<p>One of the greatest strengths of EFL and Edje is the ability to create animations. This tutorial demonstrates how <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> can create pre-defined animations, but you can also use the Edje library to create your own animations.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Edje Animation API basics by learning about:</p>
	<ul>
		<li><a class="opensection" href="#startup">Animating on Application Start-up</a>
		<p>Run an animation on application start-up.</p></li>
		<li><a class="opensection" href="#click">Animating Object on Click</a>
		<p>Animate an object when clicking.</p></li>
	</ul>

<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>

		<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
 <h2 id="startup" name="startup" class="items-tit-h2">Animating on Application Start-up</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 

<p>The goal of this tutorial is to create an animation target and buttons to start animations, all this in an EDC (Edje Data Collection) file.</p>
<p>First create an application using Basic EDC UI Application. This model provides a simple application just like the one used in the previous chapter, but with one more element: an <span style="font-family: Courier New,Courier,monospace">.edc</span> file.</p>
<p>Animations can be run at application startup. By default the Basic EDC UI Application model produces an empty window with a title. In this example a Tizen logo is added to the window and the behavior of the window title is changed.</p>
<p>The images used by the Edje file are stored in the <span style="font-family: Courier New,Courier,monospace">edje/images</span> directory of the application. Copy the Tizen logo available in <span style="font-family: Courier New,Courier,monospace">shared/res/&lt;yourapplicationname&gt;.png</span> into the Edje images directory <span style="font-family: Courier New,Courier,monospace">edje/images</span>. Add then the image to the Edje images collection.</p>
<pre class="prettyprint">images 
{
&nbsp;&nbsp;&nbsp;image: &quot;edceffects.png&quot; COMP;
&nbsp;&nbsp;&nbsp;image: &quot;tizen-logo.png&quot; COMP;
}
</pre>

<p>Then add an Edje part using the small logo: this part has two states. This is the first important notion for animations. The <span style="font-family: Courier New,Courier,monospace">STATE</span> describes the appearance of a part: size, position, color, etc.</p>
<p>In this example, the part has two states, default and down-state:</p>
<pre class="prettyprint">// An image using the tizen logo
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image { normal: &quot;small-logo.png&quot;; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 0.0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.92;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.05 1.0;
&nbsp;&nbsp;&nbsp;}
}
</pre><p>The logo part has the <span style="font-family: Courier New,Courier,monospace">IMAGE</span> type. The default state contains in the first description of the part sets:</p>
<ul class="ul">
<li>the maximum and minimum size using the <span style="font-family: Courier New,Courier,monospace">min</span> and <span style="font-family: Courier New,Courier,monospace">max</span> statements</li>
<li>the image to use in this <span style="font-family: Courier New,Courier,monospace">part</span></li>
<li>the default position.</li>
</ul>
<p>The second state, down-state, inherits all of the default&#39;s attributes, and only changes the position to put the image at the bottom of the application window.</p>
<p>These two states are the start and end states of the animation. To actually create the animation, add a <span style="font-family: Courier New,Courier,monospace">program</span> to the Edge <span style="font-family: Courier New,Courier,monospace">programs</span> collection.</p>
<pre class="prettyprint">// Icon drop animation
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,state1&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;transition: BOUNCE 2.5 0.0 5.0;
}
</pre><p>This program is named <span style="font-family: Courier New,Courier,monospace">animation,state1</span> and is started when the application receives the <span style="font-family: Courier New,Courier,monospace">load</span> signal immediately on startup. It runs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action so it changes the object state from default to down-state. The target of the program is the logo <span style="font-family: Courier New,Courier,monospace">part</span>.</p>
<p>In order to switch from one state to another, it uses a <span style="font-family: Courier New,Courier,monospace">transition</span> of the <span style="font-family: Courier New,Courier,monospace">BOUNCE</span> type with three parameters, the <span style="font-family: Courier New,Courier,monospace">FIXME</span>, the <span style="font-family: Courier New,Courier,monospace">FIXME</span>, and the duration which here is set to five seconds.</p>
<p>This produces an falling and bouncing effect.</p>
<p>Also add an animation for the window title to make it move from the left to the right with a bounce effect while growing the font size.</p>
<p>Create a new state on the part called &quot;txt_title&quot; inside which both the font size and position are changed.</p>
<pre class="prettyprint">part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;mouse_events: 0;

&nbsp;&nbsp;&nbsp;// The default State
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 24;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// The &quot;Bigger&quot; state
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;Bigger&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.75 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 28;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>Create a program to animate this part on startup, just like the small Tizen logo.</p>
<pre class="prettyprint">// Make the title bigger
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,bigtitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;Bigger&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 5.0;
}
</pre>
<p>This program goes from the default state to the bigger state in five seconds with a <span style="font-family: Courier New,Courier,monospace">LINEAR</span> effect, automatically running on the application startup.</p>
	</div>
		</li>			
		<li>
			<div class="devicespec-tit">
 <h2 id="click" name="click" class="items-tit-h2">Animating Object on Click</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 
<p>All the previous animations are automatic and do not have any relation with the user&#39;s actions. Next animate a part by clicking on another one. Make the title restore its default aspect when clicking on the small logo.</p>
<p>The parts and the states are already defined. The animation goes back to the default state, there is no need to add any parts or states: only add a program which makes the transition when clicking on logo part.</p>
<pre class="prettyprint">// Make the title go back to normal
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;animation,normaltitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.5;
}
</pre><p>This program starts when the application receives the signal <span style="font-family: Courier New,Courier,monospace">mouse,clicked,*</span> (any button of the mouse is clicked) from the part called logo, (<span style="font-family: Courier New,Courier,monospace">source</span>). It performs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action and sets the default state on the target <span style="font-family: Courier New,Courier,monospace">txt_file</span> part with a <span style="font-family: Courier New,Courier,monospace">LINEAR</span> transition.</p>
<p>When clicking any mouse button on the small logo, the title goes back to its original state.</p>
<h3>Rotating Parts</h3>
<p>Next add two more buttons to the application and create programs to animate a target.</p>
<p>It is possible to create a button with Edje from scratch, but to save time, the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part is used in this example to store Elementary widgets.</p>
<p>First create the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts, and then the <span style="font-family: Courier New,Courier,monospace">Elementary</span> widgets in the <span style="font-family: Courier New,Courier,monospace">.c</span> file.</p>
<pre class="prettyprint">// Container for the rotate button
part 
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.10 0.80;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.30 0.90;
&nbsp;&nbsp;&nbsp;}
}
</pre><p>This part is called <span style="font-family: Courier New,Courier,monospace">btn/rotate</span>, it only has a <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> type and a default state with its position being on the bottom left of the screen.</p>
<pre class="prettyprint">// Container for the grow button
part 
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 1.02 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 2.02 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre><p>This second <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part is very similar to the first one. It is placed relatively to <span style="font-family: Courier New,Courier,monospace">btn/rotate</span>, in order to remain next to it.</p>
<p>Next create the actual widgets. This is done in the <span style="font-family: Courier New,Courier,monospace">.c</span> file and is very similar to what is done for the buttons in the first chapter.</p>
<p>This code is added to the <span style="font-family: Courier New,Courier,monospace">create_base_ui</span> function.</p>
<pre class="prettyprint">// Creation button in the app window
ad-&gt;button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;button, &quot;Rotate&quot;);
// Add the button to the edje layout container called &quot;btn/rotate&quot;
elm_object_part_content_set(ad-&gt;layout, &quot;btn/rotate&quot;, ad-&gt;button);
evas_object_show(ad-&gt;button);

// Creation a up button in the app window
ad-&gt;btn_up = elm_button_add(ad-&gt;win);
// Add the button to the edje layout container called &quot;btn/grow&quot;
elm_object_text_set(ad-&gt;btn_up, &quot;Grow&quot;);
elm_object_part_content_set(ad-&gt;layout, &quot;btn/grow&quot;, ad-&gt;btn_up);
evas_object_show(ad-&gt;btn_up);
</pre><p>In the default Basic EDC UI Application, the Edje layout is loaded by default. Create two Elementary buttons and add them to the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> containers, without having to setup sizes or positions as this is done in the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> container.</p>
<p>Note that the part name is very important because it is used to be merged the Elementary widget and the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part.</p>
<p>When the buttons placed and set, create the animation target. it is done in the EDC file.</p>
<p>Add the animation target part.</p>
<p>The part initialization and the default <span style="font-family: Courier New,Courier,monospace">state</span>:</p>
<pre class="prettyprint">// The animation target
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;

&nbsp;&nbsp;&nbsp;// Default state
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image { normal: &quot;tizen-logo.png&quot;; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 0 0 255; /* red */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.3 0.3; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.7 0.4; }
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>This <span style="font-family: Courier New,Courier,monospace">part</span> is an image displaying a big Tizen logo, placed on the top of the screen more or less centered.</p>
<p>Create a state to change the color and add the <span style="font-family: Courier New,Courier,monospace">map</span> statement.</p>
<pre class="prettyprint">// The rotate state
description 
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;

&nbsp;&nbsp;&nbsp;map 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Enable Map on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Enable smooth rendering
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smooth: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Enable perspective
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perspective_on: 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Apply rotations on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.x: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.y: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.z: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;color: 0 255 0 255; /* green */
}
</pre><p>This part changes the color to green and defines the <span style="font-family: Courier New,Courier,monospace">map</span>. This statement makes rotations possible on an Edje <span style="font-family: Courier New,Courier,monospace">part</span>. Rotations are done around the x, y or z axes. In this example, the map is enabled and a 0&#176; rotation is applied around each axis.</p>
<p>Add a state with a rotation around the z axis of 360&#176;.</p>
<pre class="prettyprint">description 
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;map.rotation.z: 360;
}
</pre><p>This <span style="font-family: Courier New,Courier,monospace">state</span> inherits from the default state parameters and add a rotation around the z axis.</p>
<p>Finally add a state to the other button animation grow. Change the size of the animation target and add an offset.</p>
<pre class="prettyprint">// The grow state
description {
&nbsp;&nbsp;&nbsp;state: &quot;grow&quot; 0.0;
&nbsp;&nbsp;&nbsp;color: 0 0 255 255; /* blue */
&nbsp;&nbsp;&nbsp;rel1 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.2 0.2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;rel2 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.7 0.4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
}
</pre><p>The last step is to create the programs to make all these states animate.</p>
<p>To make the rotation animation smoother, create and chain several <span style="font-family: Courier New,Courier,monospace">programs</span> with different durations.</p>
<p>First create the main one: it goes from the default state to the rotate 0.0 state in 0.2 seconds.</p>
<p>Note that the states are all named the same way (rotate) but not with the same version. This version allows you to have more than one state with the same name, in fact the actual name of the state is the name plus the version.</p>
<pre class="prettyprint">// Change the color of target to green
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.2;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,target,2&quot;;
}
</pre><p>The program starts when the <span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part is clicked with any mouse button. When the animation ends, it calls the next one called <span style="font-family: Courier New,Courier,monospace">rotate,target,2</span>.</p>
<pre class="prettyprint">// Rotate 360&#176;
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target,2&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.7;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,end&quot;;
}
</pre><p>This program sets the part state to <span style="font-family: Courier New,Courier,monospace">rotate 1.0</span> in 0.7 seconds, and when done calls the next one <span style="font-family: Courier New,Courier,monospace">rotate,end</span>.</p>
<pre class="prettyprint">// Go back to the normal.
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,end&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.2;
}
</pre><p><span style="font-family: Courier New,Courier,monospace">rotate,end</span> is the last program of the rotation effect: it sets the state to <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> very fast.</p>
<p>The last program of this example is the grow effect, it switches from one state to another.</p>
<pre class="prettyprint">// Grow the target and go back to normal state
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;grow,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;grow&quot; 1.0;
&nbsp;&nbsp;&nbsp;after: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SINUSOIDAL 1.0;
}
</pre><p>It starts when the <span style="font-family: Courier New,Courier,monospace">btn/grow</span> part is clicked, it goes from the current state to <span style="font-family: Courier New,Courier,monospace">grow 1.0</span> in one second. It then calls the <span style="font-family: Courier New,Courier,monospace">go,default</span> program. In this program, both size and color change during the transition.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">go,default</span> program sets the status back default for the animation target.</p>
<pre class="prettyprint">// Go back to normal (default) state
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 1.0;
}
</pre>

	</div>
		</li>			
	</ul>	
</div>				
</div>	

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
