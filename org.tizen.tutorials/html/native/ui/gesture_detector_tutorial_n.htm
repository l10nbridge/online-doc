<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Gesture Detector: Implementing Gestures Provided by the EFL Library</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a class="opensection" href="#init">Initializing Touch Gestures</a></li>
			<li><a class="opensection" href="#touch">Implementing Touch Gestures</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/ui/events_effects_n.htm">Event and Effect Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__UI__FRAMEWORK.html">UI API</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Gesture Detector: Implementing Gestures Provided by the EFL Library</h1>
  <div class="cont"><div class="static-cont">
  
<p>This tutorial demonstrates how you can implement different types of gestures provided by the EFL library and instructions on how to use them.</p>

<h2>Warm-up</h2>
<p>Become familiar with the UI API basics by learning about:</p> 
	<ul>
		<li><a  class="opensection" href="#init">Initializing Touch Gestures</a>
		<p>Initialize the touch gestures for use.</p></li>
		<li><a  class="opensection" href="#touch">Implementing Touch Gestures</a>
		<p>Implement different kinds of touch gestures.</p></li>
	</ul>

<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>

		<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
 <h2 id="init" name="init" class="items-tit-h2">Initializing Touch Gestures</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 
<p>The EFL library provides a wide range of touch gestures, such as tap, double tap, triple tap, long tap, momentum, line, zoom and rotate, which can be used by the application to build a dynamic user interface interaction which is simple to use as well as intuitive.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui</span> function creates the application layout. It starts by creating a window, then adds the <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> widget to it to decorate the window with an indicator. It then adds the <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> widget which acts as a view manager for the window and provides the window title functionality. After this it creates a gesture view by using the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function and adds it to naviframe.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it, *tabbar_it;
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;// Calendar View
&nbsp;&nbsp;&nbsp;create_main_view(ad);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(ad-&gt;nf, &quot;Calendar&quot;, NULL, NULL, ad-&gt;calendar, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;elm.swallow.content&quot;, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;// Show window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view</span> function creates the application layout by arranging the labels and rectangles by using recursive composition of the box layout:</p>
<pre class="prettyprint">
static void
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;ad-&gt;box = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;box, EVAS_HINT_EXPAND, VAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(ad-&gt;box, 0, 5 * elm_config_scale_get());
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;box);
&nbsp;&nbsp;&nbsp;// Event Rect
&nbsp;&nbsp;&nbsp;ad-&gt;rect = evas_object_rectangle_add(evas_object_evas_get(ad-&gt;box));
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;rect, EVAS_HINT_EXPAND, VAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;rect, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;rect, 204, 204, 204, 255);
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(ad-&gt;rect, EINA_TRUE);

&nbsp;&nbsp;&nbsp;ad-&gt;gl = create_gesture_layer(ad);

&nbsp;&nbsp;&nbsp;elm_box_pack_end(ad-&gt;box, ad-&gt;rect);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;rect);
}
</pre>

<p>A gesture layer is added to the rectangle object. This layer is able to receive the gesture event:</p>
<pre class="prettyprint">
static Evas_Object *
create_gesture_layer(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *g = elm_gesture_layer_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_gesture_layer_attach(g, ad-&gt;rect);
}
</pre>

<p>The following figure illustrates the Gesture Detector.</p>

  <p class="figure">Figure: Gesture Detector screen</p> 
  <p style="text-align:center;"><img alt="Gesture Detector screen" src="../../images/gesture_view2.png" /></p> 
	</div>
		</li>	
		<li>
			<div class="devicespec-tit">
 <h2 id="touch" name="touch" class="items-tit-h2">Implementing Touch Gestures</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 
<p>The <span style="font-family: Courier New,Courier,monospace">elm_gesture_layer_attach()</span> is the function to which a gesture layer for a particular object is attached.</p>
<p>A gesture can have 4 different states:</p>
<ul class="ul">
<li><span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_START</span></li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_MOVE</span></li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_ABORT</span></li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_END</span></li></ul>
<p>Every gesture starts with the <span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_START</span> state and finishes with either the <span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_END</span> or <span style="font-family: Courier New,Courier,monospace">ELM_GESTURE_STATE_ABORT</span> state depending on whether the gesture is completed or aborted on that object. </p>
<p>If an application only needs to track a finished gesture, it can listen for the finished state only. For a more complete control of the gesture, an application can listen for all state changes for that particular gesture.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">Elm_gesture_layer_cb_set()</span> API is used for registering state change callback for a particular gesture.</p>
<p>For more information about the gestures, see the gesture documentation.</p>

<p>To detect touch gestures:</p>
<ul class="ul">
<li><p>The following example adds callbacks for listening to the tap gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, n_finger_tap_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, n_finger_tap_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, n_finger_tap_abort, ad);
</pre></li>
<li><p>The following example adds callbacks for listening to the double tap gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_DOUBLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, dbl_click_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_DOUBLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, dbl_click_move, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_DOUBLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, dbl_click_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_DOUBLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, dbl_click_abort, ad);
</pre></li>

<li><p>The following example adds callbacks for listening to the triple tap gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TRIPLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, triple_click_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TRIPLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, triple_click_move, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TRIPLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, triple_click_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_TRIPLE_TAPS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, triple_click_abort, ad);
</pre></li>
<li><p>The following example adds callbacks for listening to the long tap gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, momentum_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, momentum_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, momentum_abort, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, momentum_move, ad);
</pre></li>

<li><p>The following example adds callbacks for listening to the momentum gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, momentum_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, momentum_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, momentum_abort, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_MOMENTUM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, momentum_move, ad);
</pre></li>

<li><p>The following example adds callbacks for listening to the line gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_LINES,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, line_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_LINES,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, line_move, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_LINES,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, line_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_LINES,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, line_abort, ad);
</pre></li>
 
<li><p>The following examples add callbacks for listening to the flick gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_FLICKS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, flick_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_FLICKS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, flick_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_N_FLICKS,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, flick_abort, ad);
</pre></li>

<li><p>The following examples add callbacks for listening to the zoom gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_ZOOM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, zoom_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ZOOM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, zoom_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ZOOM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, zoom_abort, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ZOOM,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, zoom_move, ad);
</pre></li>
 
<li><p>The following example adds callbacks for listening to the rotate gesture:</p>
<pre class="prettyprint">
elm_gesture_layer_cb_set(g, ELM_GESTURE_ROTATE,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_START, rotate_start, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ROTATE,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_END, rotate_end, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ROTATE,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_ABORT, rotate_abort, ad);
elm_gesture_layer_cb_set(g, ELM_GESTURE_ROTATE,
&nbsp;&nbsp;&nbsp;ELM_GESTURE_STATE_MOVE, rotate_move, ad);
</pre></li>

<li><p>The following example adds a callback for getting the tap gesture finishing notification:</p>
<pre class="prettyprint">
static Evas_Event_Flags
n_finger_tap_end(void *data, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Elm_Gesture_Taps_Info *p = (Elm_Gesture_Taps_Info *) event_info;
&nbsp;&nbsp;&nbsp;return EVAS_EVENT_FLAG_ON_HOLD;
}
</pre></li>
</ul>
	</div>
		</li>			
	</ul>	
</div>				
</div>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
