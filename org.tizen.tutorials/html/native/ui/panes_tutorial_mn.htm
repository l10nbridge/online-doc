<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Panes: Using Panes</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Application</a></li>
		<li><a href="#create">Creating a Panes Component</a></li>
		<li><a href="#config">Configuring the Panes</a></li>
		<li><a href="#signals">Handling Signals</a></li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/ui/containers_mn.htm#panes">Panes Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>		
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Panes: Using Panes</h1>

  
<p>This tutorial explains how to use Panes in the application.</p>

 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>

<h2>Warm-up</h2>
<p>Become familiar with the Elementary and Evas API basics by learning about:</p>
	<ul>
		<li><a href="#init">Initializing the Application</a>
		<p>Initialize the application for use.</p></li>
		<li><a href="#create">Creating a Panes Component</a>
		<p>Create panes to the application.</p></li>
		<li><a href="#config">Configuring the Panes</a>
		<p>Change the pane settings and layout.</p></li>
		<li><a href="#signals">Handling Signals</a>
		<p>Handle signals based on user interaction.</p></li>
	</ul> 

 <h2 id="init" name="init">Initializing the Application</h2>

<p>This is how to start an Appcore application.</p>
<pre class="prettyprint">#include &lt;Elementary.h&gt;
#include &lt;app.h&gt;

struct _appdata 
{
&nbsp;&nbsp;&nbsp;const char *name;
&nbsp;&nbsp;&nbsp;Evas_Object *win;
};

static void app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;struct _appdata *ad;

&nbsp;&nbsp;&nbsp;if (!user_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ad = user_data;

&nbsp;&nbsp;&nbsp;if (ad-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(ad-&gt;win);
}

static bool app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;struct _appdata *ad;
&nbsp;&nbsp;&nbsp;Evas_Object *win, *conformant, *naviframe, *panes, *panes_h, *nav_it, *bt;

&nbsp;&nbsp;&nbsp;if (!user_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;ad = user_data;

&nbsp;&nbsp;&nbsp;// Create window 
&nbsp;&nbsp;&nbsp;elm_policy_set(ELM_POLICY_QUIT, ELM_POLICY_QUIT_LAST_WINDOW_CLOSED);
&nbsp;&nbsp;&nbsp;win = elm_win_util_standard_add(&quot;panes&quot;, &quot;Panes tutorial&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (!win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;ad-&gt;win = win;

&nbsp;&nbsp;&nbsp;// Add elm_conformant 
&nbsp;&nbsp;&nbsp;conformant = elm_conformant_add(win);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(win, conformant);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(conformant, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(conformant);

&nbsp;&nbsp;&nbsp;// Add naviframe to conformant 
&nbsp;&nbsp;&nbsp;naviframe = elm_naviframe_add(conformant);
&nbsp;&nbsp;&nbsp;elm_object_content_set(conformant, naviframe);
&nbsp;&nbsp;&nbsp;evas_object_show(naviframe);

&nbsp;&nbsp;&nbsp;evas_object_resize(win, 320, 400);
&nbsp;&nbsp;&nbsp;evas_object_show(win);

&nbsp;&nbsp;&nbsp;return true;
}

int main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, ui_app_region_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_remove_event_handler(handlers[APP_EVENT_LOW_MEMORY]);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
<p>The code above creates a window entitled &quot;Panes tutorial&quot;, composed of a conformant component that contains a naviframe component. To add a new Panes object, use the <span style="font-family: Courier New,Courier,monospace">_create()</span> function.</p>

 <h2 id="create" name="create">Creating a Panes Component</h2>

<p>The elm_panes component adds a draggable bar between two contents. When dragged, this bar resizes the contents&#39; size. To create a new Panes into an Elementary object, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_add()</span> function:</p>
<pre class="prettyprint">// Add an elm_panes 
panes = elm_panes_add(naviframe);
evas_object_size_hint_weight_set(panes, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(win, panes);
evas_object_show(panes);

nav_it = elm_naviframe_item_push (naviframe, &quot;Panes view&quot;, NULL, NULL, panes, NULL);
</pre>
<p>Here the Panes is created and added in the naviframe.</p>

 <h2 id="config" name="config">Configuring the Panes</h2>

<p>By default, the orientation of the Panes is vertical. To modify the orientation, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_horizontal_set()</span> function.</p>
<pre class="prettyprint">// Add a horizontal elm_panes 
panes_h = elm_panes_add(naviframe);
elm_panes_horizontal_set(panes_h, EINA_TRUE);
</pre>
<p>The code above creates another Panes object and sets the horizontal orientation. To add content in a panes, use the <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function. Here we add the horizontal Panes (panes_h) to the &quot;left&quot; part of the first created Panes (panes).</p>
<pre class="prettyprint">elm_object_part_content_set(panes, &quot;left&quot;, panes_h);
</pre>

<p>This is how to set a button object to the &quot;right&quot; side of our vertical Panes component.</p>
<pre class="prettyprint">// Create a button object 
bt = elm_button_add(naviframe);
elm_object_text_set(bt, &quot;Right&quot;);
evas_object_size_hint_weight_set(bt, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(bt, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(bt);

// and set it to the &quot;right&quot; part of the vertical Panes 
elm_object_part_content_set(panes, &quot;right&quot;, bt);
</pre>

<p>The content of the horizontal Panes is set with two button objects (up and down). When populating a vertically displayed Panes, the left content is placed at the top, and the right content is placed at the bottom.</p>
<pre class="prettyprint">// Create a &quot;Up&quot; button 
bt = elm_button_add(naviframe);
elm_object_text_set(bt, &quot;Up&quot;);
evas_object_size_hint_weight_set(bt, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(bt, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(bt);
elm_object_part_content_set(panes_h, &quot;left&quot;, bt);

// Create a &quot;Down&quot; button 
bt = elm_button_add(naviframe);
elm_object_text_set(bt, &quot;Down&quot;);
evas_object_size_hint_weight_set(bt, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(bt, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(bt);
elm_object_part_content_set(panes_h, &quot;right&quot;, bt);
</pre>

<p>The elm_panes can be dragged with the mouse but the proportion can also be set with the <span style="font-family: Courier New,Courier,monospace">elm_panes_content_left_size_set()</span> and <span style="font-family: Courier New,Courier,monospace">elm_panes_content_right_size_set()</span> functions. As an example, this is how to set the left size of both panes to 80%.</p>
<pre class="prettyprint">// Set the proportion of the panes to 80% 
elm_panes_content_left_size_set(panes, 0.8);
elm_panes_content_left_size_set(panes_h, 0.8);
</pre>

<p>The Panes proportions can also be fixed so that the user is not able to drag them. To do this, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_fixed_set()</span> function.</p>
<pre class="prettyprint">// Fix the Panes proportion 
elm_panes_fixed_set(panes_h, EINA_TRUE);
</pre>

 <h2 id="signals" name="signals">Handling Signals</h2>

<p>The Panes components emit four different signals, depending on the users&#39; interaction with the draggable bar.</p>
<ul>
<li>&quot;press&quot; - The pane is pressed.</li>
<li>&quot;unpressed&quot; - The pane is released after being pressed.</li>
<li>&quot;clicked&quot; - The pane is clicked.</li>
<li>&quot;clicked,double&quot; - The pane is double clicked.</li>
</ul>
<p>We add a callback function for each of them.</p>

<h3>&quot;clicked&quot; Signal </h3>

<p>The callback function for the clicked signal prints &quot;Clicked&quot; to standard output.</p>
<pre class="prettyprint">// clicked callback 
static void
_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, PANES_TAG, &quot;Clicked\n&quot;);
}
</pre>

<p>This is how to register this callback function to the vertical panes.</p>
<pre class="prettyprint">evas_object_smart_callback_add(panes, &quot;clicked&quot;, _clicked_cb, panes);
</pre>

<h3>&quot;press&quot; Signal </h3>

<p>The callback function for the &quot;press&quot; signal prints &quot;Pressed&quot; to the standard output.</p>
<pre class="prettyprint">// press callback 
static void
_press_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, PANES_TAG, &quot;Pressed\n&quot;);
}
</pre>

<p>This is how to register this callback function to the vertical panes.</p>
<pre class="prettyprint">evas_object_smart_callback_add(panes, &quot;press&quot;, _press_cb, panes);
</pre>

<h3>&quot;unpress&quot; Signal </h3>

<p>For the &quot;unpress&quot; signal, the proportion size of the left content of the Panes component is printed to the standard output. To do this, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_content_left_size_get()</span> function.</p>
<pre class="prettyprint">// unpress callback 
static void
_unpress_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, PANES_TAG, &quot;Unpressed, size : %f\n&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_panes_content_left_size_get(obj));
}
</pre>
<p>This is how to register this callback function to the Panes.</p>
<pre class="prettyprint">evas_object_smart_callback_add(panes, &quot;unpress&quot;, _unpress_cb, panes);
</pre>

<h3>&quot;clicked,double&quot; Signal </h3>

<p>Hide the left part of the Panes component on the &quot;clicked,double&quot; signal and set the left proportion to 0.0. To restore the left part proportion with a double click on the hidden part of the Panes component, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_content_left_size_get()</span> and <span style="font-family: Courier New,Courier,monospace">elm_panes_content_left_size_set()</span> functions, and a variable to store the value of the current proportion.</p>

<pre class="prettyprint">// double clicked callback 
static void
_clicked_double_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;static double size = 0.0;
&nbsp;&nbsp;&nbsp;double tmp_size = 0.0;
&nbsp;&nbsp;&nbsp;tmp_size = elm_panes_content_left_size_get(obj);
&nbsp;&nbsp;&nbsp;if (tmp_size &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_panes_content_left_size_set(obj, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, PANES_TAG, &quot;Double clicked, hidden.\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_panes_content_left_size_set(obj, size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, PANES_TAG,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   &quot;Double clicked, restoring size.\n&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;size = tmp_size;
}
</pre>

<p>This is how to register this callback function to the Panes.</p>
<pre class="prettyprint">evas_object_smart_callback_add(panes, &quot;clicked,double&quot;, _clicked_double_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;panes);
</pre>

<p class="figure">Figure: Panes tutorial in action</p> 
<p align="center"><img alt="Panes tutorial in action" src="../../images/pane_tuto.png" /></p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
