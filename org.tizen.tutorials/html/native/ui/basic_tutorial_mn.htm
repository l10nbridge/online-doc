<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Basic: Using Basic Interactions</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#button">Using Buttons</a></li>
			<li><a href="#simple_text">Using Simple Text</a></li>
			<li><a href="#simple_list">Using Simple Lists</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/ui/components_mn.htm">Components Guide for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>		
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Basic: Using Basic Interactions</h1>

  
<p>This tutorial teaches the basics of UI components interactions. It builds upon the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a>.</p>

 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>

<h2>Warm-up</h2>
<p>Become familiar with the Elementary and Evas API basics by learning about:</p>
	<ul>
		<li><a href="#button">Using Buttons</a>
		<p>Use buttons in your application.</p></li>
		<li><a href="#simple_text">Using Simple Text</a>
		<p>Use simple text and text styles in your application.</p></li>
		<li><a href="#simple_list">Using Simple Lists</a>
		<p>Use different kinds of lists in your application.</p></li>
	</ul>

 <h2 id="button" name="button">Using Buttons</h2>

<p>The basic application code is the same as in the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a>.</p>

<h3>Button Styles </h3>
<h4>Basic Text Button</h4>

<p>To create a text-only button, use the following code.</p>
<pre class="prettyprint">Evas_Object* button;

button = elm_button_add(box);
elm_object_text_set(button, &quot;Click me&quot;);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>

<h4>Basic Icon Button</h4>
<p>Instead of a button with text, create a button with an icon.</p>
<pre class="prettyprint">Evas_Object* button2;
Evas_Object* icon2;

button2 = elm_button_add(box);
icon2 = elm_icon_add(box);
elm_image_file_set(icon2, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button2, &quot;icon&quot;, icon2);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>

<h4>Icon and Text Button</h4>
<p>Create buttons with both an icon and a text label.</p>
<pre class="prettyprint">Evas_Object* button3;
Evas_Object* icon3;
button3 = elm_button_add(box);
icon3 = elm_icon_add(box);
elm_image_file_set(icon, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button3, &quot;icon&quot;, icon3);
elm_object_text_set(button3, &quot;Press me&quot;);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>

<h4>Disabled Button</h4>
<p>To disable a button so that it is not in use, only shown.</p>
<pre class="prettyprint">elm_object_disabled_set(button2, EINA_TRUE);
</pre>

<h3>Callbacks </h3>
<p>The Elementary buttons respond to user interactions with several events.</p>

<h4>Click Event</h4>
<p>The &quot;click&quot; event is the most basic and well-known one. The following code snippet changes the text of a button upon a click event: a press followed by an unpress.</p>
<pre class="prettyprint">
static void _button_click_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Clicked!&quot;);
}
evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_click_cb, NULL);
</pre>

<h4>Press/Unpress Events</h4>
<p>The button can respond to the press and unpress events instead of the entire click event.</p>
<pre class="prettyprint">static void _button_press_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Pressed!&quot;);
}
static void _button_unpress_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Unpressed!&quot;);
}

evas_object_smart_callback_add(button3, &quot;pressed&quot;, _button_press_cb, NULL);
evas_object_smart_callback_add(button3, &quot;unpressed&quot;, _button_unpress_cb, NULL);
</pre>

<h4>Repeated Events</h4>
<p>The button can receive several events in case it is being held by the user. Timings, such as the initial timeout and the repeat interval, can be set. In this example, the initial timeout is set to 1 second, and the repeat interval to half a second.</p>
<pre class="prettyprint">static void _button_repeat_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;static int count = 0;
&nbsp;&nbsp;&nbsp;char buf[16];

&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;Repeat %d&quot;, count++);

&nbsp;&nbsp;&nbsp;elm_object_text_set(button, buf);
}

elm_button_autorepeat_set(button3, EINA_TRUE);
elm_button_autorepeat_initial_timeout_set(button3, 1.0);
elm_button_autorepeat_gap_timeout_set(button3, 0.5);
evas_object_smart_callback_add(button3, &quot;repeated&quot;, _button_repeat_cb, NULL);
</pre>

 <h2 id="simple_text" name="simple_text">Using Simple Text</h2>

<h3>Basic Text</h3>
<p>To create a label object, use the following code.</p>
<pre class="prettyprint">label = elm_label_add(ad-&gt;win);
elm_object_text_set(label, &quot;My label&quot;);
evas_object_show(label);
</pre>

<h3>Sliding Text</h3>
<p>If your text is too long, set it to slide. The duration of the slide is set to five seconds in the following example. There are several styles available:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">slide_short</span>: The text stops at an edge, reverts to its initial position and slides again.</li>
<li><span style="font-family: Courier New,Courier,monospace">slide_long</span>: The text is originally empty. It slides in, all the way to the edge, continues sliding until the label is empty, and loops.</li>
<li><span style="font-family: Courier New,Courier,monospace">slide_bounce</span>: The text moves backwards after stopping at the edge. In the example, it is set to bounce.</li>
</ul>

<pre class="prettyprint">Evas_Object* label;
label = elm_label_add(-&gt;win);
elm_object_text_set(label, &quot;This text is supposed to be really long.&quot;);
elm_label_slide_set(label, EINA_TRUE);
elm_label_slide_duration_set(label, 5.);
elm_object_style_set(label, &quot;slide_bounce&quot;);
evas_object_show(label);
</pre>

<p>If needed, you can use the <span style="font-family: Courier New,Courier,monospace">slide,end</span> event to respond to the moment when the sliding text reaches its end.</p>

<h3>Marker Text</h3>
<p>A marker is a text that is centered and bold by default. As the default color is white, set the blue color in this example.</p>
<pre class="prettyprint">elm_object_style_set(label, &quot;marker&quot;);
evas_object_color_set(label, 0, 0, 255, 255);
</pre>

<h3>Styling the Text</h3>
<p>You can apply basic styles to the text. For a bolded text, do as follows.</p>
<pre class="prettyprint">elm_object_text_set(label, &quot;&lt;b&gt;This text is bold.&lt;/b&gt;&quot;);
</pre>

 <h2 id="simple_list" name="simple_list">Using Simple Lists</h2>

<h3>Basic List</h3>
<p>A list is a scrollable container, whose children are selected.</p>
<pre class="prettyprint">Evas_Object* list;
Evas_Object* icon;
list = elm_list_add(ad-&gt;win);
elm_list_item_append(list, &quot;Text item&quot;, NULL, NULL, NULL, NULL);
icon = elm_icon_add(ad-&gt;win);
elm_icon_standard_set(icon, &quot;chat&quot;);
elm_list_item_append(list, &quot;Second item&quot;, icon, NULL, NULL, NULL);
Evas_Object* button;
button = elm_button_add();
elm_object_text_set(button, &quot;Button&quot;);
elm_list_item_append(list, &quot;Fourth item&quot;, NULL, button, NULL, NULL);
elm_list_go(list);
</pre>

<p>Any Evas Object can be added as an icon, either at the beginning (third parameter) or the end (fourth parameter).</p>

<h3>List Orientation</h3>
<p>By default, a list is set vertically. This is how to display it horizontally.</p>
<pre class="prettyprint">elm_list_horizontal_set(list, EINA_TRUE);
</pre>

<h3>List Mode</h3>
<p>There are several modes for the list item dimensions.</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_COMPRESS</span>: The list does not set any size measures to inform the container how to resize it. If the list is not created as a &quot;resize object&quot;, its dimensions are zeroed. The list respects the container&#39;s geometry and if any of the list items do not fit into the container transverse axis, the list does not scroll in that direction.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_SCROLL</span>: This is the default value. This list is the same as ELM_LIST_COMPRESS, with the exception that if any of the list items do not fit into the container transverse axis, the list still scrolls in that direction.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_LIMIT</span>: This list sets a minimum size measure on the list object, so that containers may respect it (and resize themselves to fit the child properly). More specifically, a minimum size measure is set for its transverse axis, so that the largest item in that direction fits well. This feature is bound by the list object&#39;s maximum size measures that are set externally.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_EXPAND</span>: Besides setting a minimum size on the transverse axis, as in <span style="font-family: Courier New,Courier,monospace">ELM_LIST_LIMIT</span>, this list sets a minimum size on the longitudinal axis to reserve space for all its children to be visible at the same time. This feature is bound by the list object&#39;s maximum size measures that are set externally.</li>
</ul>
<pre class="prettyprint">elm_list_mode_set(list, ELM_LIST_COMPRESS);
</pre>

<h3>Scroller Policy</h3>
<p>Several effects are shown on a list.</p>
<p>For example, the scroller is set to bounce at the end on either direction.</p>
<pre class="prettyprint">elm_scroller_bounce_set(list, EINA_TRUE, EINA_TRUE);
</pre>


<p>This is how to control displaying scrollbars. The second argument is for the horizontal axis, the third one for the vertical axis.</p>
<pre class="prettyprint">elm_scroller_policy_set(list, ELM_SCROLLER_POLICY_AUTO, ELM_SCROLLER_POLICY_ON);
</pre>

<p>As for the bounce preference, the second argument is for the horizontal axis, the third one for the vertical axis.</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_OFF</span> hides the scrollbar</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_ON</span> shows the scrollbar</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_AUTO</span> the scrollbar is  shown only when needed and stays hidden at other times</li>
</ul>

<h3>Events</h3>
<p>A list responds to several events:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">activated</span>: The user clicks or presses an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">selected</span>: The user selects an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">unselected</span>: The user unselects an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The user long-presses an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,top</span>: The user scrolls the list to the top edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,bottom</span>: The user scrolls the list to the bottom edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,left</span>: The user scrolls the list to the left edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,right</span>: The user scrolls the list to the right edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">highlighted</span>: An item is pressed and highlighted.</li>
<li><span style="font-family: Courier New,Courier,monospace">unhighlighted</span>: The press and highlight is removed on an item.</li>
</ul>
	
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
