<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Elementary Animations: Applying Transition Effects to an Evas Object</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#setup">Setting Up the Application</a></li>
			<li><a href="#rotate">Creating a Rotation Effect</a></li>
			<li><a href="#zoom">Creating a Zoom Effect</a></li>
			<li><a href="#flip">Creating a Flip Effect</a></li>
			<li><a href="#blend">Creating a Blend Transition</a></li>
			<li><a href="#fade">Creating a Fade Effect</a></li>
			<li><a href="#flip_y">Creating a Flip on y Axis</a></li>
			<li><a href="#wipe">Creating a Wipe Effect</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">		
			<li><a href="../../../../org.tizen.guides/html/native/ui/animations_effects_n.htm#elm_transit">Elementary Animations Guide</a> </li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Elementary Animations: Applying Transition Effects to an Evas Object</h1>

  
<p>This tutorial demonstrates how you can use Elm Transit to create animated transitions effects, such as rotation, wiping, zooming, resizing, and fading, to an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Ecore, Elementary, and Evas API basics by learning about:</p>
	<ul> 
			<li><a href="#setup">Setting Up the Application</a>
			<p>Prepare the application for use.</p></li>
			<li><a href="#rotate">Creating a Rotation Effect</a>
			<p>Create a rotation effect in your application.</p></li>
			<li><a href="#zoom">Creating a Zoom Effect</a>
			<p>Create a zoom effect in  your application.</p></li>
			<li><a href="#flip">Creating a Flip Effect</a>
			<p>Create a flip effect in your application.</p></li>
			<li><a href="#blend">Creating a Blend Transition</a>
			<p>Create a blend transition in your application.</p></li>
			<li><a href="#fade">Creating a Fade Effect</a>
			<p>Create a fade effect in your application.</p></li>
			<li><a href="#flip_y">Creating a Flip on y Axis</a>
			<p>Create a flip on y axis in your application.</p></li>
			<li><a href="#wipe">Creating a Wipe Effect</a>
			<p>Create a wipe effect in your application.</p></li>		
			<li><a href="transit_effect_tutorial_n.htm">Implementing Elementary Transit Effects</a> <p>Demonstrates how you can implement a variety of EFL animation effects.</p></li>
	</ul>
		
 <h2 id="setup" name="setup">Setting Up the Application</h2>

<p>First create a basic application like explained in the <a href="basic_tutorial_mn.htm">Basic Tutorial</a>.</p>

<p>When the application is ready, create Evas objects and animate them. In this example, one single object is animated with different type of animations.</p>

<p>Create the structure of our application represented by a struct named <span style="font-family: Courier New,Courier,monospace">appdata</span></p>

<pre class="prettyprint">typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *label;
&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;Evas_Object *buttonbck;
&nbsp;&nbsp;&nbsp;Evas_Object *hbox;
&nbsp;&nbsp;&nbsp;Evas_Object *left_vbox;
&nbsp;&nbsp;&nbsp;Evas_Object *center_vbox;
&nbsp;&nbsp;&nbsp;Evas_Object *right_vbox;
&nbsp;&nbsp;&nbsp;float rt_angle, zto, zfrom;
} appdata_s;
</pre>

<p>This structure holds the main UI components of the application:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">win</span>: the main window</li>
<li><span style="font-family: Courier New,Courier,monospace">label</span>: the title label</li>
<li><span style="font-family: Courier New,Courier,monospace">button</span>: a button object, the target of the animations</li>
<li><span style="font-family: Courier New,Courier,monospace">buttonbck</span>: a button representing the back of the target button</li>
<li><span style="font-family: Courier New,Courier,monospace">left_vbox</span>: a vertical box to place the first buttons column</li>
<li><span style="font-family: Courier New,Courier,monospace">center_vbox</span>: a vertical box to store the second buttons column</li>
<li><span style="font-family: Courier New,Courier,monospace">right_vbox</span>: a vertical box to store the last buttons column</li>
<li><span style="font-family: Courier New,Courier,monospace">hbox</span>: a horizontal box to store the vertical boxes</li>
<li><span style="font-family: Courier New,Courier,monospace">rt_angle</span>, <span style="font-family: Courier New,Courier,monospace">zto</span>, <span style="font-family: Courier New,Courier,monospace">zfrom</span>: these variables are used to store values for animations</li>
</ul>

<p>Place the UI components on the application&#39;s canvas. To make things easier, the UI component creation is split into two functions.</p>

<p>The first function creates UI components on the main window, and the second in the boxes.</p>

<pre class="prettyprint">create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ad-&gt;rt_angle = 360.0;
&nbsp;&nbsp;&nbsp;ad-&gt;zfrom = 1.0;
&nbsp;&nbsp;&nbsp;ad-&gt;zto = 2.0;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;Effects Tutorial&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;label);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, keydown_cb, ad);

&nbsp;&nbsp;&nbsp;// Creation a button in the app window
&nbsp;&nbsp;&nbsp;ad-&gt;button = elm_button_add(ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Moving the button to x=50 y=100
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;button, 50, 100);

&nbsp;&nbsp;&nbsp;// Resizing the button 100x50
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;button, 200, 50);

&nbsp;&nbsp;&nbsp;// Showing the button
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;button);

&nbsp;&nbsp;&nbsp;// Creation a back button in the app window
&nbsp;&nbsp;&nbsp;ad-&gt;buttonbck = elm_button_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;buttonbck, &quot;Button back&quot;);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;buttonbck, 50, 100);
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;buttonbck, 200, 50);

&nbsp;&nbsp;&nbsp;_create_btn_box(ad);

} // End of create_base_gui
</pre>

<p>This function takes <span style="font-family: Courier New,Courier,monospace">appdata_s *ad</span> as its only parameter. This function is called by the creation callback <span style="font-family: Courier New,Courier,monospace">app_create</span> of the Tizen application (<span style="font-family: Courier New,Courier,monospace">event_callback.create = app_create;</span>) in the <span style="font-family: Courier New,Courier,monospace">main</span> function of the application.</p>

<p>Set up the needed values like the rotation angle, the original zoom value (<span style="font-family: Courier New,Courier,monospace">zfrom</span>), and the destination zoom value (<span style="font-family: Courier New,Courier,monospace">zto</span>).</p>

<pre class="prettyprint">ad-&gt;rt_angle = 360.0;
ad-&gt;zfrom = 1.0;
ad-&gt;zto = 2.0;
</pre>

<p>Create the main window with a title and add the <span style="font-family: Courier New,Courier,monospace">delete</span> callback:</p>

<pre class="prettyprint">// Window
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
{
&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}

evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

// Label
ad-&gt;label = elm_label_add(ad-&gt;win);
elm_object_text_set(ad-&gt;label, &quot;Effects Tutorial&quot;);
evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, ad-&gt;label);
evas_object_show(ad-&gt;label);

// Show the window after the base GUI is set up
evas_object_show(ad-&gt;win);

ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, keydown_cb, ad);
</pre>

<p>Next create the animation target button and the back button. Call the button box creation function with the application data as its parameter.</p>

<pre class="prettyprint">_create_btn_box(ad);
</pre>

<p>Add a set of buttons to this box that starts animations on the animation target.</p>

<p>Create the structure of the buttons box with three columns (vertical boxes) and one horizontal for the main container.</p>

<pre class="prettyprint">// Creation of the main container box
ad-&gt;hbox = elm_box_add(ad-&gt;win);
elm_box_horizontal_set(ad-&gt;hbox, EINA_TRUE);
elm_box_homogeneous_set(ad-&gt;hbox, EINA_TRUE);
evas_object_move(ad-&gt;hbox, 10, 500);
evas_object_show(ad-&gt;hbox);

// Creation of the first column
ad-&gt;left_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;left_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;left_vbox, EINA_TRUE);
evas_object_show(ad-&gt;left_vbox);
elm_box_pack_start(ad-&gt;hbox, ad-&gt;left_vbox);

// Creation of the second column
ad-&gt;center_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;center_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;center_vbox, EINA_TRUE);
evas_object_show(ad-&gt;center_vbox);
elm_box_pack_end(ad-&gt;hbox, ad-&gt;center_vbox);

// Creation of the last column
ad-&gt;right_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;right_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;right_vbox, EINA_TRUE);
evas_object_show(ad-&gt;right_vbox);
elm_box_pack_end(ad-&gt;hbox, ad-&gt;right_vbox);
</pre>

<p>Then create the first action button for the resize effect.</p>

<pre class="prettyprint">// Button creation
btn_resize = elm_button_add(ad-&gt;win);
// Setting the button text
elm_object_text_set(btn_resize, &quot;Resize&quot;);
// Setting the hint weight policy
evas_object_size_hint_weight_set(btn_resize, EVAS_HINT_FILL, EVAS_HINT_FILL);
// Showing the button
evas_object_show(btn_resize);
// Setting the &quot;clicked&quot; callback
evas_object_smart_callback_add(btn_resize, &quot;clicked&quot;, _btn_resize_cb, ad);
// Adding the button to the first column
elm_box_pack_end(ad-&gt;left_vbox, btn_resize);
</pre>

<p><span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add</span> defines the callback function that is to be called when the button is clicked. In this example, set a <span style="font-family: Courier New,Courier,monospace">_btn_resize_cb</span> function and pass the application data <span style="font-family: Courier New,Courier,monospace">ad</span> to this callback function.</p>

<p>The callback by itself only sets a new text for the animation target button, and calls a function which will actually animate the button.</p>

<pre class="prettyprint">static void _btn_resize_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Starting the rotation effect 360 degrees
&nbsp;&nbsp;&nbsp;// evas_object_resize(ad-&gt;button, 100, 50);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Resize&quot;);
&nbsp;&nbsp;&nbsp;_resize_effect(ad-&gt;button);

}
</pre>

<p>This function is an <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback</span> and thus needs to have its specific prototype: it does not return anything and receives three parameters:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span>: data to be passed</li>
<li><span style="font-family: Courier New,Courier,monospace">btn</span>: the object the callback is being called about</li>
<li><span style="font-family: Courier New,Courier,monospace">ev</span>: the actual event, seldom used</li>
</ul>

<p>In this case, use <span style="font-family: Courier New,Courier,monospace">data</span> to pass the application data to the callback. However, the parameter&#39;s type is <span style="font-family: Courier New,Courier,monospace">void *</span> and not <span style="font-family: Courier New,Courier,monospace">appdata_s *</span>. Initialize a variable of the correct type with the pointer.</p>
<pre class="prettyprint">appdata_s *ad = data;
</pre>

<p>Then use the application data in the callback function. At this point create the animation directly in the callback function, but it is more straightforward to encapsulate the animation process into a dedicated function. <span style="font-family: Courier New,Courier,monospace">_resize_effect</span> implements the animation code:</p>

<pre class="prettyprint">static void _resize_effect(Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp;// Elementary Transition declaration and creation
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();

&nbsp;&nbsp;&nbsp;// Adding the transition target object
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);

&nbsp;&nbsp;&nbsp;// Setting the resize effect
&nbsp;&nbsp;&nbsp;elm_transit_effect_resizing_add(trans, 100, 50, 300, 150);

&nbsp;&nbsp;&nbsp;// Setting the transition duration
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);

&nbsp;&nbsp;&nbsp;// Starting the transition
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

<p>Create an <span style="font-family: Courier New,Courier,monospace">Elm_Transit *</span> object representing the transition.</p>

<pre class="prettyprint">Elm_Transit *trans = elm_transit_add();
</pre>

<p>Then add the target object to the transition</p>

<pre class="prettyprint">elm_transit_object_add(trans, obj);
</pre>

<p>Add a resizing transition to the object with the origin and destination width and height in pixels.</p>

<pre class="prettyprint">elm_transit_effect_resizing_add(trans, 100, 50, 300, 150);
</pre>
<p>100 and 50 are respectively the object&#39;s width and height when the effect begins, whereas 300 and 150 are respectively the object&#39;s width and height when the effect ends: the object grows from 100×50 to 300×150.</p>

<p>After that set the transition duration with <span style="font-family: Courier New,Courier,monospace">elm_transit_duration_set</span>.</p>
<pre class="prettyprint">elm_transit_duration_set(trans, 3.0);
</pre>

<p>The animation lasts three seconds. The duration parameter is a double.</p>

<p>Now start the animation by calling <span style="font-family: Courier New,Courier,monospace">elm_transit_go</span> with the <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> object.</p>

<pre class="prettyprint">elm_transit_go(trans);
</pre>

<p>When the resize button is clicked, the animation target button grows.</p>

<p>All the action buttons are created exactly the same way as the resize button, with a callback and an animation function.</p>

 <h2 id="rotate" name="rotate">Creating a Rotation Effect</h2>

<p>This effect rotates the animation target button with an angle of 360&deg;. This angle is stored in the application data as <span style="font-family: Courier New,Courier,monospace">ad-&gt;rt_angle</span>.</p>

<p>Create the button and add it to the center column in the <span style="font-family: Courier New,Courier,monospace">_create_btn_box</span> function.</p>

<pre class="prettyprint">// The rotation button
btn_rotate = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_rotate, &quot;Rotate&quot;);
evas_object_size_hint_weight_set(btn_rotate, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_rotate);
evas_object_smart_callback_add(btn_rotate, &quot;clicked&quot;, _btn_rotate_cb, ad);
elm_box_pack_end(ad-&gt;center_vbox, btn_rotate);
</pre>

<p>In the rotate button callback, call the effect function with the target button as first parameter and the rotation angle as the second one.</p>

<pre class="prettyprint">static void _btn_rotate_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Rotate&quot;);
&nbsp;&nbsp;&nbsp;_rotation_effect(ad-&gt;button, ad-&gt;rt_angle);
}
</pre>

<p>The animation function rotates the animation target by adding a rotation effect with <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_rotation_add</span>. This function takes three parameters:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">Elm_Transit</span></li>
<li>the rotation position at which the effect begins</li>
<li>the rotation position at which the effect ends</li>
</ul>

<p>Rotation starts at 0&deg; to finish at 360&deg;. The animation lasts two seconds.</p>

<pre class="prettyprint">static void _rotation_effect(Evas_Object *obj, float angle)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);

&nbsp;&nbsp;&nbsp;// Rotates the object from its original angle to given degrees to the right
&nbsp;&nbsp;&nbsp;elm_transit_effect_rotation_add(trans, 0.0, angle);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 2.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

 <h2 id="zoom" name="zoom">Creating a Zoom Effect</h2>

<p>The zoom effect zooms on the animation target to make it twice bigger. Store the source rate and the destination rate in the application data using <span style="font-family: Courier New,Courier,monospace">ad-&gt;zfrom</span> and <span style="font-family: Courier New,Courier,monospace">ad-&gt;zto</span>.</p>
<p>Create the button and add it to the center column in the <span style="font-family: Courier New,Courier,monospace">_create_btn_box</span> function.</p>

<pre class="prettyprint">// The zoom button
btn_zoom = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_zoom, &quot;Zoom&quot;);
evas_object_size_hint_weight_set(btn_zoom, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_zoom);
evas_object_smart_callback_add(btn_zoom, &quot;clicked&quot;, _btn_zoom_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_zoom);
</pre>

<p>Then add a callback function in order to perform the animation.</p>

<pre class="prettyprint">static void _btn_zoom_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Starting the rotation effect 360 degrees
&nbsp;&nbsp;&nbsp;// evas_object_resize(ad-&gt;button, 100, 50);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Zoom&quot;);
&nbsp;&nbsp;&nbsp;_zoom_effect(ad-&gt;button, ad-&gt;zfrom, ad-&gt;zto);
}
</pre>

<p>To create the zoom effect, use <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_zoom_add</span> with the start rate and the destination rate stored in application data (<span style="font-family: Courier New,Courier,monospace">ad-&gt;zfrom</span> and <span style="font-family: Courier New,Courier,monospace">ad-&gt;zto</span>)</p>

<pre class="prettyprint">static void _zoom_effect(Evas_Object *obj, float from, float to)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);

&nbsp;&nbsp;&nbsp;elm_transit_effect_zoom_add(trans, from, to);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 2.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>


 <h2 id="flip" name="flip">Creating a Flip Effect</h2>
 
<p>This effect is applied to a pair of objects, in the order they are added, to the <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> transition. In this example, add the animation target button and the button called buttonbck which represents the back of the target button.</p>

<p>Create the action button for the flip effect:</p>

<pre class="prettyprint">// The flip button
btn_flip = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_flip, &quot;Flip x&quot;);
evas_object_size_hint_weight_set(btn_flip, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_flip);
evas_object_smart_callback_add(btn_flip, &quot;clicked&quot;, _btn_flip_cb, ad);
elm_box_pack_end(ad-&gt;left_vbox, btn_flip);
</pre>

<p>The corresponding callback to create and start the animation with the two objects (target button and back button) to animate is like follows.</p>

<pre class="prettyprint">static void _btn_flip_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Flip&quot;);
&nbsp;&nbsp;&nbsp;_flip_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>

<p>Create the function which runs the animation. This flip animation is created using <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_flip_add</span>. The second parameter is the axis of the flip: in this example it is the X axis, so the button flips down to top to show the back button. The last parameter is the flip direction: <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> means clockwise.</p>

<pre class="prettyprint">static void _flip_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_flip_add(trans, ELM_TRANSIT_EFFECT_FLIP_AXIS_X, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

 <h2 id="blend" name="blend">Creating a Blend Transition</h2>

<p>The blend effect also works the same way as the flip, but without the axes or direction information. Use the back button here as well. To create the blend effect button:</p>

<pre class="prettyprint">// The blend button
btn_blend = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_blend, &quot;Blend&quot;);
evas_object_size_hint_weight_set(btn_blend, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_blend);
evas_object_smart_callback_add(btn_blend, &quot;clicked&quot;, _btn_blend_cb, ad);
elm_box_pack_end(ad-&gt;center_vbox, btn_blend);
</pre>

<p>The blend transition callback is:</p>

<pre class="prettyprint">static void _btn_blend_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Blend&quot;);
&nbsp;&nbsp;&nbsp;_blend_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>

<p>Create and start the blend animation. This animation is created by adding it to and <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> with <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_blend_add</span>. Add two objects, as for the flip.</p>

<pre class="prettyprint">static void _blend_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_blend_add(trans);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

 <h2 id="fade" name="fade">Creating a Fade Effect</h2>

<p>The fade effect works exactly the same way as the blend effect. First create the button:</p>

<pre class="prettyprint">// The fade button
btn_fade = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_fade, &quot;Fade&quot;);
evas_object_size_hint_weight_set(btn_fade, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_fade);
evas_object_smart_callback_add(btn_fade, &quot;clicked&quot;, _btn_fade_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_fade);
</pre>

<p>Then add the button&#39;s callback:</p>

<pre class="prettyprint">static void _btn_fade_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;


&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Fade&quot;);
&nbsp;&nbsp;&nbsp;_fade_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>

<p>The animation function calls <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_fade_add</span> instead of <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_blend_add</span>.</p>

<pre class="prettyprint">static void _fade_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_fade_add(trans);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

 <h2 id="flip_y" name="flip_y">Creating a Flip on y Axis</h2>

<p>This is same as the flip transition, but on y axis. To create a flip on y axis:</p>

<pre class="prettyprint">// The flip y button
btn_flip_y = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_flip_y, &quot;Flip y&quot;);
evas_object_size_hint_weight_set(btn_flip_y, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_flip_y);
evas_object_smart_callback_add(btn_flip_y, &quot;clicked&quot;, _btn_flip_y_cb, ad);
elm_box_pack_end(ad-&gt;left_vbox, btn_flip_y);

static void _btn_flip_y_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;


&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Flip 2&quot;);
&nbsp;&nbsp;&nbsp;_flip_y_effect(ad-&gt;button, ad-&gt;buttonbck);
}

static void _flip_y_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_flip_add(trans, ELM_TRANSIT_EFFECT_FLIP_AXIS_Y, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>

 <h2 id="wipe" name="wipe">Creating a Wipe Effect</h2>

<p>The wipe transition is applied on an Evas object considering the wipe type and the direction. Use <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE</span> to hide the button, and <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT</span> to do it from left to right.</p>

<p>The wipe animation button is as follows:</p>

<pre class="prettyprint">// The wipe button
btn_wipe = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_wipe, &quot;Wipe&quot;);
evas_object_size_hint_weight_set(btn_wipe, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_wipe);
evas_object_smart_callback_add(btn_wipe, &quot;clicked&quot;, _btn_wipe_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_wipe);
</pre>

<p>The wipe button callback looks like:</p>

<pre class="prettyprint">static void _btn_wipe_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Starting the rotation effect 360 degrees
&nbsp;&nbsp;&nbsp;// evas_object_resize(ad-&gt;button, 100, 50);
&nbsp;&nbsp;&nbsp;// Setting the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Wipe&quot;);
&nbsp;&nbsp;&nbsp;_wipe_effect(ad-&gt;button);
}
</pre>

<p>The animation function calls <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_wipe_add</span> with <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE</span> as the second parameter to hide the button and <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT</span> as last parameter to set the direction (left to right).</p>

<pre class="prettyprint">static void _wipe_effect(Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp; Elm_Transit *trans;

&nbsp;&nbsp;&nbsp; trans = elm_transit_add();
&nbsp;&nbsp;&nbsp; elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp; elm_transit_effect_wipe_add(trans, ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE, ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT);
&nbsp;&nbsp;&nbsp; elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp; elm_transit_go(trans);
}
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
