<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>UI Layout: Creating a UI Screen Layout</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Creating the UI Layout</a></li>
			<li><a href="#add_content">Adding Content to the Screen</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/ui/ui_guide_n.htm">UI Framework Guides</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore__Group.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>		
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>UI Layout: Creating a UI Screen Layout</h1>

  
<p>This tutorial demonstrates how you can compose a UI screen using the layout classes available in the EFL UI component library. It also highlights the capabilities of the EFL layout classes in free style layouting as well as layouting in a particular sequence (such as linear or grid).</p>

 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>

<h2>Warm-up</h2>
<p>Become familiar with the Ecore, Elementary, and Evas API basics by learning about:</p>
	<ul>
		<li><a href="#init">Creating the UI Layout</a>
		<p>Create an application layout.</p></li>
		<li><a href="#add_content">Adding Content to the Screen</a>
		<p>Add content to UI screens.</p></li>
	</ul>

 <h2 id="init" name="init">Creating the UI Layout</h2>

<p>The sample application uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> and <span style="font-family: Courier New,Courier,monospace">elm_toolbar</span> for the view management, layout classes, such as <span style="font-family: Courier New,Courier,monospace">elm_table</span>, <span style="font-family: Courier New,Courier,monospace">elm_box</span>, and <span style="font-family: Courier New,Courier,monospace">elm_grid</span> for the composition of the screen, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_label</span> and <span style="font-family: Courier New,Courier,monospace">elm_image</span> for the content inside the view.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates the application layout. It starts by creating a window, then adds the <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> component to it to decorate the window with an indicator. It then adds the <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> component which acts as a view manager for the window and provides the window title functionality. After this it creates the toolbar using the <span style="font-family: Courier New,Courier,monospace">create_toolbar()</span> function and adds it to naviframe.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it, *tabbar_it;
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_wm_desktop_layout_support_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;UiLayout&quot;, NULL, NULL, NULL, &quot;tabbar/icon/notitle&quot;);

&nbsp;&nbsp;&nbsp;// Tabbar
&nbsp;&nbsp;&nbsp;ad-&gt;tabbar = create_toolbar(ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;tabbar&quot;, ad-&gt;tabbar);

&nbsp;&nbsp;&nbsp;// Set the first view
&nbsp;&nbsp;&nbsp;tabbar_it = elm_toolbar_first_item_get(ad-&gt;tabbar);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_selected_set(tabbar_it, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, keydown_cb, NULL);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_toolbar()</span> function creates the toolbar which is then added to the naviframe.</p>
<pre class="prettyprint">
static Evas_Object*
create_toolbar(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *tabbar;

&nbsp;&nbsp;&nbsp;tabbar = elm_toolbar_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_object_style_set(tabbar, &quot;tabbar&quot;);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(tabbar, ELM_TOOLBAR_SHRINK_EXPAND);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(tabbar, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Box&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Grid&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Table&quot;, tabbar_item_cb, ad);

&nbsp;&nbsp;&nbsp;return tabbar;
}
</pre>

<p>The following figure illustrates the UI Layout.</p>

  <p class="figure">Figure: UI Layout screen</p> 
  <p align="center"><img alt="UI Layout screen" src="../../images/uilayout_view2.png" /></p> 

 <h2 id="add_content" name="add_content">Adding Content to the Screen</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_box_view()</span> function creates the screen using a recursive composition of the box layout.</p> 

<pre class="prettyprint">static Evas_Object*
create_box_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box, *box1, *box2, *box3;

&nbsp;&nbsp;&nbsp;box = elm_box_add(parent);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box, 10, 10);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;box1 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box1, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box1, 8, 8);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box1, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box1, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(box1);

&nbsp;&nbsp;&nbsp;box2 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box2, 6, 6);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box2, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box2, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(box2);

&nbsp;&nbsp;&nbsp;box3 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box3, 5, 5);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box3, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box3, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_homogeneous_set(box3, EINA_FALSE);
&nbsp;&nbsp;&nbsp;evas_object_show(box3);
} 
</pre>

<p>Once the box layout is created, content or another box layout is added to the box. Box implements the size policy during the size calculation.</p> 

<pre class="prettyprint">// Add an item to the box
Evas_Object *item1 = create_content(box, &quot;Item 1&quot;);
evas_object_size_hint_min_set(item1, 0, 40);
elm_box_pack_end(box, item1);
elm_box_pack_end(box, box1);
elm_box_pack_end(box, box3);
elm_box_pack_end(box, create_content(box, &quot;Item 4&quot;));

// Add an item to the box1
elm_box_pack_end(box1, create_content(box1, &quot;Item 2.1&quot;));
elm_box_pack_end(box1, box2);
elm_box_pack_end(box1, create_content(box1, &quot;Item 2.3&quot;));

// Add an item to the box2
elm_box_pack_end(box2, create_content(box2, &quot;Item 2.2.1&quot;));
elm_box_pack_end(box2, create_content(box2, &quot;Item 2.2.2&quot;));

// Add an item to the box3
elm_box_pack_end(box3, create_content(box3, &quot;Item 3.1&quot;));
elm_box_pack_end(box3, create_content(box3, &quot;Item 3.2&quot;));
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_table_view()</span> function creates the screen by composing table layout with content and grid view.</p>

<pre class="prettyprint">static Evas_Object*
create_table_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *table, *item;

&nbsp;&nbsp;&nbsp;table = elm_table_add(parent);
&nbsp;&nbsp;&nbsp;elm_table_padding_set(table, 10, 10);
&nbsp;&nbsp;&nbsp;elm_table_homogeneous_set(table, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(table, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(table, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 1&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 0, 2, 1);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 2&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 2, 0, 1, 1);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 3&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 1, 3, 1);

&nbsp;&nbsp;&nbsp;// Add a grid view item
&nbsp;&nbsp;&nbsp;item = create_grid_view(table);
&nbsp;&nbsp;&nbsp;evas_object_show(item);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 2, 3, 10);

&nbsp;&nbsp;&nbsp;return table;
}
</pre>

<p>The table layout can be used for freestyle layouting, and for standard layouts, such as lists and grids. It does not consider the size policy of the child item during size calculation.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">create_grid_view()</span> function composes a screen using the grid layout and also uses box and table layout as a child item to pack inside a grid. It uses free style layouting, and during size evaluation of the child item, it does not take the size policy of the child item into consideration.</p>

<pre class="prettyprint">static Evas_Object*
create_grid_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *grid, *item;

&nbsp;&nbsp;&nbsp;grid = elm_grid_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(grid, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(grid, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;// Red background for the grid
&nbsp;&nbsp;&nbsp;item = create_bg(grid, 255, 0, 0);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 0, 0, 100, 100);

&nbsp;&nbsp;&nbsp;// Add the item to the grid
&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item1&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 1, 1, 98, 98);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item2&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 2, 5, 20, 20);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item3&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 23, 5, 76, 94);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item4&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 2, 27, 20, 70);

&nbsp;&nbsp;&nbsp;// Black background for the box view item
&nbsp;&nbsp;&nbsp;item = create_bg(grid, 40, 40, 40);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 25, 10, 73, 87);

&nbsp;&nbsp;&nbsp;// Add the box view item to the grid
&nbsp;&nbsp;&nbsp;item = create_box_view(grid);
&nbsp;&nbsp;&nbsp;evas_object_show(item);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 26, 11, 71, 85);

&nbsp;&nbsp;&nbsp;return grid;
}
</pre>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
