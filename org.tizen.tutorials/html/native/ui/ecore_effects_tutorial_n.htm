<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Ecore Animator: Creating Ecore Animations</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#setup">Setting Up the Application</a></li>
			<li><a href="#rotate">Creating a Rotation Effect</a></li>
			<li><a href="#zoom">Creating a Zoom Effect</a></li>
			<li><a href="#3d_rotate">Creating a 3D Rotation Effect</a></li>
			<li><a href="#drop_bounce">Creating Drop and Bounce Effects</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/ui/animations_effects_n.htm#ecore_animation">Ecore Animator Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore__Group.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Ecore Animator: Creating Ecore Animations</h1>

  
<p>This tutorial demonstrates how you can use Ecore animators to simplify the creation of animations. Using Ecore animators, you can manually create your own animations by changing and manipulating Evas object attributes. Ecore animators work like timers, running callback functions over a given duration (an animation timeline).</p>


<h2>Warm-up</h2>
<p>Become familiar with the Ecore, Elementary, and Evas API basics by learning about:</p>
	<ul>
		<li><a href="#setup">Setting Up the Application</a>
		<p>Prepare the application for use.</p> </li>
		<li><a href="#rotate">Creating a Rotation Effect</a>
		<p>Create rotation animation effects.</p> </li>
		<li><a href="#zoom">Creating a Zoom Effect</a>
		<p>Create zoom animation effects.</p></li>
		<li><a href="#3d_rotate">Creating a 3D Rotation Effect</a>
		<p>Create 3D rotation effects.</p></li>
		<li><a href="#drop_bounce">Creating Drop and Bounce Effects</a>
		<p>Create drop and bounce effects.</p></li>
	</ul>

 <h2 id="setup" name="setup">Setting Up the Application</h2>

<p>In this part of the tutorial, we create a simple application that manipulates and animates an Evas object. We use a &quot;Basic UI Application&quot; as the basis for the application.</p>
<p>First, we set up the UI components we are going to use in the application:</p>

<pre class="prettyprint">typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;// Main window
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;// Application title
&nbsp;&nbsp;&nbsp;Evas_Object *label;

&nbsp;&nbsp;&nbsp;// Buttons
&nbsp;&nbsp;&nbsp;Evas_Object *bt1;
&nbsp;&nbsp;&nbsp;Evas_Object *bt2;
&nbsp;&nbsp;&nbsp;Evas_Object *bt3;

&nbsp;&nbsp;&nbsp;// Animation target
&nbsp;&nbsp;&nbsp;Evas_Object *target;
} appdata_s;
</pre>

<p>We then create the actual UI components in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, starting with the main window and application title:</p>

<pre class="prettyprint">// Main window
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
{
&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}

evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

// Application title
ad-&gt;label = elm_label_add(ad-&gt;win);
elm_object_text_set(ad-&gt;label, &quot;Ecore Animator Tutorial&quot;);
evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, ad-&gt;label);
evas_object_show(ad-&gt;label);
</pre>

<p>Next, we create the animation target, which is an Evas object of type <span style="font-family: Courier New,Courier,monospace">Elm_Image</span>. The image that is used in the source code is stored in the <span style="font-family: Courier New,Courier,monospace">res/images</span> folder of the application. The image that is used in the EDC file is stored in the <span style="font-family: Courier New,Courier,monospace">edje/images</span> folder.</p>

<pre class="prettyprint">// Animation target
// Setting the image path
char buf[PATH_MAX];
snprintf(buf, sizeof(buf), &quot;/opt/usr/apps/%s/res/images/tizen-logo.png&quot;, PACKAGE);
// Adding the image
ad-&gt;target = elm_image_add(ad-&gt;win);
// Setting the image path
if (!elm_image_file_set(ad-&gt;target, buf, NULL))
&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image \&quot;%s\&quot;\n&quot;, buf);
evas_object_size_hint_weight_set(ad-&gt;target, EVAS_HINT_FILL, EVAS_HINT_FILL);
// Moving the image
evas_object_move(ad-&gt;target, 130, 100);
// Resizing the image
evas_object_resize(ad-&gt;target, 200, 100);
// Showing the image
evas_object_show(ad-&gt;target);
</pre>

<p>All images are available in the <span style="font-family: Courier New,Courier,monospace">/opt/usr/apps/&lt;PACKAGE_NAME&gt;/res/images</span> folder of the application. The package name is defined at the begin of the application code:</p>

<pre class="prettyprint">#if !defined(PACKAGE)
#define PACKAGE &quot;org.tizen.ecoreanimator&quot;
#endif
</pre>

<p>The image path is set by calling the <span style="font-family: Courier New,Courier,monospace">elm_image_file_set()</span> function. This function takes as arguments the <span style="font-family: Courier New,Courier,monospace">ad-&gt;target</span> Evas object and the path of the image file, built with the <span style="font-family: Courier New,Courier,monospace">snprintf()</span> function and stored in a buffer.</p>

<pre class="prettyprint">// Setting the image path
char buf[PATH_MAX];
snprintf(buf, sizeof(buf), &quot;/opt/usr/apps/%s/res/images/tizen-logo.png&quot;, PACKAGE);
// Adding the image
ad-&gt;target = elm_image_add(ad-&gt;win);
// Setting the image path
if (!elm_image_file_set(ad-&gt;target, buf, NULL))
&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image \&quot;%s\&quot;\n&quot;, buf);
evas_object_size_hint_weight_set(ad-&gt;target, EVAS_HINT_FILL, EVAS_HINT_FILL);
</pre>

<p>The remaining code moves and resizes the image:</p>

<pre class="prettyprint">//Moving the image
evas_object_move(ad-&gt;target, 130, 100);
//Resizing the image
evas_object_resize(ad-&gt;target, 200, 100);
//Showing the image
</pre>

 <h2 id="rotate" name="rotate">Creating a Rotation Effect</h2>

<p>After the animation target is created, we can create the first button and the associated rotation animation:</p>

<pre class="prettyprint">// Button 1
ad-&gt;bt1 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt1, &quot;Rotate&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt1, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt1, 25, 0);
evas_object_resize(ad-&gt;bt1, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt1, &quot;clicked&quot;, _btn_rotate_cb, ad);
evas_object_show(ad-&gt;bt1);
</pre>

<p>We create the button for triggering the rotation effect. The button is placed and resized, and associated with the <span style="font-family: Courier New,Courier,monospace">_btn_rotate_cb()</span> callback function. This callback function calls the animation on the animation target.</p>

<pre class="prettyprint">static void _btn_rotate_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_rotate, ad-&gt;target);
}
</pre>

<p>In this callback function, we create an Ecore animator timeline using the <span style="font-family: Courier New,Courier,monospace">ecore_animator_timeline_add()</span> function. This function adds an animator that runs for a limited time: we run the <span style="font-family: Courier New,Courier,monospace">_do_rotate()</span> animation callback function for 1 second on the <span style="font-family: Courier New,Courier,monospace">ad-&gt;target</span> Evas object.</p>

<p>Next, we write the animation callback function that actually runs the animation. This callback is an <span style="font-family: Courier New,Courier,monospace">Ecore_Timeline_Cb</span> function, meaning it returns an <span style="font-family: Courier New,Courier,monospace">Eina_Bool</span> value and takes as arguments some <span style="font-family: Courier New,Courier,monospace">data</span> and the current position along the animation timeline (<span style="font-family: Courier New,Courier,monospace">pos</span>).</p>

<p>To create the rotation animation, we use an Evas Map. The map handles the necessary map points and allows you to manipulate the target Evas object on the X, Y, and Z axes.</p>

<pre class="prettyprint">static Eina_Bool
_do_rotate(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;// Get the animation target
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;// Declaration of an `Evas_Map`
&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;// Variables to store the target size and position
&nbsp;&nbsp;&nbsp;int x, y, w, h;

&nbsp;&nbsp;&nbsp;// Getting the size and position of the target
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;// Creation of an `Evas_Map` of 4 points
&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;// Populate source and destination map points to match exactly object.
&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
&nbsp;&nbsp;&nbsp;// Create a rotation of 360° with x+(w/2) &quot;x&quot; center and y +(h/2) &quot;y&quot; center.
&nbsp;&nbsp;&nbsp;evas_map_util_rotate(m, 360.0 * pos, x + (w / 2), y + (h / 2));
&nbsp;&nbsp;&nbsp;// Setting the object to &quot;animate&quot; in the `Evas_Map`
&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;// Starting the Animation
&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
&nbsp;&nbsp;&nbsp;// Free used memory
&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>

<p>In the animation callback function, we first declare the Evas Map. To implement the rotation, we need to set an X and Y center, so we create 4 integer variables to store the size and position of the target. This information is provided by the <span style="font-family: Courier New,Courier,monospace">evas_object_geometry_get()</span> function, which returns the X and Y coordinates and the weight and height of the target Evas object. Now we have all the required data to build the animation.</p>

<p>We create an Evas Map consisting of four points, and we populate these points with the animation target:</p>

<pre class="prettyprint">// Creation of an Evas_Map of 4 points
m = evas_map_new(4);
// Populate source and destination map points to match the object.
evas_map_util_points_populate_from_object(m, obj);
</pre>

<p>Now we can define the rotation using the <span style="font-family: Courier New,Courier,monospace">evas_map_util_rotate()</span> function:</p>

<pre class="prettyprint">// Create a rotation of 360° with x+(w/2) &quot;x&quot; center and y +(h/2) &quot;y&quot; center.
evas_map_util_rotate(m, 360.0 * pos, x + (w / 2), y + (h / 2));
</pre>

<p>The animation callback function will be called at several points along the timeline, which is why we multiply the rotation angle (360°) by the timeline position (<span style="font-family: Courier New,Courier,monospace">pos</span>) to get the actual animation angle. If we do not do this, we will never see the animation take place. We then join the target object to the map and run the animation: </p>

<pre class="prettyprint">// Setting the object to &quot;animate&quot; in the Evas Map
evas_object_map_set(obj, m);
// Starting the Animation
evas_object_map_enable_set(obj, EINA_TRUE);
</pre>

<p>Each call to the animation callback function will rotate the object (360 * timeline position) degrees.</p>

<p>Finally, we free up the memory allocated to the Evas Map:</p>

<pre class="prettyprint">// Free used memory
evas_map_free(m);
</pre>

 <h2 id="zoom" name="zoom">Creating a Zoom Effect</h2>

<p>The next animation is a zoom, for which we also use an Evas Map.</p>

<p>First, we create the button in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>

<pre class="prettyprint">// Button 2
ad-&gt;bt2 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt2, &quot;Zoom&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt2, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt2, 315, 0);
evas_object_resize(ad-&gt;bt2, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt2, &quot;clicked&quot;, _btn_zoom_cb, ad);
evas_object_show(ad-&gt;bt2);
</pre>

<p>We then create the button callback function with a new timeline:</p>

<pre class="prettyprint">static void _btn_zoom_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_zoom, ad-&gt;target);
}
</pre>

<p>Next, we create the <span style="font-family: Courier New,Courier,monospace">_do_zoom()</span> animation callback function, which is almost identical to the <span style="font-family: Courier New,Courier,monospace">_do_rotate()</span> callback function, except that we use the <span style="font-family: Courier New,Courier,monospace">evas_map_util_zoom()</span> function to create the animation:</p>

<pre class="prettyprint">static Eina_Bool
_do_zoom(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;int x, y, w, h;

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
&nbsp;&nbsp;&nbsp;evas_map_util_zoom(m, 2 * pos, 2 * pos, x , y);
&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">evas_map_util_zoom()</span> function takes the following arguments:</p>

<ul>
<li>The map to change</li>
<li>The horizontal zoom factor</li>
<li>The vertical zoom factor</li>
<li>The horizontal position (X coordinate) of the zooming center</li>
<li>The vertical position (Y coordinate) of the zooming center</li>
</ul>

<p>Here, we use a horizontal and vertical zoom factor of 2, and the X and Y coordinates of the target as the horizontal and vertical center coordinates.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">_do_zoom()</span> callback function is called at several points along the animation timeline, which is why we multiply the horizontal and vertical zoom factor values by the timeline position. Each call will zoom more than the previous one, thereby creating the animation effect.</p>

 <h2 id="3d_rotate" name="3d_rotate">Creating a 3D Rotation Effect</h2>

<p>The last animation is a 3D rotation. For this one, we are going to rotate the Evas object on all three axes (X, Y, Z).</p>

<p>First, we create the button and its callback function:</p>

<pre class="prettyprint">// Button 3
ad-&gt;bt3 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt3, &quot;3D&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt3, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt3, 170, 0);
evas_object_resize(ad-&gt;bt3, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt3, &quot;clicked&quot;, _btn_3d_cb, ad);
evas_object_show(ad-&gt;bt3);
</pre>

<pre class="prettyprint">static void _btn_3d_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_3d, ad-&gt;target);
}
</pre>

<p>Next, we create the <span style="font-family: Courier New,Courier,monospace">_do_3d()</span> animation callback function, which is very similar to the rotate and zoom callback functions. To create the animation, we use the <span style="font-family: Courier New,Courier,monospace">evas_map_util_3d_rotate()</span> function, which allows you to rotate any Evas object on all three axes.</p>

<pre class="prettyprint">static Eina_Bool
_do_3d(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;int x, y, w, h;

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
&nbsp;&nbsp;&nbsp;evas_map_util_3d_rotate(m, pos * 360, pos * 360, pos * 360, x + (w / 3), y + 60, 0);
&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">evas_map_util_3d_rotate()</span> function takes the following arguments:</p>

<ul>
<li>The map to change</li>
<li>The angle (0-360°) to rotate around the X axis</li>
<li>The angle (0-360°) to rotate around the Y axis</li>
<li>The angle (0-360°) to rotate around the Z axis</li>
<li>The X coordinate of the rotation center</li>
<li>The Y coordinate of the rotation center</li>
<li>The Z coordinate of the rotation center</li>
</ul>

<p>Here, we rotate 360 degrees around each axis. The horizontal (X) rotation center is the X position of the target plus its width divided by 2. The vertical (Y) rotation center is the Y position of the target plus 60. The Z rotation center is 0.</p>

<p>As with the rotation and zoom animations, we multiply the angles by the timeline position to gently rotate the target on each call to the <span style="font-family: Courier New,Courier,monospace">_do_3d()</span> callback function along the timeline.</p>

 <h2 id="drop_bounce" name="drop_bounce">Creating Drop and Bounce Effects</h2>

<p>To finish, we add drop and bounce effects to our buttons at application start. To do this, we create one timeline per button after creating the buttons in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>

<pre class="prettyprint">ecore_animator_timeline_add(2, _do_drop, ad-&gt;bt1);
ecore_animator_timeline_add(2.3, _do_drop, ad-&gt;bt2);
ecore_animator_timeline_add(2.5, _do_drop, ad-&gt;bt3);
</pre>

<p>We call the same <span style="font-family: Courier New,Courier,monospace">_do_drop()</span> animation callback function for each timeline. In this callback, instead of using an Evas Map, we simply change the position of the target using the <span style="font-family: Courier New,Courier,monospace">evas_object_move()</span> function:</p>

<pre class="prettyprint">static Eina_Bool
_do_drop(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;int x, y, w, h;
&nbsp;&nbsp;&nbsp;double frame = pos;
&nbsp;&nbsp;&nbsp;frame = ecore_animator_pos_map(pos, ECORE_POS_MAP_BOUNCE, 2, 4);

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;evas_object_move(obj, x, 600 * frame);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>

<p>To get the bounce effect, we use the <span style="font-family: Courier New,Courier,monospace">ecore_animator_pos_map()</span> function, which maps an input position from 0.0 to 1.0 along the timeline to a position on a different curve. The curve can be of different types, such as <span style="font-family: Courier New,Courier,monospace">LINEAR</span>, <span style="font-family: Courier New,Courier,monospace">SINUSOIDAL</span>, and <span style="font-family: Courier New,Courier,monospace">BOUNCE</span>. This function takes the following arguments:</p>

<ul>
<li>The input position to map</li>
<li>The mapping to use (<span style="font-family: Courier New,Courier,monospace">LINEAR</span>, <span style="font-family: Courier New,Courier,monospace">SINUSOIDAL</span>, and so on)</li>
<li>v1, which is the first parameter used by the mapping</li>
<li>v2, which is the second parameter used by the mapping</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">ECORE_POS_MAP_BOUNCE</span> map we use starts at 0.0, then drops like a ball bouncing to the ground at 1.0, bouncing v2 times with a decay factor of v1. Here, we bounce 4 times with a decay factor of 2:</p>

<pre class="prettyprint">frame = ecore_animator_pos_map(pos, ECORE_POS_MAP_BOUNCE, 2, 4);
</pre>

<p>This frame is used in the move function to create the animation. The value increases on each <span style="font-family: Courier New,Courier,monospace">_do_drop()</span> call along the timeline, which produces a nice drop of the buttons from their initial position to 600 pixels on the vertical axis.</p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
