<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Voice control elementary: Controlling UI Elements with Voice</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
  <div id="profile">
    <p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
  </div>
  <div id="toc_border"><div id="toc">
    <p class="toc-title">Content</p>
    <ul class="toc">
      <li><a href="#init">Initializing the Voice Control</a></li>
	  <li><a href="#callback">Monitoring Language Changes</a></li>
	  <li><a href="#info">Retrieving Voice Control Information</a></li>
	  <li><a href="#command_hint">Managing Commands and Hints</a></li>
    </ul>
    <p class="toc-title">Related Info</p>
    <ul class="toc">
		<li><a href="../../../../org.tizen.guides/html/native/uix/voicecontrol_elm_n.htm">Voice control elementary Guide</a></li>
		<li><a href="../../../../org.tizen.native.mobile.apireference/group__VOICE__CONTROL__ELEMENTARY__MODULE.html">Voice control elementary API for Mobile Native</a></li>
		<li><a href="../../../../org.tizen.native.wearable.apireference/group__VOICE__CONTROL__ELEMENTARY__MODULE.html">Voice control elementary API for Wearable Native</a></li>
    </ul>
  </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Voice control elementary: Controlling UI Elements with Voice</h1>
  <p>This tutorial demonstrates how you can register voice commands for EFL-supported UI components to perform component-related actions, such as button clicks.</p>

  <h2>Warm-up</h2>
  <p>Become familiar with the Voice control elementary API basics by learning about:</p>
  <ul>
  <li><a href="#init">Initializing the Voice Control</a>
    <p>Initialize the Voice control elementary library and create a handle.</p></li>
  <li><a href="#callback">Monitoring Language Changes</a>
    <p>Set and unset a callback to get notifications when the language changes.</p></li>
  <li><a href="#info">Retrieving Voice Control Information</a>
    <p>Get information about supported languages, widgets, and actions.</p></li>
  <li><a href="#command_hint">Managing Commands and Hints</a>
    <p>Set and unset commands and hints, and define the hint direction and offset.</p></li>
  </ul>

  
      <h2 id="init" name="init">Initializing the Voice Control</h2>
<p>To initialize the Voice control elementary library and create a handle:</p>
<ol>
<li>To use the functions and data types of the Voice control elementary API, include the <span style="font-family: Courier New,Courier,monospace">&lt;voice_control_elm.h&gt;</span> header file in your application:
<pre class="prettyprint">#include &lt;voice_control_elm.h&gt;</pre>
</li>
<li>Initialize the Voice control elementary library with the <span style="font-family: Courier New,Courier,monospace">vc_elm_initialize()</span> function:
<pre class="prettyprint">
void initialize_voice_control_elm()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_initialize();
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Create a handle for each UI component for which you want to set a command and hint. Use the <span style="font-family: Courier New,Courier,monospace">vc_elm_create_object()</span> function to create a handle for Evas_Objects, and the <span style="font-family: Courier New,Courier,monospace">vc_elm_create_item()</span> function for Elm_Object_Items.
<pre class="prettyprint">
void create_vc_elm_handler()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;vc_elm_h handler_object;
&nbsp;&nbsp;&nbsp;vc_elm_h handler_item;
	
&nbsp;&nbsp;&nbsp;// Creating Evas_Object button
&nbsp;&nbsp;&nbsp;Evas_Object *button = elm_button_add(win);
&nbsp;&nbsp;&nbsp;ret = vc_elm_create_object(button, &amp;handler_object);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Creating Elm_Object_Item list
&nbsp;&nbsp;&nbsp;Elm_Object_Item *item = elm_list_item_append(...);
&nbsp;&nbsp;&nbsp;ret = vc_elm_create_item(item, &amp;handler_item);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>When voice control is no longer needed, destroy the handle and deinitialize the library:
<pre class="prettyprint">
void destroy_vc_elm_handler(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_destroy(handler);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}

void deinitialize_voice_control_elm()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_deinitialize();
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
</ol>
	
      <h2 id="callback" name="callback">Monitoring Language Changes</h2>
	  
<p>To monitor when the system or application language changes:</p>

<ol>
<li>Set the language change callback to be invoked when the system or application language changes.
<p>It is important to track the current language, since you must set the commands and hints accordingly to ensure that the voice commands are recognized correctly.</p>
<pre class="prettyprint">
void set_language_changed_cb()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_set_current_language_changed_cb(language_changed_cb, NULL);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Define the callback to set the commands and hints according to the current language:
<pre class="prettyprint">
void language_changed_cb(const char *previous, const char *current, void* user_data)
{ 
&nbsp;&nbsp;&nbsp;if (&quot;en_US&quot; == current) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_elm_set_command(handler, &quot;button&quot;);;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_elm_set_command_hint(handler, &quot;button&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (&quot;ko_KR&quot; = current) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_elm_set_command(handler, &quot;버튼&quot;);;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_elm_set_command_hint(handler, &quot;버튼&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>When no longer needed, unset the callback:
<pre class="prettyprint">
void unset_state_changed_cb()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_unset_current_language_changed_cb();
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>
   
   
    <h2 id="info" name="info">Retrieving Voice Control Information</h2>
	
<p>To get information about supported languages, widgets, and actions:</p>

<ul>
<li>
<p>Get the current Voice control elementary language using the <span style="font-family: Courier New,Courier,monospace">vc_elm_get_current_language()</span> function:</p>
<pre class="prettyprint">
void get_language()
{
&nbsp;&nbsp;&nbsp;char *current_language;
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_get_current_language(&amp;current_language);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Get the languages supported by Voice control elementary library with a callback function that runs for each language separately.
<p>The callback cannot be unset: as long as it returns <span style="font-family: Courier New,Courier,monospace">true</span>, it continues to loop over the supported languages.</p>
<pre class="prettyprint">
bool supported_language_cb(const char *language, void* user_data)
{
&nbsp;&nbsp;&nbsp;return true; // To continue to get the next language
&nbsp;&nbsp;&nbsp;return false; // To stop
}

void set_default_language_changed_cb()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_foreach_supported_languages(supported_language_cb, NULL);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Get the UI components supported by Voice control elementary library with a callback function that runs for each UI component separately.
<p>The callback cannot be unset: as long as it returns <span style="font-family: Courier New,Courier,monospace">true</span>, it continues to loop over the supported UI components.</p>
<pre class="prettyprint">
void widget_cb(const char *widget, void *user_data)
{
&nbsp;&nbsp;&nbsp;return true; // To continue to get the next UI component 
&nbsp;&nbsp;&nbsp;return false; // To stop
}

void set_supported_widget_cb()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_foreach_supported_widgets(widget_cb, NULL);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Get the actions supported by Voice control elementary library for specific UI components with a callback function that runs for each action separately.
<p>The callback cannot be unset: as long as it returns <span style="font-family: Courier New,Courier,monospace">true</span>, it continues to loop over the supported actions.</p>
<p>To translate an actions to corresponding command parameters, use the <span style="font-family: Courier New,Courier,monospace">vc_elm_get_action_command()</span> function.</p>
<pre class="prettyprint">
void action_cb(const char *action, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *command_param;
&nbsp;&nbsp;&nbsp;vc_elm_get_action_command(action, &amp;command_param);
&nbsp;&nbsp;&nbsp;return true; // To continue to get the next action
&nbsp;&nbsp;&nbsp;return false; // To stop
}

void set_supported_action_cb()
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;// Elm_Button is an example, this can be obtained using vc_elm_foreach_supported_widgets callback
&nbsp;&nbsp;&nbsp;ret = vc_elm_foreach_supported_actions(&quot;Elm_Button&quot;, action_cb, NULL);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ul>
 
      <h2 id="command_hint" name="command_hint">Managing Commands and Hints</h2>
	  
<p>To set and unset commands and hints, and define the hint direction and offset:</p>

<ol>
<li>Use the handle created for a specific UI component to set a command the user must speak in order to perform actions on the UI component:

<pre class="prettyprint">
void set_command(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_set_command(handler, &quot;Command&quot;); 
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}</pre>
</li>
<li>To show the command on the screen as a tooltip, set a hint (tooltip) for the UI component:

<pre class="prettyprint">
void set_command_hint(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_set_command_hint(handler, &quot;Hint&quot;);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}</pre>
</li>
<li>Set the hint direction and offset (X and Y coordinates).
<p>By default, the hint tooltip is shown so that it does not cover the underlying UI component and does not intersect with other hints.</p>
<pre class="prettyprint">
void set_hint_direction(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret; 
&nbsp;&nbsp;&nbsp;ret = vc_elm_set_command_hint_direction(handler, VC_ELM_DIRECTION_RIGHT);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}

void set_hint_offset(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret; 
&nbsp;&nbsp;&nbsp;ret = vc_elm_set_command_hint_offset(handler, 100, 100);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>You can get the current hint location using the <span style="font-family: Courier New,Courier,monospace">vc_elm_get_command_hint_direction()</span> and <span style="font-family: Courier New,Courier,monospace">vc_elm_get_command_hint_offset()</span> functions:</p>
<pre class="prettyprint">
void get_hint_direction(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;vc_elm_direction_e direction;
&nbsp;&nbsp;&nbsp;ret = vc_elm_get_command_hint_direction(handler, &amp;direction);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}

void get_hint_offset(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;int x, y;
&nbsp;&nbsp;&nbsp;ret = vc_elm_get_command_hint_offset(handler, &amp;x, &amp;y);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>

</li>
<li>When no longer needed, unset the command and hint:
<pre class="prettyprint">
void unset_command(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_unset_command(handler);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}

void unset_command_hint(vc_elm_h &amp;handler)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_unset_command_hint(handler);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}</pre>
</li>
</ol>

  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
