<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

    <title>Download: Downloading Content from the Internet</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a class="opensection" href="#download">Download Content from a URL</a></li>
		</ul>       
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.guides/html/native/content/download_n.htm">Download Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__DOWNLOAD__MODULE.html">Download API</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Download: Downloading Content from the Internet</h1>
  <div class="cont"><div class="static-cont">
  
<p>This tutorial demonstrates how you can download content asynchronously from a given URL into the device storage.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Download API basics by learning about:</p>

<ul>
	<li><a class="opensection" href="#download">Downloading Content from a URL</a>
	 <p>Receive a download ID, configure a download URL and destination, and launch a download process.</p></li>
</ul>

<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>

		<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
 <h2 id="download" name="download" class="items-tit-h2">Downloading Content from a URL</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 


<p>To download content:</p>
<ol><li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__DOWNLOAD__MODULE.html">Download</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;download.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;download.h&gt;
</pre></li>
<li>Create the download handle.
<p>The downloading library needs no initialization prior to the API usage. To download content from the internet, the download ID must be assigned. The URL and destination have to be set before the downloading process can be started.</p>
<p>Before starting any downloading, assign the download ID with the <span style="font-family: Courier New,Courier,monospace">download_create()</span> function:</p>

<pre class="prettyprint">
download_error_e error;
int download_id;
	
error = download_create(&amp;download_id);
</pre>

<p>The download ID functions as the handle that is used to manage the download.</p></li>


<li>Define and set download callbacks.
<p>Data specified by the URL is downloaded asynchronously and each download-related event (start, pause, stop, finish, or progress update) is propagated to the application through a callback.</p>
<p>Register the progress callback with the <span style="font-family: Courier New,Courier,monospace;">download_set_progress_cb()</span> function, and the state change callback with the <span style="font-family: Courier New,Courier,monospace;">download_set_state_changed_cb()</span> function.</p>

<pre class="prettyprint">error = download_set_state_changed_cb(download_id, state_changed_cb, NULL);

error = download_set_progress_cb(download_id, progress_cb, &amp;content_size);
</pre>
<p>The state change callback is called every time the download state changes, and the progress callback is called every time the download progress changes.</p></li>

<li>Set the download URL and other details.
<p>Before the download can be started, it is necessary to set the URL source path for the download:</p>
<pre class="prettyprint">
error = download_set_url(download_id, &quot;http://tizen.org&quot;;
</pre>
<p>You can also set the destination path and file name. If the values are not given, the default storage and an auto-generated file name are used. </p>
<pre class="prettyprint">
char *data_path = app_get_data_path();
error = download_set_destination(download_id, data_path);
free(data_path);

error = download_set_file_name(download_id, &quot;downloaded_file.bin&quot;);
</pre></li>

<li>Set the download options:
<ul class="ul"><li>Auto download

<p>To set an automatic download, call the <span style="font-family: Courier New,Courier,monospace;">download_set_auto_download()</span> function passing the download handle and setting the second parameter to <span style="font-family: Courier New,Courier,monospace;">true</span>.</p>
<p>This operation changes the download manager state so that it continues downloading even after the client process is terminated. Set the notification download option when using this feature, to allow the user to receive the download result when the client process is not alive. </p>

<pre class="prettyprint">
error = download_set_auto_download(download_id, true);
</pre>
</li>

<li>Network type
<p>To set the desired network type, use the <span style="font-family: Courier New,Courier,monospace;">download_set_network_type()</span> function. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__DOWNLOAD__MODULE.html#gadf73239ac2efa6d4214a03751c76c9b8">download_network_type_e</a> enumeration defines the available download network types. The default value is <span style="font-family: Courier New,Courier,monospace;">DOWNLOAD_NETWORK_ALL</span>, if the client does not set any values.</p>

<pre class="prettyprint">
download_network_type_e value = 0;
error_code = download_set_network_type (download_id, DOWNLOAD_NETWORK_ALL);

error_code = download_get_network_type (download_id, &amp;value);
</pre>

</li>

<li>Notifications
<p>To set notifications with a service action, use the <span style="font-family: Courier New,Courier,monospace;">download_set_notification_type()</span> function. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__DOWNLOAD__MODULE.html#gab2ec29afc07197987eb2b88614fac67f">download_notification_type_e</a> enumeration defines the available download network types. The default value is <span style="font-family: Courier New,Courier,monospace;">DOWNLOAD_NOTIFICATION_TYPE_NONE</span>, if the client does not set any values.</p>
<p>If the client wants to change the title or description of the notification item, use the <span style="font-family: Courier New,Courier,monospace;">download_set_notification_title()</span> or <span style="font-family: Courier New,Courier,monospace;">download_set_notification_description()</span> function. If the client wants to change the action when the notification item is clicked, use the <span style="font-family: Courier New,Courier,monospace;">download_set_notification_service_handle()</span> function. If the service action is not set, the default operation is the following:</p>
<ul class="ul">
<li>When clicking a completed notification message, the proper application for playing the downloaded content is launched. If there is no proper application, an error message is shown at the status tray.</li>
<li>When clicking a failed notification message, the client application requesting the download is launched.</li>
</ul>
	
<pre class="prettyprint">
app_control_h app_control = NULL;
error = app_control_create(&amp;app_control);
error = app_control_set_app_id(app_control, &quot;org.tizen.tutorialdownload&quot;);
error = download_set_notification_app_control(download_id, DOWNLOAD_NOTIFICATION_APP_CONTROL_TYPE_FAILED, app_control);

download_notification_type_e noti_type = 0;
char *title = NULL, *desc = NULL;
error = download_get_notification_type(download_id, &amp;noti_type);
error = download_get_notification_title(download_id, &amp;title);
error = download_get_notification_description(download_id, &amp;desc);
error = download_get_notification_app_control(download_id, DOWNLOAD_NOTIFICATION_APP_CONTROL_TYPE_FAILED, &amp;app_control);
error = app_control_destroy(app_control);
</pre>
</li>
</ul></li>

<li>Control the download process.
<p>Downloading can be started, paused, or canceled using the <span style="font-family: Courier New,Courier,monospace;">download_start()</span>, <span style="font-family: Courier New,Courier,monospace;">download_pause()</span>, or <span style="font-family: Courier New,Courier,monospace;">download_cancel()</span> function. The download ID handle is used with all these functions.</p>
<pre class="prettyprint">
error = download_start(download_id);

error = download_pause(download_id);

error = download_start(download_id);

error = download_cancel(download_id);
</pre>
<p>To pause a download, it must be in the <span style="font-family: Courier New,Courier,monospace;">DOWNLOAD_STATE_DOWNLOADING</span> state. After pausing, the download state changes to <span style="font-family: Courier New,Courier,monospace;">DOWNLOAD_STATE_PAUSED</span>. After the download is stopped, the download state changes to <span style="font-family: Courier New,Courier,monospace;">DOWNLOAD_STATE_CANCELED</span>.</p></li>

<li>Monitor the download progress.
<p>Use the progress callback to monitor the download progress. The following example prints the number of bytes received and the total size of the file being downloaded. Since you do not know the file size at the beginning, use 0.</p>
<ol><li>Create the download:
<pre class="prettyprint">
unsigned long long content_size = 0;

error = download_create(&amp;download_id);</pre></li>
<li>Register the progress callback and start the download:
<pre class="prettyprint">
error = download_set_progress_cb(download_id, progress_cb, &amp;content_size);

error = download_start(download_id);</pre></li>

<li>When the file is being downloaded, get the total content size:
<pre class="prettyprint">
download_state_e state = 0;
content_size = 0;
error = download_get_state(download_id, &amp;state);
if (state == DOWNLOAD_STATE_DOWNLOADING) 
{
&nbsp;&nbsp;&nbsp;error = download_get_content_size(download_id, &amp;content_size);
}
</pre></li>
<li>The received parameter of the <span style="font-family: Courier New,Courier,monospace;">progress_cb()</span> callback function contains the size of the data received in bytes. In this example, print out the value and the total download size.
<pre class="prettyprint">
static void progress_cb(int download_id, unsigned long long received, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;received: %llu of %llu&quot;, received, *((unsigned long long*)user_data));
}</pre></li></ol></li>

<li>Get error information.

<p>To get the error information, use the <span style="font-family: Courier New,Courier,monospace;">download_get_error()</span> function:</p>
<pre class="prettyprint">
download_error_e error_val = 0;
error = download_get_error(download_id, &amp;error_val);
</pre>
<p>The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WEB__DOWNLOAD__MODULE.html#ga2d9ccc088c02cf1ab70879f1beda1cd1">download_error_e</a> enumeration defines the available error types.</p></li>
  
<li>Clean up.
<p>If the registered download is not needed anymore (the downloading is finished or has been canceled), delete it using the <span style="font-family: Courier New,Courier,monospace;">download_destroy()</span> function. In addition, unset all callback functions.</p>
<pre class="prettyprint">
download_unset_progress_cb(download_id);
download_unset_state_changed_cb(download_id);    
error = download_destroy(download_id);
</pre></li></ol>
	</div>
		</li>			
	</ul>	
</div>				
</div> 
          
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
