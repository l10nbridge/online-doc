<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Sensor: Using Sensors and Managing Sensor Events</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#retrieve">Retrieving a Sensor</a></li>
			<li><a href="#event">Retrieving Sensor Details and Measurements</a></li>
			<li><a href="#accuracy">Monitoring Accuracy Changes</a>
			</li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/system/sensors_n.htm">Sensor Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">Sensor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">Sensor API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Sensor: Using Sensors and Managing Sensor Events</h1>


	<p>This tutorial demonstrates how you can manage sensors, retrieve information from and about them, and set intervals for sensor events.</p> 

  
  <h2>Warm-up</h2>
    <p>Become familiar with the Sensor API basics by learning about:</p> 
	<ul>
	<li><a href="#retrieve">Retrieving a Sensor</a>
	<p>Check the sensor support and retrieve the sensor.</p></li>
	<li><a href="#event">Retrieving Sensor Details and Measurements</a>
	<p>Access sensor details and the measurement data.</p></li>
	<li><a href="#accuracy">Monitoring Accuracy Changes</a>
	<p>Create an event which is called when the accuracy is changed.</p>
	</li></ul>

<h2 id="retrieve" name="retrieve">Retrieving a Sensor</h2>

<p>To check whether a sensor is supported, and get a handle for the supported sensor:</p>

<ol>
<li>To use the functions and data types of the Sensor API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sensor.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;sensor.h&gt;
</pre>
</li>
<li>To check whether a sensor is supported, use the <span style="font-family: Courier New,Courier,monospace">sensor_is_supported()</span> function:
<pre class="prettyprint">
int error;
bool supported;
sensor_type_e type = SENSOR_ACCELEROMETER;

error = sensor_is_supported(type, &amp;supported);
</pre>
</li>
<li>Get a handle of the default sensor or a sensor list:
<pre class="prettyprint">
int error;

/* Get default sensor handle */
sensor_type_e type = SENSOR_ACCELEROMETER;
sensor_h sensor;

error = sensor_get_default_sensor(type, &amp;sensor);

/* Get sensor list */
sensor_type_e type = SENSOR_ALL;
sensor_h *list;
int sensor_count;

error = sensor_get_sensor_list(type, &amp;list, &amp;sensor_count);

/* Free the list after use */
free(list);
</pre>
</li>
</ol>  

<h2 id="event" name="event">Retrieving Sensor Details and Measurements</h2>

<p>To access sensor details and measurements:</p>

<ol>
<li>To use the functions and data types of the Sensor API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;sensor.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;sensor.h&gt;
</pre>
</li>
<li>To create an event listener, use the <span style="font-family: Courier New,Courier,monospace">sensor_create_listener()</span> function:
<pre class="prettyprint">
sensor_h sensor;

sensor_listener_h listener;
error = sensor_create_listener(sensor, &amp;listener);
</pre>
</li>
<li>Register a callback for the listener.
<p>The callback returns information about the sensor measurements (events) in a <span style="font-family: Courier New,Courier,monospace">sensor_event_s</span> structure (in <a href="../../../../org.tizen.native.mobile.apireference/structsensor__event__s.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/structsensor__event__s.html">wearable</a> applications) in its second parameter:</p>
<pre class="prettyprint">
void
on_sensor_event(sensor_h sensor, sensor_event_s *event, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Select a specific sensor with a sensor handle */
&nbsp;&nbsp;&nbsp;&nbsp;/* This example uses the sensor type, assuming there is only 1 sensor for each type */
&nbsp;&nbsp;&nbsp;&nbsp;sensor_type_e type;
&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_type(sensor, &amp;type);
&nbsp;&nbsp;&nbsp;&nbsp;switch (type) {
&nbsp;&nbsp;&nbsp;&nbsp;case SENSOR_ACCELEROMETER:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Use sensor information */
&nbsp;&nbsp;&nbsp;&nbsp;}
}

error = sensor_listener_set_event_cb(listener, 100, on_sensor_event, user_data);
</pre>
</li>
<li>Reset the optional sensor measurement interval (in milliseconds).
<p>In case of the proximity sensor, the interval setting has no effect. The proximity event only occurs when the value changes.</p>
<pre class="prettyprint">
error = sensor_listener_set_interval(listener, 100);
</pre>

</li>
<li>Set the optional sensor option.
<p>The <span style="font-family: Courier New,Courier,monospace">sensor_option_e</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html#gaf517b61e58b872f985fc2fc2a26aa56a">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html#gaf517b61e58b872f985fc2fc2a26aa56a">wearable</a> applications) defines the available options.</p>
<pre class="prettyprint">
error = sensor_listener_set_option(listener, SENSOR_OPTION_ALWAYS_ON);
</pre>


</li>
<li>Start the sensor listener: 
<pre class="prettyprint">
error = sensor_listener_start(listener);
</pre>
<p>While the listener is running, the registered callback is triggered at defined intervals and returns information on the sensor measurements.</p>
</li>
<li>To read the sensor measurements immediately, instead of waiting till the end of the measurement interval when the callback is triggered, use the <span style="font-family: Courier New,Courier,monospace">sensor_listener_read_data()</span> function. 
<p>You must start the listener with the <span style="font-family: Courier New,Courier,monospace">sensor_listener_start()</span> function before you can read sensor data.</p>
<pre class="prettyprint">
sensor_event_s event;
error = sensor_listener_read_data(listener, &amp;event);
</pre>

</li>
<li>You can optionally access various sensor details using the <span style="font-family: Courier New,Courier,monospace">sensor_get_XXX()</span> functions: 
<pre class="prettyprint">
char *name;
char *vendor;
sensor_type_e type;
float min_range;
float max_range;
float resolution;
int min_interval;

error = sensor_get_name(listener, &amp;name);
error = sensor_get_vendor(listener, &amp;vendor);
error = sensor_get_type(listener, &amp;type);
error = sensor_get_min_range(listener, &amp;min_range);
error = sensor_get_max_range(listener, &amp;max_range);
error = sensor_get_resolution(listener, &amp;resolution);
error = sensor_get_min_interval(listener, &amp;min_interval);
</pre>

</li>
<li>When no longer needed, unset the callback, and stop and destroy the listener: 
<pre class="prettyprint">
error = sensor_listener_unset_event_cb(listener);

error = sensor_listener_stop(listener);

error = sensor_destroy_listener(listener);
</pre>
</li>
</ol>

<h2 id="accuracy" name="accuracy">Monitoring Accuracy Changes</h2>

<p>To monitor accuracy changes:</p>

<ol>
<li>To use the functions and data types of the Sensor API, include the <span style="font-family: Courier New,Courier,monospace">&lt;sensor.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;sensor.h&gt;
</pre>
</li>
<li>Create an event listener:
<pre class="prettyprint">
sensor_h sensor;

sensor_listener_h listener;
error = sensor_create_listener(sensor, &amp;listener);
</pre>

</li>
<li>Register and define a callback that is triggered when the sensor accuracy changes: 
<pre class="prettyprint">
error = sensor_listener_set_accuracy_cb(listener, sensor_accuracy_changed_cb, user_data);

void
sensor_accuracy_changed_cb(sensor_h sensor, unsigned long long timestamp,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_data_accuracy_e accuracy, void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Use the timestamp or accuracy from the sensor */
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

