<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Runtime information: Receiving and Monitoring Runtime Information</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#get">Getting Runtime Information with a Key-Value Pair</a></li>
			<li><a href="#get_function">Getting Runtime Information with a Function</a></li>
			<li><a href="#monitor">Monitoring Runtime Information Changes</a>
			</li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/system/runtime_info_n.htm">Runtime information Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">Runtime information API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">Runtime information API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Runtime information: Receiving and Monitoring Runtime Information</h1>


	<p>This tutorial demonstrates how you can obtain runtime information, such as system preferences.</p> 

  
  <h2>Warm-up</h2>
    <p>Become familiar with the Runtime information API basics by learning about:</p> 
			<ul>
	<li><a href="#prerequisites">Prerequisites</a>
	<p>Prepare your application to use the runtime information functionality.</p></li>			
	<li><a href="#get">Getting Runtime Information with a Key-Value Pair</a>
	<p>Retrieve a runtime information value using its key.</p></li>
	<li><a href="#get_function">Getting Runtime Information with a Function</a>
	<p>Retrieve runtime information using a function specific to a certain information.</p></li>
	<li><a href="#monitor">Monitoring Runtime Information Changes</a>
	<p>Register a callback function to monitor specific changes in the runtime information.</p>
	</li></ul>		

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the functions and data types of the Runtime information API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;runtime_info.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;runtime_info.h&gt;
</pre>

<h2 id="get" name="get">Getting Runtime Information with a Key-Value Pair</h2>

<p>Some runtime information consists of key and value pairs.</p>
<p>To get information on, for example, whether Bluetooth is enabled or an audio jack connected:</p>
<ol>
<li>Check whether Bluetooth is enabled.
<p>Use the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BLUETOOTH_ENABLED</span> key  with the data type-specific get function.</p>
<p>The Bluetooth enabled key data type is <span style="font-family: Courier New,Courier,monospace">bool</span>, which means that you need to use the <span style="font-family: Courier New,Courier,monospace">runtime_info_get_value_bool()</span> function.</p>
	
<pre class="prettyprint">
#include &lt;stdbool.h&gt;

void
func(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;bool value;
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_bool(RUNTIME_INFO_KEY_BLUETOOTH_ENABLED, &amp;value);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Bluetooth: %s&quot;, value ? &quot;Enabled&quot; : &quot;Disabled&quot;);
}
</pre></li>
<li>Get the audio jack connection status.
<p>Use the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_AUDIO_JACK_STATUS</span> key with the data type-specific get function.</p>
<p>The audio jack status key data type is <span style="font-family: Courier New,Courier,monospace">integer</span>, which means that you need to use the <span style="font-family: Courier New,Courier,monospace">runtime_info_get_value_int()</span> function.</p>
	
<pre class="prettyprint">
void
func(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int value;
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_int(RUNTIME_INFO_KEY_AUDIO_JACK_STATUS, &amp;value);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Audio jack status: %d&quot;, value);
&nbsp;&nbsp;&nbsp;&nbsp;switch (value) {
&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_AUDIO_JACK_STATUS_UNCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Audio jack is disconnected */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_AUDIO_JACK_STATUS_CONNECTED_3WIRE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* 3-conductor wire is connected */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_AUDIO_JACK_STATUS_CONNECTED_4WIRE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* 4-conductor wire is connected */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>  


<h2 id="get_function" name="get_function">Getting Runtime Information with a Function</h2>

<p>Some runtime information can be retrieved by using a function.</p>
<p>To get information on, for example, the current frequency of the CPU core 0, retrieve the CPU core frequency with the <span style="font-family: Courier New,Courier,monospace">runtime_info_get_processor_current_frequency()</span> function:</p>

<pre class="prettyprint">
void
func(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int core_idx = 0;
&nbsp;&nbsp;&nbsp;&nbsp;int freq;
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_get_processor_current_frequency(core_idx, &amp;freq);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The frequency of CPU core 0: %d&quot;, freq);
}
</pre>

<h2 id="monitor" name="monitor">Monitoring Runtime Information Changes</h2>

<p>Applications can be notified about changes in the runtime information.</p>
<p>To monitor, for example, the connection state of the USB cable:</p>

<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace">runtime_info_set_changed_cb()</span> function with the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_USB_CONNECTED</span> key to register a callback that is triggered each time the USB cable connection state changes:

<pre class="prettyprint">
#include &lt;stdbool.h&gt;

/* Callback */
void
usb_connection_changed(runtime_info_key_e key, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;bool value;
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;if (key != RUNTIME_INFO_KEY_USB_CONNECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_get_value_bool(key, &amp;value);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;USB status: %s&quot;, value ? &quot;Connected&quot; : &quot;Disconnected&quot;);
}

/* Register and deregister */
void
func(void)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;&nbsp;void *data;

&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_set_changed_cb(RUNTIME_INFO_KEY_USB_CONNECTED, usb_connection_changed, data);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>
<li>When no longer needed, deregister the callback with the <span style="font-family: Courier New,Courier,monospace">runtime_info_unset_changed_cb()</span> function:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;ret = runtime_info_unset_changed_cb(RUNTIME_INFO_KEY_USB_CONNECTED);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != RUNTIME_INFO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li></ol>
	
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

