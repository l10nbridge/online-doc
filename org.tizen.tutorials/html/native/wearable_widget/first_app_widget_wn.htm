<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Your First Tizen Wearable Native Widget Application</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#create">Creating a Project</a></li>
			<li><a href="#build">Building Your Application</a></li>
			<li><a href="#run">Running Your Application</a></li>
			<li><a href="#ui">Building a Simple UI</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../process/creating_app_project_n.htm">Creating the Application Project</a></li>
            <li><a href="../process/setting_properties_n.htm">Setting Project Properties</a></li>
            <li><a href="../process/app_dev_process_n.htm#build">Building the Application</a></li>
            <li><a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm">Emulator</a></li>
			<li><a href="../process/running_app_n.htm">Running Applications</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
	
<h1>Creating Your First Tizen Wearable Native Widget Application</h1>

<p><strong>Welcome to Tizen wearable native widget application development!</strong></p>

<p>A wearable native widget application is created using the C language, and can be run on Tizen wearable devices. The application uses the native API, which provides various interfaces to the device hardware allowing you to take advantage of numerous capabilities tailored to run with limited device resources.</p>

<p>A widget application is one of the Tizen application types. It can be shown by specific UI applications (such as the home screen and lock screen) that can contain widget applications.</p>
 
<p class="figure">Figure: Widget application in a wearable device</p> 
<p align="center"><img alt="Widget application in a wearable device" src="../../images/widget_app_wearable.png" /></p>  
 

<p>Study the following instructions to help familiarize yourself with the Tizen <a href="../process/app_dev_process_n.htm">native application development process</a> as well as using the Tizen SDK and installing the created application on the Emulator or target device. With the instructions, you can create and run a basic wearable native widget application, which displays some text on the screen with no user interaction:</p>

<ol>
<li>Before you get started with developing Tizen applications, download and install the <a href="../../../../org.tizen.download/html/cover_page.htm">Tizen SDK</a> (software development kit).
<p>For more information about the installation process, see the <a href="../../../../org.tizen.download/html/install/installing_sdk.htm">installation guide</a>.</p>
</li>
<li><a href="#create">Create a wearable native widget project</a> using the Tizen IDE.
<p>This step shows how you can use a predesigned project template that creates all the basic files and folders required for your project.</p></li>
<li><a href="#build">Build the application</a>.
<p>After you have implemented code for the features you want, this step shows how you can build the application to validate and compile the code.</p></li>
<li><a href="#run">Run the application</a>.
<p>This step shows how you can run the application on the emulator or a real target device.</p></li>
<li><a href="#ui">Build a UI</a>.
<p>This step shows how you can make small alterations to the application UI to improve the usability of your application.</p></li>
</ol>

<p>When you are developing a more complex application, you can take advantage of the <a href="../../../../org.tizen.devtools/html/native_tools/tools_n.htm">native tools included in the SDK</a> to ease the tasks of creating functionality and designing the application UI.</p>

<p><strong>Updating 2.3.1 Wearable Packages</strong></p>

<p>To develop wearable applications in the latest Tizen SDK, you must install the 2.3.1 wearable packages separately:</p>

<ol>
<li>Launch the Update Manager by going to <strong>Start &gt; All Programs &gt; Tizen SDK-&lt;version&gt; &gt; Update Manager-&lt;version&gt;</strong>.</li>
<li>In the <strong>All Packages</strong> tab, download all packages for <strong>2.3.1 Wearable</strong>.
<p align="center"><img alt="Download packages" src="../../images/first_app_download_wn.png" /></p></li>
</ol>

<h2 id="create">Creating a Project</h2>

<p>The following example shows you how to create and configure a basic wearable native widget application project in the Tizen IDE. An application project contains all the files that make up an application.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">
                <p>For user convenience, standalone widget application packages are not allowed in the Tizen market place.</p>
                <p>Use a standalone widget application for testing purposes. If you want to publish the application in the Tizen market place, combine it with at least 1 UI application in the same package. For more information, see <a href="../process/app_dev_process_n.htm#develop">Developing Multiple Projects as a Combined Package</a>.</p>
            </td>
        </tr>
    </tbody>
</table>

<p>The following figure illustrates the application to be created. The application screen displays the <strong>Hello widget</strong> text and no user interaction is provided.</p>

<p class="figure">Figure: Wearable native Widget application</p>
<p align="center"><img alt="Wearable native Widget application" src="../../images/basic_app_running_wn_widget.png" /></p>

<p>To create the application project:</p>

<ol>

<li><p>Launch the Tizen IDE.</p></li>

<li>
<p>Make sure the <strong>Tizen Native</strong> perspective is selected in the top right corner of the IDE window. </p>
<p align="center"><img alt="Checking the perspective" src="../../images/change_perspective_n.png" /></p>
<p>If not, select it. If the perspective is not visible, in the IDE menu, select <strong>Window &gt; Open Perspective &gt; Other &gt; Tizen Native</strong>, and click <strong>OK</strong>.</p>
</li>

<li>
<p>In the IDE menu, select <strong>File &gt; New &gt; Tizen Native Project</strong>.</p>
<p align="center"><img alt="Creating a new Tizen Native project" src="../../images/create_project_1_n.png" /></p>
<p>The Project Wizard opens.</p>
</li>

<li>
<p>In the Project Wizard, define the project details.</p>
<p>The Project Wizard is used to create the basic application skeleton with the required folder structure and mandatory files. You can easily create different applications by selecting an applicable template or sample for the Project Wizard to use.</p>
<ol type="a">
<li><p>Select the <strong>Template</strong> tab and the <strong>WEARABLE-[version] &gt; Widget</strong> template. The version depends on the SDK version you have installed and with which you are developing the application.</p></li>
<li><p>Change the project name, if you want.</p></li>
<li><p>Leave all other fields in the Project Wizard to their default values, and click <strong>Finish</strong>.</p></li>
</ol>
<p align="center"><img alt="Defining the project details" src="../../images/create_project_2_wn_widget.png" /></p>
<p>The Project Wizard sets up the project, creates the application files using the default content from the template, and closes. For more information about the Project Wizard and the available templates, see <a href="../../../../org.tizen.devtools/html/native_tools/project_wizard_n.htm">Project Wizard</a>.</p>
</li>

</ol>

<p>You can see the created project in the <strong>Project Explorer</strong> view. The most important files and folders include:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">inc</span>: Default folder for included source files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">res</span>: Folder for resource files used by the application only</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">shared</span>: Folder for resource files to be shared with other applications</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">src</span>: Folder for source code files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">lib</span>: Folder for external library files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span>: Manifest file used by the platform to install and launch the application</p></li>
</ul>

<p class="figure">Figure: Application in the Project Explorer</p>
<p align="center"><img alt="Application in the Project Explorer" src="../../images/basic_app_project_explorer_wn_widget.png" /></p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">You can <a href="#configuration">view and modify the application configuration</a> in the manifest editor. In this example, no configuration changes are required.</td>
        </tr>
    </tbody>
</table>

<p>Your application project is now ready for further actions. Next, build the application.</p>

<h3 id="configuration" name="configuration">Managing the Application Configuration</h3>

<p>To view and modify the application configuration:</p>

<ol>

<li>
<p>In the <strong>Project Explorer</strong> view, double-click the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file of the application. The IDE opens the file in the manifest editor.</p>
</li>

<li>
<p>In the manifest editor, view and modify the configuration details using the various tabs:</p>
<p align="center"><img alt="Configuring the application" src="../../images/basic_app_config_wn_widget.png" /></p>
<ul>
<li><p><strong>Overview</strong>: Define general information, such as the package, label, and icon of the application.</p></li>
<li><p><strong>Features</strong>: Define required software and hardware features. This information is used for application filtering in the Tizen market place.</p></li>
<li><p><strong>Privileges</strong>: Define the security-sensitive APIs or API groups accessed and used by the application.</p></li>
<li><p><strong>Localization</strong>: Define localized values for the application label, description, and icon.</p></li>
<li><p><strong>Advanced</strong>: Define advanced features, such as application metadata, widget (preview image and supported size), and miscellaneous options.</p></li>
<li>
<p><strong>tizen-manifest.xml</strong>: View and edit the source code of the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file. Changes made and saved on the other tabs are reflected in the source code and vice versa.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file must conform to both the XML file format and the Tizen native application specification requirements. Editing the file in the source code view is intended for advanced users only.</td>
        </tr>
    </tbody>
</table>
</li>
</ul>
</li>

<li><p>To save any changes, in the IDE menu, select <strong>File &gt; Save</strong>.</p></li>

</ol>

<p>For more information about configuring the application, see <a href="../process/setting_properties_n.htm#manifest">Setting the Application Manifest</a>.</p>

<h2 id="build">Building Your Application</h2>

<p>After you have created the application project, you can implement the required features. In this example, only the default features from the project template are used, and no code changes are required.</p>
<p>When your application code is ready, you must build the application. The building process performs a validation check and compiles your files.</p>

<p>You can build the application in the following ways:</p>

<ul>

<li>
<p><strong>Automatically</strong></p>
<p>The automatic build means that the IDE automatically rebuilds the application whenever you change a source or resource file and save the application project.</p>
<p>To use the automatic build:</p>
<ol>
<li>Select the project in the <strong>Project Explorer</strong> view.</li>
<li>In the IDE menu, select <strong>Project &gt; Build Automatically</strong>.
<p align="center"><img alt="Using the automatic build" src="../../images/build_automatic_n.png" /></p>
<p>A check mark appears next to the menu option.</p></li>
</ol>

<p>You can toggle the automatic build on and off by reselecting <strong>Project &gt; Build Automatically</strong>.</p>
</li>

<li>
<p><strong>Manually</strong></p>
<p>The manual build means that you determine yourself when the application is built.</p>
<p>To manually build the application, right-click the project in the <strong>Project Explorer</strong> view and select <strong>Build Project</strong>.</p>
<p class="figure">Figure: Manually building the application</p>
<p align="center"><img alt="Manually building the application" src="../../images/build_manual_widget_wn.png" /></p>
<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>In the IDE menu, select <strong>Project &gt; Build Project</strong>.</li>
<li>Press the <strong>F10</strong> key.</li>
<li>Click the hammer icon (<img alt="Building the application from the toolbar" src="../../images/build_icon_mn.png" />) in the toolbar.
</li>
</ul>
</li>
</ul>

<p>You can have more than one build configuration. To see the current active configuration or change it, right-click the project in the <strong>Project Explorer</strong> view and select <strong>Build Configurations &gt; Set Active</strong>. The default configuration is <span style="font-family: Courier New,Courier,monospace">Debug</span>. For more information, see <a href="../process/building_app_n.htm">Building Applications</a>.</p>


<p>After you have built the application, run it.</p>

<h2 id="run">Running Your Application</h2>

<p>You can run the application on the emulator or a real target device.</p>

<h3 id="emulator">Running on the Emulator</h3>

<p>To run the application on the emulator:</p>

<ol>
<li>Create and launch an emulator instance in the <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#manager">Emulator Manager</a>:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, launch the Emulator Manager by clicking the related icon.
<p align="center"><img src="../../images/emulator_icon.png" alt="Emulator manager icon" /></p>
</li>

<li>In the Emulator Manager, open the <strong>Create New Emulator</strong> drop-down list and select <strong>wearable</strong>. 
<p align="center"><img src="../../images/emulator_new_wearable.png" alt="Emulator manager" /></p>
</li>

<li>Modify the emulator options, and click <strong>Confirm</strong>.
<p>You can leave the options to their default values.</p>
<p align="center"><img src="../../images/emulator_settings_wearable.png" alt="Emulator options" /></p>
</li>

<li>To launch the emulator instance, select the emulator from the list and click the play icon.
<p align="center"><img src="../../images/emulator_launch_wearable.png" alt="Launch the emulator" /></p>

<p>The emulator is launched in its own window.</p>
<p>You can also see the new emulator instance in the <strong>Connection Explorer</strong> view. To view the emulator folder structure, click the arrow next to the emulator instance.</p>
<p align="center"><img src="../../images/emulator_window_wearable.png" alt="Emulator" /></p>
</li>
</ol>
</li>

<li>Generate a security profile.
	<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#emulator" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>
<li>Run the application:
<ol type="a">
<li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Native Application</strong>.
<p align="center"><img src="../../images/app_run_wn_widget.png" alt="Run the application" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>
</li>

<li>Confirm that the application launches on the emulator.
<p align="center"><img src="../../images/emulator_running_wn_widget.png" alt="Application running in the emulator" /></p>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">If the emulator display has switched off, you cannot see the application launch. To switch the display on, click the <strong>Power</strong> key (in the right bottom corner of the emulator).</td>
    </tr>
   </tbody>
  </table>

<p>The above screen is shown through the Viewer, to allow you to develop a lone widget application for testing purposes.</p>
<p id="viewer">To see the widget running on the home screen, add the widget there:</p>
<ol type="a">
<li>Press the <strong>Back</strong> key (in the top right corner of the emulator device) to return to the home screen (showing a watch face).</li>
<li>Swipe the home screen to the right and select <strong>+</strong>.</li>
<li>Scroll down until you see your widget application, and select it.</li>
</ol>
<p align="center"><img alt="Adding to home screen" src="../../images/widget_run_add_home_wn.png" /></p> 

<p>You can see the added widget on the home screen. To access the widget from the home screen, swipe right.</p>
<p align="center"><img alt="Home screen widget" src="../../images/widget_run_home_wn.png" /></p> 
<p>While the application is running, the IDE <strong>Log</strong> view shows the log, debug, and exception messages from the methods defined in the log macros. To see the view, in the IDE menu, go to <strong>Window &gt; Show View &gt; Log</strong>.</p>
</li>

</ol>
</li></ol>
 
<p>For more information on using the emulator features, see <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#controls">Emulator Control Keys and Menu</a>, <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#ecp">Emulator Control Panel</a>, <a href="../../../../org.tizen.devtools/html/common_tools/event_injec.htm">Event Injector</a>, and <a href="../../../../org.tizen.devtools/html/common_tools/emulator_features.htm">Extended Emulator Features</a>.</p>
<h3 id="target">Running on a Target Device</h3>

<p>To run the application on a target device:</p>
<ol>
<li>Connect the wearable target device to your computer:
<ol type="a">
<li>Define settings in the device:
<ul>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Bluetooth.
<p align="center"><img src="../../images/emulator_target_bt.png" alt="Switch on Bluetooth" /></p>
</li>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Wi-Fi.
<p>The device and the computer must be connected to the same Wi-Fi network.</p>
<p>Note the IP address the device is using.</p>
<p align="center"><img src="../../images/emulator_target_wifi.png" alt="Switch on Wi-Fi" /></p>
</li>
<li>Go to <strong>Settings &gt; Gear info</strong>, and switch on the debugging mode.
<p align="center"><img src="../../images/emulator_target_debug.png" alt="Switch on debugging" /></p>
</li></ul>
</li>

<li>
<p>In the terminal, enter the following commands:</p>
<pre class="prettyprint">
cd tizen-sdk/tools
./sdb connect &lt;IP address of Gear S2&gt;
</pre>

<p>Use the IP address you noted before.</p>
<p>Instead of the terminal, you can also use the <a href="../wearable/first_app_wn.htm#remote_device">IDE Remote Device Manager</a> for the connection.</p>
</li>

<li>
<p>In the first attempt, the connection fails and the device asks for user confirmation. To allow Gear to read log data, copy files to and from your computer, and install the application manually, click the accept mark.</p>
<p align="center"><img src="../../images/remote_allow_gear_ww.png" alt="Allow Gear to access data" /></p>
</li>

<li>In the <strong>Connection Explorer</strong> view, confirm that the device is connected (shown in the device list).
<p align="center"><img src="../../images/remote_connected_ww.png" alt="Device is connected" /></p>
</li>
</ol>
</li>

<li>Generate an author certificate.
<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#CommercialDevices" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>


<li>Run the application:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, select the device.</li>
<li>In <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Native Application</strong>. 

<p align="center"><img src="../../images/app_run_wn_widget.png" alt="Run the application on a target device" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>

</li>
<li>Confirm that the application launches in the target device.
<p>Like with the <a href="#viewer">emulator</a>, you must add the widget to the home screen before you can see it.</p></li>
</ol>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The application is launched using the default debug run configuration. To create and use another configuration:
	 <ol>
	 <li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Run Configurations</strong>.</li>
	 <li>In the <strong>Run Configurations</strong> window, click the <strong>New Launch Configuration</strong> icon (<img alt="New Launch Configuration" src="../../images/run_new_config_wn.png" />), define the configuration details, and launch the application by clicking <strong>Run</strong>.
	 	 <p align="center"><img alt="Run Configurations" src="../../images/run_configurations_n_widget.png" /></p></li>
	 </ol></td> 
    </tr> 
   </tbody> 
  </table>  

<p>If you want to run your application without a local device, see <a href="../../../../org.tizen.devtools/html/common_tools/connection_explorer.htm#remote">Testing with a Remote Device</a>.</p>
</li>
</ol>

<h2 id="ui">Building a Simple UI</h2>

<p>The following example is based on a template project for a wearable widget application, which was introduced in <a href="#create">Creating a Project</a>.</p>
<p>The template project makes it easy to create your widget application. Without modification, you can build and run the project. However, it is important to  understand the following template code to customize it.</p>


<h3 id="init" name="init">Initializing the Widget Application</h3>

<p>To initialize the widget application:</p>

<ol>
<li>To use the functions and data types of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;widget_app.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;widget_app.h&gt;
</pre>

<p>All header files that you need are already included in the <span style="font-family: Courier New,Courier,monospace">MyWidget.h</span> file, which is generated by the SDK when the template project is created.</p></li>
<li>Edit the widget application settings in the <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#widget_app">manifest</a> file.</li>
</ol>

<h3 id="create_widget" name="create_widget">Creating the Widget Application</h3>

<p>To create the widget application:</p>

<ol>
<li>Start and initialize the application with the <span style="font-family: Courier New,Courier,monospace">main()</span> function.

<p>Set up the <span style="font-family: Courier New,Courier,monospace">widget_app_lifecycle_callback_s</span> structure variable for the widget application life-cycle callbacks, define the functions themselves (<span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> for <a href="#initial">initialization</a> and <span style="font-family: Courier New,Courier,monospace">widget_app_terminate()</span> for <a href="#term">termination</a>), and call the <span style="font-family: Courier New,Courier,monospace">widget_app_main()</span> function to start the application event loop:</p>

<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_lifecycle_callback_s ops = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ops.create = widget_app_create;
&nbsp;&nbsp;&nbsp;&nbsp;ops.terminate = widget_app_terminate;

&nbsp;&nbsp;&nbsp;&nbsp;ret = widget_app_main(argc, argv, &amp;ops, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;widget_app_main() failed. Err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>
<li id="initial">Use the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> life-cycle function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API to initialize any resources that can be shared among widget instances. This function is called before the main event loop starts.

<pre class="prettyprint">
static widget_class_h
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Hook to take necessary actions before the main event loop starts */
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s ops = {NULL,};
</pre>
</li>
<li>Register the callback functions and make a class for widget instances.

<p>At the end of the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> function, remember to create a widget instance class and return a handle for it, so that the handle can be used for making widget instances.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;return widget_app_class_create(ops, user_data);
}
</pre></li>

<li id="term">When you no longer need the widget application, release the resources and terminate the application:

<pre class="prettyprint">
static void
widget_app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Release all resources */
}
</pre></li></ol>

<h3 id="callback" name="callback">Managing Widget Instance Life-cycle Callbacks</h3>

<p>The widget application provides a life-cycle and methods for making and managing a widget class. The application has one process, whose responsibility it is to make a class in the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> callback function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API. With this class, the framework can make instances whenever applications for widget viewers (such as home screen or lock screen) request for a widget instance.</p>
<p>The widget instance has its own life-cycle, which is similar to the widget application. However, the widget instance is just an object that is shown by the applications for widget viewers. Many widget instances can be running on the same widget application process.</p>

<p>To manage the widget instance life-cycle:</p>

<ol>
<li>Define the widget instance life-cycle callbacks:

<ul><li>This callback is triggered when the widget instance is created.
<p>Initialize resources for the widget instance and <a href="../../../../org.tizen.guides/html/native/app_management/widget_app_n.htm#get_window">draw the UI</a>. If the bundle content is not <span style="font-family: Courier New,Courier,monospace">NULL</span>, restore the previous status.</p>

<pre class="prettyprint">
static int
widget_instance_create(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;if (content != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Recover the previous status with the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;/* Create the UI */

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when the widget instance is destroyed.
<p>Release all widget resources. If the <span style="font-family: Courier New,Courier,monospace">reason</span> for the termination is not <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html#ga50c912e59019e4e719851bae110baa02">WIDGET_APP_DESTROY_TYPE_PERMANENT</a>, store the current status with the incoming bundle.</p>

<pre class="prettyprint">
static int
widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Save the current status at the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when the widget instance is paused.
<p>Take the necessary actions since the widget instance becomes invisible. The framework can destroy a paused widget instance.</p>

<pre class="prettyprint">
static int
widget_instance_pause(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when the widget instance is resumed.
<p>Take the necessary actions since the widget instance becomes visible.</p>

<pre class="prettyprint">
static int
widget_instance_resume(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>This callback is triggered when a widget update event is received.
<p>Take the necessary actions for the widget update. If the <span style="font-family: Courier New,Courier,monospace">force</span> parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, the widget can be updated even in the pause state.</p>

<pre class="prettyprint">
static int
widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li></ul>
</li>
<li>Register the callbacks in the <span style="font-family: Courier New,Courier,monospace">widget_instance_lifecycle_callback_s</span> structure during the widget application initialization:

<pre class="prettyprint">
static widget_class_h
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s ops =
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.create = widget_instance_create,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.destroy = widget_instance_destroy,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pause = widget_instance_pause,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.resume = widget_instance_resume,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.update = widget_instance_update,
&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;return widget_app_class_create(ops, user_data);
}
</pre></li>
</ol>

<h3 id="ui_draw" name="ui_draw">Drawing the Widget UI</h3>

<p>To draw the widget UI, you must get a window object with the <span style="font-family: Courier New,Courier,monospace">widget_app_get_elm_win()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API and create the UI on the home screen:</p>

<pre class="prettyprint">
#include &lt;widget_app_efl.h&gt;

struct widget_instance_data {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;
};
typedef struct widget_instance_data widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;&nbsp;if (content != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Recover the previous status with the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;/* Window */
&nbsp;&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_FAULT;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;win, w, h);

&nbsp;&nbsp;&nbsp;&nbsp;/* Conformant */
&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;conform = elm_conformant_add(wid-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(wid-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(wid-&gt;win, wid-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;&nbsp;/* Label */
&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;label, w, h / 3);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(wid-&gt;label, w / 4, h / 3);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;label);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Hello widget&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;/* Show the window after the base GUI is set up */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>

<h3 id="data" name="data">Managing Private Data for the Widget Instance</h3>

<p>Widget instances can have private data. The data usually includes view objects to make a screen for each widget instance. The framework provides an easy way to find private data from the widget context handle, which is provided as a parameter in the callback functions. The following example shows how to make private data and use it:</p>

<ul>
<li>You can define a private data structure and attach it to the widget instance by calling the <span style="font-family: Courier New,Courier,monospace">widget_app_context_set_tag()</span> function of the <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application</a> API:

<pre class="prettyprint">
struct widget_instance_data {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;
};
typedef struct widget_instance_data widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);
}
</pre>
</li>
<li>You can get the private data from the widget instance by calling the <span style="font-family: Courier New,Courier,monospace">widget_app_context_get_tag()</span> function of the Widget Application API.

<p>The following code within the  <span style="font-family: Courier New,Courier,monospace">widget_instance_update()</span> callback is not included in the default application template in the SDK, but you can add it to test the data handling feature.</p>
<pre class="prettyprint">
static int
widget_instance_update(widget_context_h context, bundle *content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;wid);
&nbsp;&nbsp;&nbsp;&nbsp;if (wid-&gt;label)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Update Widget&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
<li>Make sure that all the resources that you allocate are freed in the callback function for the widget instance destructor:
<pre class="prettyprint">
static int
widget_instance_destroy(widget_context_h context,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_destroy_type_e reason, bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;wid);

&nbsp;&nbsp;&nbsp;&nbsp;if (wid-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;free(wid);

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre></li>
</ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

