<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Designing Your Native Application</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#project">Creating a Project</a></li>
			<li><a href="#view">Designing a UI Layout for a View</a></li>
			<li><a href="#binding">Binding an Event Handler to the UI Component</a></li>
			<li><a href="#storyboard">Adding an Event Handler from the Storyboard</a></li>
			<li><a href="#emulator">Running the Application in the Emulator</a></li>
		</ul>		
	</div></div>
</div>		
<div id="container"><div id="contents"><div class="content">	
<h1>Designing Your Native Application</h1>

<p>You can approach the task of designing a native application with several methods. On the one hand, you can edit the application in the Tizen IDE after creating it with a basic template. On the other hand, you can edit the application in another editor and build it with the CLI interface of the Tizen SDK. As a third option, you can use the native UI Builder in the SDK.</p>

<p>This documentation has been created based on the mobile profile.</p>

<p>The native UI Builder offers 2 ways to develop a native application:</p>

<ul>
	<li>You can use WYSIWYG editing in the <strong>Design</strong> tab.</li>
	<li>You can use XML document editing in the <strong>Source</strong> tab.</li>
</ul>

<p>The <strong>Design</strong> and <strong>Source</strong> tabs are visible in the <strong>WYSIWYG Editor</strong> view. You can switch between the tabs as needed.</p>

<h2 id="project">Creating a Project</h2>

<p>To create a native UI Builder project:</p>

<ol>
	<li>In the IDE, select <strong>File &gt; New &gt; Tizen Native Project</strong>. 
	<p>If the project option you want is not visible, make sure that you are using the correct perspective (Tizen Native UI Builder). To switch perspectives, go to <strong>Window &gt; Open Perspective &gt; Other</strong> and select the perspective you need.</p>
	<p>In the <strong>New</strong> dialog, select <strong>Tizen Native Project</strong> and click <strong>Next</strong>.</p>
	
	<p align="center"><img alt="New dialog" src="../../images/ui_builder_new_dialog.png" /></p>
	</li>
	<li>In the <strong>New Tizen Native Project</strong> window, select the <strong>Template</strong> tab and define the project details: 
	<ul>
		<li>Select a Tizen native UI Builder project template.</li>
		<li>Define the name for your project. 
		  <table class="note"> 
		   <tbody> 
			<tr> 
			 <th class="note">Note</th> 
			</tr> 
			<tr> 
			 <td class="note">The Tizen API names cannot be used as project names. The project name must be more than 2 characters and is restricted to the following regular expression: [a-z OR A-Z][a-z OR A-Z OR 0-9]{2,49}.</td> 
			</tr> 
		   </tbody> 
		  </table>  
		</li>
		<li>A default location for your application project is used by default.</li>
	</ul>
	<p>Click <strong>Finish</strong>.</p>
	<p align="center"><img alt="Project details" src="../../images/ui_builder_project_details.png" /></p>
	</li>
</ol>

â€ƒ
<p>After you have created the project, the IDE changes to the Tizen native UI Builder interface and the project structure is shown in the <strong>Project Explorer</strong> view.</p>

<p class="figure">Figure: UI Builder views</p> 
<p align="center"><img alt="UI Builder views" src="../../images/ui_builder_views.png" /></p>

<p class="figure">Figure: Default project structure</p> 
<p align="center"><img alt="Default project structure" src="../../images/ui_builder_project_structure.png" /></p>

<p>The following table describes the content of the default project folders and files.</p>

<table>
<caption>Table: Default project content</caption>
<tbody>
<tr>
 <th>File or folder</th>
 <th>Content</th>
</tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">inc</span></td>
 <td>Folder for the default include path</td>
 </tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">res</span></td>
 <td>Resource folder of the Tizen IDE</td>
 </tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">shared</span></td>
 <td>Shared folder</td>
 </tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">src</span></td>
 <td>Application source files
	<ul>
	<li><span style="font-family: Courier New,Courier,monospace">src/managed</span>: UI layout source files automatically generated by the native UI Builder</li>
	<li><span style="font-family: Courier New,Courier,monospace">src/event_handler</span>: Event handler source files</li>
	</ul>
 </td>
 </tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">layout</span></td>
 <td>Layout folder</td>
 </tr>
 <tr>
 <td><img alt="Folder" src="../../images/ui_builder_folder.png" /> <span style="font-family: Courier New,Courier,monospace">lib</span></td>
 <td>Library folder</td>
 </tr>
 <tr>
 <td><img alt="Layout" src="../../images/ui_builder_layout.png" /> <span style="font-family: Courier New,Courier,monospace">layout.xml</span></td>
 <td>Layout meta file (xml: Extensible Markup Language)</td>
 </tr> 
 <tr>
 <td><img alt="Icon" src="../../images/ui_builder_icon.png" /> <span style="font-family: Courier New,Courier,monospace">icon.png</span></td>
 <td>Application icon file</td>
 </tr>
 <tr>
 <td><img alt="Manifest" src="../../images/ui_builder_manifest.png" /> <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span></td>
 <td>Tizen native application manifest XML file</td>
 </tr> 
</tbody></table>


<h2 id="view">Designing a UI Layout for a View</h2>

<h3>Using the GUI Editor (WYSIWYG)</h3>

<p>To create a UI with the WYSIWYG Editor:</p>

<ol>
	<li>Each view must have a root container as a top-level UI component (see the <a href="ui_builder_overview_mn.htm#UI_figure">UI hierarchy structure</a> figure). To design a view, first place the top-level UI component, the root container, on the canvas. 
	<p>To place a top-level UI component, use the components in the <strong>UI Component Container</strong> category of the Palette. You can drag &amp; drop the component from the palette to the canvas, or select the component in the palette and click in the canvas. After you have added the component, you can see it in the <strong>Outline</strong> view.</p>
	<p>In this example, a grid component is added as a root container. The following figures show how to drag a grid component from the Palette and drop it on the canvas. In the final figure, you can see the new root grid component in the <strong>Outline</strong> view.</p>
	<p align="center"><img alt="Drag a grid UI component from the Palette" src="../../images/ui_builder_drag.png" /></p>
	<p align="center"><img alt="Drop the grid UI component on the canvas" src="../../images/ui_builder_drop.png" /></p>
	<p align="center"><img alt="Root container in the Outline view" src="../../images/ui_builder_root.png" /></p>
	</li>
	
	<li>After placing the root container, you can place any other UI components you want.
	<p>The native UI Builder provides a useful visual feedback. When you drag a UI component on the canvas, a feedback shows whether you can place the component. If the component can be placed in the selected position, a blue dashed rectangle is shown. If not, a red background is shown and you have to move the component to another position.</p>
	<p>The following figures show an example of positive and negative feedback.</p>
	<p align="center"><img alt="Positive feedback" src="../../images/ui_builder_positive.png" /></p>
	<p align="center"><img alt="Negative feedback" src="../../images/ui_builder_negative.png" /></p>
	</li>

	<li>After placing the UI components, you can set their properties and bind any event handlers for specific events.
	<p>Select the component you want to modify in the <strong>Design</strong> tab, and it is shown with a red-dotted line. Use the <strong>Properties</strong> view to set the properties and bind event handlers for the selected component.</p>
	<p align="center"><img alt="Set the component properties" src="../../images/ui_builder_properties.png" /></p>
	</li>
</ol>

<p>Using the above steps, you can create a layout for your UI. For example, you can create a Login view by adding a grid, label, entry, button, and check UI components, and setting their properties and events.</p>

<p class="figure">Figure: Login view</p> 
<p align="center"><img alt="Login view" src="../../images/ui_builder_login.png" /></p>
 
<h3>Using the XML Editor</h3>

<p>Another UI programming method of the native UI Builder is to use the XML editor. You can edit your layout file in the <strong>Source</strong> tab. This section describes some of the features that are available in the <strong>Source</strong> tab.</p>
<p>For more information about the XML schema of the layout file, see XML specification.</p>

<p>To use the XML Editor and its helpful features:</p>

<ul>
	<li><strong>Source</strong> tab
	<p>You can switch to the XML editor by clicking the <strong>Source</strong> tab at the bottom of the <strong>WYSIWYG Editor</strong> view. In the <strong>Source</strong> tab, you can edit the layout XML file.</p>
	<p class="figure">Figure: Source tab</p> 
	<p align="center"><img alt="Source tab" src="../../images/ui_builder_source.png" /></p>
	</li>

	<li>Content assist
	<p>The native UI Builder provides content assist functionality, which helps you to write code faster and more efficiently. To use this functionality, type a few characters of the word and press <strong>Ctrl+Space</strong>. The proposals are shown in a popup as in the following figure.</p>
	<p class="figure">Figure: Content assist</p> 
	<p align="center"><img alt="Content assist" src="../../images/ui_builder_assist.png" /></p> 
	</li>
	
	<li>Auto complete
	<p>If you select a tag in the suggested list with content assist, the auto complete feature automatically adds the end tag.</p>
	<p class="figure">Figure: Auto complete</p> 
	<p align="center"><img alt="Auto complete" src="../../images/ui_builder_autocomplete.png" /></p>
	</li>
	
	<li>Selection synchronization
	<p>If you move a focus to another UI component in the <strong>Source</strong> tab, the selection in Preview pane is automatically synchronized. Similarly, if you change the selection in the preview pane, the focus in the <strong>Source</strong> tab moves accordingly.</p>
	<p class="figure">Figure: Selection synchronization</p> 
	<p align="center"><img alt="Selection synchronization" src="../../images/ui_builder_selection.png" /></p>
	</li>
</ul>
 
<p>To add a view with the <strong>Navigation</strong> view:</p>

<ol>
	<li>To add a new view, do one of the following:
	<ul>
		<li>Click the <strong>Empty View</strong> icon in the <strong>Navigation</strong> view toolbar.</li>
		<li>Press the <strong>Ctrl+A</strong> shortcut.
		<p align="center"><img alt="Adding a view using the toolbar or shortcut" src="../../images/ui_builder_addview1.png" /></p>
		</li>
		<li>Open the <strong>Navigation</strong> view context menu, and select <strong>New</strong>.  
		<p align="center"><img alt="Adding a view using the context menu" src="../../images/ui_builder_addview2.png" /></p>
		<p>In this case, a <strong>New View</strong> dialog opens with thumbnails and you can select a predefined view template for creating the view. Select the template you want, enter a name (ID) for the view, and click <strong>Finish</strong>.</p>
		<p align="center"><img alt="New View" src="../../images/ui_builder_new_view.png" /></p>
		</li>
	</ul>
	<p>After adding a view, you can see it in the <strong>Navigation</strong> view and the <strong>Source</strong> tab.</p>
	<p align="center"><img alt="View in the Navigation view and Source tab" src="../../images/ui_builder_view_shown.png" /></p>
	</li>
	<li>To design a new view:
	<ol type="a">
		<li>To activate the view you want to edit, double-click the desired view in the <strong>Navigation</strong> view.
		<p align="center"><img alt="Changing an editing view" src="../../images/ui_builder_change_view.png" /></p>
		</li>
		<li>After selecting the view, create a layout for it.
		<p align="center"><img alt="Designing a view" src="../../images/ui_builder_design_view.png" /></p>
		</li>
	</ol>
	</li>
</ol> 

<h2 id="binding">Binding an Event Handler to the UI Component</h2>

<p>An event handler is part of the application logic. It is called by the Tizen framework when any user interaction, such as a mouse click or touch, occurs.</p>
<p>The event type is different for each UI component, and the event information is data which depends on the UI component and event type.</p>
<p>You can add events on a component in the <strong>Properties</strong> view, and you can add events between views using the <strong>Storyboard</strong> tab.</p>

<p>To add an event handler to a specific UI component:</p>

<ol>
	<li>Select a UI component in the <strong>Design</strong> tab.</li>
	<li>In the <strong>Properties</strong> view, select the <strong>Event</strong> tab.
	<p align="center"><img alt="Event tab" src="../../images/ui_builder_event_tab.png" /></p>
	<p>The <strong>Event</strong> tab shows all available event types for the selected UI component:</p>
	<ul>
		<li>To add an event handler for an event type, click <img alt="Add" src="../../images/ui_builder_add.png" /> next to the event type. 
		<p>The <strong>Event</strong> tab is expanded and you can see the suggested event handler name in gray color. Change the function name of the event handler, if needed. You can see the added event element in the <strong>Source</strong> tab.</p></li>
		<li>To go to the event handler source, click <img alt="Go" src="../../images/ui_builder_go.png" />.</li>
		<li>To remove the event handler, click <img alt="Remove" src="../../images/ui_builder_remove.png" />.</li>
	</ul> 
	<p align="center"><img alt="Event in the layout" src="../../images/ui_builder_event_layout.png" /></p>
	</li>

	<li>Access the event handler code.
	<p>When you click <img alt="Go" src="../../images/ui_builder_go.png" />, the C source editor opens the generated event handler code, such as boilerplate, structure declaration, and function signature with comment.</p>
	<p>You can add your own source code. Your own source code is kept even if you change the event handler in the WYSIWYG or XML editor.</p>
	<p align="center"><img alt="Event handler code" src="../../images/ui_builder_event_handler_code.png" /></p>
	<p>The new event handler C file is shown in the <strong>Project Explorer</strong> view. If it already exists, the function signature for the new event handler is appended at the end of the file.</p>
	<p>The following figure shows an example of the automatically generated event handler code snippets.</p>
	<p align="center"><img alt="Generated snippets" src="../../images/ui_builder_event_generated_snippets.png" /></p>
	<p>The signature contains the following parameters:</p>
<pre class="prettyprint">
void view1_button1_onclicked(uib_view1_view_context *vc, Evas_Object *obj, void *event_info)
</pre>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">vc</span>: View context related to the event. You can access the UI component in the view through this structure. The following code example shows a sample of the view context.
<pre class="prettyprint">
struct _uib_view1_view_context {
&nbsp;&nbsp;&nbsp;&nbsp;/* Parent evas_object which was parameter of create function */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *parent;
&nbsp;&nbsp;&nbsp;&nbsp;/* Root container UI component of this view */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object* root_container;
&nbsp;&nbsp;&nbsp;&nbsp;/* View class name */
&nbsp;&nbsp;&nbsp;&nbsp;const char *view_name;
&nbsp;&nbsp;&nbsp;&nbsp;/* Control context to control this view */
&nbsp;&nbsp;&nbsp;&nbsp;struct _uib_view1_control_context *cc;

&nbsp;&nbsp;&nbsp;&nbsp;/* UI components in this view */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *grid1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *button1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *check1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label2;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *entry1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *entry2;
};
typedef struct _uib_view1_view_context uib_view1_view_context;
</pre>
		</li>
		<li><span style="font-family: Courier New,Courier,monospace">obj</span>: UI component where the event occurs.</li>
		<li><span style="font-family: Courier New,Courier,monospace">event_info</span>: User data passed from the Tizen framework. The event type is defined in the above event handle code.</li>
	</ul>
	</li>

	<li>Edit the event handler code.
	<p>For example, change the button text.</p>
	<p align="center"><img alt="Button text change" src="../../images/ui_builder_event_button_text.png" /></p>
	<p>You can use the content assist by pressing <strong>Ctrl+Space</strong>.</p>
	<p align="center"><img alt="Content assist" src="../../images/ui_builder_content_assist.png" /></p>
	</li>
</ol>


<h2 id="storyboard">Adding an Event Handler from the Storyboard</h2>

<p>To transition between pages in your application, use the Storyboard feature of the UI Builder. In the <strong>Storyboard</strong> tab, you can see all the views of your application. In the Storyboard, transitioning between the application views based on some UI component event is called a connection from a UI component to the target view. The target view is the view to be opened when performing a specific event on the UI component.</p>

<p class="figure">Figure: All views mode in the Storyboard tab</p> 
<p align="center"><img alt="All views mode in the Storyboard tab" src="../../images/ui_builder_storyboard_all.png" /></p>
 
<p>To create a connection:</p>

<ol>
	<li>Select the UI component from which you want to create a connection to a target view (another view in your application), Press <strong>Ctrl</strong> on your keyboard, and drag the UI component to the target view.
	<p align="center"><img alt="Drag the connection" src="../../images/ui_builder_storyboard_drag.png" /></p>
	</li>
	<li>When you drop the UI component on the target view, a list of UI component events is shown in a context menu.
	<p>If a connection already exists for an event, that event is disabled in the list. Select one of the events displayed in the context menu.</p>
	<p align="center"><img alt="Drop the connection" src="../../images/ui_builder_storyboard_drop.png" /></p>
	<p>Selecting an event from the context menu generates the code for the view transition and creates a connection between the 2 views.</p>
	</li>
	<li>To see the properties of the created event, select the UI component and go to the <strong>Event</strong> tab in the <strong>Properties</strong> view.
	<p align="center"><img alt="Event properties" src="../../images/ui_builder_storyboard_properties.png" /></p>
	</li>
	<li>To manage the connection options, right-click the connection, and select <strong>Go to Source Code</strong> to access the source code or <strong>Delete Connection</strong> to delete the connection.
	<p align="center"><img alt="Connection options" src="../../images/ui_builder_storyboard_options.png" /></p>
	<p>The <strong>Go to Source Code</strong> option takes you to the source code, where 2 functions have been generated:</p>
	<ul>
		<li>One is called before the transition is performed to the target view (<span style="font-family: Courier New,Courier,monospace">view1_button1_onclicked()</span>).</li>
		<li>One is provided after the transition has been performed (<span style="font-family: Courier New,Courier,monospace">view1_button1_onclicked_post()</span>).</li>
	</ul>
	<p>You can perform whatever pre or post transition operations you want in these functions.</p>
	<p align="center"><img alt="Pre and post transition operations" src="../../images/ui_builder_storyboard_transitions.png" /></p>
	</li>
</ol>


<h2 id="emulator">Running the Application in the Emulator</h2>

<p>You can run your application in the Emulator. The device Emulator, provided with the Tizen SDK, imitates the target environment running Tizen native applications. Using this replicated environment, you can test your application before deploying to a real target device. For more information, see <a href="../../cover_page.htm">Getting Started</a>.</p>

<p>To run the application:</p>

<ol>
	<li>Run the Emulator Manager.</li>
	<li>Create an emulator instance with the correct profile and platform version.</li>
	<li>Launch the emulator instance.</li>
	<li>Run the application.
	<p>In the <strong>Project Explorer</strong> view, right-click the application project and select <strong>Run As &gt; Tizen Native Application</strong>.</p>
	</li>
</ol>

<p>The following figure shows the running application. If you click the <strong>Login</strong> button, the text changes to <strong>Click to login</strong>.</p>

<p class="figure">Figure: Running Login application</p> 
<p align="center"><img alt="Running Login application" src="../../images/ui_builder_run.png" /></p>
	
   
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

