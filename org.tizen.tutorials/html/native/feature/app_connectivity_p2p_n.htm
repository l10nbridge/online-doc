<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>P2P Connections with Wi-Fi Direct&trade;</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#privilege">Required Privileges and Features</a></li>
			<li><a href="#setting">Wi-Fi Direct&trade; Settings</a></li>
			<li><a href="#implement">Implementing Wi-Fi Direct&trade;</a></li>
			<li><a href="#TDLS">Difference Between Wi-Fi Direct&trade; and TDLS</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/connectivity/connectivity_cover_n.htm">Connectivity and Wireless Guides</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__FRAMEWORK.html">Network API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__FRAMEWORK.html">Network API for Wearable Native</a></li>
        </ul>		
	</div></div>
</div>		
<div id="container"><div id="contents"><div class="content">	
<h1>P2P Connections with Wi-Fi Direct&trade;</h1>

<p>Wi-Fi Direct&trade; (synonym for Wi-Fi P2P (Peer-to-Peer)) is a technology that allows you to find nearby Wi-Fi Direct&trade; devices and form a Wi-Fi Direct&trade; group to communicate over a peer-to-peer link without wireless access points (base stations) in the infrastructure mode.</p>

<p>This feature is supported in mobile applications only.</p>

<p>In a Wi-Fi Direct&trade; group, the group owner works as an access point (AP) in the Wi-Fi infrastructure mode and the other devices join the group as clients. A group can be created by:</p>
<ul>
<li>Negotiation between 2 devices
<p>In a negotiation-based group creation, 2 devices compete based on the group owner intent value and the higher intent device becomes a group owner, while the other device becomes a group client.</p>
</li>
<li>In an autonomous mode by a single group owner device
<p>In an autonomous group creation, a device becomes a group owner by itself without any group client.</p>
</li></ul>

<p>The following sections demonstrate how to find and connect to nearby devices using Wi-Fi Direct&trade;.</p>

<h2 id="privilege">Required Privileges and Features</h2>

<p>Applications that use Wi-Fi Direct&trade; must declare the required privileges in the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file. For more information on the Tizen privileges, see <a href="../details/sec_privileges_n.htm">Security and API Privileges</a>.</p>

<p>To perform the Wi-Fi Direct&trade; operations, the application manifest must include the following privileges:</p>

<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.get&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/internet&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/wifidirect&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Wi-Fi Direct&trade; does not require an Internet connection, but it needs the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/internet</span> privilege because it uses standard sockets.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>To perform the Wi-Fi Direct&trade; operations, the device must support the following <a href="../details/app_filtering_n.htm">features</a>:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.wifi</span></li>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.wifi.direct</span></li>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.wifi.direct.display</span></li>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.wifi.direct.service_discovery</span></li>
</ul>

<h2 id="setting">Wi-Fi Direct&trade; Settings</h2>

<p>To use Wi-Fi P2P, you must confirm that 2 devices are connected through Wi-Fi Direct&trade;. To see the settings of Wi-Fi Direct&trade;, go to <strong>Settings &gt; Wi-Fi &gt; Wi-Fi Direct</strong> in the device. To listen to the Wi-Fi Direct&trade; states, set a callback function.</p>

<h2 id="implement">Implementing Wi-Fi Direct&trade;</h2>

<p>To use Wi-Fi P2P, you must activate Wi-Fi Direct&trade; and start the service. If you want to listen to Wi-Fi Direct&trade; states, you must also set a callback function.</p>

<p>To implement a Wi-Fi Direct&trade; connection:</p>

<ol>
<li>Initialize Wi-Fi Direct&trade; to use all Wi-Fi Direct&trade; functions:

<pre class="prettyprint">
#include &lt;wifi_direct.h&gt;
int error_code;

error_code = wifi_direct_initialize();
</pre>

<p>To monitor the state of several events, the application can set state changed callbacks using the <span style="font-family: Courier New,Courier,monospace">wifi_direct_set_device_state_changed_cb()</span>, <span style="font-family: Courier New,Courier,monospace">discovery_state_changed_cb()</span>, and <span style="font-family: Courier New,Courier,monospace">wifi_direct_set_connection_state_changed_cb()</span> functions after initializing Wi-Fi Direct&trade;.</p>
</li>

<li>Activate Wi-Fi Direct&trade;.

<p>Define the <span style="font-family: Courier New,Courier,monospace">device_state_changed_cb()</span> callback function, which is invoked whenever a Wi-Fi Direct&trade; local device activates or deactivates:</p> 

<pre class="prettyprint">
/* Get the Wi-Fi Direct&trade; activation and deactivation events in device_state_changed_cb() callback */
static void
device_state_changed_cb(wifi_direct_error_e error_code,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_discovery_state_e discovery_state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (device_state == WIFI_DIRECT_DEVICE_STATE_ACTIVATED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Activate Wi-Fi Direct&trade; device!\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;else if (device_state == WIFI_DIRECT_DEVICE_STATE_DEACTIVATED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Deactivate Wi-Fi Direct&trade; device!\n&quot;);
}

error_code = wifi_direct_set_device_state_changed_cb(device_state_changed_cb, NULL);

/* Activate Wi-Fi Direct&trade; */
error_code = wifi_direct_activate();
if (error_code != WIFI_DIRECT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;[wifi_direct_activate] Failed.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return;
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;[wifi_direct_activate] Succeeded.&quot;);
}
</pre>

<p>After the <span style="font-family: Courier New,Courier,monospace">wifi_direct_activate()</span> function is completed, the <span style="font-family: Courier New,Courier,monospace">device_state_changed_cb()</span> callback is invoked.</p>
</li>
<li>Start the discovery to find nearby peer devices:

<pre class="prettyprint">
void
discovery_state_changed_cb(wifi_direct_error_e error_code,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_discovery_state_e discovery_state, void *user_data);

error_code = wifi_direct_set_discovery_state_changed_cb(discovery_state_changed_cb, NULL);

/* Discover nearby Wi-Fi Direct&trade; peer devices */
wifi_direct_start_discovery(false, 0);
</pre>

<p>When the Wi-Fi Direct&trade; discovery state changes, the <span style="font-family: Courier New,Courier,monospace">discovery_state_changed_cb()</span> function is called.</p>
</li>

<li>Fetch the list of peers.

<p>Get the list of peers with the <span style="font-family: Courier New,Courier,monospace">wifi_direct_foreach_discovered_peers()</span> function. It invokes the <span style="font-family: Courier New,Courier,monospace">wifi_direct_discovered_peer_cb()</span> callback, which provides information about the peers that Wi-Fi P2P has detected:</p>

<pre class="prettyprint">
char * mac_address = NULL;

bool
discovered_peer_cb(wifi_direct_discovered_peer_info_s *peer, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (NULL != peer) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;\nDevice Name: %s&quot;, peer-&gt;device_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;\nMac Address: %s&quot;, peer-&gt;mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mac_address = strdup(peer-&gt;mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_direct_connect(mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_DIRECT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Fail to connect\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;
&nbsp;&nbsp;&nbsp;&nbsp;}
}

int
fetch_wifi_direct()
{
&nbsp;&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;&nbsp;int ret = wifi_direct_foreach_discovered_peers(discovered_peer_cb, &amp;mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != WIFI_DIRECT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;[wifi_direct_foreach_discovered_peers] Failed.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Connect a specific Wi-Fi Direct&trade; peer device:

<pre class="prettyprint">
static void
connection_state_changed_cb(wifi_direct_error_e error_code,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_connection_state_e connection_state,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *mac_address, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Connection state changed to: [%d] [%s]\n&quot;, connection_state,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;test_wfd_convert_connection_state_to_string(connection_state));

&nbsp;&nbsp;&nbsp;&nbsp;bool accept_connection = false;
&nbsp;&nbsp;&nbsp;&nbsp;int rv = 0;

&nbsp;&nbsp;&nbsp;&nbsp;switch (connection_state) {
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_WPS_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Outgoing requests */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_wps_type_e wps_mode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_get_local_wps_type(&amp;wps_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Incoming requests */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_wps_type_e wps_mode;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_direct_get_local_wps_type(&amp;wps_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_INVITATION_REQ:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Invitation request from peer */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISASSOCIATION_IND:
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCONNECTION_IND:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Peer : [%s] disconnected.\n&quot;, mac_address);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_IN_PROGRESS:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Connection in progress\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_CONNECTION_RSP:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code == WIFI_DIRECT_ERROR_CONNECTION_FAILED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(MAKE_RED&quot;Time Out or connection failed&quot;RESET_COLOR&quot;\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_GROUP_CREATED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_GROUP_DESTROYED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_DIRECT_DISCONNECTION_RSP:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Unknown State Received\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

error_code = wifi_direct_set_connection_state_changed_cb(connection_state_changed_cb, NULL);
</pre>
</li>
<li>When the connection is no longer needed, disconnect the Wi-Fi Direct&trade; device:

<pre class="prettyprint">
error_code = wifi_direct_disconnect(mac_address);
if (error_code != WIFI_DIRECT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Fail to disconnect\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}
</pre>
</li>
<li>To deactivate Wi-Fi Direct&trade; when it is no longer needed (or the application is exiting):

<pre class="prettyprint">
/* Power off the local device using the wifi_direct_deactivate() function */
/* Deactivate Wi-Fi Direct&trade; */
wifi_direct_deactivate(NULL);

/* Unset the callbacks */
/* Unset the activation or deactivation event callback */
wifi_direct_unset_device_state_changed_cb(NULL);

/* Unset the discovery event callback */
wifi_direct_unset_discovery_state_changed_cb(NULL);

/* Unset the connection event callback */
wifi_direct_unset_connection_state_changed_cb(NULL);
</pre>
</li>
<li>Release the Wi-Fi Direct&trade;.

<p>Power off the local device using the <span style="font-family: Courier New,Courier,monospace">wifi_direct_deactivate()</span> function:</p>

<pre class="prettyprint">
/* Release Wi-Fi Direct&trade; */
wifi_direct_deinitialize();
</pre>
</li>
</ol>

<h2 id="TDLS">Difference Between Wi-Fi Direct&trade; and TDLS</h2>

<p>There are 2 protocol technologies to connect directly with each other for Wi-Fi devices:</p>

<ul>
<li>Wi-Fi Direct&trade;</li>
<li>TDLS (Tunneled Direct Link Setup)</li>
</ul>

<p>Wi-Fi Direct&trade;-certified devices can quickly connect to one another while on the go, even when a Wi-Fi network is unavailable, while TDLS operates in the background of a Wi-Fi network to optimize performance. Many devices are certified for both solutions and use them in different situations.</p>

<p>For more information, see <a href="http://www.wi-fi.org/knowledge-center/faq/what-is-the-difference-between-tdls-and-wi-fi-direct" target="_blank">What is the difference between TDLS and Wi-Fi Direct?</a>, <a href="http://www.telecomabc.com/numbers/80211z.html" target="_blank">IEEE 802.11z - TDLS</a> and <a href="https://www.excentis.com/blog/content-sharing-syncing-streaming-protocols-wi-fi" target="_blank">Content sharing, syncing, streaming protocols for Wi-Fi</a>.</p>

<h3>Wi-Fi Direct&trade;</h3>

<p>Wi-Fi Direct&trade; is a new technology defined by the Wi-Fi Alliance aimed at enhancing direct device to device communications in Wi-Fi. Wi-Fi Direct&trade; can be used to directly connect mobile phones, tablets, and PCs to peripherals, such as cameras, printers, gaming devices, or a wireless mouse, without the need for an access point. Devices can make a one-to-one connection, or a group of several devices can connect.</p>

<p class="figure">Figure: Wi-Fi Direct&trade;</p> 
<p align="center"><img alt="Wi-Fi Direct" src="../../images/connectivity_wifidirect.png" /></p>

<p>Direct device to device connectivity was already possible in the original IEEE 802.11 standard by means of the ad-hoc mode of operation. However, this never became widely deployed. Wi-Fi Direct&trade; takes a different approach: in it, one of the devices acts as an access point. This means that legacy Wi-Fi devices can seamlessly connect to Wi-Fi Direct&trade; devices.</p>

<h3>TDLS (Tunneled Direct Link Setup)</h3>

<p>The IEEE 802.11z amendment is a mechanism that makes it possible to directly transfer data between 2 Wi-Fi clients that are part of the same Wi-Fi network.</p>
  
<p class="figure">Figure: TDLS</p> 
<p align="center"><img alt="TDLS" src="../../images/connectivity_tdls.png" /></p> 

<p>Usually, in a Wi-Fi network, data is transferred from one client to another through an access point (AP). The IEEE 802.11z amendment defines mechanisms that allow IEEE 802.11 to set up a direct link between client devices while also remaining associated with the AP. These mechanisms are referred to as Tunneled Direct Link Setup (TDLS). This reduces the amount of traffic that is transferred in the network and prevents congestion at the AP.</p>

<p>A TDLS direct link is set up automatically between the devices, without intervention from the AP or the user. The connection with the AP is maintained.</p>

<p>TDLS is not the same as, nor does it replace Wi-Fi Direct&trade;. TDLS is used to optimize the traffic flow in a network, while Wi-Fi Direct&trade; is used to quickly connect devices to one another while on the go, even when a Wi-Fi network is unavailable.</p>
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

