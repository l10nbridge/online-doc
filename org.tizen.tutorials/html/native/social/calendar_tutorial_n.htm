<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Calendar: Managing Calendar Events and Accessing the Calendar Database</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#init">Initializing the Calendar</a></li>
            <li>Events
                <ul class="toc">
                    <li><a href="#create_event">Creating an Event</a></li>
                    <li><a href="#get_event">Retrieving Events</a></li>
                    <li><a href="#update_event">Updating an Event</a></li>
                    <li><a href="#delete_event">Deleting an Event</a></li>
                    <li><a href="#exception_add">Removing an Instance from a Recurring Event</a></li>
                    <li><a href="#exception_modify">Adding an Exception to a Recurring Event</a></li>
                    <li><a href="#monitor_event">Monitoring Event Changes</a></li>
                </ul>
            </li>
            <li>Todos
                <ul class="toc">
                    <li><a href="#create">Creating a Todo</a></li>
                    <li><a href="#get">Retrieving Todos</a></li>
                    <li><a href="#update">Updating a Todo</a></li>
                    <li><a href="#delete">Deleting a Todo</a></li>
                    <li><a href="#monitor">Monitoring Todo Changes</a></li>
                </ul>
            </li>
            <li>vCalendars
                <ul class="toc">
                    <li><a href="#make">Creating a vCalendar</a></li>
                    <li><a href="#parse">Parsing a vCalendar</a></li>
                </ul>
            </li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/social/calendar_n.htm">Calendar Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html">Calendar API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Calendar: Managing Calendar Events and Accessing the Calendar Database</h1>

<p>This tutorial demonstrates how you can manage events and todo tasks, and convert calendar details to and from the vCalendar format.</p>

<p>This feature is supported in mobile applications only.</p>

<h2 id="warmup" name="warmup">Warm-up</h2>

<p>Become familiar with the Calendar API basics by learning about:</p>

<ul>
    <li><a href="#prerequisites">Prerequisites</a>
		<p>Set the required permissions.</p></li>
	<li><p><a href="#init">Initializing the Calendar</a></p>
        <p>Initialize the calendar service for use.</p></li>
    <li><p>Events</p>
        <ul>
            <li><p><a href="#create_event">Creating an Event</a></p>
                <p>Create a new event, set its properties, and add it to the calendar database.</p></li>
            <li><p><a href="#get_event">Retrieving Events</a></p>
                <p>Retrieve a single event or multiple events.</p></li>
            <li><p><a href="#update_event">Updating an Event</a></p>
                <p>Update event details.</p></li>
            <li><p><a href="#delete_event">Deleting an Event</a></p>
                <p>Delete an event from the calendar database.</p></li>
            <li><p><a href="#exception_add">Removing an Instance from a Recurring Event</a></p>
                <p>Remove an event instance from a recurring event.</p></li>
            <li><p><a href="#exception_modify">Adding an Exception to a Recurring Event</a></p>
                <p>Add an exception to an existing event.</p></li>
            <li><p><a href="#monitor_event">Monitoring Event Changes</a></p>
                <p>Receive a notification whenever an event changes.</p></li>
        </ul></li>
    <li><p>Todos</p>
        <ul>
            <li><p><a href="#create">Creating a Todo</a></p>
                <p>Create a new todo, set its properties, and add it to the calendar database.</p></li>
            <li><p><a href="#get">Retrieving Todos</a></p>
                <p>Retrieve a single todo or multiple todos.</p></li>
            <li><p><a href="#update">Updating a Todo</a></p>
                <p>Update todo details.</p></li>
            <li><p><a href="#delete">Deleting a Todo</a></p>
                <p>Delete a todo from the calendar database.</p></li>
            <li><p><a href="#monitor">Monitoring Todo Changes</a></p>
                <p>Receive a notification whenever a todo changes.</p></li>
        </ul></li>
    <li><p>vCalendars</p>
        <ul>
            <li><p><a href="#make">Creating a vCalendar</a></p>
                <p>Create a vCalendar stream from an event.</p></li>
            <li><p><a href="#parse">Parsing a vCalendar</a></p>
                <p>Parse a vCalendar from a file and insert its content into the calendar database.</p></li>
        </ul></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To use the Calendar API, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/calendar.read&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/calendar.write&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>

<h2 id="init" name="init">Initializing the Calendar</h2>

<p>To initialize the calendar service for use:</p>

<ol>

<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html">Calendar</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;calendar.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;calendar.h&gt;
</pre>
<p>To ensure that a Calendar function has been executed properly, make sure that the return value is equal to <span style="font-family: Courier New,Courier,monospace">CALENDAR_ERROR_NONE</span>. If the function returns an error, handle it accordingly.</p>
</li>

<li>
<p>To access the calendar database, connect to the calendar service using the <span style="font-family: Courier New,Courier,monospace">calendar_connect()</span> function:</p>
<pre class="prettyprint">
int error_code;
error_code = calendar_connect();
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_connect failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>After you have finished working with the calendar service, disconnect from the service using the <span style="font-family: Courier New,Courier,monospace">calendar_disconnect()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_disconnect();
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_disconnect failed: %x\n&quot;, error_code);
</pre>
</li>

</ol>

<h2 id="create_event" name="create_event">Creating an Event</h2>

<p>Creating a new event involves creating an event handle, setting the event properties, and inserting the event into the calendar database.</p>

<p>Some event properties are defined as child records that are associated with the parent record. For a detailed list of the event properties, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__VIEW__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_VIEW_MODULE_calendar_event">_calendar_event</a> view description in the Calendar API. If the property type is <span style="font-family: Courier New,Courier,monospace">child list</span>, the property is defined as a child record.</p>

<p>To create a new event:</p>

<ol>

<li>
<p>Create an event handle using the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_event._uri</span> property as the first parameter and the event handle variable as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h event = NULL;
error_code = calendar_record_create(_calendar_event._uri, &amp;event);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_record_create failed: %x\n&quot;, error_code);
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Records created with the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function are memory objects, with <span style="font-family: Courier New,Courier,monospace">calendar_record_h</span> type variables as their handles. If you changes these objects, the changes are not reflected in the calendar database until you explicitly insert or update the objects to the database using the <span style="font-family: Courier New,Courier,monospace">  calendar_db_insert_record()</span> or <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function.</td>
        </tr>
    </tbody>
</table>

</li>

<li>
<p>Set the event properties:</p>
<ul>
<li>
<p>Set the subject.</p>
<p>To set the subject for the event, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_event.summary</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(event, _calendar_event.summary, &quot;summary&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set summary failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the description.</p>
<p>To set the description for the event, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_event.description</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(event, _calendar_event.description, &quot;description&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the time zone for the start and end times.</p>
<p>To set the time zone for the event start and end times, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_event.start_tzid</span> and <span style="font-family: Courier New,Courier,monospace">_calendar_event.end_tzid</span> properties as the second parameter. If you do not set the time zone, the system uses UTC.</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(event, _calendar_event.start_tzid, &quot;Asia/Seoul&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_tzid failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(event, _calendar_event.end_tzid, &quot;Asia/Seoul&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set end_tzid failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the start and end times.</p>
<p>To set the start and end times for the event, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_event.start_time</span> and <span style="font-family: Courier New,Courier,monospace">_calendar_event.end_time</span> properties as the second parameter:</p>
<pre class="prettyprint">
calendar_time_s starttime = {0};
starttime.type = CALENDAR_TIME_UTIME;
starttime.time.utime = 1404036000; // 2014/06/29 10:00:00 UTC
error_code = calendar_record_set_caltime(event, _calendar_event.start_time, starttime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_time failed: %x\n&quot;, error_code);

calendar_time_s endtime = {0};
endtime.type = CALENDAR_TIME_UTIME;
endtime.time.utime = 1404036000 + 3600; // 2014/06/29 11:00:00 UTC
error_code = calendar_record_set_caltime(event, _calendar_event.end_time, endtime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set end_time failed: %x\n&quot;, error_code);
</pre>
<p>The <a href="../../../../org.tizen.native.mobile.apireference/structcalendar__time__s.html">calendar_time_s</a> structure has 2 types. For more information about the structure, see the <a href="../../../../org.tizen.guides/html/native/social/calendar_n.htm#time">Time Structure</a> guide.</p>
</li>
<li>
<p>To create a recurring event:</p>
<ol type="a">
<li>
<p>Set the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_MODULE_Creating_a_recurring_event">frequency</a>.</p>
<p>In the following example, the event is set to occur every month on the 3<sup>rd</sup>, 4<sup>th</sup>, and 5<sup>th</sup> day:</p>
<pre class="prettyprint">
error_code = calendar_record_set_int(event, _calendar_event.freq,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_RECURRENCE_MONTHLY);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set freq failed: %x\n&quot;, error_code);

error_code = calendar_record_set_int(event, _calendar_event.interval, 1);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set interval failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(event, _calendar_event.bymonthday, &quot;3,4,5&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set bymonthday failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_MODULE_Creating_a_recurring_event">range of recurrence</a>.</p>
<p>In the following example, the event is set to occur a total of 8 times:</p>
<pre class="prettyprint">
error_code = calendar_record_set_int(event, _calendar_event.range_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_RANGE_COUNT);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set range_type failed: %x\n&quot;, error_code);

error_code = calendar_record_set_int(event, _calendar_event.count, 8);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set count failed: %x\n&quot;, error_code);
</pre>
</li>
</ol>
<p>Based on the recurrence settings above and the start time (set in the previous step) of June 29, this event occurs 8 times: on Jul 3, 4, and 5, on Aug 3, 4, and 5, and on Sep 3 and 4.</p>
</li>
<li>
<p>Add an alarm.</p>
<p>To add an alarm, create a handle to an alarm record, set the alarm properties, and insert the alarm as a child record to the event.</p>
<p>In the following example, the alarm is defined to activate 60 seconds before the event start time:</p>
<pre class="prettyprint">
calendar_record_h alarm = NULL;
calendar_time_s ct;
error_code = CALENDAR_ERROR_NONE;

// Create the alarm record
error_code += calendar_record_create(_calendar_alarm._uri, &amp;alarm);

// Set the properties
error_code += calendar_record_set_int(alarm, _calendar_alarm.tick_unit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_ALARM_TIME_UNIT_SPECIFIC);
ct.type = CALENDAR_TIME_UTIME;
ct.time.utime = 1404036000 - 60; // 60 sec before starttime (1404036000)
error_code += calendar_record_set_caltime(alarm, _calendar_alarm.alarm_time, ct);

// Add to the event as a child record
error_code += calendar_record_add_child_record(event,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_calendar_event.calendar_alarm,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alarm);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;adding the alarm failed \n&quot;);
</pre>
<p>The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__RECORD__MODULE.html#ga631b1b606158479e3a14a921b006b4fe">calendar_alarm_time_unit_type_e</a> enumeration defines the available alarm tick units.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">If you use <span style="font-family: Courier New,Courier,monospace">CALENDAR_ALARM_TIME_UNIT_SPECIFIC</span> as a tick unit, specify the alarm time in Unix time.</td>
        </tr>
    </tbody>
</table>
</li>
<li>
<p>Add an attendee.</p>
<p>To add an attendee, create a handle to an attendee record, set the attendee properties, and insert the attendee as a child record to the event.</p>
<p>In the following example, 1 attendee named John is added:</p>
<pre class="prettyprint">
calendar_record_h attendee = NULL;
error_code = CALENDAR_ERROR_NONE;

// Create the attendee record
error_code += calendar_record_create(_calendar_attendee._uri, &amp;attendee);

// Set the attendee properties
error_code += calendar_record_set_str(attendee, _calendar_attendee.name, &quot;John&quot;);

// Add to the event as a child record
error_code += calendar_record_add_child_record(event,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_calendar_event.calendar_attendee,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;attendee);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;adding the attendee failed \n&quot;);
</pre>
</li>
</ul>
<p>Set other event properties similarly, as needed.</p>
</li>

<li>
<p>Insert the event into the calendar database using the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function. All child records added to the event using the <span style="font-family: Courier New,Courier,monospace">calendar_record_add_child_record()</span> function are inserted automatically along with the parent.</p>
<p>The system assigns a unique ID to the event, and the function returns it as its second parameter.</p>
<pre class="prettyprint">
int id = -1;
error_code = calendar_db_insert_record(event, &amp;id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_insert_record failed: %x\n&quot;, error_code);

dlog_print(DLOG_ERROR, LOG_TAG, &quot;id: %d\n&quot;, id);
</pre>
</li>

<li>
<p>When no longer needed, destroy the event handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(event, true);
</pre>
<p>If you set the second parameter to <span style="font-family: Courier New,Courier,monospace">true</span>, all child records of the given record are also destroyed, irrespective of how the child records were added (individually or along with their parent record).</p>
</li>

</ol>

<h2 id="get_event" name="get_event">Retrieving Events</h2>

<p>To retrieve a single event:</p>

<ol>
<li>
<p>Retrieve an event record using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_record()</span> function with the event ID as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h record;
const int event_id = ... // Get the event ID
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the event handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(record, true);
</pre>
</li>
</ol>

<p>To retrieve multiple events:</p>

<ol>

<li>
<p>Retrieve a list of all events, or retrieve a filtered list of events:</p>
<ul>
<li>
<p>To retrieve a list of all events, use the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
calendar_list_h list = NULL;
error_code = calendar_db_get_all_records(_calendar_event._uri, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_all_records failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>To retrieve a filtered list of events:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">calendar_query_create()</span> function:</p>
<pre class="prettyprint">
calendar_list_h list = NULL;
calendar_query_h query = NULL;

error_code = calendar_query_create(_calendar_event._uri, &amp;query);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_query_create failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_create()</span> function:</p>
<pre class="prettyprint">
calendar_filter_h filter = NULL;

error_code = calendar_filter_create(_calendar_event._uri, &amp;filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_filter_create failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Add a filtering condition using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_add_XXX()</span> function.</p>
<p>The following example adds a string-based filtering condition that retrieves the events whose summary field contains the string &quot;summary to find&quot;:</p>
<pre class="prettyprint">
error_code = calendar_filter_add_str(filter, _calendar_event.summary,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_CONTAINS, &quot;summary to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an AND operator and then a string-based filtering condition that retrieves the events whose description field contains the string &quot;description to find&quot;.</p>
<p>The combination of the AND operator and the 2 conditions means that the filter only retrieves the events that contain &quot;summary to find&quot; in their summary and &quot;description to find&quot; in their description.</p>
<pre class="prettyprint">
error_code = calendar_filter_add_operator(filter, CALENDAR_FILTER_OPERATOR_AND);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_filter_add_operator failed: %x\n&quot;, error_code);

error_code = calendar_filter_add_str(filter, _calendar_event.description,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_CONTAINS, &quot;description to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
<p>You can also create a filter with integer and time conditions. For example, to filter all-day events that start after January 1st, 2016:</p>
<pre class="prettyprint">
calendar_time_s time_to_compare = {0};
time_to_compare.type = CALENDAR_TIME_LOCALTIME;
time_to_compare.time.date.mday = 1;
time_to_compare.time.date.month = 1;
time_to_compare.time.date.year = 2016;
error_code = calendar_filter_add_caltime(filter, _calendar_event.start_time,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_GREATER_THAN, time_to_compare);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
<p>The <a href="../../../../org.tizen.native.mobile.apireference/structcalendar__time__s.html">calendar_time_s</a> structure&#39;s <span style="font-family: Courier New,Courier,monospace">type</span> parameter determines whether the event is an all-day event (<span style="font-family: Courier New,Courier,monospace">CALENDAR_TIME_LOCALTIME</span>) or a non-all-day event (<span style="font-family: Courier New,Courier,monospace">CALENDAR_TIME_UTIME</span>).</p>
<p>To retrieve the specified time period, use 2 conditions using <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_GREATER_THAN</span> and <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_LESS_THAN</span> with the operator <span style="font-family: Courier New,Courier,monospace">CALENDAR_FILTER_OPERATOR_AND</span>. You can also use <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_EQUAL</span> to set an equality condition.</p>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">calendar_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_query_set_filter(query, filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_query_set_filter failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Retrieve the filtered list of events using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_records_with_query failed: %x\n&quot;, error_code);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all events matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">calendar_query_destroy()</span> functions:</p>
<pre class="prettyprint">
calendar_filter_destroy(filter);
calendar_query_destroy(query);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found events, and retrieve event details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the event details.</p>
<p>Move forward and backward within the event list using the <span style="font-family: Courier New,Courier,monospace">calendar_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">calendar_list_prev()</span> functions, and retrieve the current event using the <span style="font-family: Courier New,Courier,monospace">calendar_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the summary of each event:</p>
<pre class="prettyprint">
calendar_record_h record;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* summary;
&nbsp;&nbsp;&nbsp;calendar_record_get_str_p(record, _calendar_event.summary, &amp;summary);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;summary: %s\n&quot;, summary);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each event using the <span style="font-family: Courier New,Courier,monospace">calendar_gl_event_data_t</span> structure:</p>
<pre class="prettyprint">
calendar_gl_event_data_t *gl_event_data = NULL;
calendar_record_h record = NULL;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_event_data = _create_gl_event_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, summary:
&nbsp;&nbsp;&nbsp;// gl_event_data-&gt;summary

&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">calendar_gl_event_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_calendar_gl_event_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *summary;
&nbsp;&nbsp;&nbsp;char *description;
&nbsp;&nbsp;&nbsp;calendar_time_s start_time;
} calendar_gl_event_data_t;

// Release the resources allocated to the structure
static void
_free_gl_event_data(calendar_gl_event_data_t *gl_event_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_event_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_event_data-&gt;summary);
&nbsp;&nbsp;&nbsp;free(gl_event_data-&gt;description);
&nbsp;&nbsp;&nbsp;free(gl_event_data);
}

// Create the structure for an event
static calendar_gl_event_data_t*
_create_gl_event_data(calendar_record_h record)
{
&nbsp;&nbsp;&nbsp;calendar_gl_event_data_t *gl_event_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_event_data = malloc(sizeof(calendar_gl_event_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_event_data, 0x0, sizeof(calendar_gl_event_data_t));

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_event.summary,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_event_data-&gt;summary);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get summary failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_event.description,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_event_data-&gt;description);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get description failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_int(record, _calendar_event.id, &amp;gl_event_data-&gt;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get id failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_caltime(record, _calendar_event.start_time,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_event_data-&gt;start_time);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get start_time failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_event_data;
}
</pre>
<p>To access a specific event detail in a child record, retrieve the child record.</p>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_list_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="update_event" name="update_event">Updating an Event</h2>

<p>To update event details:</p>

<ol>

<li>
<p>Retrieve the event you want to update using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_record()</span> function with the event ID as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h record;
const int event_id = ... // Get the event ID
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_record failed: %x\n&quot;, error_code);
</pre>

<p>You can also retrieve the event using a search function, such as <span style="font-family: Courier New,Courier,monospace">calendar_db_get_records_with_query()</span>.</p>

</li>

<li>
<p>Set the properties you want to update.</p>
<p>The following example sets a new subject and description for the event:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(record, _calendar_event.summary, &quot;summary updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set summary failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(record, _calendar_event.description, &quot;description updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Update the event using the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_update_record(record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_update_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the event handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(record, true);
</pre>
</li>

</ol>

<h2 id="delete_event" name="delete_event">Deleting an Event</h2>

<p>To delete an event, use the <span style="font-family: Courier New,Courier,monospace">calendar_db_delete_record()</span> function with the event ID as the second parameter:</p>

<pre class="prettyprint">
int event_id = ... // Get the event ID
error_code = calendar_db_delete_record(_calendar_event._uri, event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_delete_record failed: %x\n&quot;, error_code);
</pre>

<h2 id="exception_add" name="exception_add">Removing an Instance from a Recurring Event</h2>

<p>To remove an event instance from a recurring event:</p>

<ol>

<li>
<p>Create a recurring event.</p>
<p>The following example creates an event with the following properties:</p>
<ul>
<li><p>Frequency: <span style="font-family: Courier New,Courier,monospace">CALENDAR_RECURRENCE_MONTHLY</span></p></li>
<li><p>Interval: 1</p></li>
<li><p>Days of the month: &quot;3, 4, 5&quot;</p></li>
<li><p>Range type: <span style="font-family: Courier New,Courier,monospace">CALENDAR_RANGE_COUNT</span></p></li>
<li><p>Count: 8</p></li>
</ul>
<pre class="prettyprint">
int error_code = CALENDAR_ERROR_NONE;

calendar_record_h event = NULL;
error_code += calendar_record_create(_calendar_event._uri, &amp;event);
error_code += calendar_record_set_str(event, _calendar_event.summary, &quot;test&quot;);
error_code += calendar_record_set_str(event, _calendar_event.start_tzid, &quot;Asia/Seoul&quot;);
error_code += calendar_record_set_str(event, _calendar_event.end_tzid, &quot;Asia/Seoul&quot;);

calendar_time_s st = {0};
st.type = CALENDAR_TIME_UTIME;
st.time.utime = 1349226000;
error_code += calendar_record_set_caltime(event, _calendar_event.start_time, st);

calendar_time_s et = {0};
et.type = CALENDAR_TIME_UTIME;
et.time.utime = 1354582800;
error_code += calendar_record_set_caltime(event, _calendar_event.end_time, et);

error_code += calendar_record_set_int(event, _calendar_event.freq, CALENDAR_RECURRENCE_MONTHLY);
error_code += calendar_record_set_int(event, _calendar_event.interval, 1);
error_code += calendar_record_set_str(event, _calendar_event.bymonthday, &quot;3,4,5&quot;);

error_code += calendar_record_set_int(event, _calendar_event.range_type, CALENDAR_RANGE_COUNT);
error_code += calendar_record_set_int(event, _calendar_event.count, 8);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;creating the event failed: \n&quot;);
</pre>
<p>The event has 8 instances:</p>
<table>
    <caption>Table: Event instances</caption>
    <tbody>
        <tr>
            <th>unixtime</th>
            <th>Date time</th>
        </tr>
        <tr>
            <td>1349226000
                <br/>1349312400
                <br/>1349398800
                <br/>1351904400
                <br/>1351990800
                <br/>1352077200
                <br/>1354496400
                <br/>1354582800</td>
            <td>2012-10-03 01:00:00
                <br/>2012-10-04 01:00:00
                <br/>2012-10-05 01:00:00
                <br/>2012-11-03 01:00:00
                <br/>2012-11-04 01:00:00
                <br/>2012-11-05 01:00:00
                <br/>2012-12-03 01:00:00
                <br/>2012-12-04 01:00:00</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>Create the exception by setting the <span style="font-family: Courier New,Courier,monospace">exdate</span> property.</p>
<p>In vCalendar 2.0 (RFC 2445), the <span style="font-family: Courier New,Courier,monospace">exdate</span> property is used to identify a deleted instance. If multiple instances are deleted, datetimes are added with a comma (for example, <span style="font-family: Courier New,Courier,monospace">20121104T010000Z, 20121105T010000Z, 20121203T010000Z</span>).</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(event, _calendar_event.exdate, &quot;20121104T010000Z&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set exdate failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Insert the event into the calendar database using the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function:</p>
<pre class="prettyprint">
int event_id;
error_code = calendar_db_insert_record(event, &amp;event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_insert_record failed: %x\n&quot;, error_code);

calendar_record_destroy(event, true);
</pre>
</li>

</ol>

<h2 id="exception_modify" name="exception_modify">Adding an Exception to a Recurring Event</h2>

<p>To add an exception to a recurring event:</p>

<ol>

<li><p>Make sure you have an existing recurring event.</p></li>

<li>
<p>Clone the existing event.</p>
<p>Cloning means that the new event initially has the same properties as the original event. In vCalendar 2.0 (RFC 2445), the recurrence ID is used to identify the modified instance (exception).</p>
<pre class="prettyprint">
calendar_record_h clone = NULL;
error_code = CALENDAR_ERROR_NONE;

error_code += calendar_record_clone(event, &amp;clone);
error_code += calendar_record_set_int(clone, _calendar_event.original_event_id, event_id);
error_code += calendar_record_set_str(clone, _calendar_event.recurrence_id, &quot;20121005T010000Z&quot;);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;cloning the event failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Modify or add event properties to create the exception.</p>
</li>

<li>
<p>Insert the exception into the calendar database using the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function:</p>
<pre class="prettyprint">
int exdate_event_id = 0;
error_code = calendar_db_insert_record(clone, &amp;exdate_event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_insert_record failed: %x\n&quot;, error_code);

calendar_record_destroy(clone, true);
calendar_record_destroy(event, true);
</pre>
</li>

</ol>

<h2 id="monitor_event" name="monitor_event">Monitoring Event Changes</h2>

<p>To receive a notification whenever an event changes:</p>

<ol>

<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">calendar_db_add_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_add_changed_cb(_calendar_event._uri, _event_changed_callback, NULL);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_add_changed_cb failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Define the event change callback.</p>
<p>The following example shows how to retrieve the new event details in the callback:</p>
<pre class="prettyprint">
static calendar_gl_event_data_t *_gl_event_data = ...

static void
_event_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _calendar_event._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (NULL == _gl_event_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int event_id = _gl_event_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_event_data(_gl_event_data);
&nbsp;&nbsp;&nbsp;_gl_event_data = NULL;

&nbsp;&nbsp;&nbsp;calendar_record_h record = NULL;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_event_data = _create_gl_event_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_event_data

&nbsp;&nbsp;&nbsp;calendar_record_destroy(record, true);
}
</pre>
</li>

</ol>

<h2 id="create" name="create">Creating a Todo</h2>

<p>Creating a new todo involves creating a todo handle, setting the todo properties, and inserting the todo into the calendar database.</p>

<p>Some todo properties are defined as child records that are associated with the parent record. For a detailed list of the todo properties, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__VIEW__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_VIEW_MODULE_calendar_todo">_calendar_todo</a> view description in the Calendar API. If the property type is <span style="font-family: Courier New,Courier,monospace">child list</span>, the property is defined as a child record.</p>

<p>To create a new todo:</p>

<ol>

<li>
<p>Create a todo handle using the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_todo._uri</span> property as the first parameter and the todo handle variable as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h todo = NULL;
error_code = calendar_record_create(_calendar_todo._uri, &amp;todo);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_record_create failed: %x\n&quot;, error_code);
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Records created with the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function are memory objects, with <span style="font-family: Courier New,Courier,monospace">calendar_record_h</span> type variables as their handles. If you changes these objects, the changes are not reflected in the calendar database until you explicitly insert or update the objects to the database using the <span style="font-family: Courier New,Courier,monospace">  calendar_db_insert_record()</span> or <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function.</td>
        </tr>
    </tbody>
</table>

</li>

<li>
<p>Set the todo properties:</p>
<ul>
<li>
<p>Set the subject.</p>
<p>To set the subject for the todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_todo.summary</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(todo, _calendar_todo.summary, &quot;summary&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set summary failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the description.</p>
<p>To set the description for the todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_todo.description</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(todo, _calendar_todo.description, &quot;description&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the due time.</p>
<p>To set the due time for the todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_todo.due_time</span> property as the second parameter:</p>
<pre class="prettyprint">
calendar_time_s duetime = {0};
duetime.type = CALENDAR_TIME_UTIME;
duetime.time.utime = 1404036000; // 2014/06/29 11:00:00 UTC

error_code = calendar_record_set_caltime(todo, _calendar_todo.due_time, duetime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set due_time failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the status.</p>
<p>To set the status for the todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_calendar_todo.todo_status</span> property as the second parameter. The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__RECORD__MODULE.html#ga3e1b9cae05705d471a4746d8ab6d3622">calendar_todo_status_e</a> enumeration defines the possible status values.</p>
<pre class="prettyprint">
error_code = calendar_record_set_int(todo, _calendar_todo.todo_status,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_TODO_STATUS_COMPLETED);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set todo_status failed: %x\n&quot;, error_code);
</pre>
</li>
</ul>
<p>Set other todo properties similarly, as needed.</p>
</li>

<li>
<p>Insert the todo into the calendar database using the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function. All child records added to the todo using the <span style="font-family: Courier New,Courier,monospace">calendar_record_add_child_record()</span> function are inserted automatically along with the parent.</p>
<p>The system assigns a unique ID to the todo, and the function returns it as its second parameter.</p>
<pre class="prettyprint">
int id;
error_code = calendar_db_insert_record(todo, &amp;id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_insert_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the todo handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(todo, true);
</pre>
<p>If you set the second parameter to <span style="font-family: Courier New,Courier,monospace">true</span>, all child records of the given record are also destroyed, irrespective of how the child records were added (individually or along with their parent record).</p>
</li>

</ol>

<h2 id="get" name="get">Retrieving Todos</h2>

<p>To retrieve a single todo:</p>

<ol>
<li>
<p>Retrieve an todo record using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_record()</span> function with the todo ID as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h record;
const int todo_id = ... // Get the todo ID
error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the todo handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(record, true);
</pre>
</li>
</ol>


<p>To retrieve multiple todos:</p>

<ol>

<li>
<p>Retrieve a list of all todos, or retrieve a filtered list of todos:</p>
<ul>
<li>
<p>To retrieve a list of all todos, use the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
calendar_list_h list = NULL;
error_code = calendar_db_get_all_records(_calendar_todo._uri, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_all_records failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>To retrieve a filtered list of todos:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">calendar_query_create()</span> function:</p>
<pre class="prettyprint">
calendar_list_h list = NULL;
calendar_query_h query = NULL;

error_code = calendar_query_create(_calendar_todo._uri, &amp;query);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_query_create failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_create()</span> function:</p>
<pre class="prettyprint">
calendar_filter_h filter = NULL;

error_code = calendar_filter_create(_calendar_todo._uri, &amp;filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_filter_create failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Add a filtering condition using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_add_XXX()</span> function.</p>
<p>The following example adds a string-based filtering condition that retrieves the todos whose summary field contains the string &quot;summary to find&quot;:</p>
<pre class="prettyprint">
error_code = calendar_filter_add_str(filter, _calendar_todo.summary,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_CONTAINS, &quot;summary to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an AND operator and then a string-based filtering condition that retrieves the todos whose description field contains the string &quot;description to find&quot;.</p>
<p>The combination of the AND operator and the 2 conditions means that the filter only retrieves the todos that contain &quot;summary to find&quot; in their summary and &quot;description to find&quot; in their description.</p>
<pre class="prettyprint">
error_code = calendar_filter_add_operator(filter, CALENDAR_FILTER_OPERATOR_AND);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_filter_add_operator failed: %x\n&quot;, error_code);

error_code = calendar_filter_add_str(filter, _calendar_todo.description,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_CONTAINS, &quot;description to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
<p>You can also create a filter with integer and time conditions. For example, to filter all completed todos:</p>
<pre class="prettyprint">
error_code = calendar_filter_add_int(filter, _calendar_todo.todo_status,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_MATCH_EQUAL, CALENDAR_TODO_STATUS_COMPLETED);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">calendar_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_query_set_filter(query, filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_query_set_filter failed: %x\n&quot;, error_code);
</pre>
</li>
<li>
<p>Retrieve the filtered list of todos using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_records_with_query failed: %x\n&quot;, error_code);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all todos matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">calendar_query_destroy()</span> functions:</p>
<pre class="prettyprint">
calendar_filter_destroy(filter);
calendar_query_destroy(query);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found todos, and retrieve todo details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the todo details.</p>
<p>Move forward and backward within the todo list using the <span style="font-family: Courier New,Courier,monospace">calendar_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">calendar_list_prev()</span> functions, and retrieve the current todo using the <span style="font-family: Courier New,Courier,monospace">calendar_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the summary of each todo:</p>
<pre class="prettyprint">
calendar_record_h record;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* summary;
&nbsp;&nbsp;&nbsp;calendar_record_get_str_p(record, _calendar_todo.summary, &amp;summary);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;summary: %s\n&quot;, summary);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each todo using the <span style="font-family: Courier New,Courier,monospace">calendar_gl_todo_data_t</span> structure:</p>
<pre class="prettyprint">
calendar_gl_todo_data_t *gl_todo_data = NULL;
calendar_record_h record = NULL;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_todo_data = _create_gl_todo_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, summary:
&nbsp;&nbsp;&nbsp;// gl_todo_data-&gt;summary

&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">calendar_gl_todo_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_calendar_gl_todo_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *summary;
&nbsp;&nbsp;&nbsp;char *description;
&nbsp;&nbsp;&nbsp;calendar_time_s due_time;
} calendar_gl_todo_data_t;

// Release the resources allocated to the structure
static void
_free_gl_todo_data(calendar_gl_todo_data_t *gl_todo_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_todo_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_todo_data-&gt;summary);
&nbsp;&nbsp;&nbsp;free(gl_todo_data-&gt;description);
&nbsp;&nbsp;&nbsp;free(gl_todo_data);
}

// Create the structure for a todo
static calendar_gl_todo_data_t*
_create_gl_todo_data(calendar_record_h record)
{
&nbsp;&nbsp;&nbsp;calendar_gl_todo_data_t *gl_todo_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_todo_data = malloc(sizeof(calendar_gl_todo_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_todo_data, 0x0, sizeof(calendar_gl_todo_data_t));

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_todo.summary,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_todo_data-&gt;summary);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get summary failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_todo.description,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_todo_data-&gt;description);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get description failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_int(record, _calendar_todo.id, &amp;gl_todo_data-&gt;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get id failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_caltime(record, _calendar_todo.due_time,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_todo_data-&gt;due_time);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get due_time failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_todo_data;
}
</pre>
<p>To access a specific todo detail in a child record, retrieve the child record.</p>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_list_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="update" name="update">Updating a Todo</h2>

<p>To update todo details:</p>

<ol>

<li>
<p>Retrieve the todo you want to update using the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_record()</span> function with the todo ID as the second parameter:</p>
<pre class="prettyprint">
calendar_record_h record;
const int todo_id = ... // Get the todo ID
error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_record failed: %x\n&quot;, error_code);
</pre>

<p>You can also retrieve the todo using a search function, such as <span style="font-family: Courier New,Courier,monospace">calendar_db_get_records_with_query()</span>.</p>

</li>

<li>
<p>Set the properties you want to update.</p>
<p>The following example sets a new subject and description for the todo:</p>
<pre class="prettyprint">
error_code = calendar_record_set_str(record, _calendar_todo.summary, &quot;summary updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set summary failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(record, _calendar_todo.description, &quot;description updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Update the todo using the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_update_record(record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_update_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the todo handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function:</p>
<pre class="prettyprint">
calendar_record_destroy(record, true);
</pre>
</li>

</ol>

<h2 id="delete" name="delete">Deleting a Todo</h2>

<p>To delete a todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_db_delete_record()</span> function with the todo ID as the second parameter:</p>

<pre class="prettyprint">
int todo_id = ... // Get the todo ID
error_code = calendar_db_delete_record(_calendar_todo._uri, todo_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_delete_record failed: %x\n&quot;, error_code);
</pre>

<h2 id="monitor" name="monitor">Monitoring Todo Changes</h2>

<p>To receive a notification whenever a todo changes:</p>

<ol>

<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">calendar_db_add_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = calendar_db_add_changed_cb(_calendar_todo._uri, _todo_changed_callback, NULL);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_add_changed_cb failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Define the todo change callback.</p>
<p>The following example shows how to retrieve the new todo details in the callback:</p>
<pre class="prettyprint">
static calendar_gl_todo_data_t *_gl_todo_data = ...

static void
_todo_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _calendar_todo._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (NULL == _gl_todo_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int todo_id = _gl_todo_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_todo_data(_gl_todo_data);
&nbsp;&nbsp;&nbsp;_gl_todo_data = NULL;

&nbsp;&nbsp;&nbsp;calendar_record_h record = NULL;
&nbsp;&nbsp;&nbsp;calendar_error_e error_code;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_todo_data = _create_gl_todo_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_todo_data

&nbsp;&nbsp;&nbsp;calendar_record_destroy(record, true);
}
</pre>
</li>

</ol>

<h2 id="make" name="make">Creating a vCalendar</h2>

<p>To create a vCalendar stream from an event:</p>

<ol>

<li>
<p>Retrieve the event:</p>
<pre class="prettyprint">
int event_id = ... // Get the event ID
calendar_record_h record = NULL;
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_get_record failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>Create a vCalendar stream from the event:</p>
<pre class="prettyprint">
char *vcalendar_stream = NULL;
calendar_list_h list = NULL;

error_code = calendar_list_create(&amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_list_create failed: %x\n&quot;, error_code);

error_code = calendar_list_add(list, record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_list_add failed: %x\n&quot;, error_code);

error_code = calendar_vcalendar_make_from_records(list, &amp;vcalendar_stream);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_vcalendar_make_from_records failed: %x\n&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, free the vCalendar stream, destroy the list handle, and release all its resources:</p>
<pre class="prettyprint">
free(vcalendar_stream);
calendar_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="parse" name="parse">Parsing a vCalendar</h2>

<p>To parse a vCalendar from a file and insert its content into the calendar database:</p>

<ol>

<li>
<p>Parse the vCalendar stream using the <span style="font-family: Courier New,Courier,monospace">calendar_vcalendar_parse_to_calendar_foreach()</span> function:</p>
<pre class="prettyprint">
char vcalendar_file_path[512] = {0};
char *resource_path = app_get_resource_path();
snprintf(vcalendar_file_path, sizeof(vcalendar_file_path), &quot;%s/%s&quot;, resource_path, &quot;vcalendar.ics&quot;);
free(resource_path);

error_code = calendar_vcalendar_parse_to_calendar_foreach(vcalendar_file_path, // File path of vCalendar
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_vcalendar_parse_cb, // Callback to invoke
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL); // User data passed to the callback
</pre>
</li>

<li>
<p>Define a callback that inserts the parsed event or todo into the calendar database.</p>
<p>The vCalendar stream can contain multiple events or todos. The <span style="font-family: Courier New,Courier,monospace">calendar_vcalendar_parse_to_calendar_foreach()</span> function invokes a separate callback for each parsed item. As long as the callback returns <span style="font-family: Courier New,Courier,monospace">true</span>, the foreach function continues to parse new events and todos.</p>
<pre class="prettyprint">
static bool
_vcalendar_parse_cb(calendar_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == record)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_insert_record(record, &amp;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_db_insert_record failed: %x\n&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;inserted id: %d\n&quot;, id);
&nbsp;&nbsp;&nbsp;// Use record

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>