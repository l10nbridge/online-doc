<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Calendar: Managing Calendar Events and Accessing the Calendar Database</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Calendar</a>
			</li>
			<li>Calendar management
			<ul class="toc">
				<li><a href="#create_event">Creating an Event</a></li>
				<li><a href="#set_event">Setting Event Properties</a></li>
				<li><a href="#insert_event">Inserting an Event to the Database</a></li>
				<li><a href="#get_event">Getting Events</a></li>
				<li><a href="#update_event">Updating an Event</a></li>
				<li><a href="#delete_event">Deleting an Event</a></li>
				<li><a href="#exception_add">Setting Exceptions when Inserting Events</a></li>
				<li><a href="#exception_modify">Adding an Exception Date for an Existing Event</a></li>
				<li><a href="#monitor_event">Monitoring Event Changes</a></li>
			</ul></li>
			<li>Todos
				<ul class="toc">
				<li><a href="#create">Creating a Todo</a></li>
				<li><a href="#set">Setting Todo Properties</a></li>
				<li><a href="#insert">Inserting a Todo to the Database</a></li>
				<li><a href="#get">Getting Todos</a></li>
				<li><a href="#update">Updating a Todo</a></li>
				<li><a href="#delete">Deleting a Todo</a></li>
				<li><a href="#monitor">Monitoring Todo Changes</a></li>
			</ul></li>
			<li>vCalendars
				<ul class="toc">
				<li><a href="#make">Making a vCalendar</a></li>
				<li><a href="#parse">Parsing a vCalendar</a></li>
			</ul></li>
		</ul>      
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/social/calendar_n.htm">Calendar Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html">Calendar API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

 <h1>Calendar: Managing Calendar Events and Accessing the Calendar Database</h1>

   
<p>This tutorial demonstrates how you can manage events and todo tasks, and convert calendar details to and from the vCalendar format.</p>

<p>This feature is supported in mobile applications only.</p>
  
    <h2 id="warmup" name="warmup">Warm-up</h2>
    <p>Become familiar with the Calendar API basics by learning about:</p>
    <ul>
			<li><a href="#init">Initializing the Calendar</a>
			<p>Initialize the calendar for use.</p></li>
			<li>Calendar management
			<ul>
				<li><a href="#create_event">Creating an Event</a>
				<p>Create a new event.</p></li>
				<li><a href="#set_event">Setting Event Properties</a>
				<p>Set event properties, such as subject and description.</p></li>
				<li><a href="#insert_event">Inserting an Event to the Database</a>
				<p>Insert an event to the calendar database.</p></li>
				<li><a href="#get_event">Getting Events</a>
				<p>Retrieve a single event or a list of events.</p></li>
				<li><a href="#update_event">Updating an Event</a>
				<p>Update event details.</p></li>
				<li><a href="#delete_event">Deleting an Event</a>
				<p>Delete an event from the database.</p></li>
				<li><a href="#exception_add">Setting Exceptions when Inserting Events</a>
				<p>Set exceptions when creating an event with a frequency.</p></li>
				<li><a href="#exception_modify">Adding an Exception Date for an Existing Event</a>
				<p>Add an exception date for an existing event.</p></li>
				<li><a href="#monitor_event">Monitoring Event Changes</a>
				<p>Receive notifications when changes occur in events.</p></li>
			</ul></li>
			<li>Todos
				<ul>
				<li><a href="#create">Creating a Todo</a>
				<p>Create a new todo.</p></li>
				<li><a href="#set">Setting Todo Properties</a>
				<p>Set todo properties, such as subject and description.</p></li>
				<li><a href="#insert">Inserting a Todo to the Database</a>
				<p>Insert a todo to the calendar database.</p></li>
				<li><a href="#get">Getting Todos</a>
				<p>Retrieve a single todo or a list of todos.</p></li>
				<li><a href="#update">Updating a Todo</a>
				<p>Update todo details.</p></li>
				<li><a href="#delete">Deleting a Todo</a>
				<p>Delete the todo from the database.</p></li>
				<li><a href="#monitor">Monitoring Todo Changes</a>
				<p>Receive notifications when changes occur in todos.</p></li>
			</ul></li>
			<li>vCalendars
				<ul>
				<li><a href="#make">Making a vCalendar</a>
				<p>Make a vCalendar stream from an event record.</p></li>
				<li><a href="#parse">Parsing a vCalendar</a>
				<p>Parse a vCalendar from a file and insert to the database.</p></li>
			</ul></li>
		</ul>


 <h2 id="init" name="init">Initializing the Calendar</h2>
			
<p>To initialize the Calendar Service:</p>
<ol><li>			
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html">Calendar</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;calendar.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;calendar.h&gt;
</pre></li>			
			
<li>		
<p>Most of API functions return error codes, so you must define at the beginning of your code the <span style="font-family: Courier New,Courier,monospace">int</span> type, which is used to store the error codes. Each time when a function returns error codes, verify the result of the operation.</p></li>

<li><p>To connect to the Calendar Service, call the <span style="font-family: Courier New,Courier,monospace">calendar_connect()</span> function. Without this function, you cannot get access to the calendar database.</p>
<pre class="prettyprint">int error_code;
error_code = calendar_connect();
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_connect: %x\n&quot;, error_code);</pre>


<p>When the Calendar APIs are no longer needed, disconnect from the service using the <span style="font-family: Courier New,Courier,monospace">calendar_disconnect()</span> function:</p>
<pre class="prettyprint">error_code = calendar_disconnect();
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar disconnect failed: %x\n&quot;, error_code);</pre></li></ol>


 <h2 id="create_event" name="create_event">Creating an Event</h2>

<p>To define and create a new event handle (record), since the Calendar Service uses the event handler mechanism:</p>
<ol>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function with the defined event handle as a parameter to create an event associated to the event handle and an <span style="font-family: Courier New,Courier,monospace">_calendar_event._uri</span> parameter for the event type.</p>
</li>
<li>
<p>Verify the status of the error code. If the event is created correctly, the function returns <span style="font-family: Courier New,Courier,monospace">CALENDAR_ERROR_NONE</span>. If an error is reported, you can check the error and take appropriate action or stop other operations on the database.</p>
<pre class="prettyprint">calendar_record_h event = NULL;
error_code = calendar_record_create(_calendar_event._uri, &amp;event);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_record_create: %x\n&quot;, error_code);</pre>
</li>
</ol>

 <h2 id="set_event" name="set_event">Setting Event Properties</h2>

<p>To set the event properties:</p>

<ol><li>Set the event subject.
<p>To set the subject, call <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span>. This function takes the event handle (created before), as the first parameter, <span style="font-family: Courier New,Courier,monospace">_calendar_event.summary</span> for subject type as the second parameter, and the subject, which is a string value, as the third parameter. The <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, and disconnecting from the service, if needed.</p>
<pre class="prettyprint">error_code = calendar_record_set_str(event, _calendar_event.summary, &quot;summary&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set record summary failed : %x\n&quot;, error_code);</pre></li>
<li>Set the event description.
<p>The <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function sets the description of the event when the second parameter is <span style="font-family: Courier New,Courier,monospace">_calendar_event.description</span>. This function takes the event handle as the first parameter, and the description, which is a string value, as the third parameter. The description parameter is taken from the UI part of the application. The function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, and disconnecting from the service, if needed.</p>
<pre class="prettyprint">error_code = calendar_record_set_str(event, _calendar_event.description, &quot;description&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed : %x\n&quot;, error_code);</pre></li>
<li>Set the event time zone ID.
<p>The start and end time must be inserted in the event. If the time zone ID is not inserted, the time zone for the start and end time is considered to be UTC. The properties are in the <span style="font-family: Courier New,Courier,monospace">calendar_view.h</span> file.</p>
<pre class="prettyprint">error_code = calendar_record_set_str(event, _calendar_event.start_tzid, &quot;Asia/Seoul&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_tzid failed : %x\n&quot;, error_code);

error_code = calendar_record_set_str(event, _calendar_event.end_tzid, &quot;Asia/Seoul&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set end_tzid failed : %x\n&quot;, error_code);</pre></li>
<li>Set the event start and end dates.
<p>You can set the other properties similarly. To set the start date, call the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span> functions and check the error codes. </p>
<pre class="prettyprint">calendar_time_s starttime = {0};
starttime.type = CALENDAR_TIME_UTIME;
starttime.time.utime = 1404036000; // 2014/06/29 10:00:00 UTC
error_code = calendar_record_set_caltime(event, _calendar_event.start_time, starttime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_time failed : %x\n&quot;, error_code);

calendar_time_s endtime = {0};
endtime.type = CALENDAR_TIME_UTIME;
endtime.time.utime = 1404036000 + 3600; // 2014/06/29 11:00:00 UTC
error_code = calendar_record_set_caltime(event, _calendar_event.end_time, endtime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set end_time failed : %x\n&quot;, error_code);</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">calendar_time_s</span> has 2 types. For more information about the types, see the <a href="../../../../org.tizen.guides/html/native/social/calendar_n.htm">Calendar</a> guide.</p>
</li>
<li>Set the event frequency.
<p>To create recurring events, set the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_MODULE_Creating_a_recurring_event">frequency property</a>.</p>
<pre class="prettyprint">error_code = calendar_record_set_int(event, _calendar_event.freq, CALENDAR_RECURRENCE_MONTHLY);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_time failed : %x\n&quot;, error_code);

error_code = calendar_record_set_int(event, _calendar_event.interval, 1);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_time failed : %x\n&quot;, error_code);

error_code = calendar_record_set_str(event, _calendar_event.bymonthday, &quot;3,4,5&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set start_time failed : %x\n&quot;, error_code);</pre></li>
<li>Set the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__MODULE.html#CAPI_SOCIAL_CALENDAR_SVC_MODULE_Creating_a_recurring_event">range of recurrence</a> for the event.
<pre class="prettyprint">error_code = calendar_record_set_int(event, _calendar_event.range_type, CALENDAR_RANGE_COUNT);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set range_type failed : %x\n&quot;, error_code);

error_code = calendar_record_set_int(event, _calendar_event.count, 8);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set count failed : %x\n&quot;, error_code);</pre></li>

<li>Add an alarm.
<p>To add an alarm, create an alarm handle and insert it as a child.</p>
<pre class="prettyprint">calendar_record_h alarm = NULL;
calendar_time_s ct;
error_code = CALENDAR_ERROR_NONE;
error_code += calendar_record_create(_calendar_alarm._uri, &amp;alarm);
error_code += calendar_record_set_int(alarm, _calendar_alarm.tick_unit, CALENDAR_ALARM_TIME_UNIT_SPECIFIC);
ct.type = CALENDAR_TIME_UTIME;
ct.time.utime = 1404036000 - 60; // 60 sec before starttime (1404036000)
error_code += calendar_record_set_caltime(alarm, _calendar_alarm.alarm_time, ct);
error_code += calendar_record_add_child_record(event, _calendar_event.calendar_alarm, alarm);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar add alarm failed \n&quot;);</pre>
<p>The available alarm tick units are listed in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__RECORD__MODULE.html#ga631b1b606158479e3a14a921b006b4fe">calendar_alarm_time_unit_type_e</a> enumeration. Note that <span style="font-family: Courier New,Courier,monospace">CALENDAR_ALARM_TIME_UNIT_MONTH</span> is not recommended. With <span style="font-family: Courier New,Courier,monospace">CALENDAR_ALARM_TIME_UNIT_SPECIFIC</span> you must use specific unixtime.</p></li>
<li>Add an attendee.
<p>To add an attendee, create an attendee handle and insert it as a child.</p>
<pre class="prettyprint">calendar_record_h attendee = NULL;
error_code = CALENDAR_ERROR_NONE;
error_code += calendar_record_create(_calendar_attendee._uri, &amp;attendee);
error_code += calendar_record_set_str(attendee, _calendar_attendee.name, &quot;John&quot;);
error_code += calendar_record_add_child_record(event, _calendar_event.calendar_attendee, attendee);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar add alarm failed \n&quot;);</pre></li></ol>

 <h2 id="insert_event" name="insert_event">Inserting an Event to the Database</h2>

<p>To insert an event record:</p>

<ol><li>Use the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function to insert the newly created event into the calendar database. The first parameter is the event handle, the second is the record ID. A unique ID is assigned to the event you are adding and returned as the second parameter. If the event is inserted successfully, the function returns <span style="font-family: Courier New,Courier,monospace">CALENDAR_ERROR_NONE</span>.
<pre class="prettyprint">int id = -1;
error_code = calendar_db_insert_record(event, &amp;id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db insert record failed: %x\n&quot;, error_code);

dlog_print(DLOG_ERROR, LOG_TAG, &quot;id: %d\n&quot;, id);</pre></li>
<li>After inserting, destroy the used structures:
<pre class="prettyprint">calendar_record_destroy(event, true);</pre></li></ol>

 <h2 id="get_event" name="get_event">Getting Events</h2>

<p>To retrieve a single event or all events one by one. You can also filter the events by one of the properties:</p>

<ol><li>Get a single event record using its ID:
<pre class="prettyprint">calendar_record_h record;
const int event_id = ... // Acquire event ID
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get record failed: %x\n&quot;, error_code);</pre></li>
<li>Get the event record list.
<p>To get all events without filtering, you need a record list:</p>
<pre class="prettyprint">calendar_list_h list = NULL;
error_code = calendar_db_get_all_records(_calendar_event._uri, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get all records failed: %x\n&quot;, error_code);</pre></li>

<li>Filter the list.
<ol type="a"><li>
<p>To get events with filtering, you need a record list and a query:</p>
<pre class="prettyprint">calendar_list_h list = NULL;
calendar_query_h query = NULL;

error_code = calendar_query_create(_calendar_event._uri, &amp;query);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;create query failed: %x\n&quot;, error_code);</pre></li>
<li>Before retrieving the events, create a filter for the list. You can filter the list based on various parameters.
<pre class="prettyprint">calendar_filter_h filter = NULL;

error_code = calendar_filter_create(_calendar_event._uri, &amp;filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;create filter failed: %x\n&quot;, error_code);</pre></li>
<li>Add a condition, such as summary:
<pre class="prettyprint">error_code = calendar_filter_add_str(filter, _calendar_event.summary, CALENDAR_MATCH_CONTAINS, &quot;summary to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add string failed: %x\n&quot;, error_code);</pre>
</li>
<li>To add more conditions, define an operator between the conditions:
<pre class="prettyprint">error_code = calendar_filter_add_operator(filter, CALENDAR_FILTER_OPERATOR_AND);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add operator failed: %x\n&quot;, error_code);

error_code = calendar_filter_add_str(filter, _calendar_event.description, CALENDAR_MATCH_CONTAINS, &quot;description to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add string failed: %x\n&quot;, error_code);</pre>
<p>In the above example, only events which contain a summary &quot;summary to find&quot; and description &quot;description to find&quot; are retrieved.</p>
<p>You can create a filter with integer and time conditions. For instance, to filter all day events which start after 1st January 2014, add the following filter:</p>
<pre class="prettyprint">calendar_time_s time_to_compare = {0};
time_to_compare.type = CALENDAR_TIME_LOCALTIME;
time_to_compare.time.date.mday = 1;
time_to_compare.time.date.month = 1;
time_to_compare.time.date.year = 2014;
error_code = calendar_filter_add_caltime(filter, _calendar_event.start_time, CALENDAR_MATCH_GREATER_THAN, time_to_compare);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add caltime failed: %x\n&quot;, error_code);</pre>
<p>The type parameter determines whether the event is a daily (<span style="font-family: Courier New,Courier,monospace">CALENDAR_TIME_LOCALTIME</span>) non-all-day event (<span style="font-family: Courier New,Courier,monospace">CALENDAR_TIME_UTIME</span>). To get the specified time period, use 2 conditions using <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_GREATER_THAN</span> and <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_LESS_THAN</span> with the operator <span style="font-family: Courier New,Courier,monospace">CALENDAR_FILTER_OPERATOR_OR</span>. You can also use <span style="font-family: Courier New,Courier,monospace">CALENDAR_MATCH_EQUAL</span> to set an equality condition.</p></li>
<li>Connect the query with the list:
<pre class="prettyprint">error_code = calendar_query_set_filter(query, filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;query set filter failed: %x\n&quot;, error_code);

error_code = calendar_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get records with query failed: %x\n&quot;, error_code);</pre>

<p>The third parameter refers to a limit of the results. If 0 is passed, there are no limits. Remember that after all operations, the list must be released.</p></li>
<li>Free the filter and query:
<pre class="prettyprint">calendar_filter_destroy(filter);
calendar_query_destroy(query);</pre></li></ol></li>

<li>Iterate the list and read the records.
<ol type="a"><li>Get records from the list using <span style="font-family: Courier New,Courier,monospace">calendar_list_get_current_record_p()</span>, and <span style="font-family: Courier New,Courier,monospace">calendar_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">calendar_list_prev()</span>. Inside the loop, get details of each record.
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 

<pre class="prettyprint">calendar_record_h record;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* summary;
&nbsp;&nbsp;&nbsp;calendar_record_get_str_p(record, _calendar_event.summary, &amp;summary);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;summary: %s\n&quot;, summary);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>
<li>If you want to get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">calendar_gl_event_data_t</span> structure:
<pre class="prettyprint">calendar_gl_event_data_t *gl_event_data = NULL;
calendar_record_h record = NULL;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_event_data = _create_gl_event_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, summary:
&nbsp;&nbsp;&nbsp;// gl_event_data-&gt;summary

&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>

<li>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this tutorial.
<pre class="prettyprint">typedef struct 
_calendar_gl_event_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *summary;
&nbsp;&nbsp;&nbsp;char *description;
&nbsp;&nbsp;&nbsp;calendar_time_s start_time;
} calendar_gl_event_data_t;

static void 
_free_gl_event_data(calendar_gl_event_data_t *gl_event_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_event_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_event_data-&gt;summary);
&nbsp;&nbsp;&nbsp;free(gl_event_data-&gt;description);
&nbsp;&nbsp;&nbsp;free(gl_event_data);
}

static calendar_gl_event_data_t* 
_create_gl_event_data(calendar_record_h record)
{
&nbsp;&nbsp;&nbsp;calendar_gl_event_data_t *gl_event_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_event_data = malloc(sizeof(calendar_gl_event_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_event_data, 0x0, sizeof(calendar_gl_event_data_t));

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_event.summary, &amp;gl_event_data-&gt;summary);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get summary failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_event.description, &amp;gl_event_data-&gt;description);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get description failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_int(record, _calendar_event.id, &amp;gl_event_data-&gt;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get id failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_caltime(record, _calendar_event.start_time, &amp;gl_event_data-&gt;start_time);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar get start time failed: %i\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_event_data(gl_event_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_event_data;
}</pre>
<p>To get access to a specified data from the record, firstly it is necessary to get its child responsible for the requested type.</p></li></ol></li>
<li>Free the list:
<pre class="prettyprint">calendar_list_destroy(list, true);</pre></li></ol>


 <h2 id="update_event" name="update_event">Updating an Event</h2>

<p>To update an event record:</p>

<ol><li>Get the event record handle to update with the ID:
<pre class="prettyprint">calendar_record_h record;
const int event_id = ... // Acquire event ID
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get record failed: %x\n&quot;, error_code);</pre></li>
<li>Set the properties to update:
<pre class="prettyprint">error_code = calendar_record_set_str(record, _calendar_event.summary, &quot;summary updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record set summary failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(record, _calendar_event.description, &quot;description updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record set description failed: %x\n&quot;, error_code);</pre></li>
<li>To update the record, call the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function:
<pre class="prettyprint">error_code = calendar_db_update_record(record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db update record failed: %x\n&quot;, error_code);</pre></li>
<li>When the event handle is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function to destroy the event handle and free the allocated memory:
<pre class="prettyprint">calendar_record_destroy(record, true);</pre></li></ol>

 <h2 id="delete_event" name="delete_event">Deleting an Event</h2>

<p>To delete an event, call the <span style="font-family: Courier New,Courier,monospace">calendar_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_calendar_event._uri</span> as the first parameter and event ID as the second one:</p>
<pre class="prettyprint">int event_id = ... // Acquire event ID
error_code = calendar_db_delete_record(_calendar_event._uri, event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db delete record failed: %x\n&quot;, error_code);</pre>

 <h2 id="exception_add" name="exception_add">Setting Exceptions when Inserting Events</h2>

<p>To set an exception date to an event record when creating the event:</p>

<ol><li>Create a recurring event.
<p>The following example creates an event record with the following properties:</p>
<ul><li>Frequency: <span style="font-family: Courier New,Courier,monospace">CALENDAR_RECURRENCE_MONTHLY</span></li>
<li>Interval: 1</li>
<li>Bymonthday: &quot;3, 4, 5&quot;</li>
<li>Range type: count</li>
<li>Count: 8</li></ul>

<pre class="prettyprint">int error_code = CALENDAR_ERROR_NONE;

calendar_record_h event = NULL;
error_code += calendar_record_create(_calendar_event._uri, &amp;event);
error_code += calendar_record_set_str(event, _calendar_event.summary, &quot;test&quot;);
error_code += calendar_record_set_str(event, _calendar_event.start_tzid, &quot;Asia/Seoul&quot;);
error_code += calendar_record_set_str(event, _calendar_event.end_tzid, &quot;Asia/Seoul&quot;);

calendar_time_s st = {0};
st.type = CALENDAR_TIME_UTIME;
st.time.utime = 1349226000;
error_code += calendar_record_set_caltime(event, _calendar_event.start_time, st);

calendar_time_s et = {0};
et.type = CALENDAR_TIME_UTIME;
et.time.utime = 1354582800;
error_code += calendar_record_set_caltime(event, _calendar_event.end_time, et);

error_code += calendar_record_set_int(event, _calendar_event.freq, CALENDAR_RECURRENCE_MONTHLY);
error_code += calendar_record_set_int(event, _calendar_event.interval, 1);
error_code += calendar_record_set_str(event, _calendar_event.bymonthday, &quot;3,4,5&quot;);

error_code += calendar_record_set_int(event, _calendar_event.range_type, CALENDAR_RANGE_COUNT);
error_code += calendar_record_set_int(event, _calendar_event.count, 8);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar record create failed: \n&quot;);</pre>

<p>The created event has 8 instances.</p>

  <table>
   <caption>
     Table: Event instances
   </caption>
   <tbody>
    <tr>
     <th>unixtime</th>
     <th>Date time</th>
    </tr>
    <tr>
     <td>1349226000
	 <br/>1349312400
	 <br/>1349398800
	 <br/>1351904400
	 <br/>1351990800
	 <br/>1352077200
	 <br/>1354496400
	 <br/>1354582800</td>
     <td>2012-10-03 01:00:00
	 <br/>2012-10-04 01:00:00
	 <br/>2012-10-05 01:00:00
	 <br/>2012-11-03 01:00:00
	 <br/>2012-11-04 01:00:00
	 <br/>2012-11-05 01:00:00
	 <br/>2012-12-03 01:00:00
	 <br/>2012-12-04 01:00:00</td>
    </tr>

   </tbody>
  </table></li>
<li>Set the exdate property to create the exception.
<p>In vcalendar 2.0 (RFC 2445), exdate is used to identify a deleted instance. If multiple instances are deleted, datetimes are added with a comma (such as 20121104T010000Z, 20121105T010000Z, 20121203T010000Z).</p>
<pre class="prettyprint">error_code = calendar_record_set_str(event, _calendar_event.exdate, &quot;20121104T010000Z&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar record set string failed: %x\n&quot;, error_code);</pre></li>
<li>Insert the record.
<p>Use the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function to insert the event into the calendar database.</p>
<pre class="prettyprint">int event_id;
error_code = calendar_db_insert_record(event, &amp;event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar db insert record failed: %x\n&quot;, error_code);

calendar_record_destroy(event, true);</pre></li></ol>

 <h2 id="exception_modify" name="exception_modify">Adding an Exception Date for an Existing Event</h2>

<p>To add an exception date to an existing event:</p>

<ol><li>Make sure you have an existing event.</li>
<li>Clone the existing event record and set new properties for the exception.
<p>Cloning means that the new record has the original event&#39;s properties. In vcalendar 2.0 (RFC 2445), the recurrence ID is used to identify the modified instance (exception).</p>
<pre class="prettyprint">calendar_record_h clone = NULL;
error_code = CALENDAR_ERROR_NONE;

error_code += calendar_record_clone(event, &amp;clone);
error_code += calendar_record_set_int(clone, _calendar_event.original_event_id, event_id);
error_code += calendar_record_set_str(clone, _calendar_event.recurrence_id, &quot;20121005T010000Z&quot;);

if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar record clone failed: %x\n&quot;, error_code);</pre></li>
<li>Insert the new record.
<p>Use the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function to insert the new event record into the calendar database.</p>
<pre class="prettyprint">int exdate_event_id = 0;
error_code = calendar_db_insert_record(clone, &amp;exdate_event_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar db insert record failed: %x\n&quot;, error_code);

calendar_record_destroy(clone, true);
calendar_record_destroy(event, true);</pre></li></ol>


 <h2 id="monitor_event" name="monitor_event">Monitoring Event Changes</h2>

<p>To register a callback function that listens for event changes:</p>
<ol><li>Register the callback function.
<pre class="prettyprint">error_code = calendar_db_add_changed_cb(_calendar_event._uri, _event_changed_callback, NULL);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db add changed cb failed: %x\n&quot;, error_code);</pre></li>
<li>Define the callback function.
<p>The callback function is called when an event changes. The following example shows how to get the new event details.</p>
<pre class="prettyprint">static calendar_gl_event_data_t *_gl_event_data = ...
static void 
_event_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _calendar_event._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (NULL == _gl_event_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int event_id = _gl_event_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_event_data(_gl_event_data);
&nbsp;&nbsp;&nbsp;_gl_event_data = NULL;

&nbsp;&nbsp;&nbsp;calendar_record_h record = NULL;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp; _gl_event_data = _create_gl_event_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_event_data

&nbsp;&nbsp;&nbsp;calendar_record_destroy(record, true);
}</pre></li></ol>

 <h2 id="create" name="create">Creating a Todo</h2>

<p>To define and create a new todo handle record, since the Calendar Service uses a todo handler mechanism:</p>
<ol>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function with the defined todo handle as a parameter to create a todo associated with the todo handle and a <span style="font-family: Courier New,Courier,monospace">_calendar_todo._uri</span> parameter for the todo type.</p>
</li>
<li>
<p>Verify the status of the error code. If the todo handle is created correctly, the function returns <span style="font-family: Courier New,Courier,monospace">CALENDAR_ERROR_NONE</span>. If an error is reported, check the error and take appropriate action, or stop other operations on the database.</p>
<pre class="prettyprint">calendar_record_h todo = NULL;
error_code = calendar_record_create(_calendar_todo._uri, &amp;todo);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar_record_create: %x\n&quot;, error_code);</pre>
</li>
</ol>

 <h2 id="set" name="set">Setting Todo Properties</h2>

<p>To set the todo properties:</p>
<ol><li>Set the todo subject.
<p>To set the subject, call the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function. This function takes the todo handle (created before) as the first parameter, <span style="font-family: Courier New,Courier,monospace">_calendar_todo.summary</span> for the subject type as the second parameter, and the subject, which is string value, as the third parameter. The <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, and disconnecting from the service, if needed.</p>
<pre class="prettyprint">error_code = calendar_record_set_str(todo, _calendar_todo.summary, &quot;summary&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set summary failed : %x\n&quot;, error_code);</pre></li>
<li>Set the todo description.
<p>The <span style="font-family: Courier New,Courier,monospace">calendar_record_set_uri()</span> function sets the description of the todo when the second parameter is <span style="font-family: Courier New,Courier,monospace">_calendar_todo.description</span>. This function takes the todo handle as the first parameter, and the description, which is string value, as the third parameter. The description parameter is taken from the UI part of the application. The function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, and disconnecting from the service, if needed.</p>
<pre class="prettyprint">error_code = calendar_record_set_str(todo, _calendar_todo.description, &quot;description&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set description failed : %x\n&quot;, error_code);</pre></li>
<li>Set the todo due date.
<p>To set the due date, call the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span> function and check the error codes. </p>
<pre class="prettyprint">calendar_time_s duetime = {0};
duetime.type = CALENDAR_TIME_UTIME;
duetime.time.utime = 1404036000; // 2014/06/29 11:00:00 UTC

error_code = calendar_record_set_caltime(todo, _calendar_todo.due_time, duetime);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set due_time failed : %x\n&quot;, error_code);</pre></li>
<li>Set the todo status.
<p>You can set the other properties similarly. To set the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CALENDAR__SVC__RECORD__MODULE.html#ga3e1b9cae05705d471a4746d8ab6d3622">todo status</a>, call the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_int()</span> function and check the error codes.</p>
<pre class="prettyprint">error_code = calendar_record_set_int(todo, _calendar_todo.todo_status, CALENDAR_TODO_STATUS_COMPLETED);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set todo_status failed : %x\n&quot;, error_code);</pre></li></ol>

 <h2 id="insert" name="insert">Inserting a Todo to the Database</h2>

<p>To insert a todo record:</p>
<ol><li>Use the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function to insert a newly created todo into the calendar database. The first parameter is the todo handle, the second is the record ID. A unique ID is assigned to the record you are adding, and is returned as the third parameter of the called function. If the todo is inserted successfully, the function returns <span style="font-family: Courier New,Courier,monospace">CALENDAR_ERROR_NONE</span>.
<pre class="prettyprint">int id;
error_code = calendar_db_insert_record(todo, &amp;id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db insert record failed: %x\n&quot;, error_code);</pre></li>
<li>After inserting, destroy the used structures:
<pre class="prettyprint">calendar_record_destroy(todo, true);</pre></li></ol>

 <h2 id="get" name="get">Getting Todos</h2>

<p>To retrieve a single todo or all todos one by one. You can also filter the todos by one of the properties:</p>

<ol><li>Get a single todo record using its ID:
<pre class="prettyprint">calendar_record_h record;
const int todo_id = ... // Acquire todo ID
error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get record failed: %x\n&quot;, error_code);</pre></li>
<li>Get the todo record list.
<p>To get all todos without filtering, you need a record list:</p>
<pre class="prettyprint">calendar_list_h list = NULL;
error_code = calendar_db_get_all_records(_calendar_todo._uri, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get all records failed: %x\n&quot;, error_code);</pre></li>
<li>Filter the list.
<ol type="a"><li>To get todos with filtering, you need a record list and a query:
<pre class="prettyprint">calendar_list_h list = NULL;
calendar_query_h query = NULL;

error_code = calendar_query_create(_calendar_todo._uri, &amp;query);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;create query failed: %x\n&quot;, error_code);</pre></li>
<li>Before retrieving the todos, create a filter for the list. You can filter the list based on various parameters.
<pre class="prettyprint">calendar_filter_h filter = NULL;

error_code = calendar_filter_create (_calendar_todo._uri, &amp;filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;create filter failed: %x\n&quot;, error_code);</pre></li>
<li>Add a condition, such as summary:
<pre class="prettyprint">error_code = calendar_filter_add_str(filter, _calendar_todo.summary, CALENDAR_MATCH_CONTAINS, &quot;summary to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add string failed: %x\n&quot;, error_code);</pre></li>
<li>To add more conditions, define an operator between the conditions:
<pre class="prettyprint">error_code = calendar_filter_add_operator(filter, CALENDAR_FILTER_OPERATOR_AND);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add operator failed: %x\n&quot;, error_code);

error_code = calendar_filter_add_str(filter, _calendar_todo.description, CALENDAR_MATCH_CONTAINS, &quot;description to find&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add string failed: %x\n&quot;, error_code);</pre>
<p>In the above example, only todos which contain a summary &quot;summary to find&quot; and description &quot;description to find&quot; are retrieved.</p>
<p>You can create a filter with integer and time conditions. For instance, to filter all todos which are completed, add the following filter:</p>
<pre class="prettyprint">error_code = calendar_filter_add_int(filter, _calendar_todo.todo_status, CALENDAR_MATCH_EQUAL, CALENDAR_TODO_STATUS_COMPLETED);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add integer failed: %x\n&quot;, error_code);</pre></li>
<li>Connect the query with the list:
<pre class="prettyprint">error_code = calendar_query_set_filter(query, filter);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;query set filter failed: %x\n&quot;, error_code);

error_code = calendar_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get records with query failed: %x\n&quot;, error_code);</pre>
<p>The third parameter refers to a limit of the results. If 0 is passed, there are no limits. Remember that after all operations, the list must be released.</p></li>

<li>Free the filter and query:
<pre class="prettyprint">calendar_filter_destroy(filter);
calendar_query_destroy(query);</pre></li>
</ol></li>
<li>Iterate the list and read the records.
<ol type="a"><li>Get records from the list using <span style="font-family: Courier New,Courier,monospace">calendar_list_get_current_record_p()</span>, and <span style="font-family: Courier New,Courier,monospace">calendar_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">calendar_list_prev()</span>. Inside the loop, get details of each record.
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 
<pre class="prettyprint">calendar_record_h record;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* summary;
&nbsp;&nbsp;&nbsp;calendar_record_get_str_p(record, _calendar_todo.summary, &amp;summary);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;summary: %s\n&quot;, summary);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>
<li>If you want to get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">calendar_gl_todo_data_t</span> structure:
<pre class="prettyprint">calendar_gl_todo_data_t *gl_todo_data = NULL;
calendar_record_h record = NULL;
while (calendar_list_get_current_record_p(list, &amp;record) == CALENDAR_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_todo_data = _create_gl_todo_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, summary:
&nbsp;&nbsp;&nbsp;// gl_todo_data-&gt;summary

&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;error_code = calendar_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>

<li>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this document.
<pre class="prettyprint">typedef struct 
_calendar_gl_todo_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *summary;
&nbsp;&nbsp;&nbsp;char *description;
&nbsp;&nbsp;&nbsp;calendar_time_s due_time;
} calendar_gl_todo_data_t;

static void 
_free_gl_todo_data(calendar_gl_todo_data_t *gl_todo_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_todo_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_todo_data-&gt;summary);
&nbsp;&nbsp;&nbsp;free(gl_todo_data-&gt;description);
&nbsp;&nbsp;&nbsp;free(gl_todo_data);
}

static calendar_gl_todo_data_t* 
_create_gl_todo_data(calendar_record_h record)
{
&nbsp;&nbsp;&nbsp;calendar_gl_todo_data_t *gl_todo_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_todo_data = malloc(sizeof(calendar_gl_todo_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_todo_data, 0x0, sizeof(calendar_gl_todo_data_t));

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_todo.summary, &amp;gl_todo_data-&gt;summary);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get summary failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_str(record, _calendar_todo.description, &amp;gl_todo_data-&gt;description);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get description failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_int(record, _calendar_todo.id, &amp;gl_todo_data-&gt;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record get id failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = calendar_record_get_caltime(record, _calendar_todo.due_time, &amp;gl_todo_data-&gt;due_time);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;calendar get due time failed: %x\n&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_todo_data(gl_todo_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_todo_data;
}</pre>
<p>To get access to a specified data from the record, firstly you must get its child responsible for the requested type. Data returned by any function with the <span style="font-family: Courier New,Courier,monospace">_p</span> suffix must not be passed to <span style="font-family: Courier New,Courier,monospace">_free_gl_todo_data()</span>.</p></li></ol></li>
<li>Free the list:
<pre class="prettyprint">
calendar_list_destroy(list, true);</pre></li></ol>

 <h2 id="update" name="update">Updating a Todo</h2>

<p>To update a todo record:</p>
<ol><li>Get the todo record handle to update with the ID:
<pre class="prettyprint">calendar_record_h record;
const int todo_id = ... // Acquire todo ID
error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get record failed: %x\n&quot;, error_code);</pre></li>
<li>Set the properties to update:
<pre class="prettyprint">error_code = calendar_record_set_str(record, _calendar_todo.summary, &quot;summary updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record set summary failed: %x\n&quot;, error_code);

error_code = calendar_record_set_str(record, _calendar_todo.description, &quot;description updated&quot;);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;record set description failed: %x\n&quot;, error_code);</pre></li>
<li>To update record, call the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function:
<pre class="prettyprint">error_code = calendar_db_update_record(record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db update record failed: %x\n&quot;, error_code);</pre></li>
<li>When the todo handle is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">calendar_record_destroy()</span> function to destroy the todo handle and free the allocated memory:
<pre class="prettyprint">calendar_record_destroy(record, true);</pre></li></ol>

 <h2 id="delete" name="delete">Deleting a Todo</h2>

<p>To delete a todo, use the <span style="font-family: Courier New,Courier,monospace">calendar_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_calendar_todo._uri</span> as the first parameter and the todo ID as the second one:</p>
<pre class="prettyprint">int todo_id = ... // Acquire todo ID
error_code = calendar_db_delete_record(_calendar_todo._uri, todo_id);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db delete record failed: %x\n&quot;, error_code);</pre>

 <h2 id="monitor" name="monitor">Monitoring Todo Changes</h2>

<p>To register a callback function that listens for todo changes:</p>
<ol><li>Register the callback function:

<pre class="prettyprint">error_code = calendar_db_add_changed_cb(_calendar_todo._uri, _todo_changed_callback, NULL);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db add changed cb failed: %x\n&quot;, error_code);</pre></li>
<li>Define the callback function.
<p>The callback function is called when a todo changes. The following example shows how to get the new todo details.</p>
<pre class="prettyprint">static calendar_gl_todo_data_t *_gl_todo_data = ...
static void 
_todo_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _calendar_todo._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (NULL == _gl_todo_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int todo_id = _gl_todo_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_todo_data(_gl_todo_data);
&nbsp;&nbsp;&nbsp;_gl_todo_data = NULL;

&nbsp;&nbsp;&nbsp;calendar_record_h record = NULL;
&nbsp;&nbsp;&nbsp;calendar_error_e error_code;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_get_record(_calendar_todo._uri, todo_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_todo_data = _create_gl_todo_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_todo_data

&nbsp;&nbsp;&nbsp;calendar_record_destroy(record, true);
}</pre></li></ol>

 <h2 id="make" name="make">Making a vCalendar</h2>

<p>To make a vCalendar stream from an event record:</p>
<ol><li>Get the event record by the event ID:
<pre class="prettyprint">int event_id = ... // Acquire event ID
calendar_record_h record = NULL;
error_code = calendar_db_get_record(_calendar_event._uri, event_id, &amp;record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db get record failed: %x\n&quot;, error_code);</pre></li>
<li>Make the vCalendar stream by the event record:
<pre class="prettyprint">char *vcalendar_stream = NULL;
calendar_list_h list = NULL;

error_code = calendar_list_create(&amp;list);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;list create failed: %x\n&quot;, error_code);

error_code = calendar_list_add(list, record);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;list add failed: %x\n&quot;, error_code);

error_code = calendar_vcalendar_make_from_records(list, &amp;vcalendar_stream);
if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;vcalendar make from records failed: %x\n&quot;, error_code);</pre></li>
<li>When the list handle is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">calendar_list_destroy()</span> function to destroy the list handle and free the allocated memory:
<pre class="prettyprint">free(vcalendar_stream);
calendar_list_destroy(list, true);</pre></li></ol>

 <h2 id="parse" name="parse">Parsing a vCalendar</h2>

<p>To parse a vCalendar from a file and insert to the database:</p>
<pre class="prettyprint">char vcalendar_file_path[512] = {0};
char *resource_path = app_get_resource_path();
snprintf(vcalendar_file_path, sizeof(vcalendar_file_path), &quot;%s/%s&quot;, resource_path, &quot;vcalendar.ics&quot;);
free(resource_path);

error_code = calendar_vcalendar_parse_to_calendar_foreach(vcalendar_file_path, // File path of vCalendar
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_vcalendar_parse_cb, // Callback function to invoke
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL); // User data to be passed to the callback function</pre>

<p>The vCalendar stream contains multiple event or todo objects. The callback function is called after parsing each event or todo. If you return <span style="font-family: Courier New,Courier,monospace">false</span> on the callback function, parsing stops.</p>
<pre class="prettyprint">
static bool 
_vcalendar_parse_cb(calendar_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == record)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;error_code = calendar_db_insert_record(record, &amp;id);
&nbsp;&nbsp;&nbsp;if (error_code != CALENDAR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;db insert record failed: %x\n&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;inserted id: %d\n&quot;, id);
&nbsp;&nbsp;&nbsp;// Use record

&nbsp;&nbsp;&nbsp;return true;
}</pre>
		
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>