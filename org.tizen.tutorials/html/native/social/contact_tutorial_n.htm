<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Contacts: Managing Contacts and Groups, and Accessing the Contact Database</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing Contacts</a></li>
			<li>Contacts
				<ul class="toc">
				<li><a href="#create_contact">Creating a Contact</a></li>
				<li><a href="#set_contact">Setting Contact Properties</a></li>
				<li><a href="#insert_contact">Inserting a Contact to the Database</a></li>
				<li><a href="#get_contact">Getting Contacts</a></li>
				<li><a href="#update_contact">Updating a Contact</a></li>
				<li><a href="#delete_contact">Deleting a Person</a></li>
				<li><a href="#link_contact">Linking and Unlinking Contacts</a></li>
				<li><a href="#manage_contact">Managing Favorites</a></li>
				<li><a href="#monitor_contact">Monitoring Person Changes</a></li>
				</ul></li>
			<li>Groups
				<ul class="toc">
				<li><a href="#create">Creating a Group</a></li>
				<li><a href="#set">Setting Group Properties</a></li>
				<li><a href="#insert">Inserting a Group to the Database</a></li>
				<li><a href="#get">Getting Groups</a></li>
				<li><a href="#update">Updating a Group</a></li>
				<li><a href="#delete">Deleting a Group</a></li>
				<li><a href="#manage">Managing Group Members</a></li>
				<li><a href="#monitor">Monitoring Group Changes</a></li>
				</ul></li>
			<li>vCards
				<ul class="toc">
				<li><a href="#make">Making a vCard</a></li>
				<li><a href="#parse">Parsing a vCard</a></li>
				</ul></li>
			<li>Speed dials
				<ul class="toc">
				<li><a href="#sd_create">Creating a Speed Dial</a></li>
				<li><a href="#sd_set">Setting Speed Dial Properties</a></li>
				<li><a href="#sd_insert">Inserting a Speed Dial to the Database</a></li>
				<li><a href="#sd_get">Getting Speed Dials</a></li>
				<li><a href="#sd_update">Updating a Speed Dial</a></li>
				<li><a href="#sd_delete">Deleting a Speed Dial</a></li>
				</ul>
			</li>
			<li>Phone logs
				<ul class="toc">
				<li><a href="#pl_create">Creating a Log</a></li>
				<li><a href="#pl_set">Setting Log Properties</a></li>
				<li><a href="#pl_insert">Inserting a Log to the Database</a></li>
				<li><a href="#pl_get">Getting Logs</a></li>
				<li><a href="#pl_delete">Deleting a Log</a></li>
				</ul>
			</li>			
			<li>Records
				<ul class="toc">
				<li><a href="#insert2">Inserting New Records</a></li>
				<li><a href="#get2">Getting Record Details</a></li>
				<li><a href="#list2">Handling Lists</a></li>
				<li><a href="#delete2">Deleting Records</a></li>
				<li><a href="#link2">Linking Persons</a></li>
				</ul></li>
			<li>Contact settings
				<ul class="toc">
				<li><a href="#settings">Managing Contact Settings</a></li>
				<li><a href="#sim">Managing Contacts on the SIM Card</a></li>
				</ul></li>
			<li>vCard information
				<ul class="toc">
				<li><a href="#import">Importing from vCard</a></li>
				<li><a href="#export">Exporting to vCard</a></li>
				</ul></li>
		</ul>        
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/social/contact_n.htm">Contacts Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

 <h1>Contacts: Managing Contacts and Groups, and Accessing the Contact Database</h1>

   
<p>This tutorial demonstrates how you can manage contacts and groups, and import them to or export them from the vCard format.</p>

<p>This feature is supported in mobile applications only.</p>

  <h2>Warm-up</h2>
      <p>Become familiar with the Contacts API basics by learning about:</p>
      <ul>
			<li><a href="#init">Initializing Contacts</a>
			<p>Initialize the contacts for use.</p></li>
			<li>Contacts
				<ul><li><a href="#create_contact">Creating a Contact</a>
				<p>Create a new contact.</p></li>
				<li><a href="#set_contact">Setting Contact Properties</a>
				<p>Set contact properties, such as name and image.</p></li>
				<li><a href="#insert_contact">Inserting a Contact to the Database</a>
				<p>Insert a contact to the contacts database.</p></li>
				<li><a href="#get_contact">Getting Contacts</a>
				<p>Retrieve single contacts or a list of contacts.</p></li>
				<li><a href="#update_contact">Updating a Contact</a>
				<p>Update contact details.</p></li>
				<li><a href="#delete_contact">Deleting a Person</a>
				<p>Delete the person from the database.</p></li>
				<li><a href="#link_contact">Linking and Unlinking Contacts</a>
				<p>Link and unlink contacts to persons.</p></li>
				<li><a href="#manage_contact">Managing Favorites</a>
				<p>Set or unset a person to be a favorite.</p></li>
				<li><a href="#monitor_contact">Monitoring Person Changes</a>
				<p>Receive notifications when changes occur in persons.</p></li>
				</ul></li>
			<li>Groups
				<ul><li><a href="#create">Creating a Group</a>
				<p>Create a new group.</p></li>
				<li><a href="#set">Setting Group Properties</a>
				<p>Set group properties, such as name and image.</p></li>
				<li><a href="#insert">Inserting a Group to the Database</a>
				<p>Insert a group to the contacts database.</p></li>
				<li><a href="#get">Getting Groups</a>
				<p>Retrieve single groups or a list of groups.</p></li>
				<li><a href="#update">Updating a Group</a>
				<p>Update group details.</p></li>
				<li><a href="#delete">Deleting a Group</a>
				<p>Delete the group from the database.</p></li>
				<li><a href="#manage">Managing Group Members</a>
				<p>Add, remove, and retrieve group members.</p></li>
				<li><a href="#monitor">Monitoring Group Changes</a>
				<p>Receive notifications when changes occur in groups.</p></li>
				</ul></li>
			<li>vCards
				<ul>
				<li><a href="#make">Making a vCard</a>
				<p>Make a vCard stream from a person record.</p></li>
				<li><a href="#parse">Parsing a vCard</a>
				<p>Parse a vCard from a file and insert to the database.</p></li>
				</ul></li>
			<li>Speed dials	
				<ul>
				<li><a href="#sd_create">Creating a Speed Dial</a>
				<p>Create a new speed dial.</p></li>
				<li><a href="#sd_set">Setting Speed Dial Properties</a>
				<p>Set speed dial properties, such as speed dial number and number ID.</p></li>
				<li><a href="#sd_insert">Inserting a Speed Dial to the Database</a>
				<p>Insert a speed dial to the database.</p></li>
				<li><a href="#sd_get">Getting Speed Dials</a>
				<p>Retrieve a single speed dial or a list of speed dials.</p></li>
				<li><a href="#sd_update">Updating a Speed Dial</a>
				<p>Update speed dial details.</p></li>
				<li><a href="#sd_delete">Deleting a Speed Dial</a>
				<p>Delete the speed dial from the database.</p></li>
				</ul></li>
			<li>Phone logs	
				<ul>
				<li><a href="#pl_create">Creating a Log</a>
				<p>Create a new log.</p></li>
				<li><a href="#pl_set">Setting Log Properties</a>
				<p>Set log properties, such as type, time, and address.</p></li>
				<li><a href="#pl_insert">Inserting a Log to the Database</a>
				<p>Insert a log to the database.</p></li>
				<li><a href="#pl_get">Getting Logs</a>
				<p>Retrieve single log or a list of logs.</p></li>
				<li><a href="#pl_delete">Deleting a Log</a>
				<p>Delete the log from the database.</p></li>
				</ul>				
			</li></ul>
		<h2>Follow-up</h2> 
		<p>Once we have learned the basics of the Contacts API, we can now move on to more advanced tasks, including:</p>
		<ul>
			<li>Records
				<ul>
				<li><a href="#insert2">Inserting New Records</a>
				<p>Add new records to the database.</p></li>
				<li><a href="#get2">Getting Record Details</a>
				<p>Get information from existing records.</p></li>
				<li><a href="#list2">Handling Lists</a>
				<p>Iterate, filter, and sort record lists.</p></li>
				<li><a href="#delete2">Deleting Records</a>
				<p>Remove records from the database.</p></li>
				<li><a href="#link2">Linking Persons</a>
				<p>Assign several contacts to one person.</p></li>
				</ul></li>
			<li>Contact settings
				<ul>
				<li><a href="#settings">Managing Contact Settings</a>
				<p>Change the display settings of contacts.</p></li>				
				<li><a href="#sim">Managing Contacts on the SIM Card</a>
				<p>Check that the SIM card is initialized and import contacts from the SIM card.</p></li>
				</ul></li>
			<li>vCard information
				<ul>
				<li><a href="#import">Importing from vCard</a>
				<p>Import contacts from vCard files.</p></li>
				<li><a href="#export">Exporting to vCard</a>
				<p>Export contacts to vCard files.</p></li>
				</ul></li>
				</ul>
             

 <h2 id="init" name="init">Initializing Contacts</h2>

<p>To start with the Contact Service:</p>
<ol><li>			
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;contacts.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;contacts.h&gt;
</pre></li>	
<li>Most of the API functions return error codes, therefore define at the beginning of your code the <span style="font-family: Courier New,Courier,monospace">int</span> type, which is used to store error codes. Each time when a function returns error codes, verify the result of the operation.</li>
<li><p>Call the <span style="font-family: Courier New,Courier,monospace">contacts_connect()</span> function, which connects your application with the Contact Service. Without this function, you cannot get access to the contacts database.</p>
<pre class="prettyprint">int error_code;
error_code = contacts_connect();
</pre></li>
<li>When the Contacts APIs are not needed anymore, disconnect from the service using the <span style="font-family: Courier New,Courier,monospace">contacts_disconnect()</span> function:
<pre class="prettyprint">error_code = contacts_disconnect();
</pre></li></ol>

 <h2 id="create_contact" name="create_contact">Creating a Contact</h2>

<p>Before you insert a record, you need to create a record handle with the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function. The first parameter determines the type of the created record. Use <span style="font-family: Courier New,Courier,monospace">_contacts_contact._uri</span> to create contact type records.</p>
<pre class="prettyprint">contacts_record_h contact;

error_code = contacts_record_create(_contacts_contact._uri, &amp;contact);
</pre>
<p>This record contains no additional information, such as a name or phone number. To add them, you must set contact properties by creating additional records and setting them as child records of the contact record. Note that records created this way are objects in the memory, with <span style="font-family: Courier New,Courier,monospace">contacts_record_h</span> type variables as their handles. Changes made to these objects are not reflected in the database until your explicit request using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function.</p>

 <h2 id="set_contact" name="set_contact">Setting Contact Properties</h2>

<p>To set the contact name, birthday, and phone number:</p>
<ol><li>Add the contact name.
<ol type="a"><li>Create a name record:
<pre class="prettyprint">contacts_record_h name;

error_code = contacts_record_create(_contacts_name._uri, &amp;name);
</pre></li>
<li>To set the first name, set the value of a string type property identified by <span style="font-family: Courier New,Courier,monospace">_contacts_name.first</span>. The <span style="font-family: Courier New,Courier,monospace">name</span> variable is the record handle created above. The second parameter is the property identifier, and the third parameter is the value to be assigned.
<pre class="prettyprint">error_code = contacts_record_set_str(name, _contacts_name.first, &quot;John&quot;);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function is used to set string field values. There are other similar functions for other types, such as integer and double.</p></li>
<li>Set the last name similarly:
<pre class="prettyprint">error_code = contacts_record_set_str(name, _contacts_name.last, &quot;Smith&quot;);
</pre>
</li>
<li>Associate the <span style="font-family: Courier New,Courier,monospace">name</span> record with the <span style="font-family: Courier New,Courier,monospace">contact</span> record, by setting the name as the contact&#39;s child record. In this example, it is achieved using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function.
<p>The second parameter is the parent property to which the child record is assigned. See the <span style="font-family: Courier New,Courier,monospace">_contacts_contact</span> view description in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">Contacts</a> API. In the API, the <span style="font-family: Courier New,Courier,monospace">name</span> property is listed as one of the <span style="font-family: Courier New,Courier,monospace">record</span> type properties, which means that other records can be assigned to this property as child records (&quot;single&quot; means that only 1 <span style="font-family: Courier New,Courier,monospace">_contacts_name</span> type child record is allowed). The required type of the child record is specified in the API. </p>
<pre class="prettyprint">error_code = contacts_record_add_child_record(contact, _contacts_contact.name, name);
</pre>
</li></ol></li>
<li>Add an image.
<ol type="a"><li>Create an image record:
<pre class="prettyprint">contacts_record_h image;

error_code = contacts_record_create(_contacts_image._uri, &amp;image);
</pre></li>
<li>To set the image, set the value of a string type property identified by <span style="font-family: Courier New,Courier,monospace">_contacts_image.path</span>:
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char caller_id_path[1024];
snprintf(caller_id_path, sizeof(caller_id_path), &quot;%s/caller_id.jpg&quot;, resource_path);
free(resource_path);
error_code = contacts_record_set_str(image, _contacts_image.path, caller_id_path);
</pre></li>
<li>Set the image record as the contact&#39;s child record:
<pre class="prettyprint">error_code = contacts_record_add_child_record(contact, _contacts_contact.image, image);
</pre>

<table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">For an application to insert private images in contacts, the following conditions apply:
	 <ul><li>The application must have the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.write</span> privilege to use the APIs, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span>.</li>
	 <li>The application&#39;s private directory and files must have the <span style="font-family: Courier New,Courier,monospace">read</span> permission of others, such as <span style="font-family: Courier New,Courier,monospace">644</span>. SMACK protects the <span style="font-family: Courier New,Courier,monospace">read</span> permission from the other applications.</li>
	 <li>The application can erase the image after destroying the contact record (using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function).</li></ul>
     </td>
    </tr>
   </tbody>
</table>

</li></ol></li>
<li>Add an event.
<p>You can add a birthday event associated with the contact. An event contains the date and the event type, among other properties.</p>
<ol type="a"><li>Create an event record:
<pre class="prettyprint">contacts_record_h event;

error_code = contacts_record_create(_contacts_event._uri, &amp;event);
</pre></li>
<li>Set the event date. The date is an integer, equal to year * 10000 + month * 100 + day.
<pre class="prettyprint">int year = 1990;
int month = 5;
int day = 21;
int int_date = year * 10000 + month * 100 + day;

error_code = contacts_record_set_int(event, _contacts_event.date, int_date);
</pre></li>
<li>Set the event type to birthday. For the available types, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__RECORD__MODULE.html#ga434cc4b7cec62ccab70fa4825ce0801d">contacts_event_type_e</a> enumeration.
<pre class="prettyprint">error_code = contacts_record_set_int(event, _contacts_event.type, CONTACTS_EVENT_TYPE_BIRTH);
</pre></li>
<li>If the type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_EVENT_TYPE_CUSTOM</span>, you can set a custom label (see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html#CAPI_SOCIAL_CONTACTS_SVC_VIEW_MODULE_contacts_event">_contacts_event</a> view).
<pre class="prettyprint">error_code = contacts_record_set_int(event, _contacts_event.type, CONTACTS_EVENT_TYPE_CUSTOM);

error_code = contacts_record_set_str(event, _contacts_event.label, &quot;Event description&quot;);
</pre></li>
<li>Set the event record as the contact&#39;s child record:
<pre class="prettyprint">error_code = contacts_record_add_child_record(contact, _contacts_contact.event, event);
</pre></li></ol></li>
<li>Add a phone number.
<p>The phone number is added to a parent record using an alternative method.</p>
<ol type="a"><li>Create a phone number record and set the <span style="font-family: Courier New,Courier,monospace">number</span> property:
<pre class="prettyprint">contacts_record_h number;

error_code = contacts_record_create(_contacts_number._uri, &amp;number);

error_code = contacts_record_set_str(number, _contacts_number.number, &quot;+8210-1234-5678&quot;);
</pre></li>
<li>Set the number record as the contact&#39;s child record:
<pre class="prettyprint">error_code = contacts_record_add_child_record(contact, _contacts_contact.number, number);
</pre></li></ol></li></ol>

 <h2 id="insert_contact" name="insert_contact">Inserting a Contact to the Database</h2>

<p>To insert a contact:</p>

<ol><li><p>When the data is set for the contact and name records, you can insert them into the database. When you insert a parent record, all child records added to it using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function are inserted automatically.</p>
<pre class="prettyprint">int id = -1;

error_code = contacts_db_insert_record(contact, &amp;id);
</pre></li>
<li>When the records are in the database, the objects representing them in the memory are no longer needed and must be destroyed.
<pre class="prettyprint">contacts_record_destroy(contact, true);</pre>
<p>If the second parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, child records of the given record (objects representing them in the memory) are also destroyed. This does not depend on the way the child records were added.</p></li></ol>

 <h2 id="get_contact" name="get_contact">Getting Contacts</h2>

<p>To retrieve contact records:</p>

<ol><li><p>A person is an aggregation of one or more contacts associated with the same person. The person is created automatically when inserting a contact record. To use the contact information in your application, you must learn to print basic person information.</p>

<p>Get a single person record:</p>
<ol type="a"><li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the appropriate <span style="font-family: Courier New,Courier,monospace">person_id</span>:</p>
<pre class="prettyprint">contacts_record_h person  = NULL;
const int person_id = ... // Acquire person ID
int error_code;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);
</pre></li>
<li>When you no longer need the person record, destroy the used structures:
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre></li></ol></li>

<li>Get the total person record list:
<ol type="a"><li><p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">contacts_list_h list = NULL;

error_code = contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;list);
</pre></li>
<li><p id="iterate_c" name="iterate_c">Iterate the list and read the records:</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 

<ol type="a"><li><p>To get the records from the list, use the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, and <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions. Get the details of each record in the loop.</p>  
  
<pre class="prettyprint">contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* display_name;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str_p(record, _contacts_person.display_name, &amp;display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;display_name: %s&quot;, display_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}</pre></li>
<li>If you want to get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_person_data_t</span> structure:
<pre class="prettyprint">contacts_gl_person_data_t *gl_person_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_person_data = _create_gl_person_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, display name:
&nbsp;&nbsp;&nbsp;// gl_person_data-&gt;display_name

&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}</pre></li>
<li>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this tutorial:
<pre class="prettyprint">
typedef struct 
_contacts_gl_person_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;char *default_phone_number;
&nbsp;&nbsp;&nbsp;contacts_list_h associated_contacts;
} contacts_gl_person_data_t;

static void 
_free_gl_person_data(contacts_gl_person_data_t *gl_person_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_person_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_person_data-&gt;display_name);
&nbsp;&nbsp;&nbsp;free(gl_person_data-&gt;default_phone_number);
&nbsp;&nbsp;&nbsp;contacts_list_destroy(gl_person_data-&gt;associated_contacts, true);
&nbsp;&nbsp;&nbsp;free(gl_person_data);
}

static contacts_gl_person_data_t* 
_create_gl_person_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_person_data_t *gl_person_data;

&nbsp;&nbsp;&nbsp;gl_person_data = malloc(sizeof(contacts_gl_person_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_person_data, 0x0, sizeof(contacts_gl_person_data_t));
&nbsp;&nbsp;&nbsp;if (contacts_record_get_int(record, _contacts_person.id, &amp;gl_person_data-&gt;id) != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get person id failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_display_name(record, &amp;gl_person_data-&gt;display_name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_display_name() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_default_phone_number(record, &amp;gl_person_data-&gt;default_phone_number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_default_phone_number() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_associated_contacts(record, &amp;gl_person_data-&gt;associated_contacts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_associated_contacts() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;_print_phone_numbers(gl_person_data-&gt;associated_contacts);
&nbsp;&nbsp;&nbsp;_print_events(gl_person_data-&gt;associated_contacts);

&nbsp;&nbsp;&nbsp;return gl_person_data;
}</pre></li>
<li>Get person details:
<ul>
<li>Get the display name.
<p>Assuming that you have the person record handle (<span style="font-family: Courier New,Courier,monospace">contacts_record_h</span>), you can access the <span style="font-family: Courier New,Courier,monospace">display_name</span> property. You can read the display name property and print it.</p>
<pre class="prettyprint">
static bool 
_get_display_name(contacts_record_h record, char **display_name)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(record, _contacts_person.display_name, display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;display name: %s&quot;, *display_name);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}</pre></li>
<li>Get associated contacts of a person by query:
<pre class="prettyprint">
static bool 
_get_associated_contacts(contacts_record_h record, contacts_list_h *associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_person.id, &amp;person_id);

&nbsp;&nbsp;&nbsp;error_code = CONTACTS_ERROR_NONE;
&nbsp;&nbsp;&nbsp;error_code += contacts_query_create(_contacts_contact._uri, &amp;query);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_create(_contacts_contact._uri, &amp;filter);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_int(filter, _contacts_contact.person_id, CONTACTS_MATCH_EQUAL, person_id);
&nbsp;&nbsp;&nbsp;error_code += contacts_query_set_filter(query, filter);

&nbsp;&nbsp;&nbsp;error_code += contacts_db_get_records_with_query(query, 0, 0, associated_contacts);

&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);

&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}</pre></li>
<li>Get phone numbers by iterating the contacts list. The following example shows how to get all the number records and print them.
<pre class="prettyprint">
static void 
_print_phone_numbers(contacts_list_h associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h contact;
&nbsp;&nbsp;&nbsp;if (NULL == associated_contacts) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;associated_contacts is NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(associated_contacts, &amp;contact) == CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int count = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_count(contact, _contacts_contact.number, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != error_code) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_record_get_child_record_count(%d)&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_h number = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.number, i, &amp;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int number_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(number, _contacts_number.id, &amp;number_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;number id: %d&quot;, number_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *number_str = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(number, _contacts_number.number, &amp;number_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;number: %s&quot;, number_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(associated_contacts);
&nbsp;&nbsp;&nbsp;}
}</pre></li>
<li>Get the default phone number.
<p>If a contact has multiple phone numbers, one of them is defined as the default phone number. A person also has a default phone number. The Contact Service provides the <span style="font-family: Courier New,Courier,monospace">_contacts_person_number</span> view for getting the default phone number of a person. In the default phone number record, the <span style="font-family: Courier New,Courier,monospace">is_primary_default</span> property value is <span style="font-family: Courier New,Courier,monospace">true</span>. The following example shows how to get the default phone number of a person by query.</p>
<pre class="prettyprint">
static bool 
_get_default_phone_number(contacts_record_h record, char **default_phone_number)
{
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;
&nbsp;&nbsp;&nbsp;contacts_list_h list = NULL;
&nbsp;&nbsp;&nbsp;contacts_record_h record_person_number = NULL;
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;int error_code = CONTACTS_ERROR_NONE;

&nbsp;&nbsp;&nbsp;error_code += contacts_record_get_int(record, _contacts_person.id, &amp;person_id);

&nbsp;&nbsp;&nbsp;error_code += contacts_query_create(_contacts_person_number._uri, &amp;query);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_create(_contacts_person_number._uri, &amp;filter);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_bool(filter, _contacts_person_number.is_primary_default, true);
&nbsp;&nbsp;&nbsp;error_code += contacts_query_set_filter(query, filter);
&nbsp;&nbsp;&nbsp;error_code += contacts_db_get_records_with_query(query, 0, 0, &amp;list);
&nbsp;&nbsp;&nbsp;error_code += contacts_list_get_current_record_p(list, &amp;record_person_number);

&nbsp;&nbsp;&nbsp;error_code += contacts_record_get_str(record_person_number, _contacts_person_number.number, default_phone_number);

&nbsp;&nbsp;&nbsp;contacts_list_destroy(list, true);
&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);

&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}</pre></li>
<li>Get events by iterating the contacts list:
<pre class="prettyprint">
static void 
_print_events(contacts_list_h associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h contact;
&nbsp;&nbsp;&nbsp;if (NULL == associated_contacts) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;associated_contacts is NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(associated_contacts, &amp;contact) == CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int count = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_count(contact, _contacts_contact.event, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != error_code) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_record_get_child_record_count(%d)&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_h event = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.event, i, &amp;event);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int event_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(event, _contacts_event.id, &amp;event_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;event id: %d&quot;, event_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int date;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(event, _contacts_event.date, &amp;date);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;event: %d&quot;, date);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(associated_contacts);
&nbsp;&nbsp;&nbsp;}
}</pre></li></ul></li></ol></li>
<li>When you no longer need the person record, destroy the used structures:
<pre class="prettyprint">
contacts_list_destroy(list, true);</pre>
</li></ol></li>
	<li>Get the filtered person record list:
	<ol type="a">
		<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function to filter the list with parameters:
		<ol type="a">
			<li>To get a person list with filtering, create a record list and a query:
			<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_person._uri, &amp;query);
</pre>
			</li>
			<li>Create a filter:
			<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_person._uri, &amp;filter);
</pre>
			</li>
			<li>Add a condition, such as <span style="font-family: Courier New,Courier,monospace">display_name</span>:
			<pre class="prettyprint">
error_code = contacts_filter_add_str(filter, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;John&quot;);
</pre>
			</li>
			<li>To add multiple conditions, you must define an operator between the conditions:
			<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

error_code = contacts_filter_add_bool(filter, _contacts_person.is_favorite, true);
</pre>
			</li>
			<li>Connect the query with the list.
			<p>The third parameter refers to a limit of the results. If 0 is passed, there are no limits. Remember that after all operations, the list must be released.</p>
			<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);

error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
			</li>
			<li>Free the filter and query:
			<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
			</li>
		</ol>
		</li>
		<li><a href="#iterate_c">Iterate the list and read the records.</a></li>
		<li>When you no longer need the person record, destroy the used structures:
		<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
		</li>
	</ol>
	</li>
	<li>Get the searched person record list:
	<ol type="a">
		<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_search_records()</span> function to find records based on a given keyword. The following example shows how to find the contact records which contain the &quot;John&quot; keyword.

		<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_search_records(_contacts_person._uri, &quot;John&quot;, 0, 0, &amp;list);
</pre>
		</li>
		<li><a href="#iterate_c">Iterate the list and read the records.</a></li>
		<li>When you no longer need the person record, destroy the used structures:
		<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
		</li>
	</ol>
	</li>
</ol>

 <h2 id="update_contact" name="update_contact">Updating a Contact</h2>

<p>To change the name, birthday, and phone number of an existing contact:</p>
<ol><li>Get the contact.
<p>To modify a record, you need to have a handle (<span style="font-family: Courier New,Courier,monospace">contacts_record_h</span> type variable) to a memory object representing the record in the database. One of the ways to acquire it is to use the contact ID.</p>
<pre class="prettyprint">int contact_id = ... // Acquire contact ID
contacts_record_h contact = NULL;

error_code = contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;contact);
</pre>
<p>Such handles are also provided by search functions, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p></li>
<li>Change the name:
<ol type="a"><li><p>To modify the contact name, get the name record with the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function, which provides a list of the child records of a given type. The function parameters are the parent record, the child record type, a child record index, and the resulting child record. Since there can be only one child record of the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.name</span> type, the index is set to 0 to get the first (and only) child record.</p>
<pre class="prettyprint">contacts_record_h name = NULL;

error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.name, 0, &amp;name);
</pre>
</li>

<li>Change the first name:
<pre class="prettyprint">error_code = contacts_record_set_str(name, _contacts_name.first, &quot;Mark&quot;);
</pre>
<p>This only changes the data in the memory object, not in the database. To insert a new value, the <span style="font-family: Courier New,Courier,monospace">name</span> record must be inserted. However, if you acquire this record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function (as in this example), you only need to update the parent record.</p></li></ol></li>
<li>Change the birthday event:
<ol type="a"><li>If only 1 event is set for the contact, you can call the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function to get the event record. If there are more events, you must iterate over the child records.
<pre class="prettyprint">contacts_record_h event = NULL;
error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.event, 0, &amp;event);
</pre></li>

<li>Update the record:
<pre class="prettyprint">int new_date = 1990 * 10000 + 6 * 100 + 21;

error_code = contacts_record_set_int(event, _contacts_event.date, new_date);
</pre></li></ol></li>
<li>Update the contact record. Any changes in the child records (such as name and birthday) are also inserted.
<pre class="prettyprint">error_code = contacts_db_update_record(contact);
</pre></li>
<li>When the record handle is no more needed, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function to destroy the record handle and free the allocated memory:
<pre class="prettyprint">contacts_record_destroy(contact, true);</pre></li></ol>

 <h2 id="delete_contact" name="delete_contact">Deleting a Person</h2>

<p>To delete a person, call the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_contacts_person._uri</span> as the first parameter and the person ID as the second one:</p>
<pre class="prettyprint">int person_id = ... // Acquire person ID

error_code = contacts_db_delete_record(_contacts_person._uri, person_id);
</pre>

 <h2 id="link_contact" name="link_contact">Linking and Unlinking Contacts</h2>

<p>To link and unlink contacts (manually and automatically):</p>
<ul><li>Link a person to another person manually with the <span style="font-family: Courier New,Courier,monospace">contacts_person_link_person()</span> function with base person ID as the first parameter and another person ID as the second one.
<pre class="prettyprint">int person_id1 = ... // Acquire base person ID
int person_id2 = ... // Acquire another person ID

error_code = contacts_person_link_person(person_id1, person_id2);
</pre></li>
<li>Link a contact automatically to a person when creating by setting the <span style="font-family: Courier New,Courier,monospace">link_mode</span> property to <span style="font-family: Courier New,Courier,monospace">CONTACTS_CONTACT_LINK_MODE_NONE</span> when inserting.
<p>The Contact Service determines the link based on the <span style="font-family: Courier New,Courier,monospace">number</span> and <span style="font-family: Courier New,Courier,monospace">email</span> properties. If the links leads to a contact in the same address book, the link does not work.</p>
<pre class="prettyprint">contacts_record_h contact = NULL;

error_code = CONTACTS_ERROR_NONE;
error_code += contacts_record_create(_contacts_contact._uri, &amp;contact);
error_code += contacts_record_set_int(contact, _contacts_contact.link_mode, CONTACTS_CONTACT_LINK_MODE_NONE);

contacts_record_h name = NULL;
error_code += contacts_record_create(_contacts_name._uri, &amp;name);
error_code += contacts_record_set_str(name, _contacts_name.first, &quot;John&quot;);
error_code += contacts_record_add_child_record(contact, _contacts_contact.name, name);

contacts_record_h number = NULL;
error_code += contacts_record_create(_contacts_number._uri, &amp;number);
error_code += contacts_record_set_str(number, _contacts_number.number, &quot;+8210-1234-5678&quot;);
error_code += contacts_record_add_child_record(contact, _contacts_contact.number, number);

// Contact is linked automatically if an existing person has the same number in a different address book
error_code += contacts_db_insert_record(contact, NULL);

contacts_record_destroy(contact, true);</pre></li>
<li>Unlink a contact from a person by calling the <span style="font-family: Courier New,Courier,monospace">contacts_person_unlink_contact()</span> function with the base person ID as the first parameter and the contact ID as the second one. A new person is created when unlinking. You can get the new person ID as the third parameter.
<pre class="prettyprint">int person_id = ... // Acquire base person ID
int contact_id = ... // Acquire contact ID
int unlinked_person_id;

error_code = contacts_person_unlink_contact(person_id, contact_id, &amp;unlinked_person_id);
</pre></li></ul>

 <h2 id="manage_contact" name="manage_contact">Managing Favorites</h2>

<p>To manage person favorites:</p>
<ul><li>Set a person as favorite when creating a contact using the <span style="font-family: Courier New,Courier,monospace">is_favorite</span> property of the <span style="font-family: Courier New,Courier,monospace">person</span> record. If the property is set to <span style="font-family: Courier New,Courier,monospace">true</span> when creating a contact, the person is set as favorite.
<pre class="prettyprint">contacts_record_h contact = NULL;

error_code = CONTACTS_ERROR_NONE;
error_code += contacts_record_create(_contacts_contact._uri, &amp;contact);
error_code += contacts_record_set_bool(contact, _contacts_contact.is_favorite, true);
// Set other properties

// New person is set as favorite
error_code += contacts_db_insert_record(contact, NULL);

contacts_record_destroy(contact, true);</pre></li>
<li>Set an existing person as favorite by updating the <span style="font-family: Courier New,Courier,monospace">person</span> record:
<pre class="prettyprint">int person_id = ... // Acquire person ID
contacts_record_h person = NULL;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);

error_code = contacts_record_set_bool(person, _contacts_person.is_favorite, true);

error_code = contacts_db_update_record(person);

contacts_record_destroy(person, true);</pre></li>
<li>Unset a favorite:
<pre class="prettyprint">int person_id = ... // Acquire person ID
contacts_record_h person = NULL;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);

error_code = contacts_record_set_bool(person, _contacts_person.is_favorite, false);

error_code = contacts_db_update_record(person);

contacts_record_destroy(person, true);</pre></li></ul>

 <h2 id="monitor_contact" name="monitor_contact">Monitoring Person Changes</h2>

<p>To register a callback function to listen for person changes:</p>
<ol><li>Register the callback function:
<pre class="prettyprint">error_code = contacts_db_add_changed_cb(_contacts_person._uri, _person_changed_callback, NULL);
</pre></li>
<li>Define the callback function.
<p>The callback function is called when the person data changes. The following example shows how to update person details in the callback function.</p>
<pre class="prettyprint">
static contacts_gl_person_data_t *_gl_person_data = ...
void 
_person_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _contacts_person._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (_gl_person_data == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int person_id = _gl_person_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_person_data(_gl_person_data);
&nbsp;&nbsp;&nbsp;_gl_person_data = NULL;

&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_person_data = _create_gl_person_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_person_data

&nbsp;&nbsp;&nbsp;contacts_record_destroy(record, true);
}</pre></li></ol>

 <h2 id="create" name="create">Creating a Group</h2>

<p>To create a new group record:</p>
<pre class="prettyprint">contacts_record_h group = NULL;

error_code = contacts_record_create(_contacts_group._uri, &amp;group);
</pre>

 <h2 id="set" name="set">Setting Group Properties</h2>

<p>To set group properties:</p>

<ul><li>Set the group name with the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function. This function takes the group record handle as the first parameter, <span style="font-family: Courier New,Courier,monospace">_contacts_group.name</span> as the second, and the name, which is a string value, as the third parameter. The name parameter is taken from the UI part of the application. The function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, and disconnecting from the service if needed.
<pre class="prettyprint">error_code = contacts_record_set_str(group, _contacts_group.name, &quot;Neighbors&quot;);
</pre></li>
<li>Set an image and ringtone path with the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function and check the error codes. You can set the other properties similarly.
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/group_image.jpg&quot;, resource_path);
error_code = contacts_record_set_str(group, _contacts_group.image_path, temp_path);
snprintf(temp_path, sizeof(temp_path), &quot;%s/ringtone.mp3&quot;, resource_path);
free(resource_path);
error_code = contacts_record_set_str(group, _contacts_group.ringtone_path, temp_path);
</pre></li></ul>

 <h2 id="insert" name="insert">Inserting a Group to the Database</h2>

<p>To insert a group record:</p>
<ol><li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function to insert a newly created group into the contacts database.
<p> The first parameter is the group record handle, the second is the record ID. A unique ID is assigned to the record your are adding, and is returned as the third parameter of the called function. If the group is inserted successfully, the function returns <span style="font-family: Courier New,Courier,monospace">CONTACTS_ERROR_NONE</span>.</p>
<pre class="prettyprint">int added_group_id = -1;

error_code = contacts_db_insert_record(group, &amp;added_group_id);
</pre></li>
<li>After inserting, the used structures have to be destroyed:
<pre class="prettyprint">contacts_record_destroy(group, true);</pre></li></ol>

 <h2 id="get" name="get">Getting Groups</h2>

<p>To get all of the group records one by one, or to filter them by one of the properties:</p>

<ol><li>Get a single group record:
<ol type="a"><li><p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the appropriate <span style="font-family: Courier New,Courier,monospace">group_id</span>:</p>
<pre class="prettyprint">contacts_record_h group;
int group_id = ... // Acquire group ID
error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;group);
</pre></li>
<li>When you no longer need the group record, destroy the used structures:

<pre class="prettyprint">contacts_record_destroy(group, true);</pre></li></ol></li>

<li>Get the total group record list:
<ol type="a"><li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">contacts_list_h list = NULL;
error_code = contacts_db_get_all_records(_contacts_group._uri, 0, 0, &amp;list);
</pre></li>

<li>To iterate the list and read the records:

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 
		<ol type="a">
			<li>
			<p>To get the records from the list, use the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, and <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions. The following example gets the details of each record in the loop.</p>

			<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* name;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str_p(record, _contacts_group.name, &amp;name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, "group name: %s", name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre>
			</li>
			<li>If you want to get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_group_data_t</span> structure:
			<pre class="prettyprint">
contacts_gl_group_data_t *gl_group_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_group_data = _create_gl_group_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, display name:
&nbsp;&nbsp;&nbsp;// gl_group_data-&gt;name

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre>
			</li>
			<li>The memory for the record data is allocated, and the data is copied from the record by the functions listed in the following example:
			<pre class="prettyprint">
typedef struct 
_contacts_gl_group_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *name;
&nbsp;&nbsp;&nbsp;char *image_path;
&nbsp;&nbsp;&nbsp;char *ringtone_path;
} contacts_gl_group_data_t;

static void 
_free_gl_group_data(contacts_gl_group_data_t *gl_group_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_group_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;name);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;image_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;ringtone_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data);
}

static contacts_gl_group_data_t* 
_create_gl_group_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_group_data_t *gl_group_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_group_data = malloc(sizeof(contacts_gl_group_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_group_data, 0x0, sizeof(contacts_gl_group_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_group.id, &amp;gl_group_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.name, &amp;gl_group_data-&gt;name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.image_path, &amp;gl_group_data-&gt;image_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.ringtone_path, &amp;gl_group_data-&gt;ringtone_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_group_data;
}</pre>
			</li>
		</ol>
		</li>
		<li>When you no longer need the group record, destroy the used structures:
		<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
		</li>
	</ol>
	</li>
	<li>Get the filtered group record list:
	<ol type="a">
		<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function to filter the list with parameters:
		<ol type="a">
<li>To get groups with filtering, you need a record list and a query:
<pre class="prettyprint">contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_group._uri, &amp;query);
</pre></li>
<li>Before getting the groups, filter the list. There is a possibility to filter based on various parameters. To create a filter:
<pre class="prettyprint">contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_group._uri, &amp;filter);
</pre></li>
<li>Add a condition, such as group name:
<pre class="prettyprint">error_code = contacts_filter_add_str(filter, _contacts_group.name, CONTACTS_MATCH_CONTAINS, &quot;neighbors&quot;);
</pre>
<p>That way only groups which contain the name &quot;neighbors&quot; are retrieved. To use multiple conditions, add an operator between them:</p>
<pre class="prettyprint">error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);

error_code = contacts_filter_add_str(filter, _contacts_group.name, CONTACTS_MATCH_CONTAINS, &quot;friend&quot;);
</pre></li>
<li>Connect the query with the list:
<pre class="prettyprint">error_code = contacts_query_set_filter(query, filter);

error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The third parameter refers to the limit of the results. If 0 is passed, there are no limits. Remember that after all operations, the list must be released.</p></li>
<li>Free the filter and query:
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre></li>
</ol></li>
<li>To iterate the list and read the records:

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 

<ol type="a"><li><p>To get the records from the list, use the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, and <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions. Get the details of each record in the loop.</p>

<pre class="prettyprint">contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char* name;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str_p(record, _contacts_group.name, &amp;name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;group name: %s&quot;, name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>
<li><p>If you want to get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_group_data_t</span> structure: </p>
<pre class="prettyprint">contacts_gl_group_data_t *gl_group_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_group_data = _create_gl_group_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, display name:
&nbsp;&nbsp;&nbsp;// gl_group_data-&gt;name

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>
<li><p>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this tutorial:</p>
<pre class="prettyprint">
typedef struct 
_contacts_gl_group_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *name;
&nbsp;&nbsp;&nbsp;char *image_path;
&nbsp;&nbsp;&nbsp;char *ringtone_path;
} contacts_gl_group_data_t;

static void 
_free_gl_group_data(contacts_gl_group_data_t *gl_group_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_group_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;name);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;image_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;ringtone_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data);
}

static contacts_gl_group_data_t* 
_create_gl_group_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_group_data_t *gl_group_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_group_data = malloc(sizeof(contacts_gl_group_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_group_data, 0x0, sizeof(contacts_gl_group_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_group.id, &amp;gl_group_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.name, &amp;gl_group_data-&gt;name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.image_path, &amp;gl_group_data-&gt;image_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.ringtone_path, &amp;gl_group_data-&gt;ringtone_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_group_data;
}</pre></li></ol></li>
<li>When you no longer need the group record, destroy the used structures:
<pre class="prettyprint">
contacts_list_destroy(list, true);</pre>
</li></ol></li></ol>

 <h2 id="update" name="update">Updating a Group</h2>

<p>To change the name and image of an existing person:</p>
<ol><li>Get the group.
<p>To modify a record, you need to have a handle (<span style="font-family: Courier New,Courier,monospace">contacts_record_h type</span> variable) to a memory object representing the record in the database. One of the ways to acquire it is to use the group ID.</p>
<pre class="prettyprint">int group_id = ... // Acquire group ID
contacts_record_h group = NULL;

error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;group);
</pre>
<p>Such handles are also provided by search functions, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p>
</li>
<li>Change the name and image property using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function:
<pre class="prettyprint">error_code = contacts_record_set_str(group, _contacts_group.name, &quot;Family&quot;);
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/group_image_new.jpg&quot;, resource_path);
free(resource_path);
error_code = contacts_record_set_str(group, _contacts_group.image_path, temp_path);
</pre></li>

<li>Update the group record. The above changes (name and image) are also inserted.
<pre class="prettyprint">error_code = contacts_db_update_record(group);
</pre></li>
<li>When the record handle is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function to destroy the record handle and free the allocated memory:
<pre class="prettyprint">contacts_record_destroy(group, true);</pre></li></ol>

 <h2 id="delete" name="delete">Deleting a Group</h2>

<p>To delete a group, call the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_contacts_group._uri</span> as the first parameter and group ID as the second one:</p>
<pre class="prettyprint">int group_id = ... // Acquire group ID

error_code = contacts_db_delete_record(_contacts_group._uri, group_id);
</pre>

 <h2 id="manage" name="manage">Managing Group Members</h2>

<p>To manage group members:</p>

<ul><li>Add a group member by getting the contact ID and the group ID, and call the <span style="font-family: Courier New,Courier,monospace">contacts_group_add_contact()</span> function:
<pre class="prettyprint">int contact_id = ... // Acquire contact ID
int group_id = ... // Acquire group ID

error_code = contacts_group_add_contact(group_id, contact_id);
</pre></li>
<li>Remove a contact from a group with the <span style="font-family: Courier New,Courier,monospace">contacts_group_remove_contact()</span> function:
<pre class="prettyprint">
error_code = contacts_group_remove_contact(group_id, contact_id);
</pre></li>

<li>Get a list of persons assigned to a specific group:
<ol><li>Get the records of the <span style="font-family: Courier New,Courier,monospace">_contacts_person_group_assigned</span> type:
<pre class="prettyprint">
contacts_query_h query = NULL;
contacts_filter_h filter = NULL;
contacts_list_h list = NULL;

contacts_query_create(_contacts_person_group_assigned._uri, &amp;query);
contacts_filter_create(_contacts_person_group_assigned._uri, &amp;filter);
contacts_filter_add_int(filter, _contacts_person_group_assigned.group_id, CONTACTS_MATCH_EQUAL, group_id);
contacts_query_set_filter(query, filter);
contacts_db_get_records_with_query(query, 0, 0, &amp;list);</pre></li>
<li>Iterate over the list elements:
<pre class="prettyprint">contacts_record_h person = NULL;
int error_code;

while (contacts_list_get_current_record_p(list, &amp;person) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;contacts_record_get_int(person, _contacts_person_group_assigned.person_id, &amp;person_id);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Person id: %d&quot;, person_id);

&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(person, _contacts_person_group_assigned.display_name, &amp;display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Display name: %s&quot;, display_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}</pre></li>
<li>Destroy the filter, query, and list handles when no longer needed:
<pre class="prettyprint">contacts_list_destroy(list, true);
contacts_filter_destroy(filter);
contacts_query_destroy(query);</pre></li></ol></li></ul>

 <h2 id="monitor" name="monitor">Monitoring Group Changes</h2>

<p>To register a callback function to listen for group changes:</p>
<ol><li>Register the callback function to listen for group changes:
<pre class="prettyprint">error_code = contacts_db_add_changed_cb(_contacts_group._uri, _group_changed_callback, NULL);
</pre></li>
<li>Define the callback function to be called when the group data changes:
<pre class="prettyprint">static contacts_gl_group_data_t *_gl_group_data = ...
static void 
_group_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _contacts_group._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (_gl_group_data == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int group_id = _gl_group_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_group_data(_gl_group_data);
&nbsp;&nbsp;&nbsp;_gl_group_data = NULL;

&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_group_data = _create_gl_group_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_group_data

&nbsp;&nbsp;&nbsp;contacts_record_destroy(record, true);
}</pre></li></ol>

 <h2 id="make" name="make">Making a vCard</h2>

<p>To make a vCard stream from a person record:</p>
<ol><li>Get the person record by the person ID:
<pre class="prettyprint">int person_id = ... // Acquire person ID

contacts_record_h record = NULL;
error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;record);
</pre></li>
<li>Make the vCard stream by the person record:
<pre class="prettyprint">char *vcard_stream = NULL;
error_code = contacts_vcard_make_from_person(record, &amp;vcard_stream);
</pre>

    <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">The Contact Service API allows you to make a vCard stream from a person, contact, and my profile records:
<pre class="prettyprint">int contacts_vcard_make_from_person(contacts_record_h person, char **vcard_stream);
int contacts_vcard_make_from_contact(contacts_record_h contact, char **vcard_stream);
int contacts_vcard_make_from_my_profile(contacts_record_h my_profile, char **vcard_stream);</pre>
</td>
    </tr>
   </tbody>
  </table> </li>

<li>Destroy the handle when it is no longer needed:
<pre class="prettyprint">free(vcard_stream);
contacts_record_destroy(record, true);</pre>
 </li>   </ol>

 <h2 id="parse" name="parse">Parsing a vCard</h2>

<p>To parse a vCard from a file and insert to the database:</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/vcard.vcf&quot;, resource_path);
free(resource_path);
error_code = contacts_vcard_parse_to_contact_foreach(temp_path, // File path of vCard
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_vcard_parse_cb, // Callback function to invoke
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL); // User data to be passed to the callback function
</pre>

<p>The vCard stream contains multiple contact objects. The callback function is called after parsing each contact. If you return <span style="font-family: Courier New,Courier,monospace">false</span> on the callback function, parsing stops.</p>
<pre class="prettyprint">
static bool 
_vcard_parse_cb(contacts_record_h contact, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == contact)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;int contact_id = -1;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_insert_record(contact, &amp;contact_id);
&nbsp;&nbsp;&nbsp;// Use the contact record

&nbsp;&nbsp;&nbsp;return true;
}</pre>


 <h2 id="sd_create" name="sd_create">Creating a Speed Dial</h2>

<p>To create a speed dial record:</p>
<pre class="prettyprint">
contacts_record_h speeddial;
error_code = contacts_record_create(_contacts_speeddial._uri, &amp;speeddial);
</pre>
<p>The first parameter determines the type of the created record. Use <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial._uri</span> to create speed dial type records.</p>

 <h2 id="sd_set" name="sd_set">Setting Speed Dial Properties</h2>

<p>To set speed dial properties:</p>
<ol>
<li>Set the speed dial number with the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function. This function takes the speed dial record handle as the first parameter, <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial.speeddial_number</span> as the second, and the speed dial number, which is an integer value, as the third parameter. The function returns the status code. If the function returns an error, take appropriate action, such as freeing memory, removing handles, or disconnecting from the service.
<pre class="prettyprint">
int speeddial_number = ... // Acquire speed dial number
error_code = contacts_record_set_int(speeddial, _contacts_speeddial.speeddial_number, speeddial_number);
</pre>
</li>

<li>Set the number ID:
<pre class="prettyprint">
int number_id = ... // Acquire number id
error_code = contacts_record_set_int(speeddial, _contacts_speeddial. number_id, number_id);
</pre>
</li>
</ol>
  
 <h2 id="sd_insert" name="sd_insert">Inserting a Speed Dial to the Database</h2>

<p>To insert a speed dial record:</p>
<ol><li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function to insert a newly created speed dial into the contacts database. The first parameter is the speed dial record handle, the second is the speed dial number. If the speed dial is inserted successfully, the function returns <span style="font-family: Courier New,Courier,monospace">CONTACTS_ERROR_NONE</span>.
<pre class="prettyprint">
int added_speeddial_id = -1;

error_code = contacts_db_insert_record(speeddial, &amp;added_speeddial_id);	
</pre>
</li>

<li>After inserting the speed dial record, destroy the used structures:
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre>
</li>
</ol>

 <h2 id="sd_get" name="sd_get">Getting Speed Dials</h2>

<p>To get all of the speed dial records one by one, or to filter them by one of the properties:</p>
<ol>
<li>Get a single speed dial record:
<ol type="a">
<li><p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the appropriate <span style="font-family: Courier New,Courier,monospace">speeddial_id</span>:</p>
<pre class="prettyprint">
contacts_record_h speeddial;
int speeddial_id = ... // Acquire speed dial ID
error_code = contacts_db_get_record(_contacts_speeddial._uri, speeddial_id, &amp;speeddial);
</pre>
</li>

<li>After finish using the speed dial record, destroy the used structures:

<pre class="prettyprint">contacts_record_destroy(speeddial, true);</pre></li></ol></li>

<li>Get the total speed dial record list:
<ol type="a"><li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:
<pre class="prettyprint">
contacts_list_h list = NULL;
error_code = contacts_db_get_all_records(_contacts_speeddial._uri, 0, 0, &amp;list);
</pre>
</li>

<li>To iterate the list and read the records, you can get the records from the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span>, or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> function. Get the details of each record in the loop.
		
	  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 	
		

		<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_speeddial.speeddial_number, &amp;number);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;speed dial number: %d&quot;, number);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

		<p>To get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_speeddial_data_t</span> structure:</p>

		<pre class="prettyprint">
contacts_gl_speeddial_data_t *gl_speeddial_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_speeddial_data = _create_gl_speeddial_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

		<p>The memory for the record data is allocated, and the data is copied from the record by the functions shown in the following example:</p>

		<pre class="prettyprint">
typedef struct 
_contacts_gl_speeddial_data
{
&nbsp;&nbsp;&nbsp;int speeddial_number;
&nbsp;&nbsp;&nbsp;char *number;
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;char *image_thumbnail_path;
} contacts_gl_speeddial_data_t;

static void 
_free_gl_speeddial_data(contacts_gl_speeddial_data_t *gl_speeddial_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_speeddial_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;number);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;display_name);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;image_thumbnail_path);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data);
}

static contacts_gl_speeddial_data_t* 
_create_gl_speeddial_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_speeddial_data_t *gl_speeddial_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_speeddial_data = malloc(sizeof(contacts_gl_speeddial_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_speeddial_data, 0x0, sizeof(contacts_gl_speeddial_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_speeddial.speeddial_number, &amp;gl_speeddial_data-&gt;speeddial_number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.number, &amp;gl_speeddial_data-&gt;number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.display_name, &amp;gl_speeddial_data-&gt;display_name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.image_thumbnail_path, &amp;gl_speeddial_data-&gt;image_thumbnail_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_speeddial_data;
}
</pre>
		</li>
		<li>After you no longer need the speed dial record, destroy the used structures:
		<pre class="prettyprint">
contacts_list_destroy(list, true);</pre>
		</li>
	</ol>
	</li>
	<li>Get the filtered speed dial record list:
	<ol type="a">
		<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function.
		<ol type="a">
			<li>Create a record list and query:

	<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_speeddial._uri, &amp;query);
</pre>
	</li>
	<li>Filter the list before getting the speed dials. It is possible to filter with various parameters. To create a filter:
	<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_speeddial._uri, &amp;filter);
</pre>
	</li>

	<li>Add a condition, such as the speed dial number.
	<p>The following example retrieves only those speed dials whose numbers are less than 3.</p>
	<pre class="prettyprint">
error_code = contacts_filter_add_int(filter, _contacts_speeddial.speeddial_number, CONTACTS_MATCH_LESS_THAN, 3);
</pre>
	<p>To use multiple conditions, add an operator between them:</p>
	<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);

error_code = contacts_filter_add_int(filter, _contacts_speeddial.speeddial_number, CONTACTS_MATCH_GREATER_THAN, 15);
</pre>
	</li>

	<li>Connect the query with the list: 
	<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);

error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
	<p>The third parameter refers to the limit of the results. If 0 is passed, there are no limits. Remember that after all operations, the list must be released.</p>
	</li>

<li>Free the filter and query: 
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>

<li>To iterate the list and read the records, you can get the records from the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span>, or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> function. Get the details of each record in the loop.

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 

<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_speeddial.speeddial_number, &amp;number);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;speed dial number: %d&quot;, number);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

<p>To get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_speeddial_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_speeddial_data_t *gl_speeddial_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_speeddial_data = _create_gl_speeddial_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>The memory for the record data is allocated, and the data is copied from the record by the functions shown in the following example.</p>
<pre class="prettyprint">
typedef struct 
_contacts_gl_speeddial_data
{
&nbsp;&nbsp;&nbsp;int speeddial_number;
&nbsp;&nbsp;&nbsp;char *number;
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;char *image_thumbnail_path;
} contacts_gl_speeddial_data_t;

static void 
_free_gl_speeddial_data(contacts_gl_speeddial_data_t *gl_speeddial_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_speeddial_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;number);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;display_name);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;image_thumbnail_path);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data);
}

static contacts_gl_speeddial_data_t* 
_create_gl_speeddial_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_speeddial_data_t *gl_speeddial_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_speeddial_data = malloc(sizeof(contacts_gl_speeddial_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_speeddial_data, 0x0, sizeof(contacts_gl_speeddial_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_speeddial.speeddial_number, &amp;gl_speeddial_data-&gt;speeddial_number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.number, &amp;gl_speeddial_data-&gt;number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.display_name, &amp;gl_speeddial_data-&gt;display_name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_speeddial.image_thumbnail_path, &amp;gl_speeddial_data-&gt;image_thumbnail_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_speeddial_data;
}
</pre>
</li>
<li>When you no longer need the speed dial record, destroy the used structures:
<pre class="prettyprint">
contacts_list_destroy(list, true);</pre></li>
</ol></li></ol>

 <h2 id="sd_update" name="sd_update">Updating a Speed Dial</h2>

<p>To change the number ID of an existing speed dial:</p>
<ol>
<li>Get the speed dial. 
<p>To modify a record, you need to have a handle (<span style="font-family: Courier New,Courier,monospace">contacts_record_h</span> type variable) to a memory object representing the record in the database. One of the ways to acquire it is to use the speed dial number:</p>
<pre class="prettyprint">
int speeddial_number = ... // Acquire speed dial number
contacts_record_h speeddial = NULL;

error_code = contacts_db_get_record(_contacts_speeddial._uri, speeddial_number, &amp;speeddial);
</pre>

<p>Such handles are also provided by search functions, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p>
</li>

<li>Change the number ID by setting the <span style="font-family: Courier New,Courier,monospace">number_id</span> property using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function:
<pre class="prettyprint">
int number_id = ... // Acquire number id
error_code = contacts_record_set_int(speeddial, _contacts_speeddial.number_id, number_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record set integer failed: %x&quot;, error_code);
</pre>
</li>

<li>Update the speed dial record. The above changes (<span style="font-family: Courier New,Courier,monospace">number_id</span>) are also inserted.
<pre class="prettyprint">
error_code = contacts_db_update_record(speeddial);
</pre>
</li>

<li>When the record handle is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function to destroy the record handle and free the allocated memory:
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre>
</li>
</ol>

 <h2 id="sd_delete" name="sd_delete">Deleting a Speed Dial</h2>

<p>To delete a speed dial, call the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial._uri</span> as the first parameter and speed dial number as the second one:</p>
<pre class="prettyprint">
int speeddial_number = ... // Acquire speed dial number

error_code = contacts_db_delete_record(_contacts_speeddial._uri, speeddial_number);
</pre>
 

 <h2 id="pl_create" name="pl_create">Creating a Log</h2>

<p>To create a log record:</p>
<pre class="prettyprint">
contacts_record_h log;
error_code = contacts_record_create(_contacts_phone_log._uri, &amp;log);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record create failed: %x&quot;, error_code);
</pre>
<p>The first parameter determines the type of the created record. Use <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log._uri</span> to create log type records.</p>

 <h2 id="pl_set" name="pl_set">Setting Log Properties</h2>

<p>To set log properties:</p>
<ol>
<li>Set the log type with <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function. This function takes the log record handle as the first parameter, <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log.log_type</span> as the second, and the type, which is a integer value, as the third parameter. The function returns the status code. If the function returns an error, free memory, remove handles, and disconnect from the service, if needed.
<pre class="prettyprint">
error_code = contacts_record_set_int(log, _contacts_phone_log.log_type, CONTACTS_PLOG_TYPE_VOICE_INCOMMING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record set integer failed: %x&quot;, error_code);
</pre>

<p>The enumeration flag names for the log types are listed in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__RECORD__MODULE.html#gaafc3f61866231c01314c1d3f7da6038b">contacts_phone_log_type_e</a> enumeration.</p></li>

<li>Set time, duration, and address:
<pre class="prettyprint">
error_code = contacts_record_set_int(log, _contacts_phone_log.log_time, (int)time(NULL));
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record set integer failed: %x&quot;, error_code);

error_code = contacts_record_set_int(log, _contacts_phone_log.extra_data1, 37);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record set integer failed: %x&quot;, error_code);

error_code = contacts_record_set_str(log, _contacts_phone_log.address, &quot;+8231-1234-5678&quot;);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record set string failed: %x&quot;, error_code);
</pre>

<p>Log time means the number of seconds since 1970-01-01 00:00:00 (UTC). The <span style="font-family: Courier New,Courier,monospace">extra_data1</span> property means the <span style="font-family: Courier New,Courier,monospace">message_id</span>, <span style="font-family: Courier New,Courier,monospace">email_id</span>, or duration (seconds) of a call. The address property means a number or an email.</p>
</li>
</ol>

 <h2 id="pl_insert" name="pl_insert">Inserting a Log to the Database</h2>

<p>To insert a log record:</p>
<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function to insert a newly created log into the contacts database. The first parameter is the log record handle, the second is the record ID. If the log is inserted successfully, the function returns <span style="font-family: Courier New,Courier,monospace">CONTACTS_ERROR_NONE</span>.
<pre class="prettyprint">
int added_log_id = -1;

error_code = contacts_db_insert_record(log, &amp;added_log_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts db insert record failed: %x&quot;, error_code);
</pre>
</li>
<li>After inserting the log, destroy the used structures:
<pre class="prettyprint">contacts_record_destroy(log, true);</pre>
</li>
</ol>

 <h2 id="pl_get" name="pl_get">Getting Logs</h2>

<p>To get all log records one by one, or to filter them by one of the properties:</p>
<ol>
<li>Get a single log record: 
<ol type="a"><li><p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the appropriate <span style="font-family: Courier New,Courier,monospace">log_id</span>:</p>
<pre class="prettyprint">contacts_record_h log;
int log_id = ... // Acquire log ID
error_code = contacts_db_get_record(_contacts_phone_log._uri, log_id, &amp;log);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts db get record failed: %x&quot;, error_code);
</pre></li>
<li>After inserting the log, destroy the used structures:
<pre class="prettyprint">contacts_record_destroy(log, true);</pre></li></ol>
</li>
<li>Get the total log record list:
<ol type="a"><li><p>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
error_code = contacts_db_get_all_records(_contacts_phone_log._uri, 0, 0, &amp;list);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts db get all records failed: %x&quot;, error_code);
</pre>
</li>

<li>To iterate the list and read the records, you can get the records from the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span>, or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> function. Get the details of each record in the loop.

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 


<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int type;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_phone_log.log_type, &amp;type);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;log type: %d&quot;, type);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

<p>To get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_log_data_t</span> structure:</p>

<pre class="prettyprint">
contacts_gl_log_data_t *gl_log_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_log_data = _create_gl_log_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

<p>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this tutorial.</p>

		<pre class="prettyprint">
typedef struct 
_contacts_gl_log_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *address;
&nbsp;&nbsp;&nbsp;int log_type;
&nbsp;&nbsp;&nbsp;int log_time;
} contacts_gl_log_data_t;

static void 
_free_gl_log_data(contacts_gl_log_data_t *gl_log_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_log_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_log_data-&gt;address);
&nbsp;&nbsp;&nbsp;free(gl_log_data);
}

static contacts_gl_log_data_t* 
_create_gl_log_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_log_data_t *gl_log_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_log_data = malloc(sizeof(contacts_gl_log_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_log_data, 0x0, sizeof(contacts_gl_log_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.id, &amp;gl_log_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_phone_log.address, &amp;gl_log_data-&gt;address))
&nbsp;&nbsp;&nbsp;{								
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.log_type, &amp;gl_log_data-&gt;log_type))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.log_time, &amp;gl_log_data-&gt;log_time))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_log_data;
}
</pre>
		</li>
<li>After getting the log record, destroy the used structures:
<pre class="prettyprint">
contacts_list_destroy(list, true);</pre>
		</li>
	</ol>
	</li>
	<li>Get the filtered log record list:
	<ol type="a">
		<li>Use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function.
		<ol type="a">
<li>Create a record list and query:
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_phone_log._uri, &amp;query);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts query create failed: %x&quot;, error_code);
</pre>
	</li>
	
	<li>Before getting the logs, filter the list. There is a possibility to filter based on various parameters. To create a filter: 
	<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_phone_log._uri, &amp;filter);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts filter create failed: %x&quot;, error_code);
</pre>
	</li>
	
	<li>Add a condition, such as the log type.
	<p>The following example retrieves only those logs which type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_PLOG_TYPE_VOICE_INCOMMING</span>.</p>
	<pre class="prettyprint">
error_code = contacts_filter_add_int(filter, _contacts_phone_log.log_type, CONTACTS_MATCH_EQUAL, CONTACTS_PLOG_TYPE_VOICE_INCOMMING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts filter add integer failed: %x&quot;, error_code);
</pre>
	 
	<p>To use multiple conditions, add an operator between them:</p>
	<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts filter add operator failed: %x&quot;, error_code);
error_code = contacts_filter_add_int(filter, _contacts_phone_log.log_type, CONTACTS_MATCH_EQUAL, CONTACTS_PLOG_TYPE_VOICE_OUTGOING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts filter add integer failed: %x&quot;, error_code);
</pre>
	</li>
	
	<li>Connect the query with the list: 
	<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts query set filter failed: %x&quot;, error_code);

error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts db get records with query failed: %x&quot;, error_code);
</pre>
	<p>The third parameter refers to the limit of the results. If 0 is passed, there are no limits. After all operations, release the list.</p>
	</li>
	
	<li>Free the filter and query: 
	<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
	</li>
</ol>
</li>

<li>To iterate the list and read the records, use the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span>, or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> function. Get the details of each record in the loop.


  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td> 
    </tr> 
   </tbody> 
  </table> 

<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int type;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_phone_log.log_type, &amp;type);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;log type: %d&quot;, type);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>

<p>To get more details of each record, use the <span style="font-family: Courier New,Courier,monospace">contacts_gl_log_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_log_data_t *gl_log_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_log_data = _create_gl_log_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>The memory for the record data is allocated, and the data is copied from the record by the functions listed further on in this tutorial.</p>
<pre class="prettyprint">
typedef struct 
_contacts_gl_log_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *address;
&nbsp;&nbsp;&nbsp;int log_type;
&nbsp;&nbsp;&nbsp;int log_time;
} contacts_gl_log_data_t;

static void 
_free_gl_log_data(contacts_gl_log_data_t *gl_log_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_log_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_log_data-&gt;address);
&nbsp;&nbsp;&nbsp;free(gl_log_data);
}

static contacts_gl_log_data_t* 
_create_gl_log_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_log_data_t *gl_log_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_log_data = malloc(sizeof(contacts_gl_log_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_log_data, 0x0, sizeof(contacts_gl_log_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.id, &amp;gl_log_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_phone_log.address, &amp;gl_log_data-&gt;address))
&nbsp;&nbsp;&nbsp;{								
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get string failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.log_type, &amp;gl_log_data-&gt;log_type))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_phone_log.log_time, &amp;gl_log_data-&gt;log_time))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts record get integer failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_log_data;
}
</pre>
</li>
<li>After getting the log record, destroy the used structures.
<pre class="prettyprint">
contacts_list_destroy(list, true);</pre></li>
</ol></li></ol>

 <h2 id="pl_delete" name="pl_delete">Deleting a Log</h2>

<p>To delete a log, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log._uri</span> as the first parameter and log ID as the second one:</p>
<pre class="prettyprint">
int log_id = ... // Acquire log ID

error_code = contacts_db_delete_record(_contacts_phone_log._uri, log_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts db delete record failed: %x&quot;, error_code);
</pre>

 <h2 id="insert2" name="insert2">Inserting New Records</h2>

<p>To insert a new record:</p>

<ol>
<li>Create a record.

<p>The basic concept in the Contacts API is a record. A record can be a complex set of data, containing other data. For example, an address record can contain the country, region, and street. Also, the contained data can be a reference to another record. For example, a contact record contains the <span style="font-family: Courier New,Courier,monospace;">address</span> property, which is a reference to an address record. Effectively, a record can be a node in a tree or a graph of relations between records.</p>

<p>Each record type has a special <span style="font-family: Courier New,Courier,monospace;">view</span> structure, which contains identifiers of its properties. For example, the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view describes the properties of the contact record. It contains properties, such as the name, company, and nickname of the contact. A special property in such structures is the URI, which is used to identify the record type. Every view describing a record has this property.</p>

<p>To create a new contact record, create a root record of the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view type:</p>

<pre class="prettyprint">
contacts_record_h hcontact = NULL;

error_code = contacts_record_create(_contacts_contact._uri, &amp;hcontact);
</pre>

<p>Creating a group is similar to creating a record. The only difference is using another view – the group view.</p>
</li>

<li>Set the properties of the newly created record. Almost every property in the contact view is a record itself, so create more records, as needed. The following example shows how to add an address record to a contact.

<ol type="a">
<li>Create a new record.
<p>Use the address view because the added record is an address:</p>

<pre class="prettyprint">
contacts_record_h haddress = NULL;
contacts_record_create(_contacts_address._uri, &amp;haddress);
</pre>
</li>

<li>Set the address record properties (parameters available in the current view):

<pre class="prettyprint">
contacts_record_set_str(haddress, _contacts_address.country, &quot;Korea&quot;);
</pre>
</li>

<li>Add the address record to your contact:

<pre class="prettyprint">
contacts_record_add_child_record(hcontact, _contacts_contact.address, haddress
</pre>
<p>Do not destroy the record handle which is added to another as a child.</p>
</li></ol>
</li>

<li>After setting properties, insert the root record only to the database. You receive the ID of this record in the database.

<pre class="prettyprint">
int id;
error_code = contacts_db_insert_record(hcontact, &amp;id);
</pre>
</li>

<li>Clean up and destroy the record structure:

<pre class="prettyprint">
error_code = contacts_record_destroy(hcontact, true);
</pre>
</li>
</ol>

 <h2 id="get2" name="get2">Getting Record Details</h2>

<p>To find all records and get their details:</p>

<ol>
<li>Get a record handle of a single record when you know its ID:

<pre class="prettyprint">
contacts_record_h record;
const int ID = 2;

contacts_db_get_record(_contacts_contact._uri, ID, &amp;record);
</pre>
</li>

<li>Get record details with the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_*()</span> function with the record handle. The following example gets the contact display name.

<pre class="prettyprint">
char * d_name;
contacts_record_get_str(record, _contacts_contact.display_name, d_name);
free(d_name);
</pre>
</li>

<li>Get child record details.
<p>When using 1 view, you sometimes need details from another view. For example, you get records using the contact view and need to get the first or last name. If you want to get the name, get the record from the name view using the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_child_record_at_p()</span> function.</p>

<pre class="prettyprint">
contacts_record_h child_record;
contacts_record_get_child_record_at_p(record, _contacts_contact.name, 0, &amp;child_record);
// In the child_record, you have the record form name view
char *f_name;
contacts_record_get_str(record, _contacts_name.first_name, f_name);
free(f_name);
</pre>
</li>

<li>Get parent record details.
<p>When using the child view, you sometimes need to get details of the parent. For example, you get records using the name view and want to know whether the contact has an email address. To get the parent details, get its ID in almost every view with <span style="font-family: Courier New,Courier,monospace;">contact_id</span>. After that, get the parent record.</p>

<pre class="prettyprint">
contacts_record_h parent_record;
int parent_id;
contacts_record_get_int(record, _contacts_name.contact_id, &amp;parent_id);
contacts_db_get_child_record(_contacts_contact._uri, parent_id, &amp;parent_record);
// In the parent_record, get bool
bool h_email;
contacts_record_get_bool(parent_record, _contacts_contact.has_email, &amp;h_email);
</pre>
</li>

<li>Get details through a structure:
<ol type="a"><li><p>For more record details, use a structure to get them.</p>
<p>The memory for the record data is allocated and the data is copied from the record by functions listed in the following step.</p>

<pre class="prettyprint">
gldata = _create_gl_data(record);
char * number = gldata-&gt;number;

typedef struct 
_contact_gl_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *first;
&nbsp;&nbsp;&nbsp;char *last;
&nbsp;&nbsp;&nbsp;char *number;
&nbsp;&nbsp;&nbsp;char *image_path;
} contact_gl_data_t;

static contact_gl_data_t*
_create_gl_data(contacts_record_h r_contact)
{
&nbsp;&nbsp;&nbsp;contact_gl_data_t *data;
&nbsp;&nbsp;&nbsp;data = malloc(sizeof(contact_gl_data_t));
&nbsp;&nbsp;&nbsp;memset(data, 0x0, sizeof(contact_gl_data_t));

&nbsp;&nbsp;&nbsp;if (! _get_contact_id(r_contact, &amp;data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!_get_contact_number(r_contact, &amp;data-&gt;number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_first(r_contact, &amp;data-&gt;first))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_last(r_contact, &amp;data-&gt;last))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;first);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_image(r_contact, &amp;data-&gt;image_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;first);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;last);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return data;
}
</pre>
</li>

<li>Retrieve record data into the structure.
<p>Contacts are organized in a parent-child structure. To access specified data from a record, get the child responsible for the requested type using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function. For the property lists, see <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">View/Property</a>. Do not pass any data returned by a function with the <span style="font-family: Courier New,Courier,monospace;">_p</span> suffix to the <span style="font-family: Courier New,Courier,monospace;">free()</span> function.</p>

<ul><li><p>To get the name details, get the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact.name</span> (representing the child) from the <span style="font-family: Courier New,Courier,monospace;">r_contact</span> parent. Both structures have the <span style="font-family: Courier New,Courier,monospace;">contacts_record_h</span> type. After obtaining a child record, get the desired data from it using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_str()</span> function.</p>

<pre class="prettyprint">
static bool 
_get_contact_last(contacts_record_h r_contact, char **last)
{
&nbsp;&nbsp;&nbsp;contacts_record_h r_name;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact,  _contacts_contact.name, 0, &amp;r_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_name, _contacts_name.last, last);
}
</pre></li>

<li><p>Obtain the record ID directly from the parent record. An ID is a unique number representing the record key in the database. You can manipulate a record with functions, such as <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_record()</span> or <span style="font-family: Courier New,Courier,monospace;">contacts_db_delete_records()</span>, if you know their ID.</p>

<pre class="prettyprint">
static bool 
_get_contact_id(contacts_record_h r_contact, int *id)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(r_contact, _contacts_contact.id, id);

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li><p>To get a contact number, check whether it exists using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_bool()</span> function. If it exists, use the various <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__QUERY__MODULE.html">Query</a> and <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__FILTER__MODULE.html">Filter</a> functions from the Contacts API to make a query to get a list. At the end, free any data returned by a function not containing the <span style="font-family: Courier New,Courier,monospace;">_p</span> suffix.</p>
<ul><li>Get a list of all numbers and filter the list to get the default:
<pre class="prettyprint">
static bool 
_get_contact_number(contacts_record_h r_contact, char **number)
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h r_number;
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;
&nbsp;&nbsp;&nbsp;contacts_list_h list = NULL;

&nbsp;&nbsp;&nbsp;if (!_get_contact_id(r_contact, &amp;id))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;bool has_number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_bool(r_contact, _contacts_contact.has_phonenumber, &amp;has_number);

&nbsp;&nbsp;&nbsp;error_code = contacts_query_create(_contacts_number._uri, &amp;query);

&nbsp;&nbsp;&nbsp;unsigned int fields[] = {_contacts_number.number};
&nbsp;&nbsp;&nbsp;error_code = contacts_query_set_projection(query, fields, 1);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_create(_contacts_number._uri, &amp;filter);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_int(filter, _contacts_number.contact_id, CONTACTS_MATCH_EXACTLY, id);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_bool(filter, _contacts_number.is_default, true);

&nbsp;&nbsp;&nbsp;error_code = contacts_query_set_filter(query, filter);

&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_records_with_query(query, 0, 1, &amp;list);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_get_current_record_p(list, &amp;r_number);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_number, _contacts_number.number, number);

&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);
&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_list_destroy(list, true);
}
</pre></li>

<li><p>Directly access the default number:</p>

<pre class="prettyprint">
static bool 
_get_contact_number(contacts_record_h r_contact, char **number)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h r_number;

&nbsp;&nbsp;&nbsp;bool has_number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_bool(r_contact, _contacts_contact.has_phonenumber, &amp;has_number);

&nbsp;&nbsp;&nbsp;if (!has_number)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*number = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact, _contacts_contact.number, 0, &amp;r_number);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_number, _contacts_number.number, number);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
<p>To get a second number, change the third parameter (<span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p</span>) from 0 to 1.</p></li></ul></li>


<li><p>Obtain an image directly from the parent record:</p>

<pre class="prettyprint">
static bool 
_get_contact_image(contacts_record_h r_contact, char **image_path)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_contact, _contacts_contact.image_thumbnail_path, image_path);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Thumb path: \&#39;%s\&#39;&quot;, *image_path);

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li><p>Get the first name as the last name:</p>

<pre class="prettyprint">
static bool 
_get_contact_first(contacts_record_h r_contact, char **first)
{
&nbsp;&nbsp;&nbsp;contacts_record_h r_name;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact, _contacts_contact.name, 0, &amp;r_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_name, _contacts_name.first, first);
}
</pre></li></ul>
</li></ol></li>

<li>Clean up.
<ol type="a"><li><p>Destroy the <span style="font-family: Courier New,Courier,monospace;">contacts_list_h</span> list.</p>
<p>When the access to the database is no longer needed, disconnect from the service using the <span style="font-family: Courier New,Courier,monospace;">contact_disconnect()</span> function.</p>

<pre class="prettyprint">
error_code = contacts_list_destroy(list, true);

error_code = contacts_disconnect();
</pre></li>

<li><p>Destroy all other used handles as well:</p>

<pre class="prettyprint">
contacts_query_destroy(query); // If query has been used
contacts_filter_destroy(filter); // If filter has been used
</pre></li></ol>
</li>
</ol>

 <h2 id="list2" name="list2">Handling Lists</h2>

<p>To access multiple records using lists and contact property filters, and to sort records:</p>

<ol>
<li>Get a record list.
<ul><li>Get all records in a result list with the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_all_records()</span> function. After all operations, the list must be released with the <span style="font-family: Courier New,Courier,monospace;">contacts_list_destroy()</span> function.

<pre class="prettyprint">
contacts_list_h list = NULL;

contacts_db_get_all_records(_contacts_contact._uri, 0, 0, &amp;list);
</pre>
</li>
<li>Filter and get specific records:
<ol type="a">
<li>Create a query for a list.
<p>To filter or sort records, you need a record list and query:</p>

<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

contacts_query_create(_contacts_name._uri, &amp;query);
</pre>
</li>

<li>Create a filter for the query.
<p>Before getting contacts, filter the list. It is possible to filter by various parameters, such as the name view.</p>

<pre class="prettyprint">
contacts_filter_h filter = NULL;

contacts_filter_create (_contacts_name._uri, &amp;filter);
</pre>

<p>The first parameter defines in which view to place the filter. To filter by the first and last name, use the <span style="font-family: Courier New,Courier,monospace;">_contacts_name</span> filter. The first parameter of the <span style="font-family: Courier New,Courier,monospace;">contacts_query_create()</span> function must be the same parameter as in the filter to be appended. For more information on views, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">View/Property</a> tables.</p></li>

<li><p>Add a condition, such as the following where only contacts beginning with &quot;Za&quot; are shown:</p>

<pre class="prettyprint">
contacts_filter_add_str(filter, _contacts_name.last_name, CONTACTS_MATCH_CONTAINS, &quot;Za&quot;);
</pre>

<p>To receive contacts which starts by a given string, the <span style="font-family: Courier New,Courier,monospace;">CONTACTS_MATCH_CONTAINS</span> parameter has to be set. Use the parameter if you need to get records which contain the given string anywhere.</p></li>

<li><p>To add more conditions, add operators between them. In this case, define the operator between conditions first.</p>

<pre class="prettyprint">
contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);
</pre>

<p>After that you can add another condition. If you need to use a logic expression &quot;C1 AND (C2 OR C3)&quot;, conditions 2 and 3 must be in another filter to have logical brackets. The following example shows a filter that passes through contacts with a first name starting with &quot;Ada&quot; or &quot;Igo&quot;.</p>

<pre class="prettyprint">
contacts_filter_h n_filter = NULL;
contacts_filter_create (_contacts_name._uri, &amp;n_filter);
contacts_filter_add_str(n_filter, _contacts_name.first_name, CONTACTS_MATCH_STARTSWITH, &quot;Ada&quot;);
contacts_filter_add_operator(n_filter, CONTACTS_FILTER_OPERATOR_OR);
contacts_filter_add_str(n_filter, _contacts_name.first_name, CONTACTS_MATCH_STARTSWITH, &quot;Igo”&quot;);
</pre></li>

<li><p>To add an extra filter to a parent filter:</p>

<pre class="prettyprint">
contacts_filter_add_filter(filter, n_filter);
</pre>

<p>The parent filter passes through contacts with a last name beginning with &quot;Za&quot; and a first name starting with &quot;Ada&quot; or &quot;Igo&quot;.</p></li>
<li><p>Connect a filter with query:</p>

<pre class="prettyprint">
contacts_query_set_filter(query, filter);
</pre></li></ol></li></ul>
</li>

<li>Sort a record list by any of its view details:

<pre class="prettyprint">
contacts_query_set_sort(query, _contacts_name.first, true);
</pre>

<p>The first parameter is the query to be filtered, the second is the property to sort, and the last sets the ascending order.</p>
</li>

<li>Set a projection to a list.
<p>A projection allows you to query the data for specific properties of a record. It can reduce latency in case of a large database.</p>
<p>To set the projection, use the <span style="font-family: Courier New,Courier,monospace;">contacts_query_set_projection()</span> function. The following example limits the properties from the previous steps to the first and last name.</p>

<pre class="prettyprint">
unsigned my_projection[] = {_contacts_name.contact_id, _contacts_name.first, _contacts_name.last}
contacts_query_set_projection(query, my_projection, sizeof(my_projection)/sizeof(int));
</pre>

<p>After filtering, such as getting numbers, there can be several records which differ only in a few detail types. When setting the projection, the results can contain identical records. To avoid these situations, use the distinction function.</p>

<pre class="prettyprint">
contacts_query_set_distinct(query, true);
</pre>
</li>

<li>Get the record list with a query:

<pre class="prettyprint">
contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>

<p>The third parameter refers to limiting results. If 0 is passed, there are no limits. Release the list after all the operations.</p>
</li>

<li id="iterate_l" name="iterate_l">Iterate on the list and read the records.
<p>The <span style="font-family: Courier New,Courier,monospace;">contacts_list_get_current_record_p()</span> function retrieves a record from the contacts list. The current default record is the first record.</p>

<p>To iterate on a list, use the <span style="font-family: Courier New,Courier,monospace;">contacts_list_prev()</span>, <span style="font-family: Courier New,Courier,monospace;">contacts_list_next()</span>, <span style="font-family: Courier New,Courier,monospace;">contacts_list_first()</span>, and <span style="font-family: Courier New,Courier,monospace;">contacts_list_last()</span> functions.</p>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace;">_p</span> postfix. It means that the returned value must not be freed by the application, as it is a pointer to data in an existing record.</td>
    </tr>
   </tbody>
  </table>

<p>To read records:</p>

<ul><li>To get only a few details:

<pre class="prettyprint">
contacts_record_h record;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;// Get details
&nbsp;&nbsp;&nbsp;char * disp_name;
&nbsp;&nbsp;&nbsp;contacts_record_get_str(record, _contacts_contact.display_name, &amp;disp_name);
&nbsp;&nbsp;&nbsp;free(disp_name);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre></li>

<li><p>To get more details, use the following example, where the obtained records are passed to the <span style="font-family: Courier New,Courier,monospace;">_create_gl_data()</span> function for further processing:</p>

<pre class="prettyprint">
contacts_record_h record;
contact_gl_data_t *gldata = NULL;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;gldata = _create_gl_data(record);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre></li>

<li><p>The previous examples work if you use the default (<span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span>) view. If you use filtering in another view as shown in the filter example, and you want to use this structure (change view to default), use the following code.</p>

<pre class="prettyprint">
contacts_record_h record;
contact_gl_data_t *gldata = NULL;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;int record_id;
&nbsp;&nbsp;&nbsp;contacts_record_h c_record;
&nbsp;&nbsp;&nbsp;contacts_record_get_int(record, _contacts_name._uri, &amp;contact_id);
&nbsp;&nbsp;&nbsp;contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;c_record);
&nbsp;&nbsp;&nbsp;gldata = _create_gl_data(c_record);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>

<p>This way it is possible to switch to the default view from another view (in a similar manner to the above example <span style="font-family: Courier New,Courier,monospace;">_contacts_name</span>).</p></li></ul>
</li>

<li>Insert the list to the database.
<p>You can insert a whole list to the database. This can be useful when you have several records to create and you want to insert them all at once.</p>

<ol type="a">
<li>If you have a list, use it or create a new one:

<pre class="prettyprint">
contacts_list_h list;
contacts_list_create(&amp;list);
</pre>
</li>

<li>Add records to the list:

<pre class="prettyprint">
contacts_list_add (list, record);
</pre>
</li>

<li>Insert the list into the database:

<pre class="prettyprint">
int *ids = NULL;
unsigned int count = 0;
contacts_db_insert_records(list, &amp;ids, &amp;count);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;%d records inserted&quot;, count);
free(ids);
</pre>

<p>This inserts the entire list to the database and gets the IDs of the inserted records.</p>
</li>

<li>Destroy the list:

<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>
</ol>
</li>
</ol>

 <h2 id="delete2" name="delete2">Deleting Records</h2>

<p>To delete records from the contacts database, you need to know their ID:</p>

<pre class="prettyprint">
int id;
// Get the ID
int error = contacts_db_delete_record(_contacts_contact._uri, id);
</pre>

<p>If you only have the record handle, get the ID first:</p>

<pre class="prettyprint">
contacts_record_get_int(record, _contacts_contact.id, &amp;id);
</pre>

 <h2 id="link2" name="link2">Linking Persons</h2>

<p>To link persons (a useful joining method if there are several contacts assigned to one person):</p>

<ol>
<li>Link a person to another person.
<p>To link persons with the <span style="font-family: Courier New,Courier,monospace;">contacts_person_link_person()</span> function, you need the person ID. To get the person ID, use the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_int()</span> function.</p>

<pre class="prettyprint">
int first_person_id;
contacts_record h record1;
// Get the first record
int error_code = contacts_record_get_int(record1, _contacts_contact.person_id, &amp;first_person_id);

contacts_record h record2;
// Get the second record
error_code = contacts_record_get_int(record2, _contacts_contact.person_id, &amp;second_person_id);

contacts_person_link_person(first_person_id, second_person_id);
</pre>

<p>This links the 2 contacts available through record handles.</p>
</li>

<li>Set the default properties.
<p>Set the default values from one of the linked contacts with the <span style="font-family: Courier New,Courier,monospace;">contacts_person_set_default_property()</span> function. The first parameter determines the detail to be set using the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__PERSON__MODULE.html#ga641465951ce76daa56bb430b37cc8d90">contacts_person_property_e</a> enum.</p>

<p>To set a default number from one of the persons, you have to know its ID. Get the detail ID using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function, because you need to get the value from the <span style="font-family: Courier New,Courier,monospace;">_contact_number</span> view.</p>

<pre class="prettyprint">
contacts_record_h record;
int record_number = -1;
// Get the record handle
contacts_record_h record_number;
error_code = contacts_record_get_child_record_at_p(record, _contacts_contact.number, 0, &amp;record_number);

error_code = contacts_record_get_int(record_number, _contacts_number.id, &amp;number_id);

error_code = contacts_record_destroy(record_number, true);

// Use the record_number variable
error_code = contacts_person_set_default_property(CONTACTS_PERSON_PROPERTY_NUMBER, person_id, number_id);
</pre>
</li>

<li>Get default property values of a person with the <span style="font-family: Courier New,Courier,monospace;">contacts_person_get_default_property()</span> function:

<ol type="a"><li><p>Get the ID of the default email details:</p>

<pre class="prettyprint">
int person_email_number;
error_code = contacts_person_get_default_property(CONTACTS_PERSON_PROPERTY_EMAIL, person_id, &amp;person_email_number);
</pre></li>

<li><p>Get the default email: </p>

<pre class="prettyprint">
int person_email_detail_number;
error_code = contacts_person_get_default_property(CONTACTS_PERSON_PROPERTY_EMAIL, person_id, &amp;person_email_number);

contacts_record_h email_record;
error_code = contacts_db_get_record(_contacts_email._uri, person_email_detail_number, &amp;email_record);
char * default_email;

error_code = contacts_record_get_str_p(email_record, _contacts_email.email, &amp;default_email);

// Use default_email

error_code = contacts_record_destroy(email_record, true);
</pre></li></ol>
</li>

<li>Unlink persons using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_unlink_contact()</span> function:

<ol type="a"><li><p>If you have the record handle, get the contact ID: </p>

<pre class="prettyprint">
int person_id;
contacts_record_get_int(record, _contacts_contact.id, &amp;person_id);
</pre></li>

<li><p>Unlink a contact from another and get its ID:</p>

<pre class="prettyprint">
int unlinked_person_id;
int contacts_person_unlink_contact(person_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contact_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;unlinked_person_id)
</pre></li></ol>
</li>
</ol>

 <h2 id="settings" name="settings">Managing Contact Settings</h2>

<p>To manage the display settings of contacts:</p>

<ol>
<li>Check the current display order (the order in which the names are displayed) using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_get_name_display_order()</span> function, and the sorting order using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_get_name_sorting_order()</span> function:

<pre class="prettyprint">
contacts_name_display_order_e display_order;
contacts_setting_get_name_display_order(&amp;display_order);
// Now you have the display order
sprintf(&quot;Display order: %s&quot;, display_order==CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST?&quot;CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST&quot;:&quot;CONTACTS_NAME_DISPLAY_ORDER_LASTFIRST&quot;);

contacts_name_sorting_order_e sorting_order;
contacts_setting_get_name_sorting_order(&amp;sorting_order);
// Now you have the sorting order
sprintf(&quot;Sorting order: %s&quot;, sorting_order==CONTACTS_NAME_SORTING_ORDER_FIRSTLAST?&quot;CONTACTS_NAME_SORTING_ORDER_FIRSTLAST&quot;:&quot;CONTACTS_NAME_SORTING_ORDER_LASTFIRST&quot;);
</pre>
</li>

<li>Change the display and sorting orders using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_set_name_display_order()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_set_name_sorting_order()</span> functions:

<pre class="prettyprint">
contacts_setting_set_name_display_order(CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST);

contacts_setting_set_name_sorting_order(CONTACTS_NAME_SORTING_ORDER_FIRSTLAST);
</pre>
</li>

<li>Track the changes in the display and sorting orders:
<ol type="a"><li>Register callbacks with the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_add_name_display_order_changed_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_add_name_sorting_order_changed_cb()</span> functions. </li>
<li>Define the callbacks themselves:
<pre class="prettyprint">
static void 
display_changed_cb(contacts_name_display_order_e name_display_order, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;changed display order: %s&quot;, name_display_order==CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST?&quot;CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST&quot;:&quot;CONTACTS_NAME_DISPLAY_ORDER_LASTFIRST&quot;);
}

static void 
sorting_changed_cb(contacts_name_sorting_order_e name_display_order, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;changed sorting order: %s&quot;, name_display_order==CONTACTS_NAME_SORTING_ORDER_FIRSTLAST?&quot;CONTACTS_NAME_SORTING_ORDER_FIRSTLAST&quot;:&quot;CONTACTS_NAME_SORTING_ORDER_LASTFIRST&quot;);
}
</pre>
<p>The above examples cause a message to be printed when the order changes. To track the changes, write a timeout function after setting the callback.</p></li>
<li>Unregister the callbacks when they are no longer needed using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_remove_name_display_order_changed_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_remove_name_sorting_order_changed_cb()</span> functions.</li></ol>

</li>
</ol>

 <h2 id="sim" name="sim">Managing Contacts on the SIM Card</h2>

<p>To check whether the SIM card is initialized and then import contacts from the SIM card:</p>
<ol>
<li>Before using any SIM card methods, ensure that the SIM card initialization is complete:

<pre class="prettyprint">
bool completed = false;
contacts_sim_get_initialization_status(&amp;completed);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;SIM %s completed&quot;, completed?&quot;&quot;:&quot;not &quot;);
</pre></li>

<li>When the contacts from the SIM card are available, import them:

<pre class="prettyprint">
int err = contacts_sim_import_all_contacts();
</pre>
</li>

</ol>

 <h2 id="import" name="import">Importing from vCard</h2>

<p>To import contacts from all vCard files from a specified directory:</p>

<ul>
<li>Get contact records from a stream.
<p>To receive a records list from the vCard stream, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contacts()</span> function. Afterwards, the received list is ready to use and you can perform the iteration on the list.</p>

<p>The following example uses the stream in the vCard format and gets the records from the received list.</p>

<pre class="prettyprint">
char * vcard_stream;
// Get vCard stream
contacts_list_h contacts_list;
int err = contacts_vcard_parse_to_contacts(vcard_stream, contacts_list);

while (contacts_list_get_current_record_p(list_import, &amp;record) == 0) 
{
&nbsp;&nbsp;&nbsp;// Get next records from file
&nbsp;&nbsp;&nbsp;err = contacts_list_next(list_import);
}
err = contacts_list_destroy(list_import, true);
</pre>

<p>You can also use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contact_foreach()</span> function. With this function, you have to get the file content manually, and it needs a callback.</p>

<pre class="prettyprint">
bool 
contacts_vcard_cb(contacts_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Here you have a record
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The callback is called for each record from a vCard file. The iteration continues as long as the callback returns <span style="font-family: Courier New,Courier,monospace;">true</span>.</p>

<p>To check how many records are contained in a vCard file, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_get_entity_count()</span> function.</p>

</li>

<li>Import the vCard stream.
<ul><li><p>Get all the files with a <span style="font-family: Courier New,Courier,monospace;">.vcf</span> extension from the directory. It can be done through dirent structures available in the <span style="font-family: Courier New,Courier,monospace;">&lt;dirent.h&gt;</span> header. The following example gets the path to every file in a directory.</p>

<pre class="prettyprint">
int internal_storage_id;
char *vcf_path = NULL;

static bool 
storage_cb(int storage_id, storage_type_e type, storage_state_e state, const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}

void 
_get_storage_path()
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;error_code = storage_foreach_device_supported(storage_cb, NULL);
&nbsp;&nbsp;&nbsp;error_code = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_DOWNLOADS, &amp;path);
&nbsp;&nbsp;&nbsp;if (error_code != STORAGE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vcf_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;}
}

void 
_import_vcard()
{
&nbsp;&nbsp;&nbsp;int path_len = 0;

&nbsp;&nbsp;&nbsp;DIR *dir = opendir(vcf_path);
&nbsp;&nbsp;&nbsp;struct dirent *pDirent = NULL;
&nbsp;&nbsp;&nbsp;if (NULL == dir)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(vcf_path);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;while ((pDirent = readdir(dir)) != NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pDirent-&gt;d_type != DT_REG)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *extension = strrchr(pDirent-&gt;d_name, &#39;.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!extension || strcmp(extension, &quot;.vcf&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char * filepath = malloc(strlen(vcf_path)+strlen(pDirent-&gt;d_name)+4);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(filepath, &quot;%s/%s&quot;, vcf_path, pDirent-&gt;d_name);
        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Full path to file available through filepath string

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(filepath);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li><p>If you use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contacts()</span> function, you need to get the file stream manually. The following example shows how to get a records list from a file.</p>

<pre class="prettyprint">
FILE *fp = fopen(filepath, &quot;r&quot;);
fseek(fp, 0, 2);
int bufsize = ftell(fp);
rewind(fp);
if (bufsize &lt; 1)
&nbsp;&nbsp;&nbsp;return 1;

char * vcard_stream = malloc(sizeof(char) * (bufsize));
memset(vcard_stream, &#39;\0&#39;, sizeof(vcard_stream));
if (fp != NULL) 
{
&nbsp;&nbsp;&nbsp;char str[200];
&nbsp;&nbsp;&nbsp;while(fgets(str, 200, fp) != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(vcard_stream+strlen(vcard_stream), &quot;%s&quot;, str);
&nbsp;&nbsp;&nbsp;fclose(fp); 
} 
else
&nbsp;&nbsp;&nbsp;// Error handling
int err = contacts_vcard_parse_to_contacts(vcard_stream, contacts_list);
free(vcard_stream);
</pre></li>

<li><p>You can also use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contact_foreach()</span> function. It requires a callback and retrieves the file path instead of a file stream.</p>

<pre class="prettyprint">
bool 
contacts_vcard_cb(contacts_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Here you have a record
&nbsp;&nbsp;&nbsp;return true;
}

err = contacts_vcard_parse_to_contact_foreach (filepath, contacts_vcard_cb, NULL);
</pre></li>

<li><p>Add a record in  a callback function:</p>

<pre class="prettyprint">
int id = -1;
err = contacts_db_insert_record(record, &amp;id);
</pre></li></ul>

<p>The following example represents the full code of the previous step.</p>

<pre class="prettyprint">
char []folder = &quot;/path/&quot;;
contacts_list_h list_import;
contacts_record_h record;
err = contacts_vcard_parse_to_contacts(content, &amp;list_import);

while (contacts_list_get_current_record_p(list_import, &amp;record) == 0) 
{
&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;err = contacts_db_insert_record(record, &amp;id); // Add to list

&nbsp;&nbsp;&nbsp;contacts_list_next(list_import);
}

DIR *dir = opendir(folder);
struct dirent *pDirent = NULL;
if (dir) 
{
&nbsp;&nbsp;&nbsp;while ((pDirent = readdir(dir)) != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pDirent-&gt;d_type != DT_REG)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *exte = strrchr(pDirent-&gt;d_name, &#39;.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!exte || strcmp(exte, &quot;.vcf&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;file %s&quot;, pDirent-&gt;d_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char * file_path = malloc(strlen(folder)+strlen(pDirent-&gt;d_name)+4);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(file_path, &quot;%s/%s&quot;, folder, pDirent-&gt;d_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_vcard_get_entity_count(file_path, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Number of records in file: count
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count &lt; 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE * fp = fopen(file_path, &quot;r&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fseek(fp, 0, 2) != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int bufsize = ftell(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rewind(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;file size: %i&quot;, bufsize); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bufsize &lt; 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char * vcard_stream = malloc(sizeof(char) * (bufsize));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(vcard_stream, &#39;\0&#39;, sizeof(vcard_stream));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fp != NULL) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char str[150];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(fgets(str, 150, fp) != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(vcard_stream+strlen(vcard_stream), &quot;%s&quot;, str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Import the contacts
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_list_h list_import;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err = contacts_vcard_parse_to_contacts(vcard_stream, &amp;list_import);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (err != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_vcard_parse_to_contacts failed: %d&quot;, err);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(vcard_stream);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(list_import, &amp;record) == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err = contacts_db_insert_record(record, &amp;id); // Add to list
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (err != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_list_add failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err = contacts_list_next(list_import);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;err = contacts_list_destroy(list_import, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (err != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_list_destroy failed: %d&quot;, err);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free (file_path);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;closedir(dir);
}
</pre>
</li>
</ul>

 <h2 id="export" name="export">Exporting to vCard</h2>

<p>To export your contacts to a vCard file:</p>

<ol>
<li>Export contacts to a file.
<ul><li><p>To export a contact from the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view to the vCard format, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_contact()</span> function.</p></li>


<li><p>To export details from the <span style="font-family: Courier New,Courier,monospace;">_contacts_person</span> view, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_person()</span> function. If you need to export details from the <span style="font-family: Courier New,Courier,monospace;">_contacts_my_profile</span> view, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_my_profile()</span> function.</p></li></ul>

<p>The following example uses the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view, but the use of the other views is the same.</p>

<pre class="prettyprint">
contacts_record_h contact;
// Get record to contacts_record_h
char *vcard_stream;
int err = contacts_vcard_make_from_contact(contact, &amp;vcard_stream);

// Stream in vCard format is now in vcard_stream
free(vcard_stream);
</pre></li>

<li><p>Write to a file:</p>

<pre class="prettyprint">
FILE * file = fopen(&quot;/path/contacts.vcf&quot;, &quot;w&quot;);
fwrite(vcard_stream, 1, strlen(vcard_stream), file);
fclose(file);
</pre></li></ol>


<p>The following example shows how to get all records from a database and put them into a single file.</p>
<p>Get the list of all records using the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_all_records()</span> function and the current records using the <span style="font-family: Courier New,Courier,monospace;">contacts_list_get_current_record_p()</span> function. Get the vCard stream and write to the file in a <span style="font-family: Courier New,Courier,monospace;">while</span> loop.</p>

<pre class="prettyprint">
char file_path[] = &quot;/path/contacts.vcf&quot;;
contacts_list_h list = NULL;
err = contacts_db_get_all_records(_contacts_contact._uri, 0, 0, &amp;list);

contacts_record_h record;
FILE * file = fopen(file_path, &quot;w&quot;);

while (contacts_list_get_current_record_p(list, &amp;record) == 0) 
{
&nbsp;&nbsp;&nbsp;err = contacts_vcard_make_from_contact(record, &amp;vcard_stream);
&nbsp;&nbsp;&nbsp;// Save to file
&nbsp;&nbsp;&nbsp;fwrite(vcard_stream, 1, strlen(vcard_stream), file);
&nbsp;&nbsp;&nbsp;free(vcard_stream);
&nbsp;&nbsp;&nbsp;err = contacts_list_next(list);
}
fclose(file);
contacts_list_destroy(list, true);
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>