<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Contacts: Managing Contacts and Groups, and Accessing the Contact Database</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#init">Initializing Contacts</a></li>
            <li>Contacts
                <ul class="toc">
                    <li><a href="#create_contact">Creating a Contact</a></li>
                    <li><a href="#get_contact">Retrieving Persons</a></li>
                    <li><a href="#update_contact">Updating a Contact</a></li>
                    <li><a href="#delete_contact">Deleting a Person</a></li>
                    <li><a href="#link_contact">Linking and Unlinking Persons and Contacts</a></li>
                    <li><a href="#manage_contact">Managing Favorites</a></li>
                    <li><a href="#monitor_contact">Monitoring Person Changes</a></li>
                </ul>
            </li>
            <li>Groups
                <ul class="toc">
                    <li><a href="#create">Creating a Group</a></li>
                    <li><a href="#get">Retrieving Groups</a></li>
                    <li><a href="#update">Updating a Group</a></li>
                    <li><a href="#delete">Deleting a Group</a></li>
                    <li><a href="#manage">Managing Group Members</a></li>
                    <li><a href="#monitor">Monitoring Group Changes</a></li>
                </ul>
            </li>
            <li>vCards
                <ul class="toc">
                    <li><a href="#make">Creating a vCard</a></li>
                    <li><a href="#parse">Parsing a vCard</a></li>
                </ul>
            </li>
            <li>Speed dials
                <ul class="toc">
                    <li><a href="#sd_create">Creating a Speed Dial</a></li>
                    <li><a href="#sd_get">Retrieving Speed Dials</a></li>
                    <li><a href="#sd_update">Updating a Speed Dial</a></li>
                    <li><a href="#sd_delete">Deleting a Speed Dial</a></li>
                </ul>
            </li>
            <li>Logs
                <ul class="toc">
                    <li><a href="#pl_create">Creating a Log</a></li>
                    <li><a href="#pl_get">Retrieving Logs</a></li>
                    <li><a href="#pl_delete">Deleting a Log</a></li>
                </ul>
            </li>
            <li>Records
                <ul class="toc">
                    <li><a href="#insert2">Creating a Record</a></li>
                    <li><a href="#get2">Retrieving Record Details</a></li>
                    <li><a href="#list2">Using Record Lists</a></li>
                    <li><a href="#delete2">Deleting a Record</a></li>
                    <li><a href="#link2">Linking Persons</a></li>
                </ul>
            </li>
            <li>Contact settings
                <ul class="toc">
                    <li><a href="#settings">Managing Contact Settings</a></li>
                    <li><a href="#sim">Importing Contacts from the SIM Card</a></li>
                </ul>
            </li>
            <li>vCard information
                <ul class="toc">
                    <li><a href="#import">Importing from vCard</a></li>
                    <li><a href="#export">Exporting to vCard</a></li>
                </ul>
            </li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.guides/html/native/social/contact_n.htm">Contacts Guide</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Contacts: Managing Contacts and Groups, and Accessing the Contact Database</h1>

<p>This tutorial demonstrates how you can manage contacts and groups, and import and export them to and from the vCard format.</p>

<p>This feature is supported in mobile applications only.</p>

  <h2 id="prerequisites" name="prerequisites">Prerequisites</h2>
  <p>To use the contacts API, the application has to request permission by adding the corresponding privileges to the tizen-manifest.xml file.</p>
  <pre class="prettyprint">
  &lt;privileges&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/contact.read&lt;/privilege&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/contact.write&lt;/privilege&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/callhistory.read&lt;/privilege&gt;
  &nbsp;&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/callhistory.write&lt;/privilege&gt;
  &lt;/privileges&gt;</pre>

<h2>Warm-up</h2>

<p>Become familiar with the Contacts API basics by learning about:</p>

<ul>
    <li><p><a href="#init">Initializing Contacts</a></p>
        <p>Initialize the contacts service for use.</p></li>
    <li><p>Contacts</p>
        <ul>
            <li><p><a href="#create_contact">Creating a Contact</a></p>
                <p>Create a new contact, set its properties, and insert it into the contact database.</p></li>
            <li><p><a href="#get_contact">Retrieving Persons</a></p>
                <p>Retrieve a single person or multiple persons.</p></li>
            <li><p><a href="#update_contact">Updating a Contact</a></p>
                <p>Update contact details.</p></li>
            <li><p><a href="#delete_contact">Deleting a Person</a></p>
                <p>Delete a person from the contact database.</p></li>
            <li><p><a href="#link_contact">Linking and Unlinking Persons and Contacts</a></p>
                <p>Link and unlink persons and contacts.</p></li>
            <li><p><a href="#manage_contact">Managing Favorites</a></p>
                <p>Set or unset a person as a favorite.</p></li>
            <li><p><a href="#monitor_contact">Monitoring Person Changes</a></p>
                <p>Receive a notification whenever the details of a person change.</p></li>
        </ul>
    </li>
    <li><p>Groups</p>
        <ul>
            <li><p><a href="#create">Creating a Group</a></p>
                <p>Create a new group, set its properties, and insert it into the contact database.</p></li>
            <li><p><a href="#get">Retrieving Groups</a></p>
                <p>Retrieve a single group or multiple groups.</p></li>
            <li><p><a href="#update">Updating a Group</a></p>
                <p>Update group details.</p></li>
            <li><p><a href="#delete">Deleting a Group</a></p>
                <p>Delete a group from the contact database.</p></li>
            <li><p><a href="#manage">Managing Group Members</a></p>
                <p>Add, remove, and retrieve group members.</p></li>
            <li><p><a href="#monitor">Monitoring Group Changes</a></p>
                <p>Receive a notification whenever the details of a group change.</p></li>
        </ul>
    </li>
    <li><p>vCards</p>
        <ul>
            <li><p><a href="#make">Creating a vCard</a></p>
                <p>Create a vCard stream from a person record.</p></li>
            <li><p><a href="#parse">Parsing a vCard</a></p>
                <p>Parse a vCard from a file and insert its contents into the contact database.</p></li>
        </ul>
    </li>
    <li><p>Speed dials</p>
        <ul>
            <li><p><a href="#sd_create">Creating a Speed Dial</a></p>
                <p>Create a new speed dial, set its properties, and insert it into the contact database.</p></li>
            <li><p><a href="#sd_get">Retrieving Speed Dials</a></p>
                <p>Retrieve a single speed dial or multiple speed dials.</p></li>
            <li><p><a href="#sd_update">Updating a Speed Dial</a></p>
                <p>Update speed dial details.</p></li>
            <li><p><a href="#sd_delete">Deleting a Speed Dial</a></p>
                <p>Delete a speed dial from the contact database.</p></li>
        </ul>
    </li>
    <li><p>Logs</p>
        <ul>
            <li><p><a href="#pl_create">Creating a Log</a></p>
                <p>Create a new log, set its properties, and insert it into the contact database.</p></li>
            <li><p><a href="#pl_get">Retrieving Logs</a></p>
                <p>Retrieve a single log or multiple logs.</p></li>
            <li><p><a href="#pl_delete">Deleting a Log</a></p>
                <p>Delete a log from the contact database.</p></li>
        </ul>
    </li>
</ul>

<h2>Follow-up</h2>

<p>Once we have learned the basics of the Contacts API, we can now move on to more advanced tasks, including:</p>

<ul>
    <li><p>Records</p>
        <ul>
            <li><p><a href="#insert2">Creating a Record</a></p>
                <p>Create a new record, set its properties, and insert it into the contact database.</p></li>
            <li><p><a href="#get2">Retrieving Record Details</a></p>
                <p>Retrieve information from existing records.</p></li>
            <li><p><a href="#list2">Using Record Lists</a></p>
                <p>Retrieve multiple records at the same time using a list, and insert a list into the contact database.</p></li>
            <li><p><a href="#delete2">Deleting a Record</a></p>
                <p>Delete a record from the contact database.</p></li>
            <li><p><a href="#link2">Linking Persons</a></p>
                <p>Link 2 persons, and manage the linked person.</p></li>
        </ul>
    </li>
    <li><p>Contact settings</p>
        <ul>
            <li><p><a href="#settings">Managing Contact Settings</a></p>
                <p>Manage the display and sorting order settings for contacts.</p></li>
            <li><p><a href="#sim">Importing Contacts from the SIM Card</a></p>
                <p>Import contacts from the SIM card.</p></li>
        </ul>
    </li>
    <li><p>vCard information</p>
        <ul>
            <li><p><a href="#import">Importing from vCard</a></p>
                <p>Import contacts from vCard files.</p></li>
            <li><p><a href="#export">Exporting to vCard</a></p>
                <p>Export contacts to vCard files.</p></li>
        </ul>
    </li>
</ul>

<h2 id="init" name="init">Initializing Contacts</h2>

<p>To initialize the contacts service for use:</p>

<ol>

<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;contacts.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;contacts.h&gt;
</pre>
<p>To ensure that a Contacts function has been executed properly, make sure that the return value is equal to <span style="font-family: Courier New,Courier,monospace">CONTACTS_ERROR_NONE</span>. If the function returns an error, handle it accordingly.</p>
</li>

<li>
<p>To access the contact database, connect to the contacts service using the <span style="font-family: Courier New,Courier,monospace">contacts_connect()</span> function:</p>
<pre class="prettyprint">
int error_code;
error_code = contacts_connect();
</pre>
</li>

<li>
<p>After you have finished working with the contacts service, disconnect from the service using the <span style="font-family: Courier New,Courier,monospace">contacts_disconnect()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_disconnect();
</pre>
</li>

</ol>

<h2 id="create_contact" name="create_contact">Creating a Contact</h2>

<p>Creating a new contact involves creating a contact handle, setting the contact properties, and inserting the contact into the contact database.</p>

<p>Some contact properties are defined as child records that are associated with the parent record. For a detailed list of the contact properties, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html#CAPI_SOCIAL_CONTACTS_SVC_VIEW_MODULE_contacts_contact">_contacts_contact</a> view description in the Contacts API. If the property type is <span style="font-family: Courier New,Courier,monospace">record</span>, the property is defined as a child record. The property description defines whether a single or multiple child records are allowed for a specific property.</p>

<p>When you create a new contact, the system automatically creates a new person associated with that contact. A person is an aggregation of one or more contacts associated with the same individual. A contact is always associated with a person.</p>

<p>To create a new contact:</p>

<ol>

<li>
<p>Create a contact handle using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_contact._uri</span> property as the first parameter and the contact handle variable as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h contact;

error_code = contacts_record_create(_contacts_contact._uri, &amp;contact);
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Records created with the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function are memory objects, with <span style="font-family: Courier New,Courier,monospace">contacts_record_h</span> type variables as their handles. If you changes these objects, the changes are not reflected in the contact database until you explicitly insert or update the objects to the database using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function.</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>Set the contact properties:</p>
<ul>
<li>
<p>To set the contact&#39;s name:</p>
<ol type="a">
<li>
<p>Create a name record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_name._uri</span> property as the first parameter:</p>
<pre class="prettyprint">
contacts_record_h name;

error_code = contacts_record_create(_contacts_name._uri, &amp;name);
</pre>
</li>
<li>
<p>Set the contact&#39;s first name using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_name.first</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(name, _contacts_name.first, &quot;John&quot;);
</pre>
</li>
<li>
<p>Set the contact&#39;s last name using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_name.last</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(name, _contacts_name.last, &quot;Smith&quot;);
</pre>
</li>
<li>
<p>Set the name record as a child record of the contact record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.name</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_add_child_record(contact, _contacts_contact.name, name);
</pre>
</li>
</ol>
</li>
<li>
<p>To set an image for the contact:</p>
<ol type="a">
<li>
<p>Create an image record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_image._uri</span> property as the first parameter:</p>
<pre class="prettyprint">
contacts_record_h image;

error_code = contacts_record_create(_contacts_image._uri, &amp;image);
</pre>
</li>
<li>
<p>Define the image, and set the image using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_image.path</span> property as the second parameter:</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char caller_id_path[1024];
snprintf(caller_id_path, sizeof(caller_id_path), &quot;%s/caller_id.jpg&quot;, resource_path);
free(resource_path);
error_code = contacts_record_set_str(image, _contacts_image.path, caller_id_path);
</pre>
</li>
<li>
<p>Set the image record as a child record of the contact record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.image</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_add_child_record(contact, _contacts_contact.image, image);
</pre>
</li>
</ol>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">
                <p>To set private images for contacts, the application must meet the following conditions:</p>
                <ul>
                    <li><p>The <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.write</span> privilege must be set in the application manifest file.</p></li>
                    <li><p>The application&#39;s private directory and files must have the <span style="font-family: Courier New,Courier,monospace">read</span> permission for others, such as <span style="font-family: Courier New,Courier,monospace">644</span>. SMACK protects the <span style="font-family: Courier New,Courier,monospace">read</span> permission from other applications.</p></li>
                    <li><p>The application must delete the image after destroying the contact record (using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function).</p></li>
                </ul>
            </td>
        </tr>
    </tbody>
</table>
</li>
<li>
<p>To set an event for the contact:</p>

<p>An event consists of an event type, date, and other properties. You can set various types of events for the contact, as defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__RECORD__MODULE.html#ga434cc4b7cec62ccab70fa4825ce0801d">contacts_event_type_e</a> enumeration. If the event type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_EVENT_TYPE_CUSTOM</span>, you can set a custom label for the event using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_event.label</span> property as the second parameter.</p>

<p>To set a birthday event:</p>

<ol type="a">
<li>
<p>Create an event record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_event._uri</span> property as the first parameter:</p>
<pre class="prettyprint">
contacts_record_h event;

error_code = contacts_record_create(_contacts_event._uri, &amp;event);
</pre>
</li>
<li>
<p>Set the event date using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_event.date</span> property as the second parameter. The date is an integer calculated as year * 10000 + month * 100 + day.</p>
<pre class="prettyprint">
int year = 1990;
int month = 5;
int day = 21;
int int_date = year * 10000 + month * 100 + day;

error_code = contacts_record_set_int(event, _contacts_event.date, int_date);
</pre>
</li>
<li>
<p>Set the event type to birthday using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_event.type</span> property as the second parameter and the <span style="font-family: Courier New,Courier,monospace">CONTACTS_EVENT_TYPE_BIRTH</span> enumerator as the third parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_int(event, _contacts_event.type, CONTACTS_EVENT_TYPE_BIRTH);
</pre>
</li>
<li>
<p>Set the event record as a child record of the contact record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.event</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_add_child_record(contact, _contacts_contact.event, event);
</pre>
</li>
</ol>
</li>
<li>
<p>To set the contact&#39;s phone number:</p>
<ol type="a">
<li>
<p>Create a phone number record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_number._uri</span> property as the first parameter:</p>
<pre class="prettyprint">
contacts_record_h number;

error_code = contacts_record_create(_contacts_number._uri, &amp;number);
</pre>
</li>
<li>
<p>Set the phone number using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_number.number</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(number, _contacts_number.number, &quot;+8210-1234-5678&quot;);
</pre>
</li>
<li>
<p>Set the phone number record as a child record of the contact record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.number</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_add_child_record(contact, _contacts_contact.number, number);
</pre>
</li>
</ol>
</li>
</ul>
<p>Set other contact properties similarly, as needed.</p>
</li>

<li>
<p>Insert the contact into the contact database using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function. All child records added to the contact using the <span style="font-family: Courier New,Courier,monospace">contacts_record_add_child_record()</span> function are inserted automatically along with the parent.</p>

<p>The system assigns a unique ID to the contact, and the function returns it as its second parameter</p>
<pre class="prettyprint">
int id = -1;

error_code = contacts_db_insert_record(contact, &amp;id);
</pre>
</li>

<li>
<p>Destroy the contact handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(contact, true);
</pre>
<p>If you set the second parameter to <span style="font-family: Courier New,Courier,monospace">true</span>, all child records of the given record are also destroyed, irrespective of how the child records were added (individually or along with their parent record).</p>
</li>

</ol>

<h2 id="get_contact" name="get_contact">Retrieving Persons</h2>

<p>You can access contact details through persons.</p>

<p>To retrieve a single person:</p>

<ol>

<li>
<p>Retrieve a person record using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the person ID as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h person = NULL;
const int person_id = ... // Get the person ID
int error_code;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);
</pre>
</li>

<li>
<p>When no longer needed, destroy the person handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(person, true);
</pre>

</li>

</ol>

<p>To retrieve multiple persons:</p>

<ol>

<li>
<p>Retrieve a list of all persons, or a list limited with a filter or search keyword:</p>

<ul>
<li>
<p>To retrieve a list of all persons, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>To retrieve a filtered list of persons:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">contacts_query_create()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_person._uri, &amp;query);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_create()</span> function:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_person._uri, &amp;filter);
</pre>
</li>
<li>
<p>Add a filtering condition using a <span style="font-family: Courier New,Courier,monospace">contacts_filter_add_XXX()</span> function.</p>
<p>The following example adds a string-based filtering condition that retrieves the persons whose display name contains the string &quot;John&quot;:</p>
<pre class="prettyprint">
error_code = contacts_filter_add_str(filter, _contacts_person.display_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_CONTAINS, &quot;John&quot;);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an AND operator and then a bool-based filtering condition that retrieves the persons who are set as favorites.</p>
<p>The combination of the AND operator and the 2 conditions means that the filter only retrieves the persons whose display name contains the string &quot;John&quot; and who are set as favorites.</p>
<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

error_code = contacts_filter_add_bool(filter, _contacts_person.is_favorite, true);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">contacts_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);
</pre>
</li>
<li>
<p>Retrieve the filtered list of persons using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all persons matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_query_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>
<li>
<p>To retrieve a list of persons matching a search keyword, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_search_records()</span> function with the search keyword as the second parameter.</p>
<p>The following example shows how to find all person records that contain the keyword &quot;John&quot;:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_search_records(_contacts_person._uri, &quot;John&quot;, 0, 0, &amp;list);
</pre>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found persons, and retrieve person details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the person details.</p>
<p>Move forward and backward within the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions, and retrieve the current person using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the display name of each person:</p>
<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str_p(record, _contacts_person.display_name, &amp;display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;display_name: %s&quot;, display_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each person using the <span style="font-family: Courier New,Courier,monospace">contacts_gl_person_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_person_data_t *gl_person_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_person_data = _create_gl_person_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, display name:
&nbsp;&nbsp;&nbsp;// gl_person_data-&gt;display_name

&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">contacts_gl_person_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_contacts_gl_person_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;char *default_phone_number;
&nbsp;&nbsp;&nbsp;contacts_list_h associated_contacts;
} contacts_gl_person_data_t;

// Release the resources allocated to the structure
static void
_free_gl_person_data(contacts_gl_person_data_t *gl_person_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_person_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_person_data-&gt;display_name);
&nbsp;&nbsp;&nbsp;free(gl_person_data-&gt;default_phone_number);
&nbsp;&nbsp;&nbsp;contacts_list_destroy(gl_person_data-&gt;associated_contacts, true);
&nbsp;&nbsp;&nbsp;free(gl_person_data);
}

// Create the structure for a person
static contacts_gl_person_data_t*
_create_gl_person_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_person_data_t *gl_person_data;

&nbsp;&nbsp;&nbsp;gl_person_data = malloc(sizeof(contacts_gl_person_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_person_data, 0x0, sizeof(contacts_gl_person_data_t));
&nbsp;&nbsp;&nbsp;if (contacts_record_get_int(record, _contacts_person.id, &amp;gl_person_data-&gt;id) != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get person id failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_display_name(record, &amp;gl_person_data-&gt;display_name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_display_name() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_default_phone_number(record, &amp;gl_person_data-&gt;default_phone_number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_default_phone_number() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (false == _get_associated_contacts(record, &amp;gl_person_data-&gt;associated_contacts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;_get_associated_contacts() failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_person_data(gl_person_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;_print_phone_numbers(gl_person_data-&gt;associated_contacts);
&nbsp;&nbsp;&nbsp;_print_events(gl_person_data-&gt;associated_contacts);

&nbsp;&nbsp;&nbsp;return gl_person_data;
}
</pre>

<p>Define the functions for retrieving the person details:</p>
<ul>
<li>
<p>Retrieve the person&#39;s display name using the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_person.display_name</span> property as the second parameter:</p>
<pre class="prettyprint">
static bool
_get_display_name(contacts_record_h record, char **display_name)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(record, _contacts_person.display_name, display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;display name: %s&quot;, *display_name);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Retrieve the contacts associated with the person using a query:</p>
<pre class="prettyprint">
static bool
_get_associated_contacts(contacts_record_h record, contacts_list_h *associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;

&nbsp;&nbsp;&nbsp;// Retrieve the person ID from the person record
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_person.id, &amp;person_id);

&nbsp;&nbsp;&nbsp;// Create a contact query with a filter for the person ID
&nbsp;&nbsp;&nbsp;error_code = CONTACTS_ERROR_NONE;
&nbsp;&nbsp;&nbsp;error_code += contacts_query_create(_contacts_contact._uri, &amp;query);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_create(_contacts_contact._uri, &amp;filter);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_int(filter, _contacts_contact.person_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EQUAL, person_id);
&nbsp;&nbsp;&nbsp;error_code += contacts_query_set_filter(query, filter);

&nbsp;&nbsp;&nbsp;// Run the query: Retrieve a list of all contacts associated with the person ID
&nbsp;&nbsp;&nbsp;error_code += contacts_db_get_records_with_query(query, 0, 0, associated_contacts);

&nbsp;&nbsp;&nbsp;// Destroy the filter and query handles and release all their resources
&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);

&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Retrieve the phone numbers of the associated contacts by iterating through the contacts list retrieved in the previous step.</p>
<pre class="prettyprint">
static void
_print_phone_numbers(contacts_list_h associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h contact;
&nbsp;&nbsp;&nbsp;if (NULL == associated_contacts)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;associated_contacts is NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Iterate through the list of associated contacts
&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(associated_contacts, &amp;contact) == CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int count = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine the number of phone number records associated with the contact (as child records)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_count(contact, _contacts_contact.number, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != error_code)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_record_get_child_record_count(%d)&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Iterate through the contact&#39;s phone number records and retrieve the phone number details
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_h number = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i, &amp;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve the phone number ID
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int number_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(number, _contacts_number.id, &amp;number_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;number id: %d&quot;, number_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve the actual phone number
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *number_str = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(number, _contacts_number.number, &amp;number_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;number: %s&quot;, number_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(associated_contacts);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Retrieve the person&#39;s default phone number.</p>
<p>If a person is associated with multiple phone numbers, one of them is defined as the person&#39;s default phone number. To determine the default phone number, check the <span style="font-family: Courier New,Courier,monospace">is_primary_default</span> property of the <span style="font-family: Courier New,Courier,monospace">_contacts_person_number</span> view for the person&#39;s phone numbers. For the default phone number, the property is set to <span style="font-family: Courier New,Courier,monospace">true</span>.</p>
<p>The following example shows how to retrieve a person&#39;s default phone number using a query:</p>
<pre class="prettyprint">
static bool
_get_default_phone_number(contacts_record_h record, char **default_phone_number)
{
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;
&nbsp;&nbsp;&nbsp;contacts_list_h list = NULL;
&nbsp;&nbsp;&nbsp;contacts_record_h record_person_number = NULL;
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;int error_code = CONTACTS_ERROR_NONE;

&nbsp;&nbsp;&nbsp;// Retrieve the person ID from the person record
&nbsp;&nbsp;&nbsp;error_code += contacts_record_get_int(record, _contacts_person.id, &amp;person_id);

&nbsp;&nbsp;&nbsp;// Create a phone number query with filters for the person ID and default phone number
&nbsp;&nbsp;&nbsp;error_code += contacts_query_create(_contacts_person_number._uri, &amp;query);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_create(_contacts_person_number._uri, &amp;filter);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_int(filter, _contacts_person_number.person_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EQUAL, person_id);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);
&nbsp;&nbsp;&nbsp;error_code += contacts_filter_add_bool(filter, _contacts_person_number.is_primary_default,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;true);
&nbsp;&nbsp;&nbsp;error_code += contacts_query_set_filter(query, filter);

&nbsp;&nbsp;&nbsp;// Run the query: Retrieve the phone number records containing the default phone number
&nbsp;&nbsp;&nbsp;error_code += contacts_db_get_records_with_query(query, 0, 0, &amp;list);

&nbsp;&nbsp;&nbsp;// Retrieve the current record from the query list
&nbsp;&nbsp;&nbsp;error_code += contacts_list_get_current_record_p(list, &amp;record_person_number);

&nbsp;&nbsp;&nbsp;// Retrieve the phone number from the phone number record
&nbsp;&nbsp;&nbsp;error_code += contacts_record_get_str(record_person_number, _contacts_person_number.number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default_phone_number);

&nbsp;&nbsp;&nbsp;// Destroy the list, filter, and query handles and release all their resources
&nbsp;&nbsp;&nbsp;contacts_list_destroy(list, true);
&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);

&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Retrieve the events associated with the person (events of the associated contacts) by iterating through the contacts list:</p>
<pre class="prettyprint">
static void
_print_events(contacts_list_h associated_contacts)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h contact;
&nbsp;&nbsp;&nbsp;if (NULL == associated_contacts)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;associated_contacts is NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Iterate through the list of associated contacts
&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(associated_contacts, &amp;contact) == CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int count = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Determine the number of event records associated with the contact (as child records)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_count(contact, _contacts_contact.event, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != error_code)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_record_get_child_record_count(%d)&quot;, error_code);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Iterate through the contact&#39;s event records and retrieve the event details
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_h event = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.event,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i, &amp;event);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve the event ID
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int event_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(event, _contacts_event.id, &amp;event_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;event id: %d&quot;, event_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve the event date
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int date;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(event, _contacts_event.date, &amp;date);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;event: %d&quot;, date);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(associated_contacts);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_list_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="update_contact" name="update_contact">Updating a Contact</h2>

<p>To update contact details:</p>

<ol>

<li>
<p>Retrieve the contact you want to update using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the contact ID as the second parameter:</p>
<pre class="prettyprint">
int contact_id = ... // Get the contact ID
contacts_record_h contact = NULL;

error_code = contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;contact);
</pre>
<p>You can also retrieve the contact using a search function, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p>
</li>

<li>
<p>Set the properties you want to update.</p>
<p>The following example sets a new first name for the contact:</p>
<pre class="prettyprint">
contacts_record_h name = NULL;
// Retrieve the contact&#39;s name record
// The record index is set to 0, since there is only 1 child record of type &quot;name&quot;
error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.name, 0, &amp;name);
// Change the first name in the name record
error_code = contacts_record_set_str(name, _contacts_name.first, &quot;Mark&quot;);
</pre>
<p>The following example sets a new birthday event for the contact:</p>
<pre class="prettyprint">
contacts_record_h event = NULL;
// Retrieve the contact&#39;s birthday event record
error_code = contacts_record_get_child_record_at_p(contact, _contacts_contact.event, 0, &amp;event);
// Change the date in the event record
int new_date = 1990 * 10000 + 6 * 100 + 21;
error_code = contacts_record_set_int(event, _contacts_event.date, new_date);
</pre>
<p>The example assumes the birthday event is the only event defined for the contact, meaning you can retrieve the event record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function with the record index set to 0. If the contact has multiple events defined, you must iterate through them.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The <span style="font-family: Courier New,Courier,monospace">contacts_record_set_XXX()</span> functions only change the data in the memory object, not in the contact database. Normally, to update the database, you need to update each record separately using the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function. However, if you retrieve a child record using the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function, you only need to update the parent record to the database; the child record is updated automatically with the parent record.</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>Update the contact using the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_update_record(contact);
</pre>
</li>

<li>
<p>When no longer needed, destroy the contact handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(contact, true);
</pre>
</li>

</ol>

<h2 id="delete_contact" name="delete_contact">Deleting a Person</h2>

<p>To delete a person, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with the person ID as the second parameter:</p>

<pre class="prettyprint">
int person_id = ... // Get the person ID

error_code = contacts_db_delete_record(_contacts_person._uri, person_id);
</pre>

<h2 id="link_contact" name="link_contact">Linking and Unlinking Persons and Contacts</h2>

<p>Linking a contact to a person associates the contact with that person. Unlinking the contact from the person removes the association.</p>

<p>To link and unlink persons and contacts:</p>

<ul>

<li>
<p>To manually link a person to another person, use the <span style="font-family: Courier New,Courier,monospace">contacts_person_link_person()</span> function. The function links the contacts of the other person (second parameter) to the base person (first parameter) and deletes the former from the contact database. The base person is left with both their original contacts and the other person&#39;s contacts.</p>
<pre class="prettyprint">
int person_id1 = ... // Get the base person ID
int person_id2 = ... // Get another person ID

error_code = contacts_person_link_person(person_id1, person_id2);
</pre>
</li>

<li>
<p>To automatically link a new contact to an existing person, set the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.link_mode</span> property of the contact to <span style="font-family: Courier New,Courier,monospace">CONTACTS_CONTACT_LINK_MODE_NONE</span> when <a href="#create_contact">creating the contact</a>.</p>
<p>The contacts service determines the link based on the <span style="font-family: Courier New,Courier,monospace">_contacts_number.number</span> and <span style="font-family: Courier New,Courier,monospace">_contacts_email.email</span> properties of the contact. If an existing person has the same phone number or email address, but in a different address book, the contact is automatically linked to the person. If the phone number or email address lead to an existing contact in the same address book, the link does not work.</p>
<pre class="prettyprint">
contacts_record_h contact = NULL;

error_code = CONTACTS_ERROR_NONE;
error_code += contacts_record_create(_contacts_contact._uri, &amp;contact);
error_code += contacts_record_set_int(contact, _contacts_contact.link_mode, CONTACTS_CONTACT_LINK_MODE_NONE);

contacts_record_h name = NULL;
error_code += contacts_record_create(_contacts_name._uri, &amp;name);
error_code += contacts_record_set_str(name, _contacts_name.first, &quot;John&quot;);
error_code += contacts_record_add_child_record(contact, _contacts_contact.name, name);

contacts_record_h number = NULL;
error_code += contacts_record_create(_contacts_number._uri, &amp;number);
error_code += contacts_record_set_str(number, _contacts_number.number, &quot;+8210-1234-5678&quot;);
error_code += contacts_record_add_child_record(contact, _contacts_contact.number, number);

// Contact is linked automatically if an existing person has the same number in a different address book
error_code += contacts_db_insert_record(contact, NULL);

contacts_record_destroy(contact, true);
</pre>
</li>

<li>
<p>To unlink a contact from a person, use the <span style="font-family: Courier New,Courier,monospace">contacts_person_unlink_contact()</span> function. The function removes the contact (second parameter) from the person (first parameter), creates a new person (third parameter), and links the contact to the new person.</p>
<pre class="prettyprint">
int person_id = ... // Get the person ID
int contact_id = ... // Get the contact ID
int unlinked_person_id;

error_code = contacts_person_unlink_contact(person_id, contact_id, &amp;unlinked_person_id);
</pre>
</li>

</ul>

<h2 id="manage_contact" name="manage_contact">Managing Favorites</h2>

<p>To set or unset a person as a favorite:</p>

<ul>

<li>
<p>To set a new person as a favorite when creating the corresponding new contact, set the <span style="font-family: Courier New,Courier,monospace">_contacts_contact.is_favorite</span> property of the contact to <span style="font-family: Courier New,Courier,monospace">true</span>. When you insert the contact into the contact database, the new person that is created for the contact is automatically set as a favorite.</p>
<pre class="prettyprint">
contacts_record_h contact = NULL;

error_code = CONTACTS_ERROR_NONE;
error_code += contacts_record_create(_contacts_contact._uri, &amp;contact);
error_code += contacts_record_set_bool(contact, _contacts_contact.is_favorite, true);
// Set other properties

// New person is set as a favorite
error_code += contacts_db_insert_record(contact, NULL);

contacts_record_destroy(contact, true);
</pre>
</li>

<li>
<p>To set an existing person as a favorite, update the person record by setting its <span style="font-family: Courier New,Courier,monospace">_contacts_person.is_favorite</span> property to <span style="font-family: Courier New,Courier,monospace">true</span>:</p>
<pre class="prettyprint">
int person_id = ... // Get the person ID
contacts_record_h person = NULL;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);

error_code = contacts_record_set_bool(person, _contacts_person.is_favorite, true);

error_code = contacts_db_update_record(person);

contacts_record_destroy(person, true);
</pre>
</li>

<li>
<p>To unset an existing person as a favorite, update the person record by setting its <span style="font-family: Courier New,Courier,monospace">_contacts_person.is_favorite</span> property to <span style="font-family: Courier New,Courier,monospace">false</span>:</p>
<pre class="prettyprint">
int person_id = ... // Get the person ID
contacts_record_h person = NULL;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;person);

error_code = contacts_record_set_bool(person, _contacts_person.is_favorite, false);

error_code = contacts_db_update_record(person);

contacts_record_destroy(person, true);
</pre>
</li>

</ul>

<h2 id="monitor_contact" name="monitor_contact">Monitoring Person Changes</h2>

<p>To receive a notification whenever the person details change:</p>

<ol>

<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">contacts_db_add_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_add_changed_cb(_contacts_person._uri, _person_changed_callback, NULL);
</pre>
</li>

<li>
<p>Define the person change callback.</p>
<p>The following example shows how to retrieve the new person details in the callback:</p>
<pre class="prettyprint">
static contacts_gl_person_data_t *_gl_person_data = ...

static void
_person_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _contacts_person._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (_gl_person_data == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int person_id = _gl_person_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_person_data(_gl_person_data);
&nbsp;&nbsp;&nbsp;_gl_person_data = NULL;

&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_person_data = _create_gl_person_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_person_data

&nbsp;&nbsp;&nbsp;contacts_record_destroy(record, true);
}
</pre>
</li>

</ol>

<h2 id="create" name="create">Creating a Group</h2>

<p>A group is a collection of contacts from the same address book. Creating a new group involves creating a group handle, setting the group properties, and inserting the group into the contact database. To add contacts to the group, see <a href="#manage">Managing Group Members</a>.</p>

<p>To create a new group:</p>

<ol>

<li>
<p>Create a group handle using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_group._uri</span> property as the first parameter and the group handle variable as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h group = NULL;

error_code = contacts_record_create(_contacts_group._uri, &amp;group);
</pre>
</li>

<li>
<p>Set the group properties:</p>
<ul>
<li>
<p>To set the group name, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_group.name</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(group, _contacts_group.name, &quot;Neighbors&quot;);
</pre>
</li>
<li>
<p>To set the group image, define the path to the image file, and set the path to the group using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_group.image_path</span> property as the second parameter:</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/group_image.jpg&quot;, resource_path);
error_code = contacts_record_set_str(group, _contacts_group.image_path, temp_path);
free(resource_path);
</pre>
</li>
<li>
<p>To set the group ringtone, define the path to the ringtone file, and set the path to the group using the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_group.ringtone_path</span> property as the second parameter:</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/ringtone.mp3&quot;, resource_path);
error_code = contacts_record_set_str(group, _contacts_group.ringtone_path, temp_path);
free(resource_path);
</pre>
</li>
</ul>
<p>Set other group properties similarly, as needed.</p>
</li>

<li>
<p>Insert the group into the contact database using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function:</p>
<pre class="prettyprint">
int added_group_id = -1;

error_code = contacts_db_insert_record(group, &amp;added_group_id);
</pre>
</li>

<li>
<p>When no longer needed, destroy the group handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(group, true);
</pre>
</li>

</ol>

<h2 id="get" name="get">Retrieving Groups</h2>

<p>To retrieve a single group:</p>

<ol>

<li>
<p>Retrieve a group record using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the group ID as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h group;
int group_id = ... // Get the group ID
int error_code;

error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;group);
</pre>
</li>

<li>
<p>When no longer needed, destroy the group handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(group, true);
</pre>
</li>

</ol>

<p>To retrieve multiple groups:</p>

<ol>

<li>
<p>Retrieve a list of all groups, or retrieve a filtered list of groups:</p>
<ul>
<li>
<p>To retrieve a list of all groups, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_get_all_records(_contacts_group._uri, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>To retrieve a filtered list of groups:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">contacts_query_create()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_group._uri, &amp;query);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_create()</span> function:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_group._uri, &amp;filter);
</pre>
</li>
<li>
<p>Add a filtering condition using a <span style="font-family: Courier New,Courier,monospace">contacts_filter_add_XXX()</span> function.</p>
<p>The following example adds a string-based filtering condition that retrieves any group whose name contains the string &quot;neighbors&quot;:</p>
<pre class="prettyprint">
error_code = contacts_filter_add_str(filter, _contacts_group.name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_CONTAINS, &quot;neighbors&quot;);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an OR operator and then a string-based filtering condition that retrieves any group whose name contains the string &quot;friend&quot;.</p>
<p>The combination of the OR operator and the 2 conditions means that the filter only retrieves groups whose name contains the string &quot;neighbors&quot; or &quot;friend&quot;.</p>
<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);

error_code = contacts_filter_add_str(filter, _contacts_group.name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_CONTAINS, &quot;friend&quot;);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">contacts_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);
</pre>
</li>
<li>
<p>Retrieve the filtered list of groups using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all groups matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_query_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found groups, and retrieve group details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the group details.</p>
<p>Move forward and backward within the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions, and retrieve the current group using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the name of each group:</p>
<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;char *name;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str_p(record, _contacts_group.name, &amp;name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;group name: %s&quot;, name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each group using the <span style="font-family: Courier New,Courier,monospace">contacts_gl_group_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_group_data_t *gl_group_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_group_data = _create_gl_group_data(record);
&nbsp;&nbsp;&nbsp;// You can get, for example, display name:
&nbsp;&nbsp;&nbsp;// gl_group_data-&gt;name

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">contacts_gl_group_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_contacts_gl_group_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *name;
&nbsp;&nbsp;&nbsp;char *image_path;
&nbsp;&nbsp;&nbsp;char *ringtone_path;
} contacts_gl_group_data_t;

// Release the resources allocated to the structure
static void
_free_gl_group_data(contacts_gl_group_data_t *gl_group_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_group_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;name);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;image_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data-&gt;ringtone_path);
&nbsp;&nbsp;&nbsp;free(gl_group_data);
}

// Create the structure for a group
static contacts_gl_group_data_t*
_create_gl_group_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_group_data_t *gl_group_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_group_data = malloc(sizeof(contacts_gl_group_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_group_data, 0x0, sizeof(contacts_gl_group_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record, _contacts_group.id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_group_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get group ID failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_group_data-&gt;name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get group name failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.image_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_group_data-&gt;image_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get group image failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record, _contacts_group.ringtone_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_group_data-&gt;ringtone_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get group ringtone failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_group_data(gl_group_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_group_data;
}
</pre>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_list_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="update" name="update">Updating a Group</h2>

<p>To update group details:</p>

<ol>

<li>
<p>Retrieve the group you want to update using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the group ID as the second parameter:</p>
<pre class="prettyprint">
int group_id = ... // Get the group ID
contacts_record_h group = NULL;

error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;group);
</pre>
<p>You can also retrieve the group using a search function, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p>
</li>

<li>
<p>Set the properties you want to update.</p>
<p>The following example sets a new name and image for the group:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(group, _contacts_group.name, &quot;Family&quot;);

char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/group_image_new.jpg&quot;, resource_path);
free(resource_path);
error_code = contacts_record_set_str(group, _contacts_group.image_path, temp_path);
</pre>
</li>

<li>
<p>Update the group using the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_update_record(group);
</pre>
<p>Since the update concerns direct properties of the group record, not child records, updating the group record by definition also updates the properties.</p>
</li>

<li>
<p>When no longer needed, destroy the group handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(group, true);
</pre>
</li>

</ol>

<h2 id="delete" name="delete">Deleting a Group</h2>

<p>To delete a group, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with the group ID as the second parameter:</p>
<pre class="prettyprint">
int group_id = ... // Get the group ID

error_code = contacts_db_delete_record(_contacts_group._uri, group_id);
</pre>

<h2 id="manage" name="manage">Managing Group Members</h2>

<p>Group members are contacts from the same address book. Each contact is associated with a person.</p>

<p>To add, remove, and retrieve group members:</p>

<ul>

<li>
<p>To add a new contact to a group, retrieve the contact ID and the group ID, and use the <span style="font-family: Courier New,Courier,monospace">contacts_group_add_contact()</span> function:</p>
<pre class="prettyprint">
int contact_id = ... // Get the contact ID
int group_id = ... // Get the group ID

error_code = contacts_group_add_contact(group_id, contact_id);
</pre>
</li>

<li>
<p>To remove a contact from a group, use the <span style="font-family: Courier New,Courier,monospace">contacts_group_remove_contact()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_group_remove_contact(group_id, contact_id);
</pre>
</li>

<li>
<p>To retrieve all persons assigned to a group:</p>
<ol>
<li>
<p>Create and run a query for retrieving a list of all persons assigned to the group:</p>
<pre class="prettyprint">
contacts_query_h query = NULL;
contacts_filter_h filter = NULL;
contacts_list_h list = NULL;

// Create a person query with a filter for group ID
contacts_query_create(_contacts_person_group_assigned._uri, &amp;query);
contacts_filter_create(_contacts_person_group_assigned._uri, &amp;filter);
contacts_filter_add_int(filter, _contacts_person_group_assigned.group_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EQUAL, group_id);
contacts_query_set_filter(query, filter);

// Run the query: Retrieve a list of all persons assigned to the specified group
contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>Iterate through the list, and retrieve the person details.</p>
<p>The following example iterates through the list and retrieves the ID and display name of each person:</p>
<pre class="prettyprint">
contacts_record_h person = NULL;
int error_code;

while (contacts_list_get_current_record_p(list, &amp;person) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int person_id;
&nbsp;&nbsp;&nbsp;contacts_record_get_int(person, _contacts_person_group_assigned.person_id, &amp;person_id);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Person id: %d&quot;, person_id);

&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(person, _contacts_person_group_assigned.display_name, &amp;display_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Display name: %s&quot;, display_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>When no longer needed, destroy the list, filter, and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">contacts_list_destroy()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_filter_destroy()</span>, and <span style="font-family: Courier New,Courier,monospace">contacts_query_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>

</ul>

<h2 id="monitor" name="monitor">Monitoring Group Changes</h2>

<p>To receive a notification whenever the group details change:</p>

<ol>

<li>
<p>Register a callback using the <span style="font-family: Courier New,Courier,monospace">contacts_db_add_changed_cb()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_add_changed_cb(_contacts_group._uri, _group_changed_callback, NULL);
</pre>
</li>

<li>
<p>Define the group change callback.</p>
<p>The following example shows how to retrieve the new group details in the callback:</p>
<pre class="prettyprint">
static contacts_gl_group_data_t *_gl_group_data = ...

static void
_group_changed_callback(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (0 != strcmp(view_uri, _contacts_group._uri))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (_gl_group_data == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;int group_id = _gl_group_data-&gt;id;
&nbsp;&nbsp;&nbsp;_free_gl_group_data(_gl_group_data);
&nbsp;&nbsp;&nbsp;_gl_group_data = NULL;

&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_record(_contacts_group._uri, group_id, &amp;record);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;_gl_group_data = _create_gl_group_data(record);
&nbsp;&nbsp;&nbsp;// Use _gl_group_data

&nbsp;&nbsp;&nbsp;contacts_record_destroy(record, true);
}
</pre>
</li>

</ol>

<h2 id="make" name="make">Creating a vCard</h2>

<p>To create a vCard stream from a person:</p>

<ol>

<li>
<p>Retrieve the person:</p>
<pre class="prettyprint">
int person_id = ... // Get the person ID
contacts_record_h record = NULL;

error_code = contacts_db_get_record(_contacts_person._uri, person_id, &amp;record);
</pre>
</li>

<li>
<p>Create the vCard stream from the person:</p>
<pre class="prettyprint">
char *vcard_stream = NULL;
error_code = contacts_vcard_make_from_person(record, &amp;vcard_stream);
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The contacts service allows you to create a vCard stream from a person, contact, or my profile (using the <span style="font-family: Courier New,Courier,monospace">contacts_vcard_make_from_person()</span>, <span style="font-family: Courier New,Courier,monospace">contacts_vcard_make_from_contact()</span>, or <span style="font-family: Courier New,Courier,monospace">contacts_vcard_make_from_my_profile()</span> function).</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>When no longer needed, free the vCard stream, destroy the person handle, and release all its resources:</p>
<pre class="prettyprint">
free(vcard_stream);
contacts_record_destroy(record, true);
</pre>
</li>

</ol>

<h2 id="parse" name="parse">Parsing a vCard</h2>

<p>To parse a vCard from a file and insert its content into the content database:</p>

<ol>

<li>
<p>Parse the vCard stream using the <span style="font-family: Courier New,Courier,monospace">contacts_vcard_parse_to_contact_foreach()</span> function:</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char temp_path[1024];
snprintf(temp_path, sizeof(temp_path), &quot;%s/vcard.vcf&quot;, resource_path);
free(resource_path);

error_code = contacts_vcard_parse_to_contact_foreach(temp_path, // File path of vCard
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_vcard_parse_cb, // Callback to invoke
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL); // User data passed to the callback
</pre>
</li>

<li>
<p>Define a callback that inserts the parsed contact into the contact database.</p>
<p>The vCard stream can contain multiple contacts. The <span style="font-family: Courier New,Courier,monospace">contacts_vcard_parse_to_contact_foreach()</span> function invokes a separate callback for each parsed contact. As long as the callbacks return <span style="font-family: Courier New,Courier,monospace">true</span>, the foreach function continues to parse new contacts.</p>
<pre class="prettyprint">
static bool
_vcard_parse_cb(contacts_record_h contact, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == contact)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;int contact_id = -1;
&nbsp;&nbsp;&nbsp;error_code = contacts_db_insert_record(contact, &amp;contact_id);
&nbsp;&nbsp;&nbsp;// Use the contact record

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

</ol>

<h2 id="sd_create" name="sd_create">Creating a Speed Dial</h2>

<p>Creating a new speed dial involves creating a speed dial handle, setting the speed dial properties, and inserting the speed dial into the contact database.</p>

<p>To create a new speed dial:</p>

<ol>

<li>
<p>Create a speed dial handle using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial._uri</span> property as the first parameter and the speed dial handle variable as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h speeddial;

error_code = contacts_record_create(_contacts_speeddial._uri, &amp;speeddial);
</pre>
</li>

<li>
<p>Set the speed dial properties:</p>
<ul>
<li>
<p>To set the speed dial number, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial.speeddial_number</span> property as the second parameter:</p>
<pre class="prettyprint">
int speeddial_number = ... // Get the speed dial number
error_code = contacts_record_set_int(speeddial, _contacts_speeddial.speeddial_number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;speeddial_number);
</pre>
</li>
<li>
<p>To set the ID for the speed dial number, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_speeddial.number_id</span> property as the second parameter:</p>
<pre class="prettyprint">
int number_id = ... // Get the speed dial number ID
error_code = contacts_record_set_int(speeddial, _contacts_speeddial.number_id, number_id);
</pre>
</li>
</ul>
<p>Set other speed dial properties similarly, as needed.</p>
</li>

<li>
<p>Insert the speed dial into the contact database using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function:</p>
<pre class="prettyprint">
int added_speeddial_id = -1;

error_code = contacts_db_insert_record(speeddial, &amp;added_speeddial_id);
</pre>
</li>

<li>
<p>When no longer needed, destroy the speed dial handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre>
</li>

</ol>

<h2 id="sd_get" name="sd_get">Retrieving Speed Dials</h2>

<p>To retrieve a single speed dial:</p>

<ol>

<li>
<p>Retrieve a speed dial record using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the speed dial ID as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h speeddial;
int speeddial_id = ... // Get the speed dial ID
int error_code;

error_code = contacts_db_get_record(_contacts_speeddial._uri, speeddial_id, &amp;speeddial);
</pre>
</li>

<li>
<p>When no longer needed, destroy the speed dial handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre>

</li>

</ol>

<p>To retrieve multiple speed dials:</p>

<ol>

<li>
<p>Retrieve a list of all speed dials, or retrieve a filtered list of speed dials:</p>
<ul>
<li>
<p>To retrieve a list of all speed dials, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_get_all_records(_contacts_speeddial._uri, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>To retrieve a filtered list of speed dials:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">contacts_query_create()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_speeddial._uri, &amp;query);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_create()</span> function:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_speeddial._uri, &amp;filter);
</pre>
</li>
<li>
<p>Add a filtering condition using a <span style="font-family: Courier New,Courier,monospace">contacts_filter_add_XXX()</span> function.</p>
<p>The following example adds an integer-based filtering condition that retrieves only speed dials whose number is less than 3:</p>
<pre class="prettyprint">
error_code = contacts_filter_add_int(filter, _contacts_speeddial.speeddial_number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_LESS_THAN, 3);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an OR operator and then an integer-based filtering condition that retrieves only speed dials whose number is greater than 15.</p>
<p>The combination of the OR operator and the 2 conditions means that the filter only retrieves speed dials whose number is less than 3 or greater than 15.</p>
<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);

error_code = contacts_filter_add_int(filter, _contacts_speeddial.speeddial_number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_GREATER_THAN, 15);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">contacts_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);
</pre>
</li>
<li>
<p>Retrieve the filtered list of speed dials using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all speed dials matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_query_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found speed dials, and retrieve speed dial details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the speed dial details.</p>
<p>Move forward and backward within the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions, and retrieve the current speed dial using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the number of each speed dial:</p>
<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_speeddial.speeddial_number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;number);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;speed dial number: %d&quot;, number);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each speed dial using the <span style="font-family: Courier New,Courier,monospace">contacts_gl_speeddial_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_speeddial_data_t *gl_speeddial_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_speeddial_data = _create_gl_speeddial_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">contacts_gl_speeddial_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_contacts_gl_speeddial_data
{
&nbsp;&nbsp;&nbsp;int speeddial_number;
&nbsp;&nbsp;&nbsp;char *number;
&nbsp;&nbsp;&nbsp;char *display_name;
&nbsp;&nbsp;&nbsp;char *image_thumbnail_path;
} contacts_gl_speeddial_data_t;

// Release the resources allocated to the structure
static void
_free_gl_speeddial_data(contacts_gl_speeddial_data_t *gl_speeddial_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_speeddial_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;number);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;display_name);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data-&gt;image_thumbnail_path);
&nbsp;&nbsp;&nbsp;free(gl_speeddial_data);
}

// Create the structure for a speed dial
static contacts_gl_speeddial_data_t*
_create_gl_speeddial_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_speeddial_data_t *gl_speeddial_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_speeddial_data = malloc(sizeof(contacts_gl_speeddial_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_speeddial_data, 0x0, sizeof(contacts_gl_speeddial_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_speeddial.speeddial_number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_speeddial_data-&gt;speeddial_number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get speed dial number failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_speeddial.number,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_speeddial_data-&gt;number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get contact number failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_speeddial.display_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_speeddial_data-&gt;display_name))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get display name failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_speeddial.image_thumbnail_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_speeddial_data-&gt;image_thumbnail_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get thumbnail failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_speeddial_data(gl_speeddial_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_speeddial_data;
}
</pre>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_list_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="sd_update" name="sd_update">Updating a Speed Dial</h2>

<p>To update speed dial details:</p>

<ol>

<li>
<p>Retrieve the speed dial you want to update using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the speed dial number as the second parameter:</p>

<pre class="prettyprint">
int speeddial_number = ... // Get the speed dial number
contacts_record_h speeddial = NULL;

error_code = contacts_db_get_record(_contacts_speeddial._uri, speeddial_number, &amp;speeddial);
</pre>
<p>You can also retrieve the speed dial using a search function, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span>.</p>
</li>

<li>
<p>Set the properties you want to update.</p>
<p>The following example sets a new ID for the speed dial number:</p>
<pre class="prettyprint">
int number_id = ... // Get the number ID

error_code = contacts_record_set_int(speeddial, _contacts_speeddial.number_id, number_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get number ID failed: %x&quot;, error_code);
</pre>
</li>

<li>
<p>Update the speed dial using the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_update_record(speeddial);
</pre>
<p>Since the update concerns a direct property of the speed dial record, not a child record, updating the speed dial record by definition also updates the property.</p>
</li>

<li>
<p>When no longer needed, destroy the speed dial handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(speeddial, true);
</pre>
</li>

</ol>

<h2 id="sd_delete" name="sd_delete">Deleting a Speed Dial</h2>

<p>To delete a speed dial, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with the speed dial number as the second parameter:</p>

<pre class="prettyprint">
int speeddial_number = ... // Get the speed dial number

error_code = contacts_db_delete_record(_contacts_speeddial._uri, speeddial_number);
</pre>

<h2 id="pl_create" name="pl_create">Creating a Log</h2>

<p>Creating a new log entry involves creating a log handle, setting the log properties, and inserting the log entry into the contact database.</p>

<p>To create a new log entry:</p>

<ol>

<li>
<p>Create a log handle using the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log._uri</span> property as the first parameter and the log handle variable as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h log;

error_code = contacts_record_create(_contacts_phone_log._uri, &amp;log);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_record_create failed: %x&quot;, error_code);
</pre>
</li>

<li>
<p>Set the log properties:</p>
<ul>
<li>
<p>To set the log type, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log.log_type</span> property as the second parameter. The third parameter defines the log type using the values of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__RECORD__MODULE.html#gaafc3f61866231c01314c1d3f7da6038b">contacts_phone_log_type_e</a> enumeration.</p>
<pre class="prettyprint">
error_code = contacts_record_set_int(log, _contacts_phone_log.log_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_PLOG_TYPE_VOICE_INCOMMING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set log type failed: %x&quot;, error_code);
</pre>

</li>
<li>
<p>To set the log time (calculated as number of seconds since 1970-01-01 00:00:00 UTC), use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log.log_time</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_int(log, _contacts_phone_log.log_time, (int)time(NULL));
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set log time failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>To set the log duration (in practice, the message ID, email ID, or call duration in seconds), use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_int()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log.extra_data1</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_int(log, _contacts_phone_log.extra_data1, 37);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set duration failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>To set the log address (in practice, the phone number or email address), use the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_str()</span> function with the <span style="font-family: Courier New,Courier,monospace">_contacts_phone_log.address</span> property as the second parameter:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(log, _contacts_phone_log.address, &quot;+8231-1234-5678&quot;);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;set address failed: %x&quot;, error_code);
</pre>
</li>
</ul>

<p>Set other log properties similarly, as needed.</p>

</li>

<li>
<p>Insert the log into the contact database using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function:</p>
<pre class="prettyprint">
int added_log_id = -1;

error_code = contacts_db_insert_record(log, &amp;added_log_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_db_insert_record failed: %x&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the log handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(log, true);
</pre>
</li>

</ol>

<h2 id="pl_get" name="pl_get">Retrieving Logs</h2>

<p>To retrieve a single log entry:</p>

<ol>

<li>
<p>Retrieve a log record using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_record()</span> function with the log ID as the second parameter:</p>
<pre class="prettyprint">
contacts_record_h log;
int log_id = ... // Get the log ID
int error_code;

error_code = contacts_db_get_record(_contacts_phone_log._uri, log_id, &amp;log);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get log failed: %x&quot;, error_code);
</pre>
</li>

<li>
<p>When no longer needed, destroy the log handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_record_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_record_destroy(log, true);
</pre>
</li>

</ol>

<p>To retrieve multiple log entries:</p>

<ol>

<li>
<p>Retrieve a list of all logs, or retrieve a filtered list of logs:</p>
<ul>
<li>
<p>To retrieve a list of all logs, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

error_code = contacts_db_get_all_records(_contacts_phone_log._uri, 0, 0, &amp;list);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_db_get_all_records failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>To retrieve a filtered list of logs:</p>
<ol type="a">
<li>
<p>Define a list handle variable, and create a query handle using the <span style="font-family: Courier New,Courier,monospace">contacts_query_create()</span> function:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

error_code = contacts_query_create(_contacts_phone_log._uri, &amp;query);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_query_create failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>Create a filter handle using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_create()</span> function:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

error_code = contacts_filter_create(_contacts_phone_log._uri, &amp;filter);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_filter_create failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>Add a filtering condition using a <span style="font-family: Courier New,Courier,monospace">contacts_filter_add_XXX()</span> function.</p>
<p>The following example adds an integer-based filtering condition that retrieves any log whose type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_PLOG_TYPE_VOICE_INCOMMING</span>:</p>
<pre class="prettyprint">
error_code = contacts_filter_add_int(filter, _contacts_phone_log.log_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EQUAL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_PLOG_TYPE_VOICE_INCOMMING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>To add more conditions, define an operator between the conditions.</p>
<p>The following example first adds an OR operator and then an integer-based filtering condition that retrieves any log whose type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_PLOG_TYPE_VOICE_OUTGOING</span>.</p>
<p>The combination of the OR operator and the 2 conditions means that the filter only retrieves logs whose type is <span style="font-family: Courier New,Courier,monospace">CONTACTS_PLOG_TYPE_VOICE_INCOMMING</span> or <span style="font-family: Courier New,Courier,monospace">CONTACTS_PLOG_TYPE_VOICE_OUTGOING</span>.</p>
<pre class="prettyprint">
error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_filter_add_operator failed: %x&quot;, error_code);

error_code = contacts_filter_add_int(filter, _contacts_phone_log.log_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EQUAL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_PLOG_TYPE_VOICE_OUTGOING);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;filter add condition failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace">contacts_query_set_filter()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_query_set_filter(query, filter);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_query_set_filter failed: %x&quot;, error_code);
</pre>
</li>
<li>
<p>Retrieve the filtered list of logs using the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
error_code = contacts_db_get_records_with_query(query, 0, 0, &amp;list);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_db_get_records_with_query failed: %x&quot;, error_code);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all logs matching the query.</p>
</li>
<li>
<p>When no longer needed, destroy the filter and query handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace">contacts_filter_destroy()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_query_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
</pre>
</li>
</ol>
</li>
</ul>
</li>

<li>
<p>Iterate through the list of found logs, and retrieve log details:</p>
<ol type="a">
<li>
<p>Use a loop to iterate through the list and retrieve the log details.</p>
<p>Move forward and backward within the list using the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> functions, and retrieve the current log using the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> function.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>The following example iterates through the list and retrieves the type of each log:</p>
<pre class="prettyprint">
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;int type;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(record, _contacts_phone_log.log_type, &amp;type);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;log type: %d&quot;, type);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
</li>
<li>
<p>Optionally, retrieve more details of each log using the <span style="font-family: Courier New,Courier,monospace">contacts_gl_log_data_t</span> structure:</p>
<pre class="prettyprint">
contacts_gl_log_data_t *gl_log_data = NULL;
contacts_record_h record;
while (contacts_list_get_current_record_p(list, &amp;record) == CONTACTS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;gl_log_data = _create_gl_log_data(record);

&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
&nbsp;&nbsp;&nbsp;if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
}
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">contacts_gl_log_data_t</span> structure and the functions for using the structure:</p>
<pre class="prettyprint">
typedef struct
_contacts_gl_log_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *address;
&nbsp;&nbsp;&nbsp;int log_type;
&nbsp;&nbsp;&nbsp;int log_time;
} contacts_gl_log_data_t;

// Release the resources allocated to the structure
static void
_free_gl_log_data(contacts_gl_log_data_t *gl_log_data)
{
&nbsp;&nbsp;&nbsp;if (NULL == gl_log_data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;free(gl_log_data-&gt;address);
&nbsp;&nbsp;&nbsp;free(gl_log_data);
}

// Create the structure for a log
static contacts_gl_log_data_t*
_create_gl_log_data(contacts_record_h record)
{
&nbsp;&nbsp;&nbsp;contacts_gl_log_data_t *gl_log_data;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;gl_log_data = malloc(sizeof(contacts_gl_log_data_t));
&nbsp;&nbsp;&nbsp;memset(gl_log_data, 0x0, sizeof(contacts_gl_log_data_t));

&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_phone_log.id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_log_data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get log ID failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_str(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_phone_log.address,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_log_data-&gt;address))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get log address failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_phone_log.log_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_log_data-&gt;log_type))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get log type failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (CONTACTS_ERROR_NONE != contacts_record_get_int(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_phone_log.log_time,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;gl_log_data-&gt;log_time))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;get log time failed &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_free_gl_log_data(gl_log_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return gl_log_data;
}
</pre>
</li>
</ol>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace">contacts_list_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="pl_delete" name="pl_delete">Deleting a Log</h2>

<p>To delete a log entry, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span> function with the log ID as the second parameter:</p>

<pre class="prettyprint">
int log_id = ... // Get the log ID

error_code = contacts_db_delete_record(_contacts_phone_log._uri, log_id);
if (error_code != CONTACTS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_db_delete_record failed: %x&quot;, error_code);
</pre>

<h2 id="insert2" name="insert2">Creating a Record</h2>

<p>The basic concept in the Contacts API is a record. A record can be a complex set of data, containing other data. For example, an address record can contain data about the country, region, and street. Also, the contained data can be a reference to another record. For example, a contact record contains the <span style="font-family: Courier New,Courier,monospace;">address</span> property, which is a reference to an address record. A record can therefore be a node in a tree of relations between records.</p>

<p>Each record type has a special <span style="font-family: Courier New,Courier,monospace;">view</span> structure, which contains identifiers of its properties. For example, the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view describes the properties of the contact record. It contains properties, such as the name, company, and nickname of the contact. A special property in such structures is the URI, which is used to identify the record type. Every view describing a record has this property.</p>

<p>To insert a new record into the contact database:</p>

<ol>

<li>
<p>Create a new record.</p>
<p>For example, to create a new contact record, create a record using the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view:</p>
<pre class="prettyprint">
contacts_record_h hcontact = NULL;

error_code = contacts_record_create(_contacts_contact._uri, &amp;hcontact);
</pre>
<p>Creating another type of record, such as a group or speed dial, is similar to creating a record. The only difference is using another view, for example, <span style="font-family: Courier New,Courier,monospace;">_contacts_group</span> for a group or <span style="font-family: Courier New,Courier,monospace;">_contacts_speeddial</span> for a speed dial.</p>
</li>

<li>
<p>Set the record properties.</p>
<p>Most properties in the contact view are separate records, so create more records, as needed. For example, to set the address for the contact:</p>
<ol type="a">
<li>
<p>Create a new address record using the <span style="font-family: Courier New,Courier,monospace;">_contacts_address</span> view:</p>
<pre class="prettyprint">
contacts_record_h haddress = NULL;

error_code = contacts_record_create(_contacts_address._uri, &amp;haddress);
</pre>
</li>
<li>
<p>Set the address record properties.</p>
<p>The following example sets the country of the address:</p>
<pre class="prettyprint">
error_code = contacts_record_set_str(haddress, _contacts_address.country, &quot;Korea&quot;);
</pre>
</li>
<li>
<p>Add the address record as a child record to the contact record:</p>
<pre class="prettyprint">
error_code = contacts_record_add_child_record(hcontact, _contacts_contact.address, haddress)
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Do not destroy the child record handle.</td>
        </tr>
    </tbody>
</table>
</li>
</ol>
</li>

<li>
<p>Insert the record into the contact database. You receive the ID of the record in the database.</p>
<pre class="prettyprint">
int id;

error_code = contacts_db_insert_record(hcontact, &amp;id);
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Do not manually insert any of the child records into the database. The system inserts the child records automatically along with the parent record.</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>When no longer needed, destroy the record handle and release all its resources:</p>
<pre class="prettyprint">
error_code = contacts_record_destroy(hcontact, true);
</pre>
</li>
</ol>

<h2 id="get2" name="get2">Retrieving Record Details</h2>

<p>Before you can retrieve details (properties) from a record, you must first retrieve the record. You must know the ID of the record you want to retrieve.</p>

<p>To retrieve a record, retrieve a handle for it with the record ID:</p>

<pre class="prettyprint">
contacts_record_h record;
const int ID = 2;

contacts_db_get_record(_contacts_contact._uri, ID, &amp;record);
</pre>

<p>To retrieve the record details:</p>

<ul>

<li>
<p>Retrieve direct record details.</p>
<p>To retrieve details directly from the record, use a <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_XXX()</span> function. The specific function depends on the data type of the detail (property) you want to retrieve.</p>
<p>The following example uses the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_str()</span> function to retrieve a contact&#39;s display name, which is a string value:</p>
<pre class="prettyprint">
char *d_name;
contacts_record_get_str(record, _contacts_contact.display_name, d_name);
free(d_name);
</pre>
</li>

<li>
<p>Retrieve child record details.</p>

<p>When working with a record from one view, you sometimes need details from its child record from another view. To retrieve details from a child record, use the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function.</p>
<p>The following example first retrieves a name record associated as a child record of a contact record, and then retrieves the first name from the name record:</p>
<pre class="prettyprint">
contacts_record_h child_record;
contacts_record_get_child_record_at_p(record, _contacts_contact.name, 0, &amp;child_record);

// From the child record, retrieve the first name using the name view
char *f_name = NULL;
contacts_record_get_str(child_record, _contacts_name.first_name, &amp;f_name);
free(f_name);
</pre>
</li>

<li>
<p>Retrieve parent record details.</p>
<p>When working with a child record from one view, you sometimes need details from its parent record from another view. To access the parent record, first determine its ID, and then retrieve the parent record.</p>
<p>The following example first retrieves the parent contact record ID for a name record using the <span style="font-family: Courier New,Courier,monospace;">contact_id</span> property, then retrieves the contact record, and finally checks whether the contact has an email address:</p>
<pre class="prettyprint">
contacts_record_h parent_record;
int parent_id;
contacts_record_get_int(record, _contacts_name.contact_id, &amp;parent_id);
contacts_db_get_record(_contacts_contact._uri, parent_id, &amp;parent_record);

// From the parent record, check the boolean has_email property
bool h_email;
contacts_record_get_bool(parent_record, _contacts_contact.has_email, &amp;h_email);
</pre>
</li>

<li id="structure" name="structure">
<p>Retrieve more record details using a structure:</p>
<ol type="a">
<li>
<p>Create the structure.</p>
<p>The following example defines the <span style="font-family: Courier New,Courier,monospace;">contact_gl_data_t</span> structure for contacts and implements the create function for the structure:</p>
<pre class="prettyprint">
gldata = _create_gl_data(record);
char *number = gldata-&gt;number;

// Define the structure
typedef struct
_contact_gl_data
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;char *first;
&nbsp;&nbsp;&nbsp;char *last;
&nbsp;&nbsp;&nbsp;char *number;
&nbsp;&nbsp;&nbsp;char *image_path;
} contact_gl_data_t;

// Create the structure
static contact_gl_data_t*
_create_gl_data(contacts_record_h r_contact)
{
&nbsp;&nbsp;&nbsp;contact_gl_data_t *data;
&nbsp;&nbsp;&nbsp;data = malloc(sizeof(contact_gl_data_t));
&nbsp;&nbsp;&nbsp;memset(data, 0x0, sizeof(contact_gl_data_t));

&nbsp;&nbsp;&nbsp;if (! _get_contact_id(r_contact, &amp;data-&gt;id))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!_get_contact_number(r_contact, &amp;data-&gt;number))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_first(r_contact, &amp;data-&gt;first))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_last(r_contact, &amp;data-&gt;last))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;first);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!_get_contact_image(r_contact, &amp;data-&gt;image_path))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;first);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data-&gt;last);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return data;
}
</pre>
</li>
<li>
<p>Retrieve record data into the structure.</p>
<p>Contacts, for example, are organized in a parent-child structure, where the contact record is the parent. To retrieve specific data from a contact record:</p>
<ul>
<li>
<p>If the data is stored directly in the contact record, access the correct property using the appropriate <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_XXX()</span> function.</p>
</li>
<li>
<p>If the data is stored in a child record, retrieve the child record responsible for the data type using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function, and then access the correct property in the child record using the appropriate <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_XXX()</span> function.</p>
</li>
</ul>
<p>For a list of properties by view, see <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">View/Property</a>.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Do not pass any data returned by a function with the <span style="font-family: Courier New,Courier,monospace;">_p</span> suffix to the <span style="font-family: Courier New,Courier,monospace;">free()</span> function.</td>
        </tr>
    </tbody>
</table>
<p>To retrieve contact details into the <span style="font-family: Courier New,Courier,monospace;">contact_gl_data_t</span> structure:</p>
<ul>
<li>
<p>To retrieve the ID of the contact record, use the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_int()</span> function on the contact record with the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact.id</span> property.</p>
<p>The ID is a unique number representing the record key in the contact database. If you know the ID of a record, you can access and manipulate the record with different functions, such as <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_record()</span> or <span style="font-family: Courier New,Courier,monospace;">contacts_db_delete_record()</span>.</p>
<pre class="prettyprint">
static bool
_get_contact_id(contacts_record_h r_contact, int *id)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_int(r_contact, _contacts_contact.id, id);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>To retrieve the contact&#39;s phone number, first check whether the contact has at least 1 phone number using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_bool()</span> function on the contact record with the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact.has_phonenumber</span> property. If the contact has 1 or more phone numbers, retrieve the numbers using the various <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__QUERY__MODULE.html">Query</a> and <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__FILTER__MODULE.html">Filter</a> functions from the Contacts API. The numbers are stored in the number child records (the <span style="font-family: Courier New,Courier,monospace;">_contacts_number</span> view). After you are done, free any data returned by a function not containing the <span style="font-family: Courier New,Courier,monospace;">_p</span> suffix.</p>
<p>The following example checks whether the contact has any phone numbers. Then, it queries all phone numbers and filters the search so that only the numbers that are default numbers and belong to the specific contact are included in the search result.</p>
<pre class="prettyprint">
static bool
_get_contact_number(contacts_record_h r_contact, char **number)
{
&nbsp;&nbsp;&nbsp;int id;
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h r_number;
&nbsp;&nbsp;&nbsp;contacts_query_h query = NULL;
&nbsp;&nbsp;&nbsp;contacts_filter_h filter = NULL;
&nbsp;&nbsp;&nbsp;contacts_list_h list = NULL;

&nbsp;&nbsp;&nbsp;if (!_get_contact_id(r_contact, &amp;id))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;bool has_number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_bool(r_contact, _contacts_contact.has_phonenumber, &amp;has_number);

&nbsp;&nbsp;&nbsp;error_code = contacts_query_create(_contacts_number._uri, &amp;query);

&nbsp;&nbsp;&nbsp;unsigned int fields[] = {_contacts_number.number};
&nbsp;&nbsp;&nbsp;error_code = contacts_query_set_projection(query, fields, 1);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_create(_contacts_number._uri, &amp;filter);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_int(filter, _contacts_number.contact_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_MATCH_EXACTLY, id);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

&nbsp;&nbsp;&nbsp;error_code = contacts_filter_add_bool(filter, _contacts_number.is_default, true);

&nbsp;&nbsp;&nbsp;error_code = contacts_query_set_filter(query, filter);

&nbsp;&nbsp;&nbsp;error_code = contacts_db_get_records_with_query(query, 0, 1, &amp;list);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_get_current_record_p(list, &amp;r_number);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_number, _contacts_number.number, number);

&nbsp;&nbsp;&nbsp;contacts_query_destroy(query);
&nbsp;&nbsp;&nbsp;contacts_filter_destroy(filter);
&nbsp;&nbsp;&nbsp;contacts_list_destroy(list, true);
}
</pre>
<p>The following alternative example retrieves the contact&#39;s default phone number directly:</p>
<pre class="prettyprint">
static bool
_get_contact_number(contacts_record_h r_contact, char **number)
{
&nbsp;&nbsp;&nbsp;int error_code;
&nbsp;&nbsp;&nbsp;contacts_record_h r_number;

&nbsp;&nbsp;&nbsp;bool has_number;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_bool(r_contact, _contacts_contact.has_phonenumber, &amp;has_number);

&nbsp;&nbsp;&nbsp;if (!has_number)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*number = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;unsigned int count = 0;
&nbsp;&nbsp;&nbsp;bool is_default = false;
&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_count(contact, _contacts_contact.number, &amp;count);

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact, _contacts_contact.number, i, &amp;r_number);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_bool(r_number, _contacts_number.is_default, &amp;is_default);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (is_default)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_number, _contacts_number.number, number);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;*number = NULL;

&nbsp;&nbsp;&nbsp;return false;
}
</pre>
<p>To retrieve a second number, change the third parameter of the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function from 0 to 1.</p>
</li>
<li>
<p>To retrieve the contact&#39;s name details, retrieve the name child record of the contact record using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function with the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact.name</span> property. From the child record, retrieve the name data using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_str()</span> function.</p>
<p>The following example retrieves the contact&#39;s first name from the name record:</p>
<pre class="prettyprint">
static bool
_get_contact_first(contacts_record_h r_contact, char **first)
{
&nbsp;&nbsp;&nbsp;contacts_record_h r_name;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact, _contacts_contact.name, 0, &amp;r_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_name, _contacts_name.first, first);
}
</pre>
<p>The following example retrieves the contact&#39;s last name from the name record:</p>
<pre class="prettyprint">
static bool
_get_contact_last(contacts_record_h r_contact, char **last)
{
&nbsp;&nbsp;&nbsp;contacts_record_h r_name;
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_child_record_at_p(r_contact, _contacts_contact.name, 0, &amp;r_name);

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_name, _contacts_name.last, last);
}
</pre>
</li>
<li>
<p>To retrieve the contact&#39;s image, use the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_str()</span> function on the contact record with the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact.image_thumbnail_path</span> property:</p>
<pre class="prettyprint">
static bool
_get_contact_image(contacts_record_h r_contact, char **image_path)
{
&nbsp;&nbsp;&nbsp;int error_code;

&nbsp;&nbsp;&nbsp;error_code = contacts_record_get_str(r_contact, _contacts_contact.image_thumbnail_path, image_path);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Thumb path: \&#39;%s\&#39;&quot;, *image_path);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ul>
</li>
</ol>
</li>

</ul>

<h2 id="list2" name="list2">Using Record Lists</h2>

<p>To retrieve multiple records at the same time using a list:</p>

<ol>

<li>
<p>Retrieve a list of records:</p>
<ul>
<li>
<p>To retrieve a list of all records of a given type, use the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_all_records()</span> function.</p>
<p>The following example retrieves a list of all contacts:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

contacts_db_get_all_records(_contacts_contact._uri, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>To retrieve a filtered and sorted list of records of a given type:</p>
<ol type="a">
<li>
<p>Create a query using the <span style="font-family: Courier New,Courier,monospace;">contacts_query_create()</span> function.</p>
<p>The following example creates a query for contact names:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;

contacts_query_create(_contacts_name._uri, &amp;query);
</pre>
</li>
<li>
<p>Create a filter for the query using the <span style="font-family: Courier New,Courier,monospace;">contacts_filter_create()</span> function:</p>
<p>The following example creates a name filter:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

contacts_filter_create(_contacts_name._uri, &amp;filter);
</pre>
<p>The first parameter defines in which view to place the filter. To filter contacts by first and last name, use the <span style="font-family: Courier New,Courier,monospace;">_contacts_name</span> view. The first parameter must be the same as the first parameter of the <span style="font-family: Courier New,Courier,monospace;">contacts_query_create()</span> function, that is, the query and its filter must both use the same view. For more information on views, see <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">View/Property</a>.</p>
</li>
<li>
<p>Add a filtering condition using a <span style="font-family: Courier New,Courier,monospace;">contacts_filter_add_XXX()</span> function.</p>
<p>The following example adds a string-based filtering condition that retrieves name records where the last name starts with &quot;Za&quot;:</p>
<pre class="prettyprint">
contacts_filter_add_str(filter, _contacts_name.last_name, CONTACTS_MATCH_STARTSWITH, &quot;Za&quot;);
</pre>
<p>The available matching options (third parameter) for string-based filtering conditions are defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__FILTER__MODULE.html#ga5a4ee5c71ae14d0fbf7520597514f0c2">contacts_match_str_flag_e</a> enumeration.</p>
</li>
<li>
<p>To add more conditions, add a logical operator before each new condition using the <span style="font-family: Courier New,Courier,monospace;">contacts_filter_add_operator()</span> function. The conditions and operators together define the filtering logic as a whole.</p>
<p>The following example first adds an AND operator and then a string-based filtering condition that retrieves name records where the last name ends with &quot;ra&quot;.</p>
<p>The combination of the AND operator and the 2 conditions means that the filter only retrieves name records where the last name starts with &quot;Za&quot; and ends with &quot;ra&quot;.</p>
<pre class="prettyprint">
contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

contacts_filter_add_str(filter, _contacts_name.last_name, CONTACTS_MATCH_ENDSWITH, &quot;ra&quot;);
</pre>
</li>
<li>
<p>If you need to use a logical expression with brackets, such as &quot;C1 AND C2 AND (C3 OR C4)&quot;, define the bracketed conditions in a separate filter, and add the new filter to the parent filter as a filtering condition using the <span style="font-family: Courier New,Courier,monospace;">contacts_filter_add_filter()</span> function.</p>
<p>The following example extends the previous example by first adding an AND operator and then a child filter with 2 string-based filtering conditions separated by an OR operator.</p>
<p>The combination of all the filtering conditions means that the parent filter only retrieves name records where (1) the last name starts with &quot;Za&quot; and ends with &quot;ra&quot; and (2) the first name starts with either &quot;Ada&quot; or &quot;Igo&quot;.</p>
<pre class="prettyprint">
contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);

contacts_filter_h n_filter = NULL;
contacts_filter_create(_contacts_name._uri, &amp;n_filter);
contacts_filter_add_str(n_filter, _contacts_name.first_name, CONTACTS_MATCH_STARTSWITH, &quot;Ada&quot;);
contacts_filter_add_operator(n_filter, CONTACTS_FILTER_OPERATOR_OR);
contacts_filter_add_str(n_filter, _contacts_name.first_name, CONTACTS_MATCH_STARTSWITH, &quot;Igo&quot;);

contacts_filter_add_filter(filter, n_filter);
</pre>
</li>
<li>
<p>Set the filter to the query using the <span style="font-family: Courier New,Courier,monospace;">contacts_query_set_filter()</span> function:</p>
<pre class="prettyprint">
contacts_query_set_filter(query, filter);
</pre>
</li>
<li>
<p>Sort the query results by one of its view properties using the <span style="font-family: Courier New,Courier,monospace;">contacts_query_set_sort()</span> function.</p>
<p>The following example sorts the contact name query by first name:</p>
<pre class="prettyprint">
contacts_query_set_sort(query, _contacts_name.first, true);
</pre>
</li>
<li>
<p>Set a projection to the query using the <span style="font-family: Courier New,Courier,monospace;">contacts_query_set_projection()</span> function.</p>
<p>A projection allows you to query the data for specific properties of a record. Using a projection can reduce latency in case of a large database.</p>
<p>The following example limits the properties from the previous steps to the first and last name:</p>
<pre class="prettyprint">
unsigned my_projection[] = {_contacts_name.contact_id, _contacts_name.first, _contacts_name.last}
contacts_query_set_projection(query, my_projection, sizeof(my_projection)/sizeof(int));
</pre>
<p>The results of a filtered query can contain records that differ only in a few properties. After setting a projection to the filtered query, the results can contain identical records. To avoid these, use the <span style="font-family: Courier New,Courier,monospace;">contacts_query_set_distinct()</span> function, which removes duplicates from the results:</p>
<pre class="prettyprint">
contacts_query_set_distinct(query, true);
</pre>
</li>
<li>
<p>Retrieve the filtered list using the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_records_with_query()</span> function:</p>
<pre class="prettyprint">
contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The third parameter defines a limit for the number of results. If you set it to 0, the list returns all records matching the query.</p>
</li>
</ol>
</li>
</ul>
</li>

<li id="iterate_l" name="iterate_l">
<p>Iterate through the list of found records, and retrieve the record details:</p>
<p>Use a loop to iterate through the list and retrieve the details:</p>
<ul>
<li>
<p>Move forward and backward within the list using the <span style="font-family: Courier New,Courier,monospace;">contacts_list_prev()</span>, <span style="font-family: Courier New,Courier,monospace;">contacts_list_next()</span>, <span style="font-family: Courier New,Courier,monospace;">contacts_list_first()</span>, and <span style="font-family: Courier New,Courier,monospace;">contacts_list_last()</span> functions.</p>
</li>
<li>
<p>Retrieve the current record using the <span style="font-family: Courier New,Courier,monospace;">contacts_list_get_current_record_p()</span> function. By default, before iterating through the list, the current record is the first record.</p>
</li>
</ul>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Some functions have the <span style="font-family: Courier New,Courier,monospace;">_p</span> postfix. The postfix means that the returned value must not be freed by the application, as it is a pointer to the data in an existing record.</td>
        </tr>
    </tbody>
</table>
<p>To retrieve the record details:</p>
<ul>
<li>
<p>To retrieve only basic details, use a <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_XXX()</span> function on the record.</p>
<p>The following example use the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_str()</span> function to retrieve a contact&#39;s display name:</p>
<pre class="prettyprint">
contacts_record_h record;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;// Get details
&nbsp;&nbsp;&nbsp;char *disp_name;
&nbsp;&nbsp;&nbsp;contacts_record_get_str(record, _contacts_contact.display_name, &amp;disp_name);
&nbsp;&nbsp;&nbsp;free(disp_name);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>
</li>
<li>
<p>To retrieve more details, including child record details, use a structure. For more information, see <a href="#structure">Retrieving Record Details</a>.</p>
<p>The following example uses the <span style="font-family: Courier New,Courier,monospace;">contact_gl_data_t</span> structure to retrieve contact details:</p>
<pre class="prettyprint">
contacts_record_h record;
contact_gl_data_t *gldata = NULL;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;gldata = _create_gl_data(record);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>
</li>
<li>
<p>The previous examples work only if you use the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view, that is, if you are dealing with contact records. If you use filtering in another view, as shown in the filtering examples, and you want to use the same contact structure with those records, first retrieve the parent contact record of the current record, and then use the structure for the parent record. This is basically a way to switch to the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view from another view.</p>
<p>In the following example, the loop iterates through a list of name records. To retrieve the full details of the contact record corresponding to the current name record, the code retrieves the parent of the name record, which is a contact, and creates the <span style="font-family: Courier New,Courier,monospace;">contact_gl_data_t</span> structure for the parent, retrieving its full details.</p>
<pre class="prettyprint">
contacts_record_h record;
contact_gl_data_t *gldata = NULL;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;int record_id;
&nbsp;&nbsp;&nbsp;contacts_record_h c_record;

&nbsp;&nbsp;&nbsp;// Get the ID of the parent contact record
&nbsp;&nbsp;&nbsp;contacts_record_get_int(record, _contacts_name.contact_id, &amp;contact_id);

&nbsp;&nbsp;&nbsp;// Get the parent contact record
&nbsp;&nbsp;&nbsp;contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;c_record);

&nbsp;&nbsp;&nbsp;// Create the structure for the parent contact record
&nbsp;&nbsp;&nbsp;gldata = _create_gl_data(c_record);

&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
</pre>
</li>
</ul>
</li>

<li>
<p>When no longer needed, destroy the filter, query, and list handles and release all their resources using the <span style="font-family: Courier New,Courier,monospace;">contacts_filter_destroy()</span>, <span style="font-family: Courier New,Courier,monospace;">contacts_query_destroy()</span>, and <span style="font-family: Courier New,Courier,monospace;">contacts_list_destroy()</span> functions:</p>
<pre class="prettyprint">
contacts_filter_destroy(filter);
contacts_query_destroy(query);
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<p>You can insert a whole list into the contact database. This is useful when you have several records to create and want to insert them all at once.</p>

<p>To insert a list into the contact database:</p>

<ol>

<li>
<p>Create the list:</p>
<pre class="prettyprint">
contacts_list_h list;
contacts_list_create(&amp;list);
</pre>
</li>

<li>
<p>Add records to the list:</p>
<pre class="prettyprint">
contacts_list_add(list, record);
</pre>
</li>

<li>
<p>Insert the list into the contact database and get the IDs of the inserted records:</p>
<pre class="prettyprint">
int *ids = NULL;
unsigned int count = 0;
contacts_db_insert_records(list, &amp;ids, &amp;count);
dlog_print(DLOG_DEBUG, LOG_TAG, "%d records inserted", count);
free(ids);
</pre>
</li>

<li>
<p>When no longer needed, destroy the list handle and release all its resources using the <span style="font-family: Courier New,Courier,monospace;">contacts_list_destroy()</span> function:</p>
<pre class="prettyprint">
contacts_list_destroy(list, true);
</pre>
</li>

</ol>

<h2 id="delete2" name="delete2">Deleting a Record</h2>

<p>To delete a record, use the <span style="font-family: Courier New,Courier,monospace;">contacts_db_delete_record()</span> function with the view URI as the first parameter and the record ID as the second parameter.</p>

<p>The following example deletes a contact record:</p>

<pre class="prettyprint">
int id = ... // Get the record ID

error_code = contacts_db_delete_record(_contacts_contact._uri, id);
</pre>

<p>If you only have the record handle, retrieve the ID first:</p>

<pre class="prettyprint">
error_code = contacts_record_get_int(record, _contacts_contact.id, &amp;id);
</pre>

<h2 id="link2" name="link2">Linking Persons</h2>

<p>Linking one person to another is a useful method for combining contacts under a single person.</p>

<p>To link 2 persons and manage the linked person:</p>

<ul>

<li>
<p>Link a person to another person using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_link_person()</span> function with the corresponding person IDs.</p>

<p>The following example first retrieves the person IDs using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_int()</span> function and then links the persons:</p>
<pre class="prettyprint">
// Get the ID of the first person
contacts_record h record1;
int first_person_id;
int error_code = contacts_record_get_int(record1, _contacts_contact.person_id, &amp;first_person_id);

// Get the ID of the second person
contacts_record h record2;
int second_person_id;
error_code = contacts_record_get_int(record2, _contacts_contact.person_id, &amp;second_person_id);

// Link the persons
contacts_person_link_person(first_person_id, second_person_id);

int person_id = first_person_id;
</pre>
</li>

<li>
<p>Set the default properties for the linked person.</p>
<p>Set the default properties from one of the associated contacts using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_set_default_property()</span> function. The first parameter uses the values of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__PERSON__MODULE.html#ga641465951ce76daa56bb430b37cc8d90">contacts_person_property_e</a> enumeration, which defines the available default properties for a person.</p>
<p>For example, to set the person&#39;s default phone number based on the number of one of the associated contacts:</p>
<ol type="a">
<li><p>Retrieve the contact whose phone number you want to use.</p></li>
<li><p>Retrieve the correct phone number record associated with the contact using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_child_record_at_p()</span> function.</p></li>
<li><p>Retrieve the phone number ID from the phone number record using the <span style="font-family: Courier New,Courier,monospace;">contacts_record_get_int()</span> function with the <span style="font-family: Courier New,Courier,monospace;">_contacts_number</span> view.</p></li>
<li><p>Set the phone number as the default for the person using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_set_default_property()</span> function.</p></li>
</ol>
<pre class="prettyprint">
contacts_record_h record;
int error_code = -1;

// Get the contact record

// Get the phone number record
contacts_record_h record_number;
error_code = contacts_record_get_child_record_at_p(record, _contacts_contact.number, 0, &amp;record_number);

// Get the phone number ID
int number_id;
error_code = contacts_record_get_int(record_number, _contacts_number.id, &amp;number_id);
error_code = contacts_record_destroy(record_number, true);

// Set the phone number as the default for the person
error_code = contacts_person_set_default_property(CONTACTS_PERSON_PROPERTY_NUMBER, person_id, number_id);
</pre>
</li>

<li>
<p>Retrieve the default properties of the linked person using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_get_default_property()</span> function.</p>

<p>For example, to retrieve the default email address:</p>
<ol type="a">
<li>
<p>Retrieve the ID of the default email record using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_get_default_property()</span> function with the <span style="font-family: Courier New,Courier,monospace;">CONTACTS_PERSON_PROPERTY_EMAIL</span> property:</p>
<pre class="prettyprint">
int person_email_number;
error_code = contacts_person_get_default_property(CONTACTS_PERSON_PROPERTY_EMAIL, person_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;person_email_number);
</pre>
</li>
<li>
<p>Retrieve the default email record using the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_record()</span> function with the email record ID:</p>
<pre class="prettyprint">
contacts_record_h email_record;
error_code = contacts_db_get_record(_contacts_email._uri, person_email_number, &amp;email_record);
</pre>
</li>
<li>
<p>Retrieve the email address from the email record:</p>
<pre class="prettyprint">
char *default_email;
error_code = contacts_record_get_str_p(email_record, _contacts_email.email, &amp;default_email);

// Use default_email

error_code = contacts_record_destroy(email_record, true);
</pre>
</li>
</ol>
</li>

<li>
<p>Unlink a contact from the linked person using the <span style="font-family: Courier New,Courier,monospace;">contacts_person_unlink_contact()</span> function. The function removes the contact (second parameter) from the person (first parameter), creates a new person (third parameter), and links the contact to the new person.</p>
<pre class="prettyprint">
int contact_id = ... // Get the contact ID
int unlinked_person_id;

error_code = contacts_person_unlink_contact(person_id, contact_id, &amp;unlinked_person_id);
</pre>
</li>

</ul>

<h2 id="settings" name="settings">Managing Contact Settings</h2>

<p>To manage the display and sorting order settings for contacts:</p>

<ol>

<li>
<p>Check the current display order using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_get_name_display_order()</span> function. The display order defines the order in which contacts (names) are displayed on the device screen.</p>
<pre class="prettyprint">
contacts_name_display_order_e display_order;
contacts_setting_get_name_display_order(&amp;display_order);
// Now you have the display order
sprintf(&quot;Display order: %s&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display_order==CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST ?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST&quot; : &quot;CONTACTS_NAME_DISPLAY_ORDER_LASTFIRST&quot;);
</pre>
</li>

<li>
<p>Check the current sorting order using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_get_name_sorting_order()</span> function. The sorting order defines the order in which contact records are returned.</p>
<pre class="prettyprint">
contacts_name_sorting_order_e sorting_order;
contacts_setting_get_name_sorting_order(&amp;sorting_order);
// Now you have the sorting order
sprintf(&quot;Sorting order: %s&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sorting_order==CONTACTS_NAME_SORTING_ORDER_FIRSTLAST ?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;CONTACTS_NAME_SORTING_ORDER_FIRSTLAST&quot; : &quot;CONTACTS_NAME_SORTING_ORDER_LASTFIRST&quot;);
</pre>
</li>

<li>
<p>Change the display and sorting orders using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_set_name_display_order()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_set_name_sorting_order()</span> functions. Both functions use as a parameter a value of an enumeration: <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__SETTING__MODULE.html#ga0b52839d82e7ca998436b174e1f807d8">contacts_name_display_order_e</a> and <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__SETTING__MODULE.html#ga28fdacd75efe1b14b33a3215fc5c3854">contacts_name_sorting_order_e</a> that define the available display and sorting orders.</p>
<pre class="prettyprint">
contacts_setting_set_name_display_order(CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST);

contacts_setting_set_name_sorting_order(CONTACTS_NAME_SORTING_ORDER_FIRSTLAST);
</pre>

</li>

<li>
<p>Receive a notification whenever the display or sorting order changes:</p>
<ol type="a">
<li><p>Register callbacks using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_add_name_display_order_changed_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_add_name_sorting_order_changed_cb()</span> functions.</p></li>
<li>
<p>Define the order change callbacks.</p>
<p>The following example shows how to print a message when the display or sorting order changes:</p>
<pre class="prettyprint">
static void
display_changed_cb(contacts_name_display_order_e name_display_order, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;changed display order: %s&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name_display_order==CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST ?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;CONTACTS_NAME_DISPLAY_ORDER_FIRSTLAST&quot; : &quot;CONTACTS_NAME_DISPLAY_ORDER_LASTFIRST&quot;);
}

static void
sorting_changed_cb(contacts_name_sorting_order_e name_display_order, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;changed sorting order: %s&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name_display_order==CONTACTS_NAME_SORTING_ORDER_FIRSTLAST ?
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;CONTACTS_NAME_SORTING_ORDER_FIRSTLAST&quot; : &quot;CONTACTS_NAME_SORTING_ORDER_LASTFIRST&quot;);
}
</pre>
<p>To track the changes, implement a timeout function after setting the callbacks.</p>
</li>
<li><p>When no longer needed, unregister the callbacks using the <span style="font-family: Courier New,Courier,monospace;">contacts_setting_remove_name_display_order_changed_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">contacts_setting_remove_name_sorting_order_changed_cb()</span> functions.</p></li>
</ol>
</li>

</ol>

<h2 id="sim" name="sim">Importing Contacts from the SIM Card</h2>

<p>To import contacts from the SIM card:</p>

<ol>

<li>
<p>Make sure the SIM card has been initialized:</p>
<pre class="prettyprint">
bool completed = false;
contacts_sim_get_initialization_status(&amp;completed);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;SIM %s completed&quot;, completed ? &quot;&quot; : &quot;not &quot;);
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">You cannot access contacts on a SIM card that has not been initialized.</td>
        </tr>
    </tbody>
</table>
</li>

<li>
<p>Import the contacts:</p>
<pre class="prettyprint">
int error_code = contacts_sim_import_all_contacts();
</pre>
</li>

</ol>

<h2 id="import" name="import">Importing from vCard</h2>

<p>Importing contacts from a vCard file involves parsing the vCard file for contacts and inserting the parsed contacts into the contact database. You have the following options for parsing a vCard file:</p>

<ul>
<li><p>Parse a vCard stream of the file. This option gives you a list of all contact records in a single function call, but you must first create the vCard stream.</p></li>
<li><p>Parse the file directly. This option requires that you use a callback to handle each parsed contact record separately.</p></li>
</ul>

<p>To import contacts from vCard streams:</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">This use case imports contacts from every vCard file in a given directory.</td>
        </tr>
    </tbody>
</table>

<ol>

<li>
<p>Retrieve the path to the source directory containing the vCard files you want to import.</p>
<p>The following example retrieves the path to the downloads directory of the device&#39;s internal storage:</p>
<pre class="prettyprint">
int internal_storage_id;
char *vcf_path = NULL;

// Handle the storages found on the device
static bool
storage_cb(int storage_id, storage_type_e type, storage_state_e state, const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Check whether the storage is the device&#39;s internal storage
&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the internal storage ID
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Internal storage found, end the callback loop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Internal storage not found, continue the callback loop
&nbsp;&nbsp;&nbsp;return true;
}

// Get the source directory path
void
get_storage_path()
{
&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;// Get the storages available on the device
&nbsp;&nbsp;&nbsp;// Handle each storage in the storage_cb() callback
&nbsp;&nbsp;&nbsp;error_code = storage_foreach_device_supported(storage_cb, NULL);

&nbsp;&nbsp;&nbsp;// Get the absolute path to the downloads directory of the device&#39;s internal storage
&nbsp;&nbsp;&nbsp;error_code = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_DOWNLOADS, &amp;path);
&nbsp;&nbsp;&nbsp;if (error_code != STORAGE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vcf_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Create a vCard stream of each vCard file in the source directory. You can do this with the <span style="font-family: Courier New,Courier,monospace;">dirent</span> structure and the directory stream functions available in the <span style="font-family: Courier New,Courier,monospace;">&lt;dirent.h&gt;</span> header file.</p>
<p>The following example implements a <span style="font-family: Courier New,Courier,monospace;">while</span> loop that cycles through the vCard files in the source directory and creates a vCard stream of each file:</p>
<pre class="prettyprint">
// Open a directory stream for the source directory
DIR *dir = opendir(vcf_path);

// Parse the directory stream for directory entries (dirent)
struct dirent *pDirent = NULL;

if (dir == NULL)
{
&nbsp;&nbsp;&nbsp;free(vcf_path);

&nbsp;&nbsp;&nbsp;return;
}

if (dir)
{
&nbsp;&nbsp;&nbsp;while ((pDirent = readdir(dir)) != NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the directory entry is not a regular file,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skip to the next directory entry
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pDirent-&gt;d_type != DT_REG)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the file is not a vCard file,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skip to the next directory entry
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *extension = strrchr(pDirent-&gt;d_name, &#39;.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!extension || strcmp(extension, &quot;.vcf&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;file %s&quot;, pDirent-&gt;d_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the vCard file path
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *file_path = malloc(strlen(vcf_path) + strlen(pDirent-&gt;d_name) + 4);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(file_path, &quot;%s/%s&quot;, vcf_path, pDirent-&gt;d_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the vCard file does not contain any records,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skip to the next directory entry
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int error_code = contacts_vcard_get_entity_count(file_path, &amp;count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (count &lt; 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Calculate the vCard file size
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE *fp = fopen(file_path, &quot;r&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fseek(fp, 0, 2) != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int bufsize = ftell(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rewind(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;file size: %i&quot;, bufsize);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bufsize &lt; 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create the vCard stream
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *vcard_stream = malloc(sizeof(char) * (bufsize));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(vcard_stream, &#39;\0&#39;, sizeof(vcard_stream));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (fp != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char str[150];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (fgets(str, 150, fp) != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(vcard_stream + strlen(vcard_stream), &quot;%s&quot;, str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;
</pre>
</li>

<li>
<p>Parse the vCard streams for contacts using the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contacts()</span> function. The function returns a list of all contact records parsed from the stream.</p>
<p>The following example first parses a list of contact records from the vCard stream and then iterates through the list inserting each record to the contact database:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_list_h contacts_list;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_h record;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the contact list from the vCard stream
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_vcard_parse_to_contacts(vcard_stream, &amp;contacts_list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_vcard_parse_to_contacts failed: %d&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(vcard_stream);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Iterate through the contact list
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (contacts_list_get_current_record_p(contacts_list, &amp;record) == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_db_insert_record(record, &amp;id); // Add to the database
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_db_insert_record failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Move to the next record
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(contacts_list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = contacts_list_destroy(contacts_list, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;contacts_list_destroy failed: %d&quot;, error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free (file_path);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;closedir(dir);
}
</pre>
</li>
</ol>

<p>To import contacts directly from a vCard file:</p>

<ol>

<li>
<p>Parse the vCard file using the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contact_foreach()</span> function. The function invokes a callback for each contact record it parses from the file.</p>
<p>The following example first defines the vCard file path and then parses the vCard file:</p>
<pre class="prettyprint">
// Get the vCard file path
char *resource_path = app_get_resource_path();
char vcard_path[1024] = {0};
snprintf(vcard_path, sizeof(vcard_path), "%s/vcard.vcf", resource_path);
free(resource_path);

// Get the contacts from the vCard file
int error_code = contacts_vcard_parse_to_contact_foreach(vcard_path, _contacts_vcard_cb, NULL);
</pre>
<p>To check how many records are contained in a vCard file, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_get_entity_count()</span> function.</p>
</li>

<li>
<p>Implement the callback for handling the contact records parsed from the vCard file. You can use the callback to insert the records into the contact database.</p>
<p>The callback is invoked separately for each parsed contact record. As long as the callbacks return <span style="font-family: Courier New,Courier,monospace">true</span>, the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_parse_to_contact_foreach()</span> function continues to parse new contacts.</p>
<p>The following example implements a callback that inserts the parsed record into the contact database:</p>
<pre class="prettyprint">
bool
_contacts_vcard_cb(contacts_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;int id = -1;
&nbsp;&nbsp;&nbsp;int error_code = contacts_db_insert_record(record, &amp;id);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

</ol>

<h2 id="export" name="export">Exporting to vCard</h2>

<p>To export all contact records from the contact database and store them to a single vCard file:</p>

<ol>

<li>
<p>Define the location of the vCard file where the contacts are to be exported, and retrieve a list of all records using the <span style="font-family: Courier New,Courier,monospace;">contacts_db_get_all_records()</span> function:</p>
<pre class="prettyprint">
char file_path[] = &quot;/path/contacts.vcf&quot;;
contacts_list_h list = NULL;
error_code = contacts_db_get_all_records(_contacts_contact._uri, 0, 0, &amp;list);
</pre>
</li>
<li>
<p>Open the vCard file for writing:</p>
<pre class="prettyprint">
FILE *file = fopen(file_path, &quot;w&quot;);
</pre>
</li>

<li>
<p>Loop through the contact list, export each contact record in the vCard format, and write the record to the file:</p>
<ul>
<li><p>To export a contact from the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_contact()</span> function.</p></li>
<li><p>To export details from the <span style="font-family: Courier New,Courier,monospace;">_contacts_person</span> view, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_person()</span> function.</p></li>
<li><p>To export details from the <span style="font-family: Courier New,Courier,monospace;">_contacts_my_profile</span> view, use the <span style="font-family: Courier New,Courier,monospace;">contacts_vcard_make_from_my_profile()</span> function.</p></li>
</ul>
<p>The following example uses the <span style="font-family: Courier New,Courier,monospace;">_contacts_contact</span> view, but other views work the same way.</p>
<pre class="prettyprint">
contacts_record_h contact;
char *vcard_stream;

while (contacts_list_get_current_record_p(list, &amp;record) == 0)
{
&nbsp;&nbsp;&nbsp;error_code = contacts_vcard_make_from_contact(record, &amp;vcard_stream);
&nbsp;&nbsp;&nbsp;// Save to file
&nbsp;&nbsp;&nbsp;fwrite(vcard_stream, 1, strlen(vcard_stream), file);
&nbsp;&nbsp;&nbsp;free(vcard_stream);
&nbsp;&nbsp;&nbsp;error_code = contacts_list_next(list);
}
fclose(file);
contacts_list_destroy(list, true);
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>