<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Your First Tizen Wearable Native Application</title>  
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#create">Creating a Project</a></li>
			<li><a href="#build">Building Your Application</a></li>
			<li><a href="#run">Running Your Application</a></li>
			<li><a href="#build_ui">Building a Simple UI</a></li>		
		</ul>
		<p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../process/creating_app_project_n.htm">Creating the Application Project</a></li>
            <li><a href="../process/setting_properties_n.htm">Setting Project Properties</a></li>
			<li><a href="../process/app_dev_process_n.htm#build">Building the Application</a></li>
			 <li><a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm">Emulator</a></li>
	    <li><a href="../process/running_app_n.htm">Running Applications</a></li>
        </ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Your First Tizen Wearable Native Application</h1>

<p><strong>Welcome to Tizen wearable native application development!</strong></p>

<p>A wearable native application is created using the C language, and can be run on Tizen wearable devices. The application uses the native API, which provides various interfaces to the device hardware allowing you to take advantage of numerous capabilities tailored to run with limited device resources.</p>

<p>Study the following instructions to help familiarize yourself with the Tizen <a href="../process/app_dev_process_n.htm">native application development process</a> as well as using the Tizen SDK and installing the created application on the Emulator or target device. With the instructions, you can create and run a basic wearable native application, which displays some text on the screen with no user interaction:</p>

<ol>
<li>Before you get started with developing Tizen applications, download and install the <a href="../../../../org.tizen.download/html/cover_page.htm">Tizen SDK</a> (software development kit).
<p>For more information about the installation process, see the <a href="../../../../org.tizen.download/html/install/installing_sdk.htm">installation guide</a>.</p>
</li>
<li><a href="#create">Create a wearable native project</a> using the Tizen IDE.
<p>This step shows how you can use a predesigned project template that creates all the basic files and folders required for your project.</p></li>
<li><a href="#build">Build the application</a>.
<p>After you have implemented code for the features you want, this step shows how you can build the application to validate and compile the code.</p></li>
<li><a href="#run">Run the application</a>.
<p>This step shows how you can run the application on the emulator or a real target device.</p></li>
<li><a href="#build_ui">Build a UI</a>.
<p>This step shows how you can make small alterations to the application UI to improve the usability of your application.</p></li>
</ol>

<p>When you are developing a more complex application, you can take advantage of the <a href="../../../../org.tizen.devtools/html/native_tools/tools_n.htm">native tools included in the SDK</a> to ease the tasks of creating functionality and designing the application UI.</p>

<p><strong>Updating 2.3.1 Wearable Packages</strong></p>

<p>To develop wearable applications in the latest Tizen SDK, you must install the 2.3.1 wearable packages separately:</p>

<ol>
<li>Launch the Update Manager by going to <strong>Start &gt; All Programs &gt; Tizen SDK-&lt;version&gt; &gt; Update Manager-&lt;version&gt;</strong>.</li>
<li>In the <strong>All Packages</strong> tab, download all packages for <strong>2.3.1 Wearable</strong>.
<p align="center"><img alt="Download packages" src="../../images/first_app_download_wn.png" /></p></li>
</ol>

<h2 id="create">Creating a Project</h2>

<p>The following example shows you how to create and configure a basic wearable native application project in the Tizen IDE. An application project contains all the files that make up an application.</p>

<p>The following figure illustrates the application to be created. The application screen displays the <strong>Hello Tizen</strong> text and no user interaction is provided. If you click the <strong>Back</strong> key on the device, the application moves to the background.</p>

<p class="figure">Figure: Wearable native Basic UI application</p>
<p align="center"><img alt="Wearable native Basic UI application" src="../../images/basic_app_running_wn.png" /></p>

<p>To create the application project:</p>

<ol>

<li><p>Launch the Tizen IDE.</p></li>

<li>
<p>Make sure the <strong>Tizen Native</strong> perspective is selected in the top right corner of the IDE window. </p>
<p align="center"><img alt="Checking the perspective" src="../../images/change_perspective_n.png" /></p>
<p>If not, select it. If the perspective is not visible, in the IDE menu, select <strong>Window &gt; Open Perspective &gt; Other &gt; Tizen Native</strong>, and click <strong>OK</strong>.</p>
</li>

<li>
<p>In the IDE menu, select <strong>File &gt; New &gt; Tizen Native Project</strong>.</p>
<p align="center"><img alt="Creating a new Tizen Native project" src="../../images/create_project_1_n.png" /></p>
<p>The Project Wizard opens.</p>
</li>

<li>
<p>In the Project Wizard, define the project details.</p>
<p>The Project Wizard is used to create the basic application skeleton with the required folder structure and mandatory files. You can easily create different applications by selecting an applicable template or sample for the Project Wizard to use.</p>
<ol type="a">
<li><p>Select the <strong>Template</strong> tab and the <strong>WEARABLE-[version] &gt; Basic UI</strong> template. The version depends on the SDK version you have installed and with which you are developing the application.</p></li>
<li><p>Change the project name, if you want.</p></li>
<li><p>Leave all other fields in the Project Wizard to their default values, and click <strong>Finish</strong>.</p></li>
</ol>
<p align="center"><img alt="Defining the project details" src="../../images/create_project_2_wn.png" /></p>
<p>The Project Wizard sets up the project, creates the application files using the default content from the template, and closes. For more information about the Project Wizard and the available templates, see <a href="../../../../org.tizen.devtools/html/native_tools/project_wizard_n.htm">Project Wizard</a>.</p>
</li>

</ol>

<p>You can see the created project in the <strong>Project Explorer</strong> view. The most important files and folders include:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">inc</span>: Default folder for included source files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">res</span>: Folder for resource files used by the application only</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">shared</span>: Folder for resource files to be shared with other applications</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">src</span>: Folder for source code files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">lib</span>: Folder for external library files</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span>: Manifest file used by the platform to install and launch the application</p></li>
</ul>

<p class="figure">Figure: Application in the Project Explorer</p>
<p align="center"><img alt="Application in the Project Explorer" src="../../images/basic_app_project_explorer_wn.png" /></p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">You can <a href="#configuration">view and modify the application configuration</a> in the manifest editor. In this example, no configuration changes are required.</td>
        </tr>
    </tbody>
</table>

<p>Your application project is now ready for further actions. Next, build the application.</p>

<h3 id="configuration" name="configuration">Managing the Application Configuration</h3>

<p>To view and modify the application configuration:</p>

<ol>

<li>
<p>In the <strong>Project Explorer</strong> view, double-click the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file of the application. The IDE opens the file in the manifest editor.</p>
</li>

<li>
<p>In the manifest editor, view and modify the configuration details using the various tabs:</p>
<p align="center"><img alt="Configuring the application" src="../../images/basic_app_config_wn.png" /></p>
<ul>
<li><p><strong>Overview</strong>: Define general information, such as the package, label, and icon of the application.</p></li>
<li><p><strong>Features</strong>: Define required software and hardware features. This information is used for application filtering in the Tizen market place.</p></li>
<li><p><strong>Privileges</strong>: Define the security-sensitive APIs or API groups accessed and used by the application.</p></li>
<li><p><strong>Localization</strong>: Define localized values for the application label, description, and icon.</p></li>
<li><p><strong>Advanced</strong>: Define advanced features, such as application metadata, data control for services, application control functionalities, and account details.</p></li>
<li>
<p><strong>tizen-manifest.xml</strong>: View and edit the source code of the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file. Changes made and saved on the other tabs are reflected in the source code and vice versa.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file must conform to both the XML file format and the Tizen native application specification requirements. Editing the file in the source code view is intended for advanced users only.</td>
        </tr>
    </tbody>
</table>
</li>
</ul>
</li>

<li><p>To save any changes, in the IDE menu, select <strong>File &gt; Save</strong>.</p></li>

</ol>

<p>For more information about configuring the application, see <a href="../process/setting_properties_n.htm#manifest">Setting the Application Manifest</a>.</p>
 
<h2 id="build">Building Your Application</h2>

<p>After you have created the application project, you can implement the required features. In this example, only the default features from the project template are used, and no code changes are required.</p>
<p>When your application code is ready, you must build the application. The building process performs a validation check and compiles your files.</p>

<p>You can build the application in the following ways:</p>

<ul>

<li>
<p><strong>Automatically</strong></p>
<p>The automatic build means that the IDE automatically rebuilds the application whenever you change a source or resource file and save the application project.</p>
<p>To use the automatic build:</p>
<ol>
<li>Select the project in the <strong>Project Explorer</strong> view.</li>
<li>In the IDE menu, select <strong>Project &gt; Build Automatically</strong>.
<p align="center"><img alt="Using the automatic build" src="../../images/build_automatic_n.png" /></p>
<p>A check mark appears next to the menu option.</p></li>
</ol>

<p>You can toggle the automatic build on and off by reselecting <strong>Project &gt; Build Automatically</strong>.</p>
</li>

<li>
<p><strong>Manually</strong></p>
<p>The manual build means that you determine yourself when the application is built.</p>
<p>To manually build the application, right-click the project in the <strong>Project Explorer</strong> view and select <strong>Build Project</strong>.</p>
<p class="figure">Figure: Manually building the application</p>
<p align="center"><img alt="Manually building the application" src="../../images/build_manual_wn.png" /></p>
<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>In the IDE menu, select <strong>Project &gt; Build Project</strong>.</li>
<li>Press the <strong>F10</strong> key.</li>
<li>Click the hammer icon (<img alt="Building the application from the toolbar" src="../../images/build_icon_mn.png" />) in the toolbar.
</li>
</ul>
</li>
</ul>

<p>You can have more than one build configuration. To see the current active configuration or change it, right-click the project in the <strong>Project Explorer</strong> view and select <strong>Build Configurations &gt; Set Active</strong>. The default configuration is <span style="font-family: Courier New,Courier,monospace">Debug</span>. For more information, see <a href="../process/building_app_n.htm">Building Applications</a>.</p>


<p>After you have built the application, run it.</p>
 
 <h2 id="run">Running Your Application</h2>

<p>You can run the application on the emulator or a real target device.</p>

<h3 id="emulator">Running on the Emulator</h3>

<p>To run the application on the emulator:</p>

<ol>
<li>Create and launch an emulator instance in the <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#manager">Emulator Manager</a>:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, launch the Emulator Manager by clicking the related icon.
<p align="center"><img src="../../images/emulator_icon.png" alt="Emulator manager icon" /></p>
</li>

<li>In the Emulator Manager, open the <strong>Create New Emulator</strong> drop-down list and select <strong>wearable</strong>. 
<p align="center"><img src="../../images/emulator_new_wearable.png" alt="Emulator manager" /></p>
</li>

<li>Modify the emulator options, and click <strong>Confirm</strong>. 
<p>You can leave the options to their default values.</p>
<p align="center"><img src="../../images/emulator_settings_wearable.png" alt="Emulator options" /></p>
</li>

<li>To launch the emulator instance, select the emulator from the list and click the play icon.
<p align="center"><img src="../../images/emulator_launch_wearable.png" alt="Launch the emulator" /></p>

<p>The emulator is launched in its own window.</p>
<p>You can also see the new emulator instance in the <strong>Connection Explorer</strong> view. To view the emulator folder structure, click the arrow next to the emulator instance.</p>
<p align="center"><img src="../../images/emulator_window_wearable.png" alt="Emulator" /></p>
</li>
</ol>
</li>

<li>Generate a security profile.
	<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#emulator" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>
<li>Run the application:
<ol type="a">
<li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Native Application</strong>.
<p align="center"><img src="../../images/app_run_wn.png" alt="Run the application" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>
</li>

<li>Confirm that the application launches on the emulator.
<p align="center"><img src="../../images/emulator_running_wn.png" alt="Application running in the emulator" /></p>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">If the emulator display has switched off, you cannot see the application launch. To switch the display on, click the <strong>Power</strong> key (in the right bottom corner of the emulator).</td>
    </tr>
   </tbody>
  </table>

<p>While the application is running, the IDE <strong>Log</strong> view shows the log, debug, and exception messages from the methods defined in the log macros. To see the view, in the IDE menu, go to <strong>Window &gt; Show View &gt; Log</strong>.</p>
</li>
</ol>
</li>
</ol>

<p>For more information on using the emulator features, see <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#controls">Emulator Control Keys and Menu</a>, <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#ecp">Emulator Control Panel</a>, <a href="../../../../org.tizen.devtools/html/common_tools/event_injec.htm">Event Injector</a>, and <a href="../../../../org.tizen.devtools/html/common_tools/emulator_features.htm">Extended Emulator Features</a>.</p>



<h3 id="target">Running on a Target Device</h3>

<p>To run the application on a target device:</p>

<ol>
<li>Connect the wearable target device to your computer:
<ol type="a">
<li>Define settings in the device:
<ul>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Bluetooth.
<p align="center"><img src="../../images/emulator_target_bt.png" alt="Switch on Bluetooth" /></p>
</li>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Wi-Fi.
<p>The device and the computer must be connected to the same Wi-Fi network.</p>
<p>Note the IP address the device is using.</p>
<p align="center"><img src="../../images/emulator_target_wifi.png" alt="Switch on Wi-Fi" /></p>
</li>
<li>Go to <strong>Settings &gt; Gear info</strong>, and switch on the debugging mode.
<p align="center"><img src="../../images/emulator_target_debug.png" alt="Switch on debugging" /></p>
</li></ul>
</li>
<li id="remote_device">Use the Remote Device Manager to connect the wearable device:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, launch the Remote Device Manager by clicking the related icon.
<p align="center"><img src="../../images/remote_conn_mgr_ww.png" alt="Launch the Remote Device Manager" /></p>
</li>
<li>In the <strong>Remote Device Manager</strong> window, click <strong>New</strong>.
<p align="center"><img src="../../images/remote_conn_new_ww.png" alt="Add new device" /></p>
</li>
<li>In the <strong>Add Device</strong> window, enter the device and network details (use the IP address you noted before), and click <strong>Add</strong>.
<p align="center"><img src="../../images/remote_conn_add_ww.png" alt="Define device details" /></p>
</li>
<li>In the <strong>Remote Device Manager</strong> window, select the new device and click <strong>Connect</strong>.
<p align="center"><img src="../../images/remote_connect_ww.png" alt="Connect the device" /></p>
</li>
</ol>
</li>
<li>The device asks for user confirmation. To allow Gear to read log data, copy files to and from your computer, and install the application manually, click the accept mark.
<p align="center"><img src="../../images/remote_allow_gear_ww.png" alt="Allow Gear to access data" /></p>
</li>
<li>In the <strong>Connection Explorer</strong> view, confirm that the device is connected (shown in the device list).
<p align="center"><img src="../../images/remote_connected_ww.png" alt="Device is connected" /></p>
</li>
</ol>
</li>
<li>Generate an author certificate.
<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#CommercialDevices" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>

<li>Run the application:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, select the device.</li>
<li>In <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Native Application</strong>. 

<p align="center"><img src="../../images/app_run_wn.png" alt="Run the application on a target device" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>

</li>
<li>Confirm that the application launches in the target device.</li>
</ol>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The application is launched using the default debug run configuration. To create and use another configuration:
	 <ol>
	 <li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Run Configurations</strong>.</li>
	 <li>In the <strong>Run Configurations</strong> window, click the <strong>New Launch Configuration</strong> icon (<img alt="New Launch Configuration" src="../../images/run_new_config_wn.png" />), define the configuration details, and launch the application by clicking <strong>Run</strong>.
	 	 <p align="center"><img alt="Run Configurations" src="../../images/run_configurations_n.png" /></p></li>
	 </ol></td> 
    </tr> 
   </tbody> 
  </table> 
  
 <p>If you want to run your application without a local device, see <a href="../../../../org.tizen.devtools/html/common_tools/connection_explorer.htm#remote">Testing with a Remote Device</a>.</p> 
</li>
</ol>

<h2 id="build_ui">Building a Simple UI</h2>

<p>The following steps demonstrate how to create a simple user interface for a circular wearable device using EFL. The following figure shows the screen you can create with these instructions.</p>
 
<p class="figure">Figure: Wearable native UI</p> 
<p align="center"><img alt="Wearable native UI" src="../../images/emulator_running_wn.png" /></p> 

<p>This guide consists of the following:</p>
<ol>
<li>Defining the data structure</li> 
<li>Registering life-cycle callbacks</li>
<li>Creating UI objects</li>
</ol>

<h3 id="data" name="data">Defining the Data Structure</h3>

<p>A pointer to important objects is stored in the following data structure:</p>

<pre class="prettyprint">
struct appdata {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;
};
typedef struct appdata appdata_s;
</pre>

<h3 id="register" name="register">Registering Life-cycle Callbacks</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">main()</span> function has callbacks that manage specific parts of the application life-cycle:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">app_create</span> 
<ul><li>Called when the application process starts.</li>
<li>Used to create UI components.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_terminate</span> 
<ul><li>Called while the application process is terminating.</li>
<li>Called after the main loop quits.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_resume</span> (UI applications only)
<ul><li>Called when the application window is shown.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_pause</span> (UI applications only)
<ul><li>Called when the application window is totally hidden.</li>
</ul></li>
<li><span style="font-family: Courier New,Courier,monospace">app_control</span> 
<ul><li>Called after the <span style="font-family: Courier New,Courier,monospace">app_create</span> callback when the process starts or called when a launch request is received while the process is running.</li>
<li>Can receive <span style="font-family: Courier New,Courier,monospace">app_control</span> data (parameters for launching the application).</li>
<li>Used to implement parameter-specific actions of the application.</li>
</ul></li></ul>

<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;app_main() failed. Err=%d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<h3 id="ui" name="ui">Creating UI Objects</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">app_create()</span> function is called when the process starts, and it calls the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>

<pre class="prettyprint">
static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;   Hook to take necessary actions before the main event loop starts
&nbsp;&nbsp;&nbsp;&nbsp;   Initialize UI resources and application data
&nbsp;&nbsp;&nbsp;&nbsp;   If this function returns true, the application main loop starts
&nbsp;&nbsp;&nbsp;&nbsp;   If this function returns false, the application is terminated
&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>In the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, you can create a simple user interface that consists of window, conformant, and label objects:</p>

<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Window */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;&nbsp;/* Conformant */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;&nbsp;/* Label */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;&lt;align=center&gt;Hello Tizen&lt;/align&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;label);

&nbsp;&nbsp;&nbsp;&nbsp;/* Show the window after the base GUI is set up */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<p>To break down the above code:</p>

<ul>
<li>
<p>Window objects can be created by using the <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span> function and adding callbacks on window objects. One of the callbacks handles the <span style="font-family: Courier New,Courier,monospace">delete,request</span> event when the window is to be closed, and the other handles the <span style="font-family: Courier New,Courier,monospace">EEXT_CALLBACK_BACK</span> event when the hardware back key is pressed.</p>

<pre class="prettyprint">
/* Window */
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

if (elm_win_wm_rotation_supported_get(ad-&gt;win)) {
&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}
evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);
</pre>
</li>
<li>
<p>You can create a conformant object that is based on the window.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">elm_win_indicator_mode_set()</span> function decides whether the indicator is visible, and the <span style="font-family: Courier New,Courier,monospace">elm_win_indicator_opacity_set()</span> function sets the indicator opacity mode.</p>
<p>You can set the conformant object as a resize object of the window by using the <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> function. It means that the conformant size and position are controlled by the window object directly.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function makes the conformant object visible.</p>

<pre class="prettyprint">
/* Conformant */
ad-&gt;conform = elm_conformant_add(ad-&gt;win);
elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
evas_object_show(ad-&gt;conform);
</pre>
</li>
<li>
<p>You can add a label object for text by using the <span style="font-family: Courier New,Courier,monospace">elm_label_add()</span> function. It adds a new label to the parent (conformant object).</p>
<p>You can also set the text to the label by using the <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function.</p>

<pre class="prettyprint">
/* Label */
ad-&gt;label = elm_label_add(ad-&gt;conform);
elm_object_text_set(ad-&gt;label, &quot;&lt;align=center&gt;Hello Tizen&lt;/align&gt;&quot;);
evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_object_content_set(ad-&gt;conform, ad-&gt;label);
</pre>
</li>
<li>
<p>When all the UI components are ready, make the window object visible by using the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function:</p>

<pre class="prettyprint">
/* Show the window after the base GUI is set up */
evas_object_show(ad-&gt;win);
</pre>
</li></ul>

 

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

