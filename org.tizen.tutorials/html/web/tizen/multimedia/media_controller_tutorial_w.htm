<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Media Controller: Communication between the media controller server and client.</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#example1">Creating a new server</a></li>
            <li><a href="#example2">Getting a client and finding all active servers</a></li>
            <li><a href="#example3">Setting up a server</a></li>
            <li><a href="#example4">Sending requests from a client to a server</a></li>
            <li><a href="#example5">Receiving notifications from a server</a></li>
            <li><a href="#example6">Sending custom commands by a client</a></li>
            <li><a href="#example7">Receiving and handling custom commands by a server</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/multimedia/media_controller_w.htm">Media Controller Guide</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html">Media Controller API for Mobile Web</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/mediacontroller.html">Media Controller API for Wearable Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Media Controller: Communication between the media controller server and client.</h1>


<p>
This tutorial demonstrates how to use Media Controller API.  It shows how to develop server and client applications for controlling various media functions of the device.
In order to manage media using Media Controller API you have to develop two applications.  One is a client and the second is a server which directly manages media on the device.
The client sends requests to the server in order to change playback state, position modes etc.
</p>

<table class="note">
<tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">The Media Controller API is mandatory for both Tizen mobile and wearable profiles, which means that it is supported in all mobile and wearable devices.
     <p>All mandatory APIs are supported on the Tizen Emulators.</p></td>
    </tr>
   </tbody>
  </table>

<h2>Warm-up</h2>
<p>Become familiar with the Media Controller API basics by learning about:</p>
<ul>
  <li>
    <p>Creating a client and a server</p>
    <p><a href="#example1">Creating a new Media Controller server</a>.</p>
    <p>How to <a href="#example2">get a client</a> and how to find all active servers.</p>
  </li>
  <li>
    <p>Setting up connection between the client and the server and sending and receiving requests from the client to the server</p>
    <p>How to <a href="#example3">set up the server</a> to receive and handle requests from the client in order to change playback state and position.</p>
    <p>How to <a href="#example4">send requests</a> by the client to the server.</p>
  </li>
  <li>
    <p>Listenign changes on the server by the client</p>
    <p>How to <a href="#example5">set up a listener on the client</a> to receive notification of changes made by the server.</p>
  </li>
  <li>
    <p>Sending and handling custom commands</p>
    <p>How <a href="#example6">the client sends custom commands</a> to the server.</p>
    <p>How <a href="#example7">the server receives and handles</a> custom commands sent by the client.</p>
  </li>
</ul>

<h2 id="task" name="task">Task</h2>
<p>In this task, we will walk through how to change playback state and position by the Media Controller client and how to send custom commands from the client to the server.</p>

<div class="devicespecs-util mt7 clfix">
  <ul class="dutil">
    <li><a href="#" class="showA">Show All</a></li>
    <li class="none"><a href="#" class="hideA">Hide All</a></li>
  </ul>
</div>

<ul class="devicespecifications">

<li>
<div class="devicespec-tit">
  <h2 id="example1" name="example1" class="items-tit-h2">Creating a new server</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>Create new server.</p>
<ol>
<li>Create a media controller server using the <span style="font-family: Courier New,Courier,monospace">createServer()</span> method:
<pre class="prettyprint">
var mcServer = tizen.mediacontroller.createServer();
</pre>
</li>
</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example2" name="example2" class="items-tit-h2">Getting a client and finding all active servers</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>To create applications with media controller features, you have to learn how to get client and find media controller servers.</p>
<ol>
<li>Get the client using the <span style="font-family: Courier New,Courier,monospace">getClient()</span> method:

<pre class="prettyprint">
var mcClient = tizen.mediaController.getClient();
</pre>

</li>
<li>Before searching activated media controller servers define success handler implementing the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html#MediaControllerServerInfoArraySuccessCallback">MediaControllerServerInfoArraySuccessCallback</a> interface and optionally an error handler:

<pre class="prettyprint">
var mcServerInfo;

function findSuccessCallback(servers) {
&nbsp;&nbsp;&nbsp;console.log(&quot;Found &quot; + servers.length + &quot; servers&quot;);
&nbsp;&nbsp;&nbsp;if (servers.length &gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mcServerInfo = servers[0];
&nbsp;&nbsp;&nbsp;}
}

function findErrorCallback(e) {
&nbsp;&nbsp;&nbsp;console.log(&quot;Error name: &quot; + e.name + &quot; Error message: &quot; + e.message);
}
</pre>

</li>
<li>To get all media controller servers use <span style="font-family: Courier New,Courier,monospace">findServers()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html#MediaControllerClient">MediaControllerClient</a> interface:

<pre class="prettyprint">
mcClient.findServers(findSuccessCallback, findErrorCallback);</pre>

</li>
</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example3" name="example3" class="items-tit-h2">Setting up a server</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">
<p>Set up the server to receive requests from the client and to update state, position etc.</p>
<ol>
<li>Create <span style="font-family: Courier New,Courier,monospace">MediaControllerChangeRequestPlaybackInfoCallback</span> object which defines listeners for getting requests from a client:
<pre class="prettyprint">
var requestPlaybackInfoCb = {
  onplaybackstaterequest: function(state) {
    console.log('Request to change the playback state to: ' + state);
    mcServer.updatePlaybackState(state);
  },
  onplaybackpositionrequest: function(position) {
    console.log('Request to change the playback position to: ' + position);
    mcServer.updatePlaybackPosition(position);
  },
  onshufflemoderequest: function(mode) {
    console.log('Request to change the playback shufflemode to: ' + (mode ? 'TRUE' : 'FALSE'));
    mcServer.updateShuffleMode(mode);
  },
  onrepeatmoderequest: function(mode) {
    console.log('Request to change the playback repeat mode to: ' + (mode ? 'TRUE' : 'FALSE'));
    mcServer.updateRepeatMode(mode);
  }
};
</pre>
Every listener should invoke an appropriate function to update state, position and modes.  They are:
<ul>
<li><span style="font-family: Courier New,Courier,monospace">updatePlaybackState()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">updatePlaybackPosition()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">updateShuffleMode()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">updateRepeatMode()</span></li>
</ul>
These functions change the values  on the server and send an appropriate notifications to the client.
</li>

<li>Add listeners defined in <span style="font-family: Courier New,Courier,monospace">MediaControllerChangeRequestPlaybackInfoCallback</span> object to the server.
<pre class="prettyprint">
var watchId = mcServer.addChangeRequestPlaybackInfoListener(requestPlaybackInfoCb);
</pre>
The <span style="font-family: Courier New,Courier,monospace">watchId</span> variable stores the value which can be used in the future to remove the listeners from the server with the function
<span style="font-family: Courier New,Courier,monospace">removeChangeRequestPlaybackInfoListener</span>.
</li>

</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example4" name="example4" class="items-tit-h2">Sending requests from a client to a server</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>After getting client and finding servers you have to learn how to send request to the server. You can send requests to the server using  <span style="font-family: Courier New,Courier,monospace">sendPlaybackState(), sendPlaybackPosition(), endShuffleMode() or sendRepeatMode()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html#MediaControllerServerInfo">MediaControllerServerInfo</a> interface.</p>
<ol>
<li>In this example you can learn, how to send request to pause playback. Before sending request you can define optional success and error callback:

<pre class="prettyprint">
function successCallback() {
&nbsp;&nbsp;&nbsp;console.log(&quot;Playback has been paused.&quot;);
}

function errorCallback(e) {
&nbsp;&nbsp;&nbsp;console.log(&quot;Error name: &quot; + e.name + &quot; Error message: &quot; + e.message);
}
</pre>

</li>
<li>Send request to the server using <span style="font-family: Courier New,Courier,monospace">sendPlaybackState()</span> method:

<pre class="prettyprint">
mcServerInfo.sendPlaybackState(&quot;PAUSE&quot;, successCallback, errorCallback);
</pre>

</li>
</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example5" name="example5" class="items-tit-h2">Receiving notifications from a server</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>To create applications with media controller features you have to learn how to receive notifications from the server.</p>
<ol>
<li>Define needed variable:

<pre class="prettyprint">
var watcherId;
</pre>

</li>
<li>Define the event handlers for different notifications by implementing the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html#MediaControllerPlaybackInfoChangeCallback">MediaControllerPlaybackInfoChangeCallback</a> interface:

<pre class="prettyprint">
var playbackListener = {
&nbsp;&nbsp;&nbsp;onplaybackchanged: function(state, position) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Current playback state: &quot; + state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Current playback position: &quot; + position);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onshufflemodechanged: function(mode) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Shuffle mode changed to: &quot; + mode);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onrepeatmodechanged: function(mode) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; console.log(&quot;Repeat mode changed to: &quot; + mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onmetadatachanged: function(metadata) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Playback metadata changed: &quot; + JSON.stringify(metadata));
&nbsp;&nbsp;&nbsp;}
};
</pre>

</li>
<li>Register listener to start receiving notifications about playback:

<pre class="prettyprint">
watcherId = mcServerInfo.addPlaybackInfoChangeListener(playbackListener);
</pre>

</li>
<li>To stop receiving notifications, use <span style="font-family: Courier New,Courier,monospace">removePlaybackInfoChangeListener()</span> method:

<pre class="prettyprint">
mcServerInfo.removePlaybackInfoChangeListener(watcherId);
</pre>

</li>
</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example6" name="example6" class="items-tit-h2">Sending custom commands by a client</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>Except sending requests to the media controller server you have to learn also, how to send custom commands.</p>
<ol>
<li>Define your command:

<pre class="prettyprint">
var exampleCustomCommandData = {
&nbsp;&nbsp;&nbsp;myFilter: &quot;rock&quot;
};
</pre>

</li>
<li>Define success callback implementing the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/mediacontroller.html#MediaControllerSendCommandSuccessCallback">MediaControllerSendCommandSuccessCallback</a> interface and optionally an error callback:

<pre class="prettyprint">
function sendCommandSuccessCallback(response) {
&nbsp;&nbsp;&nbsp;console.log(&quot;Command executed with result: &quot; + JSON.stringify(response));
}

function sendCommandErrorCallback(e) {
&nbsp;&nbsp;&nbsp;console.log(&quot;Error name: &quot; + e.name + &quot; Error message: &quot; + e.message);
}
</pre>

</li>
<li>Send command to the server using the <span style="font-family: Courier New,Courier,monospace">sendCommand()</span> method.

<pre class="prettyprint">
mcServerInfo.sendCommand(&quot;myPlaylistFilter&quot;, sendCommandSuccessCallback, sendCommandErrorCallback);
</pre>

</li>
</ol>
</div>
</li>

<li>
<div class="devicespec-tit">
  <h2 id="example7" name="example7" class="items-tit-h2">Receiving and handling custom commands by a server</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
</div>

<div class="devicespec-con">

<p>Set up a server to receive and handle custom commands sent by a client.</p>
<ol>
<li>Create the <span style="font-family: Courier New,Courier,monospace">MediaControllerReceiveCommandCallback</span> object which defines a listener for receving custom commands from a client:

<pre class="prettyprint">
var commandReceiveListener = function(client, command, data) {
  console.log('command: ' + command + ' client: ' + client + ' data: ' + JSON.stringify(data));
  return { reply: 'response from server' };
};
</pre>
The included callback function returns the object with the response to the client.  The client can obtain this value as an argument of the success callback of the function
<span style="font-family: Courier New,Courier,monospace">sendCommand()</span>
invoked by the client when it is sending the custom command.
</li>

<li>Add the listener included in the created <span style="font-family: Courier New,Courier,monospace">MediaControllerReceiveCommandCallback</span> object to the server.
<pre class="prettyprint">
var watcherId = mcServer.addCommandListener(commandReceiveListener);
</pre>
The <span style="font-family: Courier New,Courier,monospace">watcherId</span> variable stores the value which can be used in the future to remove the listener from the server with the function
<span style="font-family: Courier New,Courier,monospace">removeCommandListener()</span>.
</li>
</ol>
</div>
</li>

</ul>



<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
