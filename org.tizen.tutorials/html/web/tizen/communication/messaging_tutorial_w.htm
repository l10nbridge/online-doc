<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Messaging: Managing and Receiving SMS, MMS, and Email Messages</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mw_icon_optional.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li>Message sending
			<ul class="toc">
            <li><a href="#Sending_Messages">Creating and Sending Messages</a></li>
            <li><a href="#Selecting_the_SIM_Card">Selecting the SIM Card for Sending Messages</a></li>
			</ul></li>
			<li><a href="#Managing_Messages">Managing Messages</a></li>
			<li><a href="#Find_Folders">Finding Folders</a></li>
            <li><a href="#Synchronizing_with_the_Server">Synchronizing with the Server</a></li>
            <li><a href="#Receiving_Notifications">Receiving Notifications on Message Storage Changes</a></li>         
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/communication/messaging_w.htm">Messaging Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html">Messaging API for Mobile Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Messaging: Managing and Receiving SMS, MMS, and Email Messages</h1>
 
 <p>This tutorial demonstrates how you can create, send, and read messages as well as manage messages in the message storage.</p>
 
    <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>
     
  <h2>Warm-up</h2>
      <p>Become familiar with the Messaging API basics by learning about:</p>
      <ul>
		<li>Message sending
		<ul>
       <li><a href="#Sending_Messages">Creating and Sending Messages</a> <p>Create and send messages, and save message drafts.</p> </li>
	   <li><a href="#Selecting_the_SIM_Card">Selecting the SIM Card for Sending Messages</a> <p>Retrieve information on available SIM cards and select the SIM card to send a message.</p></li>
	   </ul></li>
       <li><a href="#Managing_Messages">Managing Messages</a> <p>Find, update, and delete messages in the message storage.</p> </li>
	   <li><a href="#Find_Folders">Finding Folders</a> <p>Find message folders belonging to a message service.</p></li>
       <li><a href="#Synchronizing_with_the_Server">Synchronizing with the Server</a> <p>Load email messages and attachments from the email service and synchronize email.</p> </li>
       <li><a href="#Receiving_Notifications">Receiving Notifications on Message Storage Changes</a> <p>Receive notifications when messages are added, updated, or deleted.</p></li>
       
      </ul>
  <h2 id="task" name="task">Task</h2>
      <p>In the <a href="task_chatter_w.htm">Chatter</a> task, we will walk through how to send, receive, and manage messages in your application.</p>
	
  <h2 id="Sending_Messages" name="Sending_Messages">Creating and Sending Messages</h2>
  
  <p>To create engaging applications with various messaging features, you must learn to create and send messages:</p> 
  <ol> 
<li><p>Retrieve the messaging service using the <span style="font-family: Courier New,Courier,monospace">getMessageServices()</span> method. The first parameter specifies the type of the messaging service to retrieve. There are 3 possible types: &quot;messaging.sms&quot;, &quot;messaging.mms&quot; and &quot;messaging.email&quot;. In the following example, the SMS service is retrieved.</p>
<pre class="prettyprint">
function errorCallback(error) 
{
&nbsp;&nbsp;&nbsp;console.log(error.name + &quot;: &quot; + error.message);
}

tizen.messaging.getMessageServices(&quot;messaging.sms&quot;, serviceListCB, errorCallback);</pre> </li> 

<li><p>In the success callback of the <span style="font-family: Courier New,Courier,monospace">getMessageServices()</span> method, use the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#Message">Message</a> interface to define the content and attributes of the message, and then send the message using the <span style="font-family: Courier New,Courier,monospace">sendMessage()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageService">MessageService</a> interface.</p> <p>If the message is not ready to be sent yet, save the message draft using the <span style="font-family: Courier New,Courier,monospace">addDraftMessage()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageStorage">MessageStorage</a> interface.</p> <pre class="prettyprint">
function onAddSuccess()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Successfully added&quot;);
}

function serviceListCB(services)
{ 
&nbsp;&nbsp;&nbsp;/* Define SMS message */
&nbsp;&nbsp;&nbsp;var msg = new tizen.Message(&quot;messaging.sms&quot;,
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plainBody: &quot;I will arrive in 10 minutes.&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: [&quot;+34666666666&quot;, &quot;+34888888888&quot;]
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;var msgReady = true;

&nbsp;&nbsp;&nbsp;if (msgReady)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Send SMS message */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services[0].sendMessage(msg, messageSent, errorCallback);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Save a draft */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;services[0].messageStorage.addDraftMessage(msg, onAddSuccess, errorCallback); 
&nbsp;&nbsp;&nbsp;}
}</pre> <p>In case you are sending MMS or email messages with attachments, add the attachments as an array of <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageAttachment">MessageAttachment</a> objects:</p> <pre class="prettyprint">
var msg = new tizen.Message(&quot;messaging.email&quot;);
msg.attachments = [new tizen.MessageAttachment(&quot;images/myimage.png&quot;, &quot;image/png&quot;), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new tizen.MessageAttachment(&quot;docs/mydoc.pdf&quot;,&quot;text/pdf&quot;)];
</pre> </li> 
<li><p>Define the message sending success callback that is called if the message is sent successfully. (For email, that means that the message is sent to the email delivery system, not to the final recipient of the message.) </p>
<p>For messaging technologies, such as SMS, where the message is sent individually to every message recipient, the success callback must be invoked individually for each recipient.</p> 
<pre class="prettyprint">
function messageSent(recipients) 
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; recipients.length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;The SMS has been sent to &quot; + recipients[i]);
&nbsp;&nbsp;&nbsp;}
}
</pre> <p>Defining a sending error callback allows you to handle all possible errors and exceptions that can occur causing the message delivery to fail.</p> </li> 
  </ol> 
  
                <h2 id="Selecting_the_SIM_Card" name="Selecting_the_SIM_Card">Selecting the SIM Card for Sending Messages</h2>

<p>To add the dual SIM feature to your messaging application, you must learn to retrieve information on available SIM cards and select the SIM card to send SMS and MMS messages:</p>
<ol>
<li>To check how many SIM cards are available, call the <span style="font-family: Courier New,Courier,monospace">getCount()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html#SystemInfo">SystemInfo</a> interface.
<pre class="prettyprint">
var count = tizen.systeminfo.getCount(&quot;SIM&quot;);
if (count &gt; 1)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Dual SIM is supported&quot;);
}
</pre>
</li>
<li>To retrieve additional information on the available SIM cards, use the <span style="font-family: Courier New,Courier,monospace">getPropertyValueArray()</span> method of the <span style="font-family: Courier New,Courier,monospace">SystemInfo</span> interface:
<pre class="prettyprint">
function getPropertySuccess(sims)
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; sims.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;SIM&quot; + (i+1) + &quot; - &quot; + sims[i].msisdn + &quot; (&quot; + sims[i].operatorName + &quot;) &quot; + sims[i].state);
&nbsp;&nbsp;&nbsp;}
}
tizen.systeminfo.getPropertyValueArray(&quot;SIM&quot;, getPropertySuccess);
</pre>
<p>The information can be presented to the user to let them select the SIM card they want.</p>
</li>
<li>To send the message using the second SIM card, call the <span style="font-family: Courier New,Courier,monospace">sendMessage()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageService">MessageService</a> interface specifying the SIM index as <span style="font-family: Courier New,Courier,monospace">2</span>:
<pre class="prettyprint">
function sendSuccess()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Message has been sent&quot;);
}

function serviceSuccess(messageService)
{
&nbsp;&nbsp;&nbsp;message = new Message(messageService.type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: [&quot;0001&quot;],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plainBody: &quot;Surprise!&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;/* SIM is selected (first SIM - 1, second SIM - 2):  */
&nbsp;&nbsp;&nbsp;messageService.sendMessage(message, sendSuccess, null, 2);
}

tizen.messaging.getMessageServices(&quot;messaging.sms&quot;, serviceSuccess);
</pre>
</li>
</ol>
           
  <h2 id="Managing_Messages" name="Managing_Messages">Managing Messages</h2>
			
  <p>To create engaging applications with various messaging features, you must learn to work with messages in the message store:</p> 
  <ol> 
   <li><p>Retrieve messages whose sender is &quot;me&quot; from the message storage using the <span style="font-family: Courier New,Courier,monospace">findMessages()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageStorage">MessageStorage</a> interface with a filter (for attributes supported in the filter, see <a href="../../../../../org.tizen.guides/html/web/tizen/tizen/tizen_guide_w.htm#messaging">Messaging Filter Attributes</a>):</p> 
<pre class="prettyprint">
var emailService;
function serviceListCB(services) 
{
&nbsp;&nbsp;&nbsp;emailService = services[0]; 
&nbsp;&nbsp;&nbsp;/* Set the attribute filter */
&nbsp;&nbsp;&nbsp;var filter = new tizen.AttributeFilter(&quot;from&quot;, &quot;CONTAINS&quot;, &quot;me&quot;);
       
&nbsp;&nbsp;&nbsp;emailService.messageStorage.findMessages(filter, messageArrayCB);
}
tizen.messaging.getMessageServices(&quot;messaging.email&quot;, serviceListCB);
</pre> 
<p>The <span style="font-family: Courier New,Courier,monospace">findMessages()</span> method returns an array of <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#Message">Message</a> objects as the search result.</p> <p>The search result does not contain the actual bodies of the messages. To <a href="#Synchronizing_with_the_Server">load a message body</a>, call the <span style="font-family: Courier New,Courier,monospace">loadMessageBody()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageService">MessageService</a> interface.</p> </li> 
   <li><p>To update a message in the message storage, use the <span style="font-family: Courier New,Courier,monospace">updateMessages()</span> method. The method uses an array of <span style="font-family: Courier New,Courier,monospace">Message</span> objects found previously by the <span style="font-family: Courier New,Courier,monospace">findMessages()</span> method as a parameter.</p> 
   <p>In the following example, the <span style="font-family: Courier New,Courier,monospace">isRead</span> attribute of the first <span style="font-family: Courier New,Courier,monospace">Message</span> object in the given array is updated to <span style="font-family: Courier New,Courier,monospace">true</span>.</p>
<pre class="prettyprint">
function successCallback()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Success&quot;);
}

function messageArrayCB(messages) 
{
&nbsp;&nbsp;&nbsp;messages[0].isRead = true;
&nbsp;&nbsp;&nbsp;emailService.messageStorage.updateMessages(messages, successCallback);
}</pre> </li> 
   <li><p>To delete a message from the message storage, use the <span style="font-family: Courier New,Courier,monospace">removeMessages()</span> method:</p> <pre class="prettyprint">function messageArrayCB(messages) 
{
&nbsp;&nbsp;&nbsp;emailService.messagingStorage.removeMessages(messages, successCallback);
}</pre> </li> 
  </ol> 
  
  <h2 id="Find_Folders" name="Find_Folders">Finding Folders</h2>
  
  <p>To create engaging applications with various messaging features, you must learn how to find message folders:</p>
  <ol>
   <li><p>To retrieve the messaging service, use the <span style="font-family: Courier New,Courier,monospace">getMessageServices()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#Messaging">Messaging</a> interface: </p>
<pre class="prettyprint">
var service;

function serviceListCB(services)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Found &quot; + services.length + &quot; email services&quot;);
&nbsp;&nbsp;&nbsp;service = services[0];
}

tizen.messaging.getMessageServices(&quot;messaging.email&quot;, serviceListCB);</pre> </li>
   <li><p>Define a success handler implementing the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageFolderArraySuccessCallback">MessageFolderArraySuccessCallback</a> interface, and optionally an error handler too:</p>
<pre class="prettyprint">
function onFindFolders(folders)
{
&nbsp;&nbsp;&nbsp;console.log(folders.length + &quot; folder(s) found.&quot;);

&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; folders.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Folder &quot; + (i + 1) + &quot;: &quot; + folders[i].name);
&nbsp;&nbsp;&nbsp;}
}

function onFindFoldersFail(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Error occurred:  &quot; + error.name);
}
</pre> </li>
   <li><p>Define a filter (for attributes supported by the message folder filter, see <a href="../../../../../org.tizen.guides/html/web/tizen/tizen/tizen_guide_w.htm#messaging">Messaging Filter Attributes</a>):</p>
<pre class="prettyprint">
var filter = new tizen.AttributeFilter(&quot;serviceId&quot;, &quot;EXACTLY&quot;, service.id);
</pre> </li>
   <li><p>To get all message folders, use the <span style="font-family: Courier New,Courier,monospace">findFolders()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageStorage">MessageStorage</a> interface:</p> <pre class="prettyprint">service.messageStorage.findFolders(filter, onFindFolders, onFindFoldersFail);</pre> </li>
  </ol>
  
  <h2 id="Synchronizing_with_the_Server" name="Synchronizing_with_the_Server">Synchronizing with the Server</h2>
  
  <p>To create engaging applications with various messaging features, you must learn to load email messages and attachments and synchronize email:</p>
  <ol>
   <li><p>Retrieve the messaging service using the <span style="font-family: Courier New,Courier,monospace">getMessageServices()</span> method. </p> <pre class="prettyprint">
tizen.messaging.getMessageServices(&quot;messaging.email&quot;, serviceListCB, errorCallback);</pre> </li>
   <li><p>Search for all email messages with attachments using the <span style="font-family: Courier New,Courier,monospace">findMessages()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageStorage">MessageStorage</a> interface: </p><pre class="prettyprint">
service.messageStorage.findMessages(new tizen.AttributeFilter(&quot;hasAttachment&quot;, &quot;EXACTLY&quot;, true),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messageQueryCallback);</pre></li>
   <li><p>To load a message body, use the <span style="font-family: Courier New,Courier,monospace">loadMessageBody()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageService">MessageService</a> interface:</p> <pre class="prettyprint">
/* Success callback for the search operation */
function messageQueryCallback(messages)
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; messages.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var message = messages[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!message.body.loaded)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.messaging.loadMessageBody(message, successCallback, errorCallback);
</pre> </li>
   <li><p>To download the message attachments, use the <span style="font-family: Courier New,Courier,monospace">loadMessageAttachment()</span> method with an array of attachments (with valid file paths) as a parameter:</p> <pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.messaging.loadMessageAttachment(message.attachments[0], successCallback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorCallback);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre> </li>
   <li><p>To synchronize email with an external server:</p>
    <ol type="a">
     <li><p>To synchronize all account folders, use the <span style="font-family: Courier New,Courier,monospace">sync()</span> method:</p> <pre class="prettyprint">
/* Synchronize the folders in the success event handler */
function servicesListSuccessCB(services)
{
&nbsp;&nbsp;&nbsp;services[0].sync(serviceSyncedCB, null, 30);
}

/* Get the email service */
tizen.messaging.getMessageServices(&quot;messaging.email&quot;, servicesListSuccessCB); </pre> </li>
     <li>To synchronize a specific folder, use the <span style="font-family: Courier New,Courier,monospace">syncFolder()</span> method. In the following example, only folders containing &quot;INBOX&quot; in their name are synchronized.<p></p> <pre class="prettyprint">
var emailService; /* Assume email service is initialized */
function serviceCallback(services)
{
&nbsp;&nbsp;&nbsp;emailService = services[0];
}

/* Synchronize in the search success event handler */
function folderQueryCallback(folders)
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; folders.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (folders[i].type === &quot;INBOX&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;emailService.syncFolder(folders[i], folderSyncedCB, null, 30);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
};

/* Get the email service */
tizen.messaging.getMessageServices(&quot;messaging.email&quot;, serviceCallback, errorCallback);

/* Search for specific folders */
var filter = new tizen.AttributeFilter(&quot;serviceId&quot;, &quot;EXISTS&quot;);
emailService.messageStorage.findFolders(filter, folderQueryCallback)); </pre> </li>
    </ol> </li>
  </ol>
 
  <h2 id="Receiving_Notifications" name="Receiving_Notifications">Receiving Notifications on Message Storage Changes</h2>
  
  <p>To create engaging applications with various messaging features, you must learn to receive notifications when messages and message folders are added, updated, or removed:</p>
  <ol>
   <li>Define the needed variable: <pre class="prettyprint">/* Watch identifier */
var watchId;</pre></li>
   <li><p>Define the event handlers for different notifications by implementing the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessagesChangeCallback">MessagesChangeCallback</a> listener interface:</p> <pre class="prettyprint">
var messageChangeCallback =
{
&nbsp;&nbsp;&nbsp;/* When messages are updated */
&nbsp;&nbsp;&nbsp;messagesupdated: function(messages)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(messages.length + &quot; message(s) updated&quot;);
&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;/* When messages are added */
&nbsp;&nbsp;&nbsp;messagesadded: function(messages)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(messages.length + &quot; message(s) added&quot;);
&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;/* When messages are deleted */
&nbsp;&nbsp;&nbsp;messagesremoved: function(messages)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(messages.length + &quot; message(s) removed&quot;);
&nbsp;&nbsp;&nbsp;}
};
</pre> </li>
   <li>Register the listener to use the defined event handlers: <pre class="prettyprint">
watchId = msgService.messageStorage.addMessagesChangeListener(messageChangeCallback);
</pre> </li>
   <li><p>To stop receiving the notifications, use the <span style="font-family: Courier New,Courier,monospace">removeChangeListener()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html#MessageStorage">MessageStorage</a> interface:</p> <pre class="prettyprint">msgService.messageStorage.removeChangeListener(watchId);</pre> </li>
  </ol>
  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">To provide notifications for changes in specific conversations or message folders, use the applicable methods and event handlers similarly as above.</td>
    </tr>
   </tbody>
  </table>
   
	  
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

 </body>
</html>