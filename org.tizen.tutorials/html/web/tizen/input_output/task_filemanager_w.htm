<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: File Manager</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#clipboard">Managing Clipboard</a></li> 
            <li><a href="#storage">Managing Device Storage</a></li> 
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/input_output/filesystem_w.htm">Filesystem Guide</a></li> 
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html">Filesystem API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/filesystem.html">Filesystem API for Wearable Web</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Task: File Manager</h1> 
  <p>This task, based on the FileManager sample delivered with the Tizen SDK, demonstrates how you can use the Filesystem API (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/filesystem.html">wearable</a> applications) to manage files in your application. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-mobile-applications" target="blank">FileManager</a>.</p> 
  <p>This task consists of the following parts:</p> 
  <ul> 
   <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens. </li> 
   <li><a href="#clipboard">Managing Clipboard</a> defines how to work with the clipboard.</li> 
   <li><a href="#storage">Managing Device Storage</a> defines how to create, copy, move, and remove folders and files.</li> 
  </ul> 
  <p>This sample is a fully functional application for browsing the device storage. The user can create, copy, move, and remove folders and files.</p>
  
  <h2 id="layout" name="layout">Defining the Application Layout</h2> 
  <p>The FileManager sample application layout uses the template manager based on the MVC (Model-View-Controller) architecture, and consists of 1 screen that displays the device storage folder and file structure.</p>
  
<p>Additionally, the sample application layout consists of 2 UI elements: the clipboard footer controls enable you to delete, move, or copy selected folders and files, and the More pop-up window enables you to create a new folder and to paste content to a folder.</p> 
 
  <p>The following figure shows the main screens of the application.</p> 
  <p class="figure">Figure: FileManager screen</p> 
  <p align="center"><img alt="FileManager screen" src="../../../images/filemanager.png" /></p> 
  <h3 id="temp" name="temp">Using the Template Manager</h3> 
   <p>The template manager enables the HTML output generation to be divided into 3 parts.</p>
  <ol class="tutorstep"> 
   <li>app.ui.templateManager.js Source File 
    <ol type="a"> 
     <li>
<p>The template manager loads the template files into the cache.</p>
<pre class="prettyprint">
loadToCache: function TemplateManager_loadToCache(tplNames, onSuccess)
{
&nbsp;&nbsp;&nbsp;var self = this,
&nbsp;&nbsp;&nbsp;cachedTemplates = 0,
&nbsp;&nbsp;&nbsp;tplName,
&nbsp;&nbsp;&nbsp;tplPath;

&nbsp;&nbsp;&nbsp;if ($.isArray(tplNames))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.each(tplNames, function(index, fileName)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (self.cache[fileName] === undefined)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tplName = [fileName, app.config.get(&#39;templateExtension&#39;)].join(&#39;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tplPath = [app.config.get(&#39;templateDir&#39;), tplName].join(&#39;/&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.ajax(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: tplPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache: true,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dataType: &#39;html&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;async: true,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success: function(data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cachedTemplates += 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.cache[fileName] = data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cachedTemplates &gt;= tplNames.length &amp;&amp; typeof onSuccess === &#39;function&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cachedTemplates += 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cachedTemplates &gt;= tplNames.length &amp;&amp; typeof onSuccess === &#39;function&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
}
</pre> </li> 
     <li> <p>Next, the template manager returns the template HTML content from the cache.</p>
	 <pre class="prettyprint">get: function TemplateManager_get(tplName, tplParams)
{
&nbsp;&nbsp;&nbsp;if (this.cache[tplName] !== undefined)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.getCompleted(this.cache[tplName], tplParams);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return &#39;&#39;;
}
</pre> </li> 
     <li><p>The <span style="font-family: Courier New,Courier,monospace">getCompleted()</span> method returns the completed template using the specified parameters, prepared by the <span style="font-family: Courier New,Courier,monospace">passThruModifiers()</span> method.</p>
	 <pre class="prettyprint">getCompleted: function TemplateManager_getCompleted(tplHtml, tplParams)
{
&nbsp;&nbsp;&nbsp;var tplParam, replaceRegExp;

&nbsp;&nbsp;&nbsp;for (tplParam in tplParams)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tplParams.hasOwnProperty(tplParam))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tplHtml = this.passThruModifiers(tplHtml, tplParam, tplParams[tplParam]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return tplHtml;
}

passThruModifiers: function(tplHtml, tplParam, content)
{
&nbsp;&nbsp;&nbsp;var regModOn = new RegExp(&#39;%&#39; + tplParam + &#39;\\|([a-zA-Z]){1,}%&#39;, &#39;g&#39;),
&nbsp;&nbsp;&nbsp;regModOff = new RegExp([&#39;%&#39;, tplParam, &#39;%&#39;].join(&#39;&#39;), &#39;g&#39;),
&nbsp;&nbsp;&nbsp;regModGet = new RegExp(&#39;%&#39; + tplParam + &#39;\\|(.+?)%&#39;),
&nbsp;&nbsp;&nbsp;specRegExp = new RegExp(&#39;\\$&#39;, &#39;g&#39;), modifier;

&nbsp;&nbsp;&nbsp;if (content &amp;&amp; (typeof content === &#39;string&#39;))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = content.replace(specRegExp, &#39;$$$$&#39;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (regModOn.test(tplHtml))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifier = tplHtml.match(regModGet)[1];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = this.modifiers[modifier](content);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tplHtml = tplHtml.replace(regModOn, content);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tplHtml = tplHtml.replace(regModOff, content);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return tplHtml;
}</pre> </li> 
    </ol> </li> 
  </ol>
  
  <h3 id="main" name="main">Defining the Main Screen</h3> 
  <p>The main screen elements initialization and display functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.ui.js</span> file.</p>
  <ol class="tutorstep"> 
   <li>main.tpl Source File
<p>The main screen of the application displays the device storage folder and file structure. The header section of the screen is defined within a <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> element whose <span style="font-family: Courier New,Courier,monospace;">data-role</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">header</span>. The header section determines the title of the screen.</p>
	 <p>If the user navigates to another child directory, the header section displays navigation buttons - <strong>Up</strong> and <strong>Home</strong> - to move 1 directory up in the file system and to move to the root directory, respectively. In a child directory, the breadcrumb navigation from the root directory to the current directory is displayed as well.</p>
	 <pre class="prettyprint lang-html">&lt;!--Header section--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;h1 id=&quot;mainTitle&quot;&gt;&lt;/h1&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&lt;a id=&quot;homeBtn&quot;&gt;Home&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;a id=&quot;levelUpBtn&quot;&gt;Up&lt;/a&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=&quot;navbar&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;selectAll&quot; style=&quot;display: none&quot;&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&lt;/div&gt;
</pre></li> 

     <li>folderRow.tpl Source File
<p>The <span style="font-family: Courier New,Courier,monospace;">folderRow.tpl</span> template file defines the actual content of the main screen, which is initialized in the  <span style="font-family: Courier New,Courier,monospace;">app.ui.js</span> source file.</p> 
	 <pre class="prettyprint lang-html">&lt;!--Content section--&gt;
&lt;li class=&quot;node folder ui-li-1line-bigicon1&quot; id=&quot;row%id%&quot; label=&quot;%name%&quot; uri=&quot;%uri|escapeEncies%&quot;
&nbsp;&nbsp;&nbsp;&nbsp;fullUri=&quot;%fullUri|escapeEncies%&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;form class=&quot;my-ui-checkbox hidden&quot;&gt;&lt;input type=&quot;checkbox&quot; /&gt;&lt;/form&gt;
&nbsp;&nbsp;&nbsp;&lt;img src=&quot;images/folder.png&quot; class=&quot;ui-li-bigicon&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;span class=&quot;ui-li-text-main nodename&quot;&gt;%name|escape%&lt;/span&gt;
&lt;/li&gt;

</pre> </li> 
  </ol> 
  
  <h3 id="foot" name="foot">Defining the Footer Controls</h3> 
  <ol class="tutorstep"> 
   <li>main.tpl Source File 
<p>The footer section of the screen is defined within a <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> element whose <span style="font-family: Courier New,Courier,monospace;">data-role</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">footer</span>. The footer section contains a tab bar (in <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/mobile/ns_widget_mobile_TabBar.htm">mobile</a> applications) with a button for enabling the clipboard functionality in the application.</p>

<p>The clipboard consists of buttons for deleting, moving, and copying folders and files, and also canceling the clipboard operation. In the clipboard mode, check boxes appear next to the folders and files list in the current directory on the main screen.</p>
	 <pre class="prettyprint lang-html">&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-myToolBar&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;tabbar&quot; class=&quot;standardTabbar&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;editActionBtn&quot; href=&quot;#&quot;&gt;Edit&lt;/a&gt;&lt;/li&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;tabbar&quot; class=&quot;editTabbar&quot; style=&quot;display: none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;deleteActionBtn&quot; href=&quot;#&quot;&gt;Delete&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;moveActionBtn&quot; href=&quot;#&quot;&gt;Move&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;copyActionBtn&quot; href=&quot;#&quot;&gt;Copy&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;cancelActionBtn&quot; href=&quot;#&quot;&gt;Cancel&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre> <p></p></li> </ol>

  <h3 id="popup" name="popup">Defining the Pop-up Window</h3>
  <ol class="tutorstep"> 
   <li>main.tpl Source File 
<p>The pop-up window consists of a jQuery pop-up menu with options for creating a new folder at the current directory location or for pasting already copied content to the current directory location.</p>
	 <pre class="prettyprint lang-html">&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-myToolBar&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;tabbar&quot; class=&quot;standardTabbar&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;moreActionBtn&quot; href=&quot;#morePopup&quot; data-rel=&quot;popup&quot;&gt;More&lt;/a&gt;&lt;/li&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;morePopup&quot; data-role=&quot;popup&quot;>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--Other application code--&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre></li> </ol>
 
<h2 id="clipboard" name="clipboard">Managing Clipboard</h2> 
  <p>This section builds upon the elements described in <a href="filesystem_tutorial_w.htm#file_dir">Managing Files and Directories</a>.</p>
  
  <h3 id="initialize" name="initialize">Initializing the Clipboard</h3>
<p>The clipboard features definition functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.clipboard.js</span> file.</p>  
  <ol class="tutorstep"> 
   <li>Retrieving Clipboard Content <p>The <span style="font-family: Courier New,Courier,monospace;">get()</span> method is defined to retrieve all the filesystem paths saved currently in the clipboard.</p> <pre class="prettyprint">get: function Clipboard_get()
{
&nbsp;&nbsp;&nbsp;return this.data;
}</pre> </li> 
   <li>Adding New Content to the Clipboard <p>The <span style="font-family: Courier New,Courier,monospace;">add()</span> method is defined to add filesystem paths to the clipboard.</p> <pre class="prettyprint">add: function Clipboard_add(paths)
{
&nbsp;&nbsp;&nbsp;var len = paths.length, i;

&nbsp;&nbsp;&nbsp;/* Clear clipboard */
&nbsp;&nbsp;&nbsp;this.clear();
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.has(paths[i]) === false)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.data.push(paths[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return this.data.length;
}</pre> </li>
   <li>Checking if a Path is Present in the Clipboard <p>The <span style="font-family: Courier New,Courier,monospace;">has()</span> method is defined to check whether the currently copied filesystem path is already present in the clipboard.</p> <pre class="prettyprint">has: function Clipboard_has(path)
{
&nbsp;&nbsp;&nbsp;return $.inArray(path, this.data) === -1 ? false : true;
}
</pre> </li>  
   <li>Setting the Clipboard Mode<p>The <span style="font-family: Courier New,Courier,monospace;">setMode()</span> method is defined to set the clipboard in 3 available modes - copy, move, and inactive (default).</p> <pre class="prettyprint">setMode: function Clipboard_setMode(mode)
{
&nbsp;&nbsp;&nbsp;if ($.inArray(mode, [this.MOVE_MODE_ID, this.COPY_MODE_ID]) === false)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.mode = mode;

&nbsp;&nbsp;&nbsp;return true;
}</pre> </li> 
   <li>Clearing the Clipboard<p>The <span style="font-family: Courier New,Courier,monospace;">clear()</span> method is defined to clear all the clipboard content and reset it to the default mode.</p> <pre class="prettyprint">clear: function Clipboard_clear()
{
&nbsp;&nbsp;&nbsp;this.data = [];
&nbsp;&nbsp;&nbsp;this.mode = this.INACTIVE_MODE;
}</pre> </li> 
  </ol> 
  <h3 id="perform" name="perform">Performing Clipboard Operations</h3> 
 <p>The clipboard operation functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.js</span> file.</p>  
  <ol class="tutorstep"> 
   <li>Copying Content to the Clipboard
<p>The <span style="font-family: Courier New,Courier,monospace;">saveToClipboard()</span> method is used to add filesystem paths to the clipboard and set the appropriate clipboard mode.</p> 
<pre class="prettyprint">saveToClipboard: function App_saveToClipboard(paths, mode)
{
&nbsp;&nbsp;&nbsp;var clipboardLength = this.clipboard.add(paths);

&nbsp;&nbsp;&nbsp;if (clipboardLength &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.clipboard.setMode(mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.alertPopup(&#39;Data saved in clipboard&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.clearTabbars();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;Error occurred. Data has not been saved in clipboard&#39;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.ui.refreshPasteActionBtn(this.clipboard.isEmpty());
}</pre></li>

<li>Pasting Content from the Clipboard 
   <ol type="a"><li><p>The <span style="font-family: Courier New,Courier,monospace;">pasteClipboard()</span> method is used to copy filesystem paths from the clipboard or to move filesystem paths to the current directory location based on the current clipboard mode.</p>  
<pre class="prettyprint">pasteClipboard: function App_pasteClipboard()
{
&nbsp;&nbsp;&nbsp;var clipboardData = this.clipboard.get();

&nbsp;&nbsp;&nbsp;if (clipboardData.length === 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.alertPopup(&#39;Clipboard is empty&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (this.clipboard.getMode() === this.clipboard.COPY_MODE_ID)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.model.copyNodes(this.currentDirHandle, clipboardData,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.currentPath, this.onPasteClipboardSuccess.bind(this));
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.model.moveNodes(this.currentDirHandle, clipboardData,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.currentPath, this.onPasteClipboardSuccess.bind(this));
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.ui.refreshPasteActionBtn(this.clipboard.isEmpty());

&nbsp;&nbsp;&nbsp;return true;
}</pre></li>
   <li><p>The <span style="font-family: Courier New,Courier,monospace;">onPasteClipboardSuccess()</span> event handler responds to the success event of pasting content from the clipboard by clearing the clipboard.</p> 
<pre class="prettyprint">onPasteClipboardSuccess: function App_onPasteClipboardSuccess()
{
&nbsp;&nbsp;&nbsp;this.clipboard.clear();
&nbsp;&nbsp;&nbsp;this.refreshCurrentPage();
}</pre></li></ol>
   </li> 
  </ol> 

 <h2 id="storage" name="storage">Managing Device Storage</h2> 
  <p>This section builds upon the elements described in <a href="filesystem_tutorial_w.htm#manage">Managing File Storages</a>,  <a href="filesystem_tutorial_w.htm#create">Creating and Deleting Files and Directories</a>, and <a href="filesystem_tutorial_w.htm#retrieve">Retrieving Files and File Details</a>.</p> 

 <h3 id="configure" name="configure">Initializing the Device Storage</h3> 
  <ol class="tutorstep"> 
   <li>config.xml Source File <p>The required privileges are declared in the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file.</p> <pre class="prettyprint">&lt;!--Configuration file content--&gt;
&lt;widget ...&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Other configuration details--&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/content.read&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/content.write&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/application.launch&quot;/&gt; 
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/filesystem.read&quot;/&gt; 
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/filesystem.write&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Other configuration details--&gt; 
&lt;/widget&gt;</pre> </li> 
  </ol>  
  <h3 id="retrieve" name="retrieve">Retrieving Storages</h3> 

  <ol class="tutorstep"> 
 <li>app.model.js Source File<p>The <span style="font-family: Courier New,Courier,monospace;">loadInternalStorages()</span> method calls the <span style="font-family: Courier New,Courier,monospace;">getStorages()</span> method to get the storages of a specific storage type.</p>
   <pre class="prettyprint">loadInternalStorages: function Model_loadInternalStorages(onSuccess)
{
&nbsp;&nbsp;&nbsp;var self = this;

&nbsp;&nbsp;&nbsp;this.systemIO.getStorages(&#39;INTERNAL&#39;, function(storages)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.storages = storages;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeof onSuccess === &#39;function&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}, &#39;internal0&#39;);
}</pre> </li> 
   <li>app.systemIO.js Source File 
   <p>The <span style="font-family: Courier New,Courier,monospace;">listStorages()</span> method of the <span style="font-family: Courier New,Courier,monospace">FileSystemManager</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html#FileSystemManager">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/filesystem.html#FileSystemManager">wearable</a> applications) is used to retrieve all the available storages.</p>
   <pre class="prettyprint">getStorages: function SystemIO_getStorages(type, onSuccess, excluded)
{
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.filesystem.listStorages(function(storages)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tmp = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = storages.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (type !== undefined)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (storages[i].label !== excluded)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (storages[i].type === 0 || storages[i].type === type)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.push(storages[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp = storages;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeof onSuccess === &#39;function&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess(tmp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
}</pre> </li> 
</ol>

  <h3 id="manage" name="manage">Managing Files and Directories</h3> 
  <p>The directory creation functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.js</span> file. The file creation, file deletion, and directory deletion functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.systemIO.js</span> file.</p>
  <ol class="tutorstep"> 
   <li>Creating a File <p>The <span style="font-family: Courier New,Courier,monospace;">createFile()</span> method of the <span style="font-family: Courier New,Courier,monospace">File</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html#File">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/filesystem.html#File">wearable</a> applications) is used to create a new file in the current directory.</p> 
<pre class="prettyprint">createFile: function SystemIO_createFile(directoryHandle, fileName)
{
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return directoryHandle.createFile(fileName);
&nbsp;&nbsp;&nbsp;}
}</pre><p>Similarly, the <span style="font-family: Courier New,Courier,monospace;">createDirectory()</span> method is used to create a directory at the current storage location in the application.</p></li> 
   <li>Deleting a File <p>The <span style="font-family: Courier New,Courier,monospace;">deleteFile()</span> method of the <span style="font-family: Courier New,Courier,monospace;">File</span> interface is used to delete a file by specifying the filesystem path of the file.</p> 
<pre class="prettyprint">deleteFile: function SystemIO_deleteFile(dir, filePath, onDeleteSuccess, onDeleteError)
{
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir.deleteFile(filePath, onDeleteSuccess, onDeleteError);
&nbsp;&nbsp;&nbsp;}
}</pre><p>Similarly, the <span style="font-family: Courier New,Courier,monospace;">deleteDirectory()</span> method is used to delete a selected directory. You can specify if the deletion is to be performed recursively for the sub-directories as well.</p></li> 
  </ol> 
  <h3 id="file" name="file">Retrieving File Details</h3> 
  <p>The file and file list retrieval functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.systemIO.js</span> file. The file URI retrieval functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">app.ui.js</span> file.</p> 
  <ol class="tutorstep"> 
   <li>Retrieving a File <p>The <span style="font-family: Courier New,Courier,monospace;">resolve()</span> method of the <span style="font-family: Courier New,Courier,monospace;">FileSystemManager</span> interface is used to retrieve a file handle by specifying the location of the file.</p>
   <pre class="prettyprint">openDir: function SystemIO_openDir(directoryPath, onSuccess, onError, openMode)
{
&nbsp;&nbsp;&nbsp;openMode = openMode || &#39;rw&#39;;
&nbsp;&nbsp;&nbsp;onSuccess = onSuccess || function() {};

&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.filesystem.resolve(directoryPath, onSuccess, onError, openMode);
&nbsp;&nbsp;&nbsp;}
}</pre> </li> 
   <li>Retrieving a List of Files <p>The <span style="font-family: Courier New,Courier,monospace;">listFiles()</span> method of the <span style="font-family: Courier New,Courier,monospace;">FileSystemManager</span> interface is used to list all the files and directories present in the current storage location in the application.</p>
   <pre class="prettyprint">getFilesList: function SystemIO_getFilesList(dir, onSuccess)
{
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir.listFiles(function(files)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var tmp = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = files.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tmp.push(files[i].name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeof onSuccess === &#39;function&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess(tmp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, function(e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;SystemIO_getFilesList dir.listFiles() error:&#39;, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
}</pre> </li> 
   <li>Retrieving a Folder or File URI<p>The <span style="font-family: Courier New,Courier,monospace;">toURI()</span> method of the <span style="font-family: Courier New,Courier,monospace;">FileSystemManager</span> interface is used to retrieve the folder or file URI.</p>
   <pre class="prettyprint">displayFolder: function Ui_displayFolder(folderName, nodes, refresh)
{
&nbsp;&nbsp;&nbsp;var len = nodes.length,
&nbsp;&nbsp;&nbsp;listElements = [this.templateManager.get(&#39;levelUpRow&#39;)], nodeName, checkedRows = [], i;

&nbsp;&nbsp;&nbsp;/* Other application code */

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i = i + 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nodeName = nodes[i].name.trim();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nodeName !== &#39;&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (nodes[i].isDirectory)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listElements.push(this.templateManager.get(&#39;folderRow&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id: i,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: nodeName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uri: nodes[i].fullPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUri: nodes[i].toURI()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listElements.push(this.templateManager.get(&#39;fileRow&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id: i,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: nodeName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uri: nodes[i].fullPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullUri: nodes[i].toURI(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thumbnailURI: this.helpers.getThumbnailURI(nodeName, nodes[i])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre> </li> 
  </ol> 

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

