<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>Contact: Managing Contacts and Handling Contact Information</title>
 </head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li>Address book
				<ul class="toc">
					<li><a href="#Adding_Addressbook">Creating an Address Book</a></li>
					<li><a href="#Getting_Address_Books">Getting Address Books</a></li>
				</ul>
			</li>
			<li>Single contacts
				<ul class="toc">
					<li><a href="#Adding_Contact">Adding a Contact</a></li>
					<li><a href="#Managing_Contact">Managing a Contact</a></li>
					<li><a href="#Receiving_Contact">Receiving Notifications on Contact Changes</a></li>
					<li><a href="#Importing_Contact">Importing Contacts</a></li>
					<li><a href="#Exporting_Contact">Exporting Contacts</a></li>
				</ul>
			</li>
			<li>Multiple contacts
				<ul class="toc">
					<li><a href="#Adding_Multiple_Contact">Adding Multiple Contacts in the Batch Mode</a></li>
					<li><a href="#Managing_Multiple_Contact">Managing Multiple Contacts in the Batch Mode</a></li>
					<li><a href="#Managing_Groups">Managing Contact Groups</a></li>
				</ul>
			</li>
            <li>Persons
				<ul class="toc">
					<li><a href="#Managing_Persons">Managing Persons</a></li>
				</ul>
			</li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/social/contact_w.htm">Contact Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html">Contact API for Mobile Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

 <h1>Contact: Managing Contacts and Handling Contact Information</h1>
   
      <p>This tutorial demonstrates how you can manage address books in the device to access, modify, add, and remove contacts within a specified address book on the device.</p>
	  
<p>This feature is supported in mobile applications only.</p>

  <h2>Warm-up</h2>
      <p>Become familiar with the Contact API basics by learning about:</p>
      <ul>
		<li>Address book
			<ul>
			   <li><a href="#Adding_Addressbook">Creating an Address Book</a> <p>Create a new address book using the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> constructor.</p> </li>
			   <li><a href="#Getting_Address_Books">Getting Address Books</a> <p>Access the address books in which contacts are listed.</p> </li>
		    </ul>
	    </li>
	    <li>Single contacts
			<ul>
			   <li><a href="#Adding_Contact">Adding a Contact</a> <p>Add a contact to an address book.</p> </li>
			   <li><a href="#Managing_Contact">Managing a Contact</a> <p>Find, update, and delete an existing contact item.</p> </li>
			   <li><a href="#Receiving_Contact">Receiving Notifications on Contact Changes </a> <p>Receive notifications when contacts are added, updated, or deleted.</p></li>
			   <li><a href="#Importing_Contact">Importing Contacts</a> <p>Import contacts with the help of the vCard format.</p></li>
			   <li><a href="#Exporting_Contact">Exporting Contacts</a> <p>Export contacts with the help of the vCard format.</p></li>
			</ul>
	   </li>
	   <li>Multiple contacts
			<ul>
			   <li><a href="#Adding_Multiple_Contact">Adding Multiple Contacts in the Batch Mode</a> <p>Add multiple contacts to an address book in the batch mode.</p> </li>
			   
			   <li><a href="#Managing_Multiple_Contact">Managing Multiple Contacts in the Batch Mode</a> <p>Find, update, and delete multiple contact items in the batch mode.</p> </li>
			   <li><a href="#Managing_Groups">Managing Contact Groups</a> <p>Add, get, update, and remove groups.</p> </li>   
			</ul>
		</li>	
		<li>Persons
			<ul>
				<li><a href="#Managing_Persons">Managing Persons</a> <p>Find and link existing persons.</p> </li>
			</ul>
		</li>
      </ul>

  <h2 id="Adding_Addressbook" name="Adding_Addressbook">Creating an Address Book</h2>
  
  <p>Creating a new address book is a basic contact management skill:</p>
  
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The created address book is associated with a specified account. Therefore, you must retrieve the account before creating a new address book.</td> 
    </tr> 
   </tbody> 
  </table>
  <ol> 
   <li>Declare a variable to store the created address book:
<pre class="prettyprint">var myAddressBook = null;</pre>
   </li>
   <li>Define a success callback for the <span style="font-family: Courier New,Courier,monospace">getAccounts()</span> method. The callback receives a list of <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/account.html#Account">Account</a> objects. Use the first account ID to construct a new <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> object.
   
   <p>Add the new address book to the system using the <span style="font-family: Courier New,Courier,monospace">addAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p>
<pre class="prettyprint">function getAccountsSuccess(accounts)
{
&nbsp;&nbsp;&nbsp;var account = accounts[0];
&nbsp;&nbsp;&nbsp;if (account)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* New address book can be created and added */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myAddressBook = new tizen.AddressBook(account.id, &quot;remote address book&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.contact.addAddressBook(myAddressBook);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;New address book created with ID=&quot; + myAddressBook.id);
&nbsp;&nbsp;&nbsp;}
}</pre></li>
   <li>To retrieve available accounts, use the <span style="font-family: Courier New,Courier,monospace">getAccounts()</span> method. The following method call invokes the <span style="font-family: Courier New,Courier,monospace">getAccountsSuccess</span> event handler defined above.
<pre class="prettyprint">tizen.account.getAccounts(getAccountsSuccess, function(err));
</pre></li>
  </ol>
  <h2 id="Getting_Address_Books" name="Getting_Address_Books">Getting Address Books</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to access the address books in which the contacts are listed:</p>
  <ol>
   <li><p>To get the default address book, use the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface to retrieve the default address book as an <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> object:</p> <pre class="prettyprint">
var myAddressbook;

/* Get the default address book */
myAddressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
   <li><p>To get all available address books, use the <span style="font-family: Courier New,Courier,monospace">getAddressBooks()</span> method. This method passes an array of <span style="font-family: Courier New,Courier,monospace">AddressBook</span> objects to the success event handler.</p> <pre class="prettyprint">
var addressBook;

function addressBooksCB(addressBooks)
{
&nbsp;&nbsp;&nbsp;if (addressBooks.length &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addressBook = addressBooks[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;The addressbook name is &quot; + addressBook.name);
&nbsp;&nbsp;&nbsp;}
}

/* Get the list of available address books */
tizen.contact.getAddressBooks(addressBooksCB);
</pre>
   <p>All available address books on the device are retrieved. You can use an <span style="font-family: Courier New,Courier,monospace">AddressBook</span> object ID to select a specific address book with the <span style="font-family: Courier New,Courier,monospace">getAddressBook()</span> method, if you know the ID of the address book in advance.</p>
 </li>

  </ol>
           
  <h2 id="Adding_Contact" name="Adding_Contact">Adding a Contact</h2>

  <p>To create engaging applications with various contacts features, you must learn to add a contact to an address book:</p>
    <ol>
     <li><p>Retrieve the default system address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p> <pre class="prettyprint">
var addressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
     <li><p>Create a <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#Contact">Contact</a> object and define its properties as a <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactInit">ContactInit</a> object (the parameter of the <span style="font-family: Courier New,Courier,monospace">Contact</span> constructor):</p> <pre class="prettyprint">
var contact = new tizen.Contact
({
&nbsp;&nbsp;&nbsp;name: new tizen.ContactName({firstName: &quot;Jeffrey&quot;, lastName: &quot;Hyman&quot;}),
&nbsp;&nbsp;&nbsp;emails: [new tizen.ContactEmailAddress(&quot;user@example.com&quot;)]
});
</pre> </li>
     <li><p>Add the <span style="font-family: Courier New,Courier,monospace">Contact</span> object to the default address book with the <span style="font-family: Courier New,Courier,monospace">add()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface:</p> <pre class="prettyprint">addressbook.add(contact);</pre> </li>
    </ol>
               
  <h2 id="Managing_Contact" name="Managing_Contact">Managing a Contact</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to manage a contact in your address book:</p>
  <ol>
   <li>To retrieve a single contact, use the <span style="font-family: Courier New,Courier,monospace">get()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface with the <span style="font-family: Courier New,Courier,monospace">ContactID</span> as a parameter:
   <p>The following example uses the object of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactRef">ContactRef</a> interface. The <span style="font-family: Courier New,Courier,monospace">ContactRef</span> object contains both <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> ID and <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#Contact">Contact</a> ID.</p> <pre class="prettyprint">
/* contactRef is retrieved by other APIs */
var contactRef;
try
{
&nbsp;&nbsp;&nbsp;/* Retrieve the contact corresponding to the given reference */
&nbsp;&nbsp;&nbsp;var addressBook = tizen.contact.getAddressBook(contactRef.addressBookId);
&nbsp;&nbsp;&nbsp;var contact = addressBook.get(contactRef.contactId);
}
</pre> </li>
   <li>To manage a single contact:
    <ol type="a">
     <li><p>Retrieve the default address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface.</p> <pre class="prettyprint">
var addressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
     <li><p>Retrieve contacts stored in the address book by using the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface:</p> <pre class="prettyprint">
var filter = new tizen.AttributeFilter(&quot;name.firstName&quot;, &quot;CONTAINS&quot;, &quot;Chris&quot;);
var sortMode = new tizen.SortMode(&quot;name.lastName&quot;, &quot;ASC&quot;);

try
{
&nbsp;&nbsp;&nbsp;addressbook.find(contactsFoundCB, null, filter, sortMode);
}</pre>
      <table class="note">
       <tbody>
        <tr>
         <th class="note">Note</th>
        </tr>
        <tr>
         <td class="note">To retrieve a specific contact, you can specify a filter and sorting order for the search operation through the <span style="font-family: Courier New,Courier,monospace">filter</span> and <span style="font-family: Courier New,Courier,monospace">sortMode</span> parameters (for attributes supported in the filter, see <a href="../../../../../org.tizen.guides/html/web/tizen/tizen/tizen_guide_w.htm#contact">Contact Filter Attributes</a>). <p>In this example, contacts whose first name contains &quot;Chris&quot; are retrieved and sorted in the ascending order based on their last name. The filter includes the standard English characters in the uppercase and lowercase. The entire list consists of ASCII characters from 32 to 126, and from 160 to 255.</p> </td>
        </tr>
       </tbody>
      </table> <p>The contacts that match the filter are passed as an array to the registered success event handler in the selected sorting order.</p> </li>
     <li><p>Update or delete the found contact inside the <span style="font-family: Courier New,Courier,monospace">contactsFoundCB</span> event handler.</p> <p>In this example, the first name of the first contact is changed and the contact is updated in the address book using the <span style="font-family: Courier New,Courier,monospace">update()</span> method. The second contact is deleted using the <span style="font-family: Courier New,Courier,monospace">remove()</span> method.</p> <pre class="prettyprint">/* Define the event success callback */
function contactsFoundCB(contacts)
{
&nbsp;&nbsp;&nbsp;contacts[0].name.firstName = &quot;Christopher&quot;;
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Update the first found contact */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addressbook.update(contacts[0]);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Delete the second found contact */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addressbook.remove(contacts[1].id);
&nbsp;&nbsp;&nbsp;}
}</pre> </li>
    </ol> </li>
  </ol>
            
  <h2 id="Receiving_Contact" name="Receiving_Contact">Receiving Notifications on Contact Changes</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to receive notifications when contacts are added, updated, or removed:</p>
  <ol>
   <li><p>Define the needed variables:</p> <pre class="prettyprint">
/* Watcher identifier */
var watcherId = 0;

/* This example assumes that the address book is initialized */
var addressbook;
</pre> </li>
   <li><p>Define the event handlers for different notifications about changes in the selected address book using the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBookChangeCallback">AddressBookChangeCallback</a> listener interface:</p> <pre class="prettyprint">
var watcher =
{
&nbsp;&nbsp;&nbsp;/* When contacts are added */
&nbsp;&nbsp;&nbsp;oncontactsadded: function(contacts)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(contacts.length + &quot; contacts were added&quot;);
&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;/* When contacts are updated */
&nbsp;&nbsp;&nbsp;oncontactsupdated: function(contacts)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(contacts.length + &quot; contacts were updated&quot;);
&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;/* When contacts are deleted */
&nbsp;&nbsp;&nbsp;oncontactsremoved: function(ids)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(ids.length + &quot; contacts were deleted&quot;);
&nbsp;&nbsp;&nbsp;}
};
</pre> </li>
   <li><p>Register the listener to use the defined event handlers:</p> <pre class="prettyprint">
watcherId = addressbook.addChangeListener(watcher);
</pre> </li>
   <li><p>To stop the notifications, use the <span style="font-family: Courier New,Courier,monospace">removeChangeListener()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface:</p> <pre class="prettyprint">
addressbook.removeChangeListener(watcherId);
</pre> </li>
  </ol>
           
  <h2 id="Importing_Contact" name="Importing_Contact">Importing Contacts</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to import contacts with the help of the vCard format:</p>

    <ol>
     <li><p>Retrieve the default system address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p> <pre class="prettyprint">
var addressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
     <li><p>Create a new <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#Contact">Contact</a> object from the vCard string and add it to the default address book:</p> <pre class="prettyprint">
var contact = null;

try
{
&nbsp;&nbsp;&nbsp;contact = new tizen.Contact(&quot;BEGIN:VCARD\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;VERSION:3.0\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;N:Gump;Forrest\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;FN:Forrest Gump\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;ORG:Bubba Gump Shrimp Co.\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;TITLE:Shrimp Man\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;TEL;WORK:(111) 555-1212\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;TEL;HOME:(404) 555-1212\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;EMAIL;WORK;PREF:forrestgump@example.com\n&quot;+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;END:VCARD&quot;);

&nbsp;&nbsp;&nbsp;addressbook.add(contact);
&nbsp;&nbsp;&nbsp;console.log(&quot;Contact was added with ID &quot; + contact.id);
}</pre> </li>
    </ol> <p>To convert multiple strings and import them to an address book, convert the strings one by one and then use the <span style="font-family: Courier New,Courier,monospace">addBatch()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface to <a href="#Adding_Multiple_Contact">add all the contacts at once in the batch mode</a>.</p>
             
  <h2 id="Exporting_Contact" name="Exporting_Contact">Exporting Contacts</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to export contacts with the help of the vCard format:</p>
    <ol>
     <li><p>Retrieve the default system address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface and find all contacts with &quot;Chris&quot; in the first name:</p> <pre class="prettyprint">
var addressbook;

var addressbook = tizen.contact.getDefaultAddressBook();

/* Define a filter */
var filter = new tizen.AttributeFilter(&quot;name.firstName&quot;, &quot;CONTAINS&quot;, &quot;Chris&quot;);

/* Search for the contacts */
addressbook.find(contactsFoundCB, errorCB, filter);
</pre> </li>
     <li><p>Convert a contact to a vCard string in the success event handler of the <span style="font-family: Courier New,Courier,monospace">find()</span> method.</p> <p>In the following example, the first found contact is exported by converting it to the vCard version 3.0 format.</p> <pre class="prettyprint">
function contactsFoundCB(contacts)
{
&nbsp;&nbsp;&nbsp;/* Convert the first contact */
&nbsp;&nbsp;&nbsp;var vcard = contacts[0].convertToString(&quot;VCARD_30&quot;);
}</pre></li>
    </ol>
         
  <h2 id="Adding_Multiple_Contact" name="Adding_Multiple_Contact">Adding Multiple Contacts in the Batch Mode</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to add multiple contacts to an address book in the batch mode:</p>
<ol>
     <li><p>Retrieve the default system address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p> <pre class="prettyprint">
addressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
     <li><p>Define the items to be added as an array:</p> <pre class="prettyprint">
var c1 = new tizen.Contact(
{
&nbsp;&nbsp;&nbsp;name: new tizen.ContactName({firstName:&quot;Jeffrey&quot;, lastName:&quot;Hyman&quot;}),
&nbsp;&nbsp;&nbsp;emails: [new tizen.ContactEmailAddress(&quot;user1@example.com&quot;)]
});

var c2 = new tizen.Contact(
{
&nbsp;&nbsp;&nbsp;name: new tizen.ContactName({firstName:&quot;Elton&quot;, lastName:&quot;John&quot;}),
&nbsp;&nbsp;&nbsp;emails: [new tizen.ContactEmailAddress(&quot;user2@example.com&quot;)]
});
</pre> </li>
     <li><p>Use the <span style="font-family: Courier New,Courier,monospace">addBatch()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface to add the contacts in the array to the address book:</p> <pre class="prettyprint">
addressbook.addBatch([c1, c2]);
</pre>
    <table class="note">
     <tbody>
      <tr>
       <th class="note">Note</th>
      </tr>
      <tr>
       <td class="note">The <span style="font-family: Courier New,Courier,monospace">addBatch()</span>, <span style="font-family: Courier New,Courier,monospace">updateBatch()</span>, and <span style="font-family: Courier New,Courier,monospace">removeBatch()</span> methods are asynchronous. Provide success and error callbacks with them.</td>
      </tr>
     </tbody>
    </table>
</li>
    </ol>
           
  <h2 id="Managing_Multiple_Contact" name="Managing_Multiple_Contact">Managing Multiple Contacts in the Batch Mode</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to manage multiple contacts in your address books in the batch mode:</p>
  <ol>
     <li><p>Retrieve the default address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface.</p> <pre class="prettyprint">
var addressbook = tizen.contact.getDefaultAddressBook();
</pre> </li>
     <li><p>Retrieve contacts stored in the address book by using the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface:</p> <pre class="prettyprint">
var filter = new tizen.AttributeFilter(&quot;name.firstName&quot;, &quot;CONTAINS&quot;, &quot;Chris&quot;};
var sortMode = new tizen.SortMode(&quot;name.lastName&quot;, &quot;ASC&quot;);

try
{
&nbsp;&nbsp;&nbsp;addressbook.find(contactsFoundCB, null, filter, sortMode);
}</pre> </li>
     <li>To update contacts:
      <ol type="a">
       <li><p>Define the contact changes to be made in the success event handler of the <span style="font-family: Courier New,Courier,monospace">find()</span> method:</p> <pre class="prettyprint">
function contactsFoundCB(contacts)
{
&nbsp;&nbsp;&nbsp;/* Change the first names of all the found contacts */
&nbsp;&nbsp;&nbsp;for (var i=0; i&lt;contacts.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts[i].name.firstName = &quot;Christopher&quot;;
&nbsp;&nbsp;&nbsp;}
</pre> </li>
       <li><p>Use the <span style="font-family: Courier New,Courier,monospace">updateBatch()</span> method to update multiple contacts asynchronously:</p> <pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Update all found contacts */
&nbsp;&nbsp;&nbsp;addressbook.updateBatch(contacts);
}
</pre> </li>
      </ol> </li>
     <li><p>To delete contacts, use the <span style="font-family: Courier New,Courier,monospace">removeBatch()</span> method in the success event handler of the <span style="font-family: Courier New,Courier,monospace">find()</span> method to delete multiple contacts asynchronously:</p> <pre class="prettyprint">
function contactsFoundCB(contacts)
{
&nbsp;&nbsp;&nbsp;/* Delete the first 2 found contacts */
&nbsp;&nbsp;&nbsp;addressbook.removeBatch([contacts[0].id, contacts[1].id]);
}
</pre> </li>
    </ol>
             
  <h2 id="Managing_Groups" name="Managing_Groups">Managing Contact Groups</h2>
  
  <p>To create engaging applications with various contact features, you must learn to manage contact groups:</p>
  <ol>
    <li><p>Retrieve the default system address book using the <span style="font-family: Courier New,Courier,monospace">getDefaultAddressBook()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p>
<pre class="prettyprint">
var addressbook = tizen.contact.getDefaultAddressBook();</pre> </li>
   <li><p>To create a <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactGroup">ContactGroup</a> object and add the newly create group to the system, use the constructor and the <span style="font-family: Courier New,Courier,monospace">addGroup()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface:</p>
<pre class="prettyprint">
var group;
try 
{
&nbsp;&nbsp;&nbsp;group = new tizen.ContactGroup(&quot;Company&quot;);
&nbsp;&nbsp;&nbsp;addressbook.addGroup(group)
&nbsp;&nbsp;&nbsp;console.log(&quot;Group added with ID &quot; + group.id);
}
</pre></li>

<li>To manage groups:

<ul>   <li><p>To retrieve all the contact groups from the address book, use the <span style="font-family: Courier New,Courier,monospace">getGroups()</span> method
   of the <span style="font-family: Courier New,Courier,monospace">AddressBook</span> interface:</p>
<pre class="prettyprint">
var groups;
try 
{
&nbsp;&nbsp;&nbsp;groups = addressbook.getGroups();
}
</pre></li>
   <li><p>To change the name of the group, assign the <span style="font-family: Courier New,Courier,monospace">name</span> property a new value and use the <span style="font-family: Courier New,Courier,monospace">updateGroup()</span>
   method of the <span style="font-family: Courier New,Courier,monospace">AddressBook</span> interface:</p>
<pre class="prettyprint">
try 
{
&nbsp;&nbsp;&nbsp;groups[0].name = &quot;Friends&quot;;
&nbsp;&nbsp;&nbsp;addressbook.updateGroup(groups[0]);
&nbsp;&nbsp;&nbsp;console.log(&quot;First group updated&quot;);
}
</pre></li>
   <li><p>To retrieve a specific group, use the <span style="font-family: Courier New,Courier,monospace">getGroup()</span> method of
   the <span style="font-family: Courier New,Courier,monospace">AddressBook</span> interface:</p>
<pre class="prettyprint">
try 
{
&nbsp;&nbsp;&nbsp;group = addressbook.getGroup(group.id);
}
</pre></li>
   <li><p>To remove a group from the address book, use the <span style="font-family: Courier New,Courier,monospace">removeGroup()</span> method of
   the <span style="font-family: Courier New,Courier,monospace">AddressBook</span> interface:</p>
<pre class="prettyprint">
try 
{
&nbsp;&nbsp;&nbsp;addressbook.removeGroup(group.id);
&nbsp;&nbsp;&nbsp;console.log(&quot;Group was removed&quot;);
}
</pre></li></ul></li>
  </ol>
              
  <h2 id="Managing_Persons" name="Managing_Persons">Managing Persons</h2>
  
  <p>To create engaging applications with various contacts features, you must learn to manage persons in your contact database:</p>
  <ol>
   <li>To manage a single person:
    <ol type="a">
     <li><p>To retrieve persons, use the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#ContactManager">ContactManager</a> interface:</p> <pre class="prettyprint">tizen.contact.find(personsFoundCB);</pre></li>
     <li><p>Update or delete the found persons in the <span style="font-family: Courier New,Courier,monospace">personsFoundCB()</span> event handler. In this example, the favorite flag of the first person is changed and the contact is updated using the <span style="font-family: Courier New,Courier,monospace">update()</span> method. The second person is deleted using the <span style="font-family: Courier New,Courier,monospace">remove()</span> method.</p> <pre class="prettyprint">/* Define the event success callback */
function personsFoundCB(persons)
{
&nbsp;&nbsp;&nbsp;persons[0].isFavorite = true;
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Update the first found person */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.contact.update(persons[0]);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Delete the second found person */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.contact.remove(persons[1].id);
&nbsp;&nbsp;&nbsp;}
}</pre></li>
    </ol> </li>
   <li>To merge multiple persons into a single person item:
    <ol type="a">
     <li>Retrieve the persons as described above.</li>
     <li><p>Define the persons to be merged in the <span style="font-family: Courier New,Courier,monospace">personsFoundCB()</span> event handler:</p> <pre class="prettyprint">function personsFoundCB(persons)
{
&nbsp;&nbsp;&nbsp;var sourcePerson = persons[0];
&nbsp;&nbsp;&nbsp;var targetPerson = persons[1];</pre></li>
     <li><p>Use the <span style="font-family: Courier New,Courier,monospace">link()</span> method to link contacts that are linked to the other person:</p> <pre class="prettyprint">&nbsp;&nbsp;&nbsp;/* Link 2 persons, contacts from sourcePerson are added to targetPerson and sourcePerson is removed */
&nbsp;&nbsp;&nbsp;targetPerson.link(sourcePerson.id);
}</pre></li>
    </ol> </li>
  </ol>
  
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>