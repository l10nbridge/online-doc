<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Bluetooth Chat</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mobile_s_w_optional.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w_optional.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#Defining_App_Layout">Defining the Application Layout</a></li>
            <li><a href="#Initializing_App">Initializing the Application</a></li>
            <li><a href="#Creating_Connection">Creating the Connection</a></li> 
            <li><a href="#Exchanging_Data">Sending a Message</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/network/bluetooth_w.htm">Bluetooth Guide</a></li> 
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html">Bluetooth API for Mobile Web</a></li> 
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html">Bluetooth API for Wearable Web</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Task: Bluetooth Chat</h1> 
  <p>This task, based on the BluetoothChat sample delivered with the Tizen SDK, demonstrates how you can use the Bluetooth API (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html">wearable</a> applications) to create a chat between 2 devices. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-mobile-applications" target="blank">BluetoothChat</a>.</p> 
  <p>This task consists of the following parts:</p> 
  <ul> 
   <li><a href="#Defining_App_Layout">Defining the Application Layout</a> defines how to create the application screens.</li>
   <li><a href="#Initializing_App">Initializing the Application</a> defines how to initialize the application.</li>
   <li><a href="#Creating_Connection">Creating the Connection</a> defines how to set up a bluetooth adapter, register a chat server, and connect devices to the server.</li>
   <li><a href="#Exchanging_Data">Sending a Message</a> defines how to send messages between Bluetooth devices.</li>
  </ul> 
  <p>This sample is a fully functional application for creating a chat application.</p> 
  
  <h2 id="Defining_App_Layout" name="Defining_App_Layout">Defining the Application Layout</h2> 
  <p>The BluetoothChat sample application layout uses the template manager based on the MVC (Model View Controller) architecture, and consists of 3 screens: the main screen displays buttons for creating or joining a chat, the Choose your server screen displays a list of available servers, and the chat screen  displays the conversation history, an input area, and a button, allowing the user to write and send messages.</p> 

  <p>The following figure shows the main screens of the application.</p> 
  <p class="figure">Figure: BluetoothChat screens</p> 
  <p align="center"><img alt="BluetoothChat screens" src="../../../images/bluetoothchat.png" /></p>
  
  <h3 id="main" name="main">Defining the Main Screen</h3>
  <ol class="tutorstep"> 
   <li>index.html Source File
   <ol type="a"><li>
   <p>The main screen displays option buttons. The header section of the screen is defined within a <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> element whose <span style="font-family: Courier New,Courier,monospace;">data-role</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">header</span>. The header section determines the title of the screen.</p>
   
	 <pre class="prettyprint lang-html">
&lt;!--Main screen layout--&gt;
&lt;div id=&quot;start&quot; data-role=&quot;page&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Header section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;start-header&quot; data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Bluetooth chat&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;</pre></li>
 <li> <p>The actual content section of the screen is defined within a <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> element whose <span style="font-family: Courier New,Courier,monospace;">data-role</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">content</span>. It contains buttons (in <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Mobile_UIComponents/mobile_Button.htm">mobile</a> or <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Wearable_UIComponents/wearable_button.htm">wearable</a> applications) for turning on the Bluetooth connection and either creating or joining a server connection. The buttons displayed depend on whether the Bluetooth adapter is on.</p>
 <pre class="prettyprint lang-html">&nbsp;&nbsp;&nbsp;&lt;!--Content section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;start-content&quot; data-role=&quot;content&quot; data-scroll=&quot;none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;box&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; class=&quot;ui-btn-start&quot; id=&quot;turnOnButton&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style=&quot;display: none;&quot;&gt;Turn bluetooth on&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; class=&quot;ui-btn-start&quot; id=&quot;serverButton&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style=&quot;display: none;&quot;&gt;Create server&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; class=&quot;ui-btn-start&quot; id=&quot;clientButton&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style=&quot;display: none;&quot;&gt;Join server&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;start-monit&quot; style=&quot;display: none;&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;Waiting for Bluetooth...&lt;/p&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
  </li>
  </ol>
  </li>
  <li>app.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace">checkPowerState()</span> method is used to check the Bluetooth connection status. If the Bluetooth connection is not on, the main screen only displays the <strong>Turn bluetooth on</strong> button.</p>
<pre class="prettyprint">
checkPowerState: function App_checkPowerState() 
{
&nbsp;&nbsp;&nbsp;this.ui.setContentStartAttributes(this.model.checkPowerState.bind(this.model,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.showPowerOnButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.showStartButtons));
},
</pre>
</li>
<li>app.ui.events.js Source File
<p>The <strong>Create server</strong> and <strong>Join server</strong> button events are defined in the <span style="font-family: Courier New,Courier,monospace">app.ui.events.js</span> file. All the application events are based on jQuery selectors.</p>
<pre class="prettyprint">
$(&#39;#serverButton&#39;).on(&#39;click&#39;, function(event) 
{
&nbsp;&nbsp;&nbsp;app.resetApplicationMode();
&nbsp;&nbsp;&nbsp;app.startServer();
});

$(&#39;#clientButton&#39;).on(&#39;click&#39;, function(event) 
{
&nbsp;&nbsp;&nbsp;app.resetApplicationMode();
&nbsp;&nbsp;&nbsp;app.startClient();
});
</pre>
</li>

<li>templates/keyboard_page.tpl Source File
<ol type="a">
<li>
<p>When the user taps the <strong>Create server</strong> or <strong>Join server</strong> button, a keyboard is displayed and the user can enter the server or client name.</p>
<pre class="prettyprint">
&lt;div data-role=&quot;page&quot; id=&quot;keyboard&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Header section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; id=&quot;keyboard-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Content section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; id=&quot;keyboard-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;text&quot; id=&quot;keyboard-text&quot; maxlength=&quot;20&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Footer section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;tabbar&quot; data-style=&quot;tabbar&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;keyboard-ok-button&quot;&gt;&lt;a href=&quot;#&quot;&gt;OK&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li><p>When the user enters the server or client name and taps <strong>OK</strong>, the <span style="font-family: Courier New,Courier,monospace">getApplicationMode()</span> method analyzes the input and displays the server selection or chat screen, respectively.</p>
<pre class="prettyprint">
$(&#39;#keyboard-ok-button&#39;).on(&#39;click&#39;, function(event) 
{
&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;var value = $(&#39;#keyboard-text&#39;).val(), mode;
&nbsp;&nbsp;&nbsp;if (value.length !== 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.setUserName(value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mode = app.getApplicationMode();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (mode === &#39;server&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.setAdapterName();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (mode === &#39;client&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$.mobile.changePage(&#39;#choose&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
});
</pre>
</li>
</ol>
</li>
</ol>


<h3 id="server" name="server">Defining the Choose Your Server Screen</h3> 
<ol class="tutorstep">
<li>templates/choose_page.tpl Source File
<ol type="a"><li><p>The content section of the Choose your server screen displays a list (in <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Mobile_UIComponents/mobile_Listview.htm">mobile</a> or <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Wearable_UIComponents/wearable_list.htm">wearable</a> applications) of available servers.</p>
<pre class="prettyprint">
&lt;div data-role=&quot;page&quot; id=&quot;choose&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Header section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; id=&quot;choose-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Choose your server&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;progress&quot; data-style=&quot;circle&quot; id=&quot;discovering&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Content section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; id=&quot;choose-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul data-role=&quot;listview&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>
<p>When the user taps a server name, the system starts searching for the server and attempts to connect to it. After connecting, the system displays confirmation pop-ups (in <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Mobile_UIComponents/mobile_Popup.htm">mobile</a> or <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Wearable_UIComponents/wearable_popup.htm">wearable</a> applications).</p>
<pre class="prettyprint">
$(&#39;#choose-content&#39;).on(&#39;tap&#39;, &#39;ul.ui-listview li&#39;, function() 
{
&nbsp;&nbsp;&nbsp;app.client.stopServerSearching($(this).attr(&#39;address&#39;));
});
</pre>
</li>
</ol>
</li>
</ol> 

<h3 id="chat" name="chat">Defining the Chat Screen</h3> 
<ol class="tutorstep">
<li>templates/chat_page.tpl Source File
<p>The structure of this template is similar to the main screen. The header displays the current role of the device (server or client) and its name.</p> 
<p>The content area displays a list view with message bubbles. The layout of the bubbles is defined in the <span style="font-family: Courier New,Courier,monospace">left_bubble.tpl</span> and <span style="font-family: Courier New,Courier,monospace">right_bubble.tpl</span> template files.</p>
 <p>The footer section contains a <span style="font-family: Courier New,Courier,monospace">textArea</span> for writing a message and a button for sending it.</p>
<pre class="prettyprint">
&lt;div id=&quot;chat&quot; data-role=&quot;page&quot; data-footer-exist=&quot;true&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Header section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;chat-header&quot; data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;&lt;span id=&quot;chat-header-type&quot;&gt;&lt;/span&gt;&lt;span id=&quot;chat-header-name&quot;&gt;&lt;/span&gt;&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Content section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;chat-content&quot; data-role=&quot;content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul data-role=&quot;listview&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;!--Footer section--&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;chat-footer&quot; data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;ui-textArea&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;ui-textArea-text&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;textarea id=&quot;text&quot; placeholder=&quot;Your message&quot; data-role=&quot;none&quot;&gt;&lt;/textarea&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;ui-textArea-button&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; id=&quot;ui-mySend&quot;&gt;Send&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

</li>
<li>app.ui.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace">checkSendButtonState()</span> method is used to check whether there is text in the <span style="font-family: Courier New,Courier,monospace">textArea</span>. If the <span style="font-family: Courier New,Courier,monospace">textArea</span> field is empty, the <strong>Send</strong> button is disabled.</p>
<pre class="prettyprint">
checkSendButtonState: function Ui_checkSendButtonState() 
{
&nbsp;&nbsp;&nbsp;if (app.helpers.checkStringLength($(&#39;#text&#39;).val().trim()) &amp;&amp; app.isConnection()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.enableSendButton();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.disableSendButton();
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>
</ol>

 <h2 id="Initializing_App" name="Initializing_App">Initializing the Application</h2>
  <ol class="tutorstep">
   <li>config.xml Source File
    <p>The required privileges are declared in the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file.</p>
    <pre class="prettyprint">&lt;!--Configuration file content--&gt;
&lt;widget ...&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Other configuration details--&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/application.launch&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/bluetooth.admin&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/bluetooth.gap&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/bluetooth.spp&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;!--Other configuration details--&gt;
&lt;/widget&gt;</pre>
   </li>
  </ol>

 <h2 id="Creating_Connection" name="Creating_Connection">Creating the Connection</h2> 
  <p>This section builds upon the elements described in <a href="bluetooth_tutorial_w.htm#Discovering_BT_Devices">Discovering Bluetooth Devices</a> and <a href="bluetooth_tutorial_w.htm#Connecting_BT_device">Connecting to and Exchanging Data with a Bluetooth Device</a>.</p> 


  <h3 id="check" name="check">Checking the Bluetooth Status</h3>
  
  <ol class="tutorstep">
  <li>app.server.js Source File
  <ol type="a"><li><p>Before pairing devices, you must check whether Bluetooth is enabled. The default Bluetooth adapter is retrieved using the <span style="font-family: Courier New,Courier,monospace">getDefaultAdapter()</span> method.</p>
<pre class="prettyprint">
this.adapter = tizen.bluetooth.getDefaultAdapter();
</pre>
  </li>
  <li>
  <p>The power status of the adapter can be checked using the <span style="font-family: Courier New,Courier,monospace">setPowered()</span> method.</p>
<pre class="prettyprint">
powerOn: function Model_powerOn(callback) 
{
&nbsp;&nbsp;&nbsp;if (!this.adapter.powered) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.adapter.setPowered(true, function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {callback();}, 500);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.showPowerOnButton();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;}
},
</pre>
  </li>
  </ol>
</li>
</ol>
  <h3 id="register" name="register">Registering the Server</h3> 
  <ol class="tutorstep">
  <li>app.server.js Source File
  <p>One of the devices must be defined to be used as the server. This is done using the <span style="font-family: Courier New,Courier,monospace">registerServer()</span> method.</p>
  <pre class="prettyprint">
registerServer: function Server_registerServer() 
{
&nbsp;&nbsp;&nbsp;this.model.registerServer(this.adapter, this.serviceUUID, this.registerServerSuccess.bind(this));
},
</pre>
  </li>
  </ol>

  <h3 id="connect" name="connect">Connecting Devices</h3> 
  <ol class="tutorstep">
  <li>app.client.model.js Source File
  <ol type="a">
  <li>
  <p>After defining the default Bluetooth adapter and setting up the server, you can select the requested server and bond the devices using the <span style="font-family: Courier New,Courier,monospace">connectToService()</span> method.</p>
  <pre class="prettyprint">
connectToService: function ClientModel_connectToService(device, serviceUUID, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successCallback, errorCallback) 
{
&nbsp;&nbsp;&nbsp;this.client.chatServerDevice = device;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device.connectToServiceByUUID(serviceUUID, successCallback, errorCallback, &#39;RFCOMM&#39;);
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">connectToService()</span> method sends a ping to ensure that the server is responding.
<pre class="prettyprint">
sendPing: function ClientModel_sendPing(name, socket)
</pre>
</li>
</ol>
  </li>
  </ol>

  
<h2 id="Exchanging_Data" name="Exchanging_Data">Sending a Message</h2>

  <p>This section builds upon the elements described in <a href="bluetooth_tutorial_w.htm#Connecting_BT_device">Connecting to and Exchanging Data with a Bluetooth Device</a>.</p> 
  <ol class="tutorstep">
<li>app.client.model.js Source File  
<p>Before sending a message, the message data must be stringified to the JSON format. The data is then written to the selected socket using the <span style="font-family: Courier New,Courier,monospace">writeData()</span> method.</p>  

<pre class="prettyprint">
sendMessage: function ClientModel_sendMessage(name, socket, message, callback) 
{
&nbsp;&nbsp;&nbsp;var sendTextMsg = [], messageObj, messageObjToString, i, len;
&nbsp;&nbsp;&nbsp;name = encodeURIComponent(name);
&nbsp;&nbsp;&nbsp;message = encodeURIComponent(message);
&nbsp;&nbsp;&nbsp;messageObj = {name: name, text: message, ping: false, bye: false};
&nbsp;&nbsp;&nbsp;messageObjToString = JSON.stringify(messageObj);
&nbsp;&nbsp;&nbsp;len = messageObjToString.length;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendTextMsg[i] = messageObjToString.charCodeAt(i);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (socket !== null &amp;&amp; socket.state === &quot;OPEN&quot;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.writeData(sendTextMsg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>
</ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>