<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Tizen: Managing the Basic Tizen Features</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
	 <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#filter">Creating Attribute Filters</a>
            </li>
            <li><a href="#range">Creating Attribute Range Filters</a>
            </li>
            <li><a href="#composite">Creating Composite Filters</a>
            </li>
            <li><a href="#use_modes">Using Sorting Modes</a>
            </li>
			<li><a href="#use_handlers">Using the Generic Event Handlers</a>
			</li>
            <li><a href="#make">Making Complex Queries Using Filters</a>
            </li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
             <li><a href="../../../../../org.tizen.guides/html/web/tizen/tizen/tizen_guide_w.htm">Tizen Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html">Tizen API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html">Tizen API for Wearable Web</a></li>				 
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Tizen: Managing the Basic Tizen Features</h1>
 <div class="cont"><div class="static-cont">
 
<p>This tutorial demonstrates how you can utilize generic Tizen Device API features, such as filters, sorting modes, and generic event handlers.</p>

<table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The Tizen API is mandatory for both Tizen mobile and wearable profiles, which means that it is supported in all mobile and wearable devices. 
		<p>All mandatory APIs are supported on the Tizen Emulators.</p></td> 
    </tr> 
   </tbody> 
  </table> 
  
  <h2>Warm-up</h2>
  <p>Become familiar with the Tizen API basics by learning about:</p>
  <ul>
   <li><a class="opensection" href="#filter">Creating Attribute Filters</a> <p>Create attribute filters to limit data query results.</p></li>
   <li><a class="opensection" href="#range">Creating Attribute Range Filters</a> <p>Create attribute range filters to limit data query results.</p></li>
   <li><a class="opensection" href="#composite">Creating Composite Filters</a> <p>Create composite filters to limit data query results.</p></li>
   <li><a class="opensection" href="#use_modes">Using Sorting Modes</a> <p>Use sorting modes to organize data query results.</p></li>
   <li><a class="opensection" href="#use_handlers">Using the Generic Event Handlers</a> <p>Utilize generic event handlers to make application creation easier.</p></li>    
   <li><a class="opensection" href="#make">Making Complex Queries Using Filters</a> <p>Create complex queries by combining filters.</p></li>
  </ul>

<div class="devicespecs-util mt5 clfix">
        <ul class="dutil">
            <li><a href="#" class="showA">Show All</a></li>
            <li class="none"><a href="#" class="hideA">Hide All</a></li>
        </ul>
    </div>

    <ul class="devicespecifications">
        <li>
            <div class="devicespec-tit">
 <h2 id="filter" name="filter" class="items-tit-h2">Creating Attribute Filters</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
            </div>
            <div class="devicespec-con">

  <p> Learning how to create attribute filters allows you effectively incorporate query methods in your application:</p>
  <ol>
   <li><p>The <span style="font-family: Courier New,Courier,monospace">AttributeFilter</span> filter (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#AttributeFilter">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#AttributeFilter">wearable</a> applications) is used to filter the search results based on an attribute value. In this example, the filter finds contacts, with the first name Chris, from the default address book.</p>

   <p>Create the filter with the <span style="font-family: Courier New,Courier,monospace">AttributeFilter</span> constructor. You can specify attribute options, such as the attribute name, match flag, and match value.</p> <pre class="prettyprint">/* Use the firstName attribute with the EXACTLY match flag and the Chris value */
var firstNameFilter = new tizen.AttributeFilter(&#39;name.firstName&#39;, &#39;EXACTLY&#39;, &#39;Chris&#39;);</pre> </li>
     <li><p>Call the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface to find contacts. The filter (<span style="font-family: Courier New,Courier,monospace">firstNameFilter</span>) you created is included as a parameter.</p> <pre class="prettyprint">
tizen.contact.getDefaultAddressBook().find(successCB, errorCB, firstNameFilter);</pre> </li>
    </ol>
	
</div>
        </li>
        <li>
            <div class="devicespec-tit">
 <h2 id="range" name="range" class="items-tit-h2">Creating Attribute Range Filters</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
            </div>
            <div class="devicespec-con">

  <p> Learning how to use attribute range filters allows you effectively incorporate query methods in your application:</p>
  <ol>
   <li><p>The <span style="font-family: Courier New,Courier,monospace">AttributeRangeFilter</span> filter (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#AttributeRangeFilter">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#AttributeRangeFilter">wearable</a> applications)is used to search for results based on a range of attribute values. In this example, the filter finds all events starting on a defined day from the calendar.</p>
<p>Create the filter with the <span style="font-family: Courier New,Courier,monospace">AttributeRangeFilter</span> constructor. Specify the attribute, and the start and end points of the value range.</p> <pre class="prettyprint">/* Use the startDate attribute with a range that starts today and ends in 1 day */
/* (meaning that you search for all events occurring today) */
var now = tizen.time.getCurrentDateTime();
var today_begin = new tizen.TZDate(now.getFullYear(), now.getMonth(), now.getDate());
var today_end = today_begin.addDuration(new tizen.TimeDuration(1, &quot;DAYS&quot;));
var dateRangeFilter = new tizen.AttributeRangeFilter(&quot;startDate&quot;, today_begin, today_end);</pre> </li>
     <li> <p> Call the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/calendar.html#Calendar">Calendar</a> interface to find events. The filter (<span style="font-family: Courier New,Courier,monospace">dateRangeFilter</span>) you created is included as a parameter. </p> <pre class="prettyprint">
tizen.calendar.getDefaultCalendar(&quot;EVENT&quot;).find(successCB, errorCB, dateRangeFilter);</pre> </li>
    </ol>
 </div>
        </li>
        <li>
            <div class="devicespec-tit">
 <h2 id="composite" name="composite" class="items-tit-h2">Creating Composite Filters</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
            </div>
            <div class="devicespec-con">

  <p> Learning how to use composite filters allows you effectively incorporate query methods in your application:</p>
  <ol>
   <li><p>The <span style="font-family: Courier New,Courier,monospace">CompositeFilter</span> filter (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#CompositeFilter">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#CompositeFilter">wearable</a> applications) is used to search for results based on a set of filters. In this example, the filter finds contacts, whose first name contains Chris and last name is Smith, from the default address book.</p>
<p>Create the filter with the <span style="font-family: Courier New,Courier,monospace">CompositeFilter</span> constructor. You can specify multiple sub-filters for the filter set.</p> <pre class="prettyprint">/* Create an attribute filter based on the firstName attribute */
var firstNameFilter = new tizen.AttributeFilter(&quot;name.firstName&quot;, &quot;CONTAINS&quot;, &quot;Chris&quot;);

/* Create an attribute filter based on the lastName attribute */
var lastNameFilter = new tizen.AttributeFilter(&quot;name.lastName&quot;, &quot;EXACTLY&quot;, &quot;Smith&quot;);

/* Create a composite filter based on the intersection of these 2 filters */
/* (intersection means that both filters must match for the contact to be included in the results) */
var nameCompositeFilter = new tizen.CompositeFilter(&quot;INTERSECTION&quot;, [firstNameFilter, lastNameFilter]);</pre> </li>
     <li><p> Call the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface to find matching contacts. The filter (<span style="font-family: Courier New,Courier,monospace">nameCompositeFilter</span>) you created is included as a parameter.</p> <pre class="prettyprint">
tizen.contact.getDefaultAddressBook().find(successCB, errorCB, nameCompositeFilter);</pre> </li>
    </ol>
  </div>
        </li>
        <li>
            <div class="devicespec-tit">
 <h2 id="use_modes" name="use_modes" class="items-tit-h2">Using Sorting Modes</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
            </div>
            <div class="devicespec-con">

  <p> Learning how to use sorting modes allows you effectively incorporate query methods in your application:</p>
  <ol>
   <li><p>The <span style="font-family: Courier New,Courier,monospace">SortMode</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#SortMode">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#SortMode">wearable</a> applications) is created to sort the search results. In this example, it is used to sort contacts in the device address book in ascending order, based on their first name.</p>
<p>Create the sort order with the <span style="font-family: Courier New,Courier,monospace">SortMode()</span> method. Specify an attribute name to sort by and an order option.</p> <pre class="prettyprint">
/* Use the firstName attribute with an ASC order */
var sortMode = new tizen.SortMode(&quot;name.firstName&quot;, &quot;ASC&quot;);</pre> </li>
     <li><p> Call the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html#AddressBook">AddressBook</a> interface to find matching contacts. In this example, the filter parameter in the <span style="font-family: Courier New,Courier,monospace">find()</span> method is defined as <span style="font-family: Courier New,Courier,monospace">null</span>, which means that the method retrieves all contacts in the address book.</p> <pre class="prettyprint">
tizen.contact.getDefaultAddressBook().find(successCB, errorCB, null, sortMode);</pre> </li>
    </ol>
 </div>
        </li>
		<li>
			<div class="devicespec-tit">
				<h2 id="use_handlers" name="use_handlers" class="items-tit-h2">Using the Generic Event Handlers</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
				
<p>Learning how to use generic, predefined event handlers allows you handle application operations and errors efficiently:</p> 
  <ol> 
   <li> <p>The generic <span style="font-family: Courier New,Courier,monospace;">onSuccess()</span> event handler of the <span style="font-family: Courier New,Courier,monospace">SuccessCallBack</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#SuccessCallback">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#SuccessCallback">wearable</a> applications) can be used with methods that do not require a return value when successful.</p> <p>In this example, the event handler is used to stop a running application with the <span style="font-family: Courier New,Courier,monospace;">kill()</span> method of the <span style="font-family: Courier New,Courier,monospace">Application</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html#Application">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html#Application">wearable</a> applications).</p> <pre class="prettyprint">function onSuccess() 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Application terminated successfully&quot;);
}

tizen.application.kill(ctxIDToKill, onSuccess);</pre> </li> 
   <li> <p> The generic <span style="font-family: Courier New,Courier,monospace;">onError()</span> event handler of the <span style="font-family: Courier New,Courier,monospace">ErrorCallBack</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/tizen.html#ErrorCallback">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/tizen.html#ErrorCallback">wearable</a> applications) can be used with methods that only require an error as an input parameter in the error callback.</p> <p>In this example, the event handler is used to handle possible errors with the <span style="font-family: Courier New,Courier,monospace;">getCalendars()</span> method of the <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/calendar.html#CalendarManager">CalendarManager</a> interface.</p> <pre class="prettyprint">function errorCallback(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;The following error occurred: &quot; + error.name);
}

tizen.calendar.getCalendars(&quot;EVENT&quot;, calendarListCallback, errorCallback); 
</pre> </li> 
  </ol> 
		</div>
		</li>		
        <li>
            <div class="devicespec-tit">
 <h2 id="make" name="make" class="items-tit-h2">Making Complex Queries Using Filters</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
            </div>
            <div class="devicespec-con">
 
  <p>Learning how to use filters allows you effectively incorporate complex query methods in your application. You can create queries using AND and OR conditions, like in SQL queries. The following example shows how to make the following query:</p>
  <p><span style="font-family: Courier New,Courier,monospace">&quot;where ((type=&#39;VIDEO&#39; OR type=&#39;IMAGE&#39;) AND title like &#39;%special%&#39;)&quot;</span></p>
  <p>Basically, you search in the content of the device for media items where the media type is video or image, and the title contains the word &quot;special&quot;.</p>
  <ol>
   <li> <p>Create attribute filters to include all content whose media type is either video or image:</p> <pre class="prettyprint">function makeQueryAndFire()
{
&nbsp;&nbsp;&nbsp;/* Filter for the video media type */
&nbsp;&nbsp;&nbsp;var typeVideoFilter = new tizen.AttributeFilter(&quot;type&quot;, &quot;EXACTLY&quot;, &quot;VIDEO&quot;);

&nbsp;&nbsp;&nbsp;/* Filter for the image media type */
&nbsp;&nbsp;&nbsp;var typeImageFilter = new tizen.AttributeFilter(&quot;type&quot;, &quot;EXACTLY&quot;, &quot;IMAGE&quot;);</pre> </li>
   <li> <p>Create a composite filter that finds all content that matches one of the media type filters:</p> <pre class="prettyprint">&nbsp;&nbsp;&nbsp;var typeFilter = new tizen.CompositeFilter(&quot;UNION&quot;, [typeVideoFilter, typeImageFilter]);</pre> </li>
   <li> <p>Create another attribute filter that includes content containing the word &quot;special&quot; in its title:</p> <pre class="prettyprint">&nbsp;&nbsp;&nbsp;var titleFilter = new tizen.AttributeFilter(&quot;title&quot;, &quot;CONTAINS&quot;, &quot;special&quot;);</pre> </li>
   <li> <p>Create the final composite filter that finds all content that matches both the composite media type filter and the title filter:</p> <pre class="prettyprint">&nbsp;&nbsp;&nbsp;var finalFilter = new tizen.CompositeFilter(&quot;INTERSECTION&quot;, [typeFilter, titleFilter]);</pre> </li>
   <li> <p>Call the <span style="font-family: Courier New,Courier,monospace">find()</span> method of the Content API&#39;s <span style="font-family: Courier New,Courier,monospace">ContentManager</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/content.html#ContentManager">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/content.html#ContentManager">wearable</a> applications) to retrieve the media items that match the final filter:</p> 
   <pre class="prettyprint">&nbsp;&nbsp;&nbsp;tizen.content.find(findMediaContentsCallback, onError, null, finalFilter);
}</pre> <p>The <span style="font-family: Courier New,Courier,monospace;">findMediaContentsCallback()</span> event handler returns the query result.</p> </li>
  </ol>
    </div>
        </li>
    </ul>
</div>
</div>  
  
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
