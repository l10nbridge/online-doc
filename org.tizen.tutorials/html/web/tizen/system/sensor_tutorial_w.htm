<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
    <title>Sensor: Getting Sensor Data from the Various Device Sensors</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w_optional.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w_optional.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		 <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#manage">Managing Sensors</a></li>
            <li><a href="#receive">Receiving Notifications on Sensor Data Changes</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/system/sensor_w.htm">Sensor Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html">Sensor API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html">Sensor API for Wearable Web</a></li>				
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Sensor: Getting Sensor Data from the Various Device Sensors</h1>

<p>This tutorial demonstrates how you can use device sensors.</p>

<p>The Sensor API is optional for both Tizen mobile and wearable profiles, which means that it may not be supported in all mobile and wearable devices. The Sensor API is supported on all Tizen Emulators.</p> 

<h2>Warm-up</h2>

<p>Become familiar with the Sensor API basics by learning about:</p>
<ul>
 <li><a href="#manage">Managing Sensors</a><p>Check, whether the sensor is supported, enable the sensor, read sensor data, and disable the sensor.</p></li>
 <li><a href="#receive">Receiving Notifications on Sensor Data Changes</a><p>Register an event handler to receive notifications on sensor data changes.</p></li>
</ul>

<h2>Task in Mobile Applications</h2>	
<p>In the <a href="task_sensorball_w.htm">Sensor Ball</a> task, we will walk through simulating ball behavior to create a game.</p>

<h2 id="manage" name="manage">Managing Sensors</h2>
				
<p>Learning how to start, read and stop a sensor is a basic sensor management skill:</p>

<ol>
<li><p>Check that the sensor is supported by the device using the <span style="font-family: Courier New,Courier,monospace">getCapability()</span> method of the <span style="font-family: Courier New,Courier,monospace">SystemInfo</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html#SystemInfo">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/systeminfo.html#SystemInfo">wearable</a> applications) for the proper <a href="../../../../../org.tizen.guides/html/web/tizen/system/sensor_w.htm#capability">capability</a> related to the sensor:</p>

<pre class="prettyprint">
var proximityCapability = tizen.systeminfo.getCapability(&quot;http://tizen.org/feature/sensor.proximity&quot;);

if (proximityCapability === true)
{
&nbsp;&nbsp;&nbsp;/* Device supports the proximity sensor */
&nbsp;&nbsp;&nbsp;var proximitySensor = tizen.sensorservice.getDefaultSensor(&quot;PROXIMITY&quot;);
}
</pre>
</li>

<li><p>To get all available sensor types, use the <span style="font-family: Courier New,Courier,monospace">getAvailableSensors()</span> method:</p>

<pre class="prettyprint">
var sensors = tizen.sensorservice.getAvailableSensors();
console.log(&quot;Available sensor: &quot; + sensors.toString());
</pre>
</li>

<li><p>Obtain the <span style="font-family: Courier New,Courier,monospace">Sensor</span> object (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html#Sensor">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html#Sensor">wearable</a> applications) using the <span style="font-family: Courier New,Courier,monospace">getDefaultSensor()</span> method of the <span style="font-family: Courier New,Courier,monospace">SensorService</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html#SensorService">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html#SensorService">wearable</a> applications). Enable the sensor using the <span style="font-family: Courier New,Courier,monospace">start()</span> method:</p>

<pre class="prettyprint">
var proximitySensor = tizen.sensorservice.getDefaultSensor(&quot;PROXIMITY&quot;);

function onsuccessCB()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;The proximity sensor started successfully.&quot;);
}

proximitySensor.start(onsuccessCB);
</pre>
</li>

<li><p>To get data from the sensor, use the appropriate method of the sensor object. For example, for the <span style="font-family: Courier New,Courier,monospace">LightSensor</span> (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html#LightSensor">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html#LightSensor">wearable</a> applications), use the <span style="font-family: Courier New,Courier,monospace">getLightSensorData()</span> method:</p>

<pre class="prettyprint">
var lightSensor = tizen.sensorservice.getDefaultSensor(&quot;LIGHT&quot;);

function onGetSuccessCB(sensorData)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;light level: &quot; + sensorData.lightLevel);
}

function onsuccessCB()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;sensor started&quot;);
&nbsp;&nbsp;&nbsp;lightSensor.getLightSensorData(onGetSuccessCB);
&nbsp;&nbsp;&nbsp;lightSensor.stop();
}

lightSensor.start(onsuccessCB);
</pre>
</li>

<li><p>To disable the sensor when it is no longer needed, use the <span style="font-family: Courier New,Courier,monospace">stop()</span> method of the <span style="font-family: Courier New,Courier,monospace">Sensor</span> interface:</p>
<pre class="prettyprint">
proximitySensor.stop();
</pre>
</li>
</ol>
          
                <h2 id="receive" name="receive">Receiving Notifications on Sensor Data Changes</h2>

<p>Learning how to register a change event handler for sensor data enables your application to react to changes without the need to check current values constantly.</p>

<ol>

<li>Define an event handler for sensor data changes by implementing the <span style="font-family: Courier New,Courier,monospace">SensorDataSuccessCallback</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html#SensorDataSuccessCallback">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html#SensorDataSuccessCallback">wearable</a> applications):
<pre class="prettyprint">
function onchangedCB(sensorData)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Light sensor data: &quot; + sensorData.lightLevel);
}
</pre>
</li>

<li>Register a change listener to be called when the sensor data changes.
<p>To register a  change listener, use the <span style="font-family: Courier New,Courier,monospace">setChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">Sensor</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/sensor.html#Sensor">mobile</a> and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html#Sensor">wearable</a> applications).</p>


<p>This command requires 3 parameters:</p>
<ul>
<li>The first one is a handle to the callback method, which is invoked for every incoming event.</li>
<li>The second determines the amount of time (in milliseconds) passing between 2 consecutive events. Valid values are integers from 10 to 1000, inclusively. For example, the value 100 results in approximately 10 events being send every second.</li>
<li>The third determines batch latency time in milliseconds (ms) at which sensor events are stored or delivered when processor stay on sleep or suspend status. ou can calculate maximum batchLatency value using maxBatchCount (e.g. interval x maxBatchCount) . If maxBatchCount is zero, device doesn't support batch latency time.</li>
</ul>

<pre class="prettyprint">
var lightSensor = tizen.sensorservice.getDefaultSensor(&quot;LIGHT&quot;);

function onsuccessCB()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Light sensor service has started successfully.&quot;);
}

function onchangedCB(sensorData)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Light sensor data: &quot; + sensorData.lightLevel);
}

lightSensor.setChangeListener(onchangedCB, 500, 2000);
lightSensor.start(onsuccessCB);
</pre>

<p>The default value of the second parameter is 100, for third parameter is 0 . If you do not pass a value, the default is used:</p>
<pre class="prettyprint">
var lightSensor = tizen.sensorservice.getDefaultSensor(&quot;LIGHT&quot;);

function onsuccessCB()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Light sensor service has started successfully.&quot;);
}

function onchangedCB(sensorData)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Light sensor data: &quot; + sensorData.lightLevel);
}

/* Use the default interval value (100 ms) */
lightSensor.setChangeListener(onchangedCB);
lightSensor.start(onsuccessCB);
</pre>
</li>

<li>To stop receiving notifications on sensor data changes, use the <span style="font-family: Courier New,Courier,monospace">unsetChangeListener()</span> method of the Sensor interface.

<pre class="prettyprint">
lightSensor.unsetChangeListener();
</pre>
</li>
</ol>
          
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
