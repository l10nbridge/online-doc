<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
    <title>Media: Record and play audio files on a device</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#play">Play audio file</a></li>
            <li><a href="#seek">Seek position</a></li>
            <li><a href="#seek">Volume change</a></li>
            <li><a href="#callbacks">Using callbacks</a></li>
            <li><a href="#duration">Duration and position</a></li>
            <li><a href="#record">Recording audio</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/tizen/cordova/media_w.htm">Media Guide</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html">Media API for Mobile Web</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html">Media API for Wearable Web</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html">Media API for TV Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Media: Record and play audio files on a device</h1>

<p>This tutorial demonstrates how to play and record audio files. Functionalities like play, stop, pause, volume change, and seek to position are presented.</p>

<ul class="toc">
    <li><a href="#play">How to play audio file</a></li>
    <li><a href="#seek">Seeking to position</a></li>
    <li><a href="#seek">Volume change</a></li>
    <li><a href="#callbacks">Using status, success, and error callbacks</a></li>
    <li><a href="#duration">Getting duration and position</a></li>
    <li><a href="#record">Recording audio</a></li>
</ul>

<h2 id="play">How to play audio file</h2>
<p>Simple audio file playback. Audio will be played from begining to end.</p>

<ol>
    <li><p>Place audio file in a directory on a device. In this example we place it in owner home directory: /home/owner/content/Music/play.mp3</p>
    <li><p>Construct new media object from audio file. No additional parameters are required</p>
        <pre class="prettyprint">var myMedia = new Media( "file:///home/owner/content/Music/play.mp3" );</pre>
    </li>
    <li><p>Call play method:</p>
        <pre class="prettyprint">myMedia.play();</pre>
    </li>
</ol>
<p>
Applications should call release for any media resource that is no longer needed. 

<h2 id="seek">Seeking to position</h2>
<p>This example will show how to change position of played file.</p>

<ol>
    <li><p>Construct new media object from audio file.</p>
        <pre class="prettyprint">var myMedia = new Media( "file:///home/owner/content/Music/play.mp3" );</pre>
    </li>
    <li><p>Start playing:</p>
        <pre class="prettyprint">myMedia.play();</pre>
    </li>
    <li><p>After 5 seconds seek to position 10 seconds. We register a timer using setTimeout global function</p>
        <pre class="prettyprint">setTimeout(function() {
    myMedia.seekTo(10000);
    console.log('Playback position has been set to 10 seconds.');
}, 5000);</pre>
    <li><p>Stop media and release after 10 seconds</p>
    <pre class="prettyprint">setTimeout( function() {
    myMedia.release();
}, 10000);</pre>
    </li>
</ol>

<h2 id="volume">Volume change</h2>
<p>We will change volume during playback.</p>
<p>Your application should have <span style="font-family: monospace">http://tizen.org/privilege/volume.set</span> privilege in config.xml<p>

<ol>
    <li><p>Construct new media object from audio file.</p>
        <pre class="prettyprint">var myMedia = new Media( "file:///home/owner/content/Music/play.mp3" );</pre>
    </li>
    <li><p>Start playing:</p>
        <pre class="prettyprint">myMedia.play();</pre>
    </li>
    <li><p>Mute volume after 2 seconds:</p>
        <pre class="prettyprint">setTimeout(function() {
    myMedia.setVolume(0.0);
}, 2000);</pre>
    <li><p>Set volume to 1.0 after 5 seconds</p>
        <pre class="prettyprint">setTimeout(function() {
    myMedia.setVolume(1.0);
}, 5000);</pre>    </li>
</ol>

<h2 id="callbacks">Using status, success, and error callbacks</h2>
<p>Each time audio playback is starting, or paused, or finished with success or error a listener can be notified. In this example we
will pass callbacks for such events.</p>

<ol>
    <li>
        <p>Prepare success callback. It will be called when playback finished sucessfully. No parameters.</p>
        <pre class="prettyprint">var successCallback = function() {
    console.log('Audio file has been played back.');
}</pre>
    </li>
    <li>
        <p>Prepare error callback. It will be called when error occurs. One parameter contains error code. 
        See API reference for specific codes.</p>
        <pre class="prettyprint">var errorCallback = function(err) {
    console.log('An error occurred: ' + err.code);
}</pre>
    </li>
    <li>
        <p>Prepare status callback. It will be called when playback event occurs. This include starting (praparing to playback),
        running, paused, and stopped.</p>
        <pre class="prettyprint">var statusCallback = function(status) {
    switch( status ) {
    case Media.MEDIA_NONE: console.log('Audio file status is none');
        break;
    case Media.MEDIA_STARTING: console.log('Audio file is starting');
        break;
    case Media.MEDIA_RUNNING: console.log('Audio file is running');
        break;
    case Media.MEDIA_PAUSED: console.log('Audio file is paused');
        break;
    case Media.MEDIA_STOPPED: console.log('Audio file is stopped');
        break;
    default: console.log('Audio file status unknown');
        break;
    }
}
</pre>
    </li>
    <li><p>Construct new media object. Pass your callbacks as parameters. Callbacks are optional and not all must be provided, can be null.</p>
        <pre class="prettyprint">var src = "file:///home/owner/content/Music/play.mp3";
var myMedia = new Media(src, successCallback, errorCallback, statusCallback);</pre>
    </li>
    <li><p>Start playing:</p>
        <pre class="prettyprint">myMedia.play();</pre>
    </li>
    <li>
        <p>You can now test your callbacks by pausing, and resuming playback after 3 and 5 seconds:</p>
        <pre class="prettyprint">setTimeout( function() {
    myMedia.pause();
}, 3000);

setTimeout( function() {
    myMedia.play();
}, 5000);</pre>
    </li>
</ol>

<h2 id="duration">Getting duration and position</h2>
<p>This example will show how to get duration of audio file, and retrieve current position. Call for position is
asynchronous, so we will use a callback function</p>
<ol>
    <li>
        <p>Construct new media object from an audio file:</p>
        <pre class="prettyprint">var myMedia = new Media( "file:///home/owner/content/Music/play.mp3" );</pre>
    </li>
    <li>
        <p>Get duration and print it to system log. Value of -1 means duration is unknown.</p>
        <pre class="prettyprint">console.log( 'Audio duration in seconds is ' + myMedia.getDuration() );</pre>
    </li>
    <li><p>Start playing:</p>
        <pre class="prettyprint">myMedia.play();</pre>
    </li>
    <li>
        <p>Prepare callback for retrieving position information</p>
        <pre class="prettyprint">var positionCallback = function(position) {
            console.log('Current position in seconds is ' + position );
}</pre>
    </li>
    <li>
        <p>Prepare optional callback for errors in retrieving position. See API reference for specific error codes.</p>
        <pre class="prettyprint">var errorCallback = function(err) {
    console.log('An error occurred: ' + err.code);
}</pre>
    </li>
    <li>
        <p>Get the position. Information will be passed asynchronously to callback function.</p>
        <pre class="prettyprint">myMedia.getCurrentPosition( positionCallback, errorCallback );</pre>
    </li>
    <li>
        <p>You can set a timer to get position 5 seconds later:</p>
        <pre class="prettyprint">setTimeout( function() {
    myMedia.getCurrentPosition( positionCallback, errorCallback );
}, 5000);</pre>
    </li>
    <li>
        <p>You should see something similar in system log:</p>
        <pre>Current position in seconds is 0
Current position in seconds is 4.919</pre>
    </li>
</ol>

<h2 id="record">Recording audio</h2>
<p>This example will show how to start and stop recording. Release media object after stopped using it.</p>
<p>Your application should have <span style="font-family: monospace">http://tizen.org/privilege/mediacapture</span> privilege in config.xml<p>

<ol>
    <li><p>Prepare optional success and error callbacks</p>
        <pre class="prettyprint">var successCallback = function() {
    console.log('Started recording audio file.');
}

var errorCallback = function(err) {
    console.log('Error occurred ' + err.code);
}</pre>
    </li>
    <li><p>Construct media object and pass name for new audio file.</p>
        <pre class="prettyprint">var myMedia = new Media("recording.mp3", successCallback, errorCallback);</pre>
    </li>
    <li><p>Start recording:</p>
        <pre class="prettyprint">myMedia.startRecord();</pre>
    </li>
    <li><p>Stop recording after 10 seconds and release media object:</p>
        <pre class="prettyprint">setTimeout(function() {
    myMedia.stopRecord();
    console.log('Stopped recording an audio file.');
    myMedia.release();
}, 10000);</pre>
    </li>
</ol>


<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
