<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Input Device: Managing input keys in application</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#getkeys">Getting list of all supported keys</a></li>
            <li><a href="#getkeyinfo">Gathering information about key</a></li>
            <li><a href="#reg_unreg">Register / unregister input device key</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
             <li><a href="../../../../../org.tizen.guides/html/web/tizen/ui/inputdevice_w.htm">InputDevice Guide</a></li>
             <li><a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html">InputDevice API for Mobile Web</a></li>
             <li><a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/inputdevice.html">InputDevice API for Wearable Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Input Device: Example operations with InputDevice API</h1>

<p>This tutorial demonstrates how its possible to manage input device keys and perform custom actions when are pressed.</p>

<h2>Warm-up</h2>
<p>Become familiar with the InputDevice API basics by learning about:</p>
<ul> 
 <li><a href="#getkeys">Getting list of all supported keys</a> <p>Getting list of all supported keys and perform some action.</p> </li>
 <li><a href="#getkeyinfo">Gathering information about key</a> <p>Gathering code of key by key name.</p> </li>
 <li><a href="#reg_unreg">Register / unregister input device key</a> <p>Registering input device keys to handle DOM events for them.</p></li>
</ul>

<h2 id="getkeys" name="getkeys">Getting list of all supported keys</h2>

<p>First and basic operation with managing input device keys is to gather list of all supported keys:</p>
<ol>
<li><p>To get a supported key list <span style="font-family: Courier New,Courier,monospace">getSupportedKeys()</span> method of the <span style="font-family: Courier New,Courier,monospace">InputDeviceManager</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceManager">mobile</a><!-- and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/inputdevice.html#InputDeviceManager">wearable</a>--> applications).</p>

<pre class="prettyprint">
var keyCodes = {};
var supportedKeys = tizen.inputdevice.getSupportedKeys();

console.log("Supported keys list");
for (var i = 0; i &lt; supportedKeys.length; ++i) {
   keyCodes[supportedKeys[i].name] = supportedKeys[i].code;
   console.log(i + " : " + supportedKeys[i].name + " - " + supportedKeys[i].code);
}
</pre> </li>

<li> <p>Gathered list could be used for handling <em>keydown</em> and <em>keyup</em> events.</p>

</ol>

<h2 id="getkeyinfo" name="getkeyinfo">Gathering information about key</h2>

<p>It is not necessary to gather informations about all supported keys, the <span style="font-family: Courier New,Courier,monospace">getKey()</span> method of the <span style="font-family: Courier New,Courier,monospace">InputDeviceManager</span> interface (in <a href="../../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceManager">mobile</a><!-- and <a href="../../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/inputdevice.html#InputDeviceManager">wearable</a>--> applications).
When list of key is known, each key could be checked separately.</p>
<ol>

<li>
<p>First, it's needed to list of keys, that we are interested.</p>
<pre class="prettyprint">
var keys = ["VolumeUp", "VolumeDown"];
var keyCodes = {};
</pre>
</li>

<li><p>Second step is to check result of <span style="font-family: Courier New,Courier,monospace">getKey()</span> call, if it's not <em>null</em> (if null, it would mean that this key is not supported). </p>
</li><pre class="prettyprint">
for (var i = 0; i &lt; keys.length; i++) {
    try {
        var key = tizen.inputdevice.getKey(keys[i]);
        if (key == null) {
            console.log("key: " + keys[i] + " is not supported");
        } else {
            keyCodes[key.name] = key.code;
            console.log("key: " + key.name + " has code: " + key.code);
        }
    } catch(e) {
        console.log("error: " + e.name + ":" + e.message + ", when getting key with name " + keys[i]);
    }
}
</pre>
</li>
</ol>

<h2 id="reg_unreg" name="reg_unreg">Register / unregister input device key</h2>
<p>Changing action of key supported on device is main feature of this module:</p>

<ol>
<li>
<p>To gather supported keys we call code as was mentioned in <a href="#getkeys">Getting list of all supported keys</a>.</p>
</li>

<li>
<p>To register all supported keys for handling <em>keydown</em> and <em>keyup</em> events:</p>

<pre class="prettyprint">
var codeNamesMap = {};
var supportedKeys = tizen.inputdevice.getSupportedKeys();

for (var i = 0; i &lt; supportedKeys.length; ++i) {
   try {
       tizen.inputdevice.registerKey(supportedKeys[i].name);
       codeNamesMap[supportedKeys[i].code] = supportedKeys[i].name;
       console.log("key: " + supportedKeys[i].name + " was registered for event handling");
   } catch(error) {
       console.log("failed to register " + supportedKeys[i].name + ": " + error);
   }
}
</pre>
</li>

<li>
<p>To handle events for registered keys:</p>
<pre class="prettyprint">
window.addEventListener("keydown",
    function(keyEvent) {
        if(codeNamesMap.hasOwnProperty(keyEvent.keyCode)) {
            console.log("Registered key was pressed");
            //could define some custom action
        } else {
            console.log("Some other key was pressed");
        }
    }
);

window.addEventListener("keyup",
    function(keyEvent) {
        if(codeNamesMap.hasOwnProperty(keyEvent.keyCode)) {
            console.log("Registered key was released");
            //could define some custom action
        } else {
            console.log("Some other key was released");
        }
    }
);
</pre>
</li>

<li>
<p>To unregister keys, when custom actions are no longer needed:</p>
<pre class="prettyprint">
for (var i = 0; i &lt; supportedKeys.length; ++i) {
   tizen.inputdevice.unregisterKey(supportedKeys[i].name);
   console.log("key: " + supportedKeys[i].name + " was unregistered for event handling");
}
</pre>
<p>After unregistration <em>keydown</em> and <em>keyup</em> events would not be triggered for those keys.</p>
</li>
</ol>


<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
