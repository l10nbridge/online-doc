<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Your First Tizen Wearable Web Watch Application</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable Web" src="../../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#create">Creating a Project</a></li>
			<li><a href="#build">Building Your Application</a></li>
			<li><a href="#run">Running Your Application</a></li>
			<li><a href="#ui">Building a Simple UI</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../process/creating_app_project_w.htm">Creating the Application Project</a></li>
            <li><a href="../process/setting_properties_w.htm">Setting Project Properties</a></li>
            <li><a href="../process/app_dev_process_w.htm#build">Building the Application</a></li>
            <li><a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm">Emulator</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Creating Your First Tizen Wearable Web Watch Application</h1>

<p><strong>Welcome to Tizen wearable Web watch application development!</strong></p>

<p>A wearable Web application is basically a Web site stored on a wearable device. You can create it using Web-native languages, such as HTML5, CSS, and JavaScript. and run it on Tizen wearable devices to display a customized watch face to the user.</p>

<p>Study the following instructions to help familiarize yourself with the Tizen <a href="../process/app_dev_process_w.htm">Web application development process</a> as well as using the Tizen SDK and installing the created application on the Emulator or target device. With the instructions, you can create and run a basic wearable Web watch application, which displays an analog watch face with the current time on the screen:</p>

<ol>
<li>Before you get started with developing Tizen applications, download and install the <a href="../../../../org.tizen.download/html/cover_page.htm">Tizen SDK</a> (software development kit).
<p>For more information about the installation process, see the <a href="../../../../org.tizen.download/html/install/installing_sdk.htm">installation guide</a>.</p>
</li>
<li><a href="#create">Create a wearable Web watch project</a> using the Tizen IDE.
<p>This step shows how you can use a predesigned project template that creates all the basic files and folders required for your project.</p></li>
<li><a href="#build">Build the application</a>.
<p>After you have implemented code for the features you want, this step shows how you can build the application to validate and compile the code.</p></li>
<li><a href="#run">Run the application</a>.
<p>This step shows how you can run the application on the emulator or a real target device.</p></li>
<li><a href="#ui">Build a UI</a>.
<p>This step shows how you can make small alterations to the application UI to improve the usability of your application.</p></li>
</ol>

<p>When you are developing a more complex application, you can take advantage of the <a href="../../../../org.tizen.devtools/html/web_tools/tools_w.htm">Web tools included in the SDK</a> to ease the tasks of creating functionality and designing the application UI.</p>

<p><strong>Updating 2.3.1 Wearable Packages</strong></p>

<p>To develop wearable applications in the latest Tizen SDK, you must install the 2.3.1 wearable packages separately:</p>

<ol>
<li>Launch the Update Manager by going to <strong>Start &gt; All Programs &gt; Tizen SDK-&lt;version&gt; &gt; Update Manager-&lt;version&gt;</strong>.</li>
<li>In the <strong>All Packages</strong> tab, download all packages for <strong>2.3.1 Wearable</strong>.
<p align="center"><img alt="Download packages" src="../../images/first_app_download_wn.png" /></p></li>
</ol>

<h2 id="create">Creating a Project</h2>

<p>The following example shows you how to create and configure a basic wearable Web watch application project in the Tizen IDE. An application project contains all the files that make up an application.</p>

<p>The following figure illustrates the application to be created. The application screen displays the analog watch face and the current time, which continues to be refreshed every second while the application runs.</p>

<p class="figure">Figure: Wearable Web Watch application</p>
<p align="center"><img alt="Wearable Web Watch application" src="../../images/basic_app_running_ww_watch.png" /></p>


<p>To create the application project:</p>

<ol>

<li><p>Launch the Tizen IDE.</p></li>

<li>
<p>Make sure the <strong>Tizen Web</strong> perspective is selected in the top right corner of the IDE window. </p>
<p align="center"><img alt="Checking the perspective" src="../../images/change_perspective_w.png" /></p>
<p>If not, select it. If the perspective is not visible, in the IDE menu, select <strong>Window &gt; Open Perspective &gt; Other &gt; Tizen Web</strong>, and click <strong>OK</strong>.</p>
</li>

<li>
<p>In the IDE menu, select <strong>File &gt; New &gt; Tizen Web Project</strong>.</p>
<p align="center"><img alt="Creating a new Tizen Web project" src="../../images/create_project_1_w.png" /></p>
<p>The Project Wizard opens.</p>
</li>
<li>
<p>In the Project Wizard, define the project details.</p>
<p>The Project Wizard is used to create the basic application skeleton with the required folder structure and mandatory files. You can easily create different applications by selecting an applicable template or sample for the Project Wizard to use.</p>
<ol type="a">
<li><p>Select the <strong>Online Sample</strong> tab and the <strong>Watch &gt; Basic Watch</strong> sample.</p></li>
<li><p>Change the project name, if you want.</p></li>
<li><p>Leave all other fields in the Project Wizard to their default values, and click <strong>Finish</strong>.</p></li>
</ol>
<p align="center"><img alt="Defining the project details" src="../../images/create_project_2_ww_watch.png" /></p>
<p>The Project Wizard sets up the project, creates the application files using the default content from the template, and closes. For more information about the Project Wizard and the available templates, see <a href="../../../../org.tizen.devtools/html/web_tools/project_wizard_w.htm">Project Wizard</a>.</p>
</li>

</ol>

<p>You can see the created project in the <strong>Project Explorer</strong> view. The most important files and folders include:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">css</span>: Folder for CSS files used by the application to style its content</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">js</span>: Folder for JavaScript files used by the application to implement its functional logic</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">config.xml</span>: Application configuration file used by the  platform to install and launch the application</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">icon.png</span>: Application icon file used by the platform to represent the application</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">index.html</span>: Main HTML file for the layout of the application screen</p></li>
</ul>

<p class="figure">Figure: Application in the Project Explorer</p>
<p align="center"><img alt="Application in the Project Explorer" src="../../images/basic_app_project_explorer_ww_watch.png" /></p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">You can <a href="#configuration">view and modify the application configuration</a> in the Web application configuration editor. In this example, no configuration changes are required.</td>
        </tr>
    </tbody>
</table>

<p>Your application project is now ready for further actions. Next, build the application.</p>

<h3 id="configuration" name="configuration">Managing the Application Configuration</h3>

<p>To view and modify the application configuration:</p>

<ol>

<li>
<p>In the <strong>Project Explorer</strong> view, double-click the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file of the application. The IDE opens the file in the Web application configuration editor.</p>
</li>

<li>
<p>In the configuration editor, view and modify the configuration details using the various tabs:</p>
<p align="center"><img alt="Configuring the application" src="../../images/basic_app_config_ww_watch.png" /></p>
<ul>
<li><p><strong>Overview</strong>: Define general information, such as the name and icon of the application.</p></li>
<li><p><strong>Widget</strong>: Define author and license information and UI preferences.</p></li>
<li><p><strong>Features</strong>: Define required software and hardware features. This information is used for application filtering in the Tizen market place.</p></li>
<li><p><strong>Privileges</strong>: Define the security-sensitive APIs or API groups accessed and used by the application.</p></li>
<li><p><strong>Policy</strong>: Request network resource permissions to access external network resources.</p></li>
<li><p><strong>Localization</strong>: Define localized values for the application name, description, and license.</p></li>
<li><p><strong>Preferences</strong>: Define name-value pairs that can be set or retrieved through the application.</p></li>
<li><p><strong>Tizen</strong>: Edit the Tizen schema extension properties of the application.</p></li>
<li>
<p><strong>Source</strong>: View and edit the source code of the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file. Changes made and saved on the other tabs are reflected in the source code and vice versa.</p>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The <span style="font-family: Courier New,Courier,monospace">config.xml</span> file must conform to both the XML file format and the W3C specification requirements. Editing the file in the source code view is intended for advanced users only.</td>
        </tr>
    </tbody>
</table>
</li>
</ul>
</li>

<li><p>To save any changes, in the IDE menu, select <strong>File &gt; Save</strong>.</p></li>

</ol>

<p>For more information about configuring the application, see <a href="../process/setting_properties_w.htm#set_widget">Setting the Web Application Configuration</a>.</p>

<h2 id="build">Building Your Application</h2>

<p>After you have created the application project, you can implement the required features. In this example, only the default features from the project template are used, and no code changes are required.</p>
<p>When your application code is ready, you must build the application. The building process performs a validation check and compiles your JavaScript and CSS files.</p>

<p>You can build the application in the following ways:</p>

<ul>

<li>
<p><strong>Automatically</strong></p>
<p>The automatic build means that the IDE automatically rebuilds the application whenever you change a source or resource file and save the application project.</p>
<p>To use the automatic build:</p>
<ol>
<li>Select the project in the <strong>Project Explorer</strong> view.</li>
<li>In the IDE menu, select <strong>Project &gt; Build Automatically</strong>.
<p align="center"><img alt="Using the automatic build" src="../../images/build_automatic_w.png" /></p>
<p>A check mark appears next to the menu option.</p></li>
</ol>

<p>You can toggle the automatic build on and off by reselecting <strong>Project &gt; Build Automatically</strong>.</p>
</li>

<li>
<p><strong>Manually</strong></p>
<p>The manual build means that you determine yourself when the application is built.</p>
<p>To manually build the application, right-click the project in the <strong>Project Explorer</strong> view and select <strong>Build Project</strong>.</p>

<p class="figure">Figure: Manually building the application</p>
<p align="center"><img alt="Manually building the application" src="../../images/build_manual_watch_ww.png" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>In the IDE menu, select <strong>Project &gt; Build Project</strong>.</li>
<li>Press the <strong>F10</strong> key.</li></ul>

</li>
</ul>

<p>After you have built the application, run it.</p>

<h2 id="run">Running Your Application</h2>

<p>You can run the Web watch application on the <a href="../process/run_debug_app_w.htm#emulator">emulator</a> or a <a href="../process/run_debug_app_w.htm#target">real target device</a>.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Since the Web Simulator does not support a circular UI, this topic does not cover the instructions for running the application on the Web Simulator.</td> 
    </tr> 
   </tbody> 
  </table>  

<h3 id="emulator">Running on the Emulator</h3>

<p>To run the application on the emulator:</p>

<ol>
<li>Create and launch an emulator instance in the <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#manager">Emulator Manager</a>:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, launch the Emulator Manager by clicking the related icon.
<p align="center"><img src="../../images/emulator_icon.png" alt="Emulator manager icon" /></p>
</li>

<li>In the Emulator Manager, open the <strong>Create New Emulator</strong> drop-down list and select <strong>wearable</strong>. 
<p align="center"><img src="../../images/emulator_new_wearable.png" alt="Emulator manager" /></p>
</li>

<li>Modify the emulator options, and click <strong>Confirm</strong>.
<p>You can leave the options to their default values.</p>
<p align="center"><img src="../../images/emulator_settings_wearable.png" alt="Emulator options" /></p>
</li>

<li>To launch the emulator instance, select the emulator from the list and click the play icon.
<p align="center"><img src="../../images/emulator_launch_wearable.png" alt="Launch the emulator" /></p>

<p>The emulator is launched in its own window.</p>
<p>You can also see the new emulator instance in the <strong>Connection Explorer</strong> view. To view the emulator folder structure, click the arrow next to the emulator instance.</p>
<p align="center"><img src="../../images/emulator_window_wearable.png" alt="Emulator" /></p>
</li>
</ol>
</li>
<li>Generate a security profile.
	<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#emulator" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>
<li>Run the application:
<ol type="a">
<li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Web Application</strong>.
<p align="center"><img src="../../images/app_run_ww_watch.png" alt="Run the application" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>

<p>In the <strong>Console</strong> view, you can see that the application is successfully installed. However, it does not run on the emulator screen until you change the watch face in the emulator <strong>Settings</strong> menu.</p>
<p align="center"><img alt="Successful installation" src="../../images/watch_run_install_watch_ww.png" /></p>  
</li>
<li id="watchface">Change the watch face.
<p>When a watch application is successfully installed on the emulator, the watch UI is visible in the emulator <strong>Clock</strong> menu.</p>
<p>To change the watch face and make the watch application visible:</p>

<p align="center"><img alt="Changing the watch face" src="../../images/watch_run_change_wn.png" /></p> 

<ol type="a">
<li>If the emulator display has been switched off, activate it by pressing the <strong>Power</strong> key (in the bottom right corner of the emulator).</li>
<li>On the home screen (showing the default watch face), swipe up.</li>
<li>Select <strong>Settings &gt; Clock</strong>.</li>
<li>Swipe right and select your watch application.
<p>The <strong>Clock changed</strong> message is displayed.</p></li>
<li>Press the <strong>Back</strong> key (in the top right corner of the emulator device) multiple times, until the home screen with your new watch face is shown.
<p align="center"><img src="../../images/emulator_running_watch_ww.png" alt="Application running in the emulator" /></p>

</li>
</ol>
<p>While the application is running, the IDE <strong>Log</strong> view shows the log, debug, and exception messages from the methods defined in the log macros. To see the view, in the IDE menu, go to <strong>Window &gt; Show View &gt; Log</strong>.</p>
</li>
</ol>
</li></ol>

<p>For more information on using the emulator features, see <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#controls">Emulator Control Keys and Menu</a>, <a href="../../../../org.tizen.devtools/html/common_tools/emulator.htm#ecp">Emulator Control Panel</a>, <a href="../../../../org.tizen.devtools/html/common_tools/event_injec.htm">Event Injector</a>, and <a href="../../../../org.tizen.devtools/html/common_tools/emulator_features.htm">Extended Emulator Features</a>.</p>

<h3 id="target">Running on a Target Device</h3>

<p>To run the application on a target device:</p>

<ol>
<li>Connect the wearable target device to your computer:
<ol type="a">
<li>Define settings in the device:
<ul>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Bluetooth.
<p align="center"><img src="../../images/emulator_target_bt.png" alt="Switch on Bluetooth" /></p>
</li>
<li>Go to <strong>Settings &gt; Connections</strong>, and switch on Wi-Fi.
<p>The device and the computer must be connected to the same Wi-Fi network.</p>
<p>Note the IP address the device is using.</p>
<p align="center"><img src="../../images/emulator_target_wifi.png" alt="Switch on Wi-Fi" /></p>
</li>
<li>Go to <strong>Settings &gt; Gear info</strong>, and switch on the debugging mode.
<p align="center"><img src="../../images/emulator_target_debug.png" alt="Switch on debugging" /></p>
</li></ul>
</li>
<li>
<p>In the terminal, enter the following commands:</p>
<pre class="prettyprint">
cd tizen-sdk/tools
./sdb connect &lt;IP address of Gear S2&gt;
</pre>

<p>Use the IP address you noted before.</p>
<p>Instead of the terminal, you can also use the <a href="../wearable/first_app_ww.htm#remote_device">IDE Remote Device Manager</a> for the connection.</p>
</li>

<li>
<p>In the first attempt, the connection fails and the device asks for user confirmation. To allow Gear to read log data, copy files to and from your computer, and install the application manually, click the accept mark.</p>
<p align="center"><img src="../../images/remote_allow_gear_ww.png" alt="Allow Gear to access data" /></p>
</li>
<li>In the <strong>Connection Explorer</strong> view, confirm that the device is connected (shown in the device list).
<p align="center"><img src="../../images/remote_connected_ww.png" alt="Device is connected" /></p>
</li>
</ol>
</li>
<li>Generate an author certificate.
<p>Before you run the application, you must sign your application package by <a href="https://developer.tizen.org/community/tip-tech/issuing-tizen-certificate-certificate-extension-ver-1.2#CommercialDevices" target="_blank">generating an author certificate and registering it</a> in the IDE.</p>
</li>
<li>Run the application:
<ol type="a">
<li>In the <strong>Connection Explorer</strong> view, select the device.</li>
<li>In <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Web Application</strong>. 

<p align="center"><img src="../../images/app_run_ww_watch.png" alt="Run the application" /></p>

<p>Alternatively, you can also select the project in the <strong>Project Explorer</strong> view and do one of the following:</p>
<ul><li>Press the <strong>Ctrl+F11</strong> key.</li>
<li>Click the play icon (<img src="../../images/emulator_play.png" alt="Play icon" />) in the toolbar.</li></ul>

</li>
<li>Confirm that the application launches in the target device.
<p>Like with the <a href="#watchface">emulator</a>, you must change the watch face in the device settings before you can see the watch application UI on the device.</p>
</li>
</ol>
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The application is launched using the default debug run configuration. To create and use another configuration:
	 <ol>
	 <li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Run Configurations</strong>.</li>
	 <li>In the <strong>Run Configurations</strong> window, click the <strong>New Launch Configuration</strong> icon (<img alt="New Launch Configuration" src="../../images/run_new_config_wn.png" />), define the configuration details, and launch the application by clicking <strong>Run</strong>.
	 	 <p align="center"><img alt="Run Configurations" src="../../images/run_configurations_watch_ww.png" /></p></li>
	 </ol></td> 
    </tr> 
   </tbody> 
  </table>  

<p>If you want to run your application without a local device, see <a href="../../../../org.tizen.devtools/html/common_tools/connection_explorer.htm#remote">Testing with a Remote Device</a>.</p></li>
</ol>

<h2 id="ui">Building a Simple UI</h2>

<p>The following example is based on a template project for a wearable watch application, which was introduced in <a href="#create">Creating a Project</a>.</p>

<p>The template project makes it easy to create your watch application. Without modification, you can build and run the project. However, it is important to understand the following template code to customize it.</p>

<h3 id="init">Initializing the Watch Application</h3>

<p>To initialize the watch application:</p>
<ol>
<li>
<p>To set the application configuration, use the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file:</p> 


	<ul>
	<li>By default, the BasicWatch sample has the application category defined as <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;http://tizen.org/category/wearable_clock&quot; /&gt;</span>.
	<p>To run your application on Samsung Gear 2, Samsung Gear 2 Neo, and Samsung Gear S devices, use <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;com.samsung.wmanager.WATCH_CLOCK&quot; /&gt;</span> instead.</p>
		</li>
		<li>
	<p>To enable a custom UI for the <a href="../details/event_handling_w.htm#ambient">ambient mode</a>, the <span style="font-family: Courier New,Courier,monospace">ambient_support</span> attribute must be set to <span style="font-family: Courier New,Courier,monospace">enable</span>.</p>
	</li>
	</ul>

<pre class="prettyprint">
&lt;widget xmlns:tizen=&quot;http://tizen.org/ns/widgets&quot; xmlns=&quot;http://www.w3.org/ns/widgets&quot;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id=&quot;http://yourdomain/BasicWatch&quot; version=&quot;1.0.0&quot; viewmodes=&quot;maximized&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:application id=&quot;rko5hPHRgI.BasicWatch&quot; package=&quot;rko5hPHRgI&quot; required_version=&quot;2.3.1&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">ambient_support=&quot;enable&quot;</span>/&gt;
&nbsp;&nbsp;&nbsp;<span class="highlight">&lt;tizen:category name=&quot;http://tizen.org/category/wearable_clock&quot;/&gt;</span>

&nbsp;&nbsp;&nbsp;&lt;!--Get timetick events, occuring once a minute to enable the UI to be updated--&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:privilege name=&quot;http://tizen.org/privilege/alarm&quot;/&gt;

&nbsp;&nbsp;&nbsp;&lt;tizen:setting background-support=&quot;disable&quot; encryption=&quot;disable&quot; hwkey-event=&quot;enable&quot;/&gt;
&lt;/widget&gt;
</pre>
</li>
<li>
<p>To initialize the application and define basic features, use the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.</p>
<p>Modify the <span style="font-family: Courier New,Courier,monospace">window.requestAnimationFrame()</span> method to make the application compatible with the main browsers:</p>
<pre class="prettyprint">
window.requestAnimationFrame = window.requestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.webkitRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.mozRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.oRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.msRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;function(callback) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.setTimeout(callback, 1000 / 60);
&nbsp;&nbsp;&nbsp;};</pre>
</li>
<li>Initialize the canvas context and define the canvas area:
<pre class="prettyprint">
window.onload = function onLoad() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;ctx = canvas.getContext(&#39;2d&#39;);
&nbsp;&nbsp;&nbsp;clockRadius = document.body.clientWidth / 2;

&nbsp;&nbsp;&nbsp;canvas.width = document.body.clientWidth;
&nbsp;&nbsp;&nbsp;canvas.height = canvas.width;</pre>
</li>
<li>Define an event listener to detect back key events and time tick:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Add eventListener for tizenhwkey */
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;/* Add eventListener for timetick */
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;timetick&#39;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;timetick is called&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ambientWatch();
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li>

</ol>

<h3 id="draw">Drawing the Watch UI</h3>

<p>To draw the watch UI:</p>
<ol>
<li>
<p>To define the application layout, use the <span style="font-family: Courier New,Courier,monospace">index.html</span> file.</p>

<p>By default, the BasicWatch sample application layout contains only the main screen that displays the clock on a <a href="http://www.w3.org/TR/2012/WD-html5-20120329/the-canvas-element.html#the-canvas-element" target="_blank">canvas</a> element.</p> 

<pre class="prettyprint lang-html">
&lt;head&gt;
&nbsp;&nbsp;&nbsp;&lt;meta charset=&quot;utf-8&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;description&quot; content=&quot;Basic Watch based on HTML canvas element&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;title&gt;BasicWatch&lt;/title&gt;
&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;box&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</pre> 
</li>
<li>
<p>To draw the watch face on the canvas, use the <span style="font-family: Courier New,Courier,monospace">main.js</span> file:</p>
<ol type="a">
<li>
<p>Create the clock in the middle of the canvas, and define the watch face style:</p>
<pre class="prettyprint">
function renderDots() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var dx = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = null;

&nbsp;&nbsp;&nbsp;ctx.save();
&nbsp;&nbsp;&nbsp;ctx.translate(canvas.width / 2, canvas.height / 2);
&nbsp;&nbsp;&nbsp;ctx.beginPath();
&nbsp;&nbsp;&nbsp;ctx.fillStyle = &#39;#999999&#39;;</pre>
</li>
<li>Create 4 dots on the sides of the watch face and use the <span style="font-family: Courier New,Courier,monospace">fill()</span> method to style the dots:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;for (i = 1; i &lt;= 4; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = (i - 3) * (Math.PI * 2) / 4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = clockRadius * 0.9 * Math.cos(angle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = clockRadius * 0.9 * Math.sin(angle);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.arc(dx, dy, 3, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctx.fill();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ctx.closePath();</pre>
</li>
<li>Create the center point:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ctx.beginPath();

&nbsp;&nbsp;&nbsp;ctx.fillStyle = &#39;#ff9000&#39;;
&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;ctx.lineWidth = 4;

&nbsp;&nbsp;&nbsp;ctx.arc(0, 0, 7, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;ctx.fill();
&nbsp;&nbsp;&nbsp;ctx.stroke();
&nbsp;&nbsp;&nbsp;ctx.closePath();
}</pre>
</li>
</ol>
</li>
<li><p>To display the actual time on the watch face, create the clock needles and set their position using the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.</p>
<p>Render the clock needles:</p>
<ol type="a"> 
<li>The needles can be created using the <span style="font-family: Courier New,Courier,monospace">renderNeedle()</span> method.
<p>To create the needle as a triangle or a polygon, assign the coordinate of the beginning point with the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method. To assign the rest of the points of the triangle or polygon, use the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method, which defines the position of the next connecting vertex. You can also adjust the size of each clock needle with the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method.</p>
<pre class="prettyprint">
function renderNeedle(angle, radius) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;ctx.save();
&nbsp;&nbsp;&nbsp;ctx.rotate(angle);
&nbsp;&nbsp;&nbsp;ctx.beginPath();
&nbsp;&nbsp;&nbsp;ctx.lineWidth = 4;
&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;ctx.moveTo(6, 0);
&nbsp;&nbsp;&nbsp;ctx.lineTo(radius, 0);
&nbsp;&nbsp;&nbsp;ctx.closePath();
&nbsp;&nbsp;&nbsp;ctx.stroke();
&nbsp;&nbsp;&nbsp;ctx.closePath();
&nbsp;&nbsp;&nbsp;ctx.restore();
}</pre>
</li>
<li>Create the hour needle using the <span style="font-family: Courier New,Courier,monospace">renderHourNeedle()</span> method:
<pre class="prettyprint">
function renderHourNeedle(hour) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (hour - 3) * (Math.PI * 2) / 12;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.55;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}</pre>
</li>
<li>Create the minute needle using the <span style="font-family: Courier New,Courier,monospace">renderMinuteNeedle()</span> method:
<pre class="prettyprint">
function renderMinuteNeedle(minute)
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (minute - 15) * (Math.PI * 2) / 60;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.75;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}</pre>
</li>
</ol>
</li>
<li>Indicate the current time in the <span style="font-family: Courier New,Courier,monospace">main.js</span> file:
<ol>
<li>Determine the current time using the <span style="font-family: Courier New,Courier,monospace">new Date()</span> method. 
<p>To point the needles accurately, define variables for the current hour and minute.</p>
<pre class="prettyprint">
function getDate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var date;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = tizen.time.getCurrentDateTime();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = new Date();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return date;
}

function watch() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;if (isAmbientMode === true) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;var date = getDate(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours = date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes = date.getMinutes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds = date.getSeconds(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour = hours + minutes / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute = minutes + seconds / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextMove = 1000 - date.getMilliseconds();</pre>
</li>
<li>Every time a new time is indicated, erase the previous time (the previously positioned needles) using the <span style="font-family: Courier New,Courier,monospace">clearRect()</span> method:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);</pre>
</li>
<li>Point the clock needles to display the current time:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;renderDots();
&nbsp;&nbsp;&nbsp;renderHourNeedle(hour);
&nbsp;&nbsp;&nbsp;renderMinuteNeedle(minute);

&nbsp;&nbsp;&nbsp;ctx.restore();
&nbsp;&nbsp;&nbsp;setTimeout(function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
&nbsp;&nbsp;&nbsp;}, nextMove);
}</pre>
</li>

</ol>
</li>
</ol>	


<h3 id="ambient">Using the Ambient Mode</h3>

<p>In a low-powered wearable device, an ambient mode is available. In this mode, the watch application shows a limited UI and receives only the ambient tick event every minute to reduce power consumption.</p>

<p>The details of the limited UI drawn in the ambient mode depend on the device. Usually, when designing the ambient mode UI, draw a black and white UI only, and use less than 15% of the pixels on the screen. If you do not want to draw your own ambient mode UI, set the <span style="font-family: Courier New,Courier,monospace">ambient-support</span> attribute to <span style="font-family: Courier New,Courier,monospace">disable</span> in the watch application manifest file to allow the platform to show a default ambient mode UI.</p>


  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To use the ambient mode, the user must enable it in the device settings. In addition, in the Gear S2 device, the ambient mode activates only when you are wearing the watch on the wrist.
	 
	 <p>Since Tizen 2.3.2, some devices introduce a high color mode for the ambient mode. In the high color mode, you can use more colors (usually, 24-bit color) for drawing the ambient mode UI. To check whether the device supports the high color mode, use the following code:</p>

<pre class="prettyprint">
bool support;
int ret;

ret = system_info_get_platform_bool(&quot;http://tizen.org/feature/screen.always_on.high_color&quot;, &amp;support);
</pre></td> 
    </tr> 
   </tbody> 
  </table>
  
<p>To use the ambient mode:</p>
<ol>
<li>Define an event listener for the ambient mode:
<pre class="prettyprint">
/* Add eventListener for ambientmodechanged */
window.addEventListener(&#39;ambientmodechanged&#39;, function(e) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;ambientmodechanged: &quot; + e.detail.ambientMode);
&nbsp;&nbsp;&nbsp;if (e.detail.ambientMode === true) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Render ambient mode */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isAmbientMode = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ambientWatch();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Render normal mode */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isAmbientMode = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
&nbsp;&nbsp;&nbsp;}
});

/* Normal mode */
isAmbientMode = false;
window.requestAnimationFrame(watch);
};
</pre>
</li>

<li>Create the ambient mode dots:
<pre class="prettyprint">
function renderAmbientDots() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;ctx.save();

&nbsp;&nbsp;&nbsp;ctx.translate(canvas.width / 2, canvas.height / 2);
	
&nbsp;&nbsp;&nbsp;ctx.beginPath();

&nbsp;&nbsp;&nbsp;ctx.fillStyle = &#39;#000000&#39;;
&nbsp;&nbsp;&nbsp;ctx.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;ctx.lineWidth = 4;

&nbsp;&nbsp;&nbsp;ctx.arc(0, 0, 7, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;ctx.fill();
&nbsp;&nbsp;&nbsp;ctx.stroke();
&nbsp;&nbsp;&nbsp;ctx.closePath();
}
</pre>
</li>
<li>Indicate time in the ambient mode:
<pre class="prettyprint">
function ambientWatch() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;/* Get the current time */
&nbsp;&nbsp;&nbsp;var date = getDate(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours = date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes = date.getMinutes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds = date.getSeconds(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour = hours + minutes / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute = minutes + seconds / 60;

&nbsp;&nbsp;&nbsp;/* Erase the previous time */
&nbsp;&nbsp;&nbsp;ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

&nbsp;&nbsp;&nbsp;renderAmbientDots();
&nbsp;&nbsp;&nbsp;renderHourNeedle(hour);
&nbsp;&nbsp;&nbsp;renderMinuteNeedle(minute);

&nbsp;&nbsp;&nbsp;ctx.restore();
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

