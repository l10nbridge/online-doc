<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Watch Application: Developing a Watch Face Application</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#project">Step 1: Creating the Project</a></li>
			<li><a href="#build">Step 2: Building the Project</a></li>
			<li><a href="#run">Step 3: Running the Application</a></li>
			<li><a href="#source">BasicWatch Source Code</a></li>			
		</ul>
	</div></div>
</div>		

<div id="container"><div id="contents"><div class="content">
<h1>Watch Application: Developing a Watch Face Application</h1>

<p>You can easily create a watch face application for a wearable device by taking advantage of the BasicWatch sample delivered with the Tizen SDK. The sample is a fully functional application that displays an analog clock on a canvas, and you can use it as a basis for your watch face application.</p>

<p>For more information on the sample functionality and the full source code, see <a href="../graphics/task_basicwatch_w.htm">Basic Watch task</a>.</p> 

  <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in wearable applications only.</td> 
    </tr> 
   </tbody> 
  </table>

<p>This article describes the main steps required to develop a watch face application using the Tizen IDE. For more detailed information about the application development process, see <a href="../../../../../org.tizen.gettingstarted/html/web/process/app_dev_process_w.htm">Web Application Development Process</a>. To learn how to design a watch face, see the Gear UI guides on the <a href="http://developer.samsung.com/technical-doc/list.do" target="_blank">Samsung Developers</a> site.</p>

<h2 id="project" name="project">Step 1: Creating the Project</h2>

<p>To create the application project in the IDE:</p>

<ol> 
	<li>Launch the <strong>Tizen IDE</strong>.</li> 
	<li>In the IDE menu, select <strong>File &gt; New &gt; Tizen Web Project</strong>. 
	<p>If the project option you want is not visible, make sure that you are using the correct perspective (Tizen Web). To switch perspectives, go to <strong>Window &gt; Open Perspective &gt; Other</strong> and select the perspective you need.</p></li>
	<li>In the <strong>New Tizen Web Project</strong> window, select <strong>Sample &gt; WEARABLE-[version] &gt; Basic &gt; BasicWatch</strong>.</li>
	<li>Define your project name and location, and click <strong>Finish</strong>.</li> 
</ol> 
	
<p class="figure">Figure: Creating the project</p> 
<p align="center"><img alt="Creating the project" src="../../../images/watchface_project.png" /></p>

<p>The new project is shown in the <strong>Project Explorer</strong> view of the IDE, with full sample content:</p> 
<ul> 
	<li><span style="font-family: Courier New,Courier,monospace">css</span> folder: CSS file directory</li> 
	<li><span style="font-family: Courier New,Courier,monospace">js</span> folder: JavaScript file directory</li> 
	<li><span style="font-family: Courier New,Courier,monospace">config.xml</span>: Application configuration file</li> 
	<li><span style="font-family: Courier New,Courier,monospace">icon.png</span>: Icon file</li> 
	<li><span style="font-family: Courier New,Courier,monospace">index.html</span>: HTML file defining the application layout</li> 	
</ul> 

<h3>Setting the Application Layout</h3>
 
<p>You can define the application layout with the <span style="font-family: Courier New,Courier,monospace">index.html</span> file.</p>

<p class="figure">Figure: BasicWatch screen</p> 
<p align="center"><img alt="BasicWatch screen" src="../../../images/watchface_screen.png" /></p>

<p>By default, the BasicWatch sample application layout contains only the main screen that displays the clock on a <a href="http://www.w3.org/TR/2012/WD-html5-20120329/the-canvas-element.html#the-canvas-element" target="_blank">canvas</a> element.</p> 

<pre class="prettyprint lang-html">
&lt;head&gt;
&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas Clock - Canvas API Tutorial&lt;/title&gt;
&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;box&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</pre> 
 
<p>To draw the watch face on the canvas, use the <span style="font-family: Courier New,Courier,monospace">main.js</span> file:</p>
<ol>
	<li>Create the clock in the middle of the canvas, and define the watch face style:
	<pre class="prettyprint">
function renderDots() 
{
&nbsp;&nbsp;&nbsp;'use strict';

&nbsp;&nbsp;&nbsp;var dx = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = null;

&nbsp;&nbsp;&nbsp;context.save();
&nbsp;&nbsp;&nbsp;context.translate(canvas.width / 2, canvas.height / 2);
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.fillStyle = '#999999';</pre>
	</li>
	<li>Create 4 dots on the sides of the watch face and use the <span style="font-family: Courier New,Courier,monospace">fill()</span> method to style the dots:
	<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;for (i = 1; i &lt;= 4; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = (i - 3) * (Math.PI * 2) / 4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = clockRadius * 0.9 * Math.cos(angle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = clockRadius * 0.9 * Math.sin(angle);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.arc(dx, dy, 3, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;context.closePath();</pre>
	</li>
	<li>Create the center point:
	<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;context.beginPath();

&nbsp;&nbsp;&nbsp;context.fillStyle = &#39;#ff9000&#39;;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;

&nbsp;&nbsp;&nbsp;context.arc(0, 0, 7, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
}</pre>
	</li>
</ol>

<h3>Configuring and Initializing the Application</h3>

<p>You can set the application configuration using the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file.</p> 

<table class="note"> 
	<tbody> 
	<tr> 
		<th class="note">Note</th> 
	</tr> 
	<tr> 
		<td class="note">By default, the BasicWatch sample has the application category defined as <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;http://tizen.org/category/wearable_clock&quot; /&gt;</span>.
		<p>To run your application on Samsung Gear 2, Samsung Gear 2 Neo, and Samsung Gear S devices, use <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;com.samsung.wmanager.WATCH_CLOCK&quot; /&gt;</span> instead.</p></td> 
	</tr> 
	</tbody> 
</table>

<p>To initialize the application and define basic features, use the <span style="font-family: Courier New,Courier,monospace">main.js</span> file:</p>

<ol>
	<li>Modify the <span style="font-family: Courier New,Courier,monospace">window.requestAnimationFrame()</span> method to make the application compatible with the main browsers:
	<pre class="prettyprint">
window.requestAnimationFrame = window.requestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.webkitRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.mozRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.oRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.msRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;function (callback) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.setTimeout(callback, 1000 / 60);
&nbsp;&nbsp;&nbsp;};</pre>
	</li>
	<li>Initialize the canvas context and define the canvas area:
	<pre class="prettyprint">
window.onload = function () 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&#39;2d&#39;);
&nbsp;&nbsp;&nbsp;clockRadius = document.width / 2;

&nbsp;&nbsp;&nbsp;canvas.width = document.width;
&nbsp;&nbsp;&nbsp;canvas.height = canvas.width;</pre>
	</li>
	<li>Define an event listener to detect back key events:
	<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName == &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
};</pre>
	</li>
</ol>

<h3>Coding the Main Features</h3>
 
<p>To display the actual time on the watch face, create the clock needles and set their position using the <span style="font-family: Courier New,Courier,monospace">main.js</span> file:</p>

<ol>
	<li>Render the clock needles:
	<ol type="a"> 
		<li>The needles can be created using the <span style="font-family: Courier New,Courier,monospace">renderNeedle()</span> method.
		<p>To create the needle as a triangle or a polygon, assign the coordinate of the beginning point with the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method. To assign the rest of the points of the triangle or polygon, use the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method, which defines the position of the next connecting vertex. You can also adjust the size of each clock needle with the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method.</p>
		<pre class="prettyprint">
function renderNeedle(angle, radius) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;context.save();
&nbsp;&nbsp;&nbsp;context.rotate(angle);
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.moveTo(6, 0);
&nbsp;&nbsp;&nbsp;context.lineTo(radius, 0);
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.restore();
}</pre>
		</li>
		<li>Create the hour needle using the <span style="font-family: Courier New,Courier,monospace">renderHourNeedle()</span> method:
		<pre class="prettyprint">
function renderHourNeedle(hour) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (hour - 3) * (Math.PI * 2) / 12;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.55;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}</pre>
		</li>
		<li>Create the minute needle using the <span style="font-family: Courier New,Courier,monospace">renderMinuteNeedle()</span> method:
		<pre class="prettyprint">
function renderMinuteNeedle(minute)
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (minute - 15) * (Math.PI * 2) / 60;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.75;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}</pre>
		</li>
	</ol>
	</li>
	<li>Indicate the current time:
	<ol>
		<li>Determine the current time using the <span style="font-family: Courier New,Courier,monospace">new Date()</span> method. 
		<p>To point the needles accurately, define variables for the current hour and minute.</p>
		<pre class="prettyprint">
function watch() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var date = new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours = date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes = date.getMinutes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds = date.getSeconds(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour = hours + minutes / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute = minutes + seconds / 60;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextMove = 1000 - date.getMilliseconds();</pre>
		</li>
		<li>Every time a new time is indicated, erase the previous time (the previously positioned needles) using the <span style="font-family: Courier New,Courier,monospace">clearRect()</span> method:
		<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;context.clearRect(0, 0, context.canvas.width, context.canvas.height);</pre>
		</li>
		<li>Point the clock needles to display the current time:
		<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;renderDots();
&nbsp;&nbsp;&nbsp;renderHourNeedle(hour);
&nbsp;&nbsp;&nbsp;renderMinuteNeedle(minute);

&nbsp;&nbsp;&nbsp;context.restore();
&nbsp;&nbsp;&nbsp;setTimeout(function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
&nbsp;&nbsp;&nbsp;}, nextMove);}</pre>
		</li>
	</ol>
	</li>
</ol>	

<h2 id="build" name="build">Step 2: Building the Project</h2>	
	
<p>When your code is ready, you can build the project:</p> 

<ol>
	<li>In the <strong>Project Explorer</strong> view, select your project.</li>
	<li>In the IDE menu, select <strong>Project &gt; Build Project</strong>.
	<p>Any build errors are shown in the <strong>Problems</strong> and <strong>Project Explorer</strong> views.</p>
	</li>
</ol>	

<p>After building, the Tizen IDE automatically packages the project by creating a <span style="font-family: Courier New,Courier,monospace">.wgt</span> package file.</p>

<h2 id="run" name="run">Step 3: Running the Application</h2>

<p>You can run the application on the Emulator or a real target device.</p>

<p>To run the application on the Emulator:</p>

<ol>
	<li>Launch the Emulator:
	<ol type="a"> 
		<li>Start the Emulator Manager by clicking the Emulator Manager icon in the <strong>Connection Explorer</strong> view.</li> 
		<li>In the <strong>Emulator Manager</strong> window, select the <strong>wearable-[version]</strong> tab.</li>
		<li>If no Emulator images exist, create one by clicking <strong>Create New</strong>.</li>
		<li>Launch the Emulator by clicking the play button.</li> 
	</ol> 
	<p align="center"><img alt="Emulator Manager" src="../../../images/watchface_emulator.png" /></p>	
	</li> 
	<li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Tizen Web Application</strong>.</li> 
</ol>

<p>To run the application on a target device:</p> 

<ol> 
	<li>Connect the target device to your computer.</li> 
	<li>In the <strong>Project Explorer</strong> view, right-click the project and select <strong>Run As &gt; Run Configurations</strong>.</li> 
	<li>In the <strong>Run Configurations</strong> window, click <strong>New Launch Configuration</strong> and set the timeout using the <strong>Timeout value</strong> slider. 
	<p>The timeout value represents the waiting time for the application launch operation. If you are using a lower configuration computer, set a higher timeout value to avoid application launch failure errors.</p></li> 
	<li>To start the run, click <strong>Run</strong>.</li> 
</ol>

<h2 id="source" name="source">BasicWatch Source Code</h2>

<p><span style="font-family: Courier New,Courier,monospace">index.html</span>:</p>

<pre class="prettyprint">
&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;
&nbsp;&nbsp;&nbsp;&lt;meta charset=&quot;utf-8&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0&quot; /&gt;
&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;description&quot; content=&quot;Canvas Clock - Canvas API Tutorial&quot; /&gt;

&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas Clock - Canvas API Tutorial&lt;/title&gt;

&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;box&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;</pre>

<p><span style="font-family: Courier New,Courier,monospace">main.js</span>:</p>

<pre class="prettyprint">
var canvas, context, clockRadius;

window.requestAnimationFrame = window.requestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.webkitRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.mozRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.oRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.msRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;function (callback) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.setTimeout(callback, 1000 / 60);
&nbsp;&nbsp;&nbsp;};

function renderDots() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var dx = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = null;

&nbsp;&nbsp;&nbsp;context.save();

&nbsp;&nbsp;&nbsp;/* Assign the clock creation location in the middle of the canvas */
&nbsp;&nbsp;&nbsp;context.translate(canvas.width / 2, canvas.height / 2);

&nbsp;&nbsp;&nbsp;/* Assign the style of the number which will be applied to the clock plate */
&nbsp;&nbsp;&nbsp;context.beginPath();

&nbsp;&nbsp;&nbsp;context.fillStyle = &#39;#999999&#39;;

&nbsp;&nbsp;&nbsp;/* Create 4 dots in a circle */
&nbsp;&nbsp;&nbsp;for (i = 1; i &lt;= 4; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = (i - 3) * (Math.PI * 2) / 4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = clockRadius * 0.9 * Math.cos(angle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = clockRadius * 0.9 * Math.sin(angle);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.arc(dx, dy, 3, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;context.closePath();

&nbsp;&nbsp;&nbsp;/* Render center dot */
&nbsp;&nbsp;&nbsp;context.beginPath();

&nbsp;&nbsp;&nbsp;context.fillStyle = &#39;#ff9000&#39;;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;

&nbsp;&nbsp;&nbsp;context.arc(0, 0, 7, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
}

function renderNeedle(angle, radius) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;context.save();
&nbsp;&nbsp;&nbsp;context.rotate(angle);
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.moveTo(6, 0);
&nbsp;&nbsp;&nbsp;context.lineTo(radius, 0);
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.restore();
}

function renderHourNeedle(hour) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (hour - 3) * (Math.PI * 2) / 12;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.55;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}

function renderMinuteNeedle(minute) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (minute - 15) * (Math.PI * 2) / 60;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.75;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}

function getDate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var date;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = tizen.time.getCurrentDateTime();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = new Date();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return date;
}

function watch() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;/* Import the current time */
&nbsp;&nbsp;&nbsp;/* noinspection JSUnusedAssignment */
&nbsp;&nbsp;&nbsp;var date = getDate(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours = date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes = date.getMinutes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds = date.getSeconds(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour = hours + minutes / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute = minutes + seconds / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextMove = 1000 - date.getMilliseconds();

&nbsp;&nbsp;&nbsp;/* Erase the previous time */
&nbsp;&nbsp;&nbsp;context.clearRect(0, 0, context.canvas.width, context.canvas.height);

&nbsp;&nbsp;&nbsp;renderDots();
&nbsp;&nbsp;&nbsp;renderHourNeedle(hour);
&nbsp;&nbsp;&nbsp;renderMinuteNeedle(minute);

&nbsp;&nbsp;&nbsp;context.restore();
&nbsp;&nbsp;&nbsp;setTimeout(function () 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
&nbsp;&nbsp;&nbsp;}, nextMove);
}

window.onload = function () 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&#39;2d&#39;);
&nbsp;&nbsp;&nbsp;clockRadius = document.width / 2;

&nbsp;&nbsp;&nbsp;/* Assign the area that will use Canvas */
&nbsp;&nbsp;&nbsp;canvas.width = document.width;
&nbsp;&nbsp;&nbsp;canvas.height = canvas.width;

&nbsp;&nbsp;&nbsp;/* Add eventListener for tizenhwkey */
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
};</pre>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>