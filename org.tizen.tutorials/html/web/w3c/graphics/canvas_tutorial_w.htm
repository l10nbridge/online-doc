<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>HTML5 Canvas: Creating Shapes and Text</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#canvas" class="opensection">Using a Canvas</a></li>
			<li><a href="#image" class="opensection">Using Images on the Canvas</a></li>
			<li><a href="#shape" class="opensection">Drawing Shapes to the Canvas</a></li>
			<li><a href="#mask" class="opensection">Drawing Masks to the Canvas</a></li>
			<li><a href="#text" class="opensection">Creating Text and Lines on the Canvas</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/w3c/graphics/canvas_w.htm">HTML5 Canvas Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#canvas">HTML5 canvas element API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#canvas2d">HTML Canvas 2D Context API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#canvas">HTML5 canvas element API for Wearable Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#canvas2d">HTML Canvas 2D Context API for Wearable Web</a></li>

		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>HTML5 Canvas: Creating Shapes and Text</h1>
<div class="cont"><div class="static-cont">	

<p>This tutorial demonstrates how you can create images, shapes, text, and lines on a canvas.</p>

<h2>Warm-up</h2>
<p>Become familiar with the HTML5 Canvas Element and HTML Canvas 2D Context API basics by learning about:</p>
<ul>
<li><a class="opensection" href="#canvas">Using a Canvas</a>
<p>Create and manage a canvas.</p></li>

<li><a class="opensection" href="#image">Using Images on the Canvas</a>
<p>Connect an image to  the canvas and transform it.</p></li>

<li><a class="opensection" href="#shape">Drawing Shapes to the Canvas</a>
<p>Draw shapes to the canvas and transform them.</p></li>

<li><a class="opensection" href="#mask">Drawing Masks to the Canvas</a>
<p>Replace a background image by drawing a mask on it with a brush.</p></li>

<li><a class="opensection" href="#text">Creating Text and Lines on the Canvas</a>
<p>Draw text and line on the canvas and assigning styles for them.</p></li> 
</ul>

<h2>Task in Wearable Applications</h2>
<p>In the <a href="task_clockwidget_w.htm">Clock Widget</a> task, we will walk through using canvas contexts to create and display a clock on the canvas.</p>


<!-- Show / Hide all links -->
	<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>
	<!-- Folds -->
	<ul class="devicespecifications">
	
	<li>
			<div class="devicespec-tit">
				<h2 id="canvas" name="canvas" class="items-tit-h2">Using a Canvas</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>hide</em></a></span>
			</div>
			<div class="devicespec-con">
			<p>To draw images with JavaScript, you must learn to use a canvas in your application:</p>
 
<ol>
<li>Create a <span style="font-family: Courier New,Courier,monospace">&lt;canvas&gt;</span> element with the HTML5 Canvas Element API. 
<p>The canvas assigns the region (canvas context) where images are drawn with JavaScript.</p>

<pre class="prettyprint">
&lt;canvas width=&quot;300&quot; height=&quot;300&quot; id=&quot;canvas&quot;&gt; 
&nbsp;&nbsp;&nbsp;This browser is not supported
&lt;/canvas&gt;
</pre>

<p>If no <span style="font-family: Courier New,Courier,monospace">width</span> and <span style="font-family: Courier New,Courier,monospace">height</span> attributes are inserted, the default value is <span style="font-family: Courier New,Courier,monospace">width: 300px, height: 150px</span>.</p>
</li>

<li>To check the information of the image connected to the canvas, use the <span style="font-family: Courier New,Courier,monospace">toDataURL([Optional], [Variadic])</span> method to restore the URL of the image used in the canvas. To create a blob object of the image file, use the <span style="font-family: Courier New,Courier,monospace">getContext(contextId)</span> method.
</li>

<li>Use the <a href="http://www.w3.org/TR/2012/WD-2dcontext-20120329/#canvasrenderingcontext2d" target="_blank">CanvasRenderingContext2D</a> interface to connect to the canvas and get the canvas context:
<pre class="prettyprint">
var canvas = document.querySelector(&quot;canvas&quot;),
var context = canvas.getContext(&#39;2d&#39;);
</pre>
<p>The interface has various methods and attributes for expressing images and shapes.</p></li> 
<li>To manage the work stack of the canvas, use the following methods:
<ul class="ul">
<li><span style="font-family: Courier New,Courier,monospace">save()</span>: Pushes the current state onto the stack.</li>
<li><span style="font-family: Courier New,Courier,monospace">restore()</span>: Pops the top state on the stack, restoring the context to that state.</li>
</ul>
</li>
</ol>

<p>There is a need to separately check whether the canvas 2D context can be used by using the <span style="font-family: Courier New,Courier,monospace">getContext()</span> method:</p>

<pre class="prettyprint">
if (!(canvas.getContext)) 
{
&nbsp;&nbsp;&nbsp;alert(&quot;This browser is not supported&quot;);
}
</pre>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">canvas_tutorial1.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">canvas_tutorial2.html</a></li>
 </ul>
			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="image" name="image" class="items-tit-h2">Using Images on the Canvas</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>hide</em></a></span>
			</div>
			<div class="devicespec-con">
			<p>To use a canvas in your application, you must learn to use images on it:</p>
 
 <ol><li>
 <p>Use the <span style="font-family: Courier New,Courier,monospace">drawImage()</span> method to express an image in the canvas.</p>
<p>When you define the URL of the image to be imported and its coordinates, the original image is imported as it is. You can hide certain parts of the image by assigning its size accordingly.</p>

<pre class="prettyprint">/* Draw the image by setting its size */
context.drawImage(image, 30, 130, 130, 30);
context.drawImage(image, 200, 100, 80, 60);

/* Draw the image by setting the image area */
context.drawImage(image, 193, 0, 30, 30, 80, 220, 50, 50);
context.drawImage(image, 0, 10, 40, 60, 190, 205, 40, 60);
</pre></li>

<li><p>When the image is connected to the canvas, extract the color value through the <span style="font-family: Courier New,Courier,monospace">getImageData()</span> method. Re-input the transformed values with the <span style="font-family: Courier New,Courier,monospace">putImageData()</span> method.</p>

<pre class="prettyprint">
/* Import the image with the required coordinates */
var transImage = context.getImageData(30, 20, image.width, image.height);

/* Convert the data color value for each image pixel */
for (var i = 0; i &lt; transImage.data.length; i += 4) 
{
&nbsp;&nbsp;&nbsp;transImage.data[i + 0] = 255 - transImage.data[i + 0];
&nbsp;&nbsp;&nbsp;transImage.data[i + 1] = 255 - transImage.data[i + 1];
&nbsp;&nbsp;&nbsp;transImage.data[i + 2] = 255 - transImage.data[i + 2];
}

/* Insert the converted image back to the canvas */ 
context.putImageData(transImage, 30, 20);
</pre></li>
<li><p>Use the <span style="font-family: Courier New,Courier,monospace">CanvasTransformation</span> interface to transform the selected object, for example, its size, angle, or position. By connecting to the image used in the canvas, you can also rotate it. (The following figure applies to mobile applications only.) 
</p>

<pre class="prettyprint">
context.beginPath();
context.scale(1.7, 1.3);
context.drawImage(image, 30, 20);
context.restore();

/* Move the (0, 0) reference axis coordinates of the canvas */ 
context.beginPath();
context.translate(50, 100);
context.drawImage(image, 30, 20);
context.restore();

/* Rotate using the (0, 0) coordinates as reference */
context.beginPath();
context.rotate(45 * Math.PI/180);
context.drawImage(image, 70, 20);
context.restore();</pre>
<p style="text-align:center;"><img alt="Using images on the canvas (in mobile applications only)" src="../../../images/canvas_using_images.png" /></p>
</li></ol>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">canvas_tutorial1.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">canvas_tutorial2.html</a></li>
 </ul>
			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="shape" name="shape" class="items-tit-h2">Drawing Shapes to the Canvas</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>hide</em></a></span>
			</div>
			<div class="devicespec-con">
			<p>To use a canvas in your application, you must learn to create draw shapes on it:</p> 

<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace">rect()</span> method to create a rectangle.
<p>Use the canvas context to assign the rectangle attributes, such as position and size. (The following figure applies to mobile applications only.)</p>

<pre class="prettyprint">
/* Rectangle fill style */
context.fillStyle = &#39;#333&#39;;
context.fillRect(10, 10, 300, 300);

/* Rectangle stroke style */
context.strokeStyle = &#39;#ff0&#39;;
context.strokeRect(100, 100, 100, 100);

/* Rectangle clear style */
context.clearRect(50, 50, 100, 100);
</pre>
<p style="text-align:center;"><img alt="Assign rectangle attributes (in mobile applications only)" src="../../../images/canvas_drawing_shapes1.png" /></p> 
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace">arc()</span> method to create a circle.
<p>Use the canvas context to assign the circle attributes, such as position and radius. (The following figure applies to mobile applications only.)</p>

<pre class="prettyprint">
/* Create a circle */ 
context.beginPath();
context.arc(80, 80, 50, 0, 1.5 * Math.PI);
context.fill();

context.beginPath();
context.arc(230, 80, 50, 0, 1 * Math.PI);
context.stroke();

/* Create line A */ 
context.moveTo(20, 300);
context.lineTo(100, 200);

/* Connect the line A end coordinates to the line B start coordinates */
context.arcTo(150, 50, 100, 100, 50);

/* Draw line B */ 
context.lineTo(300, 200);
context.stroke();</pre>
<p style="text-align:center;"><img alt="Assign circle attributes (in mobile applications only)" src="../../../images/canvas_drawing_shapes2.png" /></p> 
</li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace">CanvasTransformation</span> interface to transform the created shapes. With compositing, a certain part of the shape can be made transparent. (The following figure applies to mobile applications only.)</p>

<pre class="prettyprint">
/* Display the relevant area */ 
context.rect(50, 20, 100, 120);
context.stroke();
context.clip();

context.beginPath();
context.arc(150, 150, 100, 0, 2 * Math.PI);

/* Fill the shape */ 
context.fillStyle = &#39;tomato&#39;;
</pre>
<p style="text-align:center;"><img alt="Transform shapes (in mobile applications only)" src="../../../images/canvas_drawing_shapes3.png" /></p> 
</li>
</ol>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">For a canvas, the rendering occurs in the order from the back of the input source.</td> 
      </tr> 
     </tbody> 
    </table>
	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">canvas_tutorial3.html</a></li>
 </ul> 
			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="mask" name="mask" class="items-tit-h2">Drawing Masks to the Canvas</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>hide</em></a></span>
			</div>
			<div class="devicespec-con">
			<p>To use a canvas in your application, you must learn to draw masks on it:</p> 

<ol>
<li>Create the HTML layout with a canvas and 2 button input elements for brush selection:

<pre class="prettyprint">
&lt;canvas id=&quot;canvas&quot; width=&quot;600&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;input type=&quot;button&quot; value=&quot;Small brush&quot; id=&quot;smallBrush&quot;&gt;
&lt;input type=&quot;button&quot; value=&quot;Big brush&quot; id=&quot;bigBrush&quot;&gt;</pre> 
</li>

<li>Define the CSS style for the background image:

<pre class="prettyprint">
&lt;style&gt;
&nbsp;&nbsp;&nbsp;body
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background: url(images/tizen_blackfold3.png) no-repeat;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-size: cover;
&nbsp;&nbsp;&nbsp;}
&lt;/style&gt;
</pre>
</li>

<li>Declare the JavaScript variables needed in the application. The <span style="font-family: Courier New,Courier,monospace">lastX</span> and <span style="font-family: Courier New,Courier,monospace">lastX</span> variables indicate the last position of a user event. The <span style="font-family: Courier New,Courier,monospace">mouseBtn</span> variable indicates whether a button or touch event has occurred, and the <span style="font-family: Courier New,Courier,monospace">brushSize</span> variable indicates the current brush size.

<pre class="prettyprint">
var lastX = 0, 
&nbsp;&nbsp;&nbsp;&nbsp;lastX = 0, 
&nbsp;&nbsp;&nbsp;&nbsp;mouseBtn = false, 
&nbsp;&nbsp;&nbsp;&nbsp;brushSize = 4;
var canvas, context;
</pre>
</li>

<li>Initialize the canvas:
<pre class="prettyprint">window.onload = function()
{
&nbsp;&nbsp;&nbsp;canvas = document.getElementById(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&quot;2d&quot;);
&nbsp;&nbsp;&nbsp;if (!context)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}</pre>
</li>

<li>Draw an image on the canvas using the <span style="font-family: Courier New,Courier,monospace">drawImage()</span> method. The user is able to replace the image with another using a brush. 
<p>Create a new <span style="font-family: Courier New,Courier,monospace">Image</span> object, including the path of the image file. Define the line width to be based on the brush size selected by the user.</p>

<pre class="prettyprint">
var img = new Image();
img.addEventListener(&#39;load&#39;, function()
{
&nbsp;&nbsp;&nbsp;context.drawImage(img, 0, 0);
});
img.src = &quot;images/TizenPinwheelArrows.png&quot;;
context.lineWidth = brushSize;
context.lineCap = &#39;round&#39;;</pre>
</li>
<li>Define the button events and brushes:
<pre class="prettyprint">
var smallBtn = document.getElementById(&quot;smallBrush&quot;);
smallBtn.addEventListener(&#39;click&#39;, smallBrush);
var bigBtn = document.getElementById(&quot;bigBrush&quot;);
bigBtn.addEventListener(&#39;click&#39;, bigBrush);

function smallBrush(e)
{
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;brushSize = 4;
&nbsp;&nbsp;&nbsp;context.lineWidth = brushSize;
}
/* Define the big brush similarly */
</pre></li>
<li>Add event listeners to detect touch and mouse events:
<pre class="prettyprint">canvas.addEventListener(&#39;touchstart&#39;, startDraw);
canvas.addEventListener(&#39;touchmove&#39;, drawStep);
canvas.addEventListener(&#39;touchend&#39;, stopDraw);				
canvas.addEventListener(&#39;mouseout&#39;, stopDraw);
/* Event listeners for mouse events */
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">touchstart</span> and <span style="font-family: Courier New,Courier,monospace">mousedown</span> events only store the event coordinates, the <span style="font-family: Courier New,Courier,monospace">touchmove</span> and <span style="font-family: Courier New,Courier,monospace">mousemove</span> events define the position and direction of the drawing, and the <span style="font-family: Courier New,Courier,monospace">touchend</span> and <span style="font-family: Courier New,Courier,monospace">mouseup</span> events indicate that the user event ends, as illustrated in the following figure.</p>
 <p style="text-align:center;"><img alt="Drawing events" src="../../../images/drawing_line_sequence.png" /></p>
</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">updateLastPos()</span> method to update the <span style="font-family: Courier New,Courier,monospace">lastX</span> and <span style="font-family: Courier New,Courier,monospace">lastY</span> variable values. The real coordinates can be calculated by reducing the offset position of the canvas element from the touch position coordinates. The <span style="font-family: Courier New,Courier,monospace">&#39;touch&#39;</span> string indicates that the event is a touch event.
<pre class="prettyprint">
function updateLastPos(e)
{
&nbsp;&nbsp;&nbsp;if (e.type.indexOf(&#39;touch&#39;) &gt;= 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var pos = e.touches.item(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastX = pos.clientX-pos.target.offsetLeft;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastY = pos.clientY-pos.target.offsetTop;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastX = e.offsetX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastY = e.offsetY;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>When the user starts drawing, the <span style="font-family: Courier New,Courier,monospace">touchstart</span> or <span style="font-family: Courier New,Courier,monospace">mousedown</span> event calls the <span style="font-family: Courier New,Courier,monospace">startDraw()</span> method, which updates the event position, sets the composite operations property to make the drawing a mask, begins to draw a new path, moves the drawing point to the selected coordinates, and sets the button or touch event state to <span style="font-family: Courier New,Courier,monospace">true</span>.
<pre class="prettyprint">function startDraw(e)
{
&nbsp;&nbsp;&nbsp;updateLastPos(e);
&nbsp;&nbsp;&nbsp;context.globalCompositeOperation = &#39;destination-out&#39;;
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.moveTo(lastX, lastY);
&nbsp;&nbsp;&nbsp;mouseBtn = true;
}
</pre>
</li>

<li>While the user is drawing, the <span style="font-family: Courier New,Courier,monospace">touchmove</span> and <span style="font-family: Courier New,Courier,monospace">mousemove</span> events are handled with the <span style="font-family: Courier New,Courier,monospace">drawStep()</span> method based on the button state retrieved from the <span style="font-family: Courier New,Courier,monospace">mouseBtn</span> variable. The <span style="font-family: Courier New,Courier,monospace">drawStep()</span> method calls the <span style="font-family: Courier New,Courier,monospace">updateLastPos()</span> method only when the mouse or finger is being moved. Use the <span style="font-family: Courier New,Courier,monospace">stroke()</span> method to make the drawn line visible.
<pre class="prettyprint">function drawStep(e)
{
&nbsp;&nbsp;&nbsp;if (mouseBtn)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateLastPos(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.lineTo(lastX, lastY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>When the touch event ends or the mouse button is released, use the <span style="font-family: Courier New,Courier,monospace">stopDraw()</span> method to stop drawing:
<pre class="prettyprint">function stopDraw(e)
{			
&nbsp;&nbsp;&nbsp;context.globalCompositeOperation = &#39;source-over&#39;;
&nbsp;&nbsp;&nbsp;mouseBtn = false;
}
</pre>
<p style="text-align:center;"><img alt="Drawing masks" src="../../../images/canvas_drawing_masks.png" /></p>
</li>
</ol>

 
	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context/scratchcard" target="_blank">renamed_index.html</a></li>
 </ul>  
			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="text" name="text" class="items-tit-h2">Creating Text and Lines on the Canvas</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>hide</em></a></span>
			</div>
			<div class="devicespec-con">
			<p>To use a canvas in your application, you must learn to create text and lines:</p>
 
<ol>

<li><p>To draw a line, use the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method to assign the beginning point of the line, and the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method to assign the end point of the line. The <span style="font-family: Courier New,Courier,monospace">stroke()</span> method draws the full line. </p>

<pre class="prettyprint">
context.lineJoin = &quot;bevel&quot;;
context.lineWidth = 20;

context.beginPath();
context.lineJoin = &quot;round&quot;;
context.moveTo(20, 20);
context.lineTo(100, 40);
context.stroke();
</pre></li>
<li>
<p>When adding text on the canvas, use various attributes and methods to define how the text looks and where it is located. </p>
<p>The <span style="font-family: Courier New,Courier,monospace">font</span> attribute defines the font style, and the <span style="font-family: Courier New,Courier,monospace">textBaseline</span> attribute the vertical alignment of the text.</p>

<pre class="prettyprint">
context.font = &#39;italic 400 22px/2 sans-serif&#39;;
context.strokeStyle = &quot;#f00&quot;;
context.textBaseline = &quot;alphabetic&quot;;
context.moveTo(150, 20);
context.lineTo(150, 170);
context.stroke();
</pre></li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace">textAlign</span> attribute and the <span style="font-family: Courier New,Courier,monospace">fillText()</span> method to position the text in the assigned location:</p>

<pre class="prettyprint">
context.textAlign = &quot;start&quot;;
context.fillText(&quot;textAlign=start&quot;, 150, 50);
context.textAlign = &quot;end&quot;;
context.measureText(&quot;textAlign=end&quot;, 150, 100);
</pre></li>
</ol>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">When drawing multiple images in a canvas, indicate the starting point with the <span style="font-family: Courier New,Courier,monospace">beginPath()</span> method to prevent unforeseen errors.  </td> 
      </tr> 
     </tbody> 
    </table>
	
	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">Line_Styles_3.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">Text_Styles_2.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/html5_the_canvas_element_and_html_canvas_2d_context" target="_blank">Text_Styles_4.html</a></li>
 </ul> 
			</div>
		</li>
	
	
	</ul>	
</div>				
</div>
			
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
