<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Touch Paint</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#draw">Drawing on Canvas</a></li>
            <li><a href="#feature">Using Drawing Features</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/w3c/device/touch_w.htm">Touch Events version 1 Guide</a></li>  
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#touch">Touch Events version 1 API for Wearable Web</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Task: Touch Paint</h1>

<p>This task, based on the TouchPaint sample delivered with the Tizen SDK, demonstrates how you can use the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#touch">Touch Events version 1</a> API to create a simple paint application using the touch events and the <a href="../../../../../org.tizen.guides/html/web/w3c/graphics/canvas_w.htm">Canvas</a> element. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-wearable-applications" target="blank">TouchPaint</a>.</p> 

<p>This task consists of the following parts:</p> 
  <ul> 
   <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens.</li>
   <li><a href="#draw">Drawing on Canvas</a> defines how to detect touch events and draw lines on the canvas.</li> 
   <li><a href="#feature">Using Drawing Features</a> defines how to select and use drawing features, such as colors and line widths.</li> 
  </ul> 
<p>This sample is a fully functional application for implementing a basic drawing application.</p> 


<h2 id="layout" name="layout">Defining the Application Layout</h2>

<p>The TouchPaint sample application layout contains 2 screens: the main screen displaying a canvas on which you can draw with a finger, and the Options screen which allows you to set up the color and the thickness of the line being drawn.</p> 
 
  <p>The following figure shows the main screens of the application.</p> 
 
<p class="figure">Figure: TouchPaint screens</p> 
<p align="center"><img alt="TouchPaint screens" src="../../../images/touchpaint_sd_ww.png" /></p> 

<h3 id="main" name="main">Defining the Main Screen</h3>
  <ol class="tutorstep"> 

   <li>index.html Source File 
<p>The main screen displays a <a href="../../../../../org.tizen.guides/html/web/w3c/graphics/canvas_w.htm">Canvas</a> element and 2 buttons (for accessing the Options screen and for clearing the canvas area).</p>
	 <pre class="prettyprint lang-html">
&lt;div class=&quot;ui-page ui-page-active&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot; id=&quot;main-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;TouchPaint&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot; id=&quot;main-content&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-footer ui-grid-col-2&quot; id=&quot;main-footer&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn&quot; id=&quot;main-options-btn&quot;&gt;Options&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn&quot; id=&quot;main-clear-btn&quot;&gt;Clear&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>The above code snippet does not contain the canvas element, which is added to the <span style="font-family: Courier New,Courier,monospace;">&lt;div id=&quot;main-content&quot;&gt;</span> element by the JavaScript code after the application start.</p>
</li>
  </ol> 

  <h3 id="option" name="option">Defining the Options Screen</h3> 
  <ol class="tutorstep"> 

   <li>index.html Source File 
<p>The Options screen displays a slider element, line preview, four-color (white, red, green, and blue) picker and 2 buttons (<strong>Cancel</strong> and <strong>OK</strong>).</p>
<p>The slider allows the user to change the line width. Each slider position change results in a change in the line preview thickness. A tap action on the color picker results in a change in the line preview color. A tap action on the buttons moves the user to main screen without or with saving the changes.</p>

	 <pre class="prettyprint lang-html">
&lt;div class=&quot;ui-page&quot; id=&quot;options&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Options&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;range&quot; min=&quot;1&quot; max=&quot;20&quot; value=&quot;1&quot; id=&quot;options-range&quot;&gt;&lt;/input&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-preview&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-colors&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-colors-white&quot; class=&quot;options-colors&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-colors-red&quot; class=&quot;options-colors&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-colors-green&quot; class=&quot;options-colors&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;options-colors-blue&quot; class=&quot;options-colors&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-footer ui-grid-col-2&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn&quot; id=&quot;options-cancel-btn&quot;&gt;Cancel&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn&quot; id=&quot;options-ok-btn&quot;&gt;OK&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

</li>
  </ol>   

  

<h2 id="draw" name="draw">Drawing on Canvas</h2>

  <p>This section builds upon the elements described in <a href="touch_tutorial_w.htm#handle">Handling Touch Events</a> and <a href="touch_tutorial_w.htm#control">Controlling Multi-point Touches</a>.</p> 
 

<h3 id="initialize" name="initialize">Initializing the Canvas</h3>
  <ol class="tutorstep"> 
   <li>main.js Source File 
<p>The canvas is initialized in JavaScript, and includes the size calculation, ID setting, and adding of the element to the main page content.</p>

<pre class="prettyprint">
function initCanvas() 
{
&nbsp;&nbsp;&nbsp;canvas = document.createElement(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;canvas.width = window.innerWidth;
&nbsp;&nbsp;&nbsp;canvas.height = window.innerHeight - header.offsetHeight - footer.offsetHeight;
&nbsp;&nbsp;&nbsp;canvas.setAttribute(&#39;id&#39;, &#39;main-canvas&#39;);
&nbsp;&nbsp;&nbsp;content.appendChild(canvas);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&#39;2d&#39;);
}
</pre>
</li></ol>

 <h3 id="draw2" name="draw2">Drawing Lines Based on Touch Events</h3>
<p>The line drawing functionality is implemented in the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.</p> 
  <ol class="tutorstep"> 
<li>main.js Source File 
<ol type="a"><li>
<p>Define event listeners and handlers to manage the <span style="font-family: Courier New,Courier,monospace">touchstart</span>, <span style="font-family: Courier New,Courier,monospace">touchmove</span>, and <span style="font-family: Courier New,Courier,monospace">touchend</span> events on the canvas.</p> 
<pre class="prettyprint">
function addCanvasListeners() 
{
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchstart&#39;, onCanvasTouchStart);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchend&#39;, onCanvasTouchEnd);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchmove&#39;, onCanvasTouchMove);
&nbsp;&nbsp;&nbsp;footer.addEventListener(&#39;touchend&#39;, onFooterTouchEnd);
}
</pre>
</li>

<li>
<p>Handle the events:</p>
<ul><li>At touch start, an arc is drawn in case of a single tap performed by the user.</li>
<li>On touch move, a line is drawn trough the touch path with a given width and color.
<p>The <span style="font-family: Courier New,Courier,monospace">drawPath</span> array stores the order of the triggered touch events, which are used to draw a line that follows the finger.</p></li>
<li>At touch end, the touch event is removed from the <span style="font-family: Courier New,Courier,monospace">drawPath</span> array, stopping the line drawing.</li></ul>

<pre class="prettyprint">
function onCanvasTouchStart(ev) 
{
&nbsp;&nbsp;&nbsp;var touch = ev.changedTouches[0];

&nbsp;&nbsp;&nbsp;drawPath[touch.identifier] = touch;

&nbsp;&nbsp;&nbsp;context.fillStyle = strokeColor;
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.arc(drawPath[touch.identifier].pageX - canvas.offsetLeft,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath[touch.identifier].pageY - canvas.offsetTop - header.offsetHeight,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWidth / 2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.PI * 2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;true);
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.fill();
}

function onCanvasTouchEnd(ev) 
{
&nbsp;&nbsp;&nbsp;var touch = ev.changedTouches[0];

&nbsp;&nbsp;&nbsp;delete drawPath[touch.identifier];
}

function onCanvasTouchMove(ev) 
{
&nbsp;&nbsp;&nbsp;var touches = ev.changedTouches,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchesLength = touches.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentDrawPath = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0;

&nbsp;&nbsp;&nbsp;context.lineWidth = strokeWidth + ADDITIONAL_LINE_WIDTH;
&nbsp;&nbsp;&nbsp;context.strokeStyle = strokeColor;
&nbsp;&nbsp;&nbsp;context.lineJoin = &#39;round&#39;;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; touchesLength; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentDrawPath = drawPath[touches[i].identifier];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentDrawPath !== undefined) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.moveTo(currentDrawPath.pageX - canvas.offsetLeft + HALF_PIXEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentDrawPath.pageY - canvas.offsetTop + HALF_PIXEL - header.offsetHeight);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.lineTo(touches[i].pageX - canvas.offsetLeft + HALF_PIXEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touches[i].pageY - canvas.offsetTop + HALF_PIXEL - header.offsetHeight);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.stroke();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath[touches[i].identifier] = touches[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ev.preventDefault();
}
</pre>
</li>
</ol></li></ol>



<h2 id="feature" name="feature">Using Drawing Features</h2>


  <h3 id="thick" name="thick">Changing the Line Thickness</h3> 
  <ol class="tutorstep"> 
   <li>options.js Source File 
<p>The user changes the line thickness using a slider. The new slider value is set as the width of the <span style="font-family: Courier New,Courier,monospace">preview</span> element, as well as a value in the <span style="font-family: Courier New,Courier,monospace">options</span> object.</p>
<pre class="prettyprint">function onRangeChange(ev) 
{
&nbsp;&nbsp;&nbsp;setPreviewHeight(ev.target.value);
}
function setPreviewHeight(value) 
{
&nbsp;&nbsp;&nbsp;preview.style.height = value + 'px';
}
function setOptionValues() 
{
&nbsp;&nbsp;&nbsp;options.setStrokeWidth(range.value);
}
</pre>
</li>
<li>main.js Source File   
<p>During drawing, the selected thickness is applied to the line being drawn.</p>
<pre class="prettyprint">
function getOptionValues() 
{
&nbsp;&nbsp;&nbsp;strokeWidth = options.getStrokeWidth();
}

context.lineWidth = strokeWidth + ADDITIONAL_LINE_WIDTH;
</pre>
</li></ol>

<h3 id="color" name="color">Changing the Line Color</h3> 
  <ol class="tutorstep"> 
   <li>options.js Source File
<p>The user changes the line color by selecting it from the color picker. The new color is set as the <span style="font-family: Courier New,Courier,monospace">preview</span> element background, as well as a value in the <span style="font-family: Courier New,Courier,monospace">options</span> object.</p>
<pre class="prettyprint">
function onWhiteTap() 
{
&nbsp;&nbsp;&nbsp;preview.style.backgroundColor = &#39;#fff&#39;;
}

function setOptionValues() 
{
&nbsp;&nbsp;&nbsp;o.setStrokeColor(preview.style.backgroundColor);
}
</pre>
</li>
<li>main.js Source File
<p>During drawing, the selected color is applied to the line being drawn.</p>
<pre class="prettyprint">
function getOptionValues() 
{
&nbsp;&nbsp;&nbsp;strokeColor = o.getStrokeColor();
}

context.strokeStyle = strokeColor;
</pre>
</li>
</ol>


<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>