<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Web SQL Database: Creating and Querying Databases</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
		<li>Asynchronous operations
			<ul class="toc">
			<li><a href="#create_a">Opening a Database Asynchronously</a></li>
			<li><a href="#execute_a">Executing SQL Statements Asynchronously</a></li>
			<li><a href="#access_a">Accessing SQL Results Asynchronously</a></li>
			<li><a href="#handle_a">Handling a Syntax Error Asynchronously</a></li>
			</ul>
		</li>
		<li>Synchronous operations
			<ul class="toc">
			<li><a href="#create">Opening a Database Synchronously</a></li>
			<li><a href="#execute">Executing SQL Statements Synchronously</a></li>
			<li><a href="#access">Accessing SQL Results Synchronously</a></li>
			<li><a href="#handle">Handling a Syntax Error Synchronously</a></li>
			</ul>
		</li>	
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
             <li><a href="../../../../../org.tizen.guides/html/web/w3c/storage/websql_w.htm">Web SQL Database Guide</a></li>
			 <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#sql">Web SQL Database API for Mobile Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Web SQL Database: Creating and Querying Databases</h1>
  
<p>This tutorial demonstrates how you can use SQL databases in Tizen applications.</p>

<p>This feature is supported in mobile applications only.</p>			
			

<h2>Warm-up</h2>
<p>Become familiar with the Web SQL Database API features by learning about:</p>
<ul>
<li>Asynchronous operations
<ul>
<li><a href="#create_a">Opening a Database Asynchronously</a>
<p>Learn how to create and open a database asynchronously.</p></li>
<li><a href="#execute_a">Executing SQL Statements Asynchronously</a>
<p>Learn how to execute SQL statements asynchronously.</p></li>
<li><a href="#access_a">Accessing SQL Results Asynchronously</a>
<p>Learn how to access SQL statement results asynchronously.</p></li>
<li><a href="#handle_a">Handling a Syntax Error Asynchronously</a>
<p>Learn how handle SQL database-related syntax errors asynchronously.</p></li>
</ul>
</li>
<li>Synchronous operations
<ul>
<li><a href="#create">Opening a Database Synchronously</a>
<p>Learn how to create and open a database synchronously.</p></li>
<li><a href="#execute">Executing SQL Statements Synchronously</a>
<p>Learn how to execute SQL statements synchronously.</p></li>
<li><a href="#access">Accessing SQL Results Synchronously</a>
<p>Learn how to access SQL statement results synchronously.</p></li>
<li><a href="#handle">Handling Errors Synchronously</a>
<p>Learn how handle SQL database-related errors synchronously.</p></li>
</ul>
</li></ul>

 <h2 id="create_a" name="create_a">Opening a Database Asynchronously</h2>

<p>To provide users with SQL database features, you must learn to create and open an SQL database asynchronously:</p>
<ol>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">openDatabase()</span> method to access a database. If the database does not exist, the method first creates it and then opens it:</p>
<pre class="prettyprint">
var db;
var version = 1.0;
var dbName = &quot;tizendb&quot;;
var dbDisplayName = &quot;tizen_test_db&quot;;
var dbSize = 2 * 1024 * 1024;
try 
{
&nbsp;&nbsp;&nbsp;db = openDatabase(dbName, version, dbDisplayName, dbSize, function(database) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;database creation callback&quot;);
&nbsp;&nbsp;&nbsp;});
}
</pre>
<p>The method takes the following arguments: unique name of the database, expected version of the database to be opened (if an empty string is given any version can be loaded), display name, the estimated size of database (number of bytes), and, optionally, the database creation event handler.</p>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The creation event handler is invoked only once if the database does not exist. There is no event handler for the database <span style="font-family: Courier New,Courier,monospace">opened</span> event.</td> 
      </tr> 
     </tbody>
</table></li>
</ol>

	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/storage/web_sql_database" target="_blank">websqldatabase_example.html</a></li>
 </ul>

 <h2 id="execute_a" name="execute_a">Executing SQL Statements Asynchronously</h2>

<p>To provide users with SQL database features, you must learn to execute SQL statements asynchronously:</p>
<ol>
<li>
<p>In the Web SQL Database API, each SQL statement must be executed under a transaction. To create a transaction, use either <span style="font-family: Courier New,Courier,monospace">transaction()</span> or  <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> method returned by the <span style="font-family: Courier New,Courier,monospace">openDatabase()</span> method:</p>

<pre class="prettyprint">
db.transaction(function(t)
{
&nbsp;&nbsp;&nbsp;/* Place SQL statements here */
}, function() 
{
&nbsp;&nbsp;&nbsp;alert(&quot;SQL statements were executed successfully.&quot;);
});
</pre>

<p>The difference between the <span style="font-family: Courier New,Courier,monospace">transaction()</span> and <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> methods is that the latter cannot be used with SQL statements that change the database (such as <span style="font-family: Courier New,Courier,monospace">INSERT</span>, <span style="font-family: Courier New,Courier,monospace">UPDATE</span>, <span style="font-family: Courier New,Courier,monospace">DELETE</span>,  or <span style="font-family: Courier New,Courier,monospace">CREATE</span>).</p>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">When possible, use the <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> to obtain better execution performance of SQL statements.</td> 
      </tr> 
     </tbody> 
    </table>
</li>
<li>
<p>To execute a SQL statement, use the <span style="font-family: Courier New,Courier,monospace">executeSql()</span> method. The SQL statement is the first parameter of the method and cannot contain SQL transaction statements (such as <span style="font-family: Courier New,Courier,monospace">BEGIN</span>, <span style="font-family: Courier New,Courier,monospace">END</span>, or <span style="font-family: Courier New,Courier,monospace">ROLLBACK</span>):</p>
<pre class="prettyprint">
t.executeSql(&quot;CREATE TABLE tizenTable (id INTEGER PRIMARY KEY, title TEXT, content TEXT, insertDay DATETIME)&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[], function(sqlTransaction, sqlResultSet) 
{
&nbsp;&nbsp;&nbsp;alert(&quot;Table has been created.&quot;);
}, function(sqlTransaction, sqlError) 
{
&nbsp;&nbsp;&nbsp;/* Error handling */
});
</pre>
</li>
<li>
<p>Pass arguments to the SQL statement:</p>
<pre class="prettyprint">
sqlTransaction.executeSql(&quot;SELECT * FROM tizenTable WHERE id=?&quot;, [value]);
</pre>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">Use an array to pass the arguments to secure SQL statements from SQL injection attacks.</td> 
      </tr> 
     </tbody>
</table>
</li>
</ol>

	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/storage/web_sql_database" target="_blank">websqldatabase_example.html</a></li>
 </ul>
 
 <h2 id="access_a" name="access_a">Accessing SQL Results Asynchronously</h2>

<p>To provide users with SQL database features, you must learn to access SQL statement results asynchronously:</p>
<ol>
<li>
<p>When a SQL statement is executed, its event handler is invoked and returns the result as a <span style="font-family: Courier New,Courier,monospace">sqlResultSet</span> object:</p>
<ul>
<li>The result object of the INSERT statement contains the insert ID, which stores the identifier of the added record. If multiple records were inserted, the insert ID contains the ID of the last inserted record:
<pre class="prettyprint">
sqlTransaction.executeSql(&quot;INSERT INTO tizenTable(title, content, insertDay) VALUES (?, ?, ?)&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[title, context, day], function(sqlTransaction, sqlResultSet) 
{
&nbsp;&nbsp;&nbsp;alert(&quot;The &#39;id&#39; of the new record  is &quot; + sqlResultSet.insertId);
});
</pre>

</li>
<li>The result object of the SELECT statement stores also the number of records that were inserted, changed, or deleted.
It contains the number of selected rows (length field) and the <span style="font-family: Courier New,Courier,monospace">item()</span> method. Use the method with the index argument (integer value from 0 to <span style="font-family: Courier New,Courier,monospace">rows.length</span> - 1) to get individual records:

<pre class="prettyprint">
sqlTransaction.executeSql(&quot;SELECT id, title, author FROM books&quot;, [], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(sqlTransaction, sqlResultSet) 
{
&nbsp;&nbsp;&nbsp;var book, i, booksNumber = sqllResultSet.rows.length;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; booksNumber; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;book = sqlResultSet.rows.item(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;id: &quot; + book.id + &quot;, title: &quot; + book.title 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ &quot;, author: &quot; + book.author);
&nbsp;&nbsp;&nbsp;}
});
</pre>
</li>
</ul>
</li>
</ol>

	<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/storage/web_sql_database" target="_blank">websqldatabase_example.html</a></li>
 </ul>
 
 <h2 id="handle_a" name="handle_a">Handling a Syntax Error Asynchronously</h2>

<p>To provide users with SQL database features, you must learn to handle SQL database-related errors asynchronously:</p>
<ol>
<li>

<p>Handle a syntax error in the <span style="font-family: Courier New,Courier,monospace">sqlError</span> object:</p>
<pre class="prettyprint">
sqlTransaction.executeSql(&quot;SELECT * FROM notExistingTable&quot;, [], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(sqlTransaction, sqlResultSet) {}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(sqlTransaction, sqlError) 
{
&nbsp;&nbsp;&nbsp;switch (sqlError.code) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case sqlError.SYNTAX_ERR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;Syntax error has occurred. &quot; + sqlError.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; alert(&quot;Other error&quot;);
&nbsp;&nbsp;&nbsp;}
});
</pre>
<p>Other types of errors that can occur are exceptions. The <span style="font-family: Courier New,Courier,monospace">sqlException</span> object has the same fields as the <span style="font-family: Courier New,Courier,monospace">sqlError</span> object but it must be handled in the <span style="font-family: Courier New,Courier,monospace">try - catch</span> block.</p>
</li>

</ol>
 <h2 id="create" name="create">Opening a Database Synchronously</h2>

<p>To provide users with SQL database features, you must learn to create and open an SQL database synchronously:</p>

<ol>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">openDatabaseSync()</span> method to access a database. The method can only be used in the <a href="../../../../../org.tizen.guides/html/web/w3c/perf_opt/web_workers_w.htm#js_performance">Web Worker</a> context. If the database does not exist, the method first creates it and then opens it:</p>
<pre class="prettyprint">
var databaseSync = null;
try 
{
&nbsp;&nbsp;&nbsp;databaseSync = openDatabaseSync(&quot;dbName&quot;, &quot;1.0&quot;, &quot;display database name&quot;, 1024 * 1024, function(databaseSync) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;database creation callback&quot;);
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>The method takes the following arguments: unique name of the database, expected version of the database to be opened (if an empty string is given any version can be loaded), display name, the estimated size of database (number of bytes), and, optionally, the database creation event handler.</p>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The creation event handler is invoked only once if the database does not exist. There is no event handle for the database opened event but, in the synchronous database API, no other code is run until the database creation operation is completed.</td> 
      </tr> 
     </tbody>
</table></li>
</ol>

 <h2 id="execute" name="execute">Executing SQL Statements Synchronously</h2>
 

<p>To provide users with SQL database features, you must learn to execute SQL statements synchronously:</p>
<ol>
<li>
<p>In the Web SQL Database API, each SQL statement must be executed under a transaction. To create a transaction, use either <span style="font-family: Courier New,Courier,monospace">transaction()</span> or  <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> method returned by the <span style="font-family: Courier New,Courier,monospace">openDatabaseSync()</span> method:</p>

<pre class="prettyprint">
database.transaction(function(sqlTransactionSync) 
{
&nbsp;&nbsp;&nbsp;/* Place SQL statements here */
}, function() 
{
&nbsp;&nbsp;&nbsp;alert(&quot;SQL statements were executed successfully.&quot;);
});
</pre>

<p>The difference between the <span style="font-family: Courier New,Courier,monospace">transaction()</span> and <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> methods is that the latter cannot be used with SQL statements that change the database (such as <span style="font-family: Courier New,Courier,monospace">INSERT</span>, <span style="font-family: Courier New,Courier,monospace">UPDATE</span>, <span style="font-family: Courier New,Courier,monospace">DELETE</span>,  or <span style="font-family: Courier New,Courier,monospace">CREATE</span>).</p>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">When possible, use the <span style="font-family: Courier New,Courier,monospace">readTransaction()</span> to obtain better execution performance of SQL statements.</td> 
      </tr> 
     </tbody> 
    </table>
</li>
<li>
<p>To execute a SQL statement, use the <span style="font-family: Courier New,Courier,monospace">executeSql()</span> method. The SQL statement is the first parameter of the method and cannot contain SQL transaction statements (such as <span style="font-family: Courier New,Courier,monospace">BEGIN</span>, <span style="font-family: Courier New,Courier,monospace">END</span>, or <span style="font-family: Courier New,Courier,monospace">ROLLBACK</span>):</p>
<pre class="prettyprint">
var sqlResultSet = sqlTransactionSync.executeSql(
&nbsp;&nbsp;&nbsp;&quot;CREATE TABLE IF NOT EXISTS books(id INTEGER PRIMARY KEY, title TEXT, author TEXT)&quot;, []);
</pre>
</li>
<li>
<p>Pass arguments to the SQL statement:</p>
<pre class="prettyprint">
var sqlResultSet = sqlTransactionSync.executeSql(
&nbsp;&nbsp;&nbsp;&quot;SELECT id FROM books WHERE title=? AND author=?&quot;, [&quot;Ulysses&quot;, &quot;James Joyce&quot;]);
</pre>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">Use an array to pass the arguments to secure SQL statements from SQL injection attacks.</td> 
      </tr> 
     </tbody>
</table>
</li>
</ol>

 <h2 id="access" name="access">Accessing SQL Results Synchronously</h2>

<p>To provide users with SQL database features, you must learn to access SQL statement results synchronously:</p>
<ol>
<li>
<p>When a SQL statement is executed, its event handler is invoked and returns the result as a <span style="font-family: Courier New,Courier,monospace">sqlResultSet</span> object:</p>
<ul>
<li>The result object of the INSERT statement contains the insert ID, which stores the identifier of the added record. If multiple records were inserted, the insert ID contains the ID of the last inserted record:
<pre class="prettyprint">
var sqlResultSet = sqlTransactionSync.executeSql(&quot;INSERT INTO books (id, title, author) VALUES(NULL, ?, ?)&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[&quot;Ulysses&quot;, &quot;James Joyce&quot;]);
alert(&quot;The &#39;id&#39; of the new record  is &quot; + sqlResultSet.insertId);
</pre>

</li>
<li>The result object of the SELECT statement stores also the number of records that were inserted, changed, or deleted.
It contains the number of selected rows (length field) and the <span style="font-family: Courier New,Courier,monospace">item()</span> method. Use the method with the index argument (integer value from 0 to <span style="font-family: Courier New,Courier,monospace">rows.length</span> - 1) to get individual records:

<pre class="prettyprint">
var sqlResultSet = sqlTransactionSync.executeSql(&quot;SELECT id, title, author FROM books&quot;);
var book, i, booksNumber = sqlResultSet.rows.length;
for (i = 0; i &lt; booksNumber; i++) 
{
&nbsp;&nbsp;&nbsp;book = sqlResultSet.rows.item(i);
&nbsp;&nbsp;&nbsp;alert(&quot;id: &quot; + book.id + &quot;, title: &quot; + book.title + &quot;, author: &quot; + book.author);
}
</pre>
</li>
</ul>
</li>
</ol>

 <h2 id="handle" name="handle">Handling Errors Synchronously</h2>

<p>To provide users with SQL database features, you must learn to handle SQL database-related errors synchronously:</p>
<ol>
<li>Handle errors in the <span style="font-family: Courier New,Courier,monospace">sqlException</span> object:

<pre class="prettyprint">
try 
{
&nbsp;&nbsp;&nbsp;databaseSync.transaction(function(sqlTransactionSync) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sqlResultSet = sqlTransactionSync.executeSql(&quot;DELETE FROM books WHERE id=?&quot;, [id]);
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;/* Instructions if the above SQL statement is executed successfully */
}
catch (sqlException) 
{
&nbsp;&nbsp;&nbsp;postMessage(&quot;An error has occurred during deleting the book from the table! 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Error code: &quot; + sqlException.code + &quot; (&quot; + sqlException.message + &quot;).&quot;);
}
</pre>
</li>
</ol>

<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">In the synchronous database API, the script execution is stopped until the transaction is completed.</td> 
      </tr> 
     </tbody>
</table>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
