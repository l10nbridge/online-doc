<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>WebGL - Khronos: Creating 3D Graphics</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#import">Importing the WebGL Context</a></li>
			<li><a href="#shader">Initializing Programs and Shaders</a></li>
			<li><a href="#buffer">Initializing Buffers</a></li>
			<li><a href="#draw">Drawing Shapes on the Screen</a></li>
			<li><a href="#color">Setting Colors</a></li>
			<li><a href="#texture">Setting Textures</a></li>
			<li><a href="#animation">Creating an Animation</a></li>
			<li><a href="#threed">Creating a 3D Perspective</a></li>
			<li><a href="#touch">Using Touch Events</a></li>
			<li><a href="#framework">Using WebGL Frameworks</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
             <li><a href="../../../../../org.tizen.guides/html/web/w3c/supplement/webgl_w.htm">WebGL - Khronos Guide</a></li>
			 <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#webgl">WebGL  - Khronos API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#webgl">WebGL  - Khronos API for Wearable Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>WebGL - Khronos: Creating 3D Graphics</h1>

 <p>This tutorial demonstrates how you can use the WebGL graphics library and <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> to create 3D effects, such as texture and animation.</p>  


  <h2>Warm-up</h2> 
  <p>Become familiar with the WebGL - Khronos API basics by learning about:</p> 
  <ul>
   <li><a href="#import">Importing the WebGL Context</a>
   <p>Import the WebGL context to your application.</p>
   </li>
   <li><a href="#shader">Initializing Programs and Shaders</a>
   <p>Bind the shaders and GLSL ES in WebGL by creating and compiling shaders and programs.</p>
   </li>
   <li><a href="#buffer">Initializing Buffers</a>
   <p>Create a buffer, bind it, and store data in it.</p>
   </li>
   <li><a href="#draw">Drawing Shapes on the Screen</a>
   <p>Use attribute array data and a drawing buffer to display shapes on the screen.</p>
   </li> 
   <li><a href="#color">Setting Colors</a>
   <p>Use attribute array data and a drawing buffer to display colors on the screen.</p>
   </li> 
   <li><a href="#texture">Setting Textures</a>
   <p>Use an image texture in your application.</p>
   </li> 
   <li><a href="#animation">Creating an Animation</a>
   <p>Use a moving animation in your application.</p>
   </li> 
   <li><a href="#threed">Creating a 3D Perspective</a>
   <p>Apply a 3D perspective to your application with the Z-index.</p>
   </li> 
  </ul> 
  
  <h2>Follow-up</h2>
  <p>Once we have learned the basics of the WebGL - Khronos API, we can now move on to more advanced tasks, including:</p>
  <ul>
  <li><a href="#touch">Using Touch Events</a>
   <p>Create a dice using texture, 3D perspective, animation, and touch events.</p>
   </li>
   <li><a href="#framework">Using WebGL Frameworks</a>
   <p>Use the three.js WebGL framework to apply illumination and camera effects.</p>
   </li>
  </ul>  
			
<h2 id="import" name="import">Importing the WebGL Context</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to import the WebGL context from the HTML5 <span style="font-family: Courier New,Courier,monospace">&lt;canvas&gt;</span> element:</p> 
  <ol> 
   <li><p>Define the <span style="font-family: Courier New,Courier,monospace">&lt;canvas&gt;</span> element ID and set its width and height:</p>
   <pre class="prettyprint">
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;/body&gt;
</pre> 
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">If the width and height are not set, the default size, 300x150 px, is used.</td> 
      </tr> 
     </tbody>
</table>
</li> 

<li><p>Use the <span style="font-family: Courier New,Courier,monospace">getContext()</span> method of the <span style="font-family: Courier New,Courier,monospace">Canvas</span> object to import the WebGL context:</p>
   <pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;function startWegGL()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl = getWebGLContext();
&nbsp;&nbsp;&nbsp;}
  	
&nbsp;&nbsp;&nbsp;function getWebGLContext()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var webGLContext;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var canvas = document.getElementById(&quot;canvas&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Context name can differ according to the browser used */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Store the context name in an array and check its validity */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var names = [&quot;webgl&quot;, &quot;experimental-webgl&quot;, &quot;webkit-3d&quot;, &quot;moz-webgl&quot;];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; names.length; ++i) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webGLContext = canvas.getContext(names[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (webGLContext) break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
  		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return webGLContext;
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>
  </ol> 
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_camera_effect.html</a></li>	
 </ul>  

 <h2 id="shader" name="shader" >Initializing Programs and Shaders</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to bind the shaders and GLSL ES in WebGL by using shaders and programs:
</p> 
  <ol> 
   <li><p>Define the vertex shader and fragment shader using the <span style="font-family: Courier New,Courier,monospace">gl_Position</span> and <span style="font-family: Courier New,Courier,monospace">gl_FragColor</span> variables of the <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> (GLSL ES):</p>
   <pre class="prettyprint">
&lt;script id=&quot;vshader&quot; type=&quot;x-shader/x-vertex&quot;&gt;
&nbsp;&nbsp;&nbsp;attribute vec2 attVertexPos;
	
&nbsp;&nbsp;&nbsp;void main() 
&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* vec4(2D coordinates, depth, perspective) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_Position = vec4(attVertexPos, 0, 2);
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;

&lt;script id=&quot;fshader&quot; type=&quot;x-shader/x-fragment&quot;&gt;
&nbsp;&nbsp;&nbsp;void main() 
&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Color stored in the gl_FragColor variable becomes the pixel color */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* vec4(R, G, B, A) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_FragColor = vec4(1, 0.5, 0.5, 1);
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre> 
</li> 

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">createShader()</span> method to create the shaders:</p>
   <pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var vshader = gl.createShader(gl.VERTEX_SHADER);
&nbsp;&nbsp;&nbsp;var fshader = gl.createShader(gl.FRAGMENT_SHADER);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">shaderSource()</span> method to attach the source elements to the shaders:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.shaderSource(vshader, document.getElementById(&#39;vshader&#39;).text);
&nbsp;&nbsp;&nbsp;gl.shaderSource(fshader, document.getElementById(&#39;fshader&#39;).text);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">compileShader()</span> method and compile the shaders:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.compileShader(vshader);
&nbsp;&nbsp;&nbsp;gl.compileShader(fshader);
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">After a shader has been used, you can use the <span style="font-family: Courier New,Courier,monospace">deleteShader()</span> method to delete it.</td> 
      </tr> 
     </tbody>
</table>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">createProgram()</span> method to create a new instance of the <a href="https://www.khronos.org/registry/webgl/specs/1.0/#5.6" target="_blank">WebGLProgram</a> object, in which the shaders are then attached:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;var program = null;
&nbsp;&nbsp;&nbsp;program = gl.createProgram();
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">attachShader()</span> method to attach the shaders to the program:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.attachShader(program, vshader);
&nbsp;&nbsp;&nbsp;gl.attachShader(program, fshader);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">linkProgram()</span> method to connect to the program:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.linkProgram(program);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">useProgram()</span> method to enable WebGL to use the program:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Shaders are loaded and used */ 
&nbsp;&nbsp;&nbsp;gl.useProgram(program);
&lt;/script&gt; 
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr>
       <td class="note">After a  WebGL program has been used, you can use the <span style="font-family: Courier New,Courier,monospace">deleteProgram()</span> method to delete it.</td> 
      </tr> 
     </tbody>
</table>
</li>
  </ol> 
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_circle.html</a></li>	
 </ul>  

 <h2 id="buffer" name="buffer">Initializing Buffers</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to create buffers, bind them, and store data in them:
</p> 

  <ol> 
   <li><p>To create a triangle (shown on the left in the figure), define the coordinates of a triangle according to the WebGL coordinate system (shown on the right):</p>
   
<p align="center"><img alt="WebGL native coordinate system" src="../../../images/initializing_buffers_coordsystem.png" /></p> 

<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var vertices = [1.0,&nbsp;&nbsp;1.0,&nbsp;&nbsp;&nbsp;/* p2 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;1.0,&nbsp;&nbsp;&nbsp;/* p1 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0];&nbsp;/* p4 */ 
&lt;/script&gt;

</pre> 
</li> 

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">createBuffer()</span> method to create the vertex buffer object (VBO):</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;triangleVerticesBuffer = gl.createBuffer();
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">bindBuffer()</span> method to bind the VBO:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">bufferData()</span> method to store data to the VBO:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Convert to Float32Array format that allows the array to be used in WebGL */
&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
&lt;/script&gt;
</pre>
</li>
  </ol> 

<p>The following figure shows the final triangle as it is displayed on the screen.</p>
<p class="figure">Figure: Triangle on the screen</p> 
<p align="center"><img alt="Triangle on the screen" src="../../../images/initializing_buffers.png" /></p>   
  
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_triangle.html</a></li>	
 </ul>  

 <h2 id="draw" name="draw">Drawing Shapes on the Screen</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to display shapes on the screen using attribute array data and a drawing buffer:
</p> 

  <ol> 
   <li><p>Import the <span style="font-family: Courier New,Courier,monospace">getAttribLocation()</span> method to bring the attribute location from the WebGL program:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var vertexPositionAttribute = gl.getAttribLocation(program, &quot;attVertexPos&quot;);
</pre>
<p>The shader is an external program that is compiled. To enable the attribute to be searched and referenced in the program, allocate it to the <span style="font-family: Courier New,Courier,monospace">vertexPositionAttribute</span> variable.</p>
</li>

<li><p>Activate the attribute data array:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexPositionAttribute);
</pre>
</li>

<li><p>Import the <span style="font-family: Courier New,Courier,monospace">vertexAttribPointer()</span> method that indicates the data format to the shader.</p>
<p>The second argument value is the number of components per vertex. It can be 2, 3, or,  in case of RGBA, 4.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
</pre>
</li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace">drawArrays()</span> method to send the shape to the drawing buffer:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;gl.drawArrays(gl.TRIANGLES, 0, 3);
&lt;/script&gt;
</pre>


<p>The following table describes the arguments that can be used with the <span style="font-family: Courier New,Courier,monospace">drawArrays()</span> method and their results.</p>
<table>
<caption>Table: Arguments for drawing shapes</caption>
   <colgroup> 
    <col width="25%" /> 
    <col width="75%" /> 
   </colgroup> 
<tbody>
    <tr> 
     <th>Type</th> 
     <th>Description</th> 
    </tr> 
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">POINTS</span></p> </td> 
     <td rowspan="1" colspan="1"><p>The point type renders 1 point at a time.</p>
<p align="center"><img alt="Points" src="../../../images/drawing_points.png" /></p>

<pre class="prettyprint">
var vertices = [1.0,&nbsp;&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0];
 
gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0); 
gl.drawArrays(gl.POINTS, 0, 4);
</pre>
</td> 
	</tr>
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">LINES</span></p> </td> 
     <td rowspan="1" colspan="1"><p>In the lines type, 2 lines share the same vertex, but each is defined separately. In the example, 6 vertices are needed.</p>
<p align="center"><img alt="Lines" src="../../../images/drawing_lines.png" /></p>

<pre class="prettyprint">
var vertices = [-1.0,&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.0,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;0.0,
	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0];

gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0); 
gl.drawArrays(gl.LINES, 0, 6);
</pre>
</td> 
	</tr>
	
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">LINE_STRIP</span></p> </td> 
     <td rowspan="1" colspan="1"> <p>In the line strip type, a part of the vertex is shared. In the example, 4 vertices are needed.</p>
<p align="center"><img alt="Lines strip" src="../../../images/drawing_line_strip.png" /></p>

<pre class="prettyprint">
var vertices = [-1.0,&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0];

gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);	
gl.drawArrays(gl. LINE_STRIP, 0, 4);
</pre>
</td> 
	</tr>
	
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">LINE_LOOP</span></p> </td> 
     <td rowspan="1" colspan="1">
	 <p>In the line loop type, the first vertex and the last vertex are connected, otherwise this type is similar to the line strip type. In the example, 4 vertices are needed. </p>
<p align="center"><img alt="Line loop" src="../../../images/drawing_line_loop.png" /></p>

<pre class="prettyprint">
var vertices = [-1.0,&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0];

gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0)	
gl.drawArrays(gl. LINE_LOOP, 0, 4);
</pre>
</td> 
	</tr>
	
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">TRIANGLES</span></p> </td> 
     <td rowspan="1" colspan="1"><p>In the triangles type, 2 triangles are comprised of 3 vertices. In the example, 6 vertices are needed.  
</p>
<p align="center"><img alt="Triangles" src="../../../images/drawing_triangles.png" /></p>

<pre class="prettyprint">
var vertices = [-1.0,&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,&nbsp;&nbsp;0.0,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,&nbsp;&nbsp;0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;0.0];

gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0); 
gl.drawArrays(gl. TRIANGLES, 0, 6);
</pre>
</td> 
	</tr>
	
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">TRIANGLE_STRIP</span></p> </td> 
     <td rowspan="1" colspan="1"><p>In the triangle strip type, a triangle is created using the last 2 vertices and the next vertex. In the example, 6 vertices are needed.  
</p>
<p align="center"><img alt="Triangle strip" src="../../../images/drawing_triangle_strip.png" /></p>

<pre class="prettyprint">
var vertices = [1.0, 1.0,&nbsp;&nbsp;&nbsp;/* p1 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0,&nbsp;&nbsp;&nbsp;/* p2 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0,&nbsp;&nbsp;&nbsp;/* p3 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0,&nbsp;&nbsp;&nbsp;/* p4 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, -1.0,&nbsp;&nbsp;/* p5 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, -1.0];&nbsp;/* p6 */ 

gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0); 
gl.drawArrays(gl. TRIANGLE_STRIP, 0, 6);
</pre>
</td> 
	</tr>
	
	 <tr> 
     <td rowspan="1" colspan="1"> <p><span style="font-family: Courier New,Courier,monospace">TRIANGLE_FAN</span></p> </td> 
     <td rowspan="1" colspan="1"> <p>In the triangle fan type, the first IBO index is shared in all elements. In the example, the <span style="font-family: Courier New,Courier,monospace">p0</span> vertex is shared by all triangles, so 4 triangles are created with 6 vertices.
</p>
<p align="center"><img alt="Triangle fan" src="../../../images/drawing_triangle_fan.png" /></p>

<pre class="prettyprint">
var vertices = [0.0,&nbsp;&nbsp;0.0,&nbsp;&nbsp;&nbsp;/* p0 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;0.8,&nbsp;&nbsp;&nbsp;/* p1 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.5,&nbsp;1.0,&nbsp;&nbsp;&nbsp;/* p2 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.8,&nbsp;0.2,&nbsp;&nbsp;&nbsp;/* p3 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0,&nbsp;-1.0,&nbsp;&nbsp;/* p4 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,&nbsp;&nbsp;-1.0];&nbsp;/* p5 */
 
gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0); 
gl.drawArrays(gl. TRIANGLE_FAN, 0, 6);
</pre>
</td> 
	</tr>
</tbody>
</table>
</li>
  </ol>

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
 	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_circle.html</a></li>	
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_rectangle.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_triangle.html</a></li>	
 </ul> 

 <h2 id="color" name="color">Setting Colors</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to set colors using attributes and a buffer:</p>

  <ol> 
<li><p>Define the vertex shader and fragment shader using the <span style="font-family: Courier New,Courier,monospace">gl_Position</span> and <span style="font-family: Courier New,Courier,monospace">gl_FragColor</span> variables of the <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> (GLSL ES):</p>
<pre class="prettyprint">
&lt;script id=&quot;vshader&quot; type=&quot;x-shader/x-vertex&quot;&gt;
&nbsp;&nbsp;&nbsp;attribute vec2 attVertexPos;
&nbsp;&nbsp;&nbsp;attribute vec4 attVertexColor;

&nbsp;&nbsp;&nbsp;varying vec4 vColor;

&nbsp;&nbsp;&nbsp;void main() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_Position = vec4(attVertexPos, 0, 2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vColor = attVertexColor;
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
	
&lt;script id=&quot;fshader&quot; type=&quot;x-shader/x-fragment&quot;&gt;
&nbsp;&nbsp;&nbsp;precision mediump float;  
	
&nbsp;&nbsp;&nbsp;varying vec4 vColor;

&nbsp;&nbsp;&nbsp;void main() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_FragColor = vColor;
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>

<li><p>Define a rectangular vertex comprised of 2 triangles:</p>
 <pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var vertices = [1.0,  1.0,   /* p1 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, 1.0,   /* p2 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0,  -1.0,  /* p3 */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, -1.0]; /* p4 */
</pre>

<p align="center"><img alt="Result of the coordinates on the left" src="../../../images/color_vertex.png" /></p> 

</li>

<li><p>Create the color buffer and render the 2 triangles using the <span style="font-family: Courier New,Courier,monospace">gl.TRIANGLE_STRIP</span> attribute:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Define the color of each vertex as an array */
&nbsp;&nbsp;&nbsp;var colors = [1.0, 0.0, 0.0, 1.0,  /* Red */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 1.0, 0.0, 1.0,  /* Green */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.0, 1.0, 1.0,  /* Blue */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.0, 0.0, 1.0]; /* Red */

&nbsp;&nbsp;&nbsp;/* Create a buffer for storing the color value */
&nbsp;&nbsp;&nbsp;var triangleVerticesColorBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;/* Bind the buffer */
&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesColorBuffer);
&nbsp;&nbsp;&nbsp;/* Store data in the buffer */
&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);

&nbsp;&nbsp;&nbsp;/* Bring the color attribute position from the WebGlProgram instance */
&nbsp;&nbsp;&nbsp;var vertexColorAttribute =  gl.getAttribLocation(program, &quot;attVertexColor&quot;);
&nbsp;&nbsp;&nbsp;/* Activate the attribute data array */
&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexColorAttribute);       
&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);

&nbsp;&nbsp;&nbsp;gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
&lt;/script&gt;
</pre>

</li>
  </ol> 
<p>The following figure shows the result as it is displayed on the screen.</p>
<p class="figure">Figure: Color on the screen</p> 
<p align="center"><img alt="Color on the screen" src="../../../images/color_final.png" /></p> 

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_color.html</a></li>	
 </ul>    
 
<h2 id="texture" name="texture">Setting Textures</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to use a texture, which is an image applied to the surface:</p>

  <ol> 
<li><p>Define the vertex shader and fragment shader using the <span style="font-family: Courier New,Courier,monospace">gl_Position</span> and <span style="font-family: Courier New,Courier,monospace">gl_FragColor</span> variables of the <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> (GLSL ES). In this example, the texture coordinate attribute is used instead of the vertex coordinate attribute.</p>
<p>Set the variable to pass the texture coordinate over to the fragment shader. Define the formula for calculating the texture coordinates.</p>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The coordinate range of a vertex is -1 ~ 1, and the coordinate range of a texture is 0 ~ 1.</td> 
      </tr> 
     </tbody>
</table>
<pre class="prettyprint">
&lt;script id=&quot;vshader&quot; type=&quot;x-shader/x-vertex&quot;&gt;
&nbsp;&nbsp;&nbsp;attribute vec2 attVertexPos;
&nbsp;&nbsp;&nbsp;varying highp vec2 varTextureCoord;

&nbsp;&nbsp;&nbsp;void main(void) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_Position = vec4(attVertexPos, 0, 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;varTextureCoord = 0.5 * attVertexPos.xy + 0.5;
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;

&lt;script id=&quot;fshader&quot; type=&quot;x-shader/x-fragment&quot;&gt;
&nbsp;&nbsp;&nbsp;varying highp vec2 varTextureCoord;
&nbsp;&nbsp;&nbsp;uniform sampler2D unfSampler; /* Used to access the texture */
	
&nbsp;&nbsp;&nbsp;void main(void) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* texture2D(texture sampler, texture coordinate) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_FragColor= texture2D(unfSampler, vec2(varTextureCoord.s, varTextureCoord.t));
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The texture coordinates uses the <span style="font-family: Courier New,Courier,monospace">s, t</span> pair.</td> 
      </tr> 
     </tbody>
</table>
</li>

<li><p>Create a new <span style="font-family: Courier New,Courier,monospace">texture</span> instance using the <span style="font-family: Courier New,Courier,monospace">createTexture()</span> method:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var texture = gl.createTexture();      
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">After a texture has been used, you can use the <span style="font-family: Courier New,Courier,monospace">deleteTexture()</span> method to delete it.</td> 
      </tr> 
     </tbody>
</table>
</li>

<li><p>Load the image file to be used as texture data, and bind the texture using the <span style="font-family: Courier New,Courier,monospace">bindTexture()</span> method:</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;var textureImage = new Image();
&nbsp;&nbsp;&nbsp;textureImage.onload = function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loadedTextureHandler(texture);
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;textureImage.src = &quot;images/carp.jpg&quot;

&nbsp;&nbsp;&nbsp;function loadedTextureHandler(texture)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Initialize texture */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindTexture(gl.TEXTURE_2D, texture);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);</pre>
<p>The image data loaded in HTML has the opposite y-axis as the webGL direction. Use the <span style="font-family: Courier New,Courier,monospace">gl.UNPACK_FLIP_Y_WEBGL</span> attribute to reverse the data and store it.</p>
</li>

  <li><p>Use the loaded image file to fill the texture data. The <span style="font-family: Courier New,Courier,monospace">texImage2D()</span> method assigns the image to be used as a texture, and the <span style="font-family: Courier New,Courier,monospace">textParameteri()</span> method assigns a filter.</p>
<pre class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage); 


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Filter texture */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR); 


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Wrap texture */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); 
</pre>
</li>

<li>Import the <span style="font-family: Courier New,Courier,monospace">unfSampler</span> uniform location to use in the program:
		
<pre class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var unfSampler = gl.getUniformLocation(program, &quot;uSampler&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniform1i(unfSampler, 0);</pre> 
	</li>
<li>Draw the image using the <span style="font-family: Courier New,Courier,monospace">drawArrays()</span> method:

<pre class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vertexPositionAttribute = gl.getAttribLocation(program,&quot;attVertexPos&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexPositionAttribute);	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
			
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>
  </ol> 
<p>The following figure shows the result as it is displayed on the screen.</p>
<p class="figure">Figure: Texture on the screen</p> 
<p align="center"><img alt="Texture on the screen" src="../../../images/texture.png" /></p> 

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_texture.html</a></li>	
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl/images" target="_blank">carp.jpg</a></li>
 </ul>  

 <h2 id="animation" name="animation">Creating an Animation</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to adjust and move object coordinates to create an animation:</p>

<ol>
<li>Calculate the central point:
<pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var r = 0.1; /* Radius */
&nbsp;&nbsp;&nbsp;var n = 50;  /* Number of vertices */
&nbsp;&nbsp;&nbsp;var cx = 0;  /* x axis central point */ 
&nbsp;&nbsp;&nbsp;var cy = 0;  /* y axis central point */ 
	
&nbsp;&nbsp;&nbsp;var centerVertices = [cx, cy]; /* Common coordinates for all triangles (the central point of a circle) */
&nbsp;&nbsp;&nbsp;var circumVertices = [];
&nbsp;&nbsp;&nbsp;var lastVertices = [];
&nbsp;&nbsp;&nbsp;var vertices = [];
&nbsp;&nbsp;&nbsp;var angle = 0.0;
&nbsp;&nbsp;&nbsp;draw();

&nbsp;&nbsp;&nbsp;function draw()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); /* Clear the canvas */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy = cx = Math.sin(angle) * 0.9; /* Calculate the coordinate of central point to be moved to */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;centerVertices = [cx, cy];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circumVertices = [];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastVertices = [];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices = [];</pre></li>
<li>Use a trigonometric function to calculate the vertex location of a regular N polygon with the central point as the center. Store the n(50) vertex coordinates using the changed central point as the center of the array.
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; n; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circumVertices.push(cx+r * Math.cos(i/n*2 * Math.PI - Math.PI/2));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circumVertices.push(cy+r * Math.sin(i/n*2 * Math.PI - Math.PI/2));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastVertices = [circumVertices[0], circumVertices[1]];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circumVertices = circumVertices.concat(lastVertices);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices = vertices.concat(centerVertices);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices = vertices.concat(circumVertices);</pre>
 </li>
 <li>Change the value of the variable in order to calculate the central point. Render the circle with the central point and vertex location, using the <span style="font-family: Courier New,Courier,monospace">TRIANGLE_FAN</span> argument that allows all triangles to share a central point to make a circle.
<pre class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle += 0.01;	/* Change the angle value to change the central point coordinates */	

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var triangleVerticesBuffer = gl.createBuffer();				
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vertexPositionAttribute = gl.getAttribLocation(program,&quot;attVertexPos&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexPositionAttribute);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexPositionAttribute, 2, gl.FLOAT, false, 0, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.drawArrays(gl.TRIANGLE_FAN, 0, n + 2);  
&nbsp;&nbsp;&nbsp;}</pre>
</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">setInterval()</span> method to set the rendering interval of the circle:
<pre class="prettyprint">&nbsp;&nbsp;&nbsp;window.setInterval(function() {draw();}, 10); 
&lt;/script&gt;
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">Instead of the <span style="font-family: Courier New,Courier,monospace">setInterval()</span> method, you can also use the script-based W3C <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method. </td> 
      </tr> 
     </tbody>
</table> 
</li>

</ol>
<p>The following figure shows the animation as it is displayed on the screen.</p>
<p class="figure">Figure: Animation on the screen</p> 
<p align="center"><img alt="Animation on the screen" src="../../../images/animation_up_down.png" /></p>  

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_animation.html</a></li>	
 </ul>   

 <h2 id="threed" name="threed">Creating a 3D Perspective</h2>

 <p>To enhance the user experience of your application with WebGL features, you must learn to create 3D perspective using the <a href="https://github.com/toji/gl-matrix" target="_blank">glMatrix library</a>:</p>

<ol>
<li><p>Set the vertex coordinate and color buffer values to draw 2 triangles:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;function setupBuffers()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var colors = [1.0, 0.5, 0.5,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.5, 0.5,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.5, 0.5,
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.8, 0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.8, 0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, 0.8, 0.0];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleVerticesColorBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesColorBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
&nbsp;&nbsp;&nbsp;}


&nbsp;&nbsp;&nbsp;function setupVerticesBuffer()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vertices = [-0.5, 0.5,  0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5,  -0.5, 0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.5, -0.5, 0.0,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5,  0.5,  0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-0.5, 0.5,  0.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5,  -0.5, 0.0];		
  						
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;triangleVerticesBuffer = gl.createBuffer();				
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function drawScene()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexColorAttribute = gl.getAttribLocation(program,&quot;attVertexColor&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesColorBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexColorAttribute);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexColorAttribute, 3, gl.FLOAT, false, 0,0);
  		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertexPositionAttribute = gl.getAttribLocation(program,&quot;attVertexPos&quot;);
  		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, triangleVerticesBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(vertexPositionAttribute);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0,0);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.drawArrays(gl.TRIANGLES, 0, 6); 
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
<p align="center"><img alt="2 triangles" src="../../../images/3d.png" /></p> 
</li>

<li><p>Define the vertex shader and fragment shader with using the <span style="font-family: Courier New,Courier,monospace">gl_Position</span> and <span style="font-family: Courier New,Courier,monospace">gl_FragColor</span> variables of the <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> (GLSL ES), and modify the GLSL ES variables:</p>
<pre class="prettyprint">
&lt;script id=&quot;vshader&quot; type=&quot;x-shader/x-vertex&quot;&gt;
&nbsp;&nbsp;&nbsp;attribute vec3 attVertexPos;
&nbsp;&nbsp;&nbsp;attribute vec3 attVertexColor;
  	
&nbsp;&nbsp;&nbsp;uniform mat4 uMVMatrix; /* Uniform variable delivered with the model view matrix */
&nbsp;&nbsp;&nbsp;uniform mat4 uPMatrix; /* Uniform variable delivered with the projection matrix */
  	
&nbsp;&nbsp;&nbsp;varying vec4 vColor;
  	
&nbsp;&nbsp;&nbsp;void main()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Multiply the model view matrix and projection matrix to the original coordinates */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_Position = uPMatrix * uMVMatrix *  vec4(attVertexPos, 1.0); 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vColor = vec4(attVertexColor, 1.0);
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;

&lt;script id=&quot;fshader&quot; type=&quot;x-shader/x-fragment&quot;&gt;
&nbsp;&nbsp;&nbsp;precision mediump float;  
	
&nbsp;&nbsp;&nbsp;varying vec4 vColor;
	
&nbsp;&nbsp;&nbsp;void main()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_FragColor = vColor;
&nbsp;&nbsp;&nbsp;}  	
&lt;/script&gt;
</pre>


</li>

<li><p>Edit the z coordinate of the right triangle to apply perspective:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;gl.viewport(0, 0, canvas.width, canvas.height);
&nbsp;&nbsp;&nbsp;mat4.perspective(45, canvas.width / canvas.height, 0.1, 100.0, pMatrix);
&nbsp;&nbsp;&nbsp;mat4.identity(mvMatrix);
&nbsp;&nbsp;&nbsp;mat4.translate(mvMatrix, [0, 0, -2.0]);
&lt;/script&gt;
</pre>
</li>

<li><p>Download the glMatrix library (<span style="font-family: Courier New,Courier,monospace">gl-matrix-min.js</span>) and include it in the HTML:</p>
<pre class="prettyprint">
&lt;script src=&quot;js/lib/gl-matrix-min.js&quot;&gt;&lt;/script&gt;
</pre>
</li>

<li><p>Declare the variable to store the model view matrix and projection matrix:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var mvMatrix = mat4.create();
&nbsp;&nbsp;&nbsp;var pMatrix = mat4.create();
&lt;/script&gt;
</pre>
</li>

<li><p>Check that the location of the <span style="font-family: Courier New,Courier,monospace">uPMatrix</span> and <span style="font-family: Courier New,Courier,monospace">uMVMatrix</span> uniforms can be used in program:</p>
<pre class="prettyprint">
&lt;script&gt; 
&nbsp;&nbsp;&nbsp;function getMatrixUniforms()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pMatrixUniform = gl.getUniformLocation(program, &quot;uPMatrix&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mvMatrixUniform = gl.getUniformLocation(program, &quot;uMVMatrix&quot;);          
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function setMatrixUniforms() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniformMatrix4fv(pMatrixUniform, false, pMatrix);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniformMatrix4fv(mvMatrixUniform, false, mvMatrix);
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>
</ol>
<p>The following figure shows the 3D perspective as it is displayed on the screen.</p>
<p class="figure">Figure: 3D perspective on the screen</p> 
<p align="center"><img alt="3D perspective on the screen" src="../../../images/3d_final.png" /></p> 


<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_camera_effect.html</a></li>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl/js/lib" target="_blank">gl-matrix-min.js</a></li>		
 </ul>  

 <h2 id="touch" name="touch">Using Touch Events</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to apply a texture and 3D perspective with touch events using the <a href="https://github.com/toji/gl-matrix" target="_blank">glMatrix library</a>. The following example demonstrates how to display and turn a dice on the screen based on touch events.</p>

<ol>
<li><p>Define the vertex shader and fragment shader using the <span style="font-family: Courier New,Courier,monospace">gl_Position</span> and <span style="font-family: Courier New,Courier,monospace">gl_FragColor</span> variables of the <a href="http://www.khronos.org/registry/gles/specs/2.0/GLSL_ES_Specification_1.0.17.pdf" target="_blank">OpenGL&reg; ES Shading Language</a> (GLSL ES):</p>
<pre class="prettyprint">
&lt;script id=&quot;vshader&quot; type=&quot;x-shader/x-vertex&quot;&gt;
&nbsp;&nbsp;&nbsp;attribute vec3 attVertexPos; /* Vertex coordinate attribute */
&nbsp;&nbsp;&nbsp;attribute vec2 attTextureCoord; /* Texture coordinate attribute */

&nbsp;&nbsp;&nbsp;uniform mat4 unifMVMatrix; /* Model–view uniform */ 
&nbsp;&nbsp;&nbsp;uniform mat4 unifPMatrix; /* Projection matrix uniform */  

&nbsp;&nbsp;&nbsp;/* Texture coordinate storing variable used in the fragment shader */
&nbsp;&nbsp;&nbsp;varying vec2 vTextureCoord; 
    
&nbsp;&nbsp;&nbsp;void main(void) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Multiply the model-view matrix and projection matrix to the original coordinates to apply the 3D perspective */  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_Position = unifPMatrix * unifMVMatrix * vec4(attVertexPos, 1.0); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Store the texture coordinates */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vTextureCoord = attTextureCoord; 	
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;

&lt;script id=&quot;fshader&quot; type=&quot;x-shader/x-fragment&quot;&gt;

&nbsp;&nbsp;&nbsp;/* Use a floating point arithmetic value to define the display precision (highp, mediump, or lowp) */
&nbsp;&nbsp;&nbsp;precision mediump float; 

&nbsp;&nbsp;&nbsp;varying vec2 vTextureCoord;

&nbsp;&nbsp;&nbsp;uniform sampler2D unifSampler; /* Handle the cube mapped texture */ 
 
&nbsp;&nbsp;&nbsp;void main(void) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_FragColor = texture2D(unifSampler, vec2(vTextureCoord.s, vTextureCoord.t));
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>

<li><p>Define the variables to be used and the methods to be executed when the window is loaded:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var gl = null;
&nbsp;&nbsp;&nbsp;var program = null;
  	
&nbsp;&nbsp;&nbsp;var diceTexture;
&nbsp;&nbsp;&nbsp;var mvMatrix = mat4.create();
&nbsp;&nbsp;&nbsp;var pMatrix = mat4.create();

&nbsp;&nbsp;&nbsp;var cubeVertexPositionBuffer; /* Buffer for vertex coordinate information */ 
&nbsp;&nbsp;&nbsp;var cubeVertexTextureCoordBuffe; /* Buffer for texture coordinate information */
&nbsp;&nbsp;&nbsp;var cubeVertexIndexBuffer; /* Buffer for index information */ 
    
&nbsp;&nbsp;&nbsp;var xRot = 30;
&nbsp;&nbsp;&nbsp;var yRot = 30;

&nbsp;&nbsp;&nbsp;window.onload = startWegGL;

&nbsp;&nbsp;&nbsp;function startWegGL()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl = getWebGLContext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initShaders();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initBuffers();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initTexture(drawScene);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clearColor(0.5,0.5,0.4,1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enable(gl.DEPTH_TEST);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initEvent();
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace">getContext()</span> method of the <span style="font-family: Courier New,Courier,monospace">canvas</span> object to import the WebGL context:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;function getWebGLContext()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas = document.getElementById(&quot;canvas&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var webGLContext = canvas.getContext(&quot;experimental-webgl&quot;);
  	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return webGLContext
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;

&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;canvas id=&quot;canvas&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;&lt;/canvas&gt;
&lt;/body&gt;
</pre>
</li>

<li><p>Create the shaders and programs using the <span style="font-family: Courier New,Courier,monospace">createShader()</span> and <span style="font-family: Courier New,Courier,monospace">createProgram()</span> methods:</p>
<pre class="prettyprint lang-js">
&lt;script&gt; 
&nbsp;&nbsp;&nbsp;function initShaders()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var vshader = gl.createShader(gl.VERTEX_SHADER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var fshader = gl.createShader(gl.FRAGMENT_SHADER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.shaderSource(vshader, document.getElementById(&#39;vshader&#39;).text);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.shaderSource(fshader, document.getElementById(&#39;fshader&#39;).text);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.compileShader(vshader);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.compileShader(fshader);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program = gl.createProgram();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.attachShader(program, vshader);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.attachShader(program, fshader);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.linkProgram(program); /* Link to program */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.useProgram(program); /* Shaders are loaded and used */ 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.vertexPositionAttribute = gl.getAttribLocation(program,&quot;attVertexPos&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(program.vertexPositionAttribute);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.textureCoordAttribute = gl.getAttribLocation(program, &quot;attTextureCoord&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.enableVertexAttribArray(program.textureCoordAttribute);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.pMatrixUniform = gl.getUniformLocation(program, &quot;unifPMatrix&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.mvMatrixUniform = gl.getUniformLocation(program, &quot;unifMVMatrix&quot;);</pre>
</li>
<li>To send the loaded texture image to the shader program, and add a reference to the shader program <span style="font-family: Courier New,Courier,monospace">unifSampler</span> location: 
<pre class="prettyprint">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program.samplerUniform = gl.getUniformLocation(program, &quot;unifSampler&quot;); 
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li><p>Initialize the buffer:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function initBuffers() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vertices = [-1.0, -1.0, 1.0,    1.0, -1.0, 1.0,    1.0, 1.0, 1.0,    -1.0, 1.0, 1.0,   /* Front */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, -1.0, -1.0,   -1.0, 1.0, -1.0,   1.0, 1.0, -1.0,   1.0, -1.0, -1.0,  /* Back */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, 1.0, -1.0,    -1.0, 1.0, 1.0,    1.0, 1.0, 1.0,    1.0, 1.0, -1.0,   /* Top */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, -1.0, -1.0,   1.0, -1.0, -1.0,   1.0, -1.0, 1.0,   -1.0, -1.0, 1.0,  /* Bottom */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.0, -1.0, -1.0,    1.0, 1.0, -1.0,    1.0, 1.0, 1.0,    1.0, -1.0, 1.0,   /* Right */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-1.0, -1.0, -1.0,   -1.0, -1.0, 1.0,   -1.0, 1.0, 1.0,   -1.0, 1.0, -1.0]; /* Left */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexPositionBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Convert to Float32Array */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);     
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexPositionBuffer.itemSize = 3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexPositionBuffer.numItems = 24;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var textureCoords = [0.0, 0.5,   0.25, 0.5,  0.25, 1.0,  0.0, 1.0,   /* Front */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5, 0.5,   0.75, 0.5,  0.75, 1.0,  0.5, 1.0,   /* Back */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0, 0.5,   0.25, 0.5,  0.25, 0.0,  0.0, 0.0,   /* Top */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.25, 0.5,  0.5, 0.5,   0.5, 0.0,   0.25, 0.0,  /* Bottom */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.25, 0.5,  0.5, 0.5,   0.5, 1.0,   0.25, 1.0,  /* Right */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.75, 0.5,  1.0, 0.5,   1.0, 1.0,   0.75, 1.0]; /* Left */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer.itemSize = 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer.numItems = 24;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexIndexBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cubeVertexIndices = [0,  1,  2,    0,  2,  3,   /* Front */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4,  5,  6,    4,  6,  7,   /* Back */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;8,  9,  10,   8,  10, 11,  /* Top */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;12, 13, 14,   12, 14, 15,  /* Bottom */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;16, 17, 18,   16, 18, 19,  /* Right */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;20, 21, 22,   20, 22, 23]; /* Left */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(cubeVertexIndices), gl.STATIC_DRAW);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexIndexBuffer.itemSize = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeVertexIndexBuffer.numItems = 36;
&nbsp;&nbsp;&nbsp;}  
</pre>
</li>

<li><p>Initialize the WebGL texture and load the image to be used as the texture (the figure shows the coordinates of the image to be loaded):</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function initTexture(callback) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textureImage = new Image();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textureImage.onload = function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleLoadedTexture(textureImage)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (callback) callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textureImage.src = &quot;images/dice.gif&quot;;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function handleLoadedTexture(textureImage) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diceTexture = gl.createTexture();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindTexture(gl.TEXTURE_2D, diceTexture);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
&nbsp;&nbsp;&nbsp;}     
</pre>
<p align="center"><img alt="Image and coordinate of image to be loaded" src="../../../images/dice.png" /></p> 
</li>

<li><p>Define the rendering location and canvas width and height:</p>
<pre class="prettyprint lang-js">
&nbsp;&nbsp;&nbsp;function drawScene() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.viewport(0, 0, canvas.width, canvas.height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT); /* Clear the canvas */</pre>
</li>

<li>Import the <span style="font-family: Courier New,Courier,monospace">mat4()</span> method module and define it using the utility methods: 
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The <span style="font-family: Courier New,Courier,monospace">perspective()</span> method is not WebGL-embedded, so it must be used directly, or a third-party matrix library must be used.</td> 
      </tr> 
     </tbody>
</table> 

<pre class="prettyprint lang-js">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mat4.perspective(45, canvas.width / canvas.height, 0.1, 100.0, pMatrix);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mat4.identity(mvMatrix);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mat4.translate(mvMatrix, [0.0, 0.0, -5.0]);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mat4.rotate(mvMatrix, xRot * Math.PI / 180, [1, 0, 0]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mat4.rotate(mvMatrix, yRot * Math.PI / 180, [0, 1, 0]);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexPositionBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(program.vertexPositionAttribute, cubeVertexPositionBuffer.itemSize, gl.FLOAT, false, 0, 0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.vertexAttribPointer(program.textureCoordAttribute, cubeVertexTextureCoordBuffer.itemSize, gl.FLOAT, false, 0, 0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.activeTexture(gl.TEXTURE0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindTexture(gl.TEXTURE_2D, diceTexture);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniform1i(program.samplerUniform, 0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, cubeVertexIndexBuffer);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniformMatrix4fv(program.pMatrixUniform, false, pMatrix);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.uniformMatrix4fv(program.mvMatrixUniform, false, mvMatrix);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.drawElements(gl.TRIANGLES, cubeVertexIndexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
&nbsp;&nbsp;&nbsp;}  
</pre>
</li>

<li><p>Add touch events:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;var touches;
&nbsp;&nbsp;&nbsp;function initEvent()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var startPosX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var startPosY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var movedPosX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var movedPosY;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function mouseMoveHandler(e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movedPosX = e.touches[0].pageX - startPosX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;movedPosY = e.touches[0].pageY - startPosY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xRot += movedPosY * 0.05;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;yRot += movedPosX * 0.05;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawScene();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchstart&#39;, function(e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touches = e.touches.item(0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startPosX = touches.pageX;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startPosY = touches.pageY;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchmove&#39;, mouseMoveHandler)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchend&#39;, function(e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.removeEventListener(&#39;touchmove&#39;, mouseMoveHandler)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchend&#39;, function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canvas.removeEventListener(&#39;touchmove&#39;, mouseMoveHandler)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&lt;/script&gt;     
</pre>
</li></ol>
<p>The following figure shows the dice as it is displayed on the screen.</p>
<p class="figure">Figure: Dice on the screen</p> 
<p align="center"><img alt="Dice on the screen" src="../../../images/dice_3d.png" /></p> 

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_dice.html</a></li>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl/images" target="_blank">dice.gif</a></li>		
 </ul>  

 <h2 id="framework" name="framework">Using WebGL Frameworks</h2>

<p>To enhance the user experience of your application with WebGL features, you must learn to use the three.js framework:</p> 

<ol>
<li><p>Download the <a href="http://threejs.org/" target="_blank">three.js library</a> and included it in HTML file:</p>
<pre class="prettyprint">
&lt;head&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/lib/three.js&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
</pre>
</li>

<li><p>Set the area to allocate the <span style="font-family: Courier New,Courier,monospace">&lt;canvas&gt;</span> element in HTML, and to adjust the camera and light settings:</p>
<pre class="prettyprint">
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span id=&#39;webGLContainer&#39;&gt;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;table style=&#39;padding: 0px; background: black&#39; border=&quot;1&quot;  cellspacing=&quot;0&quot; cellpadding=&quot;5&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td colspan=&quot;2&quot; class=&quot;hd&quot;&gt;&lt;b&gt;directionalLight&lt;/b&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;X:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-lx&quot; type=&quot;range&quot; min=&quot;-1&quot; max=&quot;1&quot; step=&quot;0.01&quot; /&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;Y:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-ly&quot; type=&quot;range&quot; min=&quot;-1&quot; max=&quot;1&quot; step=&quot;0.01&quot; /&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;Z:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-lz&quot; type=&quot;range&quot; min=&quot;-1&quot; max=&quot;1&quot; step=&quot;0.01&quot; /&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td colspan=&quot;2&quot; class=&quot;hd&quot; &gt;&lt;b&gt;Camera&lt;/b&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;Z:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-cz&quot; type=&quot;range&quot; type=&quot;range&quot; min=&quot;300&quot; max=&quot;800&quot; step=&quot;10&quot; /&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;rotate-X:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-cax&quot; type=&quot;range&quot; min=&quot;-0.5&quot; max=&quot;0.5&quot; step=&quot;0.01&quot;/&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td align=&#39;right&#39;&gt;rotate-Y:&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td width=&#39;150px&#39;&gt;&lt;input id=&quot;slider-cay&quot; type=&quot;range&quot; min=&quot;-0.5&quot; max=&quot;0.5&quot; step=&quot;0.01&quot;/&gt;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/body&gt;
</pre>
</li>

<li><p>Define the variables to be used and the methods to be executed when the window is loaded. Once the window load is complete, import the <span style="font-family: Courier New,Courier,monospace">startWebGl()</span> method.</p>
<pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var canvasWidth = 250; /* Canvas width */
&nbsp;&nbsp;&nbsp;var canvasHeight = 250; /* Canvas height */
  
&nbsp;&nbsp;&nbsp;var renderer = null; /* Variable containing the WebGLRenderer object */ 
&nbsp;&nbsp;&nbsp;var camera = null; /* Variable containing the PerspectiveCamera object */ 
&nbsp;&nbsp;&nbsp;var scene = null; /* Variable containing the Scene object */ 

&nbsp;&nbsp;&nbsp;var components = {}; /* Object type variable containing, for example, light and mesh information */ 

&nbsp;&nbsp;&nbsp;window.onload = startWegGL;
	
&nbsp;&nbsp;&nbsp;function startWegGL() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setupWebGLRenderer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setupCamera();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setupScene();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;manipulate();
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li><p>Create a new <span style="font-family: Courier New,Courier,monospace">WebGLRenderer</span> instance and, after setting the canvas size, add the <span style="font-family: Courier New,Courier,monospace">domElement</span> to the designated HTML location:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function setupWebGLRenderer()
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer = new THREE.WebGLRenderer();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.setSize(canvasWidth, canvasHeight);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add the canvas element to HTML */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;webGLContainer&#39;).appendChild(renderer.domElement); 
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li><p>Create a new <span style="font-family: Courier New,Courier,monospace">PerspectiveCamera</span> instance:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function setupCamera()
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera = new THREE.PerspectiveCamera(45, canvasWidth / canvasHeight, 1, 1000); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera.position.z = 500;
&nbsp;&nbsp;&nbsp;}
</pre>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">In WebGL, there is no <span style="font-family: Courier New,Courier,monospace">Camera</span> object.</td> 
      </tr> 
     </tbody>
</table>
</li>

<li><p>Create a new <span style="font-family: Courier New,Courier,monospace">Scene</span> instance and create the mesh and light elements using the <span style="font-family: Courier New,Courier,monospace">createMeshs()</span> and <span style="font-family: Courier New,Courier,monospace">setupLight()</span> methods:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function setupScene()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scene = new THREE.Scene();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createMeshs();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setupLight();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Circulate components and add the mesh and light elements to the scene object */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (n in components)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scene.add(components[n]);	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
 	
&nbsp;&nbsp;&nbsp;function createMeshs()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Create the cube mesh */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.cubeMesh = (function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cube = new THREE.Mesh(new THREE.CubeGeometry(100, 100, 100), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshLambertMaterial({color: new THREE.Color(0xff8080)}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cube.overdraw = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cube.rotation.x = Math.PI * 0.1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cube.position.x = -50;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cube;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Create the sphere mesh */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.sphereMesh = (function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sphere = new THREE.Mesh(new THREE.SphereGeometry(50, 40, 40), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshLambertMaterial({color: new THREE.Color(0xff8080)}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sphere.overdraw = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sphere.position.x = 50;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sphere.position.z = 50;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sphere;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Create the plane mesh */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.planeMesh = (function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var plane = new THREE.Mesh(new THREE.PlaneGeometry(300, 300, 10,0), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshLambertMaterial({color:&#39;red&#39;}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane.overdraw = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane.position.y = -100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;plane.rotation.x =  Math.PI * -0.4;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return plane;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})();  		
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function setupLight()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Create a new DirectionalLight instance */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var directionalLight = new THREE.DirectionalLight(0xffffff);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Set the DirectionalLight location */  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directionalLight.position.set(0, 0, 1).normalize();  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Set directionalLight as a component element */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.directionalLight = directionalLight; 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Create a new AmbientLight instance and set it as a component element */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.ambientLight = new THREE.AmbientLight(0x915656);
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li><p>Add an animation:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function animate()
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var speed= 0.2; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var lastTime = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var angle = 0.0;
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(function moveWebGLObject()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Update */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var time = (new Date()).getTime();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var timeDiff = time - lastTime;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var angleChange = speed * timeDiff * 2 * Math.PI / 1000;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.cubeMesh.rotation.x = components.cubeMesh.rotation.z = components.cubeMesh.rotation.y += angleChange;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var range = Math.sin(angle);	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (range &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;range *=-1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.sphereMesh.position.y = range * 200 - 50;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastTime = time;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Render */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderer.render(scene, camera);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Request a new frame */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestAnimationFrame(function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;moveWebGLObject();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle += 0.03;	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})();
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li><p>Adjust the camera and light location using events in the <span style="font-family: Courier New,Courier,monospace">manipulate()</span> method:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function manipulate()
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Search for the HTML &lt;input type=&#39;range&#39;&gt; element as the ID value and store it in the variable */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderLx= document.getElementById(&#39;slider-lx&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderLy= document.getElementById(&#39;slider-ly&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderLz= document.getElementById(&#39;slider-lz&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderCz = document.getElementById(&#39;slider-cz&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderCax = document.getElementById(&#39;slider-cax&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderCay = document.getElementById(&#39;slider-cay&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add an event listener to each &lt;input type=&#39;range&#39;&gt; element */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderLx.addEventListener(&#39;change&#39;, function(){changeLightDirection(this,&quot;x&quot;)});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderLy.addEventListener(&#39;change&#39;, function(){changeLightDirection(this,&quot;y&quot;)});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderLz.addEventListener(&#39;change&#39;, function(){changeLightDirection(this,&quot;z&quot;)});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderCz.addEventListener(&#39;change&#39;, function(){changeCameraDirection(this,&quot;z&quot;)});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderCax.addEventListener(&#39;change&#39;, function(){changeCameraAngle(this,&quot;x&quot;)});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderCay.addEventListener(&#39;change&#39;, function(){changeCameraAngle(this,&quot;y&quot;)});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* When a change occurs, a related event is fired, and the axis parameter is handled */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function changeLightDirection(target, axis)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.directionalLight.position[axis] = target.value;		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.directionalLight.position.set(components.directionalLight.position.x, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.directionalLight.position.y, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;components.directionalLight.position.z).normalize();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function changeCameraDirection(target, axis)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera.position[axis] = target.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function changeCameraAngle(target, axis)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera.rotation[axis] = target.value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
</li></ol>
<p>The following figure shows the final result as it is displayed on the screen.</p>
<p class="figure">Figure: Final result</p> 
<p align="center"><img alt="Final result" src="../../../images/threejs.png" /></p>

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl" target="_blank">webgl_using_three_js.html</a></li>
    <li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_webgl/js/lib" target="_blank">three.js</a></li>		
 </ul>   

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
