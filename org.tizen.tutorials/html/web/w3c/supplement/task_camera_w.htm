<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Camera</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#preview">Defining the Preview</a></li>
            <li><a href="#photo">Capturing Images</a></li>
            <li><a href="#video">Recording Videos</a></li>
            <li><a href="#settings">Changing Settings</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/w3c/supplement/camera_w.htm">Camera API (Tizen Extension) Guide</a></li>
            <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/camera_w.html">Camera API (Tizen Extension) API for Wearable Web</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Task: Camera</h1>
<p>This task, based on the Camera sample delivered with the Tizen SDK, demonstrates how you can use the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/camera_w.html">Camera API (Tizen Extension)</a> API to control the camera on the Tizen wearable device.  For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-wearable-applications" target="blank">Camera</a>.</p>

<p>This task consists of the following parts:</p>
 <ul>
 <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens.</li>
 <li><a href="#preview">Defining the Preview</a> defines how to set the camera preview on the screen.</li>
 <li><a href="#photo">Capturing Images</a> defines how to capture an image with auto-focus and save it on the Tizen wearable device.</li>
 <li><a href="#video">Recording Videos</a> defines how to record a video and save it on the Tizen wearable device.</li>
 <li><a href="#settings">Changing Settings</a> defines how to change the camera settings.</li>
 </ul>
 <p>This sample is a fully functional application for launching and controlling the camera on the Tizen wearable device.</p>

<h2 id="layout" name="layout">Defining the Application Layout</h2>
 <p>The Camera sample application layout contains 3 screens: the main screen that shows the camera view port and the mode control, the preview screen that shows the camera preview, and the settings screen that allows you to define the camera settings.</p>
<p>The application uses a simple MV (Model View) architecture. The <span style="font-family: Courier New,Courier,monospace;">js/core</span> directory contains files that implement a simple AMD (Asynchronous Module Definition) and specify module defining.</p>

 

  <h3 id="main" name="main">Defining the Main Screen</h3> 
  <ol class="tutorstep"> 

   <li>index.html Source File
<p>The main screen displays the camera view port and buttons for camera modes and settings. In addition, it contains a progress area for displaying the progress of a recording.</p>
<p>The screen is styled with the <span style="font-family: Courier New,Courier,monospace;">css/style.css</span> file that contains both common styling for all screens and list views, as well as styles for separate elements of each screen. The JavaScript implementation for the screen is located in the <span style="font-family: Courier New,Courier,monospace;">js/views/main.js</span> file.</p>

<pre class="prettyprint">
&lt;div class=&quot;ui-page&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;video id=&quot;camera-preview&quot;&gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn hidden navigation&quot; id=&quot;mode-btn&quot;&gt;&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-btn hidden navigation&quot; id=&quot;settings-btn&quot;&gt;&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;record-progress&quot; class=&quot;hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;record-progress-label&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span id=&quot;record-progress-label-val&quot;&gt;&lt;/span&gt;/&lt;span id=&quot;record-progress-label-max&quot;&gt;&lt;/span&gt; secs
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;record-progress-val&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;focus-container&quot; class=&quot;hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;focus-frame&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
</ol>

  <h3 id="preview_screen" name="preview_screen">Defining the Preview Screen</h3>
  <ol class="tutorstep"> 

   <li>index.html Source File
<p>The preview screen displays the image and video preview. </p>
<p>The screen is styled with the <span style="font-family: Courier New,Courier,monospace;">css/style.css</span> file that contains both common styling for all screens and list views, as well as styles for separate elements of each screen. The JavaScript implementation for the screen is located in the <span style="font-family: Courier New,Courier,monospace;">js/views/preview.js</span> file.</p>

<pre class="prettyprint">
&lt;div class=&quot;ui-page&quot; id=&quot;preview&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content paused&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img id=&quot;preview-picture&quot; class=&quot;hidden&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;video id=&quot;preview-video&quot; class=&quot;hidden&quot;&gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;preview-foreground&quot; class=&quot;paused hidden&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
</ol>

  <h3 id="settings_screen" name="settings_screen">Defining the Settings Screen</h3> 
  <ol class="tutorstep"> 

   <li>index.html Source File
<p>The Settings screen displays the picture and video size and format settings.</p>
<p>The header section of the screen is defined within a <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> element whose <span style="font-family: Courier New,Courier,monospace;">class</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">ui-header</span>. The header section determines the title of the screen. The content section contains a list view component with links to different settings.</p>
<p>Each individual setting has its own sub-screen with a screen title and a list view component displaying the available settings values.</p>
<p>The screen is styled with the <span style="font-family: Courier New,Courier,monospace;">css/style.css</span> file that contains both common styling for all screens and list views, as well as styles for separate elements of each screen. The JavaScript implementation for the screen is located in the <span style="font-family: Courier New,Courier,monospace;">js/views/settings.js</span> file.</p>

<pre class="prettyprint">
&lt;div class=&quot;ui-page&quot; id=&quot;settings&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Settings&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;picture-size-btn&quot;&gt;Picture size&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;picture-format-btn&quot;&gt;Picture format&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a id=&quot;recording-format-btn&quot;&gt;Recording format&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;ui-page&quot; id=&quot;picture-size&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Picture size&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;listbox&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot; id=&quot;picture-size-list&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;!--Picture and recording format have similar screens--&gt;
</pre>
</li>
</ol>


<h2 id="preview" name="preview">Defining the Preview</h2>
 
    <p>This section builds upon the elements described in <a href="camera_tutorial_w.htm#access">Accessing the Camera Device</a>.</p>


   <h3 id="initialize" name="initialize">Initializing the Preview</h3> 
<ol class="tutorstep"> 


<li>js/views/main.js Source File
<ol type="a"><li>
<p>After launching the application, set the variables for the camera preview, call the <span style="font-family: Courier New,Courier,monospace;">initCameraPreview()</span> method to initialize the preview, and register the event handler for when the camera is ready to display the preview.</p>
<pre class="prettyprint">
var e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;page = null,
&nbsp;&nbsp;&nbsp;&nbsp;camera = req.models.camera,
&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview = null;
/* Initialize module */
function init() 
{
&nbsp;&nbsp;&nbsp;page = document.getElementById(&#39;main&#39;);
&nbsp;&nbsp;&nbsp;cameraPreview = document.getElementById(&#39;camera-preview&#39;);
&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;initCameraPreview();
}
e.listeners({&#39;camera.ready&#39;: onCameraReady});
</pre>
</li>
<li><p>In the <span style="font-family: Courier New,Courier,monospace;">initCameraPreview()</span> method, call the <span style="font-family: Courier New,Courier,monospace;">requestForCameraStream()</span> method to retrieve the media stream from the camera.</p>
<pre class="prettyprint">
function requestForCameraStream() 
{
&nbsp;&nbsp;&nbsp;previewInitAttemtps += 1;
&nbsp;&nbsp;&nbsp;navigator.webkitGetUserMedia({video: true, audio: true}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onPreviewStream, onPreviewStreamError);
}
</pre>
</li>
</ol></li></ol>

   <h3 id="callback" name="callback">Displaying the Preview</h3>
<ol class="tutorstep"> 
   <li>js/views/main.js Source File 
   <p>If you successfully retrieve the media stream from the camera, use the <span style="font-family: Courier New,Courier,monospace;">onPreviewStream()</span> event handler to first call the <span style="font-family: Courier New,Courier,monospace;">registerStream()</span> method and then play the preview with the <span style="font-family: Courier New,Courier,monospace;">play()</span> method.</p>
<pre class="prettyprint">
function onPreviewStream(stream) 
{
&nbsp;&nbsp;&nbsp;previewInitAttemtps = 0;
&nbsp;&nbsp;&nbsp;cameraStream = stream;
&nbsp;&nbsp;&nbsp;cameraPreview.src = streamUrl;
&nbsp;&nbsp;&nbsp;camera.registerStream(cameraStream);
&nbsp;&nbsp;&nbsp;if (pageHelper.isPageActive(page)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview.play();
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
   <li>js/models/camera.js Source File 
<ol type="a"><li><p>In the <span style="font-family: Courier New,Courier,monospace;">registerStream()</span> method, create the camera control for the media stream.</p>
   <pre class="prettyprint">
function registerStream(mediaStream) 
{
&nbsp;&nbsp;&nbsp;navigator.tizCamera.createCameraControl(mediaStream, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onCameraControlCreated, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onCameraControlError);
}
</pre>
</li>

   <li>
<p>When the camera control (the <span style="font-family: Courier New,Courier,monospace">cameraControl</span> object) is created, initialize the camera settings and fire the <span style="font-family: Courier New,Courier,monospace">camera.ready</span> event.</p>

<pre class="prettyprint">
function onCameraControlCreated(control) 
{
&nbsp;&nbsp;&nbsp;cameraControl = control;
&nbsp;&nbsp;&nbsp;initCameraSettings();
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.ready&#39;);
}
</pre>
</li>
   <li>When initializing the camera settings, read and saves them.
<pre class="prettyprint">
function initCameraSettings() 
{
&nbsp;&nbsp;&nbsp;var pictureFormats = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureSizes = null;
&nbsp;&nbsp;&nbsp;cameraSettings = storage.get(STORAGE_SETTINGS_KEY);
&nbsp;&nbsp;&nbsp;if (!cameraSettings) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings = {};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureFormats = getAvailablePictureFormats();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings.pictureFormat = pictureFormats[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureSizes = getAvailablePictureSizes();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings.pictureSize = pictureSizes[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveCameraSettings();
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol></li>

<li>js/views/main.js Source File
<p>When the camera is ready to display the preview and the <span style="font-family: Courier New,Courier,monospace">camera.ready</span> event is fired, the <span style="font-family: Courier New,Courier,monospace;">onCameraReady()</span> event handler is called.</p>
<pre class="prettyprint">
function onCameraReady() 
{
&nbsp;&nbsp;&nbsp;previewInitInProgress = false;
&nbsp;&nbsp;&nbsp;if (pageHelper.isPageActive(page)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview.play();
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>


 <h2 id="photo" name="photo">Capturing Images</h2>
 
  <p>This section builds upon the elements described in <a href="camera_tutorial_w.htm#manage">Managing the Camera</a>.</p>

  
   <h3 id="initialize2" name="initialize2">Initializing the Image Capture</h3>
<ol class="tutorstep"> 
  <li>js/views/main.js Source File
<p>Set the needed variables and events for the image capture.</p>
<pre class="prettyprint">
var e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;camera = req.models.camera,
&nbsp;&nbsp;&nbsp;&nbsp;page = null,
&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview = null,
&nbsp;&nbsp;&nbsp;&nbsp;focusContainer = null,
&nbsp;&nbsp;&nbsp;&nbsp;focusFrame = null,
&nbsp;&nbsp;&nbsp;&nbsp;photoMode = true,

/* Initialize the module */
function init() 
{
&nbsp;&nbsp;&nbsp;cameraPreview = document.getElementById(&#39;camera-preview&#39;);
&nbsp;&nbsp;&nbsp;focusContainer = document.getElementById(&#39;focus-container&#39;);
&nbsp;&nbsp;&nbsp;focusFrame = document.getElementById(&#39;focus-frame&#39;);
&nbsp;&nbsp;&nbsp;bindEvents();
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;camera.shutter&#39;: onCameraShutter,
&nbsp;&nbsp;&nbsp;&#39;camera.picture.done&#39;: onPictureDone,
&nbsp;&nbsp;&nbsp;&#39;camera.autofocus.start&#39;: onAutoFocusStart,
&nbsp;&nbsp;&nbsp;&#39;camera.autofocus.success&#39;: onAutoFocusSuccess,
&nbsp;&nbsp;&nbsp;&#39;camera.autofocus.failure&#39;: onAutoFocusFailure
});
</pre>
</li>

<li>js/views/main.js Source File
<p>When the user taps the preview, the <span style="font-family: Courier New,Courier,monospace">onCameraPreviewClick()</span> event handler is called. If the photo mode is on, the image is captured with the <span style="font-family: Courier New,Courier,monospace">takePicture()</span> method.</p>
<pre class="prettyprint">
function onCameraPreviewClick() 
{
&nbsp;&nbsp;&nbsp;if (photoMode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takePhoto();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Record video */
&nbsp;&nbsp;&nbsp;}
}

function takePhoto() 
{
&nbsp;&nbsp;&nbsp;camera.takePicture();
}
</pre>
</li></ol>
   <h3 id="focus" name="focus">Auto-focusing an Image</h3> 
<ol class="tutorstep"> 
<li>js/models/camera.js Source File
<p>To capture an image, first set the needed variables and activate the auto-focus.</p>
<pre class="prettyprint">
var e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;storage = req.core.storage.localstorage,
&nbsp;&nbsp;&nbsp;&nbsp;dateHelper = req.helpers.date,
&nbsp;&nbsp;&nbsp;&nbsp;PICTURE_DESTINATION_DIRECTORY = &#39;/opt/usr/media/Images&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;cameraControl = null,
&nbsp;&nbsp;&nbsp;&nbsp;picturePath = &#39;&#39;;

function takePicture() 
{
&nbsp;&nbsp;&nbsp;if (busy) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;busy = true;
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.autofocus.start&#39;);
&nbsp;&nbsp;&nbsp;if (cameraControl.autoFocus()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(onAutoFocusSuccess, AUTOFOCUS_DELAY);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>js/views/main.js Source File
<p>When the <span style="font-family: Courier New,Courier,monospace">camera.autofocus.start</span> event is fired, the <span style="font-family: Courier New,Courier,monospace">onAutoFocusStart()</span> event handler calls the <span style="font-family: Courier New,Courier,monospace">showAutoFocus()</span> method to add styles to the animated focus frame on the preview.</p>
<pre class="prettyprint">
function onAutoFocusStart() 
{
&nbsp;&nbsp;&nbsp;showAutoFocus();
}

function showAutoFocus() 
{
&nbsp;&nbsp;&nbsp;focusContainer.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;focusFrame.classList.add(&#39;autofocus-animation&#39;);
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>If the auto-focus succeeds, the <span style="font-family: Courier New,Courier,monospace">onAutoFocusSuccess</span> event handler calls the <span style="font-family: Courier New,Courier,monospace">setTimeout()</span> method to start the image capture. The event handler also fires the <span style="font-family: Courier New,Courier,monospace">camera.autofocus.success</span> event.</p>
<pre class="prettyprint">
function onAutoFocusSuccess() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.autofocus.success&#39;);
&nbsp;&nbsp;&nbsp;setTimeout(startTakingPicture, TAKE_PICTURE_DELAY);
}
</pre>
</li>

<li>js/views/main.js Source File
<p>Based on the <span style="font-family: Courier New,Courier,monospace">camera.autofocus.success</span> event, the focus frame style is changed on the screen.</p>
<pre class="prettyprint">
function onAutoFocusSuccess() 
{
&nbsp;&nbsp;&nbsp;focusFrame.classList.add(&#39;autofocus-success&#39;);
}
</pre>
</li></ol>
   <h3 id="capture" name="capture">Capturing an Image</h3>
<ol class="tutorstep"> 
<li>js/models/camera.js Source File
<p>In the <span style="font-family: Courier New,Courier,monospace">startTakingPicture()</span> method, set name and path of the captured image file, and the format and size of the file. 
</p>
<pre class="prettyprint">
function startTakingPicture() 
{
&nbsp;&nbsp;&nbsp;var settings = {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = &#39;&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = createPictureFileName();
&nbsp;&nbsp;&nbsp;picturePath = PICTURE_DESTINATION_DIRECTORY + &#39;/&#39; + fileName;
&nbsp;&nbsp;&nbsp;settings.fileName = fileName;
&nbsp;&nbsp;&nbsp;settings.pictureFormat = getPictureFormat();
&nbsp;&nbsp;&nbsp;settings.pictureSize = getPictureSize();

&nbsp;&nbsp;&nbsp;cameraControl.image.applySettings(settings, onImageSettingsApplied, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onImageSettingsError);
}
</pre>
</li>

<li>js/models/camera.js Source File
<p>When the image settings have been successfully applied and the picture is ready, the <span style="font-family: Courier New,Courier,monospace">onImageSettingsApplied()</span> and <span style="font-family: Courier New,Courier,monospace">onPictureDone()</span> event handlers are called.</p>
<pre class="prettyprint">
function onImageSettingsApplied() 
{
&nbsp;&nbsp;&nbsp;cameraControl.image.takePicture(onPictureDone, onPictureError);
}

function onPictureDone() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.picture.done&#39;, {path: picturePath});
}
</pre>
</li>

<li>js/views/main.js Source File
<p>When the picture is done, the auto-focus frame is hidden and the <span style="font-family: Courier New,Courier,monospace">views.preview.show</span> event is fired to show the image preview.</p>
<pre class="prettyprint">
/* Called when the camera.picture.done event is fired */
function onPictureDone(ev) 
{
&nbsp;&nbsp;&nbsp;var path = ev.detail.path;
&nbsp;&nbsp;&nbsp;hideAutoFocus();
&nbsp;&nbsp;&nbsp;e.fire(&#39;views.preview.show&#39;, {picture: path});
}

function hideAutoFocus() 
{
&nbsp;&nbsp;&nbsp;var classList = focusFrame.classList;
&nbsp;&nbsp;&nbsp;focusContainer.classList.add(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;classList.remove(&#39;autofocus-animation&#39;);
&nbsp;&nbsp;&nbsp;classList.remove(&#39;autofocus-success&#39;);
&nbsp;&nbsp;&nbsp;classList.remove(&#39;autofocus-failure&#39;);
}
</pre>
</li>
<li>js/views/preview.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace">views.preview.show</span> event calls the <span style="font-family: Courier New,Courier,monospace">show()</span> method, which displays the image preview on the screen.</p>
<pre class="prettyprint">
function show(ev) 
{
&nbsp;&nbsp;&nbsp;var detail = ev.detail;
&nbsp;&nbsp;&nbsp;if (detail.picture) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;picture.src = detail.picture;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;picture.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.classList.add(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (detail.video) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Show recorded video preview */ 
&nbsp;&nbsp;&nbsp;}
}

e.listeners({&#39;views.preview.show&#39;: show});
</pre>
</li>
</ol>



<h2 id="video" name="video">Recording Videos</h2>
 
  <p>This section builds upon the elements described in <a href="camera_tutorial_w.htm#manage">Managing the Camera</a>.</p>
 
  
   <h3 id="initialize3" name="initialize3">Initializing Video Recording</h3> 
<ol class="tutorstep"> 
  <li>js/views/main.js Source File
 <ol type="a">
<li>
<p>Set the needed variables for the image capture.</p>
<p>The maximum recording time is set for 10 seconds (<span style="font-family: Courier New,Courier,monospace;">maxRecordingTimeSeconds</span>). Set the <span style="font-family: Courier New,Courier,monospace;">RECORDING_INTERVAL_STEP</span> variable in milliseconds for checking the length of the recording.</p>

<pre class="prettyprint">
var e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;camera = req.models.camera,
&nbsp;&nbsp;&nbsp;&nbsp;page = null,
&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview = null,
&nbsp;&nbsp;&nbsp;&nbsp;recordProgress = null,
&nbsp;&nbsp;&nbsp;&nbsp;recordProgressVal = null,
&nbsp;&nbsp;&nbsp;&nbsp;recordProgressLabelVal = null,
&nbsp;&nbsp;&nbsp;&nbsp;recordProgressLabelMax = null,
&nbsp;&nbsp;&nbsp;&nbsp;recording = false,
&nbsp;&nbsp;&nbsp;&nbsp;RECORDING_INTERVAL_STEP = 100,
&nbsp;&nbsp;&nbsp;&nbsp;recordingInterval = null,
&nbsp;&nbsp;&nbsp;&nbsp;maxRecordingTimeSeconds = Math.floor(camera.MAX_RECORDING_TIME / 1000);

function init() 
{
&nbsp;&nbsp;&nbsp;page = document.getElementById(&#39;main&#39;);
&nbsp;&nbsp;&nbsp;cameraPreview = document.getElementById(&#39;camera-preview&#39;);
&nbsp;&nbsp;&nbsp;recordProgress = document.getElementById(&#39;record-progress&#39;);
&nbsp;&nbsp;&nbsp;recordProgressVal = document.getElementById(&#39;record-progress-val&#39;);
&nbsp;&nbsp;&nbsp;recordProgressLabelVal = document.getElementById(&#39;record-progress-label-val&#39;);
&nbsp;&nbsp;&nbsp;recordProgressLabelMax = document.getElementById(&#39;record-progress-label-max&#39;);
&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;initCameraPreview();
}
</pre></li>
<li>
<p>When the user taps the preview, the <span style="font-family: Courier New,Courier,monospace">onCameraPreviewClick()</span> event handler is called. If the photo mode is not on, the video recording is set with the <span style="font-family: Courier New,Courier,monospace">toggleRecording()</span> and <span style="font-family: Courier New,Courier,monospace">setRecording()</span> methods.</p>
<pre class="prettyprint">
function onCameraPreviewClick() 
{
&nbsp;&nbsp;&nbsp;if (photoMode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Capture an image */
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toggleRecording();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setRecording();
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">toggleRecording()</span> method defines the recording state (on or off).</p>
<pre class="prettyprint">
function toggleRecording(forceValue) 
{
&nbsp;&nbsp;&nbsp;if (forceValue !== undefined) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recording = !!forceValue;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recording = !recording;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>The <span style="font-family: Courier New,Courier,monospace">setRecording()</span> method starts or stops recording, based on the recording state.
<pre class="prettyprint">
function setRecording() 
{
&nbsp;&nbsp;&nbsp;if (recording) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startRecording();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopRecording();
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol></li></ol>

   <h3 id="record" name="record">Starting Video Recording</h3> 
<ol class="tutorstep"> 
  <li>js/views/main.js Source File
  <ol type="a"><li>
<p>The <span style="font-family: Courier New,Courier,monospace">startRecording()</span> method starts the recording process, and the <span style="font-family: Courier New,Courier,monospace">stopRecording()</span> method stops it.</p>
<pre class="prettyprint">
function startRecording() 
{
&nbsp;&nbsp;&nbsp;camera.startRecording();
&nbsp;&nbsp;&nbsp;resetRecordingProgress();
&nbsp;&nbsp;&nbsp;showRecordingView();
}

function stopRecording() 
{
&nbsp;&nbsp;&nbsp;camera.stopRecording();
}
</pre>
</li>

<li>
<p>To start the recording process, first reset the time and progress bar values.</p>
<pre class="prettyprint">
function resetRecordingProgress() 
{
&nbsp;&nbsp;&nbsp;recordingTime = 0;
&nbsp;&nbsp;&nbsp;renderRecordingProgressBar();
}

function renderRecordingProgressBarValue(value) 
{
&nbsp;&nbsp;&nbsp;recordProgressVal.style.width = value + &#39;px&#39;;
}

function renderRecordingProgressBarLabel() 
{
&nbsp;&nbsp;&nbsp;recordProgressLabelVal.innerHTML = dateHelper.formatTime(time);
&nbsp;&nbsp;&nbsp;recordProgressLabelMax.innerHTML = dateHelper.formatTime(maxRecordingTimeSeconds);
}

function renderRecordingProgressBar() 
{
&nbsp;&nbsp;&nbsp;var parentWidth = recordProgress.clientWidth,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width = recordingTime / camera.MAX_RECORDING_TIME * parentWidth;
&nbsp;&nbsp;&nbsp;renderRecordingProgressBarValue(width);
&nbsp;&nbsp;&nbsp;renderRecordingProgressBarLabel();
}
</pre>
</li>

<li>
<p>While recording, you want to show the recording view and progress bar, but hide the navigation buttons.</p>
<pre class="prettyprint">
function showRecordingView() 
{
&nbsp;&nbsp;&nbsp;hideNavigationBtns();
&nbsp;&nbsp;&nbsp;showRecordProgress();
}

function hideNavigationBtns() 
{
&nbsp;&nbsp;&nbsp;modeBtn.classList.add(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;settingsBtn.classList.add(&#39;hidden&#39;);
}

function showRecordProgress() 
{
&nbsp;&nbsp;&nbsp;recordProgress.classList.remove(&#39;hidden&#39;);
}
</pre>
</li></ol></li>

<li>js/models/camera.js Source File
<ol type="a"><li>
<p>Start video recording by applying video file parameters.</p>
<pre class="prettyprint">
function startRecording() 
{
&nbsp;&nbsp;&nbsp;var settings = {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = &#39;&#39;;
&nbsp;&nbsp;&nbsp;if (busy) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;busy = true;
&nbsp;&nbsp;&nbsp;fileName = createVideoFileName();
&nbsp;&nbsp;&nbsp;videoPath = VIDEO_DESTINATION_DIRECTORY + &#39;/&#39; + fileName;
&nbsp;&nbsp;&nbsp;settings.fileName = fileName;
&nbsp;&nbsp;&nbsp;settings.recordingFormat = getRecordingFormat();
&nbsp;&nbsp;&nbsp;cameraControl.recorder.applySettings(settings, onVideoSettingsApplied,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onVideoSettingsError);
				
&nbsp;&nbsp;&nbsp;return true;
}

function createVideoFileName() 
{
&nbsp;&nbsp;&nbsp;var currentDate = new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extension = getRecordingFormat(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = &#39;&#39;;

&nbsp;&nbsp;&nbsp;fileName = dateHelper.format(currentDate, &#39;yyyymmdd_HHMMSS&#39;) + &#39;.&#39; + extension;

&nbsp;&nbsp;&nbsp;return fileName;
}
</pre></li>
<li>When the video file parameters have been applied successfully, the <span style="font-family: Courier New,Courier,monospace">onVideoSettingsApplied()</span> event handler starts the actual recording.
<pre class="prettyprint">
function onVideoSettingsApplied() 
{
&nbsp;&nbsp;&nbsp;cameraControl.recorder.start(onRecordingStartSuccess, onRecordingStartError);
}
</pre>
</li>

<li>
<p>Trace the length of the recording. If the recording lasts longer than 10 seconds, stop recording.</p>

<pre class="prettyprint">
function onRecordingStartSuccess() 
{
&nbsp;&nbsp;&nbsp;startTracingVideoLength();
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.recording.start&#39;);
}

function startTracingVideoLength() 
{
&nbsp;&nbsp;&nbsp;videoRecordingStartTime = new Date();
&nbsp;&nbsp;&nbsp;videoLengthCheckInterval = window.setInterval(checkVideoLength, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VIDEO_LENGTH_CHECK_INTERVAL);
}

function checkVideoLength() 
{
&nbsp;&nbsp;&nbsp;var currentTime = new Date();

&nbsp;&nbsp;&nbsp;videoRecordingTime = currentTime - videoRecordingStartTime;
&nbsp;&nbsp;&nbsp;if (videoRecordingTime &gt; MAX_RECORDING_TIME) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopRecording();
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol></li>
<li>js/views/main.js Source File
<p>Based on the <span style="font-family: Courier New,Courier,monospace">camera.recording.start</span> event, call the <span style="font-family: Courier New,Courier,monospace">setRecordingInterval()</span> method to set the recording interval and update the recording process.</p>
<pre class="prettyprint">
function onRecordingStart() 
{
&nbsp;&nbsp;&nbsp;setRecordingInterval();
}

function setRecordingInterval() 
{
&nbsp;&nbsp;&nbsp;recordingInterval = setInterval(updateRecordingProgress, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RECORDING_INTERVAL_STEP);
}

function updateRecordingProgress() 
{
&nbsp;&nbsp;&nbsp;recordingTime = camera.getRecordingTime();

&nbsp;&nbsp;&nbsp;renderRecordingProgressBar();
}

function renderRecordingProgressBar() 
{
&nbsp;&nbsp;&nbsp;var parentWidth = recordProgress.clientWidth,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width = recordingTime / camera.MAX_RECORDING_TIME * parentWidth;
&nbsp;&nbsp;&nbsp;renderRecordingProgressBarValue(width);
&nbsp;&nbsp;&nbsp;renderRecordingProgressBarLabel();
}

function renderRecordingProgressBarValue(value) 
{
&nbsp;&nbsp;&nbsp;recordProgressVal.style.width = value + &#39;px&#39;;
}

function renderRecordingProgressBarLabel() 
{
&nbsp;&nbsp;&nbsp;var time = Math.ceil(recordingTime / 1000);

&nbsp;&nbsp;&nbsp;if (time &gt; maxRecordingTimeSeconds) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = maxRecordingTimeSeconds;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;recordProgressLabelVal.innerHTML = dateHelper.formatTime(time);
&nbsp;&nbsp;&nbsp;recordProgressLabelMax.innerHTML = dateHelper.formatTime(maxRecordingTimeSeconds);
}
</pre>
</li></ol>

   <h3 id="stop" name="stop">Stopping Video Recording</h3> 
<ol class="tutorstep"> 
  <li>js/views/main.js Source File
<p>When the user taps the screen to stop the recording, the <span style="font-family: Courier New,Courier,monospace">stopRecording()</span> method calls the <span style="font-family: Courier New,Courier,monospace">stopRecording()</span> method.</p>
<pre class="prettyprint">
function stopRecording() 
{
&nbsp;&nbsp;&nbsp;camera.stopRecording();
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>After the recording stops successfully, the <span style="font-family: Courier New,Courier,monospace">onVideoRecordingStopSuccess()</span> event handler fires the <span style="font-family: Courier New,Courier,monospace">camera.recording.done</span> event.</p>
<pre class="prettyprint">
function onVideoRecordingStopSuccess() 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;camera.recording.done&#39;, {path: videoPath});
}
</pre></li>
<li>js/views/main.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace">camera.recording.done</span> event calls the <span style="font-family: Courier New,Courier,monospace">onRecordingDone</span> event handler.</p>
<pre class="prettyprint">
function onRecordingDone(ev) 
{
&nbsp;&nbsp;&nbsp;var path = ev.detail.path;

&nbsp;&nbsp;&nbsp;removeRecordingInterval();
&nbsp;&nbsp;&nbsp;toggleRecording(false);
&nbsp;&nbsp;&nbsp;updateRecordingProgress();
&nbsp;&nbsp;&nbsp;if (!exitInProgress) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;views.preview.show&#39;, {video: path});
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>js/views/preview.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace">onRecordingDone</span> event handler fires the <span style="font-family: Courier New,Courier,monospace">views.preview.show</span> event, which calls the <span style="font-family: Courier New,Courier,monospace">show()</span> method to displays the video preview on the screen.</p>
<pre class="prettyprint">
function show(ev) 
{
&nbsp;&nbsp;&nbsp;var detail = ev.detail;

&nbsp;&nbsp;&nbsp;if (detail.picture) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Show captured image preview */
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (detail.video) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreground.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;picture.classList.add(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.src = detail.video;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.addEventListener(&#39;loadeddata&#39;, showPreviewPage);
&nbsp;&nbsp;&nbsp;}
}
</pre>
 </li>
 </ol>


<h2 id="settings" name="settings">Changing Settings</h2>
 
 <p>This section builds upon the elements described in <a href="camera_tutorial_w.htm#manage">Managing the Camera</a>.</p>

  
   <h3 id="initialize4" name="initialize4">Initializing the Settings</h3> 
<ol class="tutorstep"> 
  <li>js/views/main.js Source File
<p>When the user clicks the icon in the right top corner of the main screen, the click event opens the Settings screen.</p>
<pre class="prettyprint">
function onSettingsBtnClick() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;views.settings.show&#39;, {photoMode: photoMode});
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>When the settings are selected, the <span style="font-family: Courier New,Courier,monospace;">saveCameraSettings()</span> method is used to save them.</p>
<pre class="prettyprint">
function saveCameraSettings()
{
&nbsp;&nbsp;&nbsp;storage.add(STORAGE_SETTINGS_KEY, cameraSettings);
}</pre>
</li></ol>

   <h3 id="imageformat" name="imageformat">Setting the Image Format</h3> 
<ol class="tutorstep"> 
  <li>js/views/pictureFormat.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace;">renderView()</span> method creates the content for the subscreen for setting the image file format.</p>
<pre class="prettyprint">
function renderView() 
{
&nbsp;&nbsp;&nbsp;var formats = camera.getAvailablePictureFormats(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentFormat = camera.getPictureFormat(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = formats.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = false;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format = formats[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = currentFormat === format;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content.push(t.get(&#39;pictureFormatRow&#39;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format: format,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked: checked
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;formatList.innerHTML = content.join(&#39;&#39;);
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The available formats are retrieved from the model.</p>
<pre class="prettyprint">
function getAvailablePictureFormats() 
{
&nbsp;&nbsp;&nbsp;return cameraControl.capabilities.pictureFormats;
}
</pre>
</li>
<li>js/views/pictureFormat.js Source File
<p>After the user selects the format they want, the selected format is passed to the model.</p>
<pre class="prettyprint">
function bindEvents() 
{
&nbsp;&nbsp;&nbsp;page.addEventListener(&#39;pagebeforeshow&#39;, onPageBeforeShow);
&nbsp;&nbsp;&nbsp;formatList.addEventListener(&#39;click&#39;, onFormatListClick);
}

function onFormatListClick() 
{
&nbsp;&nbsp;&nbsp;var input = formatList.querySelectorAll(&#39;input:checked&#39;)[0];

&nbsp;&nbsp;&nbsp;camera.setPictureFormat(input.getAttribute(&#39;data-format&#39;));
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The selected format is used and saved in the model.</p>
<pre class="prettyprint">
function setPictureFormat(format) 
{
&nbsp;&nbsp;&nbsp;cameraSettings.pictureFormat = format;
&nbsp;&nbsp;&nbsp;saveCameraSettings();
}
</pre>
</li>
</ol>

   <h3 id="size" name="size">Setting the Image File Size</h3> 
<ol class="tutorstep"> 
  <li>js/views/pictureSize.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace;">renderView()</span> method creates the content for the subscreen for setting the image file size.</p>
<pre class="prettyprint">
function renderView() 
{
&nbsp;&nbsp;&nbsp;var sizes = camera.getAvailablePictureSizes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentSize = camera.getPictureSize(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = sizes.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = false;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = sizes[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = currentSize.height === size.height &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentSize.width === size.width;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content.push(t.get(&#39;pictureSizeRow&#39;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: size.width,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: size.height,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked: checked
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;pictureSizeList.innerHTML = content.join(&#39;&#39;);
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The available sizes are retrieved from the model.</p>
<pre class="prettyprint">
function getAvailablePictureSizes() 
{
&nbsp;&nbsp;&nbsp;return cameraControl.capabilities.pictureSizes;
}
</pre>
</li>
<li>js/views/pictureSize.js Source File
<p>After the user selects the size they want, the selected size is passed to the model.</p>
<pre class="prettyprint">
function onSizeListClick() 
{
&nbsp;&nbsp;&nbsp;var input = pictureSizeList.querySelectorAll(&#39;input:checked&#39;)[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width = parseInt(input.getAttribute(&#39;data-width&#39;), 10),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height = parseInt(input.getAttribute(&#39;data-height&#39;), 10);

&nbsp;&nbsp;&nbsp;camera.setPictureSize(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: width,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: height
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The selected size is used and saved in the model.</p>
<pre class="prettyprint">
function setPictureSize(size) 
{
&nbsp;&nbsp;&nbsp;cameraSettings.pictureSize = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: size.width,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: size.height
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;saveCameraSettings();
}
</pre>
</li>
</ol>

 <h3 id="videoformat" name="videoformat">Setting the Video Format</h3> 
<ol class="tutorstep"> 
  <li>js/views/recordingFormat.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace;">renderView()</span> method creates the content for the subscreen for setting the video file format.</p>
<pre class="prettyprint">
function renderView() 
{
&nbsp;&nbsp;&nbsp;var formats = camera.getAvailableRecordingFormats(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentFormat = camera.getRecordingFormat(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = formats.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = false;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format = formats[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked = currentFormat === format;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content.push(t.get(&#39;recordingFormatRow&#39;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;format: format,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checked: checked
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;formatList.innerHTML = content.join(&#39;&#39;);
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The available formats are retrieved from the model.</p>
<pre class="prettyprint">
function getAvailableRecordingFormats() 
{
&nbsp;&nbsp;&nbsp;return cameraControl.capabilities.recordingFormats;
}
</pre>
</li>
<li>js/views/recordingFormat.js Source File
<p>After the user selects the format they want, the selected format is passed to the model.</p>
<pre class="prettyprint">
function onFormatListClick() 
{
&nbsp;&nbsp;&nbsp;var input = formatList.querySelectorAll(&#39;input:checked&#39;)[0];

&nbsp;&nbsp;&nbsp;camera.setRecordingFormat(input.getAttribute(&#39;data-format&#39;));
}
</pre>
</li>
<li>js/models/camera.js Source File
<p>The selected format is used and saved in the model.</p>
<pre class="prettyprint">
function setRecordingFormat(format) 
{
&nbsp;&nbsp;&nbsp;cameraSettings.recordingFormat = format;
&nbsp;&nbsp;&nbsp;saveCameraSettings();
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>