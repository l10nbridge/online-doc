<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>Typed Array - Khronos: Handling Binary Data</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#array">Creating an Array Buffer</a>
			</li>
			<li><a href="#view">Creating Typed Array Views</a>
			</li>
			<li><a href="#use">Using Typed Arrays</a>
			</li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
             <li><a href="../../../../../org.tizen.guides/html/web/w3c/supplement/typedarray_w.htm">Typed Array - Khronos Guide</a></li>
			 <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#typed_array">Typed Array - Khronos API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#typed_array">Typed Array - Khronos API for Wearable Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Typed Array - Khronos: Handling Binary Data</h1>

 <p>This tutorial demonstrates how you can access binary data in JavaScript.</p>

<h2 id="warm-up" name="warm-up">Warm-up</h2>
<p>Become familiar with the Typed Array - Khronos API basics by learning about:</p>
<ul>
<li><a href="#array">Creating an Array Buffer</a>
<p>Create a buffer to save data on the array buffer view.</p></li>
<li><a href="#view">Creating Typed Array Views</a>
<p>Create a typed array view of the array buffer and provide access to read and write binary data.</p></li>
<li><a href="#use">Using Typed Arrays</a>
<p>Deliver binary data in other HTML5 APIs that use a typed array.</p></li>
</ul>


 <h2 id="array" name="array">Creating an Array Buffer</h2>


<p>To handle binary data in your application with JavaScript, you must learn to create array buffers:</p>
<ol>
<li>Create a new <a href="http://www.khronos.org/registry/typedarray/specs/latest/#5" target="_blank">ArrayBuffer</a> with a specific length:
<pre class="prettyprint lang-js">&lt;script&gt;
&nbsp;&nbsp;&nbsp;var log = document.getElementById(&quot;log&quot;);

&nbsp;&nbsp;&nbsp;/* Create a 12-byte buffer */
&nbsp;&nbsp;&nbsp;var buffer = new ArrayBuffer(12);
&nbsp;&nbsp;&nbsp;var x = new Int32Array(buffer);

&nbsp;&nbsp;&nbsp;/* Check the buffer length */
&nbsp;&nbsp;&nbsp;log.innerHTML = &quot;&lt;div&gt;&quot; + buffer.byteLength + &quot;&lt;div&gt;&quot;;</pre>
<p>The content of the array buffer is initialized to 0. If the requested number of bytes are not allocated, an exception is raised.</p></li>
<li>Slice the array buffer to copy the buffer bytes and return a new array buffer:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Get slice: &quot;1234&quot;*/    
&nbsp;&nbsp;&nbsp;x[1] = 1234;
&nbsp;&nbsp;&nbsp;var slice = buffer.slice(4);
&nbsp;&nbsp;&nbsp;var y = new Int32Array(slice);
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x[1] + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + y[0] + &quot;&lt;div&gt;&quot;;

&nbsp;&nbsp;&nbsp;/* Get slice: &quot;6789&quot;*/
&nbsp;&nbsp;&nbsp;x[1] = 6789;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x[1] + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + y[0] + &quot;&lt;div&gt;&quot;;
&lt;/script&gt;</pre></li>
</ol>
<p class="figure">Figure: Creating and slicing array buffers (in mobile applications only)</p>
<p align="center"><img alt="Creating and slicing array buffers (in mobile applications only)" src="../../../images/arraybuffer.png"/></p>

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_typed_array" target="_blank">sample_1.html</a></li>	
 </ul>  

 <h2 id="view" name="view">Creating Typed Array Views</h2>


<p>To handle binary data in your application with JavaScript, you must learn to access the binary data for reading and writing:</p>
<ol>
<li>Create new instances of the typed array view types with a general fixed-length binary buffer:
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;/* 8-bit 2&#39;s complement signed integer */
&nbsp;&nbsp;&nbsp;var int8 = new Int8Array(8);
&nbsp;&nbsp;&nbsp;/* 8-bit unsigned integer */
&nbsp;&nbsp;&nbsp;var uint8 = new Uint8Array(16);
&nbsp;&nbsp;&nbsp;/* 8-bit unsigned integer (clamped) */
&nbsp;&nbsp;&nbsp;var uint8Cl = new Uint8ClampedArray(32);
&nbsp;&nbsp;&nbsp;/* 16-bit 2&#39;s complement signed integer */
&nbsp;&nbsp;&nbsp;var int16 = new Int16Array(64);
&nbsp;&nbsp;&nbsp;/* 16-bit unsigned integer */
&nbsp;&nbsp;&nbsp;var uint16 = new Uint16Array(8);
&nbsp;&nbsp;&nbsp;/* 32-bit 2&#39;s complement signed integer */
&nbsp;&nbsp;&nbsp;var int32 = new Int32Array(16);
&nbsp;&nbsp;&nbsp;/* 32-bit unsigned integer */
&nbsp;&nbsp;&nbsp;var uint32 = new Uint32Array(32);
&nbsp;&nbsp;&nbsp;/* 32-bit IEEE floating point */
&nbsp;&nbsp;&nbsp;var float32 = new Float32Array(64);
&nbsp;&nbsp;&nbsp;/* 64-bit IEEE floating point */
&nbsp;&nbsp;&nbsp;var float64 = new Float64Array(8);
&lt;/script&gt;
</pre>


<table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">In the above code, to access a buffer with an array of 16-bit signed integers, use the <span style="font-family: Courier New,Courier,monospace">Int16Array</span> instance that references an array buffer.</td>
	</tr> 	
   </tbody> 
  </table></li>
<li>Create a typed array view:
<pre class="prettyprint lang-js">&lt;script&gt;
&nbsp;&nbsp;&nbsp;var log = document.getElementById(&quot;log&quot;);
&nbsp;&nbsp;&nbsp;/* Create an array buffer */
&nbsp;&nbsp;&nbsp;var buffer = new ArrayBuffer(12);
	        
&nbsp;&nbsp;&nbsp;/* Create a typed array view that points to the array buffer */
&nbsp;&nbsp;&nbsp;var x = new Int32Array(buffer, 0, 2);
</pre>
<p>You can use the view to establish a detailed data structure by creating the value of 32-bit signed integers in a byte-type composition element.</p>
</li>
<li>Use the typed array view buffer:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;var y = new Int32Array(x.buffer, 4, 2);
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + (x.buffer === y.buffer) + &quot;&lt;div&gt;&quot;;
	        
&nbsp;&nbsp;&nbsp;/* Use the byteLength, length, and byteOffset properties */
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x.byteLength + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + (x.length * Int32Array.BYTES_PER_ELEMENT) + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x.byteOffset + &quot;&lt;div&gt;&quot;; 
&lt;/script&gt;</pre>

<p align="center"><img alt="Typed Array implementation" src="../../../images/typed_array_implementation.png"/></p></li>

<li>Replace the <span style="font-family: Courier New,Courier,monospace">CanvasPixelArray</span> instance with the <span style="font-family: Courier New,Courier,monospace">Uint8ClampedArray</span> instance:
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var buffer = new ArrayBuffer(12);
&nbsp;&nbsp;&nbsp;var x = new Uint8ClampedArray(buffer, 4, 2);
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;[Result1]&lt;/div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x.byteLength + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x.length + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + Uint8ClampedArray.BYTES_PER_ELEMENT + &quot;&lt;div&gt;&quot;;

&nbsp;&nbsp;&nbsp;var x = new Uint8ClampedArray(10);
&nbsp;&nbsp;&nbsp;x.set([18, 93, 42], 3);
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;br&gt;&lt;div&gt;[Result2]&lt;/div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x[3] + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x[4] + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x[5] + &quot;&lt;div&gt;&quot;;

&nbsp;&nbsp;&nbsp;var x = new Uint8ClampedArray([0, 1, 2, 3, 4, 5]);
&nbsp;&nbsp;&nbsp;var y = x.subarray(2, 5);
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;br&gt;&lt;div&gt;[Result3]&lt;/div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + y.length + &quot;&lt;div&gt;&quot;;	
&lt;/script&gt;</pre>


<p>The <span style="font-family: Courier New,Courier,monospace">Uint8ClampedArray</span> behavior is identical to the other typed array views. The only notable exception is that the setters and constructors use clamping rather than modulo arithmetic while converting incoming number values.</p>

<p align="center"><img alt="Clamped Array implementation" src="../../../images/clamped_array.png"/></p></li>

<li>When an <span style="font-family: Courier New,Courier,monospace">ArrayBuffer</span> with heterogeneous type of data is used, you can take advantage of the <span style="font-family: Courier New,Courier,monospace">DataView</span> of the buffer:
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var log = document.getElementById(&quot;log&quot;);
    
&nbsp;&nbsp;&nbsp;/* Create DataView */
&nbsp;&nbsp;&nbsp;var x = new DataView(new ArrayBuffer(12), 0);

&nbsp;&nbsp;&nbsp;/* Store the variable */
    x.setFloat32(1, Math.PI);

&nbsp;&nbsp;&nbsp;/* Get the variable */
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + x.getFloat32(1) + &quot;&lt;div&gt;&quot;;
&nbsp;&nbsp;&nbsp;log.innerHTML += &quot;&lt;div&gt;&quot; + Math.PI + &quot;&lt;div&gt;&quot;; 
&lt;/script&gt;</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">DataView</span> stores the values of the given type at the specified byte offset from the start of the view. Moreover, alignment is not a constraint, and it can store the multi-byte values at any offset. For multi-byte values, the optional <span style="font-family: Courier New,Courier,monospace">littleEndian</span> argument indicates that the value can be stored in a big-endian or little-endian byte order. If the argument is set to <span style="font-family: Courier New,Courier,monospace">false</span> or is undefined, the value gets stored in the big-endian byte order.</p>
<p align="center"><img alt="DataView" src="../../../images/data_view.png"/></p></li>
</ol>

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_typed_array" target="_blank">sample_2.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_typed_array" target="_blank">sample_3.html</a></li>	
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/graphics/khronos_typed_array" target="_blank">sample_4.html</a></li>	
 </ul> 

 <h2 id="use" name="use">Using Typed Arrays</h2>


<p>To handle binary data in your application with JavaScript, you must learn to deliver binary data effectively in other HTML5 APIs that employ a typed array:</p>

<ol>
<li>For the WebGL - Khronos API (in <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#webgl">mobile</a> or <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#webgl">wearable</a> applications), import the <span style="font-family: Courier New,Courier,monospace">gl.bufferData()</span> method to set the buffer object to deliver texture data:
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var textureCoords = [0.0,  0.5, 0.25, 0.5, 0.25, 1.0, 0.0,  1.0,  /* Front */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5,  0.5, 0.75, 0.5, 0.75, 1.0, 0.5,  1.0,  /* Back */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.0,  0.5, 0.25, 0.5, 0.25, 0.0, 0.0,  0.0,  /* Top */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.25, 0.5, 0.5,  0.5, 0.5,  0.0, 0.25, 0.0,  /* Bottom */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.25, 0.5, 0.5,  0.5, 0.5,  1.0, 0.25, 1.0,  /* Right */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.75, 0.5, 1.0,  0.5, 1.0,  1.0, 0.75, 1.0]; /* Left */

&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer = gl.createBuffer();
&nbsp;&nbsp;&nbsp;gl.bindBuffer(gl.ARRAY_BUFFER, cubeVertexTextureCoordBuffer);
&nbsp;&nbsp;&nbsp;gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoords), gl.STATIC_DRAW);
&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer.itemSize = 2;
&nbsp;&nbsp;&nbsp;cubeVertexTextureCoordBuffer.numItems = 24;
&lt;/script&gt;</pre></li>

<li>For the HTML5 canvas element API (in <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#canvas">mobile</a> or <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#canvas">wearable</a> applications), use the typed array with the following steps:
<ol type="a">
<li>Create an <span style="font-family: Courier New,Courier,monospace">ImageData</span> object of the canvas internally.</li>
<li>Deliver the pixel expression of the canvas element:
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var tempContext = canvas.getContext(&quot;2d&quot;);
&nbsp;&nbsp;&nbsp;tempContext.drawImage(picture, 0, 0, canvas.width, canvas.height);
&nbsp;&nbsp;&nbsp;var pixels = canvas.width * canvas.height * 4;
&nbsp;&nbsp;&nbsp;var canvasData = tempContext.getImageData(0, 0, canvas.width, canvas.height);
&nbsp;&nbsp;&nbsp;var binaryData = canvasData.data;
&lt;/script&gt;</pre></li></ol>
<table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The pixel array of canvas can be created and edited without direct manipulation of the canvas element.</td>
	</tr> 		
   </tbody> 
  </table></li>

<li>For the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#httpreq">XMLHttpRequest Level 1 API</a> or <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#httpreq">XMLHttpRequest Level 2 API</a>, set the response type of the <span style="font-family: Courier New,Courier,monospace">XMLHttpRequest</span> object as <span style="font-family: Courier New,Courier,monospace">arraybuffer</span> to receive a typed array response. This way by delivering data directly in multimedia, you can parse the binary file through the network:
<pre class="prettyprint">
this.setSound = function() 
{
&nbsp;&nbsp;&nbsp;var request = new XMLHttpRequest();
&nbsp;&nbsp;&nbsp;request.open(&quot;GET&quot;, url, true);
&nbsp;&nbsp;&nbsp;request.responseType = &quot;arraybuffer&quot;;

&nbsp;&nbsp;&nbsp;request.onload = function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data = request.response;
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;request.send();
}</pre></li>
</ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
