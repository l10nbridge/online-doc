<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Web Workers: Running JavaScript on the Background</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#Creating_Web_Worker">Creating a Web Worker and Handling Errors</a></li>
			<li><a href="#Sending_Messages">Sending Messages Between Web Workers</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			 <li><a href="../../../../../org.tizen.guides/html/web/w3c/perf_opt/web_workers_w.htm">Web Workers Guide</a></li>
			 <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#web_workers">Web Workers API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#web_workers">Web Workers API for Wearable Web</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Web Workers: Running JavaScript on the Background</h1>

<p>This tutorial demonstrates how you can create and terminate a Web worker, handle errors, and send messages between workers.</p>
  

  <h2>Warm-up</h2>
  <p>Become familiar with the Web Workers API basics by learning about:</p>
  <ul>
   <li><a href="#Creating_Web_Worker">Creating a Web Worker and Handling Errors</a>
   <p>Create and execute a Web worker and a subworker, and handle worker-related errors.</p></li>
   <li><a href="#Sending_Messages">Sending Messages Between Web Workers</a>
   <p>Send messages between host workers and subworkers.</p></li>
  </ul>

<h2 id="Creating_Web_Worker" name="Creating_Web_Worker">Creating a Web Worker and Handling Errors</h2>
				
			<p>Learning how to create Web workers is a useful resource management skill:</p>
	<ol>
		<li>To create and execute a Web worker:
		<ol type="a">
			<li><p>Create JavaScript code for a simple Boolean operation:</p>
			<pre class="prettyprint">
var n = 1;
index: while (true) 
{
&nbsp;&nbsp;&nbsp;n += 1;
&nbsp;&nbsp;&nbsp;for (var i = 2; i &lt;= Math.sqrt(n); i += 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (n % i == 0) continue index;
&nbsp;&nbsp;&nbsp;postMessage(n);
}</pre>
			<p>This JavaScript operation delivers the calculated value of the <span style="font-family: Courier New,Courier,monospace">Math.sqrt(n)</span> method to the <span style="font-family: Courier New,Courier,monospace">postMessage()</span> method. It cannot be used for continuous posting of the Boolean operation.</p>
			</li>
			<li>
			<p>Create a Web worker to be activated in the background. The JavaScript URL defining the worker needs to be delivered when creating the worker object:</p>
			<pre class="prettyprint lang-html">
&lt;button type=&quot;button&quot; onclick=&quot;workerStart()&quot;&gt;Start&lt;/button&gt;
&lt;button type=&quot;button&quot; onclick=&quot;worker.terminate()&quot;&gt;Stop&lt;/button&gt;
&lt;output&gt;&lt;/output&gt;
</pre><pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var worker = new Worker(&quot;worker3.js&quot;);

&nbsp;&nbsp;&nbsp;function workerStart() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;worker.onmessage = function(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector(&quot;output&quot;).textContent = e.data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;</pre>
			<p>When the <strong>Start</strong> button is clicked, message data is received from the worker and displayed in the <span style="font-family: Courier New,Courier,monospace">&lt;output&gt;</span> element. When the <strong>Stop</strong> button is clicked, the worker is terminated.</p>
			<p>Simple operations can be sufficiently handled with a single worker, however, in order to execute a more complex operations, more workers are needed.</p>
			</li>
		</ol>
		</li>
		<li>To create a subworker, use the <span style="font-family: Courier New,Courier,monospace">importScripts()</span> method:
		<pre class="prettyprint">
importScripts(&#39;worker1.js&#39;);
importScripts(&#39;worker1.js&#39;, &#39;worker2.js&#39;);</pre>
		<p>The subworker creates its own independent thread, and is activated in it, so it has the same restrictions as a host worker. This means that communication between subworkers is impossible, but a host worker can communicate with subworkers within the same object.</p>
		</li>
		<li>To handle errors:
			<ul>
				<li><p>If an error occurs when the worker is being executed, the <span style="font-family: Courier New,Courier,monospace">onerror()</span> event is triggered. It takes <span style="font-family: Courier New,Courier,monospace">filename</span>, <span style="font-family: Courier New,Courier,monospace">lineno</span>, and <span style="font-family: Courier New,Courier,monospace">message</span> attributes, and displays an error message:</p>
				<pre class="prettyprint">
worker.onerror = function(e) 
{
&nbsp;&nbsp;&nbsp;document.querySelectorAll(&quot;output&quot;)[1].textContent = [&#39;filename: &#39;, e.filename, &#39; lineno: &#39;, e.lineno, &#39; error: &#39;, e.message].join(&#39; &#39;);
};</pre>
				</li>
				<li><p>The <span style="font-family: Courier New,Courier,monospace">addEventListener</span> can be used instead of the <span style="font-family: Courier New,Courier,monospace">onerror</span> event to detect errors and display an error message:</p>
				<pre class="prettyprint">
function errorMessage(e) 
{
&nbsp;&nbsp;&nbsp;document.querySelectorAll(&quot;output&quot;)[1].textContent = [&#39;filename: &#39;, e.filename, &#39; lineno: &#39;, e.lineno, &#39; error: &#39;, e.message].join(&#39; &#39;);
}

worker.addEventListener(&#39;error&#39;, errorMessage, false);</pre></li>
			</ul>
		</li>
	</ol>  
		
				<h2 id="Sending_Messages" name="Sending_Messages">Sending Messages Between Web Workers</h2>
				
			<p>Learning how to send messages between Web workers is a useful resource management skill:</p>

	<ol>
	<li>Send a message in one of the following ways:
		<ul>
			<li>
			<p>Use the <span style="font-family: Courier New,Courier,monospace">postMessage()</span> method to send a &quot;Hello&quot; message to a Web worker:</p>
<pre class="prettyprint">var worker = new Worker(&#39;worker1.js&#39;);
worker.postMessage(&quot;Hello&quot;);
</pre>
			</li>
			<li>
			<p>Use the JSON format to send the message:</p>
<pre class="prettyprint">
var worker = new Worker(&#39;worker2.js&#39;);
worker.postMessage(
{
&nbsp;&nbsp;&nbsp;a: &quot;Hello&quot;, b: &quot;Tizen&quot;
});
</pre>
			</li>
		</ul></li>
	<li><p>Receive a message in one of the following ways:</p>
		<ul>
			<li><p>Use the <span style="font-family: Courier New,Courier,monospace">onMessage</span> event handler to respond to receiving a message:</p>
<pre class="prettyprint">worker.onmessage = function(e) 
{
&nbsp;&nbsp;&nbsp;alert(e.data);
};</pre>
			</li>
			<li><p>Use the <span style="font-family: Courier New,Courier,monospace">addEventListener()</span> method to listen to the event of receiving a message:</p>
<pre class="prettyprint">
worker.addEventListener(&quot;message&quot;, function(e) 
{
&nbsp;&nbsp;&nbsp;alert(e.data);
}, false);</pre>
			</li>
		</ul>
	</li>
	<li><p>Use the workers to execute threads:</p>
		<ul>
			<li><p>Use <span style="font-family: Courier New,Courier,monospace">worker1.js</span>:</p>
<pre class="prettyprint">self.onmessage = function(e)
{
&nbsp;&nbsp;&nbsp;self.postMessage(&quot;You say: &quot; + e.data);
};</pre>
			</li>
			<li><p>Use <span style="font-family: Courier New,Courier,monospace">worker2.js</span>:</p>
<pre class="prettyprint">
self.onmessage = function(e)
{
&nbsp;&nbsp;&nbsp;var b = e.data.b;
&nbsp;&nbsp;&nbsp;if (b === &quot;Tizen&quot;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.postMessage(e.data.b + &quot; say: &quot; + e.data.a);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.postMessage(&quot;You say: &quot; + e.data.a);
&nbsp;&nbsp;&nbsp;}
};</pre>
			</li>
			
		</ul>
<p>The <span style="font-family: Courier New,Courier,monospace">postMessage()</span> method can also execute the worker and respond to a message simultaneously.</p>		
	</li>
	</ol>

<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following files:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/performance_and_optimization/web_workers" target="_blank">web_worker_1.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/performance_and_optimization/web_workers" target="_blank">web_worker_2.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/performance_and_optimization/web_workers" target="_blank">worker_1.js</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/performance_and_optimization/web_workers" target="_blank">worker_2.js</a></li>
 </ul>
			

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 

  <script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script> 
  
 </body>
</html>