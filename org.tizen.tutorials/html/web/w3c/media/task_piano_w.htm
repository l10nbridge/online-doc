<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Piano</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#initialize">Initializing the Application</a></li>
            <li><a href="#handle">Handling the Keys</a></li>
            <li><a href="#play">Playing Sounds</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/w3c/media/video_audio_w.htm">HTML5 video and audio element Guide</a></li> 
            <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">HTML5 audio element API for Mobile Web</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Task: Piano</h1> 
  <p>This task, based on the Piano sample delivered with the Tizen SDK, demonstrates how you can use the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">HTML5 audio element</a> API to create a piano application and play sounds. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-mobile-applications" target="blank">Piano</a>.</p> 
  
  <p>This task consists of the following parts:</p> 
  <ul> 
   <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens.</li>
   <li><a href="#initialize">Initializing the Application</a> defines how to initialize the application.</li>
   <li><a href="#handle">Handling the Keys</a> defines how to create the piano object.</li>   
   <li><a href="#play">Playing Sounds</a> defines how to use the <span style="font-family: Courier New,Courier,monospace;">audio</span> element to play sounds.</li> 
  </ul> 
  <p>This sample is a fully functional application for playing a piano. The user can use multi-touch to play a combination of sounds from a single octave.</p> 
  
<h2 id="layout" name="layout">Defining the Application Layout</h2> 
  <p>The Piano sample application layout contains only 1 screen: the main screen that displays the piano keyboard.</p> 

  <p>The following figure shows the main screen of the application.</p> 
  <p class="figure">Figure: Piano screen</p> 
  <p align="center"><img alt="Piano screen" src="../../../images/piano.png" /></p> 
 
  <h3 id="main" name="main">Defining the Main Screen</h3> 
  <ol class="tutorstep"> 
   <li>index.html Source File
<p>The main screen displays a piano keyboard. The keys are defined as <span style="font-family: Courier New,Courier,monospace;">&lt;div&gt;</span> elements whose <span style="font-family: Courier New,Courier,monospace;">class</span> attribute is set to <span style="font-family: Courier New,Courier,monospace;">button</span>.</p>

<pre class="prettyprint lang-html">
&lt;body ondragstart=&quot;return false&quot; onselectstart=&quot;return false&quot;&gt;

&nbsp;&nbsp;&nbsp;&lt;div class="button white_btn&quot; id=&quot;play0&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play2&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play4&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play5&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play7&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play9&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play11&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button white_btn&quot; id=&quot;play12&quot;&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 8.6%&quot; id=&quot;play1&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 21.2%&quot; id=&quot;play3&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 45.8%&quot; id=&quot;play6&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 58.4%&quot; id=&quot;play8&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 70.9%&quot; id=&quot;play10&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;button black_btn&quot; style=&quot;left: 95%&quot; id=&quot;play13&quot;&gt;&lt;/div&gt;

&lt;/body&gt;
</pre> </li>
<li>style.css Source File
<p>The appearance of the key buttons is defined in the CSS file.</p>

<pre class="prettyprint">
.white_btn 
{
&nbsp;&nbsp;&nbsp;background: url(&#39;../white.png&#39;) bottom center no-repeat transparent;
&nbsp;&nbsp;&nbsp;height: 100%;
&nbsp;&nbsp;&nbsp;display: inline-block;
&nbsp;&nbsp;&nbsp;background-size: 100%;
&nbsp;&nbsp;&nbsp;width: 12.5%;
&nbsp;&nbsp;&nbsp;height: 100%;
&nbsp;&nbsp;&nbsp;position: relative;
&nbsp;&nbsp;&nbsp;float: left;
&nbsp;&nbsp;&nbsp;margin: 0;
&nbsp;&nbsp;&nbsp;padding: 0;
&nbsp;&nbsp;&nbsp;display: block;
&nbsp;&nbsp;&nbsp;margin: 0;
}

.white_btn.pressed 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;background-image: url(&#39;../white_pressed.png&#39;);
}

.black_btn 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;float: left;
&nbsp;&nbsp;&nbsp;background: url(&#39;../black.png&#39;)  bottom center no-repeat transparent;
&nbsp;&nbsp;&nbsp;width: 7.6%;
&nbsp;&nbsp;&nbsp;height: 73.8%;
&nbsp;&nbsp;&nbsp;background-size: 100%;
&nbsp;&nbsp;&nbsp;background-position: top center;
&nbsp;&nbsp;&nbsp;position: fixed;
&nbsp;&nbsp;&nbsp;top: 0px;
}

.black_btn.pressed 
{
&nbsp;&nbsp;&nbsp;background-image: url(&#39;../black_pressed.png&#39;);
}

</pre> </li>
</ol>   

  <h2 id="initialize" name="initialize">Initializing the Application</h2>
  <ol class="tutorstep"> 
   <li>main.js Source File
    <ol type="a">
     <li>
      <p>The <span style="font-family: Courier New,Courier,monospace;">piano</span> variable is declared to create the <span style="font-family: Courier New,Courier,monospace;">Piano</span> object. A keyword is determined for optimizing browser performance and validating JavaScript. Elements are defined for storing the piano key element object IDs and corresponding <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">audio</a> elements.</p>
      <pre class="prettyprint">
var piano;

function Piano() 
{
&nbsp;&nbsp;&nbsp;&quot;use strict&quot;; 
}

function() 
{
&nbsp;&nbsp;&nbsp;&quot;use strict&quot;;
&nbsp;&nbsp;&nbsp;Piano.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchPianoKey: [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lockIds: {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio: [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whiteCache: null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blackCache: null
&nbsp;&nbsp;&nbsp;}
};
      </pre>
     </li>
     <li>
      <p>The <span style="font-family: Courier New,Courier,monospace;">audioInit()</span> method is used to create and initialize the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">audio</a> element for each keyboard button. The element contains an event listener to detect button events.</p>
      <pre class="prettyprint">
Piano.prototype.audioInit = function audioInit() 
{
&nbsp;&nbsp;&nbsp;var i, self = this;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt;= 13; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i] = document.createElement(&#39;audio&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i].name = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i].src = this.audio[i].name + &quot;.wav&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i].addEventListener(&quot;playing&quot;, function()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.lockIds[&quot;play&quot; + this.name] = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
};
      </pre>
     </li>
    </ol>
   </li>
  </ol>

  <h2 id="handle" name="handle">Handling the Keys</h2> 
  <p>The event handling functionality is implemented in the <span style="font-family: Courier New,Courier,monospace;">main.js</span> file.</p>   
  <ol class="tutorstep"> 
   <li>Creating Event Listeners
   <ol type="a"><li>
<p>The <span style="font-family: Courier New,Courier,monospace;">onPianoKeyTouchDown()</span> event listener is created to detect the touch event, when the user presses a piano key.</p>

<pre class="prettyprint">
Piano.prototype.onPianoKeyTouchDown = function onPianoKeyTouchDown(data) 
{
&nbsp;&nbsp;&nbsp;data.originalEvent.preventDefault();
&nbsp;&nbsp;&nbsp;var element, touch, i, len;
&nbsp;&nbsp;&nbsp;for (i = 0, len = data.originalEvent.changedTouches.length; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touch = data.originalEvent.changedTouches[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = document.elementFromPoint(touch.clientX, touch.clientY);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (element) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.touchPianoKey[touch.identifier] !== element.id) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#&#39; + this.touchPianoKey[touch.identifier]).removeClass(&#39;pressed&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.playAudioByElement(element, touch.identifier, function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.lockIds[element.id] = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
};
</pre> </li>
   <li>
<p>The <span style="font-family: Courier New,Courier,monospace;">onPianoKeyTouchUp()</span> event listener is created to detect the touch event, when the user releases a piano key.</p>

<pre class="prettyprint">
Piano.prototype.onPianoKeyTouchUp = function onPianoKeyTouchUp(data) 
{
&nbsp;&nbsp;&nbsp;var i, touchId, len, buttonId;
&nbsp;&nbsp;&nbsp;for (i = 0, len = data.originalEvent.changedTouches.length; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Get the number assigned to the finger touching the screen */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchId = data.originalEvent.changedTouches[i].identifier;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonId = this.touchPianoKey[touchId];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(function(id) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#&#39; + id).removeClass(&#39;pressed&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(buttonId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.touchPianoKey[touchId] = undefined;
&nbsp;&nbsp;&nbsp;}
};
</pre> </li>
</ol>
</li>
   <li>Binding Events
<p>The <span style="font-family: Courier New,Courier,monospace;">bindEvents()</span> method is used to register event handlers to the corresponding events.</p>

<pre class="prettyprint">
Piano.prototype.bindEvents = function bindEvents() 
{
&nbsp;&nbsp;&nbsp;var self = this;

&nbsp;&nbsp;&nbsp;$(&quot;.button&quot;).bind(&#39;touchstart touchmove&#39;, function(e) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.onPianoKeyTouchDown(e); 
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;$(&quot;.button&quot;).bind(&#39;touchend&#39;, function(e) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.onPianoKeyTouchUp(e); 
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;$(&#39;#back&#39;).bind(&#39;touchstart&#39;, function(event) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.stopPropagation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Apply CSS style dynamically */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(this).addClass(&#39;active&#39;); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;$(&#39;#back&#39;).bind(&#39;touchend&#39;, function(event) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Cancel the applied CSS style */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(this).removeClass(&#39;active&#39;);	 
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;webkitvisibilitychange&#39;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (document.webkitVisibilityState === &#39;visible&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.audioInit()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;})
};
</pre> </li>
</ol> 
  
  
  <h2 id="play" name="play">Playing Sounds</h2> 
  
  <p>This section builds upon the elements described in <a href="video_audio_tutorial_w.htm#play">Playing Media Files</a>.</p> 
  <ol class="tutorstep"> 
   <li>main.js Source File
<p>The <span style="font-family: Courier New,Courier,monospace;">playAudioByElement()</span> method is used to play the sound determined in the <span style="font-family: Courier New,Courier,monospace;">audio</span> element, when a given key button is pressed.</p>

<pre class="prettyprint">
Piano.prototype.playAudioByElement = function playAudioByElement(element, touchId, callback) 
{
&nbsp;&nbsp;&nbsp;var audio = this.audio[element.id.substr(4)];
&nbsp;&nbsp;&nbsp;$(element).addClass(&#39;pressed&#39;);
&nbsp;&nbsp;&nbsp;this.touchPianoKey[touchId] = element.id;
&nbsp;&nbsp;&nbsp;if (audio) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (audio.paused) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio.play();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (audio.currentTime !== 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio.currentTime = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (callback instanceof Function) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback.call(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
};
</pre> </li>
</ol>  

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>