<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

    <title>HTML5 video and audio element: Playing and Managing Multimedia Content</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#create">Creating an Audio and Video Player</a>
			</li>
			<li>Playback management
				<ul class="toc">
					<li><a class="opensection" href="#play">Playing Media Files</a>
					</li>
					<li><a class="opensection" href="#retrieve">Retrieving Media Information</a>
					</li>
					<li><a class="opensection" href="#move">Moving the Timeline Position</a>
					</li>
					<li><a class="opensection" href="#display">Displaying the Progress State</a>
					</li>
				</ul>
			</li>
			<li><a class="opensection" href="#resize">Resizing the Video Screen</a>
			</li>
			<li><a class="opensection" href="#check">Checking Supported Media Formats</a>
			</li>
			<li><a class="opensection" href="#handle">Handling Errors</a>
			</li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.guides/html/web/w3c/media/video_audio_w.htm">HTML5 video and audio element Guide</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">HTML5 audio element API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#video">HTML5 video element API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#audio">HTML5 audio element API for Wearable Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#video">HTML5 video element API for Wearable Web</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>HTML5 video and audio element: Playing and Managing Multimedia Content</h1>
  <div class="cont"><div class="static-cont">	

 <p>This tutorial demonstrates how you can use HTML5 <span style="font-family: Courier New,Courier,monospace">audio</span> and <span style="font-family: Courier New,Courier,monospace">video</span> elements with JavaScript in Tizen.</p>
<h2>Warm-up</h2>
<p>Become familiar with the HTML5 video and audio element API basics by learning about:</p>
<ul>
<li><a class="opensection" href="#create">Creating an Audio and Video Player</a>
<p>Create a simple player using the <span style="font-family: Courier New,Courier,monospace">audio</span> and <span style="font-family: Courier New,Courier,monospace">video</span> elements&#39; attributes.</p></li>
<li>Playback management
  <ul>
	<li><a class="opensection" href="#play">Playing Media Files</a>
	<p>Provide custom control for play and pause events.</p></li>

	<li><a class="opensection" href="#retrieve">Retrieving Media Information</a>
	<p>Retrieve duration and playing time.</p></li>

	<li><a class="opensection" href="#move">Moving the Timeline Position</a>
	<p>Change the play position forward or backward in the timeline.</p></li>

	<li><a class="opensection" href="#display">Displaying the Progress State</a>
	<p>Display the download progress state of a media file.</p></li>
  </ul>
</li>

<li><a class="opensection" href="#resize">Resizing the Video Screen</a>
<p>Resize the video screen. This usage can only be applied to the <span style="font-family: Courier New,Courier,monospace">video</span> element.</p></li>

<li><a class="opensection" href="#check">Checking Supported Media Formats</a>
<p>Check whether the media data has an acceptable MIME type, and if not, handle the exceptions.</p></li>

<li><a class="opensection" href="#handle">Handling Errors</a>
<p>Handle errors that can occur during playback.</p></li>
</ul>

<h2>Task in Mobile Applications</h2>
<p>In the <a href="task_piano_w.htm">Piano</a> task, we will walk through creating a piano in your application and playing sounds.</p>


	<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>
	
<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
 <h2 id="create" name="create" class="items-tit-h2">Creating an Audio and Video Player</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  
<p>To provide users with HTML5 audio and video features, you must learn to create a simple player for streaming playback:
</p>
<ol>
<li>
<p>To create an audio player, create an <span style="font-family: Courier New,Courier,monospace">audio</span> element including the necessary attributes:</p>
<pre class="prettyprint">
&lt;audio id=&quot;audio&quot; src=&quot;media/audio_sample.mp3&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preload=&quot;auto&quot; controls muted loop autoplay&gt;
&lt;/audio&gt;
</pre>
<p style="text-align:center;"><img alt="Audio player" src="../../../images/video_audio3.png" /></p>
</li>
<li>
<p>To create a video player, create a <span style="font-family: Courier New,Courier,monospace">video</span> element including the necessary attributes. In addition to the attributes available for the <span style="font-family: Courier New,Courier,monospace">audio</span> element, you can also use the <span style="font-family: Courier New,Courier,monospace">width</span>, <span style="font-family: Courier New,Courier,monospace">height</span>, and <span style="font-family: Courier New,Courier,monospace">poster</span> attributes.</p>
<pre class="prettyprint">
&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width=&quot;400&quot; height=&quot;220&quot; poster=&quot;media/poster_sample.png&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preload=&quot;auto&quot; controls muted loop&gt;
&lt;/video&gt;
</pre>
<p>A player with a play control (built-in control provided in the 
browser) is created. The control is visible only when the <span style="font-family: Courier New,Courier,monospace">controls</span> attribute is added. If the <span style="font-family: Courier New,Courier,monospace">poster</span> attribute is not defined, the video&#39;s first frame is shown on the screen before the playback. The following figure shows the video player before and during playback.
</p>
<p style="text-align:center;"><img alt="Video player before playback" src="../../../images/video_audio1.png" /> <img alt="Video player during playback" src="../../../images/video_audio2.png" /></p>
</li>
</ol>	


<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The <span style="font-family: Courier New,Courier,monospace">preload</span> attribute is set to <span style="font-family: Courier New,Courier,monospace">auto</span> by default, meaning that the media metadata is automatically loaded. If you do not want to load the metadata, set the attribute value as <span style="font-family: Courier New,Courier,monospace">metadata</span> or <span style="font-family: Courier New,Courier,monospace">none</span>.</td> 
      </tr> 
     </tbody> 
    </table>
	
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">Carefully consider before using the <a href="http://www.w3.org/TR/2011/WD-html5-20110525/the-iframe-element.html#attr-media-autoplay" target="_blank">autoplay</a> feature, which plays content automatically in the mobile environment without user interaction. The user can face unintended Internet packet fees or interfering factors, such as playback being stopped unintentionally.</td> 
      </tr> 
     </tbody> 
    </table>
	<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">mini_code_audio.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">mini_code_video.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">audio_sample.mp3</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">poster_sample.png</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="play" name="play" class="items-tit-h2">Playing Media Files</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  

<p>To provide users with HTML5 audio and video features, you must learn to play and pause media files using custom controls:</p>

<ol>
<li>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and buttons used to control the play and pause:
<pre class="prettyprint lang-html">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot;&gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;v-play&quot; type=&quot;button&quot;&gt;play&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;v-pause&quot; type=&quot;button&quot; disabled&gt;pause&lt;/button&gt;        
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
<p>The <strong>Pause</strong> button is disabled until the play event occurs.</p>
</li>
<li>Define the button functions. Play and pause the media file using the <span style="font-family: Courier New,Courier,monospace">play()</span> and <span style="font-family: Courier New,Courier,monospace">pause()</span> methods of the <a href="http://www.w3.org/TR/2011/WD-html5-20110525/the-iframe-element.html#media-element" target="_blank">HTMLMediaElement</a> interface.

<pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var play_button = document.getElementById(&quot;v-play&quot;);
&nbsp;&nbsp;&nbsp;var pause_button = document.getElementById(&quot;v-pause&quot;);
    
&nbsp;&nbsp;&nbsp;play_button.addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.play();  /* Play movie */
&nbsp;&nbsp;&nbsp;}, false);
    
&nbsp;&nbsp;&nbsp;pause_button.addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.pause(); /* Pause movie */
&nbsp;&nbsp;&nbsp;}, false);
</pre>
</li>

<li>
 <p>Apply event listeners to detect button events an react to them:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;);
    
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;play&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play_button.disabled = true;    /* Play button disabled */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pause_button.disabled = false;  /* Pause button enabled */
&nbsp;&nbsp;&nbsp;}, false); 
     
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;pause&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play_button.disabled = false;   /* Play button enabled */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pause_button.disabled = true;   /* Pause button disabled */
&nbsp;&nbsp;&nbsp;}, false);   
    
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;ended&quot;, function() 
&nbsp;&nbsp;&nbsp;{   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;play_button.disabled = false;   /* Play button enabled */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pause_button.disabled = true;  /* Pause button disabled */
&nbsp;&nbsp;&nbsp;}, false);
&lt;/script&gt;
</pre>

<p class="figure">Figure: Playing files (in mobile applications only)</p> 
<p style="text-align:center;"><img alt="Playing files (in mobile applications only)" src="../../../images/video_audio4.png" /></p> 
</li>
</ol>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">play_pause.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="retrieve" name="retrieve" class="items-tit-h2">Retrieving Media Information</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  

<p>To provide users with HTML5 audio and video features, you must learn to retrieve the total duration and playing time of a media file:</p>
<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The media file metadata can only be retrieved, if it is loaded in the application. The <span style="font-family: Courier New,Courier,monospace">preload</span> attribute is must be set to <span style="font-family: Courier New,Courier,monospace">auto</span>, or the <span style="font-family: Courier New,Courier,monospace">autoplay</span> attribute be set as <span style="font-family: Courier New,Courier,monospace">true</span>.</td> 
      </tr> 
     </tbody> 
    </table>
<ol>
<li><p>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and the elements to display the total duration and playing time of the file:</p>
<pre class="prettyprint">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;h1&gt;Play Time Example&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot; controls preload=&quot;auto&quot;&gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;log&quot;&gt;Current Play Time: &lt;span id=&quot;currentTime&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;log&quot;&gt;Total Play Time: &lt;span id=&quot;totalTime&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;</pre>
</li>
<li>
<p>Apply the <span style="font-family: Courier New,Courier,monospace">loadedmetadata</span> <a href="http://www.w3.org/wiki/HTML/Elements/video#Media_Events" target="_blank">media event</a> to the <span style="font-family: Courier New,Courier,monospace">video</span> object to get the total duration of the file:</p>

<pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;);
&nbsp;&nbsp;&nbsp;var currentTime = document.getElementById(&quot;currentTime&quot;);
&nbsp;&nbsp;&nbsp;var totalTime = document.getElementById(&quot;totalTime&quot;);
    
&nbsp;&nbsp;&nbsp;/* Indicate the total duration */
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;loadedmetadata&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Total video duration */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var totalSec = video.duration;         

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Import method to change seconds to time (HH:MM:SS) format */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var time = secondsToTime(totalSec);   
    	   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Display the calculated time on screen */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalTime.innerHTML = parseInt(totalSec) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ &quot;sec (&quot; + time.h + &quot;:&quot; + time.m + &quot;:&quot; + time.s + &quot;)&quot;;
&nbsp;&nbsp;&nbsp;}, false);
</pre>
</li>
<li>
<p>Apply the <span style="font-family: Courier New,Courier,monospace">timeupdate</span> media event to the <span style="font-family: Courier New,Courier,monospace">video</span> object to get the playing time:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;/* Indicate play time status */
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;timeupdate&quot;, function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Current play time */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var currSec = video.currentTime;           
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var c_time = secondsToTime(currSec
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Display the current play time */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentTime.innerHTML = parseInt(currSec) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ &quot;sec (&quot; + c_time.h + &quot;:&quot; + c_time.m + &quot;:&quot; + c_time.s + &quot;)&quot;;
&nbsp;&nbsp;&nbsp;}, false); 
&lt;/script&gt;
</pre>
</li>
<li><p>To manage the data more efficiently, convert the time units to JSON parser objects:</p>

<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;/* Change seconds to time (HH:MM:SS) format */ 
&nbsp;&nbsp;&nbsp;function secondsToTime(secs) 
&nbsp;&nbsp;&nbsp;{ 	    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var hours = Math.floor(secs / (60 * 60));
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var divisor_for_minutes = secs % (60 * 60);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var minutes = Math.floor(divisor_for_minutes / 60);
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var divisor_for_seconds = divisor_for_minutes % 60;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var seconds = Math.ceil(divisor_for_seconds);
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Set as JSON object */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var obj = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;h&quot;: intToString(hours), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;m&quot;: intToString(minutes), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;s&quot;: intToString(seconds) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return obj;
&nbsp;&nbsp;&nbsp;}
        
&nbsp;&nbsp;&nbsp;/* Ensure that each time is set in 2 characters according to the time format */
&nbsp;&nbsp;&nbsp;function intToString(time) 
&nbsp;&nbsp;&nbsp;{    	    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (parseInt(time) &lt; 10 ? (&quot;0&quot; + time) : time);    	
&nbsp;&nbsp;&nbsp;}
&lt;/script&gt;
</pre>
<p class="figure">Figure: Displaying the duration and play time (in mobile applications only)</p> 
<p style="text-align:center;"><img alt="Displaying the duration and play time (in mobile applications only)" src="../../../images/video_audio5.png" /></p> 
</li>
</ol>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">play_time_view.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="move" name="move" class="items-tit-h2">Moving the Timeline Position</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  

<p>To provide users with HTML5 audio and video features, you must learn to move the play position on the timeline:</p>

<ol>
<li>
<p>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and buttons used to control the timeline:</p>

<pre class="prettyprint">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot; controls&gt;&lt;/video&gt;    
&nbsp;&nbsp;&nbsp;&lt;div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;v-back&quot;&gt;5 Sec Backward&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;v-forw&quot;&gt;5 Sec Forward&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div&gt;&lt;button id=&quot;v-goto&quot;&gt;Go to 40 Sec&lt;/button&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li><p>Add event listeners to change the <span style="font-family: Courier New,Courier,monospace">currentTime</span> value when a <span style="font-family: Courier New,Courier,monospace">click</span> event occurs in the button elements:</p>

<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;); /* Video object */
&nbsp;&nbsp;&nbsp;var back_button = document.getElementById(&quot;v-back&quot;); /* Back button */
&nbsp;&nbsp;&nbsp;var forw_button = document.getElementById(&quot;v-forw&quot;); /* Forward button */
&nbsp;&nbsp;&nbsp;var go_button = document.getElementById(&quot;v-goto&quot;); /* Jump button */
                
&nbsp;&nbsp;&nbsp;/* Move 5 seconds back */ 
&nbsp;&nbsp;&nbsp;back_button.addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{            	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.currentTime -= 5    	
&nbsp;&nbsp;&nbsp;}, false);
    
&nbsp;&nbsp;&nbsp;/* Move 5 seconds forward */ 
&nbsp;&nbsp;&nbsp;forw_button.addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{    	    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.currentTime += 5    	
&nbsp;&nbsp;&nbsp;}, false);
    
&nbsp;&nbsp;&nbsp;/* Move timeline to 40 seconds */ 
&nbsp;&nbsp;&nbsp;go_button.addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.currentTime = 40
&nbsp;&nbsp;&nbsp;}, false);
&lt;/script&gt;
</pre>
<p>If the metadata of the media file is loaded, you can move to the assigned timeline position even when the media file is not playing. For more information, see <a href="#retrieve">Retrieving Media Information.</a></p>

<p class="figure">Figure: Moving the timeline position (in mobile applications only)</p> 
<p style="text-align:center;"><img alt="Moving the timeline position (in mobile applications only)" src="../../../images/video_audio6.png" /></p> 
</li>
</ol>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">time_jumping.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="display" name="display" class="items-tit-h2">Displaying the Progress State</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  
 <p>To provide users with HTML5 audio and video features, you must learn to check the download progress status of media content:</p>

<ol>
<li><p>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and the elements to display the download progress status of the media file:</p>

<pre class="prettyprint">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot; controls poster=&quot;media/poster_sample.png&quot;&gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div&gt;Progress: &lt;span id=&quot;state&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt; 
</pre>
<p>While the download is in progress, the <span style="font-family: Courier New,Courier,monospace">poster1.png</span> image is shown.</p>
</li>

<li>The <span style="font-family: Courier New,Courier,monospace">buffered</span> attribute of the <span style="font-family: Courier New,Courier,monospace">video</span> object returns a <a href="http://www.w3.org/TR/html5/embedded-content-0.html#timeranges" target="_blank">TimeRanges</a> object that represents the downloaded buffering range. Use the <span style="font-family: Courier New,Courier,monospace">end</span> property of the <span style="font-family: Courier New,Courier,monospace">TimeRanges</span> object to find out the end time (in seconds) of the buffered range:  

<pre class="prettyprint lang-js">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;)
    
&nbsp;&nbsp;&nbsp;/* Progress event */
&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;progress&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Returns a TimeRanges object */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var buffered = video.buffered;
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Returns time in seconds */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var buffered_end = buffered.end();
</pre>
</li>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">progress</span> <a href="http://www.w3.org/wiki/HTML/Elements/video#Media_Events" target="_blank">media event</a> to convert the end time to percent form, and display the progress state:</p>
<pre class="prettyprint lang-js">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Change to progress rate percent */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var progress = (buffered_end / video.duration) * 100;
    	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Display the progress state */ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;state&quot;).innerHTML = parseInt(progress) + &quot;%&quot;  
&nbsp;&nbsp;&nbsp;}, false); 
&lt;/script&gt;
</pre>
 <p class="figure">Figure: Displaying the progress state (in mobile applications only)</p>
<p style="text-align:center;"><img alt="Displaying progress state (in mobile applications only)" src="../../../images/video_audio7.png" /></p> 
</li>
</ol>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
 	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">progress.html</a></li>
 	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">poster_sample.png</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="resize" name="resize" class="items-tit-h2">Resizing the Video Screen</h2>
  <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 
 <p>To provide users with HTML5 audio and video features, you must learn to resize the video screen:</p>
 
 <table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">If the screen size is reduced, the basic <span style="font-family: Courier New,Courier,monospace">play</span> control can be wrongly positioned. Therefore, do not use the <span style="font-family: Courier New,Courier,monospace">controls</span> attribute when providing the resizing custom control.</td> 
      </tr> 
     </tbody> 
    </table>

 <ol>
 <li><p>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and buttons used to control the screen size:</p>
 
 <pre class="prettyprint">&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot; controls&gt;&lt;/video&gt;
&lt;div&gt;
&nbsp;&nbsp;&nbsp;&lt;button id=&quot;size_big&quot;&gt;600 * 410&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;button id=&quot;size_middle&quot;&gt;320 * 220&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;button id=&quot;size_small&quot;&gt;150 * 150&lt;/button&gt;
&lt;/div&gt;
</pre>
 </li>
 
 <li><p>Add event listeners to change the <span style="font-family: Courier New,Courier,monospace">width</span> and <span style="font-family: Courier New,Courier,monospace">height</span> values when a <span style="font-family: Courier New,Courier,monospace">click</span> event occurs in the button elements:</p>
 
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;)
    
&nbsp;&nbsp;&nbsp;/* Resize to big size */
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;size_big&quot;).addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.width = 600;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.height = 410;
&nbsp;&nbsp;&nbsp;}, false);
    
&nbsp;&nbsp;&nbsp;/* Resize to middle size */
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;size_middle&quot;).addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.width = 320;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.height = 220;
&nbsp;&nbsp;&nbsp;}, false);
    
&nbsp;&nbsp;&nbsp;/* Resize to small size */
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;size_small&quot;).addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.width = 150;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.height = 150;
&nbsp;&nbsp;&nbsp;}, false);
&lt;/script&gt;</pre>
 <p class="figure">Figure: Resizing the video screen (in mobile applications only)</p> 
<p style="text-align:center;"><img alt="Resizing the video screen (in mobile applications only)" src="../../../images/video_audio8.png" /></p> 
 </li>
 
 </ol>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">resize.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="check" name="check" class="items-tit-h2">Checking Supported Media Formats</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">  
 <p>To provide users with HTML5 audio and video features, you must learn to check whether the media data of the assigned MIME type can be played:</p>

<ol>
<li><p>Create the <span style="font-family: Courier New,Courier,monospace">video</span> element and determine the media files you want to check:</p>
<pre class="prettyprint">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video1&quot; src=&quot;media/video_sample_001.ogv&quot; controls &gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;log&quot;&gt;video/ogg can play type: &lt;span id=&quot;vlog1&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video2&quot; src=&quot;media/video_sample_002.webm&quot; controls &gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;log&quot;&gt;audio/acc can play type: &lt;span id=&quot;vlog2&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li><p>Use the <a href="http://www.w3.org/TR/2011/WD-html5-20110525/the-iframe-element.html#dom-navigator-canplaytype" target="_blank">canPlayType()</a> method to check, whether the selected media files have an acceptable MIME type, and can be played:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video1 = document.getElementById(&quot;video1&quot;);
&nbsp;&nbsp;&nbsp;var video2 = document.getElementById(&quot;video2&quot;);
&nbsp;&nbsp;&nbsp;var videoElem03 = document.getElementById(&quot;video3&quot;);
    
&nbsp;&nbsp;&nbsp;/* Check the ogg format */
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;vlog1&quot;).innerHTML = video1.canPlayType(&#39;video/ogg&#39;);
    
&nbsp;&nbsp;&nbsp;/* Check the webm format */
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;vlog2&quot;).innerHTML = video2.canPlayType(&#39;audio/acc&#39;);     
&lt;/script&gt;
</pre>
</li>
</ol>
<p>For more information about the media formats supported in Tizen, see the <a href="../../../../../org.tizen.guides/html/web/w3c/media/video_audio_w.htm">HTML5 video and audio element</a> guide.</p>
<h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">can_play_type.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample_001.ogv</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample_002.webm</a></li>
 </ul>
   			</div>
		</li>
		<li>
			<div class="devicespec-tit">
  <h2 id="handle" name="handle" class="items-tit-h2">Handling Errors</h2>
 <span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con">   
<p>To provide users with HTML5 audio and video features, you must learn to handle errors that can occur during playback:</p>

<ol>
<li><p>Create the video and button elements, which can induce errors:</p>
<pre class="prettyprint">
&lt;div class=&quot;media&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;video id=&quot;video&quot; src=&quot;media/video_sample.mp4&quot; controls &gt;&lt;/video&gt;
&nbsp;&nbsp;&nbsp;&lt;div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;btn01&quot;&gt;src Null&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li><p>Add an event listener to detect errors and trigger error messages:</p>
<pre class="prettyprint">
&lt;script&gt;
&nbsp;&nbsp;&nbsp;var video = document.getElementById(&quot;video&quot;)

&nbsp;&nbsp;&nbsp;/* Button event: induce error */ 
&nbsp;&nbsp;&nbsp;document.getElementById(&quot;btn01&quot;).addEventListener(&quot;click&quot;, function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video.src = &quot;&quot;; /* Set value as null value */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, false);

&nbsp;&nbsp;&nbsp;video.addEventListener(&quot;error&quot;, function() 
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Video playback failed: show a message saying why */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (video.error.code) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;MEDIA_ERR_ABORTED = 1 Media data download is stopped by the user&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;MEDIA_ERR_NETWORK = 2 Download is stopped due to network error &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 3:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;MEDIA_ERR_DECODE = 3 Media data decoding failure &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 4:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;MEDIA_ERR_SRC_NOT_SUPPORTED = 4 Format not supported&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}, false);
&lt;/script&gt;
</pre>
</li>
</ol>

 <h3>Source Code</h3>
	<p>For the complete source code related to this use case, see the following files:</p>
 <ul class="ul">
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element" target="_blank">error.html</a></li>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/media/html5_the_video_element_and_html5_the_audio_element/media" target="_blank">video_sample.mp4</a></li>
 </ul>
        	</div>
		</li>					
	</ul>	
</div>				
</div>
           
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
