<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<meta http-equiv="X-UA-Compatible" content="IE=9" />
<link rel="stylesheet" type="text/css" href="../css/styles.css" />
<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
<script type="text/javascript" src="../scripts/snippet.js"></script>
<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

<title>REST Viewer</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">
    <div id="toc-navigation">
        <div id="profile">
            <p><img alt="Mobile Web" src="../images/mobile_s_w.png" /> <img alt="Wearable Web" src="../images/wearable_s_w.png" /></p>
        </div>
        <div id="toc_border">
            <div id="toc">
                <p class="toc-title">Content</p>
                <ul class="toc">
                    <li><a href="#visualize">Displaying the WADL Document</a></li>
                    <li><a href="#management">Managing WADL Components</a></li>
                    <li><a href="#authentication">Authenticating the Application</a></li>
                    <li><a href="#test">Testing the APIs</a></li>
                    <li><a href="#auto">Auto-generating Code</a></li>
                </ul>
            </div>
        </div>
    </div>
<div id="container"><div id="contents"><div class="content">
<h1>REST Viewer</h1>

<p>When creating Web applications with REST APIs, the REST Viewer provides the following feature to ease the development process:</p>
<ul>
	<li><a href="#visualize">Displaying the WADL document</a>
	<p>You can display the WADL components with a structure.</p>
	</li>
	<li><a href="#management">Managing WADL components</a>
	<p>You can create, delete, and modify WADL components.</p>
	</li>
	<li><a href="#authentication">Authenticating the application</a>
	<p>You can set the API key and OAuth 2.0.</p>
	</li>
	<li><a href="#test">Testing the APIs</a>
	<p>You can test the APIs and check the result.</p>
	</li>
	<li><a href="#auto">Auto-generating code</a>
	<p>You can use code snippets to send asynchronous requests.</p>
	</li>
</ul>

<h2 id="visualize" name="visualize">Displaying the WADL Document</h2>
<p>The REST Viewer displays the <a href="http://www.w3.org/Submission/wadl/" target="_blank">WADL (Web Application Description Language)</a> documents.</p>
<p>The viewer loads the documents from a specific location and classifies them as 4-typed WADL components. You can define the document location in the IDE menu by going to <strong>Preferences &gt; Tizen SDK &gt; REST Viewer</strong>, or by clicking the <img alt="Preferences icon" src="../images/rest_viewer_preferences.png" /> icon on the <strong>REST Viewer</strong> view toolbar.</p>

<p class="figure">Figure: REST Viewer</p>
<p align="center"><img alt="REST Viewer" src="../images/rest_viewer_main.png" /></p>

<h2 id="management" name="management">Managing WADL Components</h2>
<p>The WADL document can contain 4 types of WADL components:</p>
<ul>
	<li><img alt="Service icon" src="../images/rest_viewer_service.png" /> Service (Application): The application element forms the root of a WADL description.</li>
	<li><img alt="Resources icon" src="../images/rest_viewer_resources.png" /> Base URI (Resources): The resources element acts as a container for the resources provided by the application.</li>
	<li><img alt="Resource icon" src="../images/rest_viewer_resource.png" /> Path (Resource): The resource element describes a set of resources, each identified by a URI that follows a common pattern.</li>
	<li><img alt="Method icon" src="../images/rest_viewer_method.png" /> API (Method): The method element describes the input to and output from an HTTP protocol method that can be applied to a resource.</li>
</ul>

<p>With the REST Viewer, you can make new WADL components, and import and export WADL files. You can handle a selected WADL component only if you open a dialog to modify it. You cannot modify the selected component&#39;s parent or child components at the same time.</p>

<table class="note">
	<tbody>
		<tr>
			<th class="note">Note</th>
		</tr>
		<tr>
			<td class="note">Some attributes are required to make a structure for the tree viewer even if they are optional in the WADL schema.</td>
		</tr>
	</tbody>
</table>

<p>To manage the WADL components, in the <strong>REST Viewer</strong> view toolbar, click:</p>

<ul>
	<li><img alt="New" src="../images/rest_viewer_new.png" /> to add new WADL components.</li>

	<li><img alt="Import" src="../images/rest_viewer_import_wadl.png" /> to import a WADL file and show the WADL models from a local WADL file or URL.</li>

	<li><img alt="Export" src="../images/rest_viewer_export_wadl.png" /> to export the selected WADL models as a <span style="font-family: Courier New,Courier,monospace">.wadl</span> file.</li>
</ul>	
	
<p>When you add a new WADL component, you must define its place in the WADL structure (Service &gt; Base URI &gt; Path [&gt; Path] &gt; API) in the <strong>New Service WADL Model</strong> dialog.</p> 	
	
		<p class="figure">Figure: Adding a WADL component</p>
		<p align="center"><img alt="Adding a WADL component" src="../images/rest_viewer_dialog.png" /></p>

<ul>		
	<li>Service
		<p><strong>Title</strong> (required): Short plain text description of the element being documented.</p>
	</li>
	<li>Base URI
		<p><strong>Base URI</strong> (required): Base URI for each child resource identifier.</p>
		<p><strong>Alias</strong> (optional)</p>
	</li>
	<li>Path
		<p><strong>Path</strong> (required): Relative URI template for the resource identifier.</p>
		<p><strong>Content Type</strong> (default): Media type for the query component of the resource URI.</p>
	</li>
	<li>API
		<p><strong>Id</strong> (required): Method identifier.</p>
		<p><strong>Method</strong> (default): Used HTTP method.</p>
		<p><strong>Description</strong> (optional)</p>
	</li>
	<li>Parameters
	<p>Describe the input to the method as a collection of parameters.</p>
		<ul>
			<li><strong>Parent</strong></li>
			<li><strong>Name</strong>: Parameter name.</li>
			<li><strong>Value</strong></li>
			<li><strong>Style</strong>: Parameter style:
				<ul>
					<li><strong>Header</strong>: Specifies a HTTP header for use in the	request.</li>
					<li><strong>Query</strong>: Specifies a URI query parameter for the method.</li>
					<li><strong>File</strong></li>
				</ul>
			</li>
			<li><strong>Type</strong>: Parameter type as an XML-qualified name.</li>
			<li><strong>Required</strong>: Whether the parameter is required to be
				present.</li>
		</ul>
	</li>
</ul>

<h2 id="authentication" name="authentication">Authenticating the Application</h2>

<p>The REST Viewer helps when you test the application with authentication. Enable the authentication in the IDE menu by going to <strong>Preferences &gt; Tizen SDK &gt; REST Viewer &gt; Authentication</strong> and selecting <strong>Use authentication</strong>.</p>

<p>In the same location, you can define the authentication details:</p> 
<ul>
	<li>API Key authentication with a header or parameter.</li>
	<li>OAuth 2.0 authentication information for a RESTful API.</li>
</ul>
<p class="figure">Figure: Authentication details</p>
<p align="center"><img alt="Authentication details" src="../images/rest_viewer_authentication.png" /></p>


<h2 id="test" name="test">Testing the APIs</h2>

<p>You can test the selected API on the REST Viewer and view the results. To run a test, do one of the following:</p>
<ul>
	<li>Click the <img alt="Run icon" src="../images/rest_viewer_run.png" /> icon on the <strong>REST Viewer</strong> view toolbar. The view displays the running history.
	</li>
	<li>Right-click the selected API and run the test from the context menu.</li>
	<li>Click <strong>Save and Run</strong> in the <strong>New</strong> or <strong>Modify</strong> dialog when adding or modifying components.</li>
</ul>

<p>The API that works with variables needs specific values for the test. Each profile has its own user variables (key and value). You can manage the profiles and profile&#39;s user variables in the <strong>Preferences</strong> window. After the user variables are set, you can use them with a placeholder to test the API (for example, <span style="font-family: Courier New,Courier,monospace">${email}</span>).</p>
<p class="figure">Figure: User variables</p>
<p align="center"><img alt="User variables" src="../images/rest_viewer_user_variables.png" /></p>

<p>You can select an active profile in the <strong>REST Viewer</strong> user variable toolbar menu. When you test the APIs in the REST Viewer, user variables of the selected profile are used.</p>
<p class="figure">Figure: Selecting a profile</p>
<p align="center"><img alt="Selecting a profile" src="../images/rest_viewer_select_profile.png" /></p>
<p>The user variables of the active profile are shown when you set the values for an API.</p>
<p class="figure">Figure: Selecting a user variable</p>
<p align="center"><img alt="Selecting a user variable" src="../images/rest_viewer_select_user_variable.png" /></p>

<p>After setting the variables and running the test, the result is displayed in the <strong>Console</strong> view. You can save the response structure.</p>
<p class="figure">Figure: Test result</p>
<p align="center"><img alt="Test result" src="../images/rest_viewer_result.png" /></p>


<h2 id="auto" name="auto">Auto-generating Code</h2>
<p>You can use the REST Viewer to send asynchronous requests with the REST APIs. To generate code to do this, do one of the following:</p>
<ul>
	<li>Use the content assist feature.
	<p>You can activate the content assist with the prefix &quot;rest.&quot;.</p>
	</li>
	<li>Drag and drop.
		<ol>
			<li>Select the API model in the REST Viewer, and drag and drop it to the Web SDK HTML Editor.</li>
			<li>Select the functions at bottom of the dialog to get the code.</li>
		</ol>
	</li>
</ul>
<p class="figure">Figure: Selecting functions for the REST API</p>
<p align="center"><img alt="Selecting functions for the REST API" src="../images/rest_viewer_drag_drop.png" /></p>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
	<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br />For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push([ '_setAccount', 'UA-25976949-1' ]);
	_gaq.push([ '_trackPageview' ]);
	(function() {
		var ga = document.createElement('script');
		ga.type = 'text/javascript';
		ga.async = true;
		ga.src = ('https:' == document.location.protocol ? 'https://ssl'
				: 'http://www')
				+ '.google-analytics.com/ga.js';
		var s = document.getElementsByTagName('script')[0];
		s.parentNode.insertBefore(ga, s);
	})();
</script>

</body>
</html>
