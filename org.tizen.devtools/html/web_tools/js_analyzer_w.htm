<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/snippet.css" />
    <script type="text/javascript" src="../scripts/snippet.js"></script>
    <script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
    <title>JavaScript Analyzer</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../images/mw_icon.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#use">Using the JavaScript Analyzer</a></li>
            <li><a href="#support">Supporting Rules</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>JavaScript Analyzer</h1>

<p>The JavaScript Analyzer (JSA) is an analysis tool, which helps to find problems in JavaScript code. When you develop a mobile Web application with a new project in the IDE, you can run JSA to detect potential problems in your JavaScript code. JSA supports 16 rules, including coding rules and Web API usage rules.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This tool is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>To clean up JavaScript code by adding indentation and carriage returns, use the <a href="code_beautifier_w.htm">Code Beautifier</a>, and to remove unnecessary content from the JavaScript files, use the <a href="code_minifier_w.htm">Code Minifier</a>.</p>

<h2 id="use" name="use">Using the JavaScript Analyzer</h2>

<p>To analyze a mobile Web application with the JSA in the IDE, select the target project in the Project Explorer and right-click the project icon. Then, the menu is shown like in Figure 1. and select Run JS Code Analysis.</p>

<p class="figure">Figure: JavaScript Rule Checker</p>
<p style="text-align:center;"><img alt="JavaScript Rule Checker" src="../images/js_rule_checker.png" /></p>

<p>The JSA analyzes JavaScript codes in the selected mobile Web application project after selecting javaScript files and codes segment to analyze. This can be done by parsing the start html file (i.e., index.html, etc) specified in the config.xml.</p>

<p class="figure">Figure: JavaScript Rule Checker</p>
<p style="text-align:center;"><img alt="JavaScript Rule Checker" src="../images/js_automatic_analysis.png" /></p>

<p>If Javascript Analyzer detects the codes which can cause potential problems during its analysis step, the problems are listed up in the JavaScript Problems view. If you want to locate a possibly problematic code line, double-click  the alarm in the view.</p>

<p class="figure">Figure: JavaScript Problems view</p>
<p style="text-align:center;"><img alt="JavaScript Rule Checker" src="../images/js_problems_view.png" /></p>

<h2 id="support" name="support">Supporting Rules</h2>

<h3 id="coding" name="coding">Coding Rules</h3>

<p>The JSA provides coding rules to help in writing better JavaScript code. For more information about these rules, see JSLint and <a href="https://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml" target="_blank">Google Coding Style Guide</a>.</p>

<h4>Rule 1. Use <span style="font-family: Courier New,Courier,monospace">var</span> to declare variables</h4>

<p>If variables are declared without the <span style="font-family: Courier New,Courier,monospace">var</span> keyword, they are assigned to the global scope in the JavaScript language. This can be dangerous.</p>

<p>For example, if the functions that have a same name are defined as following example codes, the <span style="font-family: Courier New,Courier,monospace">foo</span> function is changed whenever the <span style="font-family: Courier New,Courier,monospace">func1</span> or <span style="font-family: Courier New,Courier,monospace">func2</span> function is called. The <span style="font-family: Courier New,Courier,monospace">foo</span> function can not be guaranteed.</p>

<p>This rule is supported by the JSLint and the Google Closure Linter. They say that  &quot;When you fail to specify <span style="font-family: Courier New,Courier,monospace">var</span>, the variable gets placed in the global context, potentially clobbering existing values. Also, if there is no declaration, it is hard to tell in what scope a variable lives.&quot;</p>

<pre class="prettyprint">function func1()
{
&nbsp;&nbsp;&nbsp;// The foo function is defined without the var keyword
&nbsp;&nbsp;&nbsp;foo = function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;func1&#39;);
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;// When the foo function is called, the foo function is not clear
&nbsp;&nbsp;&nbsp;foo();
}
function func2()
{
&nbsp;&nbsp;&nbsp;// The other foo function is defined without var keyword.
&nbsp;&nbsp;&nbsp;foo = function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&#39;func2&#39;);
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;// When the foo function is called, the foo function is not clear.
&nbsp;&nbsp;&nbsp;foo();
}</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Use var to declare the variable foo.</pre>

<h4>Rule 2. Do Not Declare an Arguments Array within Functions</h4>

<p>If the <span style="font-family: Courier New,Courier,monospace">arguments</span> array is declared with <span style="font-family: Courier New,Courier,monospace">var</span> in functions, this causes duplication with the reserved keyword <span style="font-family: Courier New,Courier,monospace">arguments</span> of JavaScript language in the functions. </p>

<p>In the following example, the statement <span style="font-family: Courier New,Courier,monospace">var arguments = [];</span> in the function overwrites the reserved keyword <span style="font-family: Courier New,Courier,monospace">arguments</span>. As a result, the reserved keyword <span style="font-family: Courier New,Courier,monospace">arguments</span> in functions lose the feature to access the arguments of the function.</p>

<pre class="prettyprint">function func() 
{
&nbsp;&nbsp;&nbsp;// &#39;arguments&#39; has been predefined as a reserved keyword
&nbsp;&nbsp;&nbsp;var arguments = [];
}</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not declare arguments Array as variables in functions. </pre>

<h4>Rule 3. Do Not Capture Variables in Functions</h4>

<p>If there are captured variables in functions, they can make a closure. The closure may cause potential defects.</p>

<p>In the following example, you always expect 1 to be returned from calling the <span style="font-family: Courier New,Courier,monospace">test</span> function. However, the returned value is not always 1 because the variable <span style="font-family: Courier New,Courier,monospace">x</span> in the function <span style="font-family: Courier New,Courier,monospace">outer</span> is captured.</p>

<p>This rule is introduced in the Google JavaScript Style Guide. They say that &quot;The ability to create closures is perhaps the most useful and often overlooked feature of JS.One thing to keep in mind, however, is that a closure keeps a pointer to its enclosing scope. As a result, attaching a closure to a DOM element can create a circular reference and thus, a memory leak.&quot;.</p>

<pre class="prettyprint">var outer = function()
{
&nbsp;&nbsp;&nbsp;// Warning case, be careful
&nbsp;&nbsp;&nbsp;var x = 0;

&nbsp;&nbsp;&nbsp;return function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Variable x of the outer function is captured in the inner function

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ++x;
&nbsp;&nbsp;&nbsp;}
}
var x = -1;

// The inner function of function outer is assigned to variable test outside function outer
var test = outer();

// Whenever the test is called, the result can be different from the expectation

// 1st return
test();

// 2nd return
test();

// 3rd return
test();</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not capture the variable x in a closure.</pre>

<h4>Rule 4. Do Not Use Extra Semicolons</h4>

<p>Extra semicolons make readability worse. In addition, it may cause wrong operation of the program. </p>

<p>This rule is described in the Google JavaScript Coding Style Guide. They say that &quot;Extra comma and semicolon can make error.&quot;.</p>

<pre class="prettyprint">function func()
{
&nbsp;&nbsp;&nbsp;for(var i = 0; i &lt; 10; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extra semicolon
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x++;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Extra semicolon after the &#39;for&#39; statement
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;return x;
// Extra semicolon after the function definition statement
};
var result = func();</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not use extra semicolons.</pre>

<h4>Rule 5. Do Not Use the Delete Keyword</h4>

<p>Deleting the property of the object needs time to operate removing the property. In addition, it changes the shape of object. The change of the object&#39;s shape may cause decrease of performance. </p>

<p>In the following example, the property <span style="font-family: Courier New,Courier,monospace">value</span> of the instance <span style="font-family: Courier New,Courier,monospace">obj</span> is deleted using the keyword <span style="font-family: Courier New,Courier,monospace">delete</span>. This leads the instance <span style="font-family: Courier New,Courier,monospace">obj</span> not to share the shape of the constructor <span style="font-family: Courier New,Courier,monospace">Obj</span> with other instances. For that reason, the performance can be slower.</p>

<p>This rule is introduced by the Google JavaScript Style Guide. They say that &quot;In modern JavaScript engines, changing the number of properties on an object is much slower than reassigning the values. The delete keyword should be avoided except when it is necessary to remove a property from an object&#39;s iterated list of keys, or to change the result of if (key in obj).&quot;</p>

<pre class="prettyprint">function Obj()
{
&nbsp;&nbsp;&nbsp;this.value = 10;
};
var obj = new Obj();

// Deleting properties of objects can make the performance of the program worse
delete obj.value;</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Use var to declare the variable value.</pre>

<h4>Rule 6. Do Not Use Multi-line Literals</h4>

<p>Using multi-line string literals can cause unexpected operation of the program because of the whitespace at the beginning of each line and after the backslash (\). </p>

<p>This rule is introduced by the Google JavaScript Style Guide. They say that &quot;The whitespace at the beginning of each line can&#39;t be safely stripped at compile time; whitespace after the slash will result in tricky errors; and while most script engines support this, it is not part of ECMAScript&quot;.</p>

<pre class="prettyprint">// Multi-line string literals can create a problem
var str = &#39;The Test String \
&nbsp;&nbsp;&nbsp;for Positive TC&#39;;</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not use multi-line string literals. </pre>

<h4>Rule 7. Do Not Use Array or Object Constructors</h4>

<p>Use array and object literals instead of their constructors to avoid confusing and unexpected results.</p>

<p>In the following example, the array <span style="font-family: Courier New,Courier,monospace">arr2</span> that has 3 values (1, 2, and 3) can be created using an array constructor. In the same way, if  the array <span style="font-family: Courier New,Courier,monospace">arr1</span> that has a  single value (1) is created using  an array constructor,  it is the array with the length 1, not arr[0] is 1.</p>

<p>This rule is introduced by the Google Javascript Style Guide. They say that &quot;Array constructors are error-prone due to their arguments&quot;.</p>

<pre class="prettyprint">var x = 1

// If the variable x is 1, the array arr1 is the array whose length is 1, not arr[0] is 1
var arr1 = new Array(x);

// The array arr2 is the array which has 3 values, 1, 2, and 3
var arr2 = new Array(1, 2, 3);</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not use constructors for an Array. </pre>

<h4>Rule 8. Do Not Modify the Prototypes of Built-in Objects</h4>

<p>Modifying built-ins, such as <span style="font-family: Courier New,Courier,monospace">Object.prototype</span> and <span style="font-family: Courier New,Courier,monospace">Array.prototype</span>, can lead to debugging issues in production and must be avoided. </p>

<p>For example, the methods in prototypes of built-in objects are shared by every instance of the built-in objects. If the method are modified, it affects every instances of the built-in objects.</p>

<p>This rule is introduced by the Google Javascript Style Guide. They say that &quot;Modifying builtins like Object.prototype and Array.prototype are strictly forbidden. It leads to hard to debug issues in production and should be avoided.&quot;</p>

<pre class="prettyprint">// Modifying the function in prototype of built-in object makes debugging difficult
Object.prototype.create = function()
{
&nbsp;&nbsp;&nbsp;alert(&#39;Warning!&#39;);
};</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not modify the prototype of a built-in object Object. </pre>

<h4>Rule 9. Do Not Convert Wrapper Objects to Primitives</h4>

<p>Avoid creating primitive typed values using the constructor of a wrapper objects</p>

<p>If a boolean variable is created by the constructor <span style="font-family: Courier New,Courier,monospace">Boolean</span>, its value is a wrapper object, not <span style="font-family: Courier New,Courier,monospace">true</span> or <span style="font-family: Courier New,Courier,monospace">false</span>. In the following example, the program always prints <span style="font-family: Courier New,Courier,monospace">true</span> because the variable <span style="font-family: Courier New,Courier,monospace">bool</span> is a object that has a value, <span style="font-family: Courier New,Courier,monospace">false</span>.</p>

<p>This rule is introduced by the Google Javascript Style Guide. They say that &quot;There&#39;s no reason to use wrapper objects for primitive types, plus they are dangerous&quot;. </p>

<pre class="prettyprint">// The variable bool is not false. It is an object with the value false
var bool = new Boolean(false);

// bool is always true
if(bool)
{
&nbsp;&nbsp;&nbsp;alert(&#39;true&#39;);
}
else
{
&nbsp;&nbsp;&nbsp;alert(&#39;false&#39;);
}</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not convert a wrapper object Boolean to a primitive value.</pre>

<h4>Rule 10. Do Not Use the <span style="font-family: Courier New,Courier,monospace">for-in</span> Structure with Arrays</h4>

<p>If the array is used in for-in statement, the operation can be different from the normal for statement. </p>

<p>In the following example, you expect to print <span style="font-family: Courier New,Courier,monospace">a</span>, <span style="font-family: Courier New,Courier,monospace">b</span>, and <span style="font-family: Courier New,Courier,monospace">c</span>, but the program prints <span style="font-family: Courier New,Courier,monospace">0</span>, <span style="font-family: Courier New,Courier,monospace">1</span>, and <span style="font-family: Courier New,Courier,monospace">2</span>.</p>

<p>This rule is introduced both by the JSLint and the Google Javascript Style Guide. They say that &quot;for-in loops are often incorrectly used to loop over the elements in an Array. This is however very error prone because it does not loop from 0 to length - 1 but over all the present keys in the object and its prototype chain.&quot;</p>

<pre class="prettyprint">var arr = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;];

// The variable key is not &#39;a&#39;, &#39;b&#39;, and &#39;c&#39;. It is 0, 1, and 2
for(var key in arr)
{
&nbsp;&nbsp;&nbsp;alert(key);
}</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Coding Rule] Do not use for-in with arrays. </pre>

<h3 id="api" name="api">Web API Usage Rules</h3>

<p>Tizen Web APIs extend JavaScript APIs to enable you using the device capabilities provided by Tizen devices. The Tizen Web APIs are designed to be simple and intuitive. The following rules notify you, when the APIs are used improperly.</p>

<h4>Rule 1. Accessing Undefined API</h4>

<p>Accessing  API which not provided by the Tizen API modules are notified as an WebAPIError and the analysis proceeded.</p>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">tizen.alarm.gett()</span> function does not exist in the Tizen API, so the JSA detects it and creates an alarm.</p>

<pre class="prettyprint">// Mistyping get as gett
var alarm = tizen.alarm.gett(abs_alarm.id);</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] Name gett is not found in the API AlarmManager.
[Web API Rule] Reading absent property &#39;gett&#39; of object &#39;tizen.alarm&#39;.</pre>

<h4>Rule 2. Wrong Argument Number</h4>

<p>Invoking a method with a wrong argument number is notified as an WebAPIError and the analysis proceeded.</p>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">tizen.filesystem.resolve()</span> function needs  more than 1 argument. Since the number of arguments is 1, the JSA detects it and creates an alarm.</p>

<pre class="prettyprint">// The number of arguments is wrong (2 or more arguments required)
tizen.filesystem.resolve(&#39;images&#39;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Missing error callback arguments);</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] Number of the arguments to tizen.filesystem.resolve is 1; provide arguments of size from 2 to 4.</pre>

<h4>Rule 3. Missing Error Handling</h4>

<p>Invoking an asynchronous method without an error callback is notified as an WebAPIError and the analysis proceeded.</p>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">tizen.filesystem.resolve()</span> function needs an error callback function as its third argument. Because the error callback function does not exist, the JSA detects it and creates an alarm.</p>

<pre class="prettyprint">tizen.filesystem.resolve(&#39;images&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(dir)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Mount point Name is &quot; +  dir.path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error callback required as the third argument);</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] Call to tizen.filesystem.resolve is missing an error callback function; provide an error callback function.</pre>

<h4>Rule 4. Missing Exception Handling</h4>

<p>Invoking an API, which can throw an exception without the <span style="font-family: Courier New,Courier,monospace">try-catch</span> clause is notified as an WebAPIError and the analysis proceeded.</p>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">tizen.calendar.getCalendars()</span> is a method that can throw exceptions, so it must be wrapped by a <span style="font-family: Courier New,Courier,monospace">try-catch</span> statement. Because the <span style="font-family: Courier New,Courier,monospace">try-catch</span> statement does not exist, the JSA detects it and creates an alarm.</p>

<pre class="prettyprint">// tizen.calendar.getCalendars API can make exceptions, so it should be wrapped in a try-catch statement
tizen.calendar.getCalendars(&quot;EVENT&quot;, calendarListCallback, errorCallback);</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] Function CalendarManager.prototype.getCalendars may raise an exception; call the function inside the try statement.</pre>

<h4>Rule 5. Wrong Argument Type</h4>

<p>Invoking API which passes wrong type value is notified as an WebAPIError and the is proceeded.</p>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">tizen.contact.getAddressBooks()</span> function needs arguments whose type is the <span style="font-family: Courier New,Courier,monospace">function</span> instead of the <span style="font-family: Courier New,Courier,monospace">string</span> and the <span style="font-family: Courier New,Courier,monospace">undefined</span>, so the JSA detects it and makes an alarm.</p>

<pre class="prettyprint">var addressBooksCB = &quot;notFucntion&quot;;
try
{
&nbsp;&nbsp;&nbsp;// The arguments of tizen.contact.getAddressBooks API must be function types instead of strings and undefined
&nbsp;&nbsp;&nbsp;tizen.contact.getAddressBooks(addressBooksCB, undefined);
}
catch (e) {}</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] Argument #1 of the function ContactManager.prototype.getAddressBooks is wrong; the expected type is AddressBookArraySuccessCallback.
[Web API Rule] Argument #2 of the function ContactManager.prototype.getAddressBooks is wrong; the expected type is ErrorCallback.</pre>

<h4>Rule 6. Wrong Dictionary Type</h4>

<p>Creating a dictionary object with wrong key-value pairs is notified as an WebAPIError and the is proceeded.</p>

<p>In the following example, the constructor <span style="font-family: Courier New,Courier,monospace">tizen.Contact()</span> function needs a dictionary object as the first argument. If the keys of the dictionary object are different from the spec, the JSA detects it and creates an alarm.</p>

<pre class="prettyprint">var validContactObj = new tizen.Contact(
{
&nbsp;&nbsp;&nbsp;name: new tizen.ContactName(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;firstName:&#39;Jeffrey&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastName:&#39;Hyman&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nicknames:[&#39;joey ramone&#39;]
&nbsp;&nbsp;&nbsp;}),
&nbsp;&nbsp;&nbsp;emails:[new tizen.ContactEmailAddress(&#39;user@domain.com&#39;)],
&nbsp;&nbsp;&nbsp;phoneNumbers:[new tizen.ContactPhoneNumber(&#39;666666666&#39;)]
});

var invalidContactObj = new tizen.Contact(
{
&nbsp;&nbsp;&nbsp;// The first argument, whose type is dictionary, of tizen.Contact API does not have the property &#39;foo&#39;
&nbsp;&nbsp;&nbsp;foo: &quot;I&#39;m not an member of Contact&quot;</pre>

<p>The JSA displays the following message:</p>

<pre class="prettyprint">[Web API Rule] The property foo is not a member of the dictionary CantactNameInit.</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>