<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Wearable Popups</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Popup Application</a></li>
			<li><a href="#style">Using Popup Styles</a></li>
			<li><a href="#event">Managing Popup Events</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje__Group.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__EFL__EXTENSION__MODULE.html">Efl Extension API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Wearable Popups</h1>

  
<p>This topic teaches the basics of popup component interactions.</p>

<p>This feature is supported in wearable applications only.</p>

<h2 id="init" name="init">Initializing the Popup Application</h2>
	
<p>Create an application with a window entitled <strong>Popup Basic Tutorial</strong>. The window consists of a conformant component, and you can add the popup inside the conformant with the <span style="font-family: Courier New,Courier,monospace">create_popup()</span> function.</p>
	
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(&quot;main&quot;, &quot;Popup Basic Tutorial&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;create_popup(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}

static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}

int
main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;struct app_data ad = {0,};
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;

&nbsp;&nbsp;&nbsp;return ui_app_main(&amp;argc, &amp;argv, &amp;event_callback, &amp;ad);
}</pre>	
	
 <h2 id="style" name="style">Using Popup Styles</h2>

<p>To create popups using various styles:</p>

<ul><li>Create a basic text-only popup:

<pre class="prettyprint">
Evas_Object *popup;
struct appdata *ad;
ad = (struct appdata *) data;

popup = elm_popup_add(ad-&gt;win_main);
evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
elm_object_text_set(popup, &quot;This has only texts&quot;);
evas_object_show(popup);
</pre></li>

<li>Create a popup with a title and text. The <span style="font-family: Courier New,Courier,monospace">title,text</span> attribute is the title area text part that defines the title label.
<pre class="prettyprint">
Evas_Object *popup;
struct appdata *ad;
ad = (struct appdata *) data;

popup = elm_popup_add(ad-&gt;win_main);
evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Title&quot;);
elm_object_text_set(popup,&quot;This Popup has title area and text&quot;);
eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
evas_object_show(popup);
</pre></li>

<li>Create a popup with a title, text, and 2 buttons:
<pre class="prettyprint">
Evas_Object *popup;
Evas_Object *btn;
struct appdata *ad = (struct appdata *) data;

popup = elm_popup_add(ad-&gt;win_main);
evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Title&quot;);
eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
elm_object_text_set(popup, &quot;This is title text 2button popup&quot;);

btn = elm_button_add(popup);
elm_object_style_set(btn, &quot;popup&quot;);
evas_object_size_hint_weight_set(btn, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_object_text_set(btn, &quot;Cancel&quot;);
elm_object_part_content_set(popup, &quot;button1&quot;, btn);
evas_object_smart_callback_add(btn, &quot;clicked&quot;, _response_cb, popup);

btn = elm_button_add(popup);
elm_object_style_set(btn, &quot;popup&quot;);
evas_object_size_hint_weight_set(btn, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_object_text_set(btn, &quot;OK&quot;);
elm_object_part_content_set(popup, &quot;button2&quot;, btn);
evas_object_smart_callback_add(btn, &quot;clicked&quot;, _response_cb, popup);

evas_object_show(popup);
</pre></li>

<li>Create a toast popup:
<pre class="prettyprint">
Evas_Object *popup;
struct appdata *ad = (struct appdata *) data;

popup = elm_popup_add(ad-&gt;win_main);
elm_object_style_set(popup, &quot;toast&quot;);
elm_popup_orient_set(popup, ELM_POPUP_ORIENT_BOTTOM);
evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
elm_object_part_text_set(popup,&quot;elm.text&quot;, &quot;Saving Contacts to sim&quot;);

evas_object_smart_callback_add(popup, &quot;block,clicked&quot;, _block_clicked_cb, NULL);
elm_popup_timeout_set(popup, 2.0);
evas_object_smart_callback_add(popup, &quot;timeout&quot;, _timeout_cb, NULL);

evas_object_show(popup);
</pre></li>
</ul>

 <h2 id="event" name="event">Managing Popup Events</h2>
<p>The Elementary popups respond to user interactions with several events.</p>
<p>To manage popup events:</p>

<ul> 
<li>Handle timeout events.
<p>The <span style="font-family: Courier New,Courier,monospace">timeout</span> event is triggered whenever a popup is closed as a result of a timeout:</p>
<pre class="prettyprint">
static void 
_timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;evas_object_del(obj);
}
elm_popup_timeout_set(popup, 3.0);
evas_object_smart_callback_add(popup, &quot;timeout&quot;, _timeout_cb, NULL);
</pre></li>

<li>Handle block clicked events.
<p>The <span style="font-family: Courier New,Courier,monospace">block,clicked</span> event is triggered whenever the user taps on a blocked event area:</p>
<pre class="prettyprint">
static void 
_block_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;evas_object_del(obj);
}
evas_object_smart_callback_add(popup, &quot;block,clicked&quot;, _block_clicked_cb, NULL);
</pre></li>

</ul>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
