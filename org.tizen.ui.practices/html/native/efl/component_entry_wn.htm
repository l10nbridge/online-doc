<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Entry</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#add">Adding an Entry Component</a></li>
			<li><a href="#editor">Using the Text Editor</a></li>
			<li><a href="#mode">Setting the Password Mode</a></li>
			<li><a href="#wrap">Entry Line Modes And Wrapping</a></li>
			<li><a href="#text">Selecting Text</a></li>
			<li><a href="#cursor">Controlling the Cursor</a></li>
			<li><a href="#formatting">Formatting Text</a></li>
			<li><a href="#markups">Using Special Markups</a></li>
			<li><a href="#override">Overriding Style</a></li>
			<li><a href="#filter">Filtering Text</a></li>
			<li><a href="#load">Loading and Saving Files</a></li>
			<li><a href="#content_theme">Using Entry Theme Content</a></li>
			<li><a href="#text_theme">Using Entry Theme Texts</a></li>
			<li><a href="#callback">Using Entry Callbacks</a></li>
		</ul>
			<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__EFL__EXTENSION__MODULE.html">Efl Extension API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Entry</h1>

<p>This feature is supported in wearable applications only.</p>

<p>The entry component is a box where the user can enter text. It supports the following features:</p>
  <ul>
   <li>text wrapping</li>
   <li>multiline</li>
   <li>scrolling</li>
   <li>formatted markup text</li>
   <li>password mode</li>
   <li>filtering text</li>
   <li>read/write from a file</li>
   <li>theme style overrides</li>
  </ul>


<p class="figure">Figure: Entry component</p> 
<p align="center"><img alt="Entry component" src="../../images/entry_wn.png" /> </p> 
 
<p class="figure">Figure: Entry component</p> 
<p align="center"><img alt="Entry component" src="../../images/entry2_wn.png" /> </p> 
 
<p class="figure">Figure: Entry hierarchy</p> 
<p align="center"><img alt="Entry hierarchy" src="../../images/entry_tree.png" /> </p> 
  
<h2 id="add">Adding an Entry Component</h2>

<p>The entry component is created with the <span style="font-family: Courier New,Courier,monospace">elm_entry_add()</span> function, and the text inside the entry can be set with <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_set()</span>.</p>
<pre class="prettyprint">
Evas_Object *entry, *parent;

entry = elm_entry_add(parent);
elm_entry_entry_set(entry, &quot;A short text.&quot;);
</pre>

<h2 id="editor">Using the Text Editor</h2>

<p>You can append text to the end of existing content.</p>
<pre class="prettyprint">
elm_entry_entry_append(entry, &quot;END&quot;);
</pre>

<p>You can also insert text at the current cursor position.</p>
<pre class="prettyprint">
elm_entry_entry_insert(entry, &quot;CURSOR&quot;);
Eina_Bool Empty = elm_entry_is_empty(entry);
</pre>

<p>Call <span style="font-family: Courier New,Courier,monospace">elm_entry_is_empty()</span> to see whether the entry is empty. Here, the boolean variable <span style="font-family: Courier New,Courier,monospace">Empty</span> returns <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>.</p>
<p>The user can enter text in the entry component when it is in focus. It is possible to prevent the user from editing text if needed.</p>
<pre class="prettyprint">
elm_entry_editable_set(entry, EINA_FALSE);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">It is still possible to use the previous functions to modify the text of a non-editable entry.</td> 
    </tr> 
   </tbody> 
  </table>  
 
<h2 id="mode">Setting the Password Mode</h2>

<p>When dealing with password content, the password mode activates to hide what the user is typing. In this mode, the display of any text is replaced by asterisks (*), and the entry is single line (there is no line wrap).</p>

<pre class="prettyprint">
elm_entry_password_set(entry, EINA_TRUE);
</pre>

<h2 id="wrap">Entry Line Modes And Wrapping</h2>

<p>The entry component has two line modes:</p>
  <ul>
   <li>single line mode</li>
   <li>multiline mode</li>
  </ul>

<p>First, set the entry in single line mode.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_TRUE);
</pre>

<p>In this mode, the text does not wrap when reaching the edge, but the entry grows horizontally instead. Pressing the Enter key in this mode generates an <span style="font-family: Courier New,Courier,monospace">activate</span> event instead of adding a new line.</p>

<p>When the entry is set to multiline mode (single line off), the text wraps at the end of the entry and pressing Enter creates a new line.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_FALSE);
elm_entry_line_wrap_set(entry, ELM_WRAP_WORD);
</pre>

<p>In multiline entries, <span style="font-family: Courier New,Courier,monospace">elm_entry_line_wrap_set()</span> provides a way to cut the text implicitly into a new line when it reaches the far edge of the UI component. The following wrap modes are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_NONE</span>: No wrap</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_CHAR</span>: Wrap between characters</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_WORD</span>: Wrap in allowed wrapping points (as defined in the unicode standard)</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_MIXED</span>: Word wrap, and if that fails, char wrap</li>
  </ul>

<h2 id="text">Selecting Text</h2>

<p>Text selections can be made with different functions:</p>
<ul>
<li>To select all the content of the entry component:
<pre class="prettyprint">
elm_entry_select_all(entry);
</pre>
</li>

<li>To deselect the current selection:
<pre class="prettyprint">
elm_entry_select_none(entry);
</pre>
</li>

<li>To select part of the text, use <span style="font-family: Courier New,Courier,monospace">elm_entry_select_region_set()</span>. The following code selects the first twenty characters of the entry content.
<pre class="prettyprint">
elm_entry_select_region_set(entry, 0, 20);
</pre>
</li>

<li>To retrieve the currently selected text in an entry:
<pre class="prettyprint">
const char *selection;

selection = elm_entry_selection_get(entry);
</pre>
</li>
</ul>

<p>If the entry text is empty, <span style="font-family: Courier New,Courier,monospace">elm_entry_selection_get()</span> returns <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>You can copy or cut the selection to the clipboard.</p>
<pre class="prettyprint">
elm_entry_selection_cut(entry);
</pre>

<p>The selection can be pasted in the same or a different entry.</p>
<pre class="prettyprint">
elm_entry_selection_paste(entry);
</pre>

<h2 id="cursor">Controlling the Cursor</h2>

<p>The cursor represents the current position in the entry, where the next action, for example, text insertion or deletion, is done. Usually, the cursor is represented as a blinking character, but its appearance depends on the theme configuration. The cursor position can be modified by using several functions.</p>
<ul>
<li>To move the cursor to the beginning of the entry:
<pre class="prettyprint">
elm_entry_cursor_begin_set(entry);
</pre>
</li>

<li>To move the cursor to the end of the entry:
<pre class="prettyprint">
elm_entry_cursor_end_set(entry);
</pre>
</li>

<li>To move the cursor one line down or up:
<pre class="prettyprint">
elm_entry_cursor_down(entry);
elm_entry_cursor_up(entry);
</pre>
</li>
<li>To move the cursor one character to the left or right:
<pre class="prettyprint">
elm_entry_cursor_prev(entry);
elm_entry_cursor_next(entry);
</pre>
</li>

<li>To set the cursor at a specific position (15th character, for example):
<pre class="prettyprint">
elm_entry_cursor_pos_set(entry, 15);
</pre>
</li>
</ul>

<p>It is possible to start a selection at the current cursor position, move five characters to the right and end the selection.</p>
<pre class="prettyprint">
elm_entry_cursor_selection_begin(entry);

for (i = 0; i &lt; 5; i++)
{
&nbsp;&nbsp;&nbsp;elm_entry_cursor_next(entry);
}

elm_entry_cursor_selection_end(entry);
</pre>

<h2 id="formatting">Formatting Text</h2>

<p>Text within an entry can be formatted by using markups tags that are defined in the theme. The following markups are available in the default theme:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;br&gt;</span>: Inserts a line break.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;ps&gt;</span>: Inserts a paragraph separator. This is preferred over line breaks.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;tab&gt;</span>: Inserts a tab.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;em&gt;...&lt;/em&gt;</span>: Emphasis. Sets the oblique style for the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;b&gt;...&lt;/b&gt;</span>: Sets the bold style for the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;link&gt;...&lt;/link&gt;</span>: Underlines the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;hilight&gt;...&lt;/hilight&gt;</span>: Highlights the enclosed text.</li>
  </ul>

<h2 id="markups">Using Special Markups</h2>

<p>Special markups can be added within the text of the entry:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;a href = ..&gt;...&lt;/a&gt;</span>: Anchors</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;item size = .. vsize = .. href = ..&gt;...&lt;/item&gt;</span>: Items</li>
  </ul>

<p>The anchors generate an <span style="font-family: Courier New,Courier,monospace">anchor,clicked</span> signal when the user clicks on them. The <span style="font-family: Courier New,Courier,monospace">href</span> attribute is used to identify the anchor. It also reacts to the <span style="font-family: Courier New,Courier,monospace">anchor,in</span> (mouse in), <span style="font-family: Courier New,Courier,monospace">anchor,out</span> (mouse out), <span style="font-family: Courier New,Courier,monospace">anchor,down</span> (mouse down), and <span style="font-family: Courier New,Courier,monospace">anchor,up</span> (mouse up) events.</p>

<p>The item markup provides a way to insert any <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> in the text. The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> name has to be specified in the <span style="font-family: Courier New,Courier,monospace">href</span> attribute.</p>

<h2 id="override">Overriding Style</h2>

<p>To tweak the style of the text within the entry component, it is possible to override parts of the theme style to the textblock object by using <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_push()</span>. This function pushes a new style on top of the user style stack that overrides the current style. Remove the style in the top of user style stack with <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_pop()</span>.</p>

<h2 id="filter">Filtering Text</h2>

<p>Text within an entry can be filtered in size. The following example sets the maximum number of characters allowed in the entry to 8.</p>
<pre class="prettyprint">
static Elm_Entry_Filter_Limit_Size limit_size = 
{
&nbsp;&nbsp;&nbsp;.max_char_count = 8,
&nbsp;&nbsp;&nbsp;.max_byte_count = 0
};

// Append a new callback to the list, this function is called each time
// a text is inserted in the entry. Pass the limit_size struct previously
// created to set the maximum number of characters allowed to 8
 
elm_entry_markup_filter_append(entry, elm_entry_filter_limit_size, limit_size);
</pre>

<p>The content can be filtered by passing an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Filter_Accept_Set</span> structure. This structure contains the accepted characters and rejected characters. The following example shows how to reject the &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39; characters.</p>

<pre class="prettyprint">
static Elm_Entry_Filter_Accept_Set accept_set = 
{
&nbsp;&nbsp;&nbsp;.accepted = NULL,
&nbsp;&nbsp;&nbsp;.rejected = &quot;+*-/&quot;
};

elm_entry_markup_filter_append(entry, elm_entry_filter_accept_set, accept_set);
</pre>

<h2 id="load">Loading and Saving Files</h2>

<p>The entry content can be saved to a file (<span style="font-family: Courier New,Courier,monospace">/tmp/test.txt</span>, for example).</p>

<pre class="prettyprint">
// Set the file in which the entry text is saved. This function
// implicitly loads the existing file content 
elm_entry_file_set(entry, &quot;/tmp/test.txt&quot;, ELM_TEXT_FORMAT_MARKUP_UTF8);
</pre>

<p>Autosave is activated by default and changes are written back to the file after a short delay. This feature can be deactivated and you can manually save the content when needed.</p>
<pre class="prettyprint">
// Disable autosaving 
elm_entry_autosave_set(entry, EINA_FALSE);

// Trigger saving when needed 
elm_entry_file_save(entry);
</pre>

<h2 id="content_theme">Using Entry Theme Content</h2>

<p>Two content parts of the default theme are available: <span style="font-family: Courier New,Courier,monospace">icon</span> and <span style="font-family: Courier New,Courier,monospace">end</span>. The following example shows how to set an icon in the <span style="font-family: Courier New,Courier,monospace">end</span> content part.</p>

<pre class="prettyprint">
Evas_Object *icon;

ic = elm_icon_add(entry);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(entry, &quot;end&quot;, icon);
</pre>

<h2 id="text_theme">Using Entry Theme Texts</h2>

<p>The default theme allows the use of the following text parts:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">elm.text</span> - text of the entry</li>
   <li><span style="font-family: Courier New,Courier,monospace">elm.guide</span> - placeholder of the entry</li>
  </ul>

<p>The following example shows how to set the placeholder text of the entry to <span style="font-family: Courier New,Courier,monospace">Hello World</span>.</p>
<pre class="prettyprint">
elm_object_part_text_set(entry, &quot;elm.guide&quot;, &quot;Hello World&quot;);
</pre>

<h2 id="callback">Using Entry Callbacks</h2>

<p>The entry component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">aborted</span>: The escape key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The enter key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,clicked</span>: An anchor is clicked. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,down</span>: Mouse button is pressed on an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,hover,opened</span>: The anchor is clicked. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,in</span>: Mouse cursor is moved into an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,out</span>: Mouse cursor is moved out of an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,up</span>: Mouse button is unpressed on an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed</span>: The text within the entry is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed,user</span>: The text within the entry is changed because of user interaction. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Edje_Entry_Change_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The entry is clicked (mouse press and release).</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The entry is double clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,triple</span>: The entry is triple clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed</span>: The cursor position is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed,manual</span>: The cursor position is changed manually.</li>
   <li><span style="font-family: Courier New,Courier,monospace">focused</span>: The entry receives focus. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Focus_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">unfocused</span>: The entry loses focus.</li>
   <li><span style="font-family: Courier New,Courier,monospace">language,changed</span>: Program language is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: A mouse button is pressed and held for a couple of seconds.</li>
   <li><span style="font-family: Courier New,Courier,monospace">maxlength,reached</span>: A maximum length is reached.</li>
   <li><span style="font-family: Courier New,Courier,monospace">preedit,changed</span>: The preedit string is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">press</span>: A mouse button is pressed on the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">redo,request</span>: The request is redone.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,changed</span>: The current selection is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cleared</span>: The current selection is cleared.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,copy</span>: A copy of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cut</span>: A cut of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,paste</span>: A paste of the clipboard contents is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,start</span>: A selection is begun and no previous selection exists.</li>
   <li><span style="font-family: Courier New,Courier,monospace">text,set,done</span>: The whole text is set to the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">theme,changed</span>: The theme is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">undo,request</span>: The request is undone.</li>
  </ul>

<p>For signals, where <span style="font-family: Courier New,Courier,monospace">event_info</span> has not been explicitly described, it is set to <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>The following example shows how to register a callback to the <span style="font-family: Courier New,Courier,monospace">focused</span> signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, focused_cb, data);
}

// Callback function for the &quot;focused&quot; signal
// This callback is called when the entry receive the focus
void focused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Entry focused\n&quot;);
} 
</pre>
  
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 


<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

