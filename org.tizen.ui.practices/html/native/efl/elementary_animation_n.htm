<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Elementary Animations</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#Getting_Started">Getting Started</a></li>
				<li><a href="#Adding_Objects">Adding Objects to an Animation</a></li>
				<li><a href="#Add_Image">Adding Images to an Animation</a></li>
				<li><a href="#Animation_Duration">Managing Animation Duration</a></li>
				<li><a href="#Acceleration_Mode">Setting the Animation Acceleration Mode (&quot;Tween Mode&quot;)</a></li>
				<li><a href="#Animation_Repeat">Managing Animation Repeat</a></li>
				<li><a href="#Auto_Reverse">Managing Animation Auto-reverse</a></li>
				<li><a href="#Transitions2">Managing Transitions</a></li>
				<li><a href="#Combine_Transitions">Combining Transitions</a></li>
				<li><a href="#Animation_Chain">Creating an Animation Chain</a></li>
				<li><a href="#Animation_Timeline">Managing Animation Timeline</a></li>
				<li><a href="#Custom_Transition">Creating Custom Transitions</a></li>
				
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Mobile Wearable</a></li>
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Elementary Animations</h1> 

<p>Elementary transitions (<span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span>) allow you to apply various transition effects, such as translation and rotation, to Evas objects. Elementary transitions are mostly based on Ecore animators, but provide some transition methods at a higher level of abstraction. Elementary transitions provide a simpler way of animating objects than Ecore animators or Edje animations.</p>

<p>To use Elementary transitions, you must create an <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> object and define the desired transitions using the methods of this object. After the transitions are registered, they are automatically managed: their callback functions are called for the set duration, and they are deleted upon completion.</p>

<p>Use Elementary transitions only when Edje animations are not sufficient. Edje animations are better at handling transitions, have more flexibility, and can be manipulated inside themes. The only drawback is that Edje animations have their own definition language. If you want to code with the C language, use Elementary transitions.</p>

<h2 id="Getting_Started" name="Getting_Started">Getting Started</h2>

<p>To create a transition with <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span>, build the transit object using the <span style="font-family: Courier New,Courier,monospace;">elm_transit_add()</span> function:</p>
<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
</pre>

<p>You now have an <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that allows you to perform transitions on 1 or more objects. The transit object holds the information about the target objects and the transition effects that are used. The transit object also contains information, such as animation duration, number of repetitions, and auto-reverse. The transit object starts playing as soon as the application enters the main loop.</p>

<h2 id="Adding_Objects" name="Adding_Objects">Adding Objects to an Animation</h2>

<p>To add objects to an animation:</p>
<ul>
<li>
<p>You can add your Evas objects to your transition using the <span style="font-family: Courier New,Courier,monospace;">elm_transit_object_add()</span> function:</p>

<pre class="prettyprint">
elm_transit_object_add(Elm_Transit *transit, Evas_Object *obj)
</pre>

<p>The first parameter is the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that handles the transition. The second parameter is the Evas object to animate.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The Evas object can be a low-level component, such as a rectangle, but also a UI component, such as a button, image, or calendar.
<p>If you want to animate an Evas object handled by a container, such as a box, you need to either unpack the object before the animation or animate the whole container.</p></td>
</tr>
</tbody>
</table>
</li>
<li>
<p>To know which objects are currently in your transition, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_objects_get()</span> function. You get a list of all the objects that are subject to the transition.</p>
</li>
<li>
<p>To remove objects from the transition:</p>
<pre class="prettyprint">
elm_transit_object_remove(Elm_Transit *transit, Evas_Object *obj)
</pre>

<p>The first parameter is the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that handles the transition. The second parameter is the Evas object to remove from the transition.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">After you have added at least one Evas object to your transition, if the list of objects gets emptied somehow, either because the transition has been terminated or all objects have been deleted, the transition is automatically deleted. Otherwise, you have to delete the transition by yourself using the <span style="font-family: Courier New,Courier,monospace;">elm_transit_del()</span> function. If you delete the transit while the transition is running, the transition stops.</td>
</tr>
</tbody>
</table>
</li>
</ul>

<h2 id="Add_Image" name="Add_Image">Adding Images to an Animation</h2>

<p>To add images to an animation:</p>
<ol>
<li>
<p>If you do not want to manage UI components for animating images, <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> provides a helper function for directly manipulating images:</p>

<pre class="prettyprint">
elm_transit_effect_image_animation_add(Elm_Transit *transit, Eina_List *images)
</pre>

<p>The first parameter is the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that handles the transition. The second parameter is a list of the image paths.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">This list and its contents are deleted after the effect ends by the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_image_animation_context_free()</span> function.</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>You can now define your image transitions exactly the same way as with any Evas object.</p>

<p>The following example shows how to use <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> with images:</p>

<pre class="prettyprint">
char buf[PATH_MAX];
Eina_List *images = NULL;
Elm_Transit *transit = elm_transit_add();
snprintf(buf, sizeof(buf), &quot;%s/images/btn_default.png&quot;, PACKAGE_DATA_DIR);
images = eina_list_append(images, eina_stringshare_add(buf));
snprintf(buf, sizeof(buf), &quot;%s/images/btn_hover.png&quot;, PACKAGE_DATA_DIR);
images = eina_list_append(images, eina_stringshare_add(buf));
elm_transit_effect_image_animation_add(transit, images);
</pre>
</li>
</ol>

<h2 id="Animation_Duration" name="Animation_Duration">Managing Animation Duration</h2>

<p>With <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span>, setting the transition duration is mandatory.</p>
<p>To manage animation duration:</p>
<ul>
<li>
<p>To set the duration, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_duration_set()</span> function:</p>

<pre class="prettyprint">
elm_transit_duration_set(Elm_Transit *transit, double duration)
</pre>

<p>The first parameter is the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that handles the transition. The second parameter is the duration in seconds.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The purpose of <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> is to abstract the low-level details of object interpolation, so you cannot create an infinite transition by specifying the duration. However, you can make your transition last forever using the repeat function.</td>
</tr>
</tbody>
</table>

<p>The following example shows how to make a complete revolution of the target Evas object in 2 seconds:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_rotation_add(transit, 0.0, 360);
elm_transit_duration_set(transit, 2.0);
elm_transit_go(transit);
</pre>
</li>
<li>
<p>To get the duration of the transition, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_duration_get()</span> function.</p>
</li>
</ul>

<h2 id="Acceleration_Mode" name="Acceleration_Mode">Setting the Animation Acceleration Mode (&quot;Tween Mode&quot;)</h2>

<p><span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> supports a number of built-in interpolation methods. By default, all interpolations are linear.</p> 
<p>To manage the tween mode:</p>
<ul>
<li>
<p>To change the animation&#39;s dynamics, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_tween_mode_set()</span> function:</p>

<pre class="prettyprint">
elm_transit_tween_mode_set(Elm_Transit *transit, Elm_Transit_Tween_Mode tween_mode)
</pre>

<p>The first parameter is the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance that handles the transition. The second parameter is the tween mode of the transition, which is defined by the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit_Tween_Mode</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__Transit.html#ga954ecd9ba6266a18a0bde0e5861ccc53">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__Transit.html#ga954ecd9ba6266a18a0bde0e5861ccc53">wearable</a> applications).</p>
</li>
<li>
<p>To get the current tween mode, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_tween_mode_get()</span> function.</p>
</li>
</ul>

<h2 id="Animation_Repeat" name="Animation_Repeat">Managing Animation Repeat</h2>

<p>To manage animation repeat:</p>
<ul>
<li>
<p>To set a transition to repeat, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_repeat_times_set()</span> function:</p>

<pre class="prettyprint">
elm_transit_repeat_times_set(Elm_Transit *transit, int repeat)
</pre>

<p>The first parameter is the transition you want to repeat. The second parameter is the number of times the transition is repeated.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">If the <span style="font-family: Courier New,Courier,monospace;">repeat</span> parameter is set to 0, the transition does not loop at all. If set to 1, the transition runs twice. If set to a negative value, the transition repeats forever.</td>
</tr>
</tbody>
</table>
<p>The following example shows how to make an Evas object spin for 3 complete revolutions in 6 seconds:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_rotation_add(transit, 0.0, 360);
elm_transit_duration_set(transit, 2.0);
elm_transit_repeat_set(transit, 3.0);
elm_transit_go(transit);
</pre>
</li>
<li>
<p>To get the repeat value, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_repeat_times_get()</span> function. The default value is 0.</p>
</li>
</ul>

<h2 id="Auto_Reverse" name="Auto_Reverse">Managing Animation Auto-reverse</h2>

<p><span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> provides a helper function for automatically reversing the transition once it finishes:</p>

<pre class="prettyprint">
elm_transit_auto_reverse_set(Elm_Transit *transit, Eina_Bool reverse)
</pre>

<p>The first parameter is the transition you want to reverse. The second parameter is the reverse state. If the reverse state is set to <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>, this function performs the same transition backwards as soon as the first transition is complete.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">
    Reversing the transition doubles the duration of the transition. Moreover, if the transition is set to repeat, the transition runs back and forth until the repeat count is finished.
    <p>You can calculate the duration as follows if both auto-reverse and repeat are set: 2 * duration * repeat.</p>
</td>
</tr>
</tbody>
</table>

<p>The following example shows how to make an object perform half a turn and then reverse the animation to its original position in 4 seconds:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_rotation_add(transit, 0.0, 360);
elm_transit_duration_set(transit, 2.0);
elm_transit_auto_reverse_set(transit, EINA_TRUE);
elm_transit_go(transit);
</pre>

<p>To determine whether the auto-reverse mode is enabled, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_auto_reverse_get()</span> function.</p>

<h2 id="Transitions2" name="Transitions2">Managing Transitions</h2>

<p>There are 2 main transition types:</p>
<ul>
<li>Transitions that are applied to the properties of objects, such as position, size, angle, and color.</li>
<li>Transitions from one object to another, where the first object is hidden to let the second one appear.</li>
</ul>
<p>All transitions are based on the same principle: set the starting and the ending values for the properties to animate, then set the lifespan of the animation, and finally inquire the preferred interpolation method (such as linear, acceleration, or bounce).</p>

<p>You must declare the transitions after the parent window has been created, since the transition effects make use of the geometric properties of the parent window. If the parent window does not yet exist when calculating the interpolation, the interpolation may end up being based on wrong information.</p>

<p>To manage the different transition types:</p>
<ul>
<li id="Built-in_Transitions" name="Built-in_Transitions">Built-in transitions

<p><span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> provides several built-in transition definitions that are useful for the most common cases, so you do not have to code them from scratch.</p>

<p>To implement the built-in effects:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_effect_add(transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_transit_effect_translation_op,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_transit_effect_translation_context_new(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_transit_effect_translation_context_free);
</pre>
<p>The parameters are:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">transit</span>: The <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> object that contains the target Evas objects and all the information needed to setup the transition.</li>
<li><span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_translation_op</span>: The callback function that performs the transition (resizing interpolation in this example).</li>
<li><span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_translation_context_new()</span>: The callback function that returns the context used in the transition for calculations. In this example, the context is the coordinates of the before and after objects.</li>
<li><span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_translation_context_free</span>: The callback function that frees up the memory once the transition is complete.</li>
</ul>

<p>To rewrite the definitions:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_effect_translation_add(transit, from_x, from_y, to_x, to_y);
</pre>
</li>
<li>Translation
<p>To perform a translation on an Evas object, use the following method:</p>

<pre class="prettyprint">
elm_transit_effect_translation_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord from_dx,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord from_dy,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord to_dx,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord to_dy)
</pre>
<p>The parameters are:</p>
<ul>
<li>The transit object that contains (among other things) all the Evas objects subject to the translation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_dx</span>: The starting X coordinate (source).</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_dy</span>: The starting Y coordinate (source).</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_dx</span>: The ending X coordinate (destination).</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_dy</span>: The ending Y coordinate (destination).</li>
</ul>

<p>The following example shows how to slide an Evas object (a rectangle) on a 45-degree diagonal, from bottom-left to top-right, at a constant speed, and in 1 second:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, rectangle);
elm_transit_effect_translation_add(transit, 0, 0, 280, 280);
elm_transit_duration_set(transit, 1);
elm_transit_go(transit);
</pre>
</li>
<li>Color transition

<p>Color transitions allow you to dynamically change the color of Evas objects. The first parameter is the transit object, while the other parameters are used to define the color transition using RGB colors. There is also an alpha channel that controls the opacity of the color (the background of the object, not the object itself).</p>

<pre class="prettyprint">
elm_transit_effect_color_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int from_r,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int from_g,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int from_b,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int from_a,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int to_r,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int to_g,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int to_b,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int to_a)
</pre>
<p>The parameters are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">transit</span>: The transit object that contains (among other things) all the Evas objects subject to the translation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_r</span>: The start value for &quot;Red&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_g</span>: The start value for &quot;Green&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_b</span>: The start value for &quot;Blue&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_a</span>: The start value for &quot;Alpha&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_r</span>: The end value for &quot;Red&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_g</span>: The end value for &quot;Green&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_b</span>: The end value for &quot;Blue&quot;.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_a</span>: The end value for &quot;Alpha&quot;.</li>
</ul>

<p>The following example shows how to transit a rectangle from red to blue in 3 seconds:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, rectangle);
elm_transit_effect_color_add(transit, // Target object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;255, 0, 0, 255, // From color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0, 0, 255, 255); // To color
elm_transit_duration_set(transit, 3);
elm_transit_go(transit);
</pre>
</li>
<li>Rotation
<p>To implement the rotation transition:</p>

<pre class="prettyprint">
elm_transit_effect_rotation_add(Elm_Transit *transit, float from_degree, float to_degree)
</pre>
<p>The parameters are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">transit</span>: The transit object that contains (among other things) all the Evas objects subject to the translation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_degree</span>: The start degree of rotation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_degree</span>: The end degree of rotation.</li>
</ul>

<p>This function can be used to perform a rotation on any Evas object. It works the same way as the other transit effects and takes 2 parameters for the starting and ending angles. Note that if you apply a rotation on multiple objects, they individually mill around and not act as a group. If you want several objects to revolve around a common point, you must encapsulate the objects into a single parent object and apply the rotation to the parent object. The following example shows how to achieve this:</p>

<pre class="prettyprint">
// Parent container
Evas_Object *parent = elm_box_add(my_window);
evas_object_show(parent);
elm_box_horizontal_set(parent, EINA_TRUE);
elm_box_homogeneous_set(parent, EINA_TRUE);

// Button 1
Evas_Object *btn1 = elm_button_add(parent);
elm_object_text_set(btn1, &quot;Btn1&quot;);
elm_box_pack_start(parent, btn1);
evas_object_show(btn1);

// Button 2
Evas_Object *btn2 = elm_button_add(parent);
elm_object_text_set(btn2, &quot;Btn2&quot;);
elm_box_pack_end(parent, btn2);
evas_object_show(btn2);

// Make the parent container do a 360 degrees spin
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, parent);
elm_transit_effect_rotation_add(transit, 0.0, 360);
elm_transit_duration_set(transit, 2.0);
elm_transit_go(transit);
</pre>
</li>
<li>Wipe effect

<p>The wipe effect is designed to dynamically hide or show any element on the scene.</p>

<pre class="prettyprint">
elm_transit_effect_wipe_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_Wipe_Type type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_Wipe_Dir dir)
</pre>

<p>In addition to the <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> instance passed as the first parameter, the function takes the following parameters:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">type</span>: The wipe type <span style="font-family: Courier New,Courier,monospace;">Elm_Transit_Effect_Wipe_Type</span> defines whether to show or hide the target elements. The value can be one of the following:
    <ul>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE</span></li>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_TYPE_SHOW</span></li>
    </ul>
</li>
<li><span style="font-family: Courier New,Courier,monospace;">dir</span>: The wipe direction <span style="font-family: Courier New,Courier,monospace;">Elm_Transit_Effect_Wipe_Dir</span> defines in which direction the target progressively appears or disappears. The value can be one of the following:
    <ul>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_DIR_LEFT</span></li>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT</span></li>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_DIR_UP</span></li>
        <li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_WIPE_DIR_DOWN</span></li>
    </ul>
</li>
</ul>

<p>The following example shows how to make an object disappear progressively from left to right:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_wipe_add(transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_TRANSIT_EFFECT_TYPE_HIDE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT);
elm_transit_duration_set(transit, 2.0);
elm_transit_go(transit);
</pre>
</li>
<li>Zoom effect
<p><span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> provides a zoom function.</p>

<pre class="prettyprint">
elm_transit_effect_zoom_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float from_rate,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float to_rate)
</pre>
<p>The parameters are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">transit</span>: The transit object that contains (among other things) all the Evas objects subject to the translation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_rate</span>: The starting level of the zoom.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_rate</span>: The ending level of the zoom.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace;">from_rate</span> parameter defines the scale of the target objects at the beginning of the animation. A value of 1 represents the initial scale of the objects.</p>

<p>Setting the value of the <span style="font-family: Courier New,Courier,monospace;">to_rate</span> parameter to 2 doubles the size of the target objects (double the width and double the height). When using this effect, the width and height of a target object remains proportional to one another. If you want to customize the zoom effect, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_resizing_add()</span> function.</p>

<p>The following example shows how to implement a zoom-out transition. At the end of the 2-second transition, the animated object is half its original size.</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_zoom_add(transit, 1, 0.5);
elm_transit_duration_set(transit, 2.0);
elm_transit_go(transit);
</pre>
</li>

<li>Resizing effect

<p>The resizing effect allows you to design an interpolation of the width and height attributes of one or more target elements.</p>

<pre class="prettyprint">
elm_transit_effect_resizing_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord from_w,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord from_h,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord to_w,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord to_h)
</pre>
<p>The parameters are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">transit</span>: The transit object that contains (among other things) all the Evas objects subject to the translation.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_w</span>: The starting width.</li>
<li><span style="font-family: Courier New,Courier,monospace;">from_h</span>: The starting height.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_w</span>: The ending width.</li>
<li><span style="font-family: Courier New,Courier,monospace;">to_h</span>: The ending height.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace;">from_w</span> and <span style="font-family: Courier New,Courier,monospace;">from_h</span> parameter define the size at the beginning of the animation. The <span style="font-family: Courier New,Courier,monospace;">to_w</span> and <span style="font-family: Courier New,Courier,monospace;">to_h</span> parameter define the size at the end.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">If you are planning to use this method to hide an Evas object by setting one of the length attributes to zero, consider using the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_wipe_add()</span> function instead.</td>
</tr>
</tbody>
</table>

<p>The following example shows how to make a rectangle exchange its width and height properties in a 2-second transition:</p>

<pre class="prettyprint">
Evas_Coord w, h;
evas_object_geometry_get(my_evas_object, NULL, NULL, &amp;w, &amp;h);

Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, my_evas_object);
elm_transit_effect_resize_add(transit, // Transition object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w, h, // Original sizing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h, w); // Target sizing
elm_transit_duration_set(transit, 2.0);
elm_transit_go(transit);
</pre>
</li>
<li>Flip effect
<p>This transition combines the target Evas objects in pairs, so that one object shows up while the other one disappears. This association relates the even objects in the transit list of objects with the odd ones. The even objects are shown at the beginning of the animation, and the odd objects shown when the transition is complete. In other words, the effect applies to each pair of objects in the order in which they are listed in the transit list of objects.</p>

<p>The flip effect itself is a pseudo-3D effect where the first object in the pair is the front object and the second one is the back object. When the transition launches, the front object rotates around a preferred axis in order to let the back object take its place.</p>

<pre class="prettyprint">
elm_transit_effect_flip_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_Flip_Axis axis,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eina_Bool cw)
</pre>

<p>The first parameter is the transit object. The second parameter is the preferred axis of rotation:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_FLIP_AXIS_X</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_FLIP_AXIS_Y</span></li>
</ul>

<p>The third parameter is the direction of the rotation:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> is clockwise.</li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span> is counter-clockwise.</li>
</ul>

<p>The following example shows how to create a coin that flips indefinitely. Note that images as Elementary UI components are used for demonstration purposes. You can use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_image_animation_add()</span> function if you do not want to bother creating UI components.</p>

<pre class="prettyprint">
// Coin Heads
Evas_Object *coin_heads = elm_image_add(ad-&gt;win);
if (!elm_image_file_set(coin_heads, IMG_DIR&quot;/coin_heads.png&quot;, NULL))
&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image&quot;);
elm_win_resize_object_add(ad-&gt;win, coin_heads);

// Coin Tails
Evas_Object *coin_tails = elm_image_add(ad-&gt;win);
if (!elm_image_file_set(coin_tails, IMG_DIR&quot;/coin_tails.png&quot;, NULL))
&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image&quot;);
elm_win_resize_object_add(ad-&gt;win, coin_tails);

// Transition definition
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, coin_heads);
elm_transit_object_add(transit, coin_tails);
elm_transit_duration_set(transit, 2.0);
elm_transit_auto_reverse_set(transit, EINA_TRUE);
elm_transit_repeat_times_set(transit, -1);
elm_transit_effect_flip_add(transit, ELM_TRANSIT_EFFECT_FLIP_AXIS_X, EINA_TRUE);
elm_transit_go(transit);
</pre>

<p class="figure">Figure: Coin flip</p>
<p align="center"><img alt="Coin flip" src="../../images/coin_flip_effect.png" /></p>
</li>

<li>Resizable flip effect
<p>In the flip example above, 2 objects of the same size are used. However, you may sometimes want to flip from one object to another object with different size attributes. The most common example is using buttons with dimensions that depend on their contents (such as labels). If you decide to use the classic <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_flip_add()</span> function, the size of the object changes at the moment one object becomes completely hidden and the other one begins to show up. If you wish to interpolate the size attributes as well, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_resizable_flip_add()</span> function:</p>

<pre class="prettyprint">
elm_transit_effect_resizable_flip_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_Flip_Axis axis,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eina_Bool cw)
</pre>

<p>The first parameter is the transit object. The second parameter is the preferred axis of rotation:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_FLIP_AXIS_X</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">ELM_TRANSIT_EFFECT_FLIP_AXIS_Y</span></li>
</ul>

<p>The third parameter is the direction of the rotation:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> is clockwise.</li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span> is counter-clockwise.</li>
</ul>

<p>This function works the exact same way as the standard flip effect function.</p>
</li>
<li>Fade effect

<p>This effect is used to transition from one Evas object to another one using a fading effect: the first object slowly disappears to let the second object take its place.</p>

<pre class="prettyprint">
elm_transit_effect_fade_add(Elm_Transit *transit)
</pre>

<p>This effect is applied to each pair of objects in the order in which they are listed in the transit list of objects. The first object in the pair is the before object and the second one is the after object.</p>

<p>Building on the coin flip example, the following example shows how to fade out one face of the coin while fading in the other face:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, coin_heads);
elm_transit_object_add(transit, coin_tails);
elm_transit_duration_set(transit, 2.0);
elm_transit_effect_fade_add(transit);
elm_transit_go(transit);
</pre>

<p>If you simply want to hide an object with a fade transition, consider using a transparent after object.</p>
</li>
<li>Blend effect

<p>Another transition involving at least 2 Evas objects is the blend effect. This transition makes the before object blurry before the after object appears.</p>

<pre class="prettyprint">
elm_transit_effect_blend_add(Elm_Transit *transit)
</pre>

<p>The parameter is the transition target of the blend effect.</p>

<p>Building on the coin flip example, the following example shows how to blur out one face of the coin while blurring in the other face:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, coin_heads);
elm_transit_object_add(transit, coin_tails);
elm_transit_duration_set(transit, 2.0);
elm_transit_effect_blend_add(transit);
elm_transit_go(transit);
</pre>

<p>If you simply want to hide an object with a blur transition, consider using a transparent after object.</p>
</li>
</ul>

<h2 id="Combine_Transitions" name="Combine_Transitions">Combining Transitions</h2>

<p>To use multiple transitions at the same time on the same objects, simply declare the transitions one after the other.</p>

<p>Building on the coin flip example, the following example shows how to roll the coin on the ground using a rotation and a translation effect:</p>

<pre class="prettyprint">
Evas_Object *coin_heads = elm_image_add(ad-&gt;win);
if (!elm_image_file_set(coin_heads, IMG_DIR&quot;/coin_heads.png&quot;, NULL))
&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image&quot;);
evas_object_resize(coin_heads, 100, 100);
evas_object_show(coin_heads);

Elm_Transit *transit = elm_transit_add();
elm_transit_object_add(transit, coin_heads);
elm_transit_duration_set(transit, 5.0);
elm_transit_effect_translation_add(transit, 0, 0, 3.1415 * 2 * 100, 0);
elm_transit_effect_rotation_add(transit, 0, 360);
elm_transit_go(transit);
</pre>

<h2 id="Animation_Chain" name="Animation_Chain">Creating an Animation Chain</h2>

<p>To create complex, chained animations without worrying about synchronization between the transitions, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_chain_transit_add()</span> function. This function takes as parameters 2 <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> objects and automatically takes care of the chaining for you: the second transition starts as soon as the first transition is finished.</p>

<p>The following example shows how to move a datetime component on a square trajectory:</p>

<pre class="prettyprint">
Evas_Object *dt = elm_datetime_add(ad-&gt;win);
evas_object_resize(dt, 350, 50);
evas_object_show(dt);

// The first transition
Elm_Transit *t1 = elm_transit_add();
elm_transit_object_add(t1, dt);
elm_transit_duration_set(t1, 2);
elm_transit_effect_translation_add(t1, 0, 0, 100, 0);

// The second transition
Elm_Transit *t2 = elm_transit_add();
elm_transit_object_add(t2, dt);
elm_transit_duration_set(t2, 2);
elm_transit_effect_translation_add(t2, 100, 0, 100, 100);

// The third transition
Elm_Transit *t3 = elm_transit_add();
elm_transit_object_add(t3, dt);
elm_transit_duration_set(t3, 2);
elm_transit_effect_translation_add(t3, 100, 100, 0, 100);

// The fourth transition
Elm_Transit *t4 = elm_transit_add();
elm_transit_object_add(t4, dt);
elm_transit_duration_set(t4, 2);
elm_transit_effect_translation_add(t4, 0, 100, 0, 0);

// Chaining the transitions
elm_transit_chain_transit_add(t1, t2);
elm_transit_chain_transit_add(t2, t3);
elm_transit_chain_transit_add(t3, t4);

// Starting the transitions
elm_transit_go(t1);
</pre>


<p>To manage the transition chain:</p>
<ul>
<li>
<p>To create a looped animation chain, you have to use low-level components provided by the Ecore and Evas transition libraries, or you can use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_del_cb_set()</span> function to define a callback function for when a transition gets deleted. This way, you can recreate your objects and reiterate the transition chain as soon as the last transition ends.</p>

<pre class="prettyprint">
elm_transit_del_cb_set(Elm_Transit *transit, Elm_Transit_Del_Cb cb, void *data)
</pre>

<p>The first parameter is the transition object. The second parameter is the callback function to run on transition delete. The third parameter is the data to pass to the callback function.</p>
<p>Note that you cannot use transition chaining to make a loop animation, since the transit object is automatically destroyed as soon as the transition completes. Therefore, you cannot do something like this:</p>

<pre class="prettyprint">
elm_transit_chain_transit_add(t4, t1);
</pre>
</li>
<li>
<p>You can severe the chain relationship between 2 transits with the <span style="font-family: Courier New,Courier,monospace;">elm_transit_chain_transit_del()</span> function:</p>

<pre class="prettyprint">
elm_transit_chain_transit_del(Elm_Transit *transit, Elm_Transit *chain_transit)
</pre>

<p>The first parameter is the first transition in the chain. The second parameter is the second transition in the chain.</p>
</li>
<li>
<p>To get the current chain transit list, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_chain_transits_get()</span> function.</p>
</li>
</ul>
<h2 id="Animation_Timeline" name="Animation_Timeline">Managing Animation Timeline</h2>
<p>To manage the animation timeline:</p>
<ul>
<li>
<p>After you have defined all the properties that define your transition, start the transition with the <span style="font-family: Courier New,Courier,monospace;">elm_transit_go()</span> function:</p>

<pre class="prettyprint">
elm_transit_go(Elm_Transit *transit)
</pre>
</li>
<li>
<p>You can maintain full control over the execution process even after the transition has started. You can pause the transition by setting the paused parameter to <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>:</p>

<pre class="prettyprint">
elm_transit_paused_set(Elm_Transit *transit, Eina_Bool paused)
</pre>
</li>
<li>
<p>You can resume the transition with the same function but setting the paused parameter to <span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span>. If you want to know whether the transition is currently paused, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_paused_get()</span> function.</p>
</li>
<li>
<p>You can remain informed about the present transition flow and get the current frame with the <span style="font-family: Courier New,Courier,monospace;">elm_transit_progress_value_get()</span> function. This function returns the timeline position of the animation, ranging between 0.0 (start) and 1.0 (end).</p>
</li>
</ul>

<h2 id="Custom_Transition" name="Custom_Transition">Creating Custom Transitions</h2>

<p><span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> provides a standard function for defining any effect of your choosing that is applied to some context data:</p>

<pre class="prettyprint">
elm_transit_effect_add(Elm_Transit *transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_Transition_Cb transition_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect *effect,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Transit_Effect_End_Cb end_cb)
</pre>

<p>The first parameter is the transition target of the new effect. The second parameter is the transition callback function. The third parameter is the new effect. The fourth parameter is the callback function to call at the end of the effect.</p>

<p>As described earlier in this programming guide, this function embraces 3 callbacks that allows you to define every aspects of your transition from its creation to its deletion.</p>

<p>To build a custom resizing animation:</p>
<ol>
<li>
<p>Define a structure capable of holding the context information about resizing an Evas object:</p>

<pre class="prettyprint">
typedef struct
{
&nbsp;&nbsp;&nbsp;struct _size
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;from, to;
}
Custom_Effect;
</pre>
</li>
<li>
<p>Implement the custom resizing callback function. This function takes the following parameters:</p>

<ul>
<li>The context data that holds the custom properties of our transition, which are used as parameters to calculate the interpolation.</li>
<li>The transit object that contains the list of our Evas objects to animate and all the information, such as duration, auto-reverse, looping.</li>
<li>The progress (position along the animation timeline) that ranges from 0.0 to 1.0 and allows us to calculate the desired interpolation for each frame.</li>
</ul>

<pre class="prettyprint">
static void
_custom_op(void *data, Elm_Transit *transit, double progress)
{
&nbsp;&nbsp;&nbsp;if (!data) return;
&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;Evas_Object *obj;
&nbsp;&nbsp;&nbsp;const Eina_List *elist;
&nbsp;&nbsp;&nbsp;Custom_Effect *custom_effect = data;
&nbsp;&nbsp;&nbsp;const Eina_List *objs = elm_transit_objects_get(transit);
&nbsp;&nbsp;&nbsp;if (progress &lt; 0.5)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = custom_effect-&gt;from.h + (custom_effect-&gt;to.h * progress * 2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = custom_effect-&gt;from.w;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = custom_effect-&gt;from.h + custom_effect-&gt;to.h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;w = custom_effect-&gt;from.w + (custom_effect-&gt;to.w * (progress - 0.5) * 2);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(objs, elist, obj)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(obj, w, h);
}
</pre>

<p>The callback function above resizes the Evas objects in 2 steps. During the first half of the transition, only the height changes, while the width remains the same. During the second half, it is the other way around until you get to the desired size.</p>
</li>
<li>
<p>Define the context used by the animation:</p>
<pre class="prettyprint">
static void*
_custom_context_new(Evas_Coord from_w, Evas_Coord from_h, Evas_Coord to_w, Evas_Coord to_h)
{
&nbsp;&nbsp;&nbsp;Custom_Effect *custom_effect;

&nbsp;&nbsp;&nbsp;custom_effect = calloc(1, sizeof(Custom_Effect));
&nbsp;&nbsp;&nbsp;if (!custom_effect) return NULL;

&nbsp;&nbsp;&nbsp;custom_effect-&gt;from.w = from_w;
&nbsp;&nbsp;&nbsp;custom_effect-&gt;from.h = from_h;
&nbsp;&nbsp;&nbsp;custom_effect-&gt;to.w = to_w - from_w;
&nbsp;&nbsp;&nbsp;custom_effect-&gt;to.h = to_h - from_h;

&nbsp;&nbsp;&nbsp;return custom_effect;
}
</pre>
</li>
<li>
<p>Define the function that takes care of deleting all the context objects used by your custom transition and free up the allocated memory:</p>

<pre class="prettyprint">
static void
_custom_context_free(void *data, Elm_Transit *transit __UNUSED__)
{
&nbsp;&nbsp;&nbsp;free(data);
}
</pre>
</li>
<li>

<p>Apply your custom transition to your <span style="font-family: Courier New,Courier,monospace;">Elm_Transit</span> object:</p>

<pre class="prettyprint">
Elm_Transit *transit = elm_transit_add();
elm_transit_effect_add(transit,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_custom_op,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_custom_context_new(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_custom_context_free);
</pre>
</li>
<li>
<p>If you want to delete an effect from your effects list, use the <span style="font-family: Courier New,Courier,monospace;">elm_transit_effect_del()</span> function.</p>
</li>
</ol>
  
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>