<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Customizing Components</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#theme">Style, Theme, and EDC</a></li>
				<li><a href="#custom">Customization</a></li>
				</ul>	
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Customizing UI Components</h1> 

<p>This document explains how to customize UI components.
   Before learning the process of customization,
   you need to understand the concept of "style" and "theme" in EFL
   and how EFL applys the right style for a UI component.
   EFL provides EDC script as a way to define a look for UI components.
   For detailed information about how to write an EDC script,
   see <a href="learn_edc_intro_n.htm">layouting with EDC scripts</a>.</p>

<h2 id="theme">Style, Theme, and EDC</h2>

<p>The style of a UI component refers to the graphical appearance
   determined by the layout, shapes, fonts, and colors.
   A theme is a collection of styles for every UI component.
   Tizen provides a default theme for each profile and version,
   which includes all available styles of every UI component.

<p>When more than one style is defined for a UI component in the current theme,
   you can set a different style than the default one using
   <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function.
   It is also possible to see the current style with
   <span style="font-family: Courier New,Courier,monospace">elm_object_style_get()</span> function.
   The default theme of mobile profile specifies several <a href="component_check_mn.htm#style">styles</a> for check component.
   The following example shows how to set <span style="font-family: Courier New,Courier,monospace">"favorite"</span> style
   to a newly created check object.</p>

<pre class="prettyprint">
Evas_Object *check;

check = elm_check_add(parent);
elm_object_style_set(check, "favorite");
</pre>

<p>A theme is defined in <a href="learn_edc_intro_n.htm">EDC</a>
   (<span style="font-family: Courier New,Courier,monospace">.edc</span>) files,
   and they are compiled into an EDJ (<span style="font-family: Courier New,Courier,monospace">.edj</span>) file.
   An EDC file is a collection of <a href="learn_edc_group_n.htm"><span style="font-family: Courier New,Courier,monospace">group</span></a> blocks,
   and one group is composed of <a href="learn_edc_part_n.htm"><span style="font-family: Courier New,Courier,monospace">parts</span></a> and
   <a href="learn_edc_program_n.htm"><span style="font-family: Courier New,Courier,monospace">programs</span></a>.
   A theme corresponds to one EDJ file, and a style corresponds to one group in an edj file.</p>

<p>The following code snippet shows some groups in an edc file (<span style="font-family: Courier New,Courier,monospace">check.edc</span>)
   which correspond to the <a href="component_check_mn.htm#style">styles</a> of check component in mobile profile:</p>

<pre class="prettyprint">
group {
   name: "elm/check/base/default";
   ...
}

group {
   name: "elm/check/base/favorite";
   ...
}

group {
   name: "elm/check/base/on&off";
   ...
}
</pre>

<p>The groups have a certain format of names according to the naming rule of Elementary.
   These three groups define three different styles for the check component:
   <span style="font-family: Courier New,Courier,monospace">"default"</span> style,
   <span style="font-family: Courier New,Courier,monospace">"favorite"</span> style,
   and <span style="font-family: Courier New,Courier,monospace">"on&off"</span> style.</p>

<h2 id="custom">Customization</h2>

<p>It will be the best if every application can find the style it needs in the already provided theme,
   but there may be some requirements for customized styles.
   EFL allows you to define a new style and add it to an existing theme, or even make a new theme.</p>

<p>Take the following steps to customize a UI component:</p>

<ol>
   <li>Create a project for a basic EDC UI application.
       See <a href="">Creating Your First UI Application in Tizen</a> for creating a EDC UI project.</p></li>
   <li>Create an EDJ file under
       <span style="font-family: Courier New,Courier,monospace">/res/edje/</span> directory.
       If you add <span style="font-family: Courier New,Courier,monospace">custom.edc</span> file,
       SDK calls Edje tools automatically to build the final
       <span style="font-family: Courier New,Courier,monospace">custom.edj</span> file when building the project.
       The EDJ file is installed under the application's data path.
       You can get the full path of where the EDJ file is installed using
       <span style="font-family: Courier New,Courier,monospace">app_get_resource()</span> function.
       <!--You can use the EDJ file in your C code before building the project.-->
<pre class="prettyprint">
char edj_path[PATH_MAX] = {0,};

app_get_resource("/edje/custom.edj", edj_path, (int)PATH_MAX);
</pre>
       </li>
   <li>Write a style in the EDC file.</li>
   <li>Register the EDJ file in the C code. You can attach the EDJ file to an existing theme in the following ways:
      <ul>
         <li>extension - extend the default theme by adding new styles</li>
         <li>overlay - override the styles in the default theme</li>
      </ul>
      <p>The following code snippet shows how to add the new theme file as an extension:</p>
<pre class="prettyprint">
char edj_path[PATH_MAX] = {0,};

// Get the full path of the edj file
app_get_resource("/edje/custom.edj", edj_path, (int)PATH_MAX);

// Load check custom style as an extension
elm_theme_extension_add(NULL, edj_path);
</pre>
   </li>
   <li>Set the new style to the UI component.
<p>Use the <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span> style on a new check component:</p>

<pre class="prettyprint">
Evas_Object *check;

check = elm_check_add(parent);

// Set the newly defined "custom" style
elm_object_style_set(check, "custom");
</pre>
   </li>
</ol>

<p>You can see the above steps implemented in
   <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/ui_theme_extension_sd_mn.htm">ThemeExtension</a> sample.</p>

<h3>Extension and Overlay</h3>

<p>There are two ways to attach an EDJ file to an existing theme:</p>

<ul>
   <li><strong>Extension</strong>
       <p>Theme extension enables you to extend a theme with only a part of UI components' style (not all of them).
       <p>Applications can add and delete a theme to the list of extensions with the following call:</p>
<pre class="prettyprint">
elm_theme_extension_add(NULL, "./theme_button_style_custom.edj");
elm_theme_extension_del(NULL, "./theme_button_style_custom.edj");
</pre>
       <p>In the example it is assumed that the <span style="font-family: Courier New,Courier,monospace">theme_button_style_custom.edj</span> file contains a new button style called <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span>.</p>
   </li>
   <li><strong>Overlay</strong>
       <p>Theme overlay enables you to replace the look of all UI components by overriding the default style.
       If a new style called <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> is created
       for button component and it is added as an overlay, Elementary uses the overlay for all button components
       overriding the default theme.</p>

       <p>Applications can add and delete a theme to the list of overlays with the following call:</p>
<pre class="prettyprint">
elm_theme_overlay_add(NULL, "./theme_button.edj");
elm_theme_overlay_del(NULL, "./theme_button.edj");
</pre>
       <p>In the example it is assumed that <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span> file
       only contains a new theme for button component.</p>
       <p>Adding a theme with a default style as an overlay is not recommended
       since it makes Elementary to use the new theme for all the objects defined in the application.
       You must make sure that the <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span>
       file reimplements everything that was previously defined in the default theme concerning the button component.
<table class="note">
   <tbody>
      <tr>
         <th class="note">Note</th>
      </tr>
      <tr>
         <td class="note">With overlays, you can replace the default view and affect every UI component. This is very similar to setting the theme for the whole application, and probably clashes with end user options. Using overlays also runs the risk of non-matching styles across the application. Unless you have a very good reason to use them, avoid overlays.</td>
      </tr>
   </tbody>
</table>
   </li>
</ul>

<p>The following process shows how Elementary loads a style of a certain name:</p>

<ol>
   <li>Check the list of overlays registered on the current theme.</li>
   <li>If the 1st step fails to find the right style, check the default theme.</li>
   <li>If the 2nd step fails, check the list of extensions registered on the current theme.</li>
   <li>If the 3rd step fails, set the default style in this case.
   It means that the style with the certain name is not defined in the current theme.
   </li>
</ol>

<p>Let's assume that you made your own EDJ file and name a group "elm/button/base/default".
   If you use <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add</span> function,
   then the newly defined style is applied to a button object.
   If you use <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add</span> function,
   then the newly defined style is not applied
   since there is a group "elm/button/base/default" in default theme.</p>

<table class="note">
   <tbody> 
      <tr>
         <th class="note">Note</th>
      </tr>
      <tr>
         <td class="note">When using <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add()</span> function to add a new theme extension or overlay to a Theme object (the default theme), Elementary calls <span style="font-family: Courier New,Courier,monospace">elm_theme_flush()</span> function to flush Elementary theme caches. This means that the theme of all UI components that use the default theme is reloaded.</td> 
      </tr>
   </tbody> 
</table>

<h3>Example: Writing a Style for Check Component</h3>

<p>An easy way to write a style is to copy one of the existing styles and modify some parts or programs.
   The following example shows how to define a custom style of check component based on the default style.
   The aim is to update the background and the main pictures of this UI component with custom pictures.</p>

<p>When customizing a style, you need to respect the parts and signals in the default style.
   If something is missing, then it can break the UI component's behavior.
   You can add new <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts
   if you want to control more contents from the application.
   Note that removing existing <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts
   might change the UI component's behavior.

<ol>
   <li><p>Copy the group corresponding to
       the <span style="font-family: Courier New,Courier,monospace">"default"</span> style of check component
       and change the group name to create a new style called
       <span style="font-family: Courier New,Courier,monospace">"custom"</span>.
<pre class="prettyprint">
group 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/custom&quot;;
&nbsp;&nbsp;&nbsp;// Here is the copy of the content of &quot;default&quot; style 
}
</pre>
</li>
<li>
<p>Find the parts to modify. In this example, the appropriate parts are <span style="font-family: Courier New,Courier,monospace">&quot;bg&quot;</span> and <span style="font-family: Courier New,Courier,monospace">&quot;check&quot;</span>.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.offset: 1 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect: 1.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect_preference: VERTICAL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;check_base.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill.smooth: 0;
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: -2 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;check.png&quot;;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled_visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>
   </li>
   <li><p>Add the custom pictures in the custom style. The custom pictures filenames are:</p>
      <ul>
         <li><span style="font-family: Courier New,Courier,monospace">check_base_custom.png</span> for the background part</li>
         <li><span style="font-family: Courier New,Courier,monospace">check_custom.png</span> for the check part</li>
      </ul>
<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;   
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;check_base_custom.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
        
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
            
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;check_custom.png&quot;;
&nbsp;&nbsp;&nbsp;}
        
}
</pre>
      <table class="note">
         <tbody>
            <tr>
               <th class="note">Note</th>
            </tr>
            <tr>
               <td class="note">In this example, it is assumed that the custom images are the same size as the <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> images.</td>
            </tr>
         </tbody>
      </table>
   </li>
</ol>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
