<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Customizing Components</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#elm_theme">Elementary Theme</a></li>
				<li><a href="#customizing_style">Customizing a UI Component Style</a></li>
				</ul>	
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Customizing Components</h1> 
  

<p>Elementary UI components use the Edje library EDC themes to manage their look.</p>

<h2 id="elm_theme" name="elm_theme">Elementary Theme</h2>

<p>An Elementary theme is an Edje EDC file that contains groups composed of parts and programs. For more information about Edje, see <a href="theme_n.htm">Theme</a>.</p>

<h3 id="use_theme_styles" name="use_theme_styles">Using Theme Styles</h3>

<p>Elementary UI components provide a way to modify only some parts of the styles using the default theme. A style is a part of the EDC theme (a group) that concerns only 1 UI component. For example, you can create a new style for a button component to change its appearance without modifying the default theme.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">When creating a new style, you need to know how each UI component is themed, because setting another style always replaces the entire group used by the UI component. Important signals and parts must be there for the object to behave properly.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>When several styles are loaded in the current theme, you can set a different style to a specific UI component using the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function. It is also possible to see the current style with the <span style="font-family: Courier New,Courier,monospace">elm_object_style_get()</span> function.</p>

<p>The default theme specifies several styles for the button component. The following example shows how to set the <span style="font-family: Courier New,Courier,monospace">&quot;anchor&quot;</span> style for a newly created button component.</p>

<pre class="prettyprint">
Evas_Object *parent, *button;

// Create a button object 
button = elm_button_add(parent);

// Set its style to &quot;anchor&quot;
elm_object_style_set(button, &quot;anchor&quot;);
</pre>

<h3 id="load_theme_styles" name="load_theme_styles">Loading Theme Styles</h3>

<p>Once written and compiled with Edje tools, the Elementary provides 2 methods to load the style in the application theme: overlays and extensions.</p>
<p>When looking for a theme, the Elementary checks the list of overlays, if any are defined. Then it takes the default theme, and if it cannot find a theme for the UI component, it looks at the extensions list.</p>
<p>To load theme styles:</p>
  <ul>
   <li>
   <p>An overlay can replace the look of all UI components by overriding the default style. If a new style called <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> is created for the button component and add it as an overlay, the Elementary uses the overlay for all button components overriding the default theme.</p>

<p>The following example shows how to add an overlay to the application&#39;s theme.</p>

<pre class="prettyprint">
elm_theme_overlay_add(NULL, &quot;./theme_button.edj&quot;);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">In the example it is assumed that the <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span> file only contains a new theme for the button component.
	 <p>Doing this is not recommended. Adding a file as an overlay makes the Elementary use the new theme for all the button components defined in the application. You must make sure that the <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span> file reimplements everything that was previously defined in the default theme concerning the button component.</p></td> 
    </tr> 
   </tbody> 
  </table>  

<p>To remove the previously added overlay and to return to the default theme:</p>

<pre class="prettyprint">
elm_theme_overlay_del(NULL, &quot;./theme_button.edj&quot;);
</pre>
   </li>
   <li>
   <p>With extensions, it is possible to write styles that can be applied to some UI components (not all of them) by using the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function.</p>

<p>The application adds a theme to the list of extensions with the following call:</p>

<pre class="prettyprint">
elm_theme_extension_add(NULL, &quot;./theme_button_style_custom.edj&quot;);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">In the example it is assumed that the <span style="font-family: Courier New,Courier,monospace">theme_button_style_custom.edj</span> file contains a new button style called <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span>.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>To use the new <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span> style on a button component:</p>
<pre class="prettyprint">
Evas_Object *parent, *button;

// Create a button object 
button = elm_button_add(parent);

// Set its style to &quot;custom&quot; 
elm_object_style_set(button, &quot;custom&quot;);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">When using the <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add()</span> functions to add a new theme extension or overlay to a Theme object (the default theme), the Elementary calls the <span style="font-family: Courier New,Courier,monospace">elm_theme_flush()</span> function to flush the Elementary theme caches. This means that the theme of all UI components that use the default theme is reloaded.</td> 
    </tr> 
   </tbody> 
  </table> 
</li>
  </ul>

<h3 id="create_new_theme" name="create_new_theme">Creating a New Theme</h3>

<p>To create a new theme object:</p>

<pre class="prettyprint">
Elm_Theme *new_theme = elm_theme_new();
</pre>

<p>This function creates an empty specific theme that only uses the default theme. It has its own private set of extensions and overlays, which are empty by default. Specific themes do not fall back to the themes of parent objects. They are not intended for this use.</p>

<p>The following example shows how to apply this theme to a button UI component and its children:</p>

<pre class="prettyprint">
// Create a button component 
Evas_Object *button = elm_button_add();

// Set the new theme to the button component 
elm_object_theme_set(button, new_theme);
</pre>

<h2 id="customizing_style" name="customizing_style">Customizing a UI Component Style</h2>

<p>UI component themes are written in Edje EDC source files (.edc). These files are compiled with Edje tools to make an <span style="font-family: Courier New,Courier,monospace">.edj</span> file that is used by the application. For more information on using the EDC language, see <a href="theme_n.htm">Theme</a>.</p>

<p>A new Edje style can be added for a UI component. The best way is to copy the existing <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> style, rename it, and update it to your needs.</p>

<h3 id="check_custom_style" name="check_custom_style">Creating a Customized Style for the Check Component</h3>

<p>To create a customized style:</p>
<ol>
<li>
<p>Create a new style for the <span style="font-family: Courier New,Courier,monospace">check</span> component. The aim is to update the background and the main pictures of this UI component with custom pictures.</p>

<p>The EDC source file concerning the check component (the <span style="font-family: Courier New,Courier,monospace">check.edc</span> file) is composed of several groups.</p>
<p>These 2 groups define 2 different styles for the check component (the <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> style and the <span style="font-family: Courier New,Courier,monospace">&quot;toggle&quot;</span> style).</p>
<pre class="prettyprint">
group 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/default&quot;;
}

group 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/toggle&quot;;
}
</pre>
</li>
<li>
<p>Copy the group corresponding to the <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> style in a new file to create a new style called <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span>. This new style is saved in the <span style="font-family: Courier New,Courier,monospace">check_custom.edc</span> file.</p>
<pre class="prettyprint">
group 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/custom&quot;;
&nbsp;&nbsp;&nbsp;// Here is the copy of the content of &quot;default&quot; style 
}
</pre>
</li>
<li>
<p>In the new group (<span style="font-family: Courier New,Courier,monospace">elm/check/base/custom</span>), find the parts to modify. In this example, the appropriate parts are <span style="font-family: Courier New,Courier,monospace">&quot;bg&quot;</span> and <span style="font-family: Courier New,Courier,monospace">&quot;check&quot;</span>.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.offset: 1 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect: 1.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect_preference: VERTICAL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;check_base.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill.smooth: 0;
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: -2 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;check.png&quot;;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled_visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>It is assumed that you are familiar with <a href="theme_n.htm">Edje</a> and know Edje basics, and therefore not all options to be modified are detail here.</p>
</li>
<li>
<p>Add the custom pictures in the custom style.</p>
<p>The custom pictures filenames are:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">check_base_custom.png</span> for the background part</li>
   <li><span style="font-family: Courier New,Courier,monospace">check_custom.png</span> for the check part</li></ul>

<p>You must update the <span style="font-family: Courier New,Courier,monospace">image.normal</span> attribute in both parts with the custom pictures filenames to modify the pictures of this style.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;   
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;check_base_custom.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
                
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
        
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
            
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;check_custom.png&quot;;
&nbsp;&nbsp;&nbsp;}
        
}
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">In this example, it is assumed that the custom images are the same size as the <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> images.</td> 
    </tr> 
   </tbody> 
  </table> 

</li>
</ol>

<h3 id="add_theme_to_project" name="add_theme_to_project">Adding the Theme File to Your Project</h3>

<p>Once written, the <span style="font-family: Courier New,Courier,monospace">check_custom.edc</span> file is put in the <span style="font-family: Courier New,Courier,monospace">/res/edje/</span> directory of the application project in the SDK.</p>

<p>When building the application, the SDK calls the Edje tools automatically to build the final <span style="font-family: Courier New,Courier,monospace">check_custom.edj</span> file. This file can be loaded from our application.</p>

<h3 id="use_new_style" name="use_new_style">Using the New Style</h3>

<p>To use the new style:</p>
<ol>
<li>
<p>Add the new theme file as an extension in the application:</p>

<pre class="prettyprint">
char edj_path[PATH_MAX] = {0,};

// Get the full path of the edj file 
app_get_resource(&quot;/edje/check_custom.edj&quot;, edj_path, (int)PATH_MAX);

// Load check custom style as an extension 
elm_theme_extension_add(NULL, edj_path);
</pre>
</li>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">&quot;custom&quot;</span> style on a new check component:</p>

<pre class="prettyprint">
Evas_Object *parent, *check;

// Create a check object 
check = elm_check_add(parent);

// Set its style to &quot;custom&quot; 
elm_object_style_set(check, &quot;custom&quot;);
</pre>
</li>
</ol>

<h3 id="special_theme_parts" name="special_theme_parts">Special Theme Parts</h3>

<p>Some parts of the EDC file can be interacted with the Elementary. The content of parts of the <span style="font-family: Courier New,Courier,monospace">TEXT</span> type are modified using the <span style="font-family: Courier New,Courier,monospace">elm_object_part_set_text()</span> function. The content of <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts is updated using the <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function.</p>

<h4 id="swallow_parts" name="swallow_parts">Swallow Parts</h4>

<p>In the previous example (the check component <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> style), there is a part called <span style="font-family: Courier New,Courier,monospace">&quot;elm.swallow.content&quot;</span> that is of the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> type.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm.swallow.content&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to_x: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 1.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to_x: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.offset: 1 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 1.0 1.0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect: 1.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 16 16;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 128;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled_visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect: 1.0 1.0;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>You can push content (<span style="font-family: Courier New,Courier,monospace">Evas_Object</span>) to this part from the application anytime. The size and position of the content pushed is controlled by the EDC theme.</p>

<pre class="prettyprint">
Evas_Object *parent, *check1, *content;

// Create a check object 
check1 = elm_check_add(parent);

// Set the content of the check object 
elm_object_part_content_set(check1, &quot;elm.swallow.content&quot;, content);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">You can add new <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts when customizing a UI component&#39;s style, if you want to be able to control more content from the application. Note that removing existing <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts changes the UI component&#39;s behavior.</td> 
    </tr> 
   </tbody> 
  </table> 

<h4 id="text_parts" name="text_parts">Text Parts</h4>

<p>The same is done with parts of the type <span style="font-family: Courier New,Courier,monospace">TEXT</span>. The check <span style="font-family: Courier New,Courier,monospace">&quot;default&quot;</span> style contains a part named <span style="font-family: Courier New,Courier,monospace">&quot;elm.text&quot;</span>.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;elm.text&quot;;
&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to_x: &quot;elm.swallow.content&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 1.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 1.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.offset: -2 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Sans,Edje-Vera&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 10;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 0 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: -1.0 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.min: 1 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color3: 0 0 0 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled_visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color3: 0 0 0 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text.min: 1 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The following example shows how to modify the content of the <span style="font-family: Courier New,Courier,monospace">&quot;elm.text&quot;</span> part from the application. The position of the text, its size, color, look and feel are managed by the EDC theme.</p>

<pre class="prettyprint">
Evas_Object *parent, *check2;

// Create a check object 
check2 = elm_check_add(parent);

// Set the text of the check object 
elm_object_part_text_set(check2, &quot;elm.text&quot;, &quot;Test text&quot;);
</pre>


<p>For more details about customizing the look and feel of the UI components with custom styles, which are not provided as defaults, see the <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/ui_theme_extension_sd_mn.htm">ThemeExtension</a> sample.</p> 
  
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>