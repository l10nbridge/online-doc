<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating a Form for a Basic Application Layout</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#create">Creating a Single-window Application</a></li>
			<li><a href="#naviframe">Creating a Naviframe for Switching Views</a></li>
			<li><a href="#list">Creating a Contact List</a></li>
			<li><a href="#form">Creating a Contact Details Form</a></li>	
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating a Form for a Basic Application Layout</h1>

  
<p>This tutorial explains how to create a basic application that has a single window and multiple views: contact list view and contact details form view (displaying and editing contact information when an item is selected on the contact list).</p>

 <h2 id="create" name="create">Creating a Single-window Application</h2>

<p>To create an elementary application with a single window, use the following code:</p>
<pre class="prettyprint">static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}

int
main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;appdata_s ad = { 0 };
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = { 0 };

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;

&nbsp;&nbsp;&nbsp;// Zero out the structure
&nbsp;&nbsp;&nbsp;memset(&amp;ad, 0x0, sizeof(struct appdata));

&nbsp;&nbsp;&nbsp;// Run the mainloop
&nbsp;&nbsp;&nbsp;return ui_app_main(&amp;argc, &amp;argv, &amp;event_callback, &amp;ad);
}
</pre> 

 <h2 id="naviframe" name="naviframe">Creating a Naviframe for Switching Views</h2>

<p>Use a naviframe in this application to switch between different views. The first displayed view is the contact list. When an item is selected in this list, information on the contact is displayed in a contact details form. Both the list and form views are opened in a naviframe, which handles the transition between the views. It also creates a back button in the title area, and when the button is clicked, launches the transition, deletes the form view, and shows the contact list again.</p>

	<p class="figure">Figure: Views (list and form)</p> 
    <p align="center"><img alt="Form tutorial: list" src="../../images/screenshot_2.png" /> <img alt="Form tutorial: form" src="../../images/screenshot_1.png" /></p>

<p>To create a back button in the title area automatically, call the <span style="font-family: Courier New,Courier,monospace">elm_naviframe_prev_btn_auto_pushed_set()</span> function with <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> (second parameter). This function decides whether a back button is automatically created in the views pushed later.</p>
	
<p>Since the naviframe is the main layout of the window, it takes all the available space. To configure the naviframe size, use the <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> function to add the naviframe object (second parameter) to the main window (first parameter). To ensure that the naviframe covers the entire window area, call the <span style="font-family: Courier New,Courier,monospace">evas_object_resize_hint_weight_set()</span> function on the naviframe object to force the naviframe to fill its parent (the main window). The naviframe object expands in both X and Y directions.</p>
<p>In the end, show the naviframe object on the screen.</p>
<pre class="prettyprint">
// Create the naviframe
naviframe = elm_naviframe_add(win);
elm_naviframe_prev_btn_auto_pushed_set(naviframe, EINA_TRUE);
evas_object_size_hint_weight_set(naviframe, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(win, naviframe);
evas_object_show(naviframe);
</pre> 

 <h2 id="list" name="list">Creating a Contact List</h2>

<p>To create a contact list:</p>
<ol>
<li>
<p>Handle the contact list with the <span style="font-family: Courier New,Courier,monospace">_create_contact_list()</span> function. This function takes the parent object (naviframe) as the parameter and returns the genlist. To create the genlist, use the following code:</p>
<pre class="prettyprint">
static Evas_Object *
_create_contact_list(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *list;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;// Create a new genlist
&nbsp;&nbsp;&nbsp;list = elm_genlist_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_show(list);

&nbsp;&nbsp;&nbsp;// Create a new item class for the genlist
&nbsp;&nbsp;&nbsp;itc = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;itc-&gt;item_style = &quot;default&quot;;
&nbsp;&nbsp;&nbsp;// Set the callback used when the genlist text is created
&nbsp;&nbsp;&nbsp;itc-&gt;func.text_get = _genlist_text_get;
&nbsp;&nbsp;&nbsp;// Set the callback be used when the content of the item is created
&nbsp;&nbsp;&nbsp;itc-&gt;func.content_get = _genlist_content_get;
&nbsp;&nbsp;&nbsp;itc-&gt;func.state_get = NULL;
&nbsp;&nbsp;&nbsp;itc-&gt;func.del = NULL;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">itc</span> static variable contains the item class. The item class contains all functions that are called back when an item is created. In this case, create the <span style="font-family: Courier New,Courier,monospace">_genlist_text_get()</span> (for labels) and <span style="font-family: Courier New,Courier,monospace">_genlist_content_get()</span> (for icons) callbacks. These functions are called when labels and icons of the genlist item are created.</p>

<p>The contact list is contained in an array of Contacts.</p>
<pre class="prettyprint">
typedef struct 
_Contact Contact;

struct 
_Contact
{
&nbsp;&nbsp;&nbsp;const char *name;
&nbsp;&nbsp;&nbsp;const char *mobile;
&nbsp;&nbsp;&nbsp;const char *address;
&nbsp;&nbsp;&nbsp;const char *email;
&nbsp;&nbsp;&nbsp;const char *icon;
};

static 
Contact contacts[] = 
{
&nbsp;&nbsp;&nbsp;{&quot;Alexander Holmes&quot;, &quot;+1234567896&quot;, &quot;&quot;, &quot;alexander_holmes@tizen.org&quot;, &quot;c1.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Lara Alvaréz&quot;, &quot;+9876543216&quot;, &quot;&quot;, &quot;lara_alvares@tizen.org&quot;, &quot;c2.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Aksel Møller&quot;, &quot;+1679432846&quot;, &quot;&quot;, &quot;aksel_moller@tizen.org&quot;, &quot;c3.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Anir Amghar&quot;, &quot;+1679432846&quot;, &quot;&quot;, &quot;anir_amghar@tizen.org&quot;, &quot;c4.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Noémie Cordier&quot;, &quot;+1679432846&quot;, &quot;&quot;, &quot;noemie_cordier@tizen.org&quot;, &quot;c5.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Henry Thompson&quot;, &quot;+1679432846&quot;, &quot;&quot;, &quot;henry_thompson@tizen.org&quot;, &quot;c6.png&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Mai Phan&quot;, &quot;+1679432846&quot;, &quot;&quot;, &quot;mai_phan@tizen.org&quot;, &quot;c7.png&quot;},
};
</pre>
</li>
<li>
<p>Create a genlist item for each item of the array with the following code:</p>
<pre class="prettyprint">
// Create a genlist item for each item in the contacts array
for (i = 0; i &lt; EINA_C_ARRAY_LENGTH(contacts); i++)
{
&nbsp;&nbsp;&nbsp;// Append the item, add a callback when the item is selected, and use the
&nbsp;&nbsp;&nbsp;// current contact item as data pointer for the callbacks
&nbsp;&nbsp;&nbsp;elm_genlist_item_append(list, itc, &amp;contacts[i], NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, _contact_selected_cb, &amp;contacts[i]);
}
</pre>

<p>Attach the <span style="font-family: Courier New,Courier,monospace">_contact_selected_cb()</span> callback function to the genlist item. When an item is selected in the list, the data pointer passed as the parameter calls this function. In this example, it is a pointer on the contact. Pass the contact in the array to all the item class callbacks.</p>
</li>
<li>
<p>Push the list at the top of the naviframe:</p>
<pre class="prettyprint">
// Create the list of contacts
list = _create_contact_list(win);

// Push the list on top of the naviframe
elm_naviframe_item_push(naviframe, &quot;Contact List&quot;, NULL, NULL, list, NULL);
</pre>
</li>
<li>
<p>Call the item class functions, the <span style="font-family: Courier New,Courier,monospace">_genlist_text_get()</span> function first:</p>
<pre class="prettyprint">
static char *
_genlist_text_get(void *data, Evas_Object *obj EINA_UNUSED, const char *part)
{
&nbsp;&nbsp;&nbsp;Contact *contact = data;

&nbsp;&nbsp;&nbsp;// Return a new allocated string for the contact name
&nbsp;&nbsp;&nbsp;return strdup(contact-&gt;name);
}
</pre>

<p>These functions show the index of the contact in the array and return a freshly allocated string with the name of the contact.</p>
<p>When an item in the list is selected, a callback registers on the select signal and calls the corresponding function; in this case, <span style="font-family: Courier New,Courier,monospace">_contact_selected_cb()</span>. The index of the array passed in the data is retrieved and the form on contact information based on this index is created.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">_genlist_content_get</span> function is called several times depending on the style of the created item. In this case, with the default style for the genlist item, there are 2 different swallow parts. A swallow part is a container in the edje file of the genlist item, which can contain an Evas object. The following figure shows the layout of different parts in the theme.</p>


<p class="figure">Figure: Genlist item</p> 
<p align="center"><img alt="Genlist item" src="../../images/genlist_item.png" /></p>   
 

<p>There are 2 <span style="font-family: Courier New,Courier,monospace">elm.swallow</span> parts. When the callback function for the icon creation is called, the part name is passed through the <span style="font-family: Courier New,Courier,monospace">part</span> variable. Compare this variable to <span style="font-family: Courier New,Courier,monospace">elm.swallow.icon</span> for the first object and to <span style="font-family: Courier New,Courier,monospace">elm.swallow.end</span> for the icon at the end.</p>
</li>
</ol>

<h3>Creating the Icon</h3>
<p>Create the icon when the callback is recognized. This example uses an <span style="font-family: Courier New,Courier,monospace">elm_icon</span> object.</p>
<pre class="prettyprint">
static Evas_Object *
_genlist_content_get(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;Contact *contact = data;

&nbsp;&nbsp;&nbsp;// Test which part is being created
&nbsp;&nbsp;&nbsp;if (!strcmp(part, &quot;elm.swallow.icon&quot;))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char filename[PATH_MAX];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create a new icon
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *ic = elm_icon_add(obj);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set the filename of the file which is to be loaded
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(filename, sizeof(filename), &quot;%s%s&quot;, ICON_PATH, contact-&gt;icon);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_image_file_set(ic, filename, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Keep the ratio squared
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Return the icon
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ic;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>

<p>In case the part is <span style="font-family: Courier New,Courier,monospace">elm.swallow.end</span>, the return is NULL and no icon is added.</p>
<p>A genlist can seem like an unnecessarily complex structure with its separate callbacks for creating items. However, in a list with thousands of elements, it is quite efficient not to create the graphical items for all list elements at once. Instead only the elements currently displayed on the screen are created through the callbacks. And when the list is scrolled, further callbacks create new elements as they are needed.</p>

  <table class="note"> 
   <tbody> 
  <tr> 
   <th class="note">Note</th> 
  </tr> 
  <tr> 
   <td class="note">When the genlist is first created, the Elementary needs to know the height of the list. All elements in the list are not necessarily the same size due to different kind of styles. Thus, the Elementary creates all elements once to know the size, and display the scroll bars correctly. If all your items have the same height, you can save CPU time by using the <span style="font-family: Courier New,Courier,monospace">elm_genlist_homogeneous_set()</span> function to impose the same height to all items. In this case, the Elementary does not create the complete list, as the global size is a multiple of the height of the first item.</td> 
  </tr> 
   </tbody> 
  </table> 
  
 <h2 id="form" name="form">Creating a Contact Details Form</h2>
<p>The contact details form is created inside the <span style="font-family: Courier New,Courier,monospace">_create_contact_form()</span> function. This function takes a parent <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> and a contact item as parameters, and returns an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>. The parent is the naviframe object, and the contact item contains the information on the contact.</p>
<p>To display the various information about the contact, this example uses boxes.</p>

   <p class="figure">Figure: Contact form layout</p> 
   <p align="center"><img alt="Contact form layout" src="../../images/form_contact_layout.png" /></p>

<p>To create a contact form:</p>
<ol>
<li>
<p>Create a vertical box:</p>
<pre class="prettyprint">
vbox = elm_box_add(parent);
elm_box_align_set(vbox, 0, 0);
evas_object_show(vbox);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">elm_box_align_set()</span> function keeps the box element aligned to the top left corner.</p>
</li>
<li>
<p>Create an icon in the genlist item with the <span style="font-family: Courier New,Courier,monospace">_genlist_content_get()</span> function. For a bigger icon, set the minimum size of the icon object to 96 x 96 px.</p>
</li>
<li>
<p>Add the icon object at the end of the vertical box with the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> function. As the icon is the first object added, it is displayed at the top of the box.</p>
<pre class="prettyprint">
ic = elm_icon_add(vbox);
snprintf(filename, sizeof(filename), &quot;%s%s&quot;, ICON_PATH, contact-&gt;icon);
elm_image_file_set(ic, filename, NULL);
evas_object_size_hint_min_set(ic, 96, 96);
evas_object_show(ic);
elm_box_pack_end(vbox, ic);
</pre>
</li>
<li>
<p>Add the information on the contact: the name, the mobile phone number, the postal address, and the email address. For each information item, create a label and an edit line. The label defines the information type, and the edit box contains the actual information. To set the UI components in a horizontal layout, use a horizontal box.</p>
</li>
<li>
<p>Change the orientation of the box with the <span style="font-family: Courier New,Courier,monospace">elm_box_horizontal_set()</span> function. To add space between the elements of the vertical box, set padding to 32 px. To set the item of the box not to expand vertically, use the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_weight_set()</span> function.</p>
<pre class="prettyprint">
hbox = elm_box_add(vbox);
elm_box_horizontal_set(hbox, EINA_TRUE);
elm_box_padding_set(hbox, 32, 32);
evas_object_size_hint_weight_set(hbox, EVAS_HINT_EXPAND, 0);
evas_object_size_hint_align_set(hbox, EVAS_HINT_FILL, 0);
evas_object_show(hbox);
</pre>
</li>
<li>
<p>Create the label object, which is an <span style="font-family: Courier New,Courier,monospace">elm_label</span>. Set its text, and do not align or expand it.</p>
<pre class="prettyprint">
label = elm_label_add(hbox);
elm_object_text_set(label, form_items[i]);
evas_object_size_hint_weight_set(label, 0, 0);
evas_object_size_hint_align_set(label, 0, 0);
evas_object_show(label);
</pre>
</li>
<li>
<p>Create the edit line, which is an <span style="font-family: Courier New,Courier,monospace">elm_entry</span>:</p>
<pre class="prettyprint">
edit = elm_entry_add(hbox);
evas_object_size_hint_weight_set(edit, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(edit, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(edit);
</pre>
</li>
<li>
<p>Add the label and the edit inside the horizontal box and add the horizontal box to the vertical box:</p>
<pre class="prettyprint">
elm_box_pack_end(hbox, label);
elm_box_pack_end(hbox, edit);

elm_box_pack_end(vbox, hbox);
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
