<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Creating Edje Animations</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#Animating_Rectangle">Moving a Rectangle</a></li>
			<li><a href="#Rotate">Rotating a Rectangle</a></li>
			<li><a href="#Color">Changing the Rectangle Color</a></li>
            <li><a href="#startup">Starting an Application with an Animation</a></li>
            <li><a href="#click">Starting an Animation with a Mouse Click</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje__Group.html">Edje API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Creating Edje Animations</h1>

<p>The following examples demonstrate how you can use Edje (EDC file) to create various animations, and animate objects at different points of the application life-cycle.</p>

<h2 id="Animating_Rectangle" name="Animating_Rectangle">Moving a Rectangle</h2>

<p>This example shows how to animate the move of a rectangle. The rectangle is originally positioned in the top left corner of the window, and the animation moves it linearly to the bottom right corner in 5 seconds.</p>
<p>To animate a rectangle move:</p>

<ol>
<li>
<p>Define a part called <span style="font-family: Courier New,Courier,monospace;">rectangle</span> with the <span style="font-family: Courier New,Courier,monospace;">RECT</span> type and  2 descriptions (or states).</p>
<p>In the first state, the rectangle is located in the top left corner, and in the second state, it is in the bottom right corner.</p>
<p>The <span style="font-family: Courier New,Courier,monospace;">rectangle</span> part descriptions share the same name, but have a different version (<span style="font-family: Courier New,Courier,monospace;">0.0</span> and <span style="font-family: Courier New,Courier,monospace;">0.5</span>).</p>

<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;main&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 0.3 0.1;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.7 0.9;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>
<li>
<p>To create the move animation, define a program block that switches the object from its current state to another.</p>
<p>The program defines when and how to change the state, and it is called when a signal is received from a source. In this case, the program is called when the <span style="font-family: Courier New,Courier,monospace;">load</span> signal is received from any source.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;programs 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;animation,state1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
</pre>
</li>
<li>
<p>The action defines what the program does when the signal arrives. In this case, the state is changed to <span style="font-family: Courier New,Courier,monospace;">&quot;default&quot; 0.5</span>.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 0.5;
</pre>
</li>
<li>
<p>The target defines the component for which the action is performed. In this case, the <span style="font-family: Courier New,Courier,monospace;">rectangle</span> part&#39;s state is changed.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;rectangle&quot;;
</pre>
</li>
<li>
<p>The program can use a transition to perform the action. In this case, the state switch (the move of the rectangle) is performed linearly in 5 seconds.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transition: LINEAR 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h2 id="Rotate" name="Rotate">Rotating a Rectangle</h2>

<p>The Edje library allows you to rotate objects using the <span style="font-family: Courier New,Courier,monospace;">map</span> block. The following example builds on the rectangle example in the previous use case. It adds a new description block (state) to the <span style="font-family: Courier New,Courier,monospace;">rectangle</span> part, to allow you to rotate the rectangle 120 degrees on the Z axis.</p>

<p>To rotate the rectangle:</p>
<ol>
<li>
<p>To enable the rectangle rotation, add a <span style="font-family: Courier New,Courier,monospace;">map</span> block to the default state of the <span style="font-family: Courier New,Courier,monospace;">rectangle</span> part to define the original position of the rectangle:</p>

<pre class="prettyprint">
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 0.3 0.1;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">map</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">{</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">on: 1;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">smooth: 1;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">perspective_on: 1;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">rotation</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">{</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">z: 0;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">x: 0;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">y: 0;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">}</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">}</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 255 255;
&nbsp;&nbsp;&nbsp;}
</pre>

<p>Within the <span style="font-family: Courier New,Courier,monospace;">map</span> block:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">on: 1;</span>:
<p>Enables the map on the object.</p></li>
<li><span style="font-family: Courier New,Courier,monospace;">perspective_on: 1;</span>: 
<p>Enables the perspective when rotating, even without a perspective point object.</p></li>
<li><span style="font-family: Courier New,Courier,monospace;">smooth: 1;</span>: 
<p>Enables a smooth map rendering.</p></li>
<li><span style="font-family: Courier New,Courier,monospace;">rotation</span> block:
<p>The rotation properties define the default rotation of the object on the X, Y, and Z axes.</p></li>
</ul>
</li>
<li>
<p>To determine the position of the rectangle after the rotation, add a new <span style="font-family: Courier New,Courier,monospace;">rotate</span> state:</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.rotation.z: 120;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">rotate</span> state inherits all the default state properties, but changes the value of the <span style="font-family: Courier New,Courier,monospace;">map.rotation.z</span> property from 0&deg; to 120&deg; to make the rectangle rotate 120 degrees around the Z axis.</p>
</li>
<li>
<p>Add a new program block to change the rectangle state to <span style="font-family: Courier New,Courier,monospace;">rotate</span>.</p>
<p>In this case, the program runs when the user right-clicks the rectangle with a mouse. The actual rotation is performed linearly in 5 seconds.</p>

<pre class="prettyprint">
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,rotate&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,3&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;transition: LIN 5;
}
</pre>
</li>
</ol>

<h2 id="Color" name="Color">Changing the Rectangle Color</h2>

<p>This example builds on the rectangle example in the previous use case. It adds a new description block (state) to the <span style="font-family: Courier New,Courier,monospace;">rectangle</span> part, to allow you to change the rectangle color.</p>

<p>To change the rectangle color:</p>
<ol>
<li>
<p>To define the new color for the rectangle, add a new <span style="font-family: Courier New,Courier,monospace;">color</span> state:</p>

<pre class="prettyprint">
description 
{ 
&nbsp;&nbsp;&nbsp;state: &quot;color&quot; 0.0;
&nbsp;&nbsp;&nbsp;rel1 {relative: 0.3 0.3;}
&nbsp;&nbsp;&nbsp;rel2 {relative: 0.7 0.4;}
&nbsp;&nbsp;&nbsp;color: 255 0 0 255;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">color</span> state moves the rectangle and modifies the value of the <span style="font-family: Courier New,Courier,monospace;">color</span> property to change the original blue color to red.</p>
</li>
<li>
<p>Add a new program block to change the rectangle state to <span style="font-family: Courier New,Courier,monospace;">color</span>.</p>
<p>In this case, the program runs when the user clicks the rectangle with a mouse. The actual color change is performed sinusoidally in 2 seconds.</p>

<pre class="prettyprint">
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,color&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,1&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;color&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;rectangle&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 2;
}
</pre>
</li>
</ol>

<h2 id="startup" name="startup">Starting an Application with an Animation</h2>

<p>The following example creates animations that are run at the application start-up to set up the UI in style:</p>
<ul>
<li>A bounce transition brings in a logo image from the top left corner of the screen, and bounces it through the screen to end at the bottom.</li>
<li>A linear transition moves a window title from the top left corner close to the top right corner while increasing the font size of the text.</li>
</ul>

<p>To create the start-up animations:</p>

<ol>
<li>Create a UI application project in the IDE. The easiest option is to use a template targeted for EFL UI applications as a basis for the application. 
<p>By default, the basic template produces an empty window with a title. In this example, a Tizen logo is added to the window and the behavior of the window title is changed.</p>
</li>
<li>To create the bounce transition:
<ol type="a">
<li>
<p>The images used by the Edje file are stored in the <span style="font-family: Courier New,Courier,monospace">edje/images</span> directory of the application.</p>
<p>Copy the Tizen logo included in the basic template (<span style="font-family: Courier New,Courier,monospace">shared/res/&lt;yourapplicationname&gt;.png</span>) to the <span style="font-family: Courier New,Courier,monospace">edje/images</span> directory, and add the image to the <span style="font-family: Courier New,Courier,monospace">images</span> block in the EDC file:</p>
<pre class="prettyprint">
images
{
&nbsp;&nbsp;&nbsp;image: &quot;tizen-logo.png&quot; COMP;
}
</pre>
</li>

<li>
<p>Add a part block for the logo image.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">logo</span> part has the <span style="font-family: Courier New,Courier,monospace">IMAGE</span> type and 2 states that describe the appearance of the part, such as its size, position, and color:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">default</span> state definition is in the first <span style="font-family: Courier New,Courier,monospace">description</span> block of the part, and defines the maximum and minimum sizes of the image with the <span style="font-family: Courier New,Courier,monospace">min</span> and <span style="font-family: Courier New,Courier,monospace">max</span> properties, the actual image file with the <span style="font-family: Courier New,Courier,monospace">image.normal</span> property, and the default position with the <span style="font-family: Courier New,Courier,monospace">rel1</span> and <span style="font-family: Courier New,Courier,monospace">rel2</span> properties.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">down-state</span> state is the second state, and it inherits all of the <span style="font-family: Courier New,Courier,monospace">default</span> state properties, except for the position, which is at the bottom of the application window.</li>
</ul>
<p>These 2 states are the start and end states of the bounce transition.</p>
<pre class="prettyprint">
// Logo image
part
{
&nbsp;&nbsp;&nbsp;name: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;tizen-logo.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 0.0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.92;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.05 1.0;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Add a program to the programs block to create the animation.</p>
<p>The program is named <span style="font-family: Courier New,Courier,monospace">animation,state1</span> and it is started when the application receives the <span style="font-family: Courier New,Courier,monospace">load</span> signal immediately on start-up. The program runs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action on the target (the <span style="font-family: Courier New,Courier,monospace">logo</span> part) and changes the object state from <span style="font-family: Courier New,Courier,monospace">default</span> to <span style="font-family: Courier New,Courier,monospace">down-state</span>.</p>
<p>To switch from one state to another with a falling and bouncing effect, the program uses a 2.5-second <span style="font-family: Courier New,Courier,monospace">BOUNCE</span> transition with 5 bounces and 0 bounce decay.</p>
<pre class="prettyprint">
// Bounce transition
programs
{
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;animation,state1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transition: BOUNCE 2.5 0.0 5.0;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>
</li>
<li>To create the linear transition:
<ol type="a">
<li>
<p>Since the window title is included in the project template, the EDC file contains a part for the title by default. Modify the part to allow for the title to move horizontally and grow in size.</p>
<p>The title part requires 2 description blocks (states), which define the start and end position and size of the title.</p>
<pre class="prettyprint">
part
{
&nbsp;&nbsp;&nbsp;name: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;mouse_events: 0;

&nbsp;&nbsp;&nbsp;// Start state
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">rel1 {relative: 0.0 0.0;}</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 0.0 0.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">size: 24;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// End state
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;Bigger&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">rel1 {relative: 0.75 0.0;}</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 0.0 0.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">size: 28;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Add a program block to create the linear transition animation similarly as the bounce transition animation.</p>
<p>The program is named <span style="font-family: Courier New,Courier,monospace">animation,bigtitle</span> and it is started when the application receives the <span style="font-family: Courier New,Courier,monospace">load</span> signal immediately on start-up. The program runs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action on the target (the <span style="font-family: Courier New,Courier,monospace">txt_title</span> part) and changes the object state from <span style="font-family: Courier New,Courier,monospace">default</span> to <span style="font-family: Courier New,Courier,monospace">Bigger</span> with a linear 5-second transition.</p>

<pre class="prettyprint">
// Move the title and make it bigger
program
{
&nbsp;&nbsp;&nbsp;name: &quot;animation,bigtitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;Bigger&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 5.0;
}
</pre>
</li>
</ol>
</li>
</ol>

<h2 id="click" name="click">Starting an Animation with a Mouse Click</h2>

<p>The animations in the previous use case are run automatically at the application start-up, and require no user interaction. This use case builds on the previous example, but also takes advantage of user actions by animating a part when another part is clicked.</p>

<p>In this use case, the window title is restored to its default aspect when the small logo is clicked. In addition, 2 buttons and an additional image are created, and the additional image is made to rotate and grow based on mouse clicks on the buttons.</p>

<p>To start an animation with a mouse click:</p>

<ol>
<li>
<p>Change the title position and size back to the original state when any mouse button is clicked on the logo image.</p>
<p>The previous example created 2 states for the window title to move the title horizontally and make it grow in size. To allow the title to go back to the <span style="font-family: Courier New,Courier,monospace">default</span> state after the start-up animation, add a program block that makes the state change when the user clicks the <span style="font-family: Courier New,Courier,monospace">logo</span> image part.</p>
<p>The program starts when the application receives the <span style="font-family: Courier New,Courier,monospace">mouse,clicked,*</span> signal (any mouse button is clicked) from the <span style="font-family: Courier New,Courier,monospace">logo</span> part (<span style="font-family: Courier New,Courier,monospace">source</span>). It performs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action and sets the <span style="font-family: Courier New,Courier,monospace">default</span> state on the target (<span style="font-family: Courier New,Courier,monospace">txt_file</span> part) with a 0.5-second linear transition.</p>
<p>No changes are required in the title part or its states.</p>
<pre class="prettyprint">
// Return the title to default state
program
{
&nbsp;&nbsp;&nbsp;name: &quot;animation,normaltitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.5;
}
</pre>
</li>

<li>
Create 2 buttons:
<ol type="a">
<li><p>Create the EDC container for the rotate button.</p>
<p>You can create a button with Edje from scratch, but to save time, a <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part is used in this example to store Elementary UI components.</p>
<p>Add the <span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part, which only has a <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> type and a <span style="font-family: Courier New,Courier,monospace">default</span> state that places the button to the bottom left of the screen.</p>
<pre class="prettyprint">
// Rotate button container
part
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.10 0.80;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.30 0.90;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Create the EDC container for the grow button.</p>
<p>Similarly as for the rotate button, add a <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> type part that is placed relatively next to the <span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part.</p>
<pre class="prettyprint">
// Grow button container
part
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 1.02 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 2.02 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Create the actual UI components in the <span style="font-family: Courier New,Courier,monospace">.c</span> file. The code is added to the <span style="font-family: Courier New,Courier,monospace">create_base_ui()</span> function.</p>
<p>The default code in the project template loads the Edje layout by default. Create 2 Elementary buttons for the layout and add them to the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> containers. There is no need to set up sizes or positions, as this is already done in the EDC file.</p>
<p>Make sure to match the part name in the <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function to the one defined in the EDC file, because they are used to merge the Elementary UI component and the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part.</p>
<pre class="prettyprint">
// Create the rotate button in the window
ad-&gt;button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;button, &quot;Rotate&quot;);
// Add the button to the edje layout container called &quot;btn/rotate&quot;
elm_object_part_content_set(ad-&gt;layout, &quot;btn/rotate&quot;, ad-&gt;button);
evas_object_show(ad-&gt;button);

// Create the grow button in the window
ad-&gt;btn_up = elm_button_add(ad-&gt;win);
// Add the button to the edje layout container called &quot;btn/grow&quot;
elm_object_text_set(ad-&gt;btn_up, &quot;Grow&quot;);
elm_object_part_content_set(ad-&gt;layout, &quot;btn/grow&quot;, ad-&gt;btn_up);
evas_object_show(ad-&gt;btn_up);
</pre>
</li>
</ol>
</li>

<li>
<p>In the EDC file, create the additional image to be used as the animation target for the button click animations.</p>
<pre class="prettyprint">
// Animation target image
part
{
&nbsp;&nbsp;&nbsp;name: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
}
</pre>
<p>Add various states as description blocks to the part:</p>

<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">default</span> state defines the image file and the original position (top of the screen more or less centered) and color (red) of the image:
<pre class="prettyprint">
// Default state
description
{
&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;image {normal: &quot;tizen-logo.png&quot;;}
&nbsp;&nbsp;&nbsp;color: 255 0 0 255; // Red
&nbsp;&nbsp;&nbsp;rel1 {relative: 0.3 0.3;}
&nbsp;&nbsp;&nbsp;rel2 {relative: 0.7 0.4;}
}
</pre>
</li>
<li>To enable rotation, you need to define the start and end state of the rotation with the <span style="font-family: Courier New,Courier,monospace">map</span> block.
<p>Create the rotation start state (<span style="font-family: Courier New,Courier,monospace">rotate 0.0</span>), where the color changes to green, and the rotation is enabled with the <span style="font-family: Courier New,Courier,monospace">map</span> block and set to a 0-degree rotation on all X, Y, and Z axes:</p>
<pre class="prettyprint">
// Rotate start state
description
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;

&nbsp;&nbsp;&nbsp;map
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable map on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable smooth rendering
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smooth: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable perspective
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perspective_on: 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Apply rotations on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.x: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.y: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.z: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;color: 0 255 0 255; // Green
}
</pre>
</li>

<li>
<p>Add the rotation end state (<span style="font-family: Courier New,Courier,monospace">rotate 1.0</span>) with a rotation around the Z axis of 360 degrees.</p>
<p>This state inherits from the <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> state all its properties except for the Z axis rotation.</p>
<pre class="prettyprint">
// Rotate end state
description
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;map.rotation.z: 360;
}
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The rotation states are named the same way (<span style="font-family: Courier New,Courier,monospace">rotate</span>) with a different version. The version allows you to have more than one state with the same name. In fact, the actual name of the state is the name plus the version.</td> 
    </tr> 
   </tbody> 
  </table> 

</li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace">grow</span> state is needed to create the grow animation. In this state, change the color of the image, and increase the image size, and add an offset:</p>
<pre class="prettyprint">
// Grow state
description
{
&nbsp;&nbsp;&nbsp;state: &quot;grow&quot; 0.0;
&nbsp;&nbsp;&nbsp;color: 0 0 255 255; // Blue
&nbsp;&nbsp;&nbsp;rel1
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.2 0.2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;rel2
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.7 0.4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li></ul>
</li>

<li>
<p>To run the rotation and grow animations, create the programs to perform the required state changes.</p>

<ul>
<li>To create the rotation animation:
<p>To make the rotation animation smoother, several program blocks with different durations are created and chained together.</p>
<ol class="a">
<li>
<p>Create the first rotation program, which changes the color of the target image to green.</p>
<p>The first program changes the target image state sinusoidally from <span style="font-family: Courier New,Courier,monospace">default</span> to <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> in 0.2 seconds.</p>
<p>The program starts when the rotate button (<span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part) is clicked with any mouse button. At the end, the program calls the second rotation program (<span style="font-family: Courier New,Courier,monospace">rotate,target,2</span>).</p>
<pre class="prettyprint">
// Change the color of the target to green
program
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.2;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,target,2&quot;;
}
</pre>
</li>
<li>
<p>Create the second rotation program, which rotates the target image 360 degrees around the Z axis.</p>
<p>The second program changes the target image state sinusoidally from <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> to <span style="font-family: Courier New,Courier,monospace">rotate 1.0</span> in 0.7 seconds.</p>
<p>The program starts when the first rotation program (<span style="font-family: Courier New,Courier,monospace">rotate,target</span>) ends. At the end, the program calls the third rotation program (<span style="font-family: Courier New,Courier,monospace">rotate,end</span>).</p>
<pre class="prettyprint">
// Rotate 360 degrees
program
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target,2&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.7;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,end&quot;;
}
</pre>
</li>
<li>
<p>Create the third rotation program, which returns the target image to the original rotation position.</p>
<p>The third program changes the target image state sinusoidally from <span style="font-family: Courier New,Courier,monospace">rotate 1.0</span> back to <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> in 0.2 seconds.</p>
<p>The program starts when the second rotation program (<span style="font-family: Courier New,Courier,monospace">rotate,target,2</span>) ends.</p>

<pre class="prettyprint">
// Go back to the rotation start
program
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,end&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.2;
}
</pre>
</li>
</ol>
</li>
<li>To create the grow animation:
<ol class="a">
<li>
<p>Create a program that makes the target image grow by changing the state to <span style="font-family: Courier New,Courier,monospace">grow</span>.</p>
<p>The program starts when the grow button (<span style="font-family: Courier New,Courier,monospace">btn/grow</span> part) is clicked, and it performs a 1-second sinusoidal transition that changes both the size and color of the target image. At the end, the program calls the <span style="font-family: Courier New,Courier,monospace">go,default</span> program.</p>
<pre class="prettyprint">
// Grow the target image
program
{
&nbsp;&nbsp;&nbsp;name: &quot;grow,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;grow&quot; 0.0;
&nbsp;&nbsp;&nbsp;after: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SINUSOIDAL 1.0;
}
</pre>
</li>
<li>
<p>After the grow animation is finished, the <span style="font-family: Courier New,Courier,monospace">go,default</span> program returns the target image to the <span style="font-family: Courier New,Courier,monospace">default</span> state with a 1-second sinusoidal transition.</p>
<pre class="prettyprint">
// Return to normal (default) state
program
{
&nbsp;&nbsp;&nbsp;name: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 1.0;
}
</pre>
</li>
</ol>
</li>
</ul>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>

</html>