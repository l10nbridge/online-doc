<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Edje Animations</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#startup">Animating on Application Start-up</a>
			</li>
			<li><a href="#click">Animating Objects on Click</a>
			</li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">		
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Mobile Wearable</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Edje Animations</h1>

  
<p>One of the greatest strengths of EFL and Edje is the ability to create animations. This tutorial demonstrates how <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> can create predefined animations, but you can also use the Edje library to create your own animations.</p>

 <h2 id="startup" name="startup">Animating on Application Start-up</h2>


<p>The goal of this tutorial is to create, in an EDC (Edje Data Collection) file, an animation target and buttons to start animations.</p>
<p>To create an animation on the application start-up:</p>
<ol>
<li>
<p>Create an application using the <strong>Basic EDC UI Application</strong> template.</p>
<p>By default, the Basic EDC UI Application model produces an empty window with a title. In this example, a Tizen logo is added to the window and the behavior of the window title is changed.</p>
<p>The images used by the Edje file are stored in the <span style="font-family: Courier New,Courier,monospace">edje/images</span> directory of the application. Copy the Tizen logo available in <span style="font-family: Courier New,Courier,monospace">shared/res/&lt;yourapplicationname&gt;.png</span> into the <span style="font-family: Courier New,Courier,monospace">edje/images</span> Edje image directory, and add the image to the Edje <span style="font-family: Courier New,Courier,monospace">images</span> block:</p>
<pre class="prettyprint">
images 
{
&nbsp;&nbsp;&nbsp;image: &quot;edceffects.png&quot; COMP;
&nbsp;&nbsp;&nbsp;image: &quot;tizen-logo.png&quot; COMP;
}
</pre>
</li>
<li>
<p>Add an Edje <span style="font-family: Courier New,Courier,monospace">part</span> block using the small logo.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">logo</span> part has the <span style="font-family: Courier New,Courier,monospace">IMAGE</span> type and 2 states. The state describes the appearance of a part, such as its size, position, and color.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">default</span> state definition is in the first <span style="font-family: Courier New,Courier,monospace">description</span> block of the part:</p>
<ul>
<li>Maximum and minimum sizes in the <span style="font-family: Courier New,Courier,monospace">min</span> and <span style="font-family: Courier New,Courier,monospace">max</span> properties</li>
<li>Image to use in this part</li>
<li>Default position</li>
</ul>
<p>The second state, <span style="font-family: Courier New,Courier,monospace">down-state</span>, inherits all of the <span style="font-family: Courier New,Courier,monospace">default</span> state properties, and only changes the position to put the image at the bottom of the application window.</p>
<p>These 2 states are the start and end states of the animation.</p>
<pre class="prettyprint">
// Image using the Tizen logo
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 63 63;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image { normal: &quot;small-logo.png&quot;; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 0.0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.1 0.92;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.05 1.0;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Add a <span style="font-family: Courier New,Courier,monospace">program</span> block to the Edje <span style="font-family: Courier New,Courier,monospace">programs</span> block to create the animation.</p>
<p>This program is named <span style="font-family: Courier New,Courier,monospace">animation,state1</span> and is started when the application receives the <span style="font-family: Courier New,Courier,monospace">load</span> signal immediately on startup. It runs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action and changes the object state from default to down-state. The target of the program is the <span style="font-family: Courier New,Courier,monospace">logo</span> part.</p>
<p>To switch from one state to another, the program uses a <span style="font-family: Courier New,Courier,monospace">transition</span> property of the <span style="font-family: Courier New,Courier,monospace">BOUNCE</span> type with 3 parameters, the <span style="font-family: Courier New,Courier,monospace">bounce_decay</span>, the <span style="font-family: Courier New,Courier,monospace">number_of_bounces</span>, and the duration which is set to 5 seconds. This produces a falling and bouncing effect.</p>
<pre class="prettyprint">
// Icon drop animation
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,state1&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;down-state&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;transition: BOUNCE 2.5 0.0 5.0;
}
</pre>
</li>
<li>
<p>Add an animation for the window title to make it move from left to right with a bounce effect while growing the font size.</p>
<p>Create a new <span style="font-family: Courier New,Courier,monospace">part</span> block called <span style="font-family: Courier New,Courier,monospace">&quot;txt_title&quot;</span>, with 2 states that change the font size and position of the window title.</p>
<pre class="prettyprint">
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;mouse_events: 0;

&nbsp;&nbsp;&nbsp;// default state
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 24;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Bigger state
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;Bigger&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.75 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.0 0.0; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;font: &quot;Tizen:style=regular&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 28;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Create a <span style="font-family: Courier New,Courier,monospace">program</span> block to animate the <span style="font-family: Courier New,Courier,monospace">&quot;txt_title&quot;</span> part on start-up, just like the small Tizen logo.</p>
<pre class="prettyprint">
// Make the title bigger
program 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;animation,bigtitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;load&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;Bigger&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 5.0;
}
</pre>
<p>This program goes from the start to the end state in 5 seconds with a <span style="font-family: Courier New,Courier,monospace">LINEAR</span> effect. It automatically runs on the application start-up.</p>
</li>
</ol>


 <h2 id="click" name="click">Animating Objects on Click</h2>

<p>The animations in the previous use case are automatic and require no user interaction. This use case takes advantage of user actions, by animating a part when another part is clicked, and by making the title restore its default aspect when the small logo is clicked.</p>

<p>To animate an object based on a click:</p>
<ol>
<li>To animate the title:
<p>Use the parts and states already defined in step 2 of the previous use case. After the start-up animation, the application goes back to the <span style="font-family: Courier New,Courier,monospace">default</span> state, and there is no need to add any parts or states. You only need to add a <span style="font-family: Courier New,Courier,monospace">program</span> block that makes the transition when the user clicks the <span style="font-family: Courier New,Courier,monospace">logo</span> part.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">program</span> starts when the application receives the <span style="font-family: Courier New,Courier,monospace">mouse,clicked,*</span> signal (any mouse button is clicked) from the <span style="font-family: Courier New,Courier,monospace">logo</span> part (<span style="font-family: Courier New,Courier,monospace">source</span>). It performs the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action and sets the <span style="font-family: Courier New,Courier,monospace">default</span> state on the target (<span style="font-family: Courier New,Courier,monospace">txt_file</span> part) with a <span style="font-family: Courier New,Courier,monospace">LINEAR</span> transition.</p>
<pre class="prettyprint">
// Make the title go back to normal
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;animation,normaltitle&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;logo&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;txt_title&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.5;
}
</pre>
<p>When clicking any mouse button on the small logo, the title goes back to its original state.</p>
</li>
<li>
<p>Create the rotate part.</p>
<p>It is possible to create a button with Edje from scratch, but to save time, the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part is used in this example to store the Elementary UI components.</p>
<p>This <span style="font-family: Courier New,Courier,monospace">part</span> is called <span style="font-family: Courier New,Courier,monospace">btn/rotate</span>, and it only has a <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> type and a <span style="font-family: Courier New,Courier,monospace">default</span> state with its position being on the bottom left of the screen.</p>
<pre class="prettyprint">
// Container for the rotate button
part 
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.10 0.80;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.30 0.90;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Create the grow part.</p>
<p>This second <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part is very similar to the first one. It is placed relatively to <span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part and it is to remain next to it.</p>
<pre class="prettyprint">
// Container for the grow button
part 
{
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;name: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 1.02 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 2.02 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Create the actual UI components in the <span style="font-family: Courier New,Courier,monospace">.c</span> file. The code is added to the <span style="font-family: Courier New,Courier,monospace">create_base_ui()</span> function.</p>
<p>In the default Basic EDC UI Application, the Edje layout is loaded by default. Create 2 Elementary buttons and add them to the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> containers, without having to set up sizes or positions as this is done in the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> container.</p>
<p>Note that the <span style="font-family: Courier New,Courier,monospace">part</span> name is very important, because it is used to merge the Elementary UI component and the <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> part.</p>
<pre class="prettyprint">
// Create a button in the app window
ad-&gt;button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;button, &quot;Rotate&quot;);
// Add the button to the edje layout container called &quot;btn/rotate&quot;
elm_object_part_content_set(ad-&gt;layout, &quot;btn/rotate&quot;, ad-&gt;button);
evas_object_show(ad-&gt;button);

// Create up button in the app window
ad-&gt;btn_up = elm_button_add(ad-&gt;win);
// Add the button to the edje layout container called &quot;btn/grow&quot;
elm_object_text_set(ad-&gt;btn_up, &quot;Grow&quot;);
elm_object_part_content_set(ad-&gt;layout, &quot;btn/grow&quot;, ad-&gt;btn_up);
evas_object_show(ad-&gt;btn_up);
</pre>
</li>
<li>
<p>Create the animation target in the EDC file.</p>
<p>The following example shows the part initialization and the <span style="font-family: Courier New,Courier,monospace">default</span> state.</p>
<pre class="prettyprint">
// Animation target
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;

&nbsp;&nbsp;&nbsp;// Default state
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image { normal: &quot;tizen-logo.png&quot;; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 0 0 255; // Red
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.3 0.3; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.7 0.4; }
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>This part is an image displaying a big Tizen logo, placed on the top of the screen more or less centered.</p>
</li>
<li>
<p>Create a state to change the color and add the <span style="font-family: Courier New,Courier,monospace">map</span> block.</p>
<p>This part changes the color to green and defines the <span style="font-family: Courier New,Courier,monospace">map</span>. This statement makes rotations possible on an Edje <span style="font-family: Courier New,Courier,monospace">part</span>. Rotations are done around the X, Y, or Z axes. In this example, the map is enabled and a 0&#176; rotation is applied around each axis.</p>
<pre class="prettyprint">
// rotate state
description 
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;

&nbsp;&nbsp;&nbsp;map 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable map on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable smooth rendering
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;smooth: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Enable perspective
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;perspective_on: 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Apply rotations on the part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.x: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.y: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rotation.z: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;color: 0 255 0 255; // Green
}
</pre>
</li>
<li>
<p>Add a state with a rotation around the Z axis of 360&#176;.</p>
<p>This state inherits from the <span style="font-family: Courier New,Courier,monospace">default</span> state properties and adds a rotation around the Z axis.</p>
<pre class="prettyprint">
description 
{
&nbsp;&nbsp;&nbsp;state: &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;inherit: &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;map.rotation.z: 360;
}
</pre>
</li>
<li>
<p>Add a state to the other button for the grow animation. Change the size of the animation target and add an offset.</p>
<pre class="prettyprint">
// grow state
description 
{
&nbsp;&nbsp;&nbsp;state: &quot;grow&quot; 0.0;
&nbsp;&nbsp;&nbsp;color: 0 0 255 255; // Blue
&nbsp;&nbsp;&nbsp;rel1 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.2 0.2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;rel2 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 0.7 0.4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 0.3 0.3;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Create the programs to make all these states animate.</p>
<p>To make the rotation animation smoother, create and chain several <span style="font-family: Courier New,Courier,monospace">program</span> blocks with different durations.</p>
<ol class="a">

<li><p>Create the main program.</p>
<p>The main program goes from the <span style="font-family: Courier New,Courier,monospace">default</span> state to the <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> state in 0.2 seconds.</p>
<p>Note that the states are all named the same way (<span style="font-family: Courier New,Courier,monospace">rotate</span>) but not with the same version. The version allows you to have more than one state with the same name, in fact, the actual name of the state is the name plus the version.</p>
<p>The program starts when the <span style="font-family: Courier New,Courier,monospace">btn/rotate</span> part is clicked with any mouse button.</p>
<pre class="prettyprint">
// Change the color of the target to green
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/rotate&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.2;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,target,2&quot;;
}
</pre>

</li>
<li>
<p>Create the 2nd program.</p>
<p>When the main program animation ends, it calls the next program called <span style="font-family: Courier New,courier,monospace">rotate,target,2</span>. This program sets the part state to <span style="font-family: Courier New,Courier,monospace">rotate 1.0</span> in 0.7 seconds.</p>
<pre class="prettyprint">
// Rotate 360&#176;
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,target,2&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 0.7;
&nbsp;&nbsp;&nbsp;after: &quot;rotate,end&quot;;
}
</pre>
</li>
<li>
<p>Create the 3rd program.</p>
<p>When the 2nd program animation ends, it calls the next program called <span style="font-family: Courier New,Courier,monospace">rotate,end</span>. It is the last program of the rotation effect, and it sets the state to <span style="font-family: Courier New,Courier,monospace">rotate 0.0</span> very fast.</p>
<pre class="prettyprint">
// Go back to the normal
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;rotate,end&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;rotate&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: LINEAR 0.2;
}
</pre>
</li>
<li>
<p>Create the last program, which is the grow effect that switches from one state to another.</p>
<p>The program starts when the <span style="font-family: Courier New,Courier,monospace">btn/grow</span> part is clicked, and it goes from the current state to <span style="font-family: Courier New,Courier,monospace">grow 1.0</span> in one second. In this program, both size and color change during the transition. At the end, it calls the <span style="font-family: Courier New,Courier,monospace">go,default</span> program.</p>
<pre class="prettyprint">
// Grow the target and go back to normal state
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;grow,target&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;btn/grow&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;grow&quot; 1.0;
&nbsp;&nbsp;&nbsp;after: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SINUSOIDAL 1.0;
}
</pre>
</li>
<li>
<p>Return to the <span style="font-family: Courier New,Courier,monospace">default</span> state.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">go,default</span> program sets the state back to <span style="font-family: Courier New,Courier,monospace">default</span> for the animation target.</p>
<pre class="prettyprint">
// Go back to normal (default) state
program 
{
&nbsp;&nbsp;&nbsp;name: &quot;go,default&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 1.0;
&nbsp;&nbsp;&nbsp;target: &quot;atarget&quot;;
&nbsp;&nbsp;&nbsp;transition: SIN 1.0;
}
</pre>
</li>
</ol>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
