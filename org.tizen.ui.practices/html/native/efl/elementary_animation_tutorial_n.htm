<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Elementary Animations</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#setup">Setting Up the Application</a></li>
			<li><a href="#rotate">Creating a Rotation Effect</a></li>
			<li><a href="#zoom">Creating a Zoom Effect</a></li>
			<li><a href="#flip">Creating a Flip Effect</a></li>
			<li><a href="#blend">Creating a Blend Transition</a></li>
			<li><a href="#fade">Creating a Fade Effect</a></li>
			<li><a href="#flip_y">Creating a Flip on the Y Axis</a></li>
			<li><a href="#wipe">Creating a Wipe Effect</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">		
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Mobile Wearable</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Elementary Animations</h1>

  
<p>This tutorial demonstrates how you can use Elm Transit to create animated transitions effects, such as rotation, wiping, zooming, resizing, and fading, to an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>

	
 <h2 id="setup" name="setup">Setting Up the Application</h2>

 <p>To set up the application and create a resize effect:</p>
 <ol>
 <li>
<p>Create a basic application as explained in the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a> and <a href="basic_tutorial_mn.htm">Creating Basic Mobile Interactions</a>.</p>
</li>
<li>
<p>Create Evas objects and animate them. In this example, one single object is animated with different type of animations.</p>

<p>Create the structure of the application, represented by the <span style="font-family: Courier New,Courier,monospace">appdata</span> struct, that holds the main UI components of the application:</p>

<pre class="prettyprint">
// Definitions to be used for positioning buttons, their sizes, padding values
#define BUTTON_BOX_X_POSITION 20
#define BUTTON_BOX_Y_POSITION 500
#define TARGET_BUTTON_X_POSITION 260
#define TARGET_BUTTON_Y_POSITION 100
#define DEFAULT_BUTTON_SIZE 200, 100
#define SCREEN_WIDTH 720
#define SCREEN_HEIGHT 1280
#define BUTTON_PADDING_VALUE 20

typedef struct 
appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win; // Main window
&nbsp;&nbsp;&nbsp;Evas_Object *label; // Title label
&nbsp;&nbsp;&nbsp;Evas_Object *button; // Button object, the target of the animations
&nbsp;&nbsp;&nbsp;Evas_Object *buttonbck; // Button representing the back of the target button
&nbsp;&nbsp;&nbsp;Evas_Object *hbox; // Horizontal box to store the vertical boxes
&nbsp;&nbsp;&nbsp;Evas_Object *left_vbox; // Vertical box for the first button column
&nbsp;&nbsp;&nbsp;Evas_Object *center_vbox; // Vertical box for the second button column
&nbsp;&nbsp;&nbsp;Evas_Object *right_vbox; // Vertical box for the last button column
&nbsp;&nbsp;&nbsp;float rt_angle, zto, zfrom; // Variables used to store values for animations
} appdata_s;
</pre>
</li>
<li>
<p>Place the UI components on the application canvas:</p>

<ol type="a"><li>
<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function takes <span style="font-family: Courier New,Courier,monospace">appdata_s *ad</span> as its only parameter. This function is called by the creation of the <span style="font-family: Courier New,Courier,monospace">app_create</span> callback of the Tizen application (<span style="font-family: Courier New,Courier,monospace">event_callback.create = app_create;</span>) in the <span style="font-family: Courier New,Courier,monospace">main()</span> function of the application.</p>
<pre class="prettyprint">
create_base_gui(appdata_s *ad)
{
</pre>
</li>
<li>
<p>Set up the rotation angle, the original zoom value (<span style="font-family: Courier New,Courier,monospace">zfrom</span>), and the destination zoom value (<span style="font-family: Courier New,Courier,monospace">zto</span>):</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ad-&gt;rt_angle = 360.0;
&nbsp;&nbsp;&nbsp;ad-&gt;zfrom = 1.0;
&nbsp;&nbsp;&nbsp;ad-&gt;zto = 2.0;
</pre>
</li>
<li>
<p>Create the main window with a title and add the <span style="font-family: Courier New,Courier,monospace">delete</span> callback:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Label
&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;Elementary Animation Tutorial&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;label);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
</pre>
</li>
<li>
<p>Create the animation target button and the back button. Call the button box creation function with the application data as its parameter.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Create a button in the app window
&nbsp;&nbsp;&nbsp;ad-&gt;button = elm_button_add(ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Move the button to x = 260 y = 100
&nbsp;&nbsp;&nbsp;evas_object_move(ad->button, TARGET_BUTTON_X_POSITION, TARGET_BUTTON_Y_POSITION);

&nbsp;&nbsp;&nbsp;// Set text for target button
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Target&quot;);

&nbsp;&nbsp;&nbsp;// Resize the button 200 x 100
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;button, DEFAULT_BUTTON_SIZE);

&nbsp;&nbsp;&nbsp;// Show the button
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;button);

&nbsp;&nbsp;&nbsp;// Create a back button in the app window
&nbsp;&nbsp;&nbsp;ad-&gt;buttonbck = elm_button_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;buttonbck, &quot;Button back&quot;);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;buttonbck, TARGET_BUTTON_X_POSITION, TARGET_BUTTON_Y_POSITION);
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;buttonbck, DEFAULT_BUTTON_SIZE);

&nbsp;&nbsp;&nbsp;_create_btn_box(ad);

} // End of create_base_gui
</pre>
</li></ol></li>
<li>
<p>Create the structure of the buttons box with 3 columns (vertical boxes) and one horizontal for the main container:</p>
<pre class="prettyprint">
// Create the main container box
ad-&gt;hbox = elm_box_add(ad-&gt;win);
elm_box_horizontal_set(ad-&gt;hbox, EINA_TRUE);
elm_box_homogeneous_set(ad-&gt;hbox, EINA_FALSE);
elm_box_padding_set(ad-&gt;hbox, BUTTON_PADDING_VALUE, 0);
evas_object_move(ad-&gt;hbox, BUTTON_BOX_X_POSITION, BUTTON_BOX_Y_POSITION);
evas_object_resize(ad-&gt;hbox, SCREEN_WIDTH - 2 * BUTTON_PADDING_VALUE, SCREEN_HEIGHT);
evas_object_show(ad-&gt;hbox);

// Create the first column
ad-&gt;left_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;left_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;left_vbox, EINA_TRUE);

elm_box_padding_set(ad-&gt;left_vbox, 0, BUTTON_PADDING_VALUE);
evas_object_size_hint_weight_set(ad-&gt;left_vbox, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(ad-&gt;left_vbox, EVAS_HINT_FILL, 0.0);

evas_object_show(ad-&gt;left_vbox);
elm_box_pack_start(ad-&gt;hbox, ad-&gt;left_vbox);

// Create the second column
ad-&gt;center_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;center_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;center_vbox, EINA_TRUE);

elm_box_padding_set(ad-&gt;center_vbox, 0, BUTTON_PADDING_VALUE);
evas_object_size_hint_weight_set(ad-&gt;center_vbox, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(ad-&gt;center_vbox, EVAS_HINT_FILL, 0.0);

evas_object_show(ad-&gt;center_vbox);
elm_box_pack_end(ad-&gt;hbox, ad-&gt;center_vbox);

// Create the last column
ad-&gt;right_vbox = elm_box_add(ad-&gt;hbox);
elm_box_horizontal_set(ad-&gt;right_vbox, EINA_FALSE);
elm_box_homogeneous_set(ad-&gt;right_vbox, EINA_TRUE);

elm_box_padding_set(ad-&gt;right_vbox, 0, BUTTON_PADDING_VALUE);
evas_object_size_hint_weight_set(ad-&gt;right_vbox, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(ad-&gt;right_vbox, EVAS_HINT_FILL, 0.0);

evas_object_show(ad-&gt;right_vbox);
elm_box_pack_end(ad-&gt;hbox, ad-&gt;right_vbox);
</pre>

<p align="center"><img alt="Application UI components" src="../../images/elementary_animation_tutorial.png" /></p>

</li>
<li>
<p>Create the first action button for the resize effect.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function defines the callback function that is to be called when the button is clicked. In this example, set a <span style="font-family: Courier New,Courier,monospace">_btn_resize_cb()</span> function and pass the application data <span style="font-family: Courier New,Courier,monospace">ad</span> to this callback function.</p>
<pre class="prettyprint">
// Create the button
Evas_Object *btn_resize = elm_button_add(ad-&gt;win);

// Set the button text
elm_object_text_set(btn_resize, &quot;Resize&quot;);

// Set the hint weight and align policy
evas_object_size_hint_weight_set(btn_resize, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_resize, EVAS_HINT_FILL, EVAS_HINT_FILL);

// Show the button
evas_object_show(btn_resize);

// Set the &quot;clicked&quot; callback
evas_object_smart_callback_add(btn_resize, &quot;clicked&quot;, _btn_resize_cb, ad);

// Add the button to the first column
elm_box_pack_end(ad-&gt;left_vbox, btn_resize);
</pre>

<p>The callback by itself only sets a new text for the animation target button, and calls the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback</span> function, which actually animates the button.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback</span> function needs its specific prototype: it returns nothing and receives the data to be passed, the callback object, and the actual event (seldom used) as parameters.</p>

<p>In this case, pass the application data to the callback. However, note that the parameter&#39;s type is <span style="font-family: Courier New,Courier,monospace">void *</span> and not <span style="font-family: Courier New,Courier,monospace">appdata_s *</span>, so you must initialize a variable of the correct type with the pointer.</p>
<pre class="prettyprint">
static void 
_btn_resize_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Resize&quot;);
&nbsp;&nbsp;&nbsp;_resize_effect(ad-&gt;button);
}
</pre>
</li>
<li>
<p>Use the application data in the callback function. At this point, you can create the animation directly in the callback function, but it is more straightforward to encapsulate the animation process into a dedicated function. The <span style="font-family: Courier New,Courier,monospace">_resize_effect()</span> function implements the following animation code:</p>
<ol type="a">
<li>
<p>Create an <span style="font-family: Courier New,Courier,monospace">Elm_Transit *</span> object representing the transition:</p>
<pre class="prettyprint">
static void 
_resize_effect(Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp;// Elementary Transition declaration and creation
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();
</pre>
</li>
<li>
<p>Add the target object to the transition:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Add the transition target object
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
</pre>
</li>
<li>
<p>Add a resizing transition to the object with the origin and destination width and height in pixels:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Set the resize effect
&nbsp;&nbsp;&nbsp;elm_transit_effect_resizing_add(trans, 100, 50, 300, 150);
</pre>
<p>100 and 50 are respectively the object&#39;s width and height when the effect begins, whereas 300 and 150 are respectively the object&#39;s width and height when the effect ends: the object grows from 100 x 50 to 300 x 150.</p>
</li>
<li>
<p>Set the transition duration with the <span style="font-family: Courier New,Courier,monospace">elm_transit_duration_set()</span> function:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Set the transition duration
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
</pre>
<p>The animation lasts 3 seconds. The duration parameter is a <span style="font-family: Courier New,Courier,monospace">double</span>.</p>
</li>
<li>
<p>Start the animation by calling the <span style="font-family: Courier New,Courier,monospace">elm_transit_go()</span> function with the <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> object:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Start the transition
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
<p>When the resize button is clicked, the animation target button grows.</p>

<p>The following figure illustrates the resize effect, where the object grows from 100 x 50 to 300 x 150.</p>

<p align="center"><img alt="Resize effect" src="../../images/elementary_animation_resize.png" /></p>
<p>All the action buttons are created exactly the same way as the resize button, with a callback and an animation function.</p>
</li>
</ol>
</li>
</ol>

 <h2 id="rotate" name="rotate">Creating a Rotation Effect</h2>

<p>The rotation effect rotates the animation target button with an angle of 360&deg;. This angle is stored in the application data as <span style="font-family: Courier New,Courier,monospace">ad-&gt;rt_angle</span>.</p>
<p>To create the rotation effect:</p>
<ol>
<li>
<p>Create the button and add it to the center column in the <span style="font-family: Courier New,Courier,monospace">_create_btn_box()</span> function:</p>
<pre class="prettyprint">
// Rotation button
Evas_Object *btn_rotate = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_rotate, &quot;Rotate&quot;);
evas_object_size_hint_weight_set(btn_rotate, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_rotate, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_rotate);
evas_object_smart_callback_add(btn_rotate, &quot;clicked&quot;, _btn_rotate_cb, ad);
elm_box_pack_end(ad-&gt;center_vbox, btn_rotate);
</pre>
</li>
<li>
<p>Call the effect function with the target button as the first parameter and the rotation angle as the second parameter:</p>
<pre class="prettyprint">
static void 
_btn_rotate_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Rotate&quot;);
&nbsp;&nbsp;&nbsp;_rotation_effect(ad-&gt;button, ad-&gt;rt_angle);
}
</pre>
</li>
<li>
<p>Define the animation function. The animation function rotates the animation target by adding a rotation effect with the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_rotation_add()</span> function. This function takes 3 parameters:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">Elm_Transit</span></li>
<li>Rotation position at which the effect begins (0&deg;)</li>
<li>Rotation position at which the effect ends (360&deg;)</li>
</ul>
<p>The animation lasts 2 seconds.</p>

<pre class="prettyprint">
static void 
_rotation_effect(Evas_Object *obj, float angle)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);

&nbsp;&nbsp;&nbsp;// Rotate the object from its original angle to given degrees to the right
&nbsp;&nbsp;&nbsp;elm_transit_effect_rotation_add(trans, 0.0, angle);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 2.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the rotate effect screen.</p>

<p class="figure">Figure: Rotate effect</p>
<p align="center"><img alt="Rotate effect" src="../../images/elementary_animation_rotate.png" /></p>

 <h2 id="zoom" name="zoom">Creating a Zoom Effect</h2>

<p>The zoom effect zooms on the animation target to make it twice as big. Store the source and destination zoom level in the application data using <span style="font-family: Courier New,Courier,monospace">ad-&gt;zfrom</span> and <span style="font-family: Courier New,Courier,monospace">ad-&gt;zto</span>.</p>

<p>To create a zoom effect:</p>
<ol>
<li>
<p>Create the button and add it to the center column in the <span style="font-family: Courier New,Courier,monospace">_create_btn_box()</span> function:</p>

<pre class="prettyprint">
// Zoom button
Evas_Object *btn_zoom = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_zoom, &quot;Zoom&quot;);
evas_object_size_hint_weight_set(btn_zoom, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_zoom, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_zoom);
evas_object_smart_callback_add(btn_zoom, &quot;clicked&quot;, _btn_zoom_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_zoom);
</pre>
</li>
<li>
<p>Add a callback function to perform the animation:</p>

<pre class="prettyprint">
static void 
_btn_zoom_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Zoom&quot;);
&nbsp;&nbsp;&nbsp;_zoom_effect(ad-&gt;button, ad-&gt;zfrom, ad-&gt;zto);
}
</pre>
</li>
<li>
<p>Create the function which runs the animation.</p>
<p>To create the zoom effect, use the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_zoom_add()</span> function with the start and destination zoom level stored in the application data (<span style="font-family: Courier New,Courier,monospace">ad-&gt;zfrom</span> and <span style="font-family: Courier New,Courier,monospace">ad-&gt;zto</span>).</p>

<pre class="prettyprint">
static void 
_zoom_effect(Evas_Object *obj, float from, float to)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);

&nbsp;&nbsp;&nbsp;elm_transit_effect_zoom_add(trans, from, to);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 2.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the zoom effect screen.</p>

<p class="figure">Figure: Zoom effect</p>
<p align="center"><img alt="Zoom effect" src="../../images/elementary_animation_zoom.png" /></p>

 <h2 id="flip" name="flip">Creating a Flip Effect</h2>
 
<p>This effect is applied to a pair of objects, in the order they are added, in the <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> transition. In this example, add the animation target button and the button called buttonbck, which represents the back of the target button.</p>
<p>To create a flip effect:</p>
<ol>
<li>
<p>Create the action button for the flip effect:</p>

<pre class="prettyprint">
// Flip button
Evas_Object *btn_flip = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_flip, &quot;Flip x&quot;);
evas_object_size_hint_weight_set(btn_flip, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_flip, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_flip);
evas_object_smart_callback_add(btn_flip, &quot;clicked&quot;, _btn_flip_cb, ad);
elm_box_pack_end(ad-&gt;left_vbox, btn_flip);
</pre>
</li>
<li>
<p>Create and start the animation with the 2 objects (target button and back button) to animate:</p>

<pre class="prettyprint">
static void 
_btn_flip_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Flip&quot;);
&nbsp;&nbsp;&nbsp;_flip_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>
</li>
<li>
<p>Create the function which runs the animation.</p>
<p>This flip animation is created using the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_flip_add()</span> function. The second parameter is the axis of the flip: in this example it is the X axis, so the button flips down from top to show the back button. The last parameter is the flip direction: <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> means clockwise.</p>
<pre class="prettyprint">
static void 
_flip_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_flip_add(trans, ELM_TRANSIT_EFFECT_FLIP_AXIS_X, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the Flip Effect screen with a flip effect on the X axis.</p>

<p class="figure">Figure: Flip effect</p>
<p align="center"><img alt="Flip effect" src="../../images/elementary_animation_flip.png" /></p>

 <h2 id="blend" name="blend">Creating a Blend Transition</h2>

<p>The blend effect works the same way as the flip, but without the axis or direction information. Use the back button in this case as well.</p>

<p>To create a blend transition:</p>
<ol>
<li>
<p>Create the blend effect button:</p>
<pre class="prettyprint">
// Blend button
Evas_Object *btn_blend = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_blend, &quot;Blend&quot;);
evas_object_size_hint_weight_set(btn_blend, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_blend, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_blend);
evas_object_smart_callback_add(btn_blend, &quot;clicked&quot;, _btn_blend_cb, ad);
elm_box_pack_end(ad-&gt;center_vbox, btn_blend);
</pre>
</li>
<li>
<p>Create the blend transition callback:</p>
<pre class="prettyprint">
static void 
_btn_blend_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Blend&quot;);
&nbsp;&nbsp;&nbsp;_blend_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>
</li>
<li>
<p>Create and start the blend animation.</p>
<p>This animation is created by adding 2 objects to <span style="font-family: Courier New,Courier,monospace">Elm_Transit</span> and using  the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_blend_add()</span> function.</p>

<pre class="prettyprint">
static void 
_blend_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_blend_add(trans);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the blend transition effect screen.</p>

<p class="figure">Figure: Blend transition effect</p>
<p align="center"><img alt="Blend transition effect" src="../../images/elementary_animation_blend.png" /></p>

 <h2 id="fade" name="fade">Creating a Fade Effect</h2>

<p>The fade effect works exactly the same way as the blend effect.</p>

<p>To create a fade effect:</p>
<ol>
<li>
<p>Create the fade button:</p>
<pre class="prettyprint">
// Fade button
Evas_Object *btn_fade = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_fade, &quot;Fade&quot;);
evas_object_size_hint_weight_set(btn_fade, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_fade, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_fade);
evas_object_smart_callback_add(btn_fade, &quot;clicked&quot;, _btn_fade_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_fade);
</pre>
</li>
<li>
<p>Add the button callback:</p>
<pre class="prettyprint">
static void 
_btn_fade_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Fade&quot;);
&nbsp;&nbsp;&nbsp;_fade_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>
</li>
<li>
<p>Create and start the animation. Call the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_fade_add()</span> function.</p>

<pre class="prettyprint">
static void 
_fade_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_fade_add(trans);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the fade effect screen.</p>

<p class="figure">Figure: Fade transition effect</p>
<p align="center"><img alt="Fade transition effect" src="../../images/elementary_animation_fade.png" /></p>

 <h2 id="flip_y" name="flip_y">Creating a Flip on the Y Axis</h2>

<p>This is same as the flip transition, but on the Y axis.</p>
<p>To create a flip on the Y axis:</p>
<ol>
<li>
<p>Create the flip y button:</p>
<pre class="prettyprint">// Flip y button
Evas_Object *btn_flip_y = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_flip_y, &quot;Flip y&quot;);
evas_object_size_hint_weight_set(btn_flip_y, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_flip_y, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_flip_y);
evas_object_smart_callback_add(btn_flip_y, &quot;clicked&quot;, _btn_flip_y_cb, ad);
elm_box_pack_end(ad-&gt;left_vbox, btn_flip_y);
</pre>
</li>
<li>
<p>Add the button callback:</p>
<pre class="prettyprint">
static void 
_btn_flip_y_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Flip 2&quot;);
&nbsp;&nbsp;&nbsp;_flip_y_effect(ad-&gt;button, ad-&gt;buttonbck);
}
</pre>
</li>
<li>
<p>Create and start the animation:</p>
<pre class="prettyprint">
static void 
_flip_y_effect(Evas_Object *obj, Evas_Object *obj2)
{
&nbsp;&nbsp;&nbsp;Elm_Transit *trans;

&nbsp;&nbsp;&nbsp;trans = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(trans, obj2);
&nbsp;&nbsp;&nbsp;elm_transit_effect_flip_add(trans, ELM_TRANSIT_EFFECT_FLIP_AXIS_Y, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp;elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the flip effect on the Y axis.</p>

<p class="figure">Figure: Flip effect on the Y axis</p>
<p align="center"><img alt="Flip effect on the Y axis" src="../../images/elementary_animation_flip2.png" /></p>

 <h2 id="wipe" name="wipe">Creating a Wipe Effect</h2>

<p>The wipe transition is applied on an Evas object considering the wipe type and the direction.</p>
<p>To create a wipe effect:</p>
<ol>
<li>
<p>Create the wipe animation button:</p>

<pre class="prettyprint">
// Wipe button
Evas_Object *btn_wipe = elm_button_add(ad-&gt;win);
elm_object_text_set(btn_wipe, &quot;Wipe&quot;);
evas_object_size_hint_weight_set(btn_wipe, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(btn_wipe, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(btn_wipe);
evas_object_smart_callback_add(btn_wipe, &quot;clicked&quot;, _btn_wipe_cb, ad);
elm_box_pack_end(ad-&gt;right_vbox, btn_wipe);
</pre>
</li>
<li>
<p>Add the button callback:</p>

<pre class="prettyprint">
static void 
_btn_wipe_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Set the button text
&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Wipe&quot;);
&nbsp;&nbsp;&nbsp;_wipe_effect(ad-&gt;button);
}
</pre>
</li>
<li>
<p>Create and start the wipe animation.</p>
<p>The animation function calls the <span style="font-family: Courier New,Courier,monospace">elm_transit_effect_wipe_add()</span> function with <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE</span> as the second parameter to hide the button and <span style="font-family: Courier New,Courier,monospace">ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT</span> as the last parameter to set the direction (left to right).</p>

<pre class="prettyprint">
static void 
_wipe_effect(Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp; Elm_Transit *trans;

&nbsp;&nbsp;&nbsp; trans = elm_transit_add();
&nbsp;&nbsp;&nbsp; elm_transit_object_add(trans, obj);
&nbsp;&nbsp;&nbsp; elm_transit_effect_wipe_add(trans, ELM_TRANSIT_EFFECT_WIPE_TYPE_HIDE, ELM_TRANSIT_EFFECT_WIPE_DIR_RIGHT);
&nbsp;&nbsp;&nbsp; elm_transit_duration_set(trans, 3.0);
&nbsp;&nbsp;&nbsp; elm_transit_go(trans);
}
</pre>
</li>
</ol>

<p>The following figure illustrates the wipe effect screen.</p>

<p class="figure">Figure: Wipe effect</p>
<p align="center"><img alt="Wipe effect" src="../../images/elementary_animation_wipe.png" /></p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
