<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Notification Windows: Supporting Notification Levels, Screenshots, and Input Generators</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
       <p class="toc-title">Content</p>
         <ul class="toc">
			<li><a href="#noti">Notification Window</a></li>
            <li><a href="#shot">Screenshot</a></li>
            <li><a href="#input_gen">Input Generator</a></li>
			<li><a href="#init">Initializing EFL Utility</a></li>			
			<li><a href="#create">Creating a Notification Window and Setting a Notification Window Level</a></li>
			<li><a href="#getting">Getting the Notification Window Level</a></li>
            <li><a href="#screenshot">Getting a Screenshot</a></li>
            <li><a href="#input_gen_key">Generating a Key Input Event </a></li>
            <li><a href="#input_gen_touch">Generating a Touch Input Event </a></li>			
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__EFL__UTIL__MODULE.html">EFL UTIL API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__EFL__UTIL__MODULE.html">EFL UTIL API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Notification Windows: Supporting Notification Levels, Screenshots, and Input Generators</h1> 
 
<p>The EFL UTIL utility package supports the following EFL functionalities:</p>

<ul><li><a href="#noti">Notification Window and Level</a>
<p>You can <a href="#init">initialize the EFL Utility</a>, <a href="#create">create a notification window and set a window level</a>, and <a href="#getting">get the notification window level</a>.</p></li>
    <li><a href="#shot">Screenshot</a>
<p>You can <a href="#init">initialize the EFL Utility</a> and <a href="#screenshot">capture a screenshot</a>.</p></li>
    <li><a href="#input_gen">Input Generator</a>
<p>You can <a href="#init">initialize the EFL Utility</a>, and generate a <a href="#input_gen_key">key input event</a> and <a href="#input_gen_touch">touch input event</a>.</p></li></ul>

	
<h2 id="noti" name="noti">Notification Window and Level</h2>

<p>The EFL UTIL API allows you to set and get the notification level of the notification window (which is of the EFL window type):</p>

<ul><li><span style="font-family: Courier New,Courier,monospace;">efl_util_set_notification_window_level()</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">efl_util_get_notification_window_level()</span></li></ul>

<p>To understand notification levels, you must first learn about the Tizen window layer hierarchy. Window layers are logical containers used to control the window stack order. Each window belongs to 1 layer and can change the stack order in the layer. Windows in same layer are always placed on or under a window in another layer. In addition to the default &quot;normal layer&quot;, there exists a &quot;notification layer&quot;, which is always placed above the normal layer.</p>


<p class="figure">Figure: Window layers</p> 
<p align="center"><img alt="Window layers" src="../../images/efl_windowlayer.png" /></p> 


<p>Each window is set to  a specific layer according to its type or properties. Most application windows belong to the normal layer. However, in case of an important alarm or other information crucial to the user, you can set the window to belong to the notification layer. This ensures that the user notices the information immediately, because the window belonging to the notification layer is always shown above the windows in the normal layer.</p> 

<h3>Using the Notification Windows</h3>

<p>A window that belongs to the notification layer is called a &quot;notification window&quot;. To make a notification window:</p>

<ol><li>Set the window type to <span style="font-family: Courier New,Courier,monospace;">NOTIFICATION</span>, by calling the <span style="font-family: Courier New,Courier,monospace;">elm_win_add()</span> function with the third parameter set to <span style="font-family: Courier New,Courier,monospace;">ELM_WIN_NOTIFICATION</span>.</li>
<li>Set the notification level by calling the <span style="font-family: Courier New,Courier,monospace;">efl_util_set_notification_window_level()</span> function.
<p>The notification level defines the priority of the window, and the notification layer contains 3 levels (<span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_1</span>, <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_2</span>, and <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_3</span>).</p>
<p>The default notification window level is <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_1</span>. Most of notification windows can be set to this level. The <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_2</span> is a higher level than <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_1</span>, which means that the window set to <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_2</span> is always on the <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_1</span> level window. The <span style="font-family: Courier New,Courier,monospace;">EFL_UTIL_NOTIFICATION_LEVEL_3</span> is the highest level in notification windows. Very few applications can use this level.</p>

<p>If there are notification windows that have the same level, the most recently created notification window is placed on top of the other window. </p>

</li></ol>

<p class="figure">Figure: Notification levels</p> 
<p align="center"><img alt="Notification levels" src="../../images/efl_notilevels.png" /></p> 

<p>In general, notification levels in Tizen are used as follows:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">NOTIFICATION_LEVEL_1</span> is the basic level which is used as a normal notification popup.</li>
<li><span style="font-family: Courier New,Courier,monospace;">NOTIFICATION_LEVEL_2</span> is used for the lock screen window.</li>
<li><span style="font-family: Courier New,Courier,monospace;">NOTIFICATION_LEVEL_3</span>, the highest layer, is used in case the user needs to be notified in any circumstances. For example, the incoming call popup can use this level.</li>
</ul>

<p>The following code snippets shown how to make a notification window with a higher level.</p>

<pre class="prettyprint">
#include &lt;Elementary.h&gt;
#include &lt;efl_util.h&gt;
#include &lt;dlog.h&gt;

static Evas_Object *create_win(const char *name)
{
&nbsp;&nbsp;&nbsp;Evas_Object *eo;
&nbsp;&nbsp;&nbsp;efl_util_error_e error;
&nbsp;&nbsp;&nbsp;// Create the NOTIFICATION window object
&nbsp;&nbsp;&nbsp;eo = elm_win_add(NULL, name, ELM_WIN_NOTIFICATION);

&nbsp;&nbsp;&nbsp;if (!eo) return NULL;

&nbsp;&nbsp;&nbsp;// Set the NOTIFICATION level
&nbsp;&nbsp;&nbsp;error = efl_util_set_notification_window_level(eo, EFL_UTIL_NOTIFICATION_LEVEL_1);

&nbsp;&nbsp;&nbsp;elm_win_title_set(eo, name);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(eo, EINA_TRUE); 
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(eo, &quot;delete,request&quot;, _quit_cb, NULL); 
	
&nbsp;&nbsp;&nbsp;return eo;
}</pre>

<p>Use the <span style="font-family: Courier New,Courier,monospace;">efl_util_get_notification_window_level()</span> function to get the currently set notification level of a window. If the window is not of the notification type, the function returns the <span style="font-family: Courier New,Courier,monospace;">-EFL_UTIL_ERROR_NOT_SUPPORTED_WINDOW_TYPE</span> error.</p>
<pre class="prettyprint">
#include &lt;Elementary.h&gt;
#include &lt;efl_util.h&gt;
#include &lt;dlog.h&gt;

void get_notification_level (Evas_Object *eo)
{
&nbsp;&nbsp;&nbsp;efl_util_error_e error;
&nbsp;&nbsp;&nbsp;efl_util_notification_level_e  notification_level;

&nbsp;&nbsp;&nbsp;if (!eo) return;

&nbsp;&nbsp;&nbsp;// Get the window notification level
&nbsp;&nbsp;&nbsp;error = efl_util_get_notification_window_level (eo, &amp;notification_level);

&nbsp;&nbsp;&nbsp;// Check the return value
&nbsp;&nbsp;&nbsp;if (error== EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (notification_level)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EFL_UTIL_NOTIFICATION_LEVEL_1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something for level 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EFL_UTIL_NOTIFICATION_LEVEL_2:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something for level 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}</pre>
  
<h2 id="shot" name="shot">Screenshot in Mobile Applications</h2>

<p>The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__EFL__UTIL__SCREENSHOT__MODULE.html">EFL UTIL SCREENSHOT</a> API allows you to get the screen image to the user.</p>

<p>First you must make the <span style="font-family: Courier New,Courier,monospace;">efl_util_screenshot_h</span> structure and initialize the structure members with the <span style="font-family: Courier New,Courier,monospace;">efl_util_screenshot_initialize()</span> function. To take the actual screenshot, create screen capture data and return it to the <span style="font-family: Courier New,Courier,monospace;">tbm_surface</span> handler with the <span style="font-family: Courier New,Courier,monospace;">efl_util_screenshot_take_tbm_surface()</span> function.</p>
<p>When no longer needed, remember to free the <span style="font-family: Courier New,Courier,monospace;">efl_util_screenshot_h</span> structure with the <span style="font-family: Courier New,Courier,monospace;">efl_util_screenshot_deinitialize()</span> function.</p>


<h2 id="input_gen" name="input_gen">Input Generator in Mobile Applications</h2>

<p>The <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__EFL__UTIL__INPUT__MODULE.html">EFL UTIL INPUT</a> API allows you to generate input events (such as key and touch events).</p>

<p>First you must create the <span style="font-family: Courier New,Courier,monospace;">efl_util_inputgen_h</span> structure and initialize the structure members with the <span style="font-family: Courier New,Courier,monospace;">efl_util_input_initialize_generator()</span> function. To generate actual key or touch events, use the <span style="font-family: Courier New,Courier,monospace;">efl_util_input_generate_key()</span> or <span style="font-family: Courier New,Courier,monospace;">efl_util_input_generate_touch()</span> function.</p>
<p>When no longer needed, remember to free the <span style="font-family: Courier New,Courier,monospace;">efl_util_inputgen_h</span> structure with the <span style="font-family: Courier New,Courier,monospace;">efl_util_input_deinitialize_generator()</span> function.</p>




 <h2 id="init" name="init">Initializing EFL Utility</h2>
 
 <p>To use the EFL UTIL API, the following header file has to be included:</p>
  <pre class="prettyprint">#include &lt;efl_util.h&gt;</pre> 

 <h2 id="create" name="create">Creating a Notification Window and Setting a Notification Window Level</h2>

<p>To create a notification window and set the window level, use the <span style="font-family: Courier New,Courier,monospace">efl_util_set_notification_window_level()</span> function. If the window type is not notification type, the function returns an error.</p> 
<pre class="prettyprint">#include &lt;Elementary.h&gt;
#include &lt;dlog.h&gt;

void create_win() 
{
&nbsp;&nbsp;&nbsp;Evas_Object *eo;
&nbsp;&nbsp;&nbsp;efl_util_error_e error;
&nbsp;&nbsp;&nbsp;char *name = &quot;Notification window&quot;;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;// Create notification window
&nbsp;&nbsp;&nbsp;eo = elm_win_add(NULL, name, ELM_WIN_NOTIFICATION);
&nbsp;&nbsp;&nbsp;if (!eo) return;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;// Set notification level
&nbsp;&nbsp;&nbsp;error = efl_util_set_notification_window_level
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eo, EFL_UTIL_NOTIFICATION_LEVEL_1);
&nbsp;&nbsp;&nbsp;if (error != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do error handling
&nbsp;&nbsp;&nbsp;}
}
</pre> 

 <h2 id="getting" name="getting">Getting the Notification Window Level</h2>

<p>To get the notification window level, use the <span style="font-family: Courier New,Courier,monospace">efl_util_get_notification_window_level()</span> function:</p>

<pre class="prettyprint">void create_win() 
{
&nbsp;&nbsp;&nbsp;Evas_Object *eo;
&nbsp;&nbsp;&nbsp;efl_util_error_e error;
&nbsp;&nbsp;&nbsp;efl_util_notification_level_e notification_level;
&nbsp;&nbsp;&nbsp;char *name = &quot;Notification window&quot;;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;// Create notification window
&nbsp;&nbsp;&nbsp;eo = elm_win_add(NULL, name, ELM_WIN_NOTIFICATION);
&nbsp;&nbsp;&nbsp;if (!eo) return;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;// Get notification level
&nbsp;&nbsp;&nbsp;error = efl_util_get_notification_window_level
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(eo, &amp;notification_level);
&nbsp;&nbsp;&nbsp;if (error == EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (notification_level) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EFL_UTIL_NOTIFICATION_LEVEL_1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something for notification level 1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case EFL_UTIL_NOTIFICATION_LEVEL_2:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something for notification level 2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre>
  
<h2 id="screenshot" name="screenshot">Getting a Screenshot</h2>

 <p>To get a screenshot:</p>
 
<ol><li>Initialize with the <span style="font-family: Courier New,Courier,monospace">efl_util_screenshot_initialize()</span> function:
  <pre class="prettyprint">
#include &lt;tbm_surface.h&gt;
#include &lt;X11/Xlib.h&gt;

void capture()
{
&nbsp;&nbsp;&nbsp;efl_util_screenshot_h screenshot = NULL;
&nbsp;&nbsp;&nbsp;tbm_surface_h tbm_surface = NULL;
&nbsp;&nbsp;&nbsp;tbm_surface_info_s tsuri;

&nbsp;&nbsp;&nbsp;screenshot = efl_util_screenshot_initialize(width, height);
</pre></li>

<li>After getting the <span style="font-family: Courier New,Courier,monospace">efl_util_screenshot_h</span> structure, execute the <span style="font-family: Courier New,Courier,monospace">efl_util_screenshot_take_tbm_surface()</span> function to get the <span style="font-family: Courier New,Courier,monospace">tbm_surface</span> handler which has the screenshot data.
  <pre class="prettyprint">
&nbsp;&nbsp;&nbsp;if (screenshot) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tbm_surface = efl_util_screenshot_take_tbm_surface(screenshot);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tbm_surface) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Treat tbm_surface handler (screenshot data)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre></li>

<li>Free the resources with the <span style="font-family: Courier New,Courier,monospace">efl_util_screenshot_deinitialize()</span> function:
  <pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;efl_util_screenshot_deinitialize(screenshot);
&nbsp;&nbsp;&nbsp;}
}</pre></li></ol>

 <h2 id="input_gen_key" name="input_gen_key">Generating a Key Input Event</h2>

<p>To generate key input events:</p>
 
<ol><li>Execute the <span style="font-family: Courier New,Courier,monospace">efl_util_input_initialize_generator()</span> function:
<pre class="prettyprint">
void key_event_generator()
{
&nbsp;&nbsp;&nbsp;int ret = EFL_UTIL_ERROR_NONE;
&nbsp;&nbsp;&nbsp;efl_util_inputgen_h inputgen = NULL;

&nbsp;&nbsp;&nbsp;inputgen = efl_util_input_initialize_generator(EFL_UTIL_INPUT_DEVTYPE_KEYBOARD);
&nbsp;&nbsp;&nbsp;if (!inputgen)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to initialize the input generator system

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li>After setting input device type, execute the <span style="font-family: Courier New,Courier,monospace">efl_util_input_generate_key()</span> function to generate key input events:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = efl_util_input_generate_key(inputgen, &quot;XF86Menu&quot;, 1);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to generate a &quot;XF86Menu&quot; key press event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = efl_util_input_generate_key(inputgen, &quot;XF86Menu&quot;, 0);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to generate a &quot;XF86Menu&quot; key release event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
</pre></li>

<li>Free the resources with the <span style="font-family: Courier New,Courier,monospace">efl_util_input_deinitialize_generator()</span> function:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>



 <h2 id="input_gen_touch" name="input_gen_touch">Generating a Touch Input Event</h2>

  <p>To generate touch input events:</p>
 
 <ol><li>Execute the <span style="font-family: Courier New,Courier,monospace">efl_util_input_initialize_generator()</span> function:
  <pre class="prettyprint">
void touch_event_generator()
{
&nbsp;&nbsp;&nbsp;int ret = EFL_UTIL_ERROR_NONE;
&nbsp;&nbsp;&nbsp;efl_util_inputgen_h inputgen = NULL;

&nbsp;&nbsp;&nbsp;inputgen = efl_util_input_initialize_generator(EFL_UTIL_INPUT_DEVTYPE_TOUCHSCREEN);
&nbsp;&nbsp;&nbsp;if (!inputgen)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to initialize the input generator system

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
</pre></li>
 <li>After setting input device type, execute the <span style="font-family: Courier New,Courier,monospace">efl_util_input_generate_touch()</span> function to generate touch input events:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = efl_util_input_generate_touch(inputgen, 0, EFL_UTIL_INPUT_TOUCH_BEGIN, 100, 100);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to generate a first finger touch press event on (100, 100)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = efl_util_input_generate_touch(inputgen, 0, EFL_UTIL_INPUT_TOUCH_UPDATE, 110, 110);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to generate a first finger touch move event to (110, 110)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = efl_util_input_generate_touch(inputgen, 0, EFL_UTIL_INPUT_TOUCH_END, 110, 110);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to generate a first finger touch release event to (110, 110)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
</pre></li>
 <li>Free the resources with the <span style="font-family: Courier New,Courier,monospace">efl_util_input_deinitialize_generator()</span> function:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ret = efl_util_input_deinitialize_generator(inputgen);
&nbsp;&nbsp;&nbsp;if (ret != EFL_UTIL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Failed to deinitialize the input generator system
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>