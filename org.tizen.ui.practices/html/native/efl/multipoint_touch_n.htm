<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Tracking Multi-point Touch Events</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing Multi-point Touch</a></li>
			<li><a href="#canvas">Handling the Canvas</a></li>
			<li><a href="#touch">Managing Touch Events</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>				
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>			
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Tracking Multi-point Touch Events</h1>

  
<p>This topic demonstrates how you can use Evas objects to paint on a canvas and track touch events.</p>

<p>In the following example, you create a fully functional application that is able to track multiple simultaneous clicks. For every click, a black rectangle is drawn on the screen. This way it is easy to test the multi-point touch operation with the application.</p>

 <h2 id="init" name="init">Initializing Multi-point Touch</h2>
<p>To initialize multi-point touch for use:</p>
<ol>
<li>
<p>In the <span style="font-family: Courier New,Courier,monospace">multitouch.c</span> file, define the <span style="font-family: Courier New,Courier,monospace">appdata</span> structure that includes the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> pointers for various UI components, a list, and a Boolean flag:</p>
<pre class="prettyprint">
struct appdata {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *nf;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *box;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *rect;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;

&nbsp;&nbsp;&nbsp;&nbsp;/* List of mouse spots */
&nbsp;&nbsp;&nbsp;&nbsp;Eina_List *spots;

&nbsp;&nbsp;&nbsp;&nbsp;/* Flag for checking the mouse down event */
&nbsp;&nbsp;&nbsp;&nbsp;Eina_Bool down;
};
typedef struct appdata appdata_s;
</pre>
</li>
<li>
<p>In the <span style="font-family: Courier New,Courier,monospace">main()</span> function, initialize the event callbacks and call the <span style="font-family: Courier New,Courier,monospace">ui_app_main()</span> function to start the EFL application main loop:</p>
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui_app_region_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_remove_event_handler(handlers[APP_EVENT_LOW_MEMORY]);

&nbsp;&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The following figure illustrates the example application screen.</p>

  <p class="figure">Figure: Multi-point touch screen</p> 
  <p align="center"><img alt="Multi-point touch screen" src="../../images/multipoint_touch.png" /></p> 
</li>
</ol>

 <h2 id="canvas" name="canvas">Handling the Canvas</h2>

 <p>To handle the canvas:</p>
 <ol>
 <li>
<p>In the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, create the base UI elements, including the naviframe and button. The naviframe includes each view screen as an item, and the item in turn includes a title, a button which clears the spots when clicked, and the actual content (in this case, a box component).</p> 

<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;&nbsp;/* Naviframe */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;&nbsp;/* Button */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;button = elm_button_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;button, &quot;Clear&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;button, &quot;clicked&quot;, button_clicked_cb, ad);

&nbsp;&nbsp;&nbsp;&nbsp;/* Create main view */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;box = create_main_view(ad);
&nbsp;&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;Multi-point Touch&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, ad-&gt;box, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, ad-&gt;button);
} 
</pre>
</li>
<li>
<p>In the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function, create the view screen content: the box with a label and an event rectangle.</p>
<p>The label displays information on the mouse event status and coordinates (X and Y positions). The event rectangle is received completely through the mouse (touch) events.</p>
<p>A box is used as a container for the label and rectangle, because to show multiple elements in a naviframe content area, a container combining those elements is necessary. The label and rectangle are packed at the end of the box, and the box is embedded into the naviframe content area.</p>

<pre class="prettyprint">
static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *box;

&nbsp;&nbsp;&nbsp;&nbsp;/* Box */
&nbsp;&nbsp;&nbsp;&nbsp;box = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;&nbsp;/* Label */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;label = elm_label_add(box);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;None&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, 0);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;label, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(ad-&gt;label, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;label);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;label);

&nbsp;&nbsp;&nbsp;&nbsp;/* Event Rect */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;rect = evas_object_rectangle_add(evas_object_evas_get(box));
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;rect, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;rect, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;rect, 204, 204, 204, 255);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(ad-&gt;rect, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;rect);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;rect);

&nbsp;&nbsp;&nbsp;&nbsp;return box;
}
</pre>
</li>
<li>
<p>In the <span style="font-family: Courier New,Courier,monospace">create_spot()</span> function, create a rectangle, resize it according to the received size input, and move it according to the received coordinate input (X and Y positions):</p>

<pre class="prettyprint">
Evas_Object*
create_spot(Evas_Object *parent, Evas_Coord x, Evas_Coord y, int size)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *spot;
&nbsp;&nbsp;&nbsp;&nbsp;spot = evas_object_rectangle_add(evas_object_evas_get(parent));
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(spot, size, size);
&nbsp;&nbsp;&nbsp;&nbsp;/* Adjust X and Y positions to be the object center */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(spot, x - (size/2), y - (size/2));
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(spot);

&nbsp;&nbsp;&nbsp;&nbsp;return spot;
}
</pre>
</li>
<li>
<p>The created rectangle is stored in the <span style="font-family: Courier New,Courier,monospace">Eina_List(ad-&gt;spots)</span> list to allow it to be removed when the user clicks <strong>Clear</strong>.</p>
<p>In the <span style="font-family: Courier New,Courier,monospace">button_clicked_cb()</span> button click callback, remove all <span style="font-family: Courier New,Courier,monospace">evas_objects</span> from the <span style="font-family: Courier New,Courier,monospace">ad-&gt;spots</span> list, to clear all spot rectangles from the screen.</p>

<pre class="prettyprint">
static void
button_clicked_cb(void *data, Evas *evas, Evas_Object *object, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *spot;

&nbsp;&nbsp;&nbsp;&nbsp;/* Remove the objects from the list */
&nbsp;&nbsp;&nbsp;&nbsp;EINA_LIST_FREE(ad-&gt;spots, spot) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(spot);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;spot = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;/* Update the label text */
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, &quot;Clear&quot;);
}
</pre>
</li>
</ol>

 <h2 id="touch" name="touch">Managing Touch Events</h2>

<p>Within the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function, where the box component is created, event callbacks are added for the box to draw event rectangles according to touch events. The event callback is added using the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function.</p>

<p>The following example shows how to add and define an event callback for a move event by drawing a black rectangle after each movement. To distinguish the places where the user touches down and releases the touch, you can add and define additional event callbacks for down and up events, by setting a different color for the down and up rectangles.</p>

<p>If the given object receives a touch event, a callback function is called, and event information, such as coordinates (X and Y positions) is passed. In this example, the <span style="font-family: Courier New,Courier,monospace">mousemove_cb()</span> function updates the label text with the touch coordinates, and draws a spot rectangle in those coordinates.</p>

<pre class="prettyprint">
static void
mousemove_cb(void *data, Evas *evas, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *spot;
&nbsp;&nbsp;&nbsp;&nbsp;char buf[1024];
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Event_Mouse_Move *ev = event_info;
&nbsp;&nbsp;&nbsp;&nbsp;/* Retrieve the coordinates */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord x = ev-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Coord y = ev-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;&nbsp;int size = (int) 5 * elm_config_scale_get();

&nbsp;&nbsp;&nbsp;&nbsp;if (!ad-&gt;down)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;&nbsp;/* Update the label text */
&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;Mouse Move, %d, %d&quot;, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(ad-&gt;label, buf);

&nbsp;&nbsp;&nbsp;&nbsp;/* Draw the spot rectangle */
&nbsp;&nbsp;&nbsp;&nbsp;spot = create_spot(ad-&gt;rect, x, y, size);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(spot, 0, 0, 0, 255);
&nbsp;&nbsp;&nbsp;&nbsp;/* Store the rectangle to the list */
&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;spots= eina_list_append(ad-&gt;spots, spot);
}

static void
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *box;

&nbsp;&nbsp;&nbsp;&nbsp;/* Create the box */
&nbsp;&nbsp;&nbsp;&nbsp;box = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;&nbsp;/* Add the callback */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(box, EVAS_CALLBACK_MOUSE_MOVE, mousemove_cb, ad);
}
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The event types for a touch event contain the &quot;MOUSE&quot; keyword due to backward compatibility with Tizen 2.3. Before the multi-point touch concept was introduced, there was no difference between a single touch event and a mouse event. As a result, the single touch event used the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN/UP/MOVE</span> event types.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>The following touch event types are supported:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>: Object receives the mouse/touch down event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_UP</span>: Object receives the mouse/touch up event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_MOVE</span>: Object receives the mouse/touch move event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_DOWN</span>: Object has already received the mouse/touch down event and receives the multi-mouse/touch down event.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_UP</span>: Object receives the multi-mouse/touch up event. </li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_MOVE</span>: Object receives the multi-mouse/touch move event.</li>
</ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
