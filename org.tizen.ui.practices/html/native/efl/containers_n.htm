<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Using Container UI Components</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>

	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#box">Box</a></li>
			<li><a href="#conformant">Conformant</a></li>
			<li><a href="#grid">Grid</a></li>
			<li><a href="#layout">Layout</a></li>
			<li><a href="#mapbuf">Mapbuf</a></li>
			<li><a href="#naviframe">Naviframe</a></li>
			<li><a href="#panes">Panes</a></li>
			<li><a href="#scroller">Scroller</a></li>
			<li><a href="#table">Table</a></li>
			
			</ul>
		<p class="toc-title">Related Info</p>
			<ul class="toc">
				<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
				<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
				<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
				<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Using Container UI Components</h1>

				<h2 id="box" name="box">Box</h2>
				

  <p class="figure">Figure: Box container</p>
  <p align="center"><img alt="Box container" src="../../images/box.png" /></p>


<p>Most of the time, you want to display UI components on the screen in a specific order. In a <a href="form_tutorial_n.htm">form container</a>, for example, the user information is arranged vertically. This basic container is called a box. There is no theme for a box layout. It is just a linear method of arranging UI components horizontally or vertically.</p>
<h3>Creating a Box</h3>
<p>To create a new horizontal box:</p>
<pre class="prettyprint">Evas_Object *vbox;

vbox = elm_box_add(parent);
</pre>
<p>By default, the <span style="font-family: Courier New,Courier,monospace">elm_box_add()</span> function creates a vertical box. If you want to create a horizontal box, use the <span style="font-family: Courier New,Courier,monospace">elm_box_horizontal_set()</span> function:</p>
<pre class="prettyprint">Evas_Object *hbox;

hbox = elm_box_add(parent);
elm_box_horizontal_set(hbox, EINA_TRUE);
</pre>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">A box is a non-graphical object. It adds no graphics to or around the objects it holds.</td>
    </tr>
   </tbody>
  </table>

<h3>Adding Objects to the Box</h3>
<p>You can add any Evas object to the box. Here, we create 5 button components and add them to a box:</p>
<pre class="prettyprint">int i;
Evas_Object *bt;
Evas_Object *vbox;

vbox = elm_box_add(parent);

for (i = 0; i &lt; 5; i++)
{
&nbsp;&nbsp;&nbsp;char tmp[16];
&nbsp;&nbsp;&nbsp;snprintf(tmp, sizeof(tmp), &quot;Button %d&quot;, i);
&nbsp;&nbsp;&nbsp;bt = elm_button_add(vbox);
&nbsp;&nbsp;&nbsp;elm_object_text_set(bt, tmp);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(vbox, bt);
&nbsp;&nbsp;&nbsp;evas_object_show(bt);
}
evas_object_show(vbox);
</pre>
<p>The most important function in the above code is <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span>, which is used to add the button component to the end of the box.</p>

<h3>Setting the Padding</h3>
<p>You can set the padding between the objects in a box by using the <span style="font-family: Courier New,Courier,monospace">elm_box_padding_set()</span> function. The padding values are the number of pixels horizontally and vertically.</p>
<pre class="prettyprint">elm_box_padding_set(vbox, 16, 64);
</pre>

<h3>Handling Element Size</h3>
<p>You can add different-size elements to a container. For example, to add an image with a size of 128x128 pixels as the first element in a box, use the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_start()</span> function:</p>
<pre class="prettyprint">ic = elm_icon_add(vbox);
elm_image_file_set(ic, &quot;./c1.png&quot;, NULL);
evas_object_size_hint_min_set(ic, 128, 128);
evas_object_show(ic);
elm_box_pack_start(vbox, ic);
</pre>
<p>We ask Evas to set the size hint for the icon object by using the <span style="font-family: Courier New,Courier,monospace">elm_object_size_hint_min_set()</span> function. Evas will try to set the minimum size of this object accordingly.</p>
<p>If you want to create a homogeneous box, where all objects have the same height or width, depending on the orientation of the box, use the <span style="font-family: Courier New,Courier,monospace">elm_box_homogeneous_set()</span> function:</p>
<pre class="prettyprint">elm_box_homogeneous_set(vbox, EINA_TRUE);
</pre>
<p>Elementary will set the height of the tallest object as the height of all objects, or the width of the widest element as the width of all objects.</p>
<h3>Setting the Alignment</h3>
<p>You can set the alignment of UI components inside a box using the <span style="font-family: Courier New,Courier,monospace">elm_box_align_set()</span> function. The function takes two doubles values, a horizontal value and a vertical value, representing the percentage between 0 and 1.0 of the alignment in the horizontal and vertical axes. When you add a UI component with the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> or <span style="font-family: Courier New,Courier,monospace">elm_box_pack_start()</span> function, Elementary computes the global size of the box. If the global size is bigger than the size of the box's parent, the box will take up all the space occupied by the parent, and the size of the parent may be extended to hold the box. If the global size is smaller than the parent's size, the alignment values will set the position of the box inside the parent.</p>

<p class="figure">Figure: Alignment</p>
<p align="center"><img alt="Alignment" src="../../images/align.png" /></p>

<p>Here, we set an alignment of 0.8 vertically:</p>
<pre class="prettyprint">elm_box_align_set(vbox, 0.0, 0.8);
</pre>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">The alignment only takes effect in the opposite direction than the one defined with the <span style="font-family: Courier New,Courier,monospace">elm_box_horizontal_set()</span> function.</td>
    </tr>
   </tbody>
  </table>


<p>The <span style="font-family: Courier New,Courier,monospace">elm_box_layout_transition()</span> function provides the ability to animate the motion of the objects in a box when switching from one layout to another.</p>
<h3>Using Size Hints</h3>
<p>Size hints are a set of functions that can be used on any Evas object. You request Evas to take care of various properties, and Evas will honor these requests if it can. This is why they are called &quot;hints&quot;. The size hint functions are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_min_set()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_max_set()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_aspect_set()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_align_set()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_weight_set()</span></li>
</ul>
<p>You can also use the respective get functions to get the current hint values.</p>
<p>In case of the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_min_set()</span> function, you ask Evas to respect the minimum size you define for the object. For example, to set the minimum size of an icon to 64x46 pixels:</p>
<pre class="prettyprint">evas_object_size_hint_min_set(ic, 64, 64);
</pre>
<p>You can also set a maximum size for the same icon:</p>
<pre class="prettyprint">evas_object_size_hint_max_set(ic, 128, 128);
</pre>
<p>When you resize the parent of the icon, if there are no constraints to the parent, the minimum size of the parent will be the minimum hint size of the icon. If you increase the parent size, the icon will grow larger until its maximum hint size is reached. After this point, the icon will not grow any larger and there will be empty space around the icon within the parent.</p>
<p>When the aspect size hint is set, Evas tries to fix the dimensional proportions of the object. Here, the proportion of the icon is respected, and the width will be the same as the height:</p>
<pre class="prettyprint">evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 1, 1);
</pre>
<p>Here, the width will be twice the height:</p>
<pre class="prettyprint">evas_object_size_hint_aspect_set(ic, EVAS_ASPECT_CONTROL_VERTICAL, 2, 1);
</pre>
<p>If we want to change the alignment of the icon relative to the parent, we can use the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_align()</span> function. By default, the icon is centered, so it is aligned with a value of 0.5. You can change the alignment as follows:</p>
<pre class="prettyprint">evas_object_size_hint_align_set(ic, EVAS_HINT_FILL, EVAS_HINT_FILL);
</pre>
<p>In the above case, the icon is aligned to the bottom left corner of the parent.</p>
<p>We can also play with the size of the icon inside its container by using the weight size hint. By default, the weight is not set, so the size of the icon will be the minimum size. But if you set this value to 1, the icon will be expand as much as it can inside the container:</p>
<pre class="prettyprint">evas_object_size_hint_weight_set(ic, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
</pre>
<p>You can also use the alignment and weight hints together. Here, we want the icon to take up all the space in its parent:</p>
<pre class="prettyprint">evas_object_size_hint_align_set(ic, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_size_hint_weight_set(ic, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
</pre>
 
		
				<h2 id="conformant" name="conformant">Conformant</h2>

<p class="figure">Figure: Conformant container</p>
<p align="center"><img alt="Conformant container" src="../../images/conformant.png" /></p>

<p>A conformant is a container UI component that accounts for the space taken by the indicator, virtual keyboard, and softkey windows. The content area of the conformant is resized and positioned based on the space available. When the virtual keyboard is displayed, the content area is not resized.</p>

<h3>Creating a Conformant</h3>
<p>To create a conformant, use the <span style="font-family: Courier New,Courier,monospace">elm_conformant_add()</span> function:</p>
<pre class="prettyprint">
Evas_Object *conformant;

conformant = elm_conformant_add(parent);
</pre>

<h3>Adding Content to the Conformant</h3>
<p>To add content to the conformant, use the <span style="font-family: Courier New,Courier,monospace">elm_object_content_set()</span> function:</p>
<pre class="prettyprint">elm_object_content_set(conformant, main_view);
</pre>

<h3>Signals</h3>
<p>To receive notifications about the state of the virtual keyboard and clipboard, listen to the following Evas signals:</p>
<ul>
<li>&quot;virtualkeypad,state,on&quot;: The virtual keyboard has been switched on.</li>
<li>&quot;virtualkeypad,state,off&quot;: The virtual keyboard has been switched off.</li>
<li>&quot;virtualkeypad,size,changed&quot;: The virtual keyboard size has changed.</li>
<li>&quot;clipboard,state,on&quot;: The clipboard has been switched on.</li>
<li>&quot;clipboard,state,off&quot;: The clipboard has been switched off. </li>
</ul>

			
				<h2 id="grid" name="grid">Grid</h2>

<p>In a grid, objects are placed at specific positions along a fixed grid, where the position of each object is given as a percentage of the full width and height of the grid. By default, the size of the grid is 100 x 100 pixels.</p>

<h3>Creating a Grid</h3>
<p>To create a grid, use the <span style="font-family: Courier New,Courier,monospace">elm_grid_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *grid;

grid = elm_grid_add(parent);
</pre><h3>Adding Items to the Grid</h3>
<p>To add an item to the grid, use the <span style="font-family: Courier New,Courier,monospace">elm_grid_pack_set()</span> function. Provide the X and Y coordinates, and the width and height in the grid as parameters. The following code adds 12 icons in a circle formation:</p>
<pre class="prettyprint">for (i = 0; i &lt; 12; i++)
{
&nbsp;&nbsp;&nbsp;ic = elm_icon_add(grid);
&nbsp;&nbsp;&nbsp;elm_image_file_set(ic, &quot;c1.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(ic, 128, 128);
&nbsp;&nbsp;&nbsp;evas_object_show(ic);
&nbsp;&nbsp;&nbsp;x = 40 * cos(2.0 * M_PI / 12 * i);
&nbsp;&nbsp;&nbsp;y = 40 * sin(2.0 * M_PI / 12 * i);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, ic,  40 + x,  40 + y,  20 , 20);
}
evas_object_show(grid);
</pre>

<h3>Changing Position and Size</h3>
<p>To change the position of an item in the grid, use the <span style="font-family: Courier New,Courier,monospace">elm_grid_pack_set()</span> function. The first parameter is the item you want to move, and the following parameters are the same as for the <span style="font-family: Courier New,Courier,monospace">elm_grid_pack()</span> function.</p>
<p>To change the size of the grid, use the <span style="font-family: Courier New,Courier,monospace">elm_grid_size_set()</span> function. You can set the new width and height for the grid. The position and size of the items in the grid are changed accordingly.</p>
<h3>Clearing the Grid</h3>
<p>To clear the grid, use the <span style="font-family: Courier New,Courier,monospace">elm_grid_clear()</span> function. All items are removed from the grid. If you set the clear parameter, all the items are also deleted, with the <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> function called on each item.</p>


				<h2 id="layout" name="layout">Layout</h2>

<p>A layout is a container that takes a standard Edje design file and wraps it very thinly in a UI component. Layouts are the basis of a lot of graphics components used in Elementary.</p>

<p>An Edje design file describes how the elements of the UI are positioned and how they behave when interacted with. For more information about Edje, see <a href="theme_n.htm">Themes</a>.</p>

<h3 id="container_layout_creating" name="container_layout_creating">Creating a Layout</h3>

<p>To create a new layout, use the <span style="font-family: Courier New,Courier,monospace">elm_layout_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *layout;

layout = elm_layout_add(parent);
</pre>
<p>In Tizen, the layout component is extended to support different kinds of layouts. Rather than define layouts yourself, you can use the following predefined default layouts:</p>
<ul>
<li>application/default: This layout can be used to display content inside a window.</li>
<li>drawer/panel: This layout can be used to create a 2-panel view.</li>
<li>nocontents/default: This layout can be used when there is no content to display, such as in a contact or email.</li>
</ul>
<p>To use the application/default layout:</p>
<pre class="prettyprint">Evas_Object *ly;

ly = elm_layout_add(parent);
elm_layout_theme_set(ly, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
</pre>

<h3 id="container_layout_inserting_objects" name="container_layout_inserting_objects">Adding Objects to the Layout</h3>
<p>To add an Evas object to the layout:</p>
<pre class="prettyprint">elm_object_part_content_set(ly, &quot;elm.swallow.content&quot; view);
</pre>
<p><span style="font-family: Courier New,Courier,monospace">elm.swallow.content</span> is the swallow part of the application layout, and with this call you integrate the view inside the swallow object of the layout.</p>
<p>The drawer/panel layout can display 2 different views, the background and the main content:</p>
<pre class="prettyprint">Evas_Object *ly;

ly = elm_layout_add(parent);
elm_layout_theme_set(ly, &quot;layout&quot;, &quot;drawer&quot;, &quot;panel&quot;);
</pre>
<p>To swallow an object inside the main content and background views:</p>
<pre class="prettyprint">elm_object_part_content_set(ly, &quot;elm.swallow.content&quot;, main_view);
elm_object_part_content_set(ly, &quot;elm.swallow.background&quot;, background);
</pre>
<p>The nocontents/default layout is a special layout in that it does not contain any swallows. You can only set the text part. There are two different texts zones: <span style="font-family: Courier New,Courier,monospace">elm.text</span> and <span style="font-family: Courier New,Courier,monospace">elm.help.text</span>. To change the text:</p>
<pre class="prettyprint">elm_object_part_text_set(ly, &quot;elm.text&quot;, &quot;Hi All :)&quot;);
elm_object_part_text_set(ly, &quot;elm.help.text&quot;, &quot;Hi All :)&quot;);
</pre>
<h3 id="container_layout_styles" name="container_layout_styles">Using Layout Themes</h3>
<p>The layout component supports the following predefined default themes:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">toolbar-content</span>: For applications with a toolbar and main content area.</li>
<li><span style="font-family: Courier New,Courier,monospace">toolbar-content-back</span>: For applications with a toolbar, main content area (with a back button), and title area.</li>
<li><span style="font-family: Courier New,Courier,monospace">toolbar-content-back-next</span>: For applications with a toolbar, main content area (with back and next buttons), and title area.</li>
<li><span style="font-family: Courier New,Courier,monospace">content-back</span>: For applications with main content (with a back button) and title areas.</li>
<li><span style="font-family: Courier New,Courier,monospace">content-back-next</span>: For applications with main content (with back and next buttons) and title areas.</li>
<li><span style="font-family: Courier New,Courier,monospace">toolbar-vbox</span>: For applications with a toolbar and main content area as a vertical box.</li>
<li><span style="font-family: Courier New,Courier,monospace">toolbar-table</span>: For applications with a toolbar and main content area as a table.</li>
</ul>
<p>To set a theme to the layout, use the <span style="font-family: Courier New,Courier,monospace">elm_layout_theme_set()</span> function.</p>


				<h2 id="mapbuf" name="mapbuf">Mapbuf</h2>

<p class="figure">Figure: Mapbuf hierarchy</p>
<p align="center"><img alt="Mapbuf hierarchy" src="../../images/mapbuf_tree.png" /></p>

<p>A mapbuf component is a container UI component that uses an Evas map to hold a content object. This component is used to improve the moving and resizing performance of complex UI components.</p>

<p>The content object is treated as a single image by the Evas map. If you have a content object containing several child objects, frequently moving the mapbuf component will be faster than frequently moving the content object.</p>

<p>The mapbuf component inherits all the functions of the container class.</p>

<h3>Creating a Mapbuf</h3>
<p>To create a mapbuf component, use the <span style="font-family: Courier New,Courier,monospace">elm_mapbuf_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *mapbuf, *parent, *content;

// Creating a mapbuf
mapbuf = elm_mapbuf_add(parent);
</pre>
<h3>Adding Content to the Mapbuf</h3>
<p>To add content to the mapbuf component, use the <span style="font-family: Courier New,Courier,monospace">elm_object_content_set()</span> function with the &quot;default&quot; part:</p>
<pre class="prettyprint">elm_object_content_set(mapbuf, content);</pre>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">Calling <span style="font-family: Courier New,Courier,monospace">elm_object_content_set(mapbuf, content)</span> is equivalent to calling <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set(mapbuf, "default", content)</span>.</td>
    </tr>
   </tbody>
  </table>


<p>To activate smooth map rendering and alpha rendering for the mapbuf component:</p>
<pre class="prettyprint">elm_mapbuf_smooth_set(mapbuf, EINA_TRUE);
elm_mapbuf_alpha_set(mapbuf, EINA_TRUE);
</pre>

<h3>Activating the Mapbuf</h3>
<p>Finally, to use the mapbuf component, you must activate it:</p>
<pre class="prettyprint">elm_mapbuf_enabled_set (mapbuf, EINA_TRUE);</pre>

<h3>Signals</h3>
<p>The mapbuf component does not emit any signals and therefore does not provide any callbacks that you can register.</p>

			
				<h2 id="naviframe" name="naviframe">Naviframe</h2>

<p>A naviframe component consists of a stack of views. New views are pushed on top of previous ones, and only the top-most view on the stack is displayed. The previous views are not deleted. A previous view is displayed when the view on top of it is popped. Transitions can be animated on a push or a pop, depending on the theme applied to the UI component.</p>

<h3>Creating a Naviframe</h3>
<p>To create a naviframe, use the <span style="font-family: Courier New,Courier,monospace">elm_naviframe_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *nav;

nav = elm_naviframe_add(parent);
</pre>
<h3>Adding and Deleting Views</h3>
<p>The naviframe is a stack of views. A new view is always pushed to the top of the stack. The top-most view is deleted by popping it.</p>
<p>To add a new view to the naviframe:</p>
<pre class="prettyprint">Elm_Object_Item *nav_it;

nav_it = elm_naviframe_item_push(nav, NULL, NULL, NULL, view, NULL);
// In Tizen 2.3, the back button is not supported in the naviframe 
</pre>
<p>When you push a new view to the stack, you receive an <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> for the view. You can use this item to modify the view.</p>
<p>To pop and delete the top-most view:</p>
<pre class="prettyprint">elm_naviframe_item_pop(nav);
</pre>

<h3>Adding Fixed Content</h3>
<p>The naviframe can also display fixed content on top of the current (top-most) view. Use the <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_content_set()</span> function to set this content. Use the following part names to specify the location of the content:</p>
<ul>
<li>&quot;default&quot;: The main content area of the current view.</li>
<li>&quot;title_left_btn&quot;: A button on the left side of the naviframe.</li>
<li>&quot;title_right_btn&quot;: A button on the right side of the naviframe.</li>
</ul>
<p>For example, to add a button to the naviframe:</p>
<pre class="prettyprint">btn = elm_button_add(nav);
elm_object_style_set(btn, &quot;naviframe/title_cancel&quot;);
elm_object_item_part_content_set(nav_it, &quot;title_left_btn&quot;, btn);
</pre>
<p>To set the title labels of the naviframe, use the <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_text_set()</span> function and specify one of the following label locations:</p>
<ul>
<li>&quot;default&quot;: Sets the title label in the title area of the current view.</li>
<li>&quot;subtitle&quot;: Sets the subtitle label in the title area of the current view.</li>
</ul>
<h3>Signals</h3>
<p>The naviframe emits the following signals:</p>
<ul>
<li>&quot;transition,finished&quot;: The transition has finished changing the view.</li>
<li>&quot;title,transition,finished&quot;: The title area transition has finished  changing the state of the title.</li>
<li>&quot;title,clicked&quot;: The user has clicked the title area.</li>
</ul>


		
				<h2 id="panes" name="panes">Panes in Mobile Applications</h2>

<p class="figure">Figure: Panes component</p>
<p align="center"><img alt="Panes component" src="../../images/panes.png" /></p>

<p>A panes component adds a draggable bar between two sections of content. The sections are resized when the bar is dragged.</p>

<h3>Creating Panes</h3>
<p>To create a panes component, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *panes;

panes = elm_panes_add(parent);
</pre>

<h3>Adding Content to the Panes</h3>
<p>To add content to the panes, use the <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function. The following code adds an object to the left pane:</p>
<pre class="prettyprint">elm_object_part_content_set(panes, &quot;left&quot;, obj);
</pre>

<h3>Setting Panes Options</h3>
<p>To set the orientation of the panes, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_horizontal_set()</span> function.</p>

<p>To set the size of the panes, use the <span style="font-family: Courier New,Courier,monospace">elm_panes_content_left_size_set()</span> and <span style="font-family: Courier New,Courier,monospace">elm_panes_content_right_size_set()</span> functions.</p>

<h3>Signals</h3>
<p>The panes component emits the following signals:</p>
<ul>
<li>&quot;press&quot;: The panes component has been pressed (but the press has not been released yet).</li>
<li>&quot;unpress&quot;: The press has been released.</li>
<li>&quot;clicked&quot;: The panes component has been clicked.</li>
<li>&quot;clicked,double&quot;: The panes component has been double-clicked.</li>
</ul>

		
				<h2 id="scroller" name="scroller">Scroller</h2>

<p>A scroller holds (and clips) a single object and allows you to scroll across it. This means that the user can use a scroll bar or their finger to drag the viewable region across the object, moving through a much larger area than is contained in the viewport. The scroller will always have a default minimum size that is not limited by its contents.</p>
<p>The scroller component inherits all the functions of the <a href="#layout">Layout</a>.</p>
<h3>Creating a Scroller</h3>
<p>To create a scroller, use the <span style="font-family: Courier New,Courier,monospace">elm_scroller_add()</span> function:</p>
<pre class="prettyprint">
Evas_Object *scroller;

scroller = elm_scroller_add(parent);
</pre>
<h3>Adding Objects to the Scroller</h3>
<p>To add an object to the scroller, use the <span style="font-family: Courier New,Courier,monospace">elm_object_content_set()</span> function:</p>
<pre class="prettyprint">Evas_Object *image;

image = elm_image_add(parent);
elm_image_file_set(image, &quot;image.png&quot;, NULL);
evas_object_show(image);
evas_object_size_hint_min_set(image, 2560, 1600);
elm_object_content_set(scroller, image);
</pre>
<p>In the above code, we set a minimum size of 2560 x 1600 pixels for the image. The scroller is smaller than the image, so you can scroll across the image.</p>
<p>If you want to be informed when the user begins scrolling the image, use the following code:</p>
<pre class="prettyprint">
evas_object_smart_callback_add(scroller, &quot;scroll,drag,start&quot;, _scroll_start_cb, NULL);

// Callback function for the &quot;animate,begin&quot; signal
// This callback is called when the user begins scrolling the image
void _scroll_start_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;printf(&quot;Scroll starts\n&quot;);
}</pre>

<h3>Managing the Properties of the Scroller</h3>
<p>When scrolling content, the scroller may &quot;bounce&quot; when reaching the edge of the content. This is a visual way of indicating that there is no more content to scroll in that direction. Bounce is enabled by default for both axes. To enable or disable the bounce for either or both axes, use the <span style="font-family: Courier New,Courier,monospace">elm_scroller_bounce_set()</span> function. The following code disables the bounce for the horizontal axis and enables it for the vertical axis:</p>

<pre class="prettyprint">elm_scroller_bounce_set(scroller, EINA_FALSE, EINA_TRUE);
</pre>
<p>The scroller can limit the scrolling to &quot;pages&quot;. In this case, the scrolling occurs in page-sized chunks of content rather than in a purely continuous fashion, with the scroller displaying a single "page" at a time. This feature sets the size of the page relative to the viewport of the scroller. A size of 1.0 equals 1 viewport (horizontally or vertically). A size of 0.0 disables paging for that axis. These settings are mutually exclusive with page size (see the <span style="font-family: Courier New,Courier,monospace">elm_scroller_page_size_set()</span> function). A size of 0.5 equals half a viewport. Usable size values are normally between 0.0 and 1.0, including 1.0. If you only want a single axis to scroll in pages, use 0.0 for the other axis.</p>

<h3>Signals</h3>

<p>The scroller emits the following signals, which you can catch in your application:</p>

<ul>
<li>&quot;edge,left&quot;: The left edge of the content has been reached.</li>
<li>&quot;edge,right&quot;: The right edge of the content has been reached.</li>
<li>&quot;edge,top&quot;: The top edge of the content has been reached.</li>
<li>&quot;edge,bottom&quot;: The bottom edge of the content has been reached.</li>
<li>&quot;scroll&quot;: The content has been scrolled (moved).</li>
<li>&quot;scroll,anim,start&quot;: The scrolling animation has started.</li>
<li>&quot;scroll,anim,stop&quot;: The scrolling animation has stopped.</li>
<li>&quot;scroll,drag,start&quot;: Dragging the contents has started.</li>
<li>&quot;scroll,drag,stop&quot;: Dragging the contents has stopped.</li>
<li>&quot;vbar,drag&quot;: The vertical scroll bar has been dragged.</li>
<li>&quot;vbar,press&quot;: The vertical scroll bar has been pressed.</li>
<li>&quot;vbar,unpress&quot;: The vertical scroll bar has been unpressed.</li>
<li>&quot;hbar,drag&quot;: The horizontal scroll bar has been dragged.</li>
<li>&quot;hbar,press&quot;: The horizontal scroll bar has been pressed.</li>
<li>&quot;hbar,unpress&quot;: The horizontal scroll bar has been unpressed.</li>
<li>&quot;scroll,page,changed&quot;: The visible page has changed.</li>
</ul>

<h3>Example</h3>
<p>A good example of the scroller is a picture slideshow: we add images to the scroller and limit the scrolling to pages (one picture at a time). In the following code, we disable the scroll bars for both axes, limit the scrolling to pages by using the <span style="font-family: Courier New,Courier,monospace">elm_scroller_page_scroll_limit_set()</span> function, and lock the scrolling on the Y axis by using the <span style="font-family: Courier New,Courier,monospace">elm_object_scroll_lock_y_set()</span> function:</p>
<pre class="prettyprint">elm_scroller_policy_set(scroller, ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_OFF);
elm_scroller_page_scroll_limit_set(scroller, 1, 0);
elm_object_scroll_lock_y_set(scroller, EINA_TRUE);
</pre>
<p>We create a horizontal box, which will contain all the images, and which itself will be contained by the scroller:</p>
<pre class="prettyprint">box = elm_box_add(scroller);
elm_box_horizontal_set(box, EINA_TRUE);
elm_object_content_set(scroller, box);
evas_object_show(box);
</pre>
<p>We then create all the images and add them to the horizontal box:</p>
<pre class="prettyprint">img = elm_image_add(scroller);
snprintf(buf, sizeof(buf), IMAGE_DIR&quot;/%d.jpg&quot;, i);
elm_image_file_set(img, buf, NULL);
evas_object_show(img);
pages = eina_list_append(pages, img);
elm_box_pack_end(box, img);
</pre>
<p>We store references to the images in an <span style="font-family: Courier New,Courier,monospace">eina_list</span> for easy retrieval later.</p>
<p>Finally, we display the first page of the scroller:</p>
<pre class="prettyprint">elm_scroller_page_show(scroller, 0, 0);
</pre>
<p>The size of the scroller depends on the size of the parent. When the parent changes, for example when the window is resized or rotated, the scroller is also resized. Since we need to be informed when the scroller is resized, we add a callback on the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RESIZE</span> event for the scroller:</p>
<pre class="prettyprint">evas_object_event_callback_add(scroller, EVAS_CALLBACK_RESIZE, _scroller_resize_cb, NULL);</pre>
<p>The callback retrieves the new size of the scroller by using the <span style="font-family: Courier New,Courier,monospace">evas_object_geometry_get()</span> function on the object pointer. The pointer is relative to the object that has been resized, which in our case is the scroller itself. We can then iterate through the images of the scroller and set the minimum size to fit the scroller size:</p>
<pre class="prettyprint">EINA_LIST_FOREACH(images, l, page)
{
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(page, w, h);
}
</pre>
<p>Finally, we set the page size of the scroller to match the scroller size and display the first page:</p>
<pre class="prettyprint">elm_scroller_page_size_set(obj, w, h);
elm_scroller_page_show(obj, 0, 0);</pre>

				<h2 id="table" name="table">Table</h2>

<p>A table is like a box but with 2 dimensions. You have the same kind of APIs as with boxes. An item inside the table can span multiple columns and rows, and even overlap with other items (and it can then be raised or lowered accordingly to adjust stacking if there is overlap).</p>

<h3>Creating a Table</h3>

<p>To create a table, use the <span style="font-family: Courier New,Courier,monospace">elm_table_add()</span> function:</p>
<pre class="prettyprint">Evas_Object *table;
table = elm_table_add(parent);</pre>

<h3>Adding Items to the Table</h3>

<p>Items are added to the table with the <span style="font-family: Courier New,Courier,monospace">elm_table_pack()</span> function. This function takes as parameters the table, the item to add to the table, and the position where to add the item: column, row, and the size of the item in number of rows and columns (colspan and rowspan). If we want to create an icon that takes 3 columns and rows and a button that only takes 1 row and column, the code will look like this:</p>
<pre class="prettyprint">ic = elm_icon_add(table);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
evas_object_show(ic);
elm_table_pack(table, ic, 0, 0, 3, 3);

btn = elm_button_add(table);
elm_object_text_set(btn, &quot;Click me i'm famous&quot;);
evas_object_show(btn);
elm_table_pack(table, btn, 3, 1, 1, 1);
evas_object_show(table);
</pre>

<h3>Managing the Items</h3>

<p>If you want to change the position of the item after adding it, use the <span style="font-family: Courier New,Courier,monospace">elm_table_pack_set()</span> function. This function takes as parameters the item whose position to change, the new column, the new row, and the size of the item in number of rows and columns (colspan and rowspan).</p>

<p>To add padding around the item, use the <span style="font-family: Courier New,Courier,monospace">elm_table_padding_set()</span> function. The second parameter is the padding between columns, and the third parameter is the padding between rows:</p>
<pre class="prettyprint">elm_table_padding_set(table, 10, 10);</pre>

<p>To change the alignment and size of an item, use the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint</span> parameters. They are used in the same way as with boxes. You can set the same size and weight to each item by using the homogeneous parameter:</p>
<pre class="prettyprint">elm_table_homogeneous_set(table, EINA_TRUE);
</pre>

<h3>Clearing the Table</h3>

<p>To clear the table, use the <span style="font-family: Courier New,Courier,monospace">elm_table_clear()</span> function. If the clear parameter is <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span>, the table items are deleted. The <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> function will be called on each item.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table> 

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

