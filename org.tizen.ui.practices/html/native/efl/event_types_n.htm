<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Event Types</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				
				<li><a href="#ecore">Ecore Events</a></li>
				<li><a href="#edje">Edje Events</a></li>
				<li><a href="#evas">Evas Events</a></li>
				<li><a href="#evas_object">Evas Object Events</a></li>
				<li><a href="#evas_smart_object">Evas Smart Object Events</a></li>
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>	
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>			
			
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
				
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Event Types</h1> 
  
<p>EFL provides various event types that you can use to monitor and react to user interactions and system events in the UI.</p>  
  
<h2 id="ecore" name="ecore">Ecore Events</h2>

<p>Ecore events are used for low-level handling of events, such as key presses, network connections, and communication with sub-processes. In case of shortcuts, the low-level handling of key presses is particularly useful: instead of adding a signal handler to a specific graphical element, you can add one globally to guarantee that no matter which UI component is currently receiving events, the shortcut is caught correctly.</p>
<p>Ecore events can also be used to implement new graphical back-ends. However, they are low-level and not useful for most applications.</p>

<p>In addition to using predefined Ecore events, you can create your own events with the <span style="font-family: Courier New,Courier,monospace">ecore_event_type_new()</span> function. The function generates a new unique identifier, which you can use as the event type parameter when managing your events and event handlers.</p>


<h3 id="ecore_events_useful_for_shortcuts">Shortcut Events</h3>

<p>The following Ecore events are available for shortcuts. The event callbacks receive additional data through a <span style="font-family: Courier New,Courier,monospace">void *</span> object, whose type depends on the received event.</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_DOWN</span> and <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_UP</span> events: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Key Ecore_Event_Key;

struct _Ecore_Event_Key 
{
&nbsp;&nbsp;&nbsp;const char *keyname;
&nbsp;&nbsp;&nbsp;const char *key;
&nbsp;&nbsp;&nbsp;const char *string;
&nbsp;&nbsp;&nbsp;const char *compose;
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;
};
</pre>

</li>

<li><span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_BUTTON_DOWN</span> and <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_BUTTON_UP</span> events: 
<pre class="prettyprint">typedef struct _Ecore_Event_Mouse_Button Ecore_Event_Mouse_Button;
struct _Ecore_Event_Mouse_Button 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;
&nbsp;&nbsp;&nbsp;unsigned int buttons;
&nbsp;&nbsp;&nbsp;unsigned int double_click;
&nbsp;&nbsp;&nbsp;unsigned int triple_click;
&nbsp;&nbsp;&nbsp;int same_screen;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;

&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 0 if normal mouse, 1+ for other mouse-devices (such as multi-touch - other fingers)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int device; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Radius of press point - radius_x and radius_y if it is an ellipse (radius is the average of the 2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double radius, radius_x, radius_y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pressure - 1.0 == normal, &gt; 1.0 == more, 0.0 == none
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double pressure; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Angle relative to perpendicular (0.0 == perpendicular), in degrees
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double angle; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Same as x, y, root.x, root.y, but with sub-pixel precision, if available
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} root;
&nbsp;&nbsp;&nbsp;} multi;
};
</pre>
 
</li>
<li><span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_MOVE</span> and <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_WHEEL</span> events: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Mouse_Wheel Ecore_Event_Mouse_Wheel;
struct _Ecore_Event_Mouse_Wheel 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;
&nbsp;&nbsp;&nbsp;int direction;
&nbsp;&nbsp;&nbsp;int z;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;
};
</pre>
</li>
<li><span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_IN</span> and <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_MOUSE_OUT</span> events: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Mouse_Move Ecore_Event_Mouse_Move;
struct _Ecore_Event_Mouse_Move 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;

&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 0 if normal mouse, 1+ for other mouse-devices (such as multi-touch - other fingers)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int device; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Radius of press point - radius_x and radius_y if it is an ellipse (radius is the average of the 2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double radius, radius_x, radius_y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pressure - 1.0 == normal, &gt; 1.0 == more, 0.0 == none
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double pressure; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Angle relative to perpendicular (0.0 == perpendicular), in degrees
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double angle; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Same as x, y, root.x, root.y, but with sub-pixel precision, if available
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} root;
&nbsp;&nbsp;&nbsp;} multi;
};
</pre>

</li>
</ul>
<h3 id="ecore_event_handler" name="ecore_event_handler">Managing Ecore Event Handlers</h3>

<p>To manage Ecore event handlers:</p>

<ol><li>To add an Ecore event handler, register a callback for a specific event with the <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_add()</span> function. 
<p>The function takes as parameters the event type (such as <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_DOWN</span> for key presses), callback function, and additional data delivered to the callback. The function returns an event handler pointer, which you can use to remove the handler later.</p></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Handler_Cb()</span> callback function.
<p>The function takes as parameters the additional data defined in the <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_add()</span> function parameters, the event type, and the event object (<span style="font-family: Courier New,Courier,monospace">Ecore_Event_Key</span>, <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Button</span>, <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Wheel</span>, or <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Move</span>). The function returns <span style="font-family: Courier New,Courier,monospace">ECORE_CALLBACK_PASS_ON</span> to allow other callbacks for that event be called, or <span style="font-family: Courier New,Courier,monospace">ECORE_CALLBACK_DONE</span> to not call them.</p></li>

<li>When no longer needed, remove the event handler with the <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_del()</span> function, using the event handler pointer as a parameter.</li></ol>

<p>The following example shows how you can set a global variable to <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> when the <strong>Ctrl</strong> key is pressed:</p>
<pre class="prettyprint">
Eina_Bool ctrl_pressed = EINA_FALSE;

static Eina_Bool
_key_down_cb(void *data __UNUSED__, int type __UNUSED__, void *ev)
{
&nbsp;&nbsp;&nbsp;// The callback is used with the ECORE_EVENT_KEY_DOWN signal: the
&nbsp;&nbsp;&nbsp;// parameter &quot;void *ev&quot; is therefore of the actual type Ecore_Event_Key
&nbsp;&nbsp;&nbsp;// The following renders its fields accessible
&nbsp;&nbsp;&nbsp;Ecore_Event_Key *event = ev;

&nbsp;&nbsp;&nbsp;// Test whether the key that is pressed is Ctrl.
&nbsp;&nbsp;&nbsp;if (!strcmp(&quot;Control_L&quot;, event-&gt;key))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If it is, store that piece of information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctrl_pressed = EINA_TRUE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Let the event continue to other callbacks which have not been called yet
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}

ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, _key_down_cb, NULL);
</pre>

<h3 id="ecore_event_manage" name="ecore_event_manage">Sending Ecore Events to the Main Loop</h3>

<p>You can send Ecore events to the main loop yourself to handle actions of various origins through the same codepath. This is a thread-safe operation.</p>
<p>To send an event, use the <span style="font-family: Courier New,Courier,monospace">ecore_event_add()</span> function. The function takes as parameters the event type (such as <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_DOWN</span> for key presses), additional data delivered to the callback, the <span style="font-family: Courier New,Courier,monospace">Ecore_End_Cb()</span> function used to free the additional data after it is deliver to the callback function, and the pointer to additional data delivered to the free function. The free function and the pointer to its additional data are optional; use <span style="font-family: Courier New,Courier,monospace">NULL</span> if you do not need them.</p>

  
<h2 id="edje" name="edje">Edje Events</h2>

<p>Edje <a href="theme_n.htm">themes</a> have small <span style="font-family: Courier New,Courier,monospace">program</span> sections, which are triggered upon the reception of a signal that can execute actions, such as changing the state of an Edje part and running another program.</p>

<h3 id="events_guide_edje_without_layout" name="events_guide_edje_without_layout">Managing a Single Signal Emitter</h3>
<p>The following example shoes a <span style="font-family: Courier New,Courier,monospace">program</span> section. The program is called &quot;change_color&quot;, it is triggered on mouse clicks on the current part, and it emits a &quot;got.a.click&quot; signal where the source is set to &quot;color_changer&quot;.</p>
<pre class="prettyprint">program 
{
&nbsp;&nbsp;&nbsp;name: &quot;change_color&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;*&quot;;
&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;got.a.click&quot; &quot;color_changer&quot;;
}
</pre>

<p>To catch the emitted signal from the C side, use either the <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> function. Their only difference is that the previous one operates on an Edje object and the latter one on an Elementary object. Unless you do not use the Elementary library at all, use the Elementary variant.</p>

<p>Both the functions take as parameters the object emitting the signal, the signal name (&quot;*&quot; acts as a wildcard), the signal source, the <span style="font-family: Courier New,Courier,monospace">Edje_Signal_Cb()</span> callback function called when the signal name and source match, and additional data delivered to the callback. For the signal name and source, &quot;*&quot; acts as a wildcard. The additional data is optional; use <span style="font-family: Courier New,Courier,monospace">NULL</span> if you do not need it.</p>

<p>The callback function takes as parameters the additional data defined in the <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> function parameters, the object emitting the signal, the signal name, and the signal source.</p>


<h3 id="events_guide_edje_with_layout" name="events_guide_edje_with_layout">Managing Multiple Signal Emitters in Layouts</h3>

<p>Most of the time, Edje and Elementary are used together. In particular, you can define a group in Edje and use it as a <a href="container_layout_n.htm">layout</a> (containing several parts) in Elementary. The layouts enable you to perform theming and object placement in Edje while benefiting from the higher-level functions of Elementary.</p>
<p>Since the layout contains multiple parts, you cannot use the <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> and <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> functions, as they require a single emitter object. The solution is to use the dedicated <span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span> function.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span> function works similarly as the <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> and <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> functions. The only difference is the type of the object in the first parameter. For <span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span>, it is a pointer to an Evas_Object, which is obtained through the <span style="font-family: Courier New,Courier,monospace">elm_layout_add()</span> function. For more information, see <a href="container_layout_n.htm">Layout</a>.</p>

  
<h2 id="evas" name="evas">Evas Events</h2>

<p>Evas events happen on a canvas as a whole. These events are too low-level for writing applications and are mostly used when writing the graphical toolkit itself.</p>

<p>The following Evas event types are available:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_FLUSH_PRE</span>: Rendering on the canvas is about to be updated.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_FLUSH_POST</span>: Rendering on the canvas is updated.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_FOCUS_IN</span>: Canvas receives focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_FOCUS_OUT</span>: Canvas loses focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_OBJECT_FOCUS_IN</span>: Any object on the canvas receives focus.
<p>Instead of this event type, use the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_IN</span> type with the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_OBJECT_FOCUS_OUT</span>: Any object on the canvas loses focus. 
<p>Instead of this event type, use the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_OUT</span> type with the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_PRE</span>: Rendering on the canvas starts.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_POST</span>: Rendering on the canvas finishes.</li>
</ul>

<p>To register the event handler, use the <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span> function. The function takes as parameters the Evas canvas on which the event happens (to obtain the canvas, use the Evas_Object through the <span style="font-family: Courier New,Courier,monospace">evas_object_evas_get()</span> function), the event type, the <span style="font-family: Courier New,Courier,monospace">Evas_Event_Cb</span> callback function, and the pointer to the additional data delivered to the callback. The additional data is optional; use <span style="font-family: Courier New,Courier,monospace">NULL</span> if you do not need it.</p>

<p>The callback function takes as parameters the additional data defined in the <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span> function parameters, the canvas where the event happened, and the event info data, which depends on the object type and the event at play.</p>


<h2 id="evas_object" name="evas_object">Evas Object Events</h2>

<p>Each Evas object on a specific Evas canvas can be manipulated independently. Each object can send events, which you can handle by registering callback functions for them. The events all relate to single objects, not the whole canvas.</p>

<p>The following Evas object event types are available:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span>: Pointer got over an object (with no other object between the 2). This takes place no matter how the pointer becomes directly above the object. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_OUT</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span> event, but when the pointer goes outside the object area. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Out</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>: Mouse button is pressed while the object is receiving events (either because the pointer is on top of the object or because the object had focus). The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_UP</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_MOVE</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Move</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_WHEEL</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Wheel</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_DOWN</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_UP</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_MOVE</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Move</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_KEY_DOWN</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Key_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_KEY_UP</span>: Triggered similarly to the <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span> event. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Key_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_IN</span>: Object gained focus. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_OUT</span>: Object lost focus. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_SHOW</span>: Object is shown by a call to the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_HIDE</span>: Object is hidden by a call to the <span style="font-family: Courier New,Courier,monospace">evas_object_hide()</span> function. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOVE</span>: Object origin was moved (origin is the top-left corner at the creation time of the object). The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RESIZE</span>: Object is resized. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RESTACK</span>: Object is re-stacked by the <span style="font-family: Courier New,Courier,monospace">evas_object_stack_below()</span> or <span style="font-family: Courier New,Courier,monospace">evas_object_stack_above()</span> function, or other events. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_DEL</span>: Object is deleted.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FREE</span>: For internal use only. Do not use (the object resources are about to be freed). The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_HOLD</span>: For internal use only. The event info parameter in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Hold</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CHANGED_SIZE_HINTS</span>: Object size hints changed.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_IMAGE_PRELOADED</span>: Image preloaded through the <span style="font-family: Courier New,Courier,monospace">evas_object_image_preload()</span> function is loaded. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_IMAGE_UNLOADED</span>: Image data is unloaded. The event info parameter in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
</ul>

<p>To register the callback, use the <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span> function. The function takes as parameters the object to which the callback is attached, the event type, the <span style="font-family: Courier New,Courier,monospace">Evas_Object_Event_Cb</span> callback function, and the pointer to the additional data delivered to the callback. The additional data is optional; use <span style="font-family: Courier New,Courier,monospace">NULL</span> if you do not need it.</p>

<p>The callback function takes as parameters the additional data defined in the <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span> function parameters, the canvas where the event happened, the object to which the event happened, and the event info data, which depends on the object type and the event at play.</p>

<p>When no longer needed, remove the callback with the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_del()</span> function.</p>


<h2 id="evas_smart_object" name="evas_smart_object">Evas Smart Object Events</h2>

<p>Evas smart object events are the most widely-used type of events in graphical applications, since they are used for signals, such as &quot;clicked&quot;, &quot;clicked,double&quot; (double-click), and &quot;pressed&quot;. They are identified by strings, and each smart object is able to define its own events (although the names follow conventions).</p>

<h3 id="evas_object_smart_callback" name="evas_object_smart_callback">Managing Evas Smart Object Event Handlers</h3>

<ol><li>To add an Evas Smart Object event handler, register a callback for a specific event to an object with the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function. 
<p>The function takes as parameters the object to which the callback is added, the event name, the callback function, and additional data delivered to the callback. The additional data is optional; use <span style="font-family: Courier New,Courier,monospace">NULL</span> if you do not need it.</p></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace">Evas_Smart_Cb()</span> callback function.
<p>The function takes as parameters the additional data defined in the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function parameters, the object to which the event happened, and the event info data, which depends on the object type and the event at play.</p>
<p>If some of the parameters are not used by the callback function, the compiler can raise the &quot;unused parameter&quot; warning. To avoid it, annotate the parameter with the <span style="font-family: Courier New,Courier,monospace">__UNUSED__</span> macro, which is a compiler-independent way to let the compiler know that the parameter is unused willingly, rather than by a mistake:</p>
<pre class="prettyprint">void cb(void *data __UNUSED__, Evas_Object *obj, void *event_info __UNUSED__);</pre>
</li>

<li>When no longer needed, remove the event handler with the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_del()</span> function.
<p>The function removes the first match for the given event and callback, and returns the data pointer that was used in the corresponding call to the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function.</p></li></ol>

<p>The following example shows the <span style="font-family: Courier New,Courier,monospace">_button_clicked()</span> function and sets it as the callback for the <span style="font-family: Courier New,Courier,monospace">clicked</span> event of an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> button:</p>

<pre class="prettyprint">
static void
_button_clicked(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Insert function body here
}

static void
some_function(void) 
{
&nbsp;&nbsp;&nbsp;// Code to build the window object
&nbsp;&nbsp;&nbsp;Evas_Object *button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);
}
</pre>

<p>For a specific object and event, callbacks are called in the order they have been registered. The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function does not execute any special processing, if it is called several times with the same callback function or data. Callbacks are called as many times as they have been added and in the order they have been added.</p>



<h3 id="evas_smart_objects_examples" name="evas_smart_objects_examples">Evas Smart Object Event Handling Examples</h3>

<p>The following example shows a button with a callback for the &quot;clicked&quot; signal:</p>

<pre class="prettyprint">static void
_button_clicked(void *data __UNUSED__, Evas_Object *obj __UNUSED__, void *event_info __UNUSED__)
{
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Button clicked.\n&quot;);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;elm_exit();
}

static void
_add_button(Evas_Object *window) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *button;

&nbsp;&nbsp;&nbsp;button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Click Me To Exit!&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(button);
}
</pre>

<p>The following example shows a button with a callback for the &quot;clicked&quot; signal. Clicking the button removes the callback:</p>

<pre class="prettyprint">static void
_button_clicked(void *data __UNUSED__, Evas_Object *obj, void *event_info __UNUSED__)
{
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Button clicked.\n&quot;);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_del(obj, &quot;clicked&quot;, _button_clicked);
}

static void
_add_button(Evas_Object *window) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *button;

&nbsp;&nbsp;&nbsp;button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Click Me!&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(button);
}
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>