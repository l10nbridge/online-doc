<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Elementary Transit Effects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#initial">Initializing the Application Layout</a></li>
			<li><a href="#rotation">Implementing the Rotation Effect</a></li>
			<li><a href="#zoom">Implementing the Zoom Effect</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Mobile Wearable</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Elementary Transit Effects</h1>

<p>This tutorial demonstrates how you can implement a variety of EFL animation effects using the APIs available in the EFL library.</p>

 <h2 id="initial" name="initial">Initializing the Application Layout</h2>
<p>The application uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> and <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> for view management, layout classes, such as <span style="font-family: Courier New,Courier,monospace">elm_list</span> for the composition of the screen, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span> and <span style="font-family: Courier New,Courier,monospace">elm_image</span> for the content inside the view.</p>
<p>The transit is designed to apply various animated transition effects to the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>. The following transition effects are supported in the Tizen native applications:</p>
<ul>
<li>Blend</li>
<li>Color</li>
<li>Fade</li>
<li>Flip</li>
<li>Rotation</li>
<li>Transition</li>
<li>Wipe</li>
<li>Zoom</li>
</ul>

<p>To initialize the application layout:</p>
<ol>
<li>
<p>Create the layout with the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function. First, a window is created and the <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> component is added to it to decorate the window with an indicator. The <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> component is added to act as a view manager for the window and provide the window title functionality.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = create_main_view(ad);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>
</li>
<li>
<p>Create the main view with the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function. The main view consists of a naviframe containing a list. This function returns a list of naviframe object pointers for the content set.</p>
<pre class="prettyprint">
static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;
&nbsp;&nbsp;&nbsp;Evas_Object *navi, *list;

&nbsp;&nbsp;&nbsp;navi = elm_naviframe_add(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;list = elm_list_add(navi);
&nbsp;&nbsp;&nbsp;elm_list_mode_set(list, ELM_LIST_COMPRESS);

&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Blend&quot;, NULL, NULL, blend_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Color&quot;, NULL, NULL, color_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Fade&quot;, NULL, NULL, fade_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Flip&quot;, NULL, NULL, flip_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Rotation&quot;, NULL, NULL, rotation_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;ResizableFlip&quot;, NULL, NULL, resizable_flip_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Translation&quot;, NULL, NULL, translation_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Wipe&quot;, NULL, NULL, wipe_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Zoom&quot;, NULL, NULL, zoom_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Custom&quot;, NULL, NULL, custom_cb, navi);
&nbsp;&nbsp;&nbsp;elm_list_go(list);

&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(navi, &quot;Transit&quot;, NULL, NULL, list, NULL);

&nbsp;&nbsp;&nbsp;return navi;
}
</pre>

<p>This tutorial describes only the rotation and zoom implementations. For more information about other effects, see the <span style="font-family: Courier New,Courier,monospace">transit.c</span> file and the Transit API (in <a href="../../../../org.tizen.native.mobile.apireference/group__Transit.html">mobile</a> or <a href="../../../../org.tizen.native.wearable.apireference/group__Transit.html">wearable</a> applications) or use <span style="font-family: Courier New,Courier,monospace">NULL</span> instead. The following figure illustrates the rotation and zoom effects.</p>

<p class="figure">Figure: Rotation and zoom</p>
<p align="center"><img alt="Rotation and zoom" src="../../images/transit_rotation_zoom.png" /></p> 

</li>
</ol>


 <h2 id="rotation" name="rotation">Implementing the Rotation Effect</h2>

<p>When the rotation effect is selected in the list, a related callback function that implements the animation effect is called. The data is sent as an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>
<p>To implement the rotation effect:</p>
<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace">elm_transit</span> object with the <span style="font-family: Courier New,Courier,monospace">elm_transit_add()</span> function to add the transit effect:
<pre class="prettyprint">
static void
rotation_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = (Evas_Object *) data;
&nbsp;&nbsp;&nbsp;Elm_Transit *transit = elm_transit_add();
</pre>
</li>
<li>Set the transit rotation amount and duration:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// 360 degree rotation effect in the clockwise direction
&nbsp;&nbsp;&nbsp;elm_transit_object_add(transit, layout);
&nbsp;&nbsp;&nbsp;elm_transit_effect_rotation_add(transit, 0, 360);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(transit, 1);
</pre>
</li>
<li>To start the transit animation, use the <span style="font-family: Courier New,Courier,monospace">elm_transit_go()</span> function:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;elm_transit_go(transit);
}
</pre>
</li>
</ol>

 <h2 id="zoom" name="zoom">Implementing the Zoom Effect</h2>

<p>When the zoom effect is selected in the list, a related callback function that implements the animation effect is called. The data is sent as an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>
<p>To implement the zoom effect:</p>
<ol>
<li>After adding the transit object, add an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> to get the zoom effect:
<pre class="prettyprint">
static void
zoom_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = (Evas_Object *) data;
</pre>
</li>
<li>Set the zoom from the original size (1.0) to 0.4 times the original size, and set the duration:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Zoom out to scale 0.6
&nbsp;&nbsp;&nbsp;Elm_Transit *transit = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_smooth_set(transit, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(transit, layout);
&nbsp;&nbsp;&nbsp;elm_transit_effect_zoom_add(transit, 1.0, 0.4);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(transit, 0.5);
</pre>
</li>
<li>Similarly, set the zoom size (0.4) back to the original size (1.0), and set the duration:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Zoom in to the original size
&nbsp;&nbsp;&nbsp;Elm_Transit *transit2 = elm_transit_add();
&nbsp;&nbsp;&nbsp;elm_transit_smooth_set(transit2, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_transit_object_add(transit2, layout);
&nbsp;&nbsp;&nbsp;elm_transit_effect_zoom_add(transit2, 0.4, 1.0);
&nbsp;&nbsp;&nbsp;elm_transit_duration_set(transit2, 0.5);
</pre>
</li>
<li>Set both effects to be applied in sequence, and start the animation:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;elm_transit_chain_transit_add(transit, transit2);
&nbsp;&nbsp;&nbsp;elm_transit_go(transit);
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
