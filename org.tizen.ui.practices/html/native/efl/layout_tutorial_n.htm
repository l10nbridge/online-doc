<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating UI Screen Layouts</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Creating the UI Layout</a></li>
			<li><a href="#add_content">Adding Content to the Screen</a></li>
			<li><a href="#layout">Using the Base Layout</a></li>		
			<li><a href="#ClockSimple">Creating a Simple Clock View</a></li>
			<li><a href="#ClockComplex">Creating a Complex Clock View</a></li>			
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Creating UI Screen Layouts</h1>

  
<p>This tutorial demonstrates how you can compose a UI screen layout using the layout classes available in the EFL UI component library. It also highlights the capabilities of the EFL layout classes in free style layouting as well as layouting in a particular sequence (such as linear or grid).</p>


 <h2 id="init" name="init">Creating the UI Layout</h2>

<p>The sample application uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> and <span style="font-family: Courier New,Courier,monospace">elm_toolbar</span> for the view management, layout classes, such as <span style="font-family: Courier New,Courier,monospace">elm_table</span>, <span style="font-family: Courier New,Courier,monospace">elm_box</span>, and <span style="font-family: Courier New,Courier,monospace">elm_grid</span> for the composition of the screen, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_label</span> and <span style="font-family: Courier New,Courier,monospace">elm_image</span> for the content inside the view.</p>

<p>To create the UI layout:</p>
<ol>
<li>
<p>Create the application layout with the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it, *tabbar_it;
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
</pre>
</li>
<li>
<p>Add the <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> component to the application to decorate the window with an indicator:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);
</pre>
</li>
<li>
<p>Add the <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> component to act as a view manager for the window and provide the window title functionality:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;UiLayout&quot;, NULL, NULL, NULL, &quot;tabbar/icon/notitle&quot;);

&nbsp;&nbsp;&nbsp;// Tabbar
&nbsp;&nbsp;&nbsp;ad-&gt;tabbar = create_toolbar(ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;tabbar&quot;, ad-&gt;tabbar);

&nbsp;&nbsp;&nbsp;// Set the first view
&nbsp;&nbsp;&nbsp;tabbar_it = elm_toolbar_first_item_get(ad-&gt;tabbar);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_selected_set(tabbar_it, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, keydown_cb, NULL);
}
</pre>
</li>
<li>
<p>Add the toolbar to the naviframe using the <span style="font-family: Courier New,Courier,monospace">create_toolbar()</span> function:</p>
<pre class="prettyprint">
static Evas_Object*
create_toolbar(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *tabbar;

&nbsp;&nbsp;&nbsp;tabbar = elm_toolbar_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_object_style_set(tabbar, &quot;tabbar&quot;);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(tabbar, ELM_TOOLBAR_SHRINK_EXPAND);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(tabbar, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Box&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Grid&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, NULL, &quot;Table&quot;, tabbar_item_cb, ad);

&nbsp;&nbsp;&nbsp;return tabbar;
}
</pre>

<p>The following figure illustrates the UI Layout.</p>

  <p class="figure">Figure: UI Layout screen</p> 
  <p align="center"><img alt="UI Layout screen" src="../../images/uilayout_view2.png" /></p> 
</li>
</ol>

 <h2 id="add_content" name="add_content">Adding Content to the Screen</h2>

 <p>To add content to the screen:</p>
 <ol>
 <li>
<p>Compose a box layout using a recursive composition with the <span style="font-family: Courier New,Courier,monospace">create_box_view()</span> function:</p> 
<pre class="prettyprint">
static Evas_Object*
create_box_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box, *box1, *box2, *box3;

&nbsp;&nbsp;&nbsp;box = elm_box_add(parent);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box, 10, 10);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;box1 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box1, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box1, 8, 8);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box1, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box1, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(box1);

&nbsp;&nbsp;&nbsp;box2 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box2, 6, 6);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box2, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box2, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(box2);

&nbsp;&nbsp;&nbsp;box3 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box3, 5, 5);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box3, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box3, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_homogeneous_set(box3, EINA_FALSE);
&nbsp;&nbsp;&nbsp;evas_object_show(box3);
} 
</pre>
</li>
<li>
<p>Add content or another box layout to the box.</p> 
<pre class="prettyprint">
// Add an item to the box
Evas_Object *item1 = create_content(box, &quot;Item 1&quot;);
evas_object_size_hint_min_set(item1, 0, 40);
elm_box_pack_end(box, item1);
elm_box_pack_end(box, box1);
elm_box_pack_end(box, box3);
elm_box_pack_end(box, create_content(box, &quot;Item 4&quot;));

// Add an item to the box1
elm_box_pack_end(box1, create_content(box1, &quot;Item 2.1&quot;));
elm_box_pack_end(box1, box2);
elm_box_pack_end(box1, create_content(box1, &quot;Item 2.3&quot;));

// Add an item to the box2
elm_box_pack_end(box2, create_content(box2, &quot;Item 2.2.1&quot;));
elm_box_pack_end(box2, create_content(box2, &quot;Item 2.2.2&quot;));

// Add an item to the box3
elm_box_pack_end(box3, create_content(box3, &quot;Item 3.1&quot;));
elm_box_pack_end(box3, create_content(box3, &quot;Item 3.2&quot;));
</pre>
<p>The box layout implements the size policy during the size calculation.</p>
</li>
<li>
<p>Compose a table layout with a content and grid view with the <span style="font-family: Courier New,Courier,monospace">create_table_view()</span> function:</p>
<pre class="prettyprint">
static Evas_Object*
create_table_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *table, *item;

&nbsp;&nbsp;&nbsp;table = elm_table_add(parent);
&nbsp;&nbsp;&nbsp;elm_table_padding_set(table, 10, 10);
&nbsp;&nbsp;&nbsp;elm_table_homogeneous_set(table, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(table, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(table, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 1&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 0, 2, 1);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 2&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 2, 0, 1, 1);

&nbsp;&nbsp;&nbsp;item = create_content(table, &quot;Item 3&quot;);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 1, 3, 1);

&nbsp;&nbsp;&nbsp;// Add a grid view item
&nbsp;&nbsp;&nbsp;item = create_grid_view(table);
&nbsp;&nbsp;&nbsp;evas_object_show(item);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, item, 0, 2, 3, 10);

&nbsp;&nbsp;&nbsp;return table;
}
</pre>
<p>The table layout can be used for freestyle layouting, and for standard layouts, such as lists and grids. It does not consider the size policy of the child item during size calculation.</p>
</li>
<li>
<p>Compose a grid layout with the <span style="font-family: Courier New,Courier,monospace">create_grid_view()</span> function, and also use the box and table layouts as child items to pack inside a grid.</p>

<pre class="prettyprint">
static Evas_Object*
create_grid_view(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *grid, *item;

&nbsp;&nbsp;&nbsp;grid = elm_grid_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(grid, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(grid, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;// Red background for the grid
&nbsp;&nbsp;&nbsp;item = create_bg(grid, 255, 0, 0);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 0, 0, 100, 100);

&nbsp;&nbsp;&nbsp;// Add the item to the grid
&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item1&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 1, 1, 98, 98);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item2&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 2, 5, 20, 20);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item3&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 23, 5, 76, 94);

&nbsp;&nbsp;&nbsp;item = create_content(grid, &quot;Item4&quot;);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 2, 27, 20, 70);

&nbsp;&nbsp;&nbsp;// Black background for the box view item
&nbsp;&nbsp;&nbsp;item = create_bg(grid, 40, 40, 40);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 25, 10, 73, 87);

&nbsp;&nbsp;&nbsp;// Add the box view item to the grid
&nbsp;&nbsp;&nbsp;item = create_box_view(grid);
&nbsp;&nbsp;&nbsp;evas_object_show(item);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, item, 26, 11, 71, 85);

&nbsp;&nbsp;&nbsp;return grid;
}
</pre>
<p>The grid layout uses free style layouting, and during size evaluation of the child item, it does not take the size policy of the child item into consideration.</p>
</li>
</ol>

 <h2 id="layout" name="layout">Using the Base Layout</h2>

<p>When developing a Tizen native application, it is recommended that you base your application layout on the base layout. The base layout supports the indicator and view management. The following figure shows the wireframe and UI component hierarchy of the base layout:</p>

<p class="figure">Figure: Base layout wireframe and UI component hierarchy</p>
<p align="center"><img alt="Base layout wireframe and UI component hierarchy" src="../../images/base_layout.png"/></p>

<p>The UI components have the following roles:</p>

<ul>
 <li>Window (<span style="font-family: Courier New,Courier,monospace">Elm_win</span>): Every UI component from Elementary is rendered in a window.</li>
 <li>Conformant (<span style="font-family: Courier New,Courier,monospace">Elm_Conformant</span>): Conformant supports the indicator area and resizing the application due to rotation or the ISF (keypad).</li>
 <li>Naviframe (<span style="font-family: Courier New,Courier,monospace">Elm_Naviframe</span>): Naviframe acts as a view manager and optionally provides the application title. The main layout of the application is added to the naviframe&#39;s view area.</li>
</ul>


<h3>Sample Setting Application with the Base Layout</h3>

<p>The mobile <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/ui_setting_sd_mn.htm">Setting</a> application consists of a list to show as a menu. To organize the application, create the application layout with a screen-size list and place the layout into the naviframe&#39;s view area.</p>

<p class="figure">Figure: Setting UI and layout</p>
<p align="center"><img alt="Settings UI and layout" src="../../images/setting_sd.png"/></p>

<h3>Sample Application Store Application with the Base Layout</h3>

<p>To organize the mobile <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/ui_app_store_sd_mn.htm">Application Store</a> application, add a scroller to the base layout, since the total height of the layout is greater than the screen size, and you therefore need to scroll the screen content up and down. If the layout is larger than the screen, the scroller makes the view itself scrollable.</p>

<p>You can use a list or grid if the same objects are shown repeatedly. In this sample application, however, the various items are shown in a layout.</p>

<p class="figure">Figure: Application Store UI and layout</p>
<p align="center"><img alt="Application Store UI and layout" src="../../images/application_store_sd.png"/></p>

<h3>Sample Calculator Application with a Customized Layout</h3>

<p>The mobile <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/calculator_sd_mn.htm">Calculator</a> is a good example of an exception to the base layout. The application has no view changes and no application title. As these are the 2 reasons why you must use a Naviframe, you do not need to add a naviframe to the Calculator.</p>

<p>You can organize the application layout with container components. Container components are used for arranging UI components, both basic UI components and other container components.</p>

<p class="figure">Figure: Calculator UI and layout</p>
<p align="center"><img alt="Calculator UI and layout" src="../../images/calculator_sd.png"/></p>


<h3>Sample Email Application with a Customized Layout</h3>

<p>The mobile <a href="../../../../org.tizen.sampledescriptions/html/mobile_n/ui_email_sd_mn.htm">Email</a> application shows information using a list. The main view is the same as in the Setting application, consisting of a screen-size list for displaying emails. However, the Email application has an additional feature called drawer, which is used for displaying the menu with a hierarchy.</p>

<p>To develop the application as a Tizen native application, add a layout on the conformant, and add a naviframe to the layout. This layout has a content area for the drawer and naviframe, and its style name is <span style="font-family: Courier New,Courier,monospace">&quot;layout/drawer/panel&quot;</span>. To use this layout, use the following code:</p>

<pre class="prettyprint">
layout = elm_layout_add(parent);
elm_layout_theme_set(layout, &quot;layout&quot;, &quot;drawer&quot;, &quot;panel&quot;);
</pre>

<p>The style includes parts for locating the drawer and the main view. In the drawer area, you can add a list to indicate the menu. In the main view, you can add a naviframe to organize the view of the layout.</p>

<p class="figure">Figure: Email UI and layout</p>
<p align="center"><img alt="Email UI and layout" src="../../images/email_sample.png"/></p>


 <h2 id="ClockSimple" name="ClockSimple">Creating a Simple Clock View</h2>

<p>The following sample creates a basic clock view that shows the time, current city, and date. This sample demonstrates how to use a box (container component) and label to create a basic layout. The application includes the following UI components:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">Elm_window</span>: Basic canvas for rendering the screen</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_conformant</span>: Support for the indicator area</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_naviframe</span>: View manager component</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_box</span>: Container component for layouting other UI components</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_label</span>: Basic UI component for showing text with a tag</li>
</ul> 

<p>The following figure illustrates the main view of the simple clock application and its wireframe structure.</p>
  
<p class="figure">Figure: Simple clock screen</p>
<p align="center"><img alt="Simple clock screen" src="../../images/efl_simple_clock.png" /></p>

<p>To create a simple clock view:</p>
<ol>
<li>
<p>Implement the data structure for the application in the <span style="font-family: Courier New,Courier,monospace">world_clock.c</span> file:</p>
<pre class="prettyprint">
typedef struct appdata
{
&nbsp;&nbsp;&nbsp;// Save the window
&nbsp;&nbsp;&nbsp;Evas_Object *win;
} 
appdata_s;
</pre>

<p>The information in <span style="font-family: Courier New,Courier,monospace">appdata</span> is used for the entire system. In this sample application, the information is related to handling the hardware back key.</p> 
</li>
<li>
<p>Create the basic UI with the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function:</p>
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = {0,};
&nbsp;&nbsp;&nbsp;app_event_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, ui_app_region_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_remove_event_handler(handlers[APP_EVENT_LOW_MEMORY]);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;ui_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}

static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function to create a basic layout with a window, conformant, and naviframe. This is the basic layout in the Tizen mobile environment.</p>
<pre class="prettyprint">
// Window
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

// Conformant
conform = elm_conformant_add(ad-&gt;win);
elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
evas_object_size_hint_weight_set(conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, conform);
evas_object_show(conform);

// Naviframe
nf = elm_naviframe_add(conform);
elm_object_content_set(conform, nf);
evas_object_show(nf);
</pre>
</li>
<li>
<p>Create the main layout for the application. In this sample, it contains a box with 3 labels. The labels show the time, city, and date. </p>
<p>Set the text to the labels. You can set or decorate the text in the labels using the <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function. You can modify the text size, color and thickness with the <span style="font-family: Courier New,Courier,monospace">&lt;font_size&gt;</span>, <span style="font-family: Courier New,Courier,monospace">&lt;color&gt;</span>, and <span style="font-family: Courier New,Courier,monospace">&lt;b&gt;</span> elements. To add the labels to the box, use the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> function.</p>
<pre class="prettyprint">
// Add the box
box = elm_box_add(nf);
// Create a label
label1 = elm_label_add(box);
// Set text to the label with a tag
elm_object_text_set(label1, &quot;&lt;font_size=110&gt;&lt;color=#000000&gt;07:26&lt;/color&gt;&lt;/font_size&gt;&quot;);
// Add the label to the box
elm_box_pack_end(box, label1);
// Change label visibility
evas_object_show(label1);

// Repeat with other labels

evas_object_show(box);
</pre>
</li>
<li>
<p>Set the box as a new view. You can also set the title of the application. These operations are handled by the naviframe using the <span style="font-family: Courier New,Courier,monospace">elm_naviframe_item_push()</span> function. The parameters include the title, the name of the UI component added as a new view, and the naviframe style. The basic style is used for a simple view with a normal title.</p>
<pre class="prettyprint">
elm_naviframe_item_push(nf, _(&quot;World Clock&quot;), NULL, NULL, box, &quot;basic&quot;);
</pre>
  
  <p>The following figure illustrates the UI component hierarchy of the application.</p>

<p class="figure">Figure: Simple clock components</p>
<p align="center"><img alt="Simple clock components" src="../../images/efl_simple_clock_tree.png" /></p>
</li>
<li>
<p>Set the hardware key handler. The Tizen mobile environment supports multiple hardware keys, but only the back key is handled in this sample.</p> 
<pre class="prettyprint">
eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);
</pre> 

<p>After setting the callback function, the <span style="font-family: Courier New,Courier,monospace">win_back_cb</span> callback is invokes when a back key is pressed. The <span style="font-family: Courier New,Courier,monospace">win_back_cb()</span> callback hides the window.</p> 
<pre class="prettyprint">
static void
win_back_cb(void *data , int type , void *event)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;elm_win_lower(ad-&gt;win);
}
</pre>
</li>
</ol>

 <h2 id="ClockComplex" name="ClockComplex">Creating a Complex Clock View</h2>
 
<p>The following sample creates a complex clock view. The sample demonstrates how to organize a basic layout using boxes. The application includes the following UI components:</p>


<ul>
<li><span style="font-family: Courier New,Courier,monospace">Elm_window</span>: Basic canvas for rendering the screen</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_conformant</span>: Support for the indicator area</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_naviframe</span>: View manager component</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_box</span>: Container component for layouting other UI components</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_label</span>: Basic UI component for showing text with a tag</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_genlist</span>: List component</li>
<li><span style="font-family: Courier New,Courier,monospace">Elm_button</span>: Simple push button</li>
</ul> 
  
<p>The following figure illustrates the main view of the complex clock sample application and its wireframe structure.</p>
  
<p class="figure">Figure: Complex clock screen</p>
<p align="center"><img alt="Complex clock screen" src="../../images/efl_complex_clock.png" /></p>

<p>To create a complex clock view:</p>
<ol>
<li>
<p>Implement the data structure for the basic UI in the <span style="font-family: Courier New,Courier,monospace">world_clock.c</span> file:</p>
<pre class="prettyprint">
typedef struct appdata
{
&nbsp;&nbsp;&nbsp;// Save the window
&nbsp;&nbsp;&nbsp;Evas_Object *win;
} 
appdata_s;
</pre>

<p>The information in <span style="font-family: Courier New,Courier,monospace">appdata</span> is used for the entire system. In this sample application, the information is related to handling the hardware back key.</p> 
</li>
<li>
<p>Create the base UI for the application with the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function:</p>

<pre class="prettyprint">int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = {0,};
&nbsp;&nbsp;&nbsp;app_event_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, ui_app_region_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_remove_event_handler(handlers[APP_EVENT_LOW_MEMORY]);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;ui_app_main() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}

static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The base UI of the application contains the clock, list, and main layout with buttons.</p>
</li>
<li>
<p>Create the clock element. The clock element contains 3 labels. The labels are packed as a single box component, which is part of the main layout.</p> 
<pre class="prettyprint">
static Evas_Object *
create_clock(Evas_Object *nf)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box, *label1, *label2, *label3;

&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;box = elm_box_add(nf);

&nbsp;&nbsp;&nbsp;label1 = elm_label_add(box);
&nbsp;&nbsp;&nbsp;elm_object_text_set(label1, &quot;&lt;font_size=110&gt;&lt;color=#000000&gt;07:26&lt;/color&gt;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, label1);
&nbsp;&nbsp;&nbsp;evas_object_show(label1);

&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;return box;
}
</pre>
</li>
<li>
<p>Create the list element. This element contains a list of cities. The UI component used is <span style="font-family: Courier New,Courier,monospace">genlist</span>, which is a complex list able to show information with various styles.</p> 
<pre class="prettyprint">
static Evas_Object *
create_list(Evas_Object *nf)
{
&nbsp;&nbsp;&nbsp;Evas_Object* list;
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *itc = NULL;
&nbsp;&nbsp;&nbsp;int i, num_of_item;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *it;

&nbsp;&nbsp;&nbsp;list = elm_genlist_add(nf);
}
</pre> 
</li>
<li>
<p>Add a new item class using the <span style="font-family: Courier New,Courier,monospace">Elm_Genlist_Item_Class</span> class. After adding a new class, set a callback function to detect when the item is rendered. </p> 
<pre class="prettyprint">
itc = elm_genlist_item_class_new();
itc-&gt;item_style = &quot;2line.top.4&quot;;
itc-&gt;func.text_get = gl_text_get_cb;
itc-&gt;func.content_get = NULL;
itc-&gt;func.del = NULL;
</pre> 
<p>In this application, all the list items are similar and use the same <span style="font-family: Courier New,Courier,monospace">gl_text_get_cb()</span> callback function for setting text, so only 1 item class is created:</p> 
<pre class="prettyprint">static char*
gl_text_get_cb(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;item_data_s *id = data;
&nbsp;&nbsp;&nbsp;char buf[1024];

&nbsp;&nbsp;&nbsp;if (id-&gt;index == 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!strcmp(part, &quot;elm.text.main.left.top&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, 1023, &quot;%s&quot;, &quot;07:26&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!strcmp(part, &quot;elm.text.sub.right.top&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, 1023, &quot;%s&quot;, &quot;Cardiff&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!strcmp(part, &quot;elm.text.sub.left.bottom&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, 1023, &quot;%s&quot;, &quot;Wen, Jan 1&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!strcmp(part, &quot;elm.text.sub.right.bottom&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, 1023, &quot;%s&quot;, &quot;wales&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre> 
</li>
<li>
<p>Append items to the list using the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> function. In this application, 3 items are added:</p> 
<pre class="prettyprint">
num_of_item = 3;

for (i = 0; i &lt; num_of_item; i++) 
{
&nbsp;&nbsp;&nbsp;item_data_s *id = calloc(sizeof(item_data_s), 1);
&nbsp;&nbsp;&nbsp;id-&gt;index = i;
&nbsp;&nbsp;&nbsp;it = elm_genlist_item_append(list,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itc,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id);
&nbsp;&nbsp;&nbsp;id-&gt;item = it;
}
</pre>
</li>
<li>
<p>Create the main layout. In the main layout, the other layout elements are merged together and a button is added.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *conform, *nf, *box, *clock, *layout, *rect, *button;
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, conform);
&nbsp;&nbsp;&nbsp;evas_object_show(conform);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;nf = elm_naviframe_add(conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(conform, nf);
&nbsp;&nbsp;&nbsp;evas_object_show(nf);
</pre> 
</li>
<li>
<p>Add a box component. The box component is used to organize the main layout. The box is expanded as much as possible to fill the entire view.</p> 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;box = elm_box_add(nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);
</pre> 

<p>The box contains the following elements:</p> 

<ul>

<li><p>The clock element contains 3 labels. The parameter for the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_weight_set()</span> function is 0.1 meaning that the height of the clock box occupies 30% of the available area. </p> 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;clock = create_clock(nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(clock, EVAS_HINT_EXPAND, 0.3);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(clock, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, clock);
</pre> 
</li>

<li><p>The list element is packed into the box. As the <span style="font-family: Courier New,Courier,monospace">genlist</span> elements do not have a determined size, their size depends on the <span style="font-family: Courier New,Courier,monospace">layout</span> parameter.</p> 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(box);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(layout, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;rect = create_list(nf);
&nbsp;&nbsp;&nbsp;elm_layout_content_set(layout, &quot;elm.swallow.content&quot;, rect);
&nbsp;&nbsp;&nbsp;evas_object_show(rect);
&nbsp;&nbsp;&nbsp;evas_object_show(layout);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, layout);
</pre> 
</li>

<li><p>The button element has a callback function to detect when the button is clicked.</p> 
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;button = elm_button_add(box);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, btn_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, 0.1);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Terminate&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, button);
}
</pre> 
</li>
</ul>

<p>The following figure illustrates the UI component hierarchy of the application.</p>

<p class="figure">Figure: Complex clock components</p>
<p align="center"><img alt="Complex clock components" src="../../images/efl_complex_clock_tree.png" /></p>
</li>
<li>
<p>Set the hardware key handler:</p> 
<pre class="prettyprint">
eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);
</pre> 

<p>After setting the callback function, the <span style="font-family: Courier New,Courier,monospace">win_back_cb()</span> callback is invokes when a back key is pressed. The <span style="font-family: Courier New,Courier,monospace">win_back_cb()</span> callback hides the window.</p> 
<pre class="prettyprint">
static void
win_back_cb(void *data , int type , void *event)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;elm_win_lower(ad-&gt;win);
}
</pre> 
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
