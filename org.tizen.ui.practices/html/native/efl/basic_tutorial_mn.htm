<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Basic Mobile Interactions</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#button">Using Buttons</a></li>
			<li><a href="#simple_text">Using Simple Text</a></li>
			<li><a href="#simple_list">Using Simple Lists</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>		
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Basic Mobile Interactions</h1>

  
<p>This tutorial teaches the basics of UI component interactions. It builds upon the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a>, using its basic application code.</p>

<p>This feature is supported in mobile applications only.</p>

 <h2 id="button" name="button">Using Buttons</h2>

<p>To use buttons:</p>

<ul>
<li>Create buttons with various styles:

<ul>
<li>
<p>To create a text-only button:</p>
<pre class="prettyprint">Evas_Object* button;

button = elm_button_add(box);
elm_object_text_set(button, &quot;Click me&quot;);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>
</li>
<li>
<p>To create a button with an icon:</p>
<pre class="prettyprint">Evas_Object* button2;
Evas_Object* icon2;

button2 = elm_button_add(box);
icon2 = elm_icon_add(box);
elm_image_file_set(icon2, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button2, &quot;icon&quot;, icon2);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>
</li>
<li>
<p>To create a button with both an icon and a text label:</p>
<pre class="prettyprint">Evas_Object* button3;
Evas_Object* icon3;
button3 = elm_button_add(box);
icon3 = elm_icon_add(box);
elm_image_file_set(icon, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button3, &quot;icon&quot;, icon3);
elm_object_text_set(button3, &quot;Press me&quot;);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre>
</li>
</ul></li>

<li>Disable a button using the <span style="font-family: Courier New,Courier,monospace">elm_object_disabled_set()</span> function.
<p>A disabled button is visible, but cannot be clicked.</p>
<pre class="prettyprint">elm_object_disabled_set(button2, EINA_TRUE);
</pre></li>

<li>Manage button callbacks.
<p>The Elementary buttons respond to user interactions with several events.</p>
<ul>
<li>Define and register a callback for a button click.
<p>The <span style="font-family: Courier New,Courier,monospace">clicked</span> event is the most basic button event. The following code snippet changes the button text when the button is clicked (first pressed and then unpressed):</p>
<pre class="prettyprint">
static void _button_click_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Clicked!&quot;);
}
evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_click_cb, NULL);
</pre>
</li>
<li>Define and register a callback for a button press and unpress.
<p>The button can respond to the separate <span style="font-family: Courier New,Courier,monospace">pressed</span> and <span style="font-family: Courier New,Courier,monospace">unpressed</span> events instead of the entire click event:</p>
<pre class="prettyprint">static void _button_press_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Pressed!&quot;);
}
static void _button_unpress_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Unpressed!&quot;);
}

evas_object_smart_callback_add(button3, &quot;pressed&quot;, _button_press_cb, NULL);
evas_object_smart_callback_add(button3, &quot;unpressed&quot;, _button_unpress_cb, NULL);
</pre>
</li>
<li>Define and register a callback for repeated button events.
<p>The button can receive multiple <span style="font-family: Courier New,Courier,monospace">repeated</span> events when the user presses it down and holds it. You can define timings, such as the initial timeout and the repeat interval, for repeated events. In this example, the initial timeout is set to 1 second, and the repeat interval to half a second.</p>
<pre class="prettyprint">static void _button_repeat_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;static int count = 0;
&nbsp;&nbsp;&nbsp;char buf[16];

&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;Repeat %d&quot;, count++);

&nbsp;&nbsp;&nbsp;elm_object_text_set(button, buf);
}

elm_button_autorepeat_set(button3, EINA_TRUE);
elm_button_autorepeat_initial_timeout_set(button3, 1.0);
elm_button_autorepeat_gap_timeout_set(button3, 0.5);
evas_object_smart_callback_add(button3, &quot;repeated&quot;, _button_repeat_cb, NULL);
</pre>
</li>
</ul></li></ul>

 <h2 id="simple_text" name="simple_text">Using Simple Text</h2>

<p>To use simple text:</p>
<ul>
<li>Create a label object:
<pre class="prettyprint">label = elm_label_add(ad-&gt;win);
elm_object_text_set(label, &quot;My label&quot;);
evas_object_show(label);
</pre>
</li>
<li>Slide the text, if it is too long to be shown at once, using one of the slide options:

<ul>
<li><span style="font-family: Courier New,Courier,monospace">slide_short</span>: Text stops at an edge, reverts to its initial position and slides again.</li>
<li><span style="font-family: Courier New,Courier,monospace">slide_long</span>: Text is originally empty. It slides in, all the way to the edge, continues sliding until the label is empty, and loops.</li>
<li><span style="font-family: Courier New,Courier,monospace">slide_bounce</span>: Text moves (bounces) backwards after stopping at the edge.</li>
</ul>

<p>In the following example, the duration of the slide is set to 5 seconds and slide option bounces the text at the end:</p>

<pre class="prettyprint">Evas_Object* label;
label = elm_label_add(-&gt;win);
elm_object_text_set(label, &quot;This text is supposed to be really long.&quot;);
elm_label_slide_set(label, EINA_TRUE);
elm_label_slide_duration_set(label, 5.);
elm_object_style_set(label, &quot;slide_bounce&quot;);
evas_object_show(label);
</pre>

<p>If needed, you can use the <span style="font-family: Courier New,Courier,monospace">slide,end</span> event to respond to the moment when the sliding text reaches its end.</p>
</li>

<li>Create a marker.
<p>A marker is a text that is by default bold, white, and centered. In the following example, the marker text is set to be blue:</p>
<pre class="prettyprint">elm_object_style_set(label, &quot;marker&quot;);
evas_object_color_set(label, 0, 0, 255, 255);
</pre>
</li>
<li>Apply basic styles to the text with HTML elements.
<p>The following example creates bold text:</p>
<pre class="prettyprint">elm_object_text_set(label, &quot;&lt;b&gt;This text is bold.&lt;/b&gt;&quot;);
</pre>
</li>
</ul>


 <h2 id="simple_list" name="simple_list">Using Simple Lists</h2>

<p>A list is a scrollable container, whose children can be selected. For the list items, any Evas Object can be added as an icon, either at the beginning (third parameter) or the end (fourth parameter) of the item.</p>

<p>The following example shows a list with 3 list items, where the second list item has an icon before the item text, and the third item has a button after the item text:</p>
<pre class="prettyprint">Evas_Object* list;
Evas_Object* icon;
list = elm_list_add(ad-&gt;win);
elm_list_item_append(list, &quot;Text item&quot;, NULL, NULL, NULL, NULL);
icon = elm_icon_add(ad-&gt;win);
elm_icon_standard_set(icon, &quot;chat&quot;);
elm_list_item_append(list, &quot;Second item&quot;, icon, NULL, NULL, NULL);
Evas_Object* button;
button = elm_button_add();
elm_object_text_set(button, &quot;Button&quot;);
elm_list_item_append(list, &quot;Third item&quot;, NULL, button, NULL, NULL);
elm_list_go(list);
</pre>



<p>To manage lists:</p>

<ul>
<li>Set the orientation.
<p>By default, a list is set vertically. To display the list horizontally:</p>
<pre class="prettyprint">elm_list_horizontal_set(list, EINA_TRUE);
</pre>
</li>
<li>Set a mode for the list:
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_COMPRESS</span>: List does not set any size measures to inform the container how to resize it. If the list is not created as a &quot;resize object&quot;, its dimensions are zeroed. The list respects the container&#39;s geometry and if any of the list items do not fit into the container transverse axis, the list does not scroll in that direction.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_SCROLL</span> (default): Same as <span style="font-family: Courier New,Courier,monospace">ELM_LIST_COMPRESS</span>, with the exception that if any of the list items do not fit into the container transverse axis, the list still scrolls in that direction.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_LIMIT</span>: Sets a minimum size measure on the list object, so that containers can respect it (and resize themselves to fit the child properly). More specifically, a minimum size measure is set for its transverse axis, so that the largest item in that direction fits well. This feature is bound by the list object&#39;s maximum size measures that are set externally.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_LIST_EXPAND</span>: Besides setting a minimum size on the transverse axis, as in <span style="font-family: Courier New,Courier,monospace">ELM_LIST_LIMIT</span>, this mode sets a minimum size on the longitudinal axis to reserve space for all its children to be visible at the same time. This feature is bound by the list object&#39;s maximum size measures that are set externally.</li>
</ul>
<pre class="prettyprint">elm_list_mode_set(list, ELM_LIST_COMPRESS);
</pre>
</li>
<li>Manage the scroller. 
<p>You can control whether scrollbars are displayed for the list using the <span style="font-family: Courier New,Courier,monospace">elm_scroller_policy_set()</span> function. The second parameter is for the horizontal axis, the third one for the vertical axis.</p>

<p>The available scroller policies are:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_OFF</span>: Scrollbar is hidden</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_ON</span>: Scrollbar is displayed</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_AUTO</span>: Scrollbar is  displayed only when needed and stays hidden at other times</li>
</ul>

<pre class="prettyprint">elm_scroller_policy_set(list, ELM_SCROLLER_POLICY_AUTO, ELM_SCROLLER_POLICY_ON);
</pre>

<p>Several effects can also be shown on a list. In the following example, the scroller is set to bounce at the end on either direction (the second parameter is for the horizontal axis, and the third one for the vertical axis):</p>
<pre class="prettyprint">elm_scroller_bounce_set(list, EINA_TRUE, EINA_TRUE);
</pre>
</li>
<li>Manage events.
<p>You can register and define various events for a list:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">activated</span>: User clicks or presses an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">selected</span>: User selects an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">unselected</span>: User clears an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: User long-presses an item.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,top</span>: User scrolls the list to the top edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,bottom</span>: User scrolls the list to the bottom edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,left</span>: User scrolls the list to the left edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">edge,right</span>: User scrolls the list to the right edge.</li>
<li><span style="font-family: Courier New,Courier,monospace">highlighted</span>: Item is pressed and highlighted.</li>
<li><span style="font-family: Courier New,Courier,monospace">unhighlighted</span>: Item stops being pressed and highlighted.</li>
</ul>
</li>
</ul>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
