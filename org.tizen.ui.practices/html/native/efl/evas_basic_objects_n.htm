<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Basic Manipulation of Evas Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
		<li><a href="#work">Working with Evas</a></li>
		<li><a href="#clip">Clipping an Object</a></li>
		<li><a href="#color">Changing Colors and Visibility</a></li>
		<li><a href="#ref">Counting References</a></li>
		<li><a href="#order">Changing the Object Order on Canvas</a></li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Basic Manipulation of Evas Objects</h1>

  
<p>Most Evas objects can be manipulated using generic functions.</p>

<p>The list of available basic actions does not depend on the object&#39;s type. Evas implements functionality that allows performing basic manipulation, such as showing, hiding, setting, and getting geometry, bringing a layer up or down, managing color, clipping, and reference counting.</p>

<p>This tutorial introduces the basic manipulations available for <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> object.</p>


<h2 id="work" name="work">Working with Evas</h2>

<p>To start working with Evas:</p>
<ol>
<li>
<p>Create an Evas instance or get a reference to an already allocated Evas object:</p>

<pre class="prettyprint">
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

Evas *evas = evas_object_evas_get(ad-&gt;win);
</pre>
</li>

<li>
<p>When an instance of Evas object exists, you can start creating basic Evas objects using obtained reference to Evas as a parent for child objects. The following example creates an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> with a size of 480 x 800, position on window at 0,0 by x and y axis, and sets it as a background:</p>

<pre class="prettyprint">
ad-&gt;bg = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;bg, 255, 255, 255, 255);
evas_object_resize(ad-&gt;bg, 480, 800);
evas_object_move(ad-&gt;bg, 0, 0);
evas_object_show(ad-&gt;bg);
</pre>

<p class="figure">Figure: Empty window</p> 
<p align="center"><img alt="Empty window" src="../../images/empty_window.png" /></p>

</li>
</ol>


<h2 id="clip" name="clip">Clipping an Object</h2>

<p>You can set an Evas object as a clipper for another Evas object. To obtain a clipper object, create an Evas object, set its width and height parameters, and call the <span style="font-family: Courier New,Courier,monospace">evas_object_clip_set()</span> function to set the object as a clipper for other Evas objects:</p>

<pre class="prettyprint">
ad-&gt;img = evas_object_image_filled_add(evas);
_app_get_resource(&quot;images/enlightenment.png&quot;, image_path, PATH_MAX);
evas_object_image_file_set(ad-&gt;img, image_path, NULL);
if (evas_object_image_load_error_get(ad-&gt;img) != EVAS_LOAD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;return;

evas_object_geometry_get(ad-&gt;spacer, NULL, NULL, &amp;w, &amp;h);
evas_object_name_set(ad-&gt;img, &quot;background&quot;);
evas_object_resize(ad-&gt;img, WIDTH, HEIGHT);
evas_object_move(ad-&gt;img, w, h);
evas_object_show(ad-&gt;img);

ad-&gt;clipper = evas_object_rectangle_add(evas);
evas_object_geometry_get(ad-&gt;img, &amp;x, &amp;y, &amp;w, &amp;h);
evas_object_move(ad-&gt;clipper, WIDTH / 4 + x, HEIGHT / 4 + y);
evas_object_resize(ad-&gt;clipper, w / 2, h / 2);
evas_object_clip_set(ad-&gt;img, ad-&gt;clipper);
evas_object_show(ad-&gt;clipper);
</pre>

<p class="figure">Figure: Using the clipper</p> 
<p align="center"><img alt="Using the clipper" src="../../images/using_clipper.png" /></p>


<p>You can also unset the clipper object using the <span style="font-family: Courier New,Courier,monospace">evas_object_clip_unset()</span> function. As a result, there are 2 objects, an image and a rectangle. The rectangle is on top of the image object according to the creation order.</p>

<pre class="prettyprint">
static void
_clipper_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;const char *object_name = evas_object_name_get(ad-&gt;img);
&nbsp;&nbsp;&nbsp;if (strcmp(object_name, &quot;background&quot;) != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (evas_object_clip_get(ad-&gt;img) == ad-&gt;clipper)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_clip_unset(ad-&gt;img);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_clip_set(ad-&gt;img, ad-&gt;clipper);
}
</pre>

<p class="figure">Figure: Using the clipper</p> 
<p align="center"><img alt="Using the clipper" src="../../images/using_clipper2.png" /></p>

<h2 id="color" name="color">Changing Colors and Visibility</h2>

<p>To manage the object color and visibility:</p>

<ul>
<li>
<p>To change a color of a valid <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>, use the <span style="font-family: Courier New,Courier,monospace">evas_object_color_set()</span> function and pass a color value:</p>

<pre class="prettyprint">
static void
_color_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;int alpha, r, g, b;

&nbsp;&nbsp;&nbsp;evas_object_color_get(ad-&gt;clipper, &amp;r, &amp;g, &amp;b, &amp;alpha);
&nbsp;&nbsp;&nbsp;evas_color_argb_unpremul(alpha, &amp;r, &amp;g, &amp;b);

&nbsp;&nbsp;&nbsp;if (g &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = b = 0;
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = b = 255;

&nbsp;&nbsp;&nbsp;evas_color_argb_premul(alpha, &amp;r, &amp;g, &amp;b);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;clipper, r, g, b, alpha);
}
</pre>

<p class="figure">Figure: Applying color</p> 
<p align="center"><img alt="Applying color" src="../../images/applying_color.png" /></p>
</li>
<li>
<p>To change the opacity of the object:</p>

<pre class="prettyprint">
static void
_opacity_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;int alpha, r, g, b;

&nbsp;&nbsp;&nbsp;evas_object_color_get(ad-&gt;clipper, &amp;r, &amp;g, &amp;b, &amp;alpha);
&nbsp;&nbsp;&nbsp;evas_color_argb_unpremul(alpha, &amp;r, &amp;g, &amp;b);

&nbsp;&nbsp;&nbsp;alpha -= 20;
&nbsp;&nbsp;&nbsp;if (alpha &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha = 255;

&nbsp;&nbsp;&nbsp;evas_color_argb_premul(alpha, &amp;r, &amp;g, &amp;b);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;clipper, r, g, b, alpha);
}
</pre>

<p class="figure">Figure: Changing opacity</p> 
<p align="center"><img alt="Changing opacity" src="../../images/changing_opacity.png" /></p>
</li>
<li>
<p>To hide the object when it is not needed:</p>

<pre class="prettyprint">
static void
_visibility_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;if (evas_object_visible_get(ad-&gt;clipper))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_hide(ad-&gt;clipper);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;clipper);
}
</pre>

<p class="figure">Figure: Changing visibility</p> 
<p align="center"><img alt=" Changing visibility" src="../../images/applying_invisibility.png" /></p>
</li>
</ul>

<h2 id="ref" name="ref">Counting References</h2>

<p>Evas has a simple reference counting mechanism that is useful for scenarios like inside a code block, callbacks exist which possibly delete an object that is operated on afterwards.</p>
<p>To increment the reference count of an object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_ref()</span> function. If the reference count is greater than 0, the <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> function is called until all references are released. References cannot go below 0 and are limited to 2&#94;32 - 1 for each object:</p>

<pre class="prettyprint">
ad-&gt;spacer = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;spacer, 0, 255, 100, 255);
evas_object_move(ad-&gt;spacer, 0, 0);
evas_object_resize(ad-&gt;spacer, 120, 20);
evas_object_show(ad-&gt;spacer);
evas_object_ref(ad-&gt;spacer);

static void
_unref_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;if (!ad-&gt;spacer)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (evas_object_ref_get(ad-&gt;spacer) != 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_unref(ad-&gt;spacer);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

int x, y, w, h;

evas_object_geometry_get(ad-&gt;spacer, &amp;x, &amp;y, NULL, NULL);
evas_object_move(ad-&gt;img, x, y);
evas_object_geometry_get(ad-&gt;img, &amp;x, &amp;y, &amp;w, &amp;h);
evas_object_move(ad-&gt;clipper, x + (w / 4), y + (h / 4));
evas_object_move(ad-&gt;clipper_border, x + (w / 4) - 3, y + (h / 4) - 3);
evas_object_del(ad-&gt;spacer);
ad-&gt;spacer = NULL;
}
</pre>


<p>A green rectangle is used as a padding and the clipper object calculates its x, y coordinates based on the rectangle position. The rectangle reference count is increased by calling the <span style="font-family: Courier New,Courier,monospace">evas_object_ref()</span> function and now it is equal to 1. When the <span style="font-family: Courier New,Courier,monospace">_unref_cb</span> callback is triggered, the reference count value is higher than 0 and the <span style="font-family: Courier New,Courier,monospace">evas_object_del(ad-&gt;spacer)</span> function has no effect on the object. After the second callback call, the <span style="font-family: Courier New,Courier,monospace">evas_object_ref_get(ad-&gt;spacer)</span> function returns 0 and the <span style="font-family: Courier New,Courier,monospace">evas_object_del(ad-&gt;spacer)</span> function marks the rectangle object for deletion.</p>

<p class="figure">Figure: Removing padding</p> 
<p align="center"><img alt="Removing padding" src="../../images/removing_padding.png" /></p>

<h2 id="order" name="order">Changing the Object Order on Canvas</h2>

<p>By default, the placing of objects on canvas is based on their creation order.</p>

<pre class="prettyprint">
ad-&gt;order_rect1 = evas_object_rectangle_add(evas);
evas_object_name_set(ad-&gt;order_rect1, &quot;red&quot;);
evas_object_color_set(ad-&gt;order_rect1, 255, 0, 0, 255);
evas_object_move(ad-&gt;order_rect1, 120, 310);
evas_object_resize(ad-&gt;order_rect1, 200, 200);
evas_object_show(ad-&gt;order_rect1);

ad-&gt;order_rect2 = evas_object_rectangle_add(evas);
evas_object_name_set(ad-&gt;order_rect2, &quot;blue&quot;);
evas_object_color_set(ad-&gt;order_rect2, 0, 0, 255, 255);
evas_object_move(ad-&gt;order_rect2, 180, 350);
evas_object_resize(ad-&gt;order_rect2, 200, 200);
evas_object_show(ad-&gt;order_rect2);
</pre>

<p class="figure">Figure: Default order of objects on canvas</p> 
<p align="center"><img alt="Default order of objects on canvas" src="../../images/default_order.png" /></p>
 
<p>You can change the object triggering the <span style="font-family: Courier New,Courier,monospace">_object_order_cb()</span> callback, which switches the order of the rectangles.</p>

<pre class="prettyprint">static void
_object_order_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;Evas_Object *rect = evas_object_below_get(ad-&gt;order_rect2);
&nbsp;&nbsp;&nbsp;if (!rect)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;const char *name = evas_object_name_get(rect);
&nbsp;&nbsp;&nbsp;if (name)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strcmp(name, &quot;red&quot;) == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_stack_below(ad-&gt;order_rect2, rect);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;rect = evas_object_below_get(ad-&gt;order_rect1);
&nbsp;&nbsp;&nbsp;if (!rect)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;name = evas_object_name_get(rect);
&nbsp;&nbsp;&nbsp;if (name)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strcmp(name, &quot;blue&quot;) == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_stack_below(ad-&gt;order_rect1, rect);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre>

<p class="figure">Figure: Changed order of objects on canvas</p> 
<p align="center"><img alt="Changed order of objects on canvas" src="../../images/changed_order.png" /></p>

<p>Evas allows placing an object to top and bottom layer of the canvas object stack. The <span style="font-family: Courier New,Courier,monospace">of _raise_cb</span> callback puts the canvas background on the top position of the screen. The <span style="font-family: Courier New,Courier,monospace">call of _lower_cb</span> callback puts the background to the bottom.</p>

<pre class="prettyprint">static void
_lower_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;evas_object_lower(ad-&gt;bg);
}

static void
_raise_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;evas_object_raise(ad-&gt;bg);
&nbsp;&nbsp;&nbsp;ad-&gt;isBgOnTop = EINA_TRUE;
}</pre>

<p class="figure">Figure: Canvas background by default and on top</p> 
<p align="center"><img alt="Canvas background by default and on top" src="../../images/background_order.png" /></p>






<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
