<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Basic Manipulation of Evas Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
		<li><a href="#work">Creating Evas Objects</a></li>
		<li><a href="#clip">Clipping an Object</a></li>
		<li><a href="#color">Changing Colors and Visibility</a></li>
		<li><a href="#ref">Using Reference Counts</a></li>
		<li><a href="#order">Changing the Object Order on the Canvas</a></li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Basic Manipulation of Evas Objects</h1>

<p>This topic introduces the basic manipulations available for the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> object. Most Evas objects can be manipulated using generic functions.</p>

<p>The list of available basic actions does not depend on the object&#39;s type. Evas implements functionality that allows you to perform basic manipulation, such as showing, hiding, setting and getting geometry, bringing a layer up or down, managing color, clipping, and reference counting.</p>


<h2 id="work" name="work">Creating Evas Objects</h2>

<p>To start working with Evas:</p>
<ol>
<li>Create an Evas instance (usually a window) or get the Evas canvas on which an already allocated Evas object lives on:

<pre class="prettyprint">
// Create Evas instance
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

// Get the canvas
Evas *evas = evas_object_evas_get(ad-&gt;win);
</pre>
</li>

<li>When you have an instance of the Evas object and the Evas canvas, you can create basic Evas objects as child objects for the parent Evas canvas.
<p>The following example creates a background <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> with white color, a size of 480 x 800, a position on window at 0,0 by X and Y axis, and shows the object on the screen:</p>

<pre class="prettyprint">
ad-&gt;bg = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;bg, 255, 255, 255, 255);
evas_object_resize(ad-&gt;bg, 480, 800);
evas_object_move(ad-&gt;bg, 0, 0);
evas_object_show(ad-&gt;bg);
</pre>

<p class="figure">Figure: White background object</p> 
<p align="center"><img alt="White background object" src="../../images/empty_window.png" /></p>

</li>
</ol>


<h2 id="clip" name="clip">Clipping an Object</h2>

<p>You can set an Evas object as a clipper for another Evas object. To create the clipper object, create an Evas object, set its width and height parameters, and call the <span style="font-family: Courier New,Courier,monospace">evas_object_clip_set()</span> function to set the object as a clipper for other Evas objects:</p>

<pre class="prettyprint">
// Create the image object
ad-&gt;img = evas_object_image_filled_add(evas);
_app_get_resource(&quot;images/enlightenment.png&quot;, image_path, PATH_MAX);
evas_object_image_file_set(ad-&gt;img, image_path, NULL);
if (evas_object_image_load_error_get(ad-&gt;img) != EVAS_LOAD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;return;

// Set the image object properties
evas_object_geometry_get(ad-&gt;spacer, NULL, NULL, &amp;w, &amp;h);
evas_object_name_set(ad-&gt;img, &quot;background&quot;);
evas_object_resize(ad-&gt;img, WIDTH, HEIGHT);
evas_object_move(ad-&gt;img, w, h);
evas_object_show(ad-&gt;img);

// Create the clipper object
ad-&gt;clipper = evas_object_rectangle_add(evas);
evas_object_geometry_get(ad-&gt;img, &amp;x, &amp;y, &amp;w, &amp;h);
evas_object_move(ad-&gt;clipper, WIDTH / 4 + x, HEIGHT / 4 + y);
evas_object_resize(ad-&gt;clipper, w / 2, h / 2);

// Set the clipper object to clip the image object
evas_object_clip_set(ad-&gt;img, ad-&gt;clipper);
evas_object_show(ad-&gt;clipper);
</pre>

<p class="figure">Figure: Clipping an image</p> 
<p align="center"><img alt="Clipping an image" src="../../images/using_clipper.png" /></p>


<p>To disable the clipping, you can unset the clipper object using the <span style="font-family: Courier New,Courier,monospace">evas_object_clip_unset()</span> function. As a result, both the originally clipped object and the clipper object become fully visible, in the creation order. In the following example, the rectangle (the clipper object) is on top of the image object, because it was created after the image object.</p>

<pre class="prettyprint">
static void
_clipper_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;const char *object_name = evas_object_name_get(ad-&gt;img);
&nbsp;&nbsp;&nbsp;if (strcmp(object_name, &quot;background&quot;) != 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;// If the clipper object currently clips the image object
&nbsp;&nbsp;&nbsp;if (evas_object_clip_get(ad-&gt;img) == ad-&gt;clipper)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Disable the clipping
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_clip_unset(ad-&gt;img);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise, clip the image object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_clip_set(ad-&gt;img, ad-&gt;clipper);
}
</pre>

<p class="figure">Figure: Disabling the clipping</p> 
<p align="center"><img alt="Disabling the clipping" src="../../images/using_clipper2.png" /></p>

<h2 id="color" name="color">Changing Colors and Visibility</h2>

<p>To manage the object color and visibility:</p>

<ul>
<li>
<p>To change the color of a valid <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>, use the <span style="font-family: Courier New,Courier,monospace">evas_object_color_set()</span> function and pass a new color value:</p>

<pre class="prettyprint">
static void
_color_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;int alpha, r, g, b;

&nbsp;&nbsp;&nbsp;// Retrieve the current clipper color
&nbsp;&nbsp;&nbsp;evas_object_color_get(ad-&gt;clipper, &amp;r, &amp;g, &amp;b, &amp;alpha);

&nbsp;&nbsp;&nbsp;// Define the new color attributes
&nbsp;&nbsp;&nbsp;evas_color_argb_unpremul(alpha, &amp;r, &amp;g, &amp;b);
&nbsp;&nbsp;&nbsp;if (g &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = b = 0;
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = b = 255;
&nbsp;&nbsp;&nbsp;evas_color_argb_premul(alpha, &amp;r, &amp;g, &amp;b);

&nbsp;&nbsp;&nbsp;// Set the new color
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;clipper, r, g, b, alpha);
}
</pre>

<p class="figure">Figure: Applying a color</p> 
<p align="center"><img alt="Applying a color" src="../../images/applying_color.png" /></p>
</li>
<li>
<p>To change the opacity of the object:</p>

<pre class="prettyprint">
static void
_opacity_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;int alpha, r, g, b;

&nbsp;&nbsp;&nbsp;// Retrieve the current clipper color and opacity
&nbsp;&nbsp;&nbsp;evas_object_color_get(ad-&gt;clipper, &amp;r, &amp;g, &amp;b, &amp;alpha);

&nbsp;&nbsp;&nbsp;// Define the new color attributes and alpha value for opacity
&nbsp;&nbsp;&nbsp;evas_color_argb_unpremul(alpha, &amp;r, &amp;g, &amp;b);
&nbsp;&nbsp;&nbsp;alpha -= 20;
&nbsp;&nbsp;&nbsp;if (alpha &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alpha = 255;
&nbsp;&nbsp;&nbsp;evas_color_argb_premul(alpha, &amp;r, &amp;g, &amp;b);

&nbsp;&nbsp;&nbsp;// Set the new color and opacity
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;clipper, r, g, b, alpha);
}
</pre>

<p class="figure">Figure: Changing the opacity</p> 
<p align="center"><img alt="Changing the opacity" src="../../images/changing_opacity.png" /></p>
</li>
<li>
<p>To hide the object, when it is not needed:</p>

<pre class="prettyprint">
static void
_visibility_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;// If the clipper is visible
&nbsp;&nbsp;&nbsp;if (evas_object_visible_get(ad-&gt;clipper))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Hide it
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_hide(ad-&gt;clipper);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise, show it
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;clipper);
}
</pre>

<p class="figure">Figure: Changing visibility</p> 
<p align="center"><img alt=" Changing visibility" src="../../images/applying_invisibility.png" /></p>
</li>
</ul>

<h2 id="ref" name="ref">Using Reference Counts</h2>

<p>Evas has a simple reference counting mechanism that is useful in scenarios where, for example, callbacks inside a code block possibly delete an object that is operated on afterwards outside the code block.</p>
<p>To increment the reference count of an object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_ref()</span> function. If the reference count is greater than 0, the <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> function defers the deletion until all references are released. References cannot go below 0 and are limited to 2&#94;32 - 1 for each object.</p>

<pre class="prettyprint">
// Create a green rectangle
ad-&gt;spacer = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;spacer, 0, 255, 100, 255);
evas_object_move(ad-&gt;spacer, 0, 0);
evas_object_resize(ad-&gt;spacer, 120, 20);
evas_object_show(ad-&gt;spacer);
// Increase the reference count
evas_object_ref(ad-&gt;spacer);

static void
_unref_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;if (!ad-&gt;spacer)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (evas_object_ref_get(ad-&gt;spacer) != 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Decrease the reference count
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_unref(ad-&gt;spacer);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int x, y, w, h;

&nbsp;&nbsp;&nbsp;// Modify the image and clipper object positions
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(ad-&gt;spacer, &amp;x, &amp;y, NULL, NULL);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;img, x, y);
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(ad-&gt;img, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;clipper, x + (w / 4), y + (h / 4));
&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;clipper_border, x + (w / 4) - 3, y + (h / 4) - 3);

&nbsp;&nbsp;&nbsp;// Delete the green rectangle, if the reference count is 0
&nbsp;&nbsp;&nbsp;evas_object_del(ad-&gt;spacer);
&nbsp;&nbsp;&nbsp;ad-&gt;spacer = NULL;
}
</pre>

<p>In the above example, a green rectangle is used as padding and the clipper object calculates its X, Y coordinates based on the rectangle position. When the rectangle is created, its reference count is increased to 1 by calling the <span style="font-family: Courier New,Courier,monospace">evas_object_ref()</span> function. When the <span style="font-family: Courier New,Courier,monospace">_unref_cb()</span> callback is triggered, the reference count value is higher than 0 and the <span style="font-family: Courier New,Courier,monospace"> evas_object_unref()</span> function is called to decrease it. At the end of the callback, the reference count is 0 and the <span style="font-family: Courier New,Courier,monospace">evas_object_del(ad-&gt;spacer)</span> function marks the rectangle object for deletion.</p>

<p class="figure">Figure: Removing padding</p> 
<p align="center"><img alt="Removing padding" src="../../images/removing_padding.png" /></p>

<h2 id="order" name="order">Changing the Object Order on the Canvas</h2>

<p>To handle the object order on the canvas:</p>
<ul>
<li>By default, objects are placed on the canvas based on their creation order:

<pre class="prettyprint">
// Create a red rectangle
ad-&gt;order_rect1 = evas_object_rectangle_add(evas);
evas_object_name_set(ad-&gt;order_rect1, &quot;red&quot;);
evas_object_color_set(ad-&gt;order_rect1, 255, 0, 0, 255);
evas_object_move(ad-&gt;order_rect1, 120, 310);
evas_object_resize(ad-&gt;order_rect1, 200, 200);
// Show the red rectangle
evas_object_show(ad-&gt;order_rect1);

// Create a blue rectangle
ad-&gt;order_rect2 = evas_object_rectangle_add(evas);
evas_object_name_set(ad-&gt;order_rect2, &quot;blue&quot;);
evas_object_color_set(ad-&gt;order_rect2, 0, 0, 255, 255);
evas_object_move(ad-&gt;order_rect2, 180, 350);
evas_object_resize(ad-&gt;order_rect2, 200, 200);
// Show the blue rectangle on top of the red rectangle
evas_object_show(ad-&gt;order_rect2);
</pre>

<p class="figure">Figure: Default object order on the canvas</p> 
<p align="center"><img alt="Default object order on the canvas" src="../../images/default_order.png" /></p>
</li>

<li>To change the object order, use the <span style="font-family: Courier New,Courier,monospace">evas_object_stack_below()</span> function:

<pre class="prettyprint">
static void
_object_order_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;// Get the object below the blue rectangle (the red one)
&nbsp;&nbsp;&nbsp;Evas_Object *rect = evas_object_below_get(ad-&gt;order_rect2);
&nbsp;&nbsp;&nbsp;if (!rect)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;const char *name = evas_object_name_get(rect);
&nbsp;&nbsp;&nbsp;if (name)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If the object is the red rectangle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (strcmp(name, &quot;red&quot;) == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Move the blue rectangle below the red one
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_stack_below(ad-&gt;order_rect2, rect);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre>

<p class="figure">Figure: Changed object order</p> 
<p align="center"><img alt="Changed object order" src="../../images/changed_order.png" /></p>
</li>
<li>To place an object to the top or bottom of its layer in the canvas object stack, use the <span style="font-family: Courier New,Courier,monospace">evas_object_raise()</span> or <span style="font-family: Courier New,Courier,monospace">evas_object_lower()</span> function.
<p>In the following example, the <span style="font-family: Courier New,Courier,monospace">_lower_cb()</span> callback puts the canvas background at the bottom, showing both the rectangles that are on higher levels. On the other hand, the <span style="font-family: Courier New,Courier,monospace">_raise_cb()</span> callback puts the background to the top, hiding both the rectangles that are now on lower levels.</p>

<pre class="prettyprint">
static void
_lower_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;// Move the background to the bottom
&nbsp;&nbsp;&nbsp;evas_object_lower(ad-&gt;bg);
}

static void
_raise_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;App_Data *ad = (App_Data *)data;

&nbsp;&nbsp;&nbsp;// Move the background to the top
&nbsp;&nbsp;&nbsp;evas_object_raise(ad-&gt;bg);
&nbsp;&nbsp;&nbsp;ad-&gt;isBgOnTop = EINA_TRUE;
}</pre>

<p class="figure">Figure: Canvas background at the bottom (left) and on the top (right)</p> 
<p align="center"><img alt="Canvas background at the bottom (left) and on the top (right)" src="../../images/background_order.png" /></p>
</li></ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
