<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Advanced Manipulation of Evas Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
		<li><a href="#create">Creating the Basic Application</a></li>
		<li><a href="#attach">Attaching Data to the Object</a></li>
		<li><a href="#scale">Using Scale Functions</a></li>
		<li><a href="#render">Configuring the Evas Object Rendering Mode</a></li>
		</ul>	
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Advanced Manipulation of Evas Objects</h1>


<p>This tutorial shows how to create an application that enables scaling Evas text object by clicking buttons. The data setter and getter functions are used to pass the scalable object through the clicked button object to a callback.</p>
<p>The tutorial also shows how to change the Evas object rendering mode using the extra object manipulation API. </p>  

<p class="figure">Figure: Advanced Evas application</p> 
<p align="center"><img alt="Advanced Evas application" src="../../images/evas_advanced.png" /></p>


<h2 id="create" name="create">Creating the Basic Application</h2>
<p>To create the basic application:</p>
<ol>
<li>
<p>To use the required functions, include the following libraries:</p>

<pre class="prettyprint">
#include &lt;app.h&gt;
#include &lt;Elementary.h&gt;
#include &lt;system_settings.h&gt;
#include &lt;efl_extension.h&gt;</pre>
</li>

<li>
<p>Create objects for an Elementary window and buttons for scaling and changing the object render mode. Also create a text object and 2 rectangle objects to connect to the application data structure:</p>

<pre class="prettyprint">
typedef struct 
appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *scale_incr_button;
&nbsp;&nbsp;&nbsp;Evas_Object *scale_decr_button;

&nbsp;&nbsp;&nbsp;Evas_Object *render_text;
&nbsp;&nbsp;&nbsp;Evas_Object *blend_mode_button;
&nbsp;&nbsp;&nbsp;Evas_Object *copy_mode_button;
&nbsp;&nbsp;&nbsp;Evas_Object *render_rect1;
&nbsp;&nbsp;&nbsp;Evas_Object *render_rect2;
} 
appdata_s;</pre>
</li>
</ol>

<h3 id="window" name="window">Creating the Elementary Window</h3>
<p>To create an elementary window:</p>
<ol>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span> function and pass the name and title of the application as parameters. To set a callback for the Back hardware button, use the <span style="font-family: Courier New,Courier,monospace">eext_object_event_callback_add()</span> function. To display the Evas object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function.</p>

<pre class="prettyprint">static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(&quot;Extra object function&quot;, &quot;Extra object function&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Window callbacks
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, back_cb, ad);

&nbsp;&nbsp;&nbsp;// Show the window
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>
</li>

<li>

<p>Implement callback functions to enable closing the application: </p>

<pre class="prettyprint">
static void
back_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;elm_win_lower(ad-&gt;win);
}

static void
win_delete_request_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ui_app_exit();
}
</pre>
</li>
</ol>

<h3 id="create_app" name="create_app">Creating an Application</h3>
<p>Create an Elementary application with a GUI:</p>

<pre class="prettyprint">
static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;// Create the application UI
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}

int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;

&nbsp;&nbsp;&nbsp;// Run the main loop
&nbsp;&nbsp;&nbsp;return ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
}
</pre>

<h3 id="button" name="button">Creating Buttons</h3>
<p>To create buttons:</p>
<ol>
<li>
<p>Create the scale buttons. The <span style="font-family: Courier New,Courier,monospace">move()</span> and <span style="font-family: Courier New,Courier,monospace">resize()</span> functions configure the buttons&#39; custom geometry.</p>

<pre class="prettyprint">
// Scale increasing button
ad-&gt;scale_incr_button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;scale_incr_button, &quot;Scale +&quot;);
evas_object_resize(ad-&gt;scale_incr_button, 120, 50);
evas_object_move(ad-&gt;scale_incr_button, 180, 20);
evas_object_show(ad-&gt;scale_incr_button);

// Scale decreasing button
ad-&gt;scale_decr_button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;scale_decr_button, &quot;Scale -&quot;);
evas_object_resize(ad-&gt;scale_decr_button, 120, 50);
evas_object_move(ad-&gt;scale_decr_button, 180, 170);
evas_object_show(ad-&gt;scale_decr_button);
</pre>
</li>

<li>
<p>Create the render mode change buttons:</p>

<pre class="prettyprint">
// Blend render mode button
ad-&gt;blend_mode_button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;blend_mode_button, &quot;BLEND Mode&quot;);
evas_object_resize(ad-&gt;blend_mode_button, 190, 50);
evas_object_move(ad-&gt;blend_mode_button, 30, 280);
evas_object_show(ad-&gt;blend_mode_button);

// Copy render mode button
ad-&gt;copy_mode_button = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;copy_mode_button, &quot;COPY Mode&quot;);
evas_object_resize(ad-&gt;copy_mode_button, 190, 50);
evas_object_move(ad-&gt;copy_mode_button, 260, 280);
evas_object_show(ad-&gt;copy_mode_button);
</pre>
</li>
</ol>

<h3 id="callback" name="callback">Creating Callbacks for the Button Click Signal</h3>
<p>To create the callbacks:</p>
<ol>
<li>
<p>Create callbacks:</p>

<pre class="prettyprint">
evas_object_smart_callback_add(ad-&gt;scale_incr_button, &quot;clicked&quot;, scale_incr_cb, NULL);
evas_object_smart_callback_add(ad-&gt;scale_decr_button, &quot;clicked&quot;, scale_decr_cb, NULL);
evas_object_smart_callback_add(ad-&gt;blend_mode_button, &quot;clicked&quot;, blend_mode_cb, ad);
evas_object_smart_callback_add(ad-&gt;copy_mode_button, &quot;clicked&quot;, copy_mode_cb, ad);
</pre>
</li>

<li>
<p>Implement callback functions to enable changing the scale and render mode:</p>

<pre class="prettyprint">
static void
scale_incr_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *evas_text = evas_object_data_get(obj, &quot;evas_text&quot;);
&nbsp;&nbsp;&nbsp;if (!evas_text)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;double current_scale = evas_object_scale_get(evas_text);

&nbsp;&nbsp;&nbsp;if (current_scale &gt;= 5.0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;evas_object_scale_set(evas_text, current_scale + 0.2);
}

static void
scale_decr_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *evas_text = evas_object_data_get(obj, &quot;evas_text&quot;);
&nbsp;&nbsp;&nbsp;if (!evas_text)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;double current_scale = evas_object_scale_get(evas_text);

&nbsp;&nbsp;&nbsp;if (current_scale &lt;= 0.0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_scale_set(evas_text, current_scale - 0.2);
}

static void
blend_mode_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;evas_object_text_text_set(ad-&gt;render_text, &quot;EVAS_RENDER_BLEND: d = d * (1-sa) + s&quot;);
&nbsp;&nbsp;&nbsp;evas_object_render_op_set(ad-&gt;render_rect2, EVAS_RENDER_BLEND);
}

static void
copy_mode_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;evas_object_text_text_set(ad-&gt;render_text, &quot;EVAS_RENDER_COPY: d = s&quot;);
&nbsp;&nbsp;&nbsp;evas_object_render_op_set(ad-&gt;render_rect2, EVAS_RENDER_COPY);
}
</pre>
</li>
</ol>

<h2 id="attach" name="attach">Attaching Data to the Object</h2>
<p>Create the text object using the <span style="font-family: Courier New,Courier,monospace">evas_object_text_add()</span> function.</p>

<pre class="prettyprint">
evas = evas_object_evas_get(ad-&gt;win);
evas_text = evas_object_text_add(evas);
evas_object_text_text_set(evas_text, &quot;Scalable Text Object&quot;);
evas_object_text_font_set(evas_text, &quot;Sans&quot;, 10);
evas_object_color_set(evas_text, 50, 100, 200, 255);
evas_object_move(evas_text, 10, 90);
evas_object_show(evas_text);
</pre>
<p>To attach data:</p>
<ul>
<li>Attach data
<p>The data is passed to the function through buttons. Use the <span style="font-family: Courier New,Courier,monospace">evas_object_data_set()</span> function for the button. Give a pointer to the attach data, and the key name to associate it with the data.</p>

<pre class="prettyprint">
evas_object_data_set(ad-&gt;scale_incr_button, &quot;evas_text&quot;, evas_text);
evas_object_data_set(ad-&gt;scale_decr_button, &quot;evas_text&quot;, evas_text);
</pre>
</li>
<li>Get data
<p>To get the file data attached to the object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_data_get()</span> function and give the data key name added when you attached this data:</p>

<pre class="prettyprint">
Evas_Object *evas_text = evas_object_data_get(obj, &quot;evas_text&quot;);
</pre>
</li>
<li>Delete data
<p>To delete the data attached to the object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_data_del()</span> function and give the data key name added when you attached this data:</p>

<pre class="prettyprint">
evas_object_data_del(obj, &quot;evas_text&quot;);
</pre>
</li>
</ul>

<h2 id="scale" name="scale">Using Scale Functions</h2>

<p>To set the scale factor to a single Evas object instead of setting scale to the entire application, use the <span style="font-family: Courier New,Courier,monospace">evas_object_scale_set()</span> function. This is useful when you want scalable UI elements at runtime. However, only text and textblock objects have scaling change handlers. Other objects do not change visually on this call. In this application, the scale is defined in the button click callbacks.</p>

<pre class="prettyprint">
double current_scale = evas_object_scale_get(evas_text);

if (current_scale &gt;= 5.0)
&nbsp;&nbsp;&nbsp;return;

evas_object_scale_set(evas_text, current_scale + 0.2);
</pre>

<p>Get the current scale of the Evas text object and check its maximum size. If the current size is smaller than the maximum size, the scale factor for the object is increased using the evas_object_scale_set function. The text object is updated on display and its size changes.</p>

<h2 id="render" name="render">Configuring the Evas Object Rendering Mode</h2>

<p>To change the render operation to be used for rendering the Evas object, use the <span style="font-family: Courier New,Courier,monospace">evas_object_render_op_set()</span> function. To get the current render operation, use the <span style="font-family: Courier New,Courier,monospace">evas_object_render_op_get()</span> function.</p>

<p>To manage the rendering mode:</p>
<ul>
<li>Create Evas rectangle objects to change the Evas rendering mode for them:

<pre class="prettyprint">
// Rectangle with yellow background
ad-&gt;render_rect1 = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;render_rect1, 240, 220, 50, 191);
evas_object_resize(ad-&gt;render_rect1, 260, 260);
evas_object_move(ad-&gt;render_rect1, 60, 400);
evas_object_show(ad-&gt;render_rect1);

// Translucent rectangle with blue foreground
ad-&gt;render_rect2 = evas_object_rectangle_add(evas);
evas_object_color_set(ad-&gt;render_rect2, 25, 110, 220, 127);
evas_object_resize(ad-&gt;render_rect2, 260, 260);
evas_object_move(ad-&gt;render_rect2, 170, 500);
evas_object_show(ad-&gt;render_rect2);
</pre>
</li>
<li>Change the rendering mode operation
<p>To change the rendering mode, use the <span style="font-family: Courier New,Courier,monospace">evas_object_render_op_set()</span> function and give the render operation constant, which informs Evas of the function to use when drawing the Evas object on canvas. By default, all Evas objects use the <span style="font-family: Courier New,Courier,monospace">EVAS_RENDER_BLEND</span> mode and all colors are drawn using the <span style="font-family: Courier New,Courier,monospace">d = d*(1-sa) + s</span> formula, where <span style="font-family: Courier New,Courier,monospace">d</span> is destination color, <span style="font-family: Courier New,Courier,monospace">sa</span> is source alpha, and <span style="font-family: Courier New,Courier,monospace">s</span> is source color.</p>

<p>Change the rendering mode to copy mode <span style="font-family: Courier New,Courier,monospace">(d = s)</span>:</p>

<pre class="prettyprint">
evas_object_render_op_set(ad-&gt;render_rect2, EVAS_RENDER_COPY);
</pre>
</li>
</ul>



<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
