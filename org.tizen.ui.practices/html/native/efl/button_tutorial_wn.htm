<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating Wearable Buttons</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#init">Initializing the Button Application</a></li>
			<li><a href="#style">Using Button Styles</a></li>
			<li><a href="#event">Managing Button Events</a></li>
		</ul>		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__EFL__EXTENSION__MODULE.html">Efl Extension API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>	
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating Wearable Buttons</h1>

  
<p>This tutorial teaches the basics of the button component interactions.</p>

<p>This feature is supported in wearable applications only.</p>


<h2 id="init" name="init">Initializing the Button Application</h2>
	
<p>This use case creates an application with a window entitled &quot;Button Basic Tutorial&quot;. The window consists of a box component, and a button is placed inside the box.</p>
	
<p>To create a typical elementary application:</p> 
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad) 
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;Evas_Object *btn1, *btn2, *btn3;

&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(&quot;main&quot;, &quot;Button Basic Tutorial&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;ad-&gt;box = elm_box_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;box);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;box);

&nbsp;&nbsp;&nbsp;create_button(ad-&gt;box);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}

static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;create_base_gui(ad);

&nbsp;&nbsp;&nbsp;return true;
}

int
main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;struct app_data ad = {0,};
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;

&nbsp;&nbsp;&nbsp;return ui_app_main(&amp;argc, &amp;argv, &amp;event_callback, &amp;ad);
}</pre>
	
	
 <h2 id="style" name="style">Using Button Styles</h2>

<p>The basic application code is the same as in the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a>.</p>

<p>To use various button styles:</p>

<ol><li><p>To create buttons using various styles:</p>

<ul><li>Create a basic text-only button:

<pre class="prettyprint">Evas_Object* button;

button = elm_button_add(box);
elm_object_text_set(button, &quot;Click me&quot;);
evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button);
evas_object_show(button);
</pre></li>

<li>Create a basic icon button (no text, just an icon):
<pre class="prettyprint">Evas_Object* button2;
Evas_Object* icon2;

button2 = elm_button_add(box);
icon2 = elm_icon_add(box);
elm_image_file_set(icon2, &quot;icon.png&quot;, NULL);
elm_object_content_set(button2, icon2);
evas_object_size_hint_weight_set(button2, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button2, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button2);
evas_object_show(button2);
</pre></li>

<li>Create a button with both an icon and a text label:
<pre class="prettyprint">Evas_Object* button3;
Evas_Object* icon3;
button3 = elm_button_add(box);
icon3 = elm_icon_add(box);
elm_image_file_set(icon3, &quot;icon.png&quot;, NULL);
elm_object_content_set(button3, icon3);
elm_object_text_set(button3, &quot;Press me&quot;);
evas_object_size_hint_weight_set(button3, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(button3, EVAS_HINT_FILL, 0.5);
elm_box_pack_end(box, button3);
evas_object_show(button3);
</pre></li>
</ul></li>
<li><p>To disable a button so that it is not in use, only shown:</p>
<pre class="prettyprint">elm_object_disabled_set(button2, EINA_TRUE);
</pre></li></ol>

 <h2 id="event" name="event">Managing Button Events</h2>
<p>The Elementary buttons respond to user interactions with several events.</p>
<p>To manage button events:</p>

<ul> 
<li>Handle click events:
<p>The &quot;click&quot; event is the most basic and well-known one. The following code snippet changes the text of a button upon a click event: a press followed by an unpress.</p>
<pre class="prettyprint">
static void _button_click_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Clicked!&quot;);
}
evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_click_cb, NULL);
</pre></li>

<li>Handle press and unpress events:
<p>The button can respond to the separate press and unpress events instead of the entire click event.</p>
<pre class="prettyprint">static void _button_press_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Pressed!&quot;);
}
static void _button_unpress_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Unpressed!&quot;);
}

evas_object_smart_callback_add(button3, &quot;pressed&quot;, _button_press_cb, NULL);
evas_object_smart_callback_add(button3, &quot;unpressed&quot;, _button_unpress_cb, NULL);
</pre></li>

<li>Handle repeated events:
<p>The button can receive several events in case it is being held by the user. Timings, such as the initial timeout and the repeat interval, can be set. In this example, the initial timeout is set to 1 second, and the repeat interval to half a second.</p>
<pre class="prettyprint">static void _button_repeat_cb(void *data, Evas_Object *button, void *ev) 
{
&nbsp;&nbsp;&nbsp;static int count = 0;
&nbsp;&nbsp;&nbsp;char buf[16];

&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;Repeat %d&quot;, count++);

&nbsp;&nbsp;&nbsp;elm_object_text_set(button, buf);
}

elm_button_autorepeat_set(button3, EINA_TRUE);
elm_button_autorepeat_initial_timeout_set(button3, 1.0);
elm_button_autorepeat_gap_timeout_set(button3, 0.5);
evas_object_smart_callback_add(button3, &quot;repeated&quot;, _button_repeat_cb, NULL);
</pre></li></ul>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
