<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Multiple Screen Support</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">	
			<li><a href="#key_concepts">Key Concepts</a></li>
			<li><a href="#apply">Applying the Base Scale</a></li>
			<li><a href="#without">Scaling without the Base Scale</a></li>			
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">	
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Multiple Screen Support</h1> 

  <p>Tizen is available in various devices which support different screen sizes and resolutions. When developing Tizen applications, you must take this into account if you want your application to function well in various device models.</p> 
  <p>Before <a href="#apply">implementing multiple screen support</a>, make sure you are familiar with the <a href="#key_concepts">key concepts of multiple screen support</a>.</p> 
  
   <h2 id="key_concepts" name="key_concepts">Key Concepts</h2> 
  <p>Before building a native application for multiple resolutions using Tizen native UI framework, make sure you are familiar with the following concepts:</p> 
  <ul>
  <li><a href="#multi">Multi-scale</a></li>
  <li><a href="#base">Base scale</a></li>
  </ul>

  <h3 id="multi" name="multi">Multi-scale in Tizen Native UI Framework</h3> 
  <p>Tizen native UI framework supports multiple scaling. If the application is implemented considering scalability, it is enough to change the <span style="font-family: Courier New,Courier,monospace;">elm_scale</span> value in different device environments without modifying the application code.</p> 
  
  <p>Scale 1.0 in Tizen native UI framework means that the application is displayed in a set size and is not scaled. Scale 1.0 is used in a display environment, such as a desktop. In the desktop environment, the monitor has a resolution between 1280 x 800 and 1920 x 1080, with a size between 20 and 27 inch, and the dpi between 80 and 100.</p>
  
  <p>If an application is scaled up or down after implementing it in a desktop environment, it can be used in another device without modifying the code. Each device has a proper scale value for adjusting the application size. Edje, which handles layout and themes in Tizen native UI framework, gets the size of an object by multiplying the size specified by an application using the scale value.</p> 
  
  <p>The following figure illustrates a 50 px wide object in a 1280 px wide monitor. If the same object is displayed with not scaling in mobile environment, it looks very small. To show the object in mobile environment in the similar size as in the monitor, define the scale is 2.0, so that the object size is 100 px instead of 50 px.</p>
  
  <p class="figure">Figure: Scaling from desktop to mobile</p> 
  <p align="center"><img alt="Scaling from desktop to mobile" src="../../images/scaling.png" /> </p> 
  
  <h3 id="base" name="base">Base Scale</h3> 
  <p>The object scaling must be defined in the <span style="font-family: Courier New,Courier,monospace;">config.xml</span> file of this application to show the application in a proper size in other devices. However, the scaling must be based on scale 1.0 or, if the application is based on another scale, this scale must be defined in the <span style="font-family: Courier New,Courier,monospace;">config.xml</span> file. This predefined scale is called the &quot;base scale&quot;. </p> 
 
  <p>The size of a scalable object is multiplied with the device scale value, as illustrated in the following figure. If the scalable object (on the left) with the size 10 is created in a device with scale 1.0, the size of the object is 20 in a device with scale 2.0, and 40 in a device with scale 4.0.</p>
  
  <p class="figure">Figure: Base scale</p> 
  <p align="center"><img alt="Base scale" src="../../images/base_scale.png" /> </p> 
  
  <p>The middle object has a base scale 2.0. The following example shows its scaling in a device with scale 4.0:</p>
  
  <table>
<tbody>
<tr>
 <td>Scale = Device scale (information in the target) / Base scale (information in the application)
<p>For example: 2.0 = 4.0 / 2.0</p>
</td>
</tr>
</tbody>
</table>
 
  
  <h2 id="apply" name="apply">Applying the Base Scale</h2> 
  <p>To create an application that supports multiple screen sizes, you must learn how to set the base scale in:</p> 
  <ul> 
   <li><a href="#set_edc">EDC</a></li> 
   <li><a href="#set_c">C code</a></li> 
  </ul> 
  
  <h3 id="calc_base" name="calc_base">Calculating the Base Scale</h3>

<p>To get the base scale value of your own display, you must know the DPI of the display. Based on the display DPI, you can calculate the base scale, since it is basically proportional to the display DPI with the following formula:</p>

<pre class="prettyprint">
base_scale = (DPI / 90) * profile_factor</pre>

<p>The profile factor is the value for fitting the object size as a profile. The distance between the user eye and the display differs for each profile. This means that the object size must be different if the device display is changed.</p>

<p>The following table lists the profile factors for various profiles.</p>

<table>
<caption>Table: Profile factors</caption>
<tbody>
<tr>
 <th>Profile</th>
 <th>Profile factor</th>
</tr>
 <tr>
 <td>Wearable</td>
 <td>0.4</td>
 </tr>
  <tr>
 <td>Mobile - small screen (until 4.4 inch)</td>
  <td>0.7</td>
 </tr>
 <tr>
 <td>Mobile - normal screen (4.5 inch and upwards)</td>
 <td>0.8</td>
  </tr> 

 <tr>
 <td>Desktop</td>
 <td>1.0</td>
 </tr>
 </tbody></table>

<p>For example, if your display has 233 dpi and the platform uses the mobile profile (small screen), the base scale is calculated like this:</p>
<pre class="prettyprint">
1.8 = (233 / 90) * 0.7</pre>

<p>The base scale of the device is 1.8. If the application is made in the environment using 233 dpi and mobile profile, its base scale must be set to 1.8. For a desktop, the DPI is 90, and its base scale is 1.0.</p>

 
<h3 id="set_edc" name="set_edc">Setting the Base Scale in EDC</h3> 
  <p>The application must specify the scale its base scale. The edje objects are scaled properly if the base scale is set in the collection of the edc file, as in the following example:</p> 
  
  <table class="note"><tbody>
<tr>
<th class="note">Note</th> 
      </tr>
<tr>
<td class="note">The base scale for WVGA is 1.8, and for HD application, 2.4.</td> 
      </tr>
</tbody></table>
<pre class="prettyprint">collections 
{
&nbsp;&nbsp;&nbsp;base_scale: 1.8; // This value is for WVGA application
&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;box&quot;; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 100 100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre> 
  <h3 id="set_c" name="set_c">Setting the Base Scale in C</h3> 
  <p>The size of the object must be specified in EDC. However, sometimes it is better for an application to the object size in a C file. If the size is defined with no scaling in the C file, the application is displayed in the same size even if the scale changes. To avoid this, use the <span style="font-family: Courier New,Courier,monospace;">ELM_SCALE_SIZE</span> macro, as in the following example:</p> 

<pre class="prettyprint">#define ELM_SCALE_SIZE(x) x / elm_app_base_scale_get() * elm_config_scale_get()</pre>

  <p>in the definition, the size (<span style="font-family: Courier New,Courier,monospace;">x</span>) is changed to a size based on 1.0 (<span style="font-family: Courier New,Courier,monospace;">x/elm_app_base_scale_get()</span>) and it is multiplied with the scale of the current target (<span style="font-family: Courier New,Courier,monospace;">elm_config_scale_get()</span>).</p>
  
  <p>Set the base scale using the <span style="font-family: Courier New,Courier,monospace;">elm_app_base_scale_set()</span> function:</p>
  
<pre class="prettyprint">int app_create(void *data)
{
&nbsp;&nbsp;&nbsp;elm_app_base_scale_set(1.8); // This value is for WVGA application
}
</pre> 
  <p>After setting the base scale, use the <span style="font-family: Courier New,Courier,monospace;">ELM_SCALE_SIZE</span> macro to set the size of an object in the application:</p> 

<pre class="prettyprint">evas_object_size_hint_min_set(object, ELM_SCALE_SIZE(100), ELM_SCALE_SIZE(100));
evas_object_resize(object, ELM_SCALE_SIZE(50), ELM_SCALE_SIZE(50));
</pre> 
 
  <p>You can use <span style="font-family: Courier New,Courier,monospace;">ELM_SCALE_SIZE</span> macro in any API related with setting objects sizes in Tizen native applications.</p> 
  
  <h2 id="without" name="without">Scaling without the Base Scale</h2>   

<p>In Tizen, each device has a scale value in proportion to the display. If scaling is enabled, the objects are drawn on the display by multiplying with the user-defined object size and the device scale. If the base scale is set, the objects are drawn by dividing the user-defined object size with the base scale and multiplying it by the device scale.</p>

<p>If you use the scale feature without setting the base scale, the result is the same as if you set the base scale to 1.0. Then you do not need to care about the base scale variables, because the pixels roll like a virtual pixel. For example, if you set 1 pixel in 129 dpi without setting the base scale value, the 1 pixel before scaling is equivalent to 1 real physical pixel after scaling. In case of 233 dpi, it is the same with 1.8 pixels after scaling. </p>

<p>Always consider the pixel before scaling when defining the application UI, in order to ensure a proper UI display on the screen with a diversity of densities.</p>

<pre class="prettyprint">int app_create(void *data)
[ Conversion Formula ]
Real physical pixel = (a pixel before scaling) x (dpi / 90) x 0.7
</pre> 
<p>Where  90 is the default DPI on a desktop and 0.7 is the mobile profile factor.</p>

<p>The following table shows some examples.</p>

<table>
<caption>Table: Pixel conversions</caption>
<tbody>
<tr>
 <th></th>
 <th>Base</th>
 <th>Low-density device (such as WVGA, 4 inch)</th>
 <th>High-density device (such as HD, 5 inch)</th>
</tr>
 <tr>
 <td>DPI</td>
 <td>129</td>
 <td>233</td>
 <td>294</td> 
 </tr>
 <tr>
 <td>A pixel before scaling</td>
 <td>100</td>
 <td>100</td>
 <td>100</td> 
 </tr>
 <tr>
 <td>Real physical pixel</td>
 <td>100</td>
 <td>180</td>
 <td>260</td> 
 </tr>
 <tr>
 <td>Actual base scale</td>
 <td>1.0</td>
 <td>1.8</td>
 <td>2.6</td> 
 </tr> 
 </tbody></table>

 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>