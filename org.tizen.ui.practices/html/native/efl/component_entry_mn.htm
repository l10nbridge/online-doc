<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Entry</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#add">Adding an Entry Component</a></li>
			<li><a href="#editor">Managing the Text</a></li>
			<li><a href="#cursor">Managing the Cursor</a></li>
			<li><a href="#configure">Configuring the Entry</a></li>
			<li><a href="#formatting">Modifying Formatting and Using Special Markups</a></li>
			<li><a href="#callback">Using the Entry Callbacks</a></li>
		</ul>
			<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Entry</h1>

<p>This feature is supported in mobile applications only.</p>

<p>The entry component is a box where the user can enter text. It supports the following features:</p>
  <ul>
   <li>Multiline</li>
   <li>Scrolling</li>
   <li>Password mode</li>
   <li>Filtering text</li>
   <li>Read/write from a file</li>
   <li>Theme style overrides</li>
  </ul>
   
<p>The entry component includes an Evas <a href="../../../../org.tizen.native.mobile.apireference/group__Evas__Object__Textblock.html">Textblock</a> in it, which means that it supports the features of the textblock component, such as text wrapping and formatted markup text.</p>

<p>For more information, see the <a href="../../../../org.tizen.native.mobile.apireference/group__Entry.html">Entry</a> API.</p>
   
<p class="figure">Figure: Entry component</p> 
<p align="center"> <img alt="Entry component" src="../../images/entry.png" /> <img alt="Entry component" src="../../images/entry2.png" /> </p> 
 
<p class="figure">Figure: Entry hierarchy</p> 
<p align="center"> <img alt="Entry hierarchy" src="../../images/entry_tree.png" /> </p>    
   
<h2 id="add">Adding an Entry Component</h2>

<p>To create an entry component, use the <span style="font-family: Courier New,Courier,monospace">elm_entry_add()</span> function. You can set the text inside it with the <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_set()</span> function.</p>

<pre class="prettyprint">
Evas_Object *entry, *parent;

entry = elm_entry_add(parent);
elm_entry_entry_set(entry, &quot;A short text.&quot;);
</pre>

<h2 id="editor">Managing the Text</h2>

<p>To manage the entry component content:</p>
<ul>
<li>
Add text to the entry:

<ul><li>Append text to the end of the existing content:

<pre class="prettyprint">
elm_entry_entry_append(entry, &quot;END&quot;);
</pre>
</li>
<li>
<p>Insert text at the current cursor position:</p>
<pre class="prettyprint">
elm_entry_entry_insert(entry, &quot;CURSOR&quot;);
</pre>
</li></ul></li>
<li>
<p>Check whether the entry is empty:</p>
<pre class="prettyprint">
Eina_Bool Empty = elm_entry_is_empty(entry);
</pre>
<p>If the entry has content, the function returns the  Boolean <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span> variable.</p>
</li>
<li>Select text:
<ul>
<li>Select all the content of the entry component:
<pre class="prettyprint">
elm_entry_select_all(entry);
</pre>
</li>
<li>Select a part of the text with the <span style="font-family: Courier New,Courier,monospace">elm_entry_select_region_set()</span> function. <p>The following example selects the first 20 characters of the entry content:</p>
<pre class="prettyprint">
elm_entry_select_region_set(entry, 0, 20);
</pre>
</li>
<li>Clear the current selection:
<pre class="prettyprint">
elm_entry_select_none(entry);
</pre>
</li>
</ul></li>
<li>Retrieve the currently selected text:
<pre class="prettyprint">
const char *selection;

selection = elm_entry_selection_get(entry);
</pre>
<p>If the entry text is empty, the function returns <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>
</li>
<li>
<p>Copy or cut the selection to the clipboard:</p>
<pre class="prettyprint">
elm_entry_selection_cut(entry);
</pre>
<p>Paste the selection in the same or a different entry:</p>
<pre class="prettyprint">
elm_entry_selection_paste(entry);
</pre>
</li>
<li>Filter the text.
<p>You can filter the size and individual characters within the entry text by appending a filter with the <span style="font-family: Courier New,Courier,monospace">elm_entry_markup_filter_append()</span> function.</p>
<ul>
<li>To limit the size of the entry to 8 characters:
<pre class="prettyprint">
static Elm_Entry_Filter_Limit_Size 
limit_size = 
{
&nbsp;&nbsp;&nbsp;.max_char_count = 8,
&nbsp;&nbsp;&nbsp;.max_byte_count = 0
};

// Append a new callback to the list, this function is called each time
// a text is inserted in the entry. Pass the previously created limit_size struct 
// to set the maximum number of characters allowed to 8
 
elm_entry_markup_filter_append(entry, elm_entry_filter_limit_size, limit_size);
</pre></li>

<li>To define a list of accepted or rejected characters, append the filter with the <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Filter_Accept_Set</span> structure.
<p>The following example shows how to reject the &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39; characters:</p>
<pre class="prettyprint">
static Elm_Entry_Filter_Accept_Set 
accept_set = 
{
&nbsp;&nbsp;&nbsp;.accepted = NULL,
&nbsp;&nbsp;&nbsp;.rejected = &quot;+*-/&quot;
};

elm_entry_markup_filter_append(entry, elm_entry_filter_accept_set, accept_set);
</pre>
</li></ul>
</li>
</ul>

<p>You can define a file (for example, <span style="font-family: Courier New,Courier,monospace">/tmp/test.txt</span>) to save the entry content. The content in the file is implicitly loaded and displayed. After the file is set, any content changes in the entry are automatically saved after a short delay.</p>

<pre class="prettyprint">
// Set the file in which the entry text is saved
// Implicitly load the existing file content 
elm_entry_file_set(entry, &quot;/tmp/test.txt&quot;, ELM_TEXT_FORMAT_MARKUP_UTF8);
</pre>

<p>You can also deactivate the automatic saving feature and explicitly save the content when needed:</p>

<pre class="prettyprint">
// Disable autosaving 
elm_entry_autosave_set(entry, EINA_FALSE);

// Trigger saving when needed 
elm_entry_file_save(entry);
</pre>

<h2 id="cursor">Managing the Cursor</h2>

<p>The cursor represents the current position in the entry, where the next action, for example, text insertion or deletion, is done. Usually, the cursor is represented as a blinking character, but its appearance depends on the theme configuration.</p>

<p>To manage the cursor position:</p>
<ul>
<li>Move the cursor to the beginning of the entry:
<pre class="prettyprint">
elm_entry_cursor_begin_set(entry);
</pre>
</li>

<li>Move the cursor to the end of the entry:
<pre class="prettyprint">
elm_entry_cursor_end_set(entry);
</pre>
</li>

<li>Move the cursor 1 line down or up:
<pre class="prettyprint">
elm_entry_cursor_down(entry);
elm_entry_cursor_up(entry);
</pre>
</li>
<li>Move the cursor 1 character left or right:
<pre class="prettyprint">
elm_entry_cursor_prev(entry);
elm_entry_cursor_next(entry);
</pre>
</li>

<li>Set the cursor at a specific position (15<sup>th</sup> character, for example):
<pre class="prettyprint">
elm_entry_cursor_pos_set(entry, 15);
</pre>
</li>

<li>Make a text selection while moving the cursor. 
<p>The following example starts a selection at the current cursor position, moves 5 characters right, and ends the selection:</p>

<pre class="prettyprint">
elm_entry_cursor_selection_begin(entry);

for (i = 0; i &lt; 5; i++)
{
&nbsp;&nbsp;&nbsp;elm_entry_cursor_next(entry);
}

elm_entry_cursor_selection_end(entry);
</pre></li></ul>
 
<h2 id="configure">Configuring the Entry</h2>

<p>To configure the entry functionality:</p>

<ul>
<li>
<p>Make the entry uneditable by the user.</p>
<p>By default, the user can enter text in the entry component when it is in focus.</p>

<pre class="prettyprint">
elm_entry_editable_set(entry, EINA_FALSE);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Even when the entry component is set to be uneditable by the user, you can still use the <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_append()</span> and <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_insert()</span> functions to modify its text programmatically.</td> 
    </tr> 
   </tbody> 
  </table>  
 </li>
<li>
<p>Set the password mode.</p>
<p>If the password mode is set, the entry component hides what the user is typing. In this mode, the display of any text is replaced by asterisks (*), and the entry is a single line (there is no line wrap).</p>

<pre class="prettyprint">
elm_entry_password_set(entry, EINA_TRUE);
</pre>

<p>When the password mode is enabled, the <span style="font-family: Courier New,Courier,monospace">elm_object_text_get()</span> function returns an UTF-8 string for user convenience.</p></li>
<li>
<p>Define the line mode and wrapping.</p>
<p>The entry component has 2 line modes: single and multiline:</p>
<ul>
<li>
<p>To set the entry to the single line mode:</p>
<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_TRUE);
</pre>
<p>In this mode, the text does not wrap when reaching the edge, but the entry grows horizontally instead. Pressing the <strong>Enter</strong> key in this mode generates an <span style="font-family: Courier New,Courier,monospace">activate</span> event instead of adding a new line.</p>
</li>
<li>
<p>To set the entry to the multiline mode with wrapping:</p>
<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_FALSE);
elm_entry_line_wrap_set(entry, ELM_WRAP_WORD);
</pre>
<p>In this mode, the text wraps at the end of the entry and pressing the <strong>Enter</strong> key creates a new line.</p>
<p>In multiline entries, the <span style="font-family: Courier New,Courier,monospace">elm_entry_line_wrap_set()</span> function provides a way to cut the text implicitly into a new line when it reaches the far edge of the UI component. The following wrap modes are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_NONE</span>: No wrap</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_CHAR</span>: Wrap between characters</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_WORD</span>: Wrap in allowed wrapping points (as defined in the unicode standard)</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_MIXED</span>: Word wrap, and if that fails, character wrap</li>
  </ul>
</li>
</ul></li>
</ul>



<h2 id="formatting">Modifying Formatting and Using Special Markups</h2>

<p>You can format the entry text in many ways:</p>

<ul>
<li>Format the entry text with markup elements that are defined in the theme.
<p> For example, you can use the <span style="font-family: Courier New,Courier,monospace">&lt;br&gt;</span> element to insert a line break. For a list of available markup elements, see <a href="../../../../org.tizen.native.mobile.apireference/group__Entry.html#entry-markup">Formatted text</a>.</p>
</li>

<li>Add special markups within the entry text:
  <ul>
   <li>Anchors: <span style="font-family: Courier New,Courier,monospace">&lt;a href = ..&gt;...&lt;/a&gt;</span>
   <p>The anchors generate an <span style="font-family: Courier New,Courier,monospace">anchor,clicked</span> signal when the user clicks them. The <span style="font-family: Courier New,Courier,monospace">href</span> attribute is used to identify the anchor. The anchor also reacts to the <span style="font-family: Courier New,Courier,monospace">anchor,in</span> (mouse in), <span style="font-family: Courier New,Courier,monospace">anchor,out</span> (mouse out), <span style="font-family: Courier New,Courier,monospace">anchor,down</span> (mouse down), and <span style="font-family: Courier New,Courier,monospace">anchor,up</span> (mouse up) events.</p></li>
   <li>Items: <span style="font-family: Courier New,Courier,monospace">&lt;item size = .. vsize = .. href = ..&gt;...&lt;/item&gt;</span>
   <p>The items provide a way to insert any <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> in the text. The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> name must be specified in the <span style="font-family: Courier New,Courier,monospace">href</span> attribute.</p>
   <p>The <span style="font-family: Courier New,Courier,monospace">elm_entry_item_provider_append()</span> function appends a custom item provider to the list for that entry. You can also prepend a custom item provider to the list with the <span style="font-family: Courier New,Courier,monospace">elm_entry_item_provider_prepend()</span> function. The <span style="font-family: Courier New,Courier,monospace">elm_entry_item_provider_remove()</span> function removes a custom item provider from the list.</p>

<pre class="prettyprint">
static Evas_Object 
*item_provider(void *images EINA_UNUSED, Evas_Object *en, const char *item)
{
&nbsp;&nbsp;&nbsp;Evas_Object *o = NULL;
&nbsp;&nbsp;&nbsp;char buf[1024];

&nbsp;&nbsp;&nbsp;if (!strcmp(item, &quot;itemprovider&quot;))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s/tizen.png&quot;, ICON_DIR);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o = evas_object_image_filled_add(evas_object_evas_get(en));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_file_set(o, buf, NULL);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return o;
}

Evas_Object *entry;

Entry = elm_entry_add(layout);
elm_object_text_set(entry, &quot;Item Provider&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;item size=50x50 vsize=full href=itemprovider&gt;&lt;/item&gt;&quot;);
elm_entry_item_provider_append(entry, item_provider, NULL);
</pre></li>
  </ul>
</li>
<li>Override the textblock object style.
<p>To tweak the style of the text within the entry component, you can override parts of the theme style to the textblock object using the <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_push()</span> function. The function pushes a new style on top of the user style stack that overrides the current style. Remove the style at the top of the user style stack with the <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_pop()</span> function.</p>

<pre class="prettyprint">
Evas_Object *entry;

Entry = elm_entry_add(layout);
elm_entry_text_style_user_push(entry, &quot;DEFAULT=&#39;font=Tizen:style=Light font_size=50 color=#00f align=center&#39;&quot;);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">DEFAULT</span> element sets the style properties to a default style that is applied to the complete text. For more information on style properties, such as font, font size, and color, see <a href="evas_objects_n.htm#block">Textblock Objects</a>.</p>

<p class="figure">Figure: Overriding style</p> 
<p align="center"> <img alt="Overriding style" src="../../images/entry_style.png" /> </p> 
</li>
<li>Modify the content and text parts of the default theme:
<ul>
<li>You can modify 2 content parts of the default theme: <span style="font-family: Courier New,Courier,monospace">icon</span> and <span style="font-family: Courier New,Courier,monospace">end</span>.
<p>The following example shows how to set an icon in the <span style="font-family: Courier New,Courier,monospace">end</span> content part:</p>
<pre class="prettyprint">
Evas_Object *icon;

ic = elm_icon_add(entry);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(entry, &quot;end&quot;, icon);
</pre></li>
<li>You can modify 2 text parts of the default theme: <span style="font-family: Courier New,Courier,monospace">default</span> (entry text) and <span style="font-family: Courier New,Courier,monospace">guide</span> (entry placeholder).
<p>The following example shows how to set the placeholder text to <span style="font-family: Courier New,Courier,monospace">Hello World</span>:</p>

<pre class="prettyprint">
elm_object_part_text_set(entry, &quot;guide&quot;, &quot;Hello World&quot;);
</pre></li></ul></li></ul>

<h2 id="callback">Using the Entry Callbacks</h2>

<p>To receive notifications about the entry events, listen to the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">aborted</span>: The <strong>Escape</strong> key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The <strong>Enter</strong> key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,clicked</span>: An anchor is clicked. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,down</span>: The mouse button is pressed on an anchor. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,hover,opened</span>: The anchor is clicked. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,in</span>: The mouse cursor is moved into an anchor. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,out</span>: The mouse cursor is moved out of an anchor. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,up</span>: The mouse button is released on an anchor. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">changed</span>: The text within the entry is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed,user</span>: The text within the entry is changed because of user interaction. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Edje_Entry_Change_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The entry is clicked (mouse press and release).</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The entry is double-clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,triple</span>: The entry is triple-clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed</span>: The cursor position is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed,manual</span>: The cursor position is changed manually.</li>
   <li><span style="font-family: Courier New,Courier,monospace">focused</span>: The entry receives focus. 
   <p>The <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter points to an <span style="font-family: Courier New,Courier,monospace">Elm_Focus_Info</span> object.</p></li>
   <li><span style="font-family: Courier New,Courier,monospace">unfocused</span>: The entry loses focus.</li>
   <li><span style="font-family: Courier New,Courier,monospace">language,changed</span>: The program language is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The mouse button is pressed and held for a couple of seconds.</li>
   <li><span style="font-family: Courier New,Courier,monospace">maxlength,reached</span>: The maximum length is reached.</li>
   <li><span style="font-family: Courier New,Courier,monospace">preedit,changed</span>: The preedit string is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">press</span>: The mouse button is pressed on the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">redo,request</span>: The request is redone.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,changed</span>: The current selection is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cleared</span>: The current selection is cleared.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,copy</span>: A copy of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cut</span>: A cut of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,paste</span>: A paste of the clipboard content is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,start</span>: A selection is begun and no previous selection exists.</li>
   <li><span style="font-family: Courier New,Courier,monospace">text,set,done</span>: The whole text is set to the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">theme,changed</span>: The theme is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">undo,request</span>: The request is undone.</li>
  </ul>

<p>If not mentioned separately, the <span style="font-family: Courier New,Courier,monospace">event_info</span> callback parameter in all signals is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>To register and define a callback for the <span style="font-family: Courier New,Courier,monospace">focused</span> signal:</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, focused_cb, data);
}

// Callback for the &quot;focused&quot; signal
// Called when the entry receives the focus
void 
focused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Entry focused\n&quot;);
} 
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 


<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

