<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Creating a Naviframe for Navigation</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">
	
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">	
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Creating a Naviframe for Navigation</h1>

<p>The naviframe container is useful for implementing interfaces where several screens have a previous/next relationship.</p>
<p>The following example shows how to create an application with a simple naviframe. This naviframe has 2 views (screens):</p>
<ul><li>The first view only contains a title with 2 buttons in the header area, and some text in the content area. The <strong>Prev</strong> button is used to terminate the application, and the <strong>Next</strong> button opens the second view.</li>
<li>The second view contains a title with a back button in the header area, a tabbar below the title, and some text in the content area. The back button is used to move back to the first view.</li></ul>

<p class="figure">Figure: Naviframe views</p> 
<p align="center"><img src="../../images/naviframe.png" alt="Naviframe views" /> <img src="../../images/naviframe2.png" alt="Naviframe views" /></p>


<p>To create an application with a naviframe:</p>
<ol>
<li>
<p>Create the application based on the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">BasicUIApplication</a> template in the SDK.</p>
<p>The application UI is created with the <span style="font-family: Courier New,Courier,monospace;">create_base_gui()</span> function, which calls the necessary functions to create the naviframe (<span style="font-family: Courier New,Courier,monospace;">create_naviframe()</span>), set the naviframe on the conformant (<span style="font-family: Courier New,Courier,monospace;">elm_object_content_set()</span>), and create the first view (<span style="font-family: Courier New,Courier,monospace;">first_page()</span>):</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Add the naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = create_naviframe(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Create the first view 
&nbsp;&nbsp;&nbsp;first_page(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre></li>

<li>
<p>Create the naviframe with the <span style="font-family: Courier New,Courier,monospace;">elm_naviframe_add()</span> function.</p>
<p>In Tizen 2.4, you can use the <span style="font-family: Courier New,Courier,monospace;">elm_naviframe_prev_btn_auto_pushed_set()</span> function to automatically create a back button for all views except the first. When you call this function when creating the naviframe, you do not need to manually add a back button to the second view to allow the user to return to the first view.</p> 
<pre class="prettyprint">
static Evas_Object *
create_naviframe(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *nf;
&nbsp;&nbsp;&nbsp;nf = elm_naviframe_add(parent);

&nbsp;&nbsp;&nbsp;// Add back button automatically on naviframe views when created
&nbsp;&nbsp;&nbsp;// This API cannot affect naviframe views already created
&nbsp;&nbsp;&nbsp;elm_naviframe_prev_btn_auto_pushed_set(nf, EINA_TRUE);

&nbsp;&nbsp;&nbsp;return nf;
}
</pre></li>

<li>
<p>Create the first view with the <span style="font-family: Courier New,Courier,monospace;">first_page()</span> function and push the view to show it on the screen.</p>
<p>Create 2 buttons for the view with callbacks for the <span style="font-family: Courier New,Courier,monospace;">clicked</span> event. The buttons are added on both sides of the naviframe title area. When clicked, the left <strong>Prev</strong> button terminates the application, and the right <strong>Next</strong> button pushes the second view to show it on the screen. For the content area, set a layout with simple text in it.</p>
<pre class="prettyprint">
static void
first_page(Evas_Object *nf)
{
&nbsp;&nbsp;&nbsp;Evas_Object *content, *btn;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;// Set nocontents layout
&nbsp;&nbsp;&nbsp;content = elm_layout_add(nf);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(content, &quot;layout&quot;, &quot;nocontents&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(content, &quot;elm.text&quot;, &quot;First view on Naviframe&quot;);

&nbsp;&nbsp;&nbsp;// Push the first view
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(nf, &quot;Naviframe with Button&quot;, NULL, NULL, content, NULL);

&nbsp;&nbsp;&nbsp;// Set left button on the title
&nbsp;&nbsp;&nbsp;btn = elm_button_add(nf);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;naviframe/title_left&quot;);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_left_btn&quot;, btn);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Prev&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, prev_btn_clicked_cb, nf);

&nbsp;&nbsp;&nbsp;// Set right button on the title
&nbsp;&nbsp;&nbsp;btn = elm_button_add(nf);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;naviframe/title_right&quot;);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, btn);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Next&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, second_page_cb, nf);

&nbsp;&nbsp;&nbsp;// Set a callback for when a naviframe view is popped (hidden from the screen)
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop_cb_set(nf_it, naviframe_pop_cb, nf);
}
</pre> 
</li>

<li>
<p>When the left <strong>Prev</strong> button is clicked, the <span style="font-family: Courier New,Courier,monospace;">prev_btn_clicked_cb()</span> callback pops the current view. When the view is popped, the <span style="font-family: Courier New,Courier,monospace;">naviframe_pop_cb()</span> callback is triggered with the popped item and terminates the application.</p>
<pre class="prettyprint">
// Left button click callback
static void
prev_btn_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *nf = data;
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop(nf);
}

// View pop callback
// If the callback returns EINA_FALSE, item popping is canceled and item is not deleted
static Eina_Bool
naviframe_pop_cb(void *data, Elm_Object_Item *it)
{
&nbsp;&nbsp;&nbsp;ui_app_exit();

&nbsp;&nbsp;&nbsp;// EINA_FALSE is returned, since the application is terminated anyway
&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}
</pre>
</li>

<li>
<p>When the right <strong>Next</strong> button is clicked, the <span style="font-family: Courier New,Courier,monospace;">second_page_cb()</span> callback creates the second view and pushes it to the screen.</p>

<p>Create a toolbar below the title area, and for the content area, set a layout with simple text in it. Since you used the <span style="font-family: Courier New,Courier,monospace;">elm_naviframe_prev_btn_auto_pushed_set()</span> function when creating the naviframe, a back button is automatically added to this view. When you push the view, use the <span style="font-family: Courier New,Courier,monospace;">tabbar</span> style.</p>

<pre class="prettyprint">
static void
second_page_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *content, *tabbar, *nf = data;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;// Set nocontents layout
&nbsp;&nbsp;&nbsp;content = elm_layout_add(nf);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(content, &quot;layout&quot;, &quot;nocontents&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(content, &quot;elm.text&quot;, &quot;Second view on Naviframe&quot;);

&nbsp;&nbsp;&nbsp;// Push the second view with tabbar style
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(nf, &quot;Title with tabbar&quot;, NULL, NULL, content, &quot;tabbar&quot;);

&nbsp;&nbsp;&nbsp;// Create and set a toolbar into the tabbar part
&nbsp;&nbsp;&nbsp;tabbar = create_tabbar_with_title(nf);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;tabbar&quot;, tabbar);
}
</pre>
</li>
<li>
<p>Create the toolbar and append 2 items into it using the <span style="font-family: Courier New,Courier,monospace;">create_tabbar_with_title()</span> function. When the toolbar is located under the naviframe title area, the <span style="font-family: Courier New,Courier,monospace;">tabbar_with_title</span> style can be used.</p>
<pre class="prettyprint">
static Evas_Object*
create_tabbar_with_title(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *toolbar;
&nbsp;&nbsp;&nbsp;toolbar = elm_toolbar_add(parent);
&nbsp;&nbsp;&nbsp;elm_object_style_set(toolbar, &quot;tabbar_with_title&quot;);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(toolbar, ELM_TOOLBAR_SHRINK_EXPAND);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(toolbar, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(toolbar, NULL, &quot;Tab1&quot;, NULL, parent);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(toolbar, NULL, &quot;Tab2&quot;, NULL, parent);
&nbsp;&nbsp;&nbsp;elm_toolbar_select_mode_set(toolbar, ELM_OBJECT_SELECT_MODE_ALWAYS);

&nbsp;&nbsp;&nbsp;return toolbar;
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>	

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
