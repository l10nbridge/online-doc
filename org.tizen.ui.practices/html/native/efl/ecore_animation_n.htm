<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Ecore Animations</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#finite">Starting a Finite Animation</a></li>
				<li><a href="#infinite">Starting an Infinite Animation</a></li>
				<li><a href="#chain">Starting a Delayed Animation</a></li>
				<li><a href="#pause">Pausing and Resuming Animations</a></li>
				<li><a href="#position">Using Position Mappings</a></li>
				<li><a href="#frame">Using Timers</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Ecore Animations</h1> 

<p>Ecore provides an <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> facility for animations. Ecore animators use the Ecore main loop for creating animations, running a specific action on each tick of a timer in the main loop. To create an Ecore animation, you have to determine the duration of the animation and define a callback function that performs the animation with that duration.</p>

<p>To use Ecore animators, include the <span style="font-family: Courier New,Courier,monospace;">&lt;Ecore.h&gt;</span> header file in the application. This file is included by default if you are already using the <span style="font-family: Courier New,Courier,monospace;">&lt;Elementary.h&gt;</span> header file in the application.</p>

<p>The following example illustrates a basic Ecore animation:</p>
<ul>
<li>You can declare an <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> variable to allow you to control the running of the animation with the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_freeze()</span>, <span style="font-family: Courier New,Courier,monospace;">ecore_animator_thaw()</span>, and <span style="font-family: Courier New,Courier,monospace;">ecore_animator_del()</span> functions.</li>
<li>You need a callback, which performs the actual animation. In this case, the <span style="font-family: Courier New,Courier,monospace;">_do_animation()</span> callback moves the <span style="font-family: Courier New,Courier,monospace;">my_evas_object</span> object linearly from position (0,0) to position (100,100).</li>
<li>You create the animator in the main loop, defining the animation duration as 2 seconds.</li>
<li>If the callback returns with the <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_RENEW</span> value, the animation is not automatically deleted. To delete it when no longer needed, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_del()</span> function with the <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> variable.</li>
</ul>

<pre class="prettyprint">
static Ecore_Animator *anim;

static Eina_Bool
_do_animation(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;evas_object_move(data, 100 * pos, 100 * pos);
&nbsp;&nbsp;&nbsp;// Do some more animating

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}
anim = ecore_animator_timeline_add(2, _do_animation, my_evas_object);

ecore_animator_del(anim);
</pre>


<h2 id="finite" name="finite">Starting a Finite Animation</h2>

<p>The <span style="font-family: Courier New,Courier,monospace;">ecore_animator_timeline_add()</span> function allows you to define an animator that is automatically deleted after the animation is finished:</p>
<ul>
<li><p>The first parameter is the duration of the animation in seconds. The duration is not affected by the frame rate.</p></li>
<li><p>The second parameter is the callback function that performs the actual animation.</p></li>
<li><p>The third parameter is the data passed to the callback function. This is usually the Evas object to animate.</p></li>
</ul>
<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The function returns a pointer to an <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> object, which you can use to control the animation execution.</td>
</tr>
</tbody>
</table>
<p>The following example performs a linear horizontal move of 500 pixels (from 0 to 500 on the X axis) in 8 seconds, while keeping the Y axis position unchanged:</p>
<pre class="prettyprint">
static Eina_Bool
_my_animation(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data; // Get the target object
&nbsp;&nbsp;&nbsp;int x, y, w, h; // Target object geometry
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h); // Get the current position and size
&nbsp;&nbsp;&nbsp;evas_object_move(obj, 500 * pos, y); // Linear move of the Evas object
}
// Run the animation in 8 seconds
ecore_animator_timeline_add(8, _my_animation, my_evas_object);
</pre>
<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The callback function can return <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_RENEW</span> to keep the animator running, or <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_CANCEL</span> to stop the animator and delete it automatically at any time. If the callback returns <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_CANCEL</span> (or <span style="font-family: Courier New,Courier,monospace;">0</span>), the animator is automatically deleted from the list of pointers to free up the allocated memory.
<p>The callback function receives a timeline position (second parameter) with a value between 0.0 (start) to 1.0 (end) to indicate where along the timeline the animator is running.</p></td>
</tr>
</tbody>
</table>


<h2 id="infinite" name="infinite">Starting an Infinite Animation</h2>

<p>To create an animation that runs for an unspecified amount of time, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_add()</span> function:</p>
<ul>
<li>The first parameter is the callback function that performs the actual animation.</li>
<li>The second parameter is the data passed to the callback function. This is usually the Evas object to animate.</li>
</ul>
<p>This function works the same way as the <span style="font-family: Courier New,Courier,monospace;">ecore_animation_timeline_add()</span> function, except that its interval is based on the frame rate. Using the frame rate as a basis benefits performance, especially in case of multiple animations, since it enables you to use a different timer for each callback function.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The function returns a pointer to an <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> object, which you can use to control the animation execution.</td>
</tr>
</tbody>
</table>


<p>The following example creates a rectangle sliding from left to right and back again. When the rectangle hits the edge of the screen, it changes direction.</p>

<pre class="prettyprint">
static Eina_Bool
_slide_back_and_forth(void *data)
{
&nbsp;&nbsp;&nbsp;typedef enum {LEFT, RIGHT} direction_t; // Direction datatype
&nbsp;&nbsp;&nbsp;static int x = 0; // Initial position
&nbsp;&nbsp;&nbsp;static direction_t direction = RIGHT; // Initial direction
&nbsp;&nbsp;&nbsp;if (x &gt;= 250)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direction = LEFT; // Change direction
&nbsp;&nbsp;&nbsp;else if (x &lt;= 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;direction = RIGHT; // Change direction
&nbsp;&nbsp;&nbsp;if (direction == RIGHT)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(data, ++x, 350); // Slide to right
&nbsp;&nbsp;&nbsp;else if (direction == LEFT)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(data, --x, 350); // Slide to left

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}

anim = ecore_animator_add(_slide_back_and_forth, rectangle);

if (anim != NULL)
&nbsp;&nbsp;&nbsp;ecore_animator_del(anim);
</pre>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The callback function can return <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_RENEW</span> or <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> to keep the animator running, or <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_CANCEL</span> or <span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span> to stop the animator and delete it automatically at any time.
<p>If the callback returns <span style="font-family: Courier New,Courier,monospace;">ECORE_CALLBACK_RENEW</span> or <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>, you must delete the animator manually when it is no longer needed. Use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_del()</span> function, which frees the memory allocated to the <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> object by deleting the pointer.</p>
</td>
</tr>
</tbody>
</table>

<h2 id="chain" name="chain">Starting a Delayed Animation</h2>

<p>Delaying an animation can be useful if, for example, you want to start an animation only after another one has finished.</p>
<p>To play 2 animations in a sequence, use the <span style="font-family: Courier New,Courier,monospace;">ecore_timer_add()</span> function to set a delay for the second animation that is equal to the duration of the first animation:</p>

<pre class="prettyprint">
static int runtime = 5;
static int delay = runtime;

// First animation
static Eina_Bool
_start_fold_animation(void *data)
{
&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(runtime, _fold_animation, data);

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}

// Second animation
static Eina_Bool
_start_unfold_animation(void *data)
{
&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(runtime, _unfold_animation, data);

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}

// Start the first animation
_start_fold_animation(my_evas_object);

// Start the second animation with the delay
ecore_timer_add(delay, _start_unfold_animation, my_evas_object);
</pre>

<h2 id="pause" name="pause">Pausing and Resuming Animations</h2>

<p>You can pause and resume Ecore animations:</p>
<ul>
<li>To pause a running animation, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_freeze()</span> function with the <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> variable as a parameter.
</li>
<li>
<p>To resume the paused animation, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_thaw()</span> function with the <span style="font-family: Courier New,Courier,monospace;">Ecore_Animator</span> variable as a parameter.</p>
</li>
</ul>

<p>The following example pauses an animation after 5 seconds and resumes it after 5 more seconds:</p>

<pre class="prettyprint">
static Eina_Bool
_freeze_animation(void *data)
{
&nbsp;&nbsp;&nbsp;ecore_animator_freeze(data);

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}

static Eina_Bool
_thaw_animation(void *data)
{
&nbsp;&nbsp;&nbsp;ecore_animator_thaw(data);

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}

// Start the animation
animator = ecore_animator_add(_slide_back_and_forth, rectangle);

// Pause the animation after 5 seconds
ecore_timer_add(5, _freeze_animation, animator);

// Resume the animation after 5 more seconds
ecore_timer_add(10, _thaw_animation, animator);
</pre>

<h2 id="position" name="position">Using Position Mappings</h2>

<p>Position mappings allow you to create various non-linear changes in your animation to implement the evolution of a given position in accordance with the desired effects. You can apply dynamic changes to any attribute of the Evas object, such as position, width, height, scale, angle, and color.</p>
<p>When you use the animation callback function with the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_timeline_add()</span> function, the animator passes to the callback a timeline position parameter with a value between 0.0 (start) and 1.0 (end) to indicate where along the timeline the animator is running. To create a non-linear animation, you can map the position value to one of several curves and mappings using the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_pos_map()</span> function:</p>
<ul>
<li>The first parameter is the current position value, which ranges from 0.0 to 1.0.</li>
<li>The second parameter is the position mapping you want to apply, defined with the <span style="font-family: Courier New,Courier,monospace;">_Ecore_Pos_Map</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__Ecore__Animator__Group.html#ga2db0d0f0f3973829c7f700e5af3e041c">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Animator__Group.html#ga2db0d0f0f3973829c7f700e5af3e041c">wearable</a> applications).</li>
<li>The third (<span style="font-family: Courier New,Courier,monospace;">v1</span>) and fourth (<span style="font-family: Courier New,Courier,monospace;">v2</span>) parameters are specific to the chosen position mapping, and provide additional configuration for it.</li>
</ul>

<p>The following table lists the supported position mappings, and describes how the third (<span style="font-family: Courier New,Courier,monospace;">v1</span>) and fourth (<span style="font-family: Courier New,Courier,monospace;">v2</span>) parameters of the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_pos_map()</span> function are used with each mapping.</p>

<table id="position_mappings">
<caption>Table: Position mappings</caption>
<tbody>
<tr>
	<th>Position mapping type
	<p>(<span style="font-family: Courier New,Courier,monospace;">_Ecore_Pos_Map</span> enumerator value)</p></th>
	<th>Description</th>
	<th>Parameters</th>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_LINEAR</span>
	</td>
	<td>Linear 0.0 - 1.0
	<p><img alt="Position mappings" src="../../images/pos_map_linear.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Not used
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
    </td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_ACCELERATE</span>
	</td>
	<td>Start slow, then speed up
	<p><img alt="Position mappings" src="../../images/pos_map_accelerate.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Not used
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p></td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_DECELERATE</span>
	</td>
	<td>Start fast, then slow down
	<p><img alt="Position mappings" src="../../images/pos_map_decelerate.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Not used
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
    </td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_SINUSOIDAL</span>
	</td>
	<td>Start slow, speed up, then slow down at the end
	<p><img alt="Position mappings" src="../../images/pos_map_sinusoidal.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Not used
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
	</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_BOUNCE</span></td>
	<td>Start at 0.0, then drop like a ball bouncing to the ground at 1.0, and bounce <span style="font-family: Courier New,Courier,monospace;">v2</span> times, with a decay factor of <span style="font-family: Courier New,Courier,monospace;">v1</span>
	<p><img alt="Position mappings" src="../../images/pos_map_bounce.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Bounce decay factor
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Number of bounces</p>
	</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_SPRING</span></td>
	<td>Start at 0.0, then wobble like a spring until rest position at 1.0, and wobble <span style="font-family: Courier New,Courier,monospace;">v2</span> times, with a decay factor of <span style="font-family: Courier New,Courier,monospace;">v1</span>
	<p><img alt="Position mappings" src="../../images/pos_map_spring.png" /></p></td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Wobble decay factor
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Number of wobbles</p>
	</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_ACCELERATE_FACTOR</span></td>
	<td>Start slow, then speed up</td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Power factor: 
	<ul>
	<li>0.0 is linear</li>
	<li>1.0 is standard acceleration</li>
	<li>2.0 is a much more pronounced acceleration (squared)</li>
	<li>4.0 is cubed</li>
	</ul>
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
    </td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_DECELERATE_FACTOR</span></td>
	<td>Start fast, then slow down</td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Power factor: 
	<ul>
	<li>0.0 is linear</li>
	<li>1.0 is standard deceleration</li>
	<li>2.0 is a much more pronounced deceleration (squared)</li>
	<li>3.0 is cubed</li>
	</ul>
	<p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
    </td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_SINUSOIDAL_FACTOR</span></td>
	<td>Start slow, speed up, then slow down at the end</td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Power factor: 
	<ul>
	<li>0.0 is linear</li>
	<li>1.0 is a standard sinusoidal</li>
	<li>2.1 is a much more pronounced sinusoidal (squared)</li>
	<li>3.0 is cubed</li>
	</ul>
		<p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Not used</p>
    </td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace;">ECORE_POS_MAP_DIVISOR_INTERP</span></td>
	<td>Start at gradient * <span style="font-family: Courier New,Courier,monospace;">v1</span>, interpolated using the power of the <span style="font-family: Courier New,Courier,monospace;">v2</span> curve</td>
	<td><span style="font-family: Courier New,Courier,monospace;">v1</span>: Multiplication factor for the gradient
        <p><span style="font-family: Courier New,Courier,monospace;">v2</span>: Curve value</p>
    </td>
</tr>
</tbody>
</table>


<p>The following example performs an animation where the <span style="font-family: Courier New,Courier,monospace;">my_evas_object</span> object is moved 600 pixels downwards, bouncing back 7 times over 5 seconds, each bounce diminishing by a factor of 1.8:</p>

<pre class="prettyprint">
static Eina_Bool
_my_animation_callback(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = data; // Get the target object
&nbsp;&nbsp;&nbsp;int x, y, w, h; // Target object geometry
&nbsp;&nbsp;&nbsp;double frame = pos; // Actual position variation
&nbsp;&nbsp;&nbsp;// Get the frame relative position depending on desired effect
&nbsp;&nbsp;&nbsp;// Use the ECORE_POS_MAP_BOUNCE position mapping type with 
&nbsp;&nbsp;&nbsp;// 7 bounces and the bounce decay factor of 1.8
&nbsp;&nbsp;&nbsp;frame = ecore_animator_pos_map(pos, ECORE_POS_MAP_BOUNCE, 1.8, 7);
&nbsp;&nbsp;&nbsp;// Get current object position and size attributes
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h); 
&nbsp;&nbsp;&nbsp;// Move the Evas object 600 pixels down
&nbsp;&nbsp;&nbsp;evas_object_move(obj, x, 600 * frame);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}

// Run the animation for 5 seconds
ecore_animator_timeline_add(5, _my_animation_callback, my_evas_object);
</pre>

<h2 id="frame" name="frame">Using Timers</h2>


<p>To use a timer, first define the timer source with the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_source_set()</span> function. To determine the current timer source, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_source_get()</span> function.</p>
<p>Tizen supports default and custom timer sources:</p>
<ul>
<li>
<p>The default timer, used in most cases, is <span style="font-family: Courier New,Courier,monospace;">ECORE_ANIMATOR_SOURCE_TIMER</span>. It ticks every &quot;frametime&quot; seconds and allows you to perform transitions within a predefined timeline. The timer uses the system clock to tick over every n<sup>th</sup> second, with the default being 1/30th of a second.</p>

<p>To tweak the performance, change the frametime value using the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_frametime_set()</span> function with the new frametime as the parameter.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">If the value is too small, it can cause performance issues, whereas a too high value can cause the animation to seem jerky.</td>
</tr>
</tbody>
</table>

<p>To get the current frametime value, use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_frametime_get()</span> function.</p>
</li>
<li>
<p>The custom timer is <span style="font-family: Courier New,Courier,monospace;">ECORE_ANIMATOR_SOURCE_CUSTOM</span>. It is used to match the animation to third-party events by allowing you to control when it ticks.</p>
<p>For example, the filling speed of a progress bar mainly depends on the time it takes for a task to complete and the velocity at which the remaining time estimation evolves. This kind of animation requires a custom timer.</p>

<p>To set up a custom timer:</p>
<ol>
<li>Set the time source to a custom timer.</li>
<li>Trigger a tick over one frame using the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_custom_tick()</span> function.</li>
</ol>

<p>The following example creates a custom timer for a progress bar that is refreshed every time some progress occurs:</p>

<pre class="prettyprint">
ecore_animator_source_set(ECORE_ANIMATOR_SOURCE_CUSTOM);

void 
_on_progress_update()
{
&nbsp;&nbsp;&nbsp;// Called when some progress occurs
&nbsp;&nbsp;&nbsp;ecore_animator_custom_tick(); // Tick (next frame in progress bar animation)
}</pre>

<p>To drive the timer based on an input tick source (such as another application using the IPC or a vertical blanking interrupt), you can use the <span style="font-family: Courier New,Courier,monospace;">ecore_animator_custom_source_tick_begin_callback_set()</span> and <span style="font-family: Courier New,Courier,monospace;">ecore_animator_custom_source_tick_end_callback_set()</span> functions. These functions define callbacks that are called when the tick starts and ends, allowing you to set the functions to start and stop the ticking source.</p>
</li>
  </ul>
  
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>