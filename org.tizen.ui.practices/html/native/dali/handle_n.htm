<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Handle/Body Pattern: Basic Way of Using DALi Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1BaseHandle.html">Dali::BaseHandle API for Mobile Native</a></li>	
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Handle/Body Pattern: Basic Way of Using DALi Objects</h1>

<p>DALi widely adopts the handle/body pattern (also known as the pimpl pattern), which separates the implementation details (body class) from its interface (handle class).</p>

<p>The <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1BaseHandle.html">Dali::BaseHandle</a> is a base class for handle classes in DALi. It additionally provides smart-pointer semantics, which manage internal objects with reference counts. Most of the classes in the DALi public API are handle classes, which means they inherit from the <span style="font-family: Courier New,Courier,monospace;">Dali::BaseHandle</span> class.</p>

<p>The handle/body pattern structure is beneficial for both DALi users and developers:</p>
<ul>
	<li><strong>Easier memory management</strong>
	<p>Each internal implementation class (body class) contains a single reference count object, which can be initialized with the static &quot;New&quot; functions in the DALi public API. This means that C++ new/delete operators do not have to be used in your code. (The internal body classes inherit from the <span style="font-family: Courier New,Courier,monospace;">Dali::BaseObject</span> class, but you do not need to use this class directly.)</p>
	</li>
	<li><strong>Better encapsulation</strong>
	<p>The danger of API/ABI breaks is reduced, since the implementation of a class can be changed without modifying the public API, thus without recompiling code using the public API. This can also reduce the build time.</p>
	</li>
</ul>

<p>The following examples show how to use the handles:</p>
<ul>

<li>No need to call destructors:
<pre class="prettyprint">
class HandleTest
{
&nbsp;&nbsp;HandleTest()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;mActor = Actor::New();
&nbsp;&nbsp;}

&nbsp;&nbsp;~HandleTest() {} // Actor object is destroyed automatically

&nbsp;&nbsp;Actor mActor;
};
</pre>
</li>

<li>Can be stored in STL containers:
<pre class="prettyprint">
class HandleTest
{
&nbsp;&nbsp;HandleTest()
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;mActors.push_back( Actor::New() );
&nbsp;&nbsp;&nbsp;&nbsp;mActors.push_back( Actor::New() );
&nbsp;&nbsp;}

&nbsp;&nbsp;~HandleTest() {} // Actors are destroyed automatically

&nbsp;&nbsp;std::vector&lt;Actor&gt; mActors;
};
</pre>
</li>

<li>Passing by value is encouraged:
<pre class="prettyprint">
void SomeFunction( Actor actor )
{
&nbsp;&nbsp;if( actor )
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;actor.SomeMethod();
&nbsp;&nbsp;}
}
</pre>
</li>

<li>Validity check:
<pre class="prettyprint">
{
&nbsp;&nbsp;Actor actor;  // Create a NULL object

&nbsp;&nbsp;// At this stage, you cannot call any of the Actor functions
&nbsp;&nbsp;if( !actor ) // This test passes, since the actor is NULL
&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;actor = Actor::New();
&nbsp;&nbsp;}
}
</pre>
</li>

<li>Equality operators:
<pre class="prettyprint">
{
&nbsp;&nbsp;Actor handle1;
&nbsp;&nbsp;Actor handle2;
&nbsp;&nbsp;cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // &quot;true&quot;, both handles are empty

&nbsp;&nbsp;handle2 = Actor::New();
&nbsp;&nbsp;cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // &quot;false&quot;, one handle is empty

&nbsp;&nbsp;handle1 = Actor::New();
&nbsp;&nbsp;cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // &quot;false&quot;, handles to different objects

&nbsp;&nbsp;handle1 = handle2;
&nbsp;&nbsp;cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // &quot;true&quot;, handles to same object
}
</pre>
</li>

<li>Reference counting examples:
<pre class="prettyprint">
class AnimationTest
{
&nbsp;&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;Animation mAnimation; // Animation handle
};

void AnimationTest::Initialize()
{
&nbsp;&nbsp;mAnimation = Animation::New( 10.0f ); // Reference count is 1, the animation object stays alive when the function returns
}

void AnimationTest::SetAnimation( Animation anim )
{
&nbsp;&nbsp;mAnimation = anim; // Reference count of the original animation decreased, &#39;anim&#39; is referenced instead
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If nobody else had a reference on the initial animation, the object is destroyed
}
</pre>

<pre class="prettyprint">
// At this point, you own a Dali::Actor named &quot;container&quot;
// Enter a code block
{
&nbsp;&nbsp;// Create an text label
&nbsp;&nbsp;TextLabel actor = TextLabel::New( &quot;test&quot; );
&nbsp;&nbsp;// Add the text label to a container
&nbsp;&nbsp;container.Add( actor );
}
// Exit the code block
// At this stage, the text label is still alive
// You do not keep the handle to the text label, but it can be retrieved from the container
</pre>
</li>
</ul>


    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

