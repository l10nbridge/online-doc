<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Buttons: Push, Check, Select!</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#PushButton">PushButton</a></li>
			<li><a href="#CheckBoxButton">CheckBoxButton</a></li>
			<li><a href="#RadioButton">RadioButton</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Buttons: Push, Check, Select!</h1>

<p>A button is a small object on the UI that you press in order to operate it. DALi provides button controls, such as <span style="font-family: Courier New,Courier,monospace;">PushButton</span>, <span style="font-family: Courier New,Courier,monospace;">CheckBoxButton</span>, and <span style="font-family: Courier New,Courier,monospace;">RadioButton</span>. The base class for the button controls is <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Button</span>. The <span style="font-family: Courier New,Courier,monospace;">Button</span> class provides the <span style="font-family: Courier New,Courier,monospace;">disabled</span> property and the <span style="font-family: Courier New,Courier,monospace;">clicked</span> signal. The following table lists the basic signals provided by the <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Button</span> class.</p>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Button</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signal</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">PressedSignal()</span></td>
		<td>Emitted when the button is pressed.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ReleasedSignal()</span></td>
		<td>Emitted when the button is released.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ClickedSignal()</span></td>
		<td>Emitted when the button is clicked.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">StateChangedSignal()</span></td>
		<td>Emitted when the button state is changed.
		</td>
	</tr>
   </tbody>
  </table>

<h2 id="PushButton" name="PushButton">PushButton</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::PushButton</span> class provides a button that can be pressed to operate it. A push button changes its appearance when is pressed and returns to its original appearance when is released.</p>

<p class="figure">Figure: PushButton</p>  
	<p align="center"><img alt="PushButton" src="../../images/push_button.png"/></p> 

<p>A push button emits a <span style="font-family: Courier New,Courier,monospace;">Button::PressedSignal()</span> signal when the button is pressed, a <span style="font-family: Courier New,Courier,monospace;">Button::ClickedSignal()</span> signal when clicked, and a <span style="font-family: Courier New,Courier,monospace;">Button::ReleasedSignal()</span> signal when released or the touch point leaves the boundary of the button. The following code shows an example of a basic push button:</p>

<pre class="prettyprint">
// This sample code is for the HelloWorldExample class
// in <a href="dali_overview_n.htm#create">Creating a DALi Application</a>
void HelloWorldExample::Create( Application&amp; application )
{
&nbsp;&nbsp;PushButton button = PushButton::New();
&nbsp;&nbsp;button.SetParentOrigin( ParentOrigin::CENTER );
&nbsp;&nbsp;button.SetLabelText( &quot;Press&quot; );
&nbsp;&nbsp;Stage::GetCurrent().Add( button );

&nbsp;&nbsp;// Connect to button signals emitted by the button
&nbsp;&nbsp;button.ClickedSignal().Connect( this, &amp;HelloWorldExample::OnButtonClicked );
&nbsp;&nbsp;button.PressedSignal().Connect( this, &amp;HelloWorldExample::OnButtonPressed );
&nbsp;&nbsp;button.ReleasedSignal().Connect( this, &amp;HelloWorldExample::OnButtonReleased );
}

bool HelloWorldExample::OnButtonClicked( Button button )
{
&nbsp;&nbsp;// Do something when the button is clicked

&nbsp;&nbsp;return true;
} 

bool HelloWorldExample::OnButtonPressed( Button button )
{
&nbsp;&nbsp;// Do something when the button is pressed

&nbsp;&nbsp;return true;
}

bool HelloWorldExample::OnButtonReleased( Button button )
{
&nbsp;&nbsp;// Do something when the button is released

&nbsp;&nbsp;return true;
}
</pre>


<h2 id="CheckBoxButton" name="CheckBoxButton">CheckBoxButton</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::CheckBoxButton</span> class provides a check box button, which can be checked or unchecked.</p>

<p class="figure">Figure: CheckBoxButton</p>  
	<p align="center"><img alt="CheckBoxButton" src="../../images/checkbox_button.png"/></p> 

<p>A checkbox button emits all 4 button input signals, but usually you can just use the <span style="font-family: Courier New,Courier,monospace;">Button::StateChangedSignal()</span> signal to be notified when the button changes its state to selected or unselected. The following code shows an example of a basic checkbox button:</p>

<pre class="prettyprint">
// This sample code is for the HelloWorldExample class
// in <a href="dali_overview_n.htm#create">Creating a DALi Application</a>
void HelloWorldExample::Create( Application&amp; application )
{
&nbsp;&nbsp;CheckBoxButton button = CheckBoxButton::New();
&nbsp;&nbsp;button.SetParentOrigin( ParentOrigin::CENTER );
&nbsp;&nbsp;button.SetLabelText( &quot;Check&quot; );
&nbsp;&nbsp;button.SetSize( 200, 40 );
&nbsp;&nbsp;button.SetBackgroundColor( Color::WHITE );
&nbsp;&nbsp;Stage::GetCurrent().Add( button );

&nbsp;&nbsp;// Connect to a button signal emitted by the button
&nbsp;&nbsp;button.StateChangedSignal().Connect( this, &amp;HelloWorldExample::OnButtonStateChanged );
}

bool HelloWorldExample::OnButtonStateChanged( Button button )
{
&nbsp;&nbsp;// Do something when the button state is changed
&nbsp;&nbsp;// You can get the state using button.IsSelected() call

&nbsp;&nbsp;return true;
}
</pre>

<h2 id="RadioButton" name="RadioButton">RadioButton</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::RadioButton</span> class provides a radio button with 2 states: selected and unselected.</p>

<p class="figure">Figure: RadioButton</p>  
	<p align="center"><img alt="RadioButton" src="../../images/radio_button.png"/></p> 

<p>Usually, radio buttons are grouped. Two or more radio buttons are in the same group when they have the same parent. In each group, only 1 radio button can be selected at a given time. You can use the <span style="font-family: Courier New,Courier,monospace;">Button::StateChangedSignal()</span> signal to check which radio button is selected. The following code shows an example of a basic radio button:</p>

<pre class="prettyprint">
// This sample code is for the HelloWorldExample class
// in <a href="dali_overview_n.htm#create">Creating a DALi Application</a>
void HelloWorldExample::Create( Application&amp; application )
{
&nbsp;&nbsp;Actor radioGroup = Actor::New();
&nbsp;&nbsp;radioGroup.SetParentOrigin( ParentOrigin::CENTER );
&nbsp;&nbsp;Stage::GetCurrent().Add( radioGroup );

&nbsp;&nbsp;RadioButton button1 = RadioButton::New();
&nbsp;&nbsp;button1.SetLabelText( &quot;button1&quot; );
&nbsp;&nbsp;button1.SetBackgroundColor( Color::WHITE );
&nbsp;&nbsp;button1.SetPosition( 0, -40 );
&nbsp;&nbsp;radioGroup.Add( button1 );

&nbsp;&nbsp;RadioButton button2 = RadioButton::New();
&nbsp;&nbsp;button2.SetLabelText( &quot;button2&quot; );
&nbsp;&nbsp;button2.SetBackgroundColor( Color::WHITE );
&nbsp;&nbsp;button2.SetPosition( 0, 40 );
&nbsp;&nbsp;radioGroup.Add( button2 );

&nbsp;&nbsp;// Connect a single callback to button signals emitted by both button1 and button2
&nbsp;&nbsp;button1.StateChangedSignal().Connect( this, &amp;HelloWorldExample::OnButtonStateChanged );
&nbsp;&nbsp;button2.StateChangedSignal().Connect( this, &amp;HelloWorldExample::OnButtonStateChanged );
}

bool HelloWorldExample::OnButtonStateChanged( Toolkit::Button button )
{
&nbsp;&nbsp;// Do something when the two buttons&#39; states are changed
&nbsp;&nbsp;// button parameter can be both button1 and button2
&nbsp;&nbsp;// You can use button.GetLabelText() and button.IsSelected() 
&nbsp;&nbsp;// to know which button is selected

&nbsp;&nbsp;return true;
}
</pre>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

