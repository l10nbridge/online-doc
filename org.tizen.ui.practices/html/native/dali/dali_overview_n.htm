<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>DALi Overview: Getting Started with DALi UI Programming</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#dali">Dali Fundamentals</a></li>
			<li><a href="#create">Creating a DALi Application</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__dali.html">DALi API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__dali.html">DALi API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>DALi Overview: Getting Started with DALi UI Programming</h1>

<p>Dynamic Animation Library (DALi) internally defines a virtual 3D world (space) and maintains hierarchical objects in the 3D world. The hierarchical object tree is known as the <a href="http://en.wikipedia.org/wiki/Scene_graph" target="_blank">scene graph</a>. A node in the scene graph can have several children but often only a single parent, with the effect of a parent applied to all its child nodes; an operation performed on a group automatically propagates its effect to all of its members.</p>
<p>There are various types of nodes, such as image, text, and buttons.</p>

<h2 id="dali" name="dali">DALi Fundamentals</h2>

<p>Before starting UI programming with DALi, familiarize yourself with the basic concepts.</p>

<h3>Actor and Stage</h3>

<p>Actor is the primary object for interaction in DALi applications. Actors are effective nodes that receive input (such as touch events) and act as a container for drawable elements and other actors. A DALi application uses a hierarchy of actor objects to position visible content. An actor inherits a position relative to its parent, and can be moved relative to this point. UI components can be built by combining multiple actors.</p>
<p>Stage is a top-level node of the scene graph used for displaying a tree of actors. To display an actor, add it to the stage.</p>

<h3>Signal and Slot</h3>

<p><a href="http://doc.qt.io/qt-5/signalsandslots.html" target="_blank">Signals and slots</a> are used in the QT GUI library for communication between objects. Objects can send signals containing event information, which can be received by other objects using special functions known as slots. The DALi event system follows the signal and slot mechanism.</p>

<p>Signal events are emitted when a certain action or event occurs. The application can connect to these signals. Standard C-style functions can be used to connect to these signals if no local data needs to be accessed, otherwise a class function can also be connected.</p>
<p>Applications can manually disconnect from signals when required. However, DALi also provides safe signal disconnection. This means that when the connecting object is deleted, the signal is automatically disconnected.</p>

<h3 id="coordinate" name="coordinate">Coordinate System</h3>

<p>DALi uses a left-handed coordinate system with the origin at the top-left corner, with positive X to right, positive Y going downwards, and positive Z going outside the screen with the default camera. This is convenient when creating 2D views.</p>

<p>The stage has a 2D size that matches the size of the application window. The default unit 1 is 1 pixel with the default camera.</p>

<p class="figure">Figure: DALi coordinate system</p>
    <p align="center"><img alt="DALi coordinate system" src="../../images/actor_coordinates.png"/></p>

<h3>Camera</h3>

<p>DALi has a concept of a camera to display its virtual 3D world to a 2D screen. There are 2 ways of using the camera in DALi:</p>
<ul>
	<li>For <strong>2D</strong> applications, you do not need to care about the camera at all. The default camera is already best suited for 2D applications (configured to have the origin of the coordinate system at the top-left corner of the screen, and unit 1 as 1 pixel of the screen). This is a typical way.</li>
	<li>For <strong>3D</strong> applications, you can change the view by manipulating the camera. You can translate or rotate the camera in this case. Note that the top-left corner of the screen and unit 1 no longer are (0,0,0) and 1 pixel after manipulating the camera.</li>
</ul>


<h3>DALi Modules</h3>

<p>DALi consists of the following modules:</p>

<ul>
<li><strong>DALi Core</strong>
<p>This module provides core functionalities, such as scene graph-based rendering, animation, and event handling. It is a base module and forms the biggest part of DALi. </p>
</li>
<li><strong>DALi Adaptor</strong>
<p>This module is a platform adaptation layer. It initializes and sets up DALi appropriately and provides many platform-related services with its internal module, platform abstraction. Several signals can be connected to it to keep you informed when certain platform-related activities occur.
</p></li>
<li><strong>DALi Toolkit</strong>
<p>This module provides UI components and various effects on top of the DALi core.</p></li>
</ul>
<p class="figure">Figure: Layout diagram for DALi modules</p>
<p align="center"><img alt="Layout diagram for DALi modules" src="../../images/dali_modules.png" /></p>

<h2 id="create" name="create">Creating a DALi Application</h2>

<p>To create a &#39;Hello World&#39; application with Dali:</p>
<ol>
<li><strong>Create a DALi project:</strong>
<ol type="a">
<li>In the Tizen IDE menu, go to <strong>File &gt; New &gt; Tizen Native Project</strong>.
<p>Select <strong>Template - Basic DALi Application</strong>, press <strong>Finish</strong>, and your project is created at the default location. If you want to change the location, uncheck <strong>Use default location</strong> and set a new location. For more information, see <a href="../../../../org.tizen.gettingstarted/html/native/process/app_dev_process_n.htm#creating">Creating the Application Project</a>.</p>

<p align="center"><img alt="Create a DALi project" src="../../images/tizen_project_dali.png" /></p>
</li>
<li>The new project is shown in the <strong>Project Explorer</strong> view of the IDE. If you open the <span style="font-family: Courier New,Courier,monospace;">src/basicdaliapplication.cpp</span> file, you can see the source code of the basic DALi application:
<pre class="prettyprint">
#include &lt;dali-toolkit/dali-toolkit.h&gt;

using namespace Dali;
using namespace Dali::Toolkit;

// This example shows how to create and display Hello World using a simple TextLabel

class HelloWorldExample : public ConnectionTracker
{
&nbsp;&nbsp;public:

&nbsp;&nbsp;&nbsp;&nbsp;HelloWorldExample( Application&amp; application )
&nbsp;&nbsp;&nbsp;&nbsp;: mApplication( application )
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Connect to the application&#39;s init signal
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.InitSignal().Connect( this, &amp;HelloWorldExample::Create );
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;~HelloWorldExample()
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Nothing to do here
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;// Init signal is received once (only) during the application lifetime
&nbsp;&nbsp;&nbsp;&nbsp;void Create( Application&amp; application )
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get a handle to the stage
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stage stage = Stage::GetCurrent();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.SetBackgroundColor( Color::WHITE );

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextLabel textLabel = TextLabel::New( &quot;Hello World&quot; );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textLabel.SetAnchorPoint( AnchorPoint::TOP_LEFT );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textLabel.SetName( &quot;hello-world-label&quot; );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.Add( textLabel );

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Connect to touch and key event signals
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.GetRootLayer().TouchedSignal().Connect( this, &amp;HelloWorldExample::OnTouch );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.KeyEventSignal().Connect( this, &amp;HelloWorldExample::OnKeyEvent );
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;bool OnTouch( Actor actor, const TouchEvent&amp; event )
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Quit the application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.Quit();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;void OnKeyEvent( const KeyEvent&amp; event )
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( event.state == KeyEvent::Down )
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if( IsKey( event, DALI_KEY_ESCAPE ) || IsKey( event, DALI_KEY_BACK ) )
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.Quit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;private:
&nbsp;&nbsp;&nbsp;&nbsp;Application&amp; mApplication;
};


// Entry point for DALi applications
int main( int argc, char **argv )
{
&nbsp;&nbsp;Application application = Application::New( &amp;argc, &amp;argv );
&nbsp;&nbsp;HelloWorldExample test( application );
&nbsp;&nbsp;application.MainLoop();

&nbsp;&nbsp;return 0;
}
</pre>
</li>
</ol>
</li>
<li><strong>Initialize the DALi application:</strong>

<ul><li>
<p>To use the DALi APIs, you only need to include the <span style="font-family: Courier New,Courier,monospace;">dali-toolkit.h</span> file. It includes the header files of DALi Core and DALi Adaptor as well as DALi Toolkit.</p>

<pre class="prettyprint">
#include &lt;dali-toolkit/dali-toolkit.h&gt;
</pre>
<p>Using the following 2 using-directives can be convenient, because all DALi APIs are contained in either the <span style="font-family: Courier New,Courier,monospace;">Dali</span> or <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit</span> namespace:</p>
<pre class="prettyprint">
using namespace Dali;
using namespace Dali::Toolkit;
</pre>
<p>Other code samples in the Tizen DALi documentation assume they already have those directives.</p>
</li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Application.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Application.html">wearable</a> applications) initializes and sets up DALi.</p>

<p>Create a <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> instance:</p>

<pre class="prettyprint">
Application application = Application::New( &amp;argc, &amp;argv );
</pre></li>
<li>  
<p>Several signals can be connected to keep you informed when certain platform-related activities occur, and ensure that, upon system events, DALi is called in a thread-safe manner.</p>
<p>To manage signal connection safely, DALi provides the <span style="font-family: Courier New,Courier,monospace;">Dali::ConnectionTracker</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1ConnectionTracker.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1ConnectionTracker.html">wearable</a> applications). A typical way for starting a DALi application is to create a class derived from the <span style="font-family: Courier New,Courier,monospace;">Dali::ConnectionTracker</span> class and use its member functions as callback functions for DALi signals (for more information, see <a href="event_handling_n.htm#automatic">Automatic Connection Management</a>). The <span style="font-family: Courier New,Courier,monospace;">HelloWorldExample</span> class is used in other code samples in the Tizen DALi documentation.</p>  

<p>After getting the initialized signal from the <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> instance, you can use the DALi APIs for building the scene graph. Connect the <span style="font-family: Courier New,Courier,monospace;">HelloWorldExample::Create()</span> callback to the <span style="font-family: Courier New,Courier,monospace;">DALi::Application::InitSignal()</span> function:</p>

<pre class="prettyprint">
mApplication.InitSignal().Connect( this, &amp;HelloWorldExample::Create );
</pre></li></ul>

</li>
<li><strong>Create an actor and add it to the stage:</strong>

<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::TextLabel</span> UI component (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1TextLabel.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1TextLabel.html">wearable</a> applications) renders a short text string. To display the <span style="font-family: Courier New,Courier,monospace;">TextLabel</span> component, add it to a stage. The <span style="font-family: Courier New,Courier,monospace;">stage</span> instance is a singleton object (the only instance of its class during the lifetime of the program), so you can get it using a static function.</p>

<pre class="prettyprint">
Stage stage = Stage::GetCurrent();
stage.SetBackgroundColor( Color::WHITE );

TextLabel textLabel = TextLabel::New( &quot;Hello World&quot; );
textLabel.SetAnchorPoint( AnchorPoint::TOP_LEFT );
textLabel.SetName( &quot;hello-world-label&quot; );
stage.Add( textLabel );
</pre>

<p>The above code additionally sets the background color of the <span style="font-family: Courier New,Courier,monospace;">stage</span> and the anchor point, a point defining a position of a child actor from its parent, of the <span style="font-family: Courier New,Courier,monospace;">textLabel</span>. The application stores the actor and resource handles. DALi objects are reference-counted, which makes sure they exist only as long as they are needed. Even if the <span style="font-family: Courier New,Courier,monospace;">TextLabel</span> component is removed from the stage, it remains alive through the reference.</p>

</li>
<li><strong>Connect to input signals:</strong>

<p>The application can handle touch and key event signals as follows:</p>
<pre class="prettyprint">
stage.GetRootLayer().TouchedSignal().Connect( this, &amp;HelloWorldExample::OnTouch );
stage.KeyEventSignal().Connect( this, &amp;HelloWorldExample::OnKeyEvent );
</pre>
<p>Any key inputs and touches on the stage are handled by 2 callback functions, <span style="font-family: Courier New,Courier,monospace;">HelloWorldExample::OnKeyEvent</span> and <span style="font-family: Courier New,Courier,monospace;">HelloWorldExample::OnTouch</span>.</p>
</li>
 
<li><strong>Start the application main loop:</strong>

<p>To run the application, start its main loop. This ensures that images are displayed, and events as well as signals are dispatched and captured.</p>
<pre class="prettyprint">
application.MainLoop();
</pre>


</li>
<li><strong>Build the DALi application:</strong>

<p>To build your application, select <strong>Project &gt; Build Project</strong> or press <strong>F10</strong> in the IDE.</p>
<p>The Tizen IDE automatically packages the project after building. Note that you need to register your certificate when building for the first time. For more information, see <a href="../../../../org.tizen.devtools/html/common_tools/certificate_registration.htm">Certificate Registration</a> and <a href="../../../../org.tizen.gettingstarted/html/native/process/building_app_n.htm">Building Applications</a>.</p>

</li>
<li><strong>Run the DALi application:</strong>

<p>To run your application, select <strong>Run &gt; Run</strong> or press <strong>Ctrl+F11</strong> in the IDE.</p>
 <p>For more information, see <a href="../../../../org.tizen.gettingstarted/html/native/process/running_app_n.htm">Running Applications</a>.</p>
</li></ol> 

<p>The following figure illustrates the basic DALi application running on a Tizen emulator.</p>
 <p class="figure">Figure: Basic DALi application</p>
<p align="center"><img alt="Basic DALi application" src="../../images/hello_world_dali.png" /></p>

    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

