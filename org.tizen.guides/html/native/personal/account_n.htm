<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Account Management</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 3.0 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#provider">Account Providers</a></li>
			<li><a href="#appcontrol">Account Application Control</a></li>			
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#add">Creating and Managing an Account</a></li>
			<li>Information retrieval
				<ul class="toc">
					<li><a href="#get">Getting Account Information</a></li>
					<li><a href="#retrieve">Retrieving Accounts by Package Name</a></li>
					<li><a href="#capability">Retrieving Account Providers by Capability</a></li>
				</ul>
			</li>
			<li><a href="#remove">Removing an Account</a></li>
			<li><a href="#screen">Adding an Application on the Account Screen</a></li>
			<li><a href="#queries">Performing Database Queries</a></li>
			<li><a href="#secret">Managing Account Secrecy</a></li>
			<li><a href="#update">Updating Accounts</a></li>
			<li><a href="#type">Retrieving Account Types</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">Account Manager API for Wearable Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Account/SampleAccount" target="_blank">SampleAccount Sample Description</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">


  <h1>Account Management</h1>

 <p>An account is a collection of information representing the user of a specific provider.</p> 
 
  <p>The main features of the Account Manager API include:
</p> 
  <ul> 
   <li><a href="#add">Creating and managing accounts</a>
   <p>You can also <a href="#secret">manage the account secrecy level</a> and <a href="#remove">remove accounts</a>.</p></li> 
   <li><a href="#get">Retrieving account information</a>
   <p>You can also get accounts based on a <a href="#retrieve">specific account provider package name</a>, or account providers based on a <a href="#capability">specific capability</a>.</p></li>
   <li>Receiving account change notifications</li> 
  </ul> 
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To add, update, or remove an account, you must <a href="#provider">register your account provider</a> for all your applications belonging to the same package.</td> 
    </tr> 
   </tbody> 
  </table>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the account functionality</a>.</p>
  
  <p>The <span style="font-family: Courier New,Courier,monospace">account.h</span> header file handles account-related information. The following table lists the account properties that can be modified. You can <a href="#queries">query the account details</a> with database queries, <a href="#type">retrieve the account type</a>, and <a href="#update">update the account information</a>.</p> 
  <table id="account_properties" border="1"> 
   <caption>
     Table: Account properties 
   </caption> 
   <tbody> 
    <tr> 
     <th>Account property</th> 
     <th>Data type</th> 
	 <th>Mandatory</th>
	 <th>Description</th> 
    </tr> 
    <tr> 
     <td>User name</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	 <td>Yes</td>
     <td>Identity of an account.
         <p>If the display name and email address are not set for an account, the user name is shown for the account on the Accounts screen in the Setting application.</p>
        </td>
    </tr>
    <tr>
     <td>Display name</td>
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	 <td>No</td>
     <td>Display name of an account.
	 <p>Display name is shown for the account on the Accounts screen in the Setting application.</p>
        </td>
    </tr>
    <tr>
     <td>Email address</td>
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
     <td>No</td>
	 <td>Email address of an account.
         <p>If the display name is not set for an account, the email address is shown for the account on the Accounts screen in the Setting application.</p>
        </td>
    </tr>
       <tr>
     <td>Package name</td>
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
     <td>No</td>
	 <td>One of an account package IDs, like the app ID.
         <p>If the package name is not set for an account, the app ID is used as a package name.</p>
        </td>
   </tr>
       <tr>
     <td>Icon path</td>
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	  <td>No</td>
     <td>Icon path of an account.
         <p>The icon is shown through the registered icon path as an account icon on the Accounts screen in the Setting application.</p>
        </td>
    </tr>
       <tr>
     <td>Domain name</td>
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	  <td>No</td>
     <td>Domain name of an account.
        </td>
    </tr>  
       <tr>
     <td>Access token</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	  <td>No</td>
     <td>Access token of an account.
        </td>
    </tr>  
       <tr>
     <td>Auth type</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">Integer</span></td>
	  <td>No</td>
     <td>Authentication type, such as oauth or xauth.
        </td>
    </tr>  
       <tr>
     <td>Capability</td> 
	 <td>Key-value <span style="font-family: Courier New,Courier,monospace">string</span>-<span style="font-family: Courier New,Courier,monospace">integer</span> pairs</td>
	  <td>No</td>
     <td>Capability of an account.
       </td> 
    </tr>  
       <tr>
     <td>Secret</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">Integer</span></td>
	  <td>No</td>
     <td>The secret value is used to decide whether the account is shown on the Accounts screen in the Setting application.
        </td>
    </tr>  
       <tr>
     <td>Sync support</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">Integer</span></td>
	  <td>No</td>
     <td>Current synchronization status.</td>
    </tr>
       <tr>
     <td>Source</td> 
     <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	  <td>No</td>
       <td>Source of an account.
        </td>
    </tr>
       <tr>
     <td>User text</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">String</span></td>
	  <td>No</td>
     <td>String array which you can use freely.
        </td>
    </tr>  
       <tr>
     <td>User int</td> 
	 <td><span style="font-family: Courier New,Courier,monospace">Integer</span></td>
	  <td>No</td>
     <td>Integer array which you can use freely.
        </td> 
    </tr>
       <tr>
     <td>Custom</td> 
	 <td>Key-value <span style="font-family: Courier New,Courier,monospace">string</span> pairs</td>
	  <td>No</td>
     <td>Key-value pairs which you can use freely.
        </td>
    </tr>
   </tbody> 
  </table> 
    
<h2 id="provider" name="provider">Account Providers</h2> 
  <p>Account providers, such as Google and Facebook, represent specific service provider-related information or protocol that provides the user accounts. To add, update, or remove accounts, you must register a specific account provider in your application.</p> 
  <p>To register an account provider, define the account provider information in the <strong>Account</strong> tab of the manifest editor, as described in the following table, and implement the <a href="#appcontrol">account application control</a>.</p> 
  <table border="1"> 
   <caption>
     Table: Account provider properties 
   </caption> 
   <tbody> 
    <tr> 
     <th>Account property</th> 
     <th>Data type</th> 
	 <th>Mandatory</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td>Multiple accounts support</td> 
     <td><span style="font-family: Courier New,Courier,monospace">bool</span> </td> 
	 <td>Yes</td>
     <td>Indicates whether multiple accounts are supported.</td> 
    </tr> 
    <tr> 
     <td>Icon</td> 
     <td><span style="font-family: Courier New,Courier,monospace">String</span></td> 
	 <td>Yes</td>
     <td>File path of the account provider icon.
	 <p>The icon size is:</p>
	 <ul>
		<li>72 x 72 for Xhigh (HD)</li>
		<li>48 x 48 for High (WVGA)</li>
	 </ul>
	 <p>Since the icon is used in <strong>Settings &gt; Accounts</strong>, place the icon in a shared directory.</p></td> 
    </tr> 
    <tr> 
     <td>Small icon</td> 
     <td><span style="font-family: Courier New,Courier,monospace">String</span></td> 
	 <td>Yes</td>
     <td>File path of the account provider icon.
	 <p>The icon size is:</p>
	 <ul>
		<li>45 x 45 for Xhigh (HD)</li>
		<li>30 x 30 for High (WVGA)</li>
	 </ul>
	 <p>Since the small icon is used in other applications, place the icon in a shared directory.</p></td> 
    </tr> 
    <tr> 
     <td>Display name</td> 
     <td><span style="font-family: Courier New,Courier,monospace">String</span></td> 
	 <td>Yes</td>
     <td>Display name of the account provider.</td> 
    </tr> 
    <tr> 
     <td>Capabilities</td> 
     <td><span style="font-family: Courier New,Courier,monospace">String</span></td> 
	 <td>No</td>
     <td>Capability of the account provider.
         <p>Capability can be a liaison between an account application and another application. If an account application registers a capability in the manifest file, other applications know that the account application has the capability. And if an account application gives an account a capability, other applications know that the account has the capability.</p>
         <p>Several service-specific capabilities are defined for the Account Manager in Tizen:</p>

      <ul>
       <li>Contact capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_CONTACT or &quot;http://tizen.org/account/capability/contact&quot;</span></p>
           <p>If you register this capability in the manifest file, the user using the contact application can see a list of accounts with the account of your service in the contact application.</p>
          </li> 
       <li>Calendar capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_CALENDAR or &quot;http://tizen.org/account/capability/calendar&quot;</span></p>
           <p>If you register this capability in the manifest file, the user using the calendar application can see a list of accounts with the account of your service in the calendar application.</p>
          </li>
       <li>Email capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_EMAIL or &quot;http://tizen.org/account/capability/email&quot;</span></p>
          </li>
       <li>Photo capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_PHOTO or &quot;http://tizen.org/account/capability/photo&quot;</span></p>
          </li>
       <li>Video capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_VIDEO or &quot;http://tizen.org/account/capability/video&quot;</span></p>
          </li>
       <li>Music capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_MUSIC or &quot;http://tizen.org/account/capability/music&quot;</span></p>
          </li>
       <li>Document capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_DOCUMENT or &quot;http://tizen.org/account/capability/document&quot;</span></p>
          </li>
       <li>Message capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_MESSAGE or &quot;http://tizen.org/account/capability/message&quot;</span></p>
          </li>
       <li>Game capability:
	   <p><span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_GAME or &quot;http://tizen.org/account/capability/game&quot;</span></p>
          </li>
</ul>	  
       </td> 
    </tr> 
   </tbody> 
  </table> 
  
  <p>If the application has defined the account provider information and implements the appcontrol for the account provider, the account provider is automatically registered when the application is installed.</p>   
  
<h2 id="appcontrol" name="appcontrol">Account Application Control</h2> 
  <p>The account application control, which allows the user to add and configure accounts, must be implemented in all applications that define an account provider. You are not required to define the application control information in the <strong>Application Control</strong> tab of the manifest editor to <a href="#screen">add the application on the <strong>Account</strong> screen</a>.</p> 
  
  <p>This application control supports the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/add</span> and <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/configure</span> operations.</p> 
 
  <h3 id="signin" name="signin">ACCOUNT_OPERATION_SIGNIN Operation</h3>
  <p>The <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/add</span> operation enables the user to add a new account for a specific account provider. With the operation, the login page for the specific account provider can be displayed. In <strong>Settings &gt; Accounts</strong>, if the account provider is clicked for adding a new account, this operation is launched.</p>

  <p>You have to define the <span style="font-family: Courier New,Courier,monospace">app_control_cb()</span> callback and register it to <span style="font-family: Courier New,Courier,monospace">ui_app_lifecycle_callback::app_control</span>.</p>
  
  <p>The results of the operation are returned in the <span style="font-family: Courier New,Courier,monospace">app_control_get_operation()</span> event handler.</p> 
  <p>The following table shows the <span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_SIGNIN</span> (<span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/add</span>) operation.</p> 
  <table border="1"> 
   <caption>
     Table: ACCOUNT_OPERATION_SIGNIN operation 
   </caption> 
 
    <tbody>
    <tr>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Operation</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_SIGNIN</span></td>
     <td>Account ID of the added account.</td>
    </tr>
   </tbody>

  </table> 
  <h3 id="CONFIG" name="CONFIG">ACCOUNT_OPERATION_VIEW Operation</h3>
  <p>The <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/configure</span> operation enables the user to set account information, such as synchronization settings. The delete button must be included for removing accounts.</p> 
  <p>In <strong>Settings &gt; Accounts</strong>, if the specific account is clicked for setting the account information, this operation is launched.</p>
  <p> You have to define the <span style="font-family: Courier New,Courier,monospace">app_control_cb()</span> callback and register it to <span style="font-family: Courier New,Courier,monospace">ui_app_lifecycle_callback::app_control</span>. </p>
  <p>The results of the operation are returned in the <span style="font-family: Courier New,Courier,monospace">app_control_get_operation()</span> event handler.</p>
  <p>The following table shows the <span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_VIEW</span> (<span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/account/configure</span>) operation.</p>
  
  <table border="1"> 
   <caption>
     Table: ACCOUNT_OPERATION_VIEW operation 
   </caption> 
    <tbody>
    <tr>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Operation</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_VIEW</span></td>
     <td>Account ID for setting account information.</td>
    </tr>
   </tbody>

  </table> 	  
 
<h2>Warm-up</h2>
<p>Become familiar with the Account Manager API basics by learning about:</p>
<ul>
		<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the account management functionality.</p></li>
		<li><a href="#add">Creating and Managing an Account</a>
		<p>Create an account, set its properties, and insert it to the database.</p></li>
		<li>Information retrieval
		<ul>
		<li><a href="#get">Getting Account Information</a>
		<p>Retrieve information for each existing account and implement a callback function.</p></li>
		<li><a href="#retrieve">Retrieving Accounts by Package Name</a>
		<p>Retrieve accounts based on a specific package.</p></li>
		<li><a href="#capability">Retrieving Account Providers by Capability</a>
		<p>Retrieve account providers based on a specific capability.</p></li>
		</ul>
		</li>
		<li><a href="#remove">Removing an Account</a>
		<p>Remove an account from the database.</p></li>
		<li><a href="#screen">Adding an Application on the Account Screen</a>
		<p>Display your application on the Add account screen of a Tizen device.</p>
		</li>
	</ul>
	
<h2>Follow-up</h2>
<p>Once we have learned the basics of the Account Manager API, we can now move on to more advanced tasks, including:</p>
<ul>
		<li><a href="#queries">Performing Database Queries</a>
		<p>Manage accounts and query them based on various attributes.</p></li>
		<li><a href="#secret">Managing Account Secrecy</a>
		<p>Manage account secrecy levels.</p></li>
		<li><a href="#update">Updating Accounts</a>
		<p>Update account details.</p></li>
		<li><a href="#type">Retrieving Account Types</a>
		<p>Retrieve account types.</p></li>
		
</ul>

<h2 id="prerequisites">Prerequisites</h2>
<p>To enable your application to use the account management functionality:</p>
<ol>
<li>
<p>To use the Account Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">wearable</a> applications), the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/account.read&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/account.write&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
</li>
<li> <p>To use the functions and data types of the Account Manager API, include the <span style="font-family: Courier New,Courier,monospace">&lt;account.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;account.h&gt;
</pre>
<p>To ensure that an Account Manager function has been executed properly, make sure that the return is equal to <span style="font-family: Courier New,Courier,monospace;">ACCOUNT_ERROR_NONE</span>.</p>
</li>
<li><p>Declare the necessary global variables, including the account handle:</p>
 
<pre class="prettyprint">
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
#include &lt;dlog.h&gt;

/* Account handle */
static account_h account = NULL;
static int account_id = 0;
int ret = 0;
</pre>
<p>When you no longer need it, destroy the account handle with the <span style="font-family: Courier New,Courier,monospace;">account_destroy()</span> function:</p>
<pre class="prettyprint">
ret = account_destroy(account);
</pre>
</li>
</ol>


 <h2 id="add" name="add">Creating and Managing an Account</h2>

<p>To create an account, set its properties, and add it to the account database:</p>


<ol>

<li>Create an account using the <span style="font-family: Courier New,Courier,monospace;">account_create()</span> function and the previously defined account handle:

<pre class="prettyprint">
ret = account_create(&amp;account);
</pre>
</li>
<li>When the account is created, you can set account properties, such as name, display name, domain name, and email address:

<pre class="prettyprint">
char* account_name = &quot;Marcus&quot;;
char* display_name = &quot;Marcus_display&quot;;
char* domain_name = &quot;Marcus_domain&quot;;
char* email_address = &quot;marcus@example.com&quot;;
char* image_path = &quot;image_path&quot;;

ret = account_set_user_name(account, account_name);

ret = account_set_display_name(account, display_name);

ret = account_set_domain_name(account, domain_name);

ret = account_set_email_address(account, email_address);

ret = account_set_icon_path(account, image_path);
</pre>
</li>

<li>When the account is configured, use the <span style="font-family: Courier New,Courier,monospace;">account_insert_to_db()</span> function to insert the account to the account database. Use the account ID as the second parameter (<span style="font-family: Courier New,Courier,monospace;">account_id</span>):

<pre class="prettyprint">
ret = account_insert_to_db(account, &amp;account_id);
</pre>
</li>
</ol>

 <h2 id="get" name="get">Getting Account Information</h2>

<p>To get account information, such as user name, display name, domain name, and email address:</p>

<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace;">account_get_total_count_from_db()</span> function to get the total number of inserted records.
<p>To get individual records, use the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function, which iterates through all the records and invokes a callback function for each account.</p>
 
<pre class="prettyprint">
int total_count = -1;
ret = account_get_total_count_from_db(&amp;total_count);

ret = account_foreach_account_from_db(on_account_read, NULL);
</pre>
</li>

<li>Define the callback function for the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function to retrieve information for each account.

<p>To get more details, use the <span style="font-family: Courier New,Courier,monospace;">account_get_account_id()</span>, <span style="font-family: Courier New,Courier,monospace;">account_get_user_name()</span>, <span style="font-family: Courier New,Courier,monospace;">account_get_display_name()</span>, and <span style="font-family: Courier New,Courier,monospace;">account_get_icon_path()</span> functions:</p>

<pre class="prettyprint">
static bool
on_account_read(account_h account, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *icon_path = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;/* Get the account ID */
&nbsp;&nbsp;&nbsp;&nbsp;ret = account_get_account_id(account, &amp;account_id);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;/* Get the user name */
&nbsp;&nbsp;&nbsp;&nbsp;ret = account_get_user_name(account, &amp;name);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;name: %s&quot;, name);
&nbsp;&nbsp;&nbsp;&nbsp;/* Get the display name */
&nbsp;&nbsp;&nbsp;&nbsp;ret = account_get_display_name(account, &amp;display_name);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;display_name: %s&quot;, display_name);
&nbsp;&nbsp;&nbsp;&nbsp;/* Get the icon path */
&nbsp;&nbsp;&nbsp;&nbsp;ret = account_get_icon_path(account, &amp;icon_path);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != ACCOUNT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;icon_path: %s&quot;, icon_path);

&nbsp;&nbsp;&nbsp;&nbsp;free(name);
&nbsp;&nbsp;&nbsp;&nbsp;free(display_name);
&nbsp;&nbsp;&nbsp;&nbsp;free(icon_path);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

 <h2 id="retrieve" name="retrieve">Retrieving Accounts by Package Name</h2>

 <p>To retrieve accounts by a specific account provider:</p>
  <ol>
   <li>Define the <span style="font-family: Courier New,Courier,monospace">account_cb()</span> callback for getting account data:
<pre class="prettyprint">
static bool
account_callback(account_h account, void* user_data) /* account_cb() callback */
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Called once for each account in the database */
}
</pre></li>
   <li>Retrieve the accounts of a specific account provider using the <span style="font-family: Courier New,Courier,monospace">account_query_account_by_package_name()</span> function, and specifying the callback for getting account data and the package name of the account provider:
<pre class="prettyprint">
int ret = -1;
char* package_name = &quot;package_name&quot;;
ret = account_query_account_by_package_name(account_callback, package_name, NULL);
</pre></li>
  </ol>

 <h2 id="capability" name="capability">Retrieving Account Providers by Capability</h2>

 <p>To retrieve account providers by a specific capability:</p>
  <ol>
   <li>Define the <span style="font-family: Courier New,Courier,monospace">account_type_cb()</span> callback for getting account providers:
<pre class="prettyprint">
static bool
account_type_callback(account_type_h account_type, void* user_data) /* account_type_cb() callback */
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Called once for each account type in the database */
}
</pre>
</li>
   
   <li>Retrieve the account providers of a specific capability by using the <span style="font-family: Courier New,Courier,monospace">account_type_query_by_provider_feature()</span> function, and specifying the callback for getting account providers:
<pre class="prettyprint">
int ret = -1;
char* capability = &quot;http://tizen.org/account/capability/contact&quot;;

ret = account_type_create(&amp;account_type);

account_type_query_by_provider_feature(account_type_callback, capability, NULL);
</pre></li>
  </ol>

 <h2 id="remove" name="remove">Removing an Account</h2>

<p>To remove an account, use the <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_id()</span>, <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_user_name()</span>, or <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_package_name()</span> function. They all remove a given account record.</p>

 <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">To get the ID needed as a parameter of the <span style="font-family: Courier New,Courier,monospace;">account_delete_from_db_by_id()</span> function, use the <span style="font-family: Courier New,Courier,monospace;">account_get_account_id()</span> function.</td>
    </tr>
   </tbody>
  </table>

<pre class="prettyprint">
ret = account_delete_from_db_by_id(account_id);
</pre>

 <h2 id="screen" name="screen">Adding an Application on the Account Screen</h2>

<p>To add your application on the Add account screen of the device:</p>

<ol>
<li>Add the required information in the manifest file:
<pre class="prettyprint">
&lt;account&gt;
&nbsp;&nbsp;&nbsp;&lt;account-provider appid=&quot;app-id name&quot; providerid=&quot;url style string&quot; multiple-accounts-support=&quot;true or false&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;icon section=&quot;account&quot;&gt;application icon name&lt;/icon&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;icon section=&quot;account-small&quot;&gt;application small icon name&lt;/icon&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;Application name&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;en-gb&quot;&gt;Application name&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label xml:lang=&quot;ko-kr&quot;&gt;ߖȃخŉL݇ Lا&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;capability&gt;http://tizen.org/account/capability/contact&lt;/capability&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;capability&gt;http://tizen.org/account/capability/calendar&lt;/capability&gt;
&nbsp;&nbsp;&nbsp;&lt;/account-provider&gt;
&lt;/account&gt;
</pre>

<p>The required information includes:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">appid=&quot;app-id name&quot;</span>
<p>Application ID (for example, <span style="font-family: Courier New,Courier,monospace">appid=&quot;org.tizen.account&quot;</span>).</p></li>
<li><span style="font-family: Courier New,Courier,monospace">providerid=&quot;url style string&quot;</span>
<p>Provider identification string (for example, <span style="font-family: Courier New,Courier,monospace">providerid=&quot;http://www.tizen.org&quot;</span>).</p></li>
<li><span style="font-family: Courier New,Courier,monospace">multiple-accounts-support=&quot;true or false&quot;</span>
<p>Multiple account support (if your application can manage 2 or more accounts, set to <span style="font-family: Courier New,Courier,monospace">true</span>; otherwise set to <span style="font-family: Courier New,Courier,monospace">false</span>)</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;icon section=&quot;account&quot;&gt;application icon name&lt;/icon&gt;</span>
<p>Icon displayed on the Add account screen.</p>
<p>The icon size must be 72 x 72 px and the icon file must be in the <span style="font-family: Courier New,Courier,monospace">{app-root}\shared\res\</span> directory.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;icon section=&quot;account-small&quot;&gt;application small icon name&lt;/icon&gt;</span>
<p>Small icon displayed on the Other application screen to represent the account provider.</p>
<p>The small icon file must be in the <span style="font-family: Courier New,Courier,monospace">{app-root}\shared\res\</span> directory.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;label xml:lang=&quot;en-gb&quot;&gt;Application name&lt;/label&gt;</span>
<p>Application name displayed on the Add account screen, according to the selected language.</p>
<p>An account provider must have at least one label tag.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">&lt;capability&gt;http://tizen.org/account/capability/contact&lt;/capability&gt;</span>
<p>For more information, see <a href="#provider">Account Providers</a>.</p></li></ul>
</li>

<li>Create the sign-in screen UI. 
<p>When the user selects your application on the Add account screen, the Account Service launches your application with a specific operation ID (<span style="font-family: Courier New,Courier,monospace">ACCOUNT_OPERATION_SIGNIN</span>) defined in the <span style="font-family: Courier New,Courier,monospace">account-types.h</span> header file, so the sign-in screen must be displayed.</p> 
  <p align="center"><img alt="Sign-in screen" src="../../images/account_signin.png" /></p> 
</li>
</ol>


<h2 id="queries" name="queries">Performing Database Queries</h2>

<p>To perform database queries:</p>


<ol>
<li>Prepare sample content. 
<p>To perform queries, you need existing content in the database. To access the existing account, obtain it from the database. This can be done using a few functions, depending on the user requirements.</p>
<p>To create new content to the database:</p>

<ol type="a"><li><p>The <span style="font-family: Courier New,Courier,monospace;">Create_Account()</span> function creates a new account from a given <span style="font-family: Courier New,Courier,monospace;">account_h</span> handle and account details (name, display name, domain, email). 3 capabilities are added to the account to demonstrate some of the query functions. The capabilities as well as user custom types can be predefined.</p>

<p>After the account is created, it is added to the database. When no longer needed, destroy the account handle using the <span style="font-family: Courier New,Courier,monospace;">account_destroy(account)</span> function.</p>

<pre class="prettyprint">
int id[3];
static account_h account = NULL;

Create_Account(&amp;account, &quot;Person&quot;, &quot;DiplayPerson&quot;, &quot;Person Domain&quot;, &quot;someone1@somewho.com&quot;);

account_set_capability(account, &quot;Custom&quot;, ACCOUNT_CAPABILITY_ENABLED);

account_set_capability(account, &quot;Next&quot;, ACCOUNT_CAPABILITY_ENABLED);

account_set_capability(account, &quot;Another&quot;, ACCOUNT_CAPABILITY_DISABLED);

account_insert_to_db(account, &amp;id[0]);

account_destroy(account);
</pre></li>

<li><p>Add 3 more accounts to the database:</p>

<pre class="prettyprint">
Create_Account(&amp;account, &quot;PersonX&quot;, &quot;DisplayX&quot;, &quot;Other Domain&quot;, &quot;someone2@somewho.com&quot;);
account_insert_to_db(account, &amp;id[1]);

account_destroy(account);

Create_Account(&amp;account, &quot;Human&quot;, &quot;Humanity&quot;, &quot;Everyone&quot;, &quot;someone3@somewho.com&quot;);
account_insert_to_db(account, &amp;id[2]);

account_destroy(account);

Create_Account(&amp;account, &quot;LastOne&quot;, &quot;LastDisplay&quot;, &quot;Last Domain&quot;, &quot;someone4@somewho.com&quot;);
account_insert_to_db(account, &amp;id[3]);

account_destroy(account);
</pre>
</li>

<li><a href="#add">Create an account</a>.

<pre class="prettyprint">
static int
Create_Account(account_h* account, char* account_name, char* display_name, char* domain_name, char* email_address)
{
&nbsp;&nbsp;&nbsp;&nbsp;account_create(account);

&nbsp;&nbsp;&nbsp;&nbsp;account_set_user_name(*account, account_name);

&nbsp;&nbsp;&nbsp;&nbsp;account_set_display_name(*account, display_name);

&nbsp;&nbsp;&nbsp;&nbsp;account_set_domain_name(*account, domain_name);

&nbsp;&nbsp;&nbsp;&nbsp;account_set_email_address(*account, email_address);
}
</pre></li></ol>
</li>

<li>List the accounts:
<ol type="a"><li>
<p>List all accounts to verify the database insertion:</p>

<pre class="prettyprint">
struct Account_Records {
&nbsp;&nbsp;&nbsp;&nbsp;int count;
&nbsp;&nbsp;&nbsp;&nbsp;int tab[100];
};

struct Account_Records rec;

List_Accounts(&amp;rec);
</pre></li>

<li><p>If the account list is not empty (<span style="font-family: Courier New,Courier,monospace;">NULL</span>), the <span style="font-family: Courier New,Courier,monospace;">List_Accounts()</span> function counts all records in the database. Obtain the records using the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function.</p>

<pre class="prettyprint">
static void
List_Accounts(struct Account_Records* rec)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (rec != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rec-&gt;count = 0;
&nbsp;&nbsp;&nbsp;&nbsp;account_foreach_account_from_db(on_account_read, rec);
}
</pre></li>

<li><p>Call the <span style="font-family: Courier New,Courier,monospace;">on_account_read()</span> callback function for each found record. If the second parameter (<span style="font-family: Courier New,Courier,monospace;">user_data</span>) is not <span style="font-family: Courier New,Courier,monospace;">NULL</span>, the function is counting the existing accounts. String data returned by the <span style="font-family: Courier New,Courier,monospace;">account_get_xxx()</span> functions must be released with the <span style="font-family: Courier New,Courier,monospace;">free()</span> function. Data prepared with the <span style="font-family: Courier New,Courier,monospace;">sprintf()</span> function can, for example, be sent to <span style="font-family: Courier New,Courier,monospace;">stdout</span>.</p>

<pre class="prettyprint">
static bool
on_account_read(account_h account, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int account_id = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;struct Account_Records * rec = (struct Account_Records *)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;char buf[100];

&nbsp;&nbsp;&nbsp;&nbsp;account_get_account_id(account, &amp;account_id);

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;MyCallback ID: %d\n&quot;, account_id);

&nbsp;&nbsp;&nbsp;&nbsp;if (user_data != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rec-&gt;tab[rec-&gt;count++] = account_id;
&nbsp;&nbsp;&nbsp;&nbsp;account_get_user_name(account, &amp;name);
&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;MyCallback Name: %s\n&quot;, name);

&nbsp;&nbsp;&nbsp;&nbsp;free(name);

&nbsp;&nbsp;&nbsp;&nbsp;account_get_display_name(account, &amp;display_name);
&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;MyCallback Disp.: %s\n&quot;, display_name);

&nbsp;&nbsp;&nbsp;&nbsp;free(display_name);

&nbsp;&nbsp;&nbsp;&nbsp;return 0;
}
</pre></li></ol>
</li>
<li>Query the account by its ID with the <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_account_id()</span> function. This function requires an existing handle to an account as an input parameter.

<pre class="prettyprint">
for (i = 0; i &lt; rec.count; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;account_create(&amp;account);
&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_account_id(rec.tab[i], &amp;account);

&nbsp;&nbsp;&nbsp;&nbsp;Show_Account(account);

&nbsp;&nbsp;&nbsp;&nbsp;account_destroy(account);
}
</pre>
</li>

<li>Show the account:

<pre class="prettyprint">
static int
Show_Account(account_h acc)
{
&nbsp;&nbsp;&nbsp;&nbsp;int account_id = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *display_name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char buf[100];

&nbsp;&nbsp;&nbsp;&nbsp;account_get_account_id(acc, &amp;account_id);

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Show_Account ID: %d\n&quot;, account_id);

&nbsp;&nbsp;&nbsp;&nbsp;account_get_user_name(acc, &amp;name);

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Show_Account Name: %s\n&quot;, name);

&nbsp;&nbsp;&nbsp;&nbsp;free(name);

&nbsp;&nbsp;&nbsp;&nbsp;account_get_display_name(acc, &amp;display_name);

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Show_Account Disp.: %s\n&quot;, display_name);

&nbsp;&nbsp;&nbsp;&nbsp;free(display_name);

&nbsp;&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Query the account by various attributes:
<ul><li>Query by user name.
<p>Querying data by user name requires a valid user name and callback function. In this example, the same callback is used as in the <span style="font-family: Courier New,Courier,monospace;">account_foreach_account_from_db()</span> function, but it is cast without the third parameter (user data).</p>

<pre class="prettyprint">
account_query_account_by_user_name(on_account_read, &quot;Human&quot;, NULL);
</pre>
</li>

<li>Query by package name.
<p>By default, the accounts created in the application context have a package name set to the application name. Change it using the <span style="font-family: Courier New,Courier,monospace;">account_set_package_name()</span> function. To list accounts by package name, the user can provide a name by themselves or obtain it with the <span style="font-family: Courier New,Courier,monospace;">account_get_package_name()</span> function.</p>

<p>The <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_package_name()</span> function requires a callback function and a package name. In addition, the user data can be passed to the callback function as a third parameter.</p>
 
<p>The package name has to be released when no longer needed.</p>

<pre class="prettyprint">
char* package_name;
account_get_package_name(account, &amp;package_name);
account_query_account_by_package_name(on_account_read, package_name, NULL);
free(package_name);
</pre>
</li>

<li>Query by capability.
<p>The following function allows the user to find all accounts with a specified capability on a specified state. Once again, the callback function is required.</p>

<pre class="prettyprint">
account_query_account_by_capability(on_account_read, &quot;Custom&quot;, ACCOUNT_CAPABILITY_ENABLED, NULL);
</pre>
</li>

<li>Query by capability type.
<p>This function is similar to the <span style="font-family: Courier New,Courier,monospace;">account_query_account_by_capability()</span> function, but returns all accounts with a specified capability, without checking their state.</p>

<pre class="prettyprint">
account_query_account_by_capability_type(on_account_read, &quot;Next&quot;, NULL);
</pre>
</li>

<li>Query capability by account ID.
<p>The <span style="font-family: Courier New,Courier,monospace;">account_query_capability_by_account_id()</span> function is different from the previous functions. It lists all capabilities from an account with a specified ID, and requires a different type of callback. The callback function prepares data to be sent to an output.</p>

<pre class="prettyprint">
account_query_capability_by_account_id(_capability_cb, id[0], NULL);

static bool
_capability_cb(const char *capability_type, account_capability_state_e capability_state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char buf[200];
&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Found capability: %s on state %d\n&quot;, capability_type, capability_state);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li></ul></li>

<li>Destroy all account handles when they are no longer needed:

<pre class="prettyprint">
account_destroy(account);
</pre>
</li>
</ol>

 <h2 id="secret" name="secret">Managing Account Secrecy</h2>

<p>To manage account secrecy:</p>
<ol>
<li>Select the secrecy level using the <span style="font-family: Courier New,Courier,monospace;">account_secrecy_state_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html#ga41a7e7e7cfb072d0b0ba37087a0535b6">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html#ga41a7e7e7cfb072d0b0ba37087a0535b6">wearable</a> applications):

<pre class="prettyprint">
static
account_h account = NULL;
account_secrecy_state_e secret;

char buf[200];
int ret;
int id;

/* Account 1 */
Create_Account(&amp;account, &quot;Security 1&quot;, &quot;Invalid&quot;, &quot;NOBODY&quot;, &quot;anony@mous.not&quot;);

account_set_secret(account, ACCOUNT_SECRECY_INVALID);

account_get_secret(account, &amp;secret);

account_insert_to_db(account, &amp;id);

sprintf(buf, &quot;Account 1 secret: %d\n&quot;, secret);

account_destroy(account);

/* Account 2 */

Create_Account(&amp;account, &quot;Security 2&quot;, &quot;Invisible&quot;, &quot; NOBODY&quot;, &quot;anony1@mous.not&quot;);

account_set_secret(account, ACCOUNT_SECRECY_INVISIBLE);

account_get_secret(account, &amp;secret);

account_insert_to_db(account, &amp;id);

sprintf(buf, &quot;Account 2 secret: %d\n&quot;, secret);

account_destroy(account);

/* Account 3 */

Create_Account(&amp;account, &quot;Secret 3&quot;, &quot;Visible&quot;, &quot; NOBODY&quot;, &quot;anony2@mous.not&quot;);

ret = account_set_secret(account, ACCOUNT_SECRECY_VISIBLE);

ret = account_get_secret(account, &amp;secret);

ret = account_insert_to_db(account, &amp;id);

sprintf(buf, &quot;Account 3 secret: %d\n&quot;, secret);

account_destroy(account);

List_Accounts(NULL);
</pre>

<p>Secrecy is only linked with the visibility on the account settings screen. The account is still visible and can be accessed using a query or a <span style="font-family: Courier New,Courier,monospace;">foreach</span> function. For further information on how to add your application to the account screen, see <a href="#screen">Adding an Application on the Account Screen</a>.</p>

<pre class="prettyprint">
/* List_Account() console output */
MyCallback ID: 12
MyCallback Name: Security 1
MyCallback Disp.: Invalid
-------------------
MyCallback ID: 13
MyCallback Name: Security 2
MyCallback Disp.: Invisible
-------------------
MyCallback ID: 14
MyCallback Name: Secret 3
MyCallback Disp.: Visible
</pre>
</li>

<li>Destroy all account handles when they are no longer needed:

<pre class="prettyprint">
account_destroy(account);
</pre>
</li>
</ol>

 <h2 id="update" name="update">Updating Accounts</h2>

<p>To update and track account data:</p>

<ol>
<li>Subscribe notifications to track account changes. Create an <span style="font-family: Courier New,Courier,monospace;">account_subscribe_h</span> instance and register a notification.

<pre class="prettyprint">
account_subscribe_h account_subscribe;

account_subscribe_create(&amp;account_subscribe);

account_subscribe_notification(account_subscribe, _account_event_cb, NULL);
</pre>
</li>

<li>Create an account. Accounts are created and then their handles are destroyed. The package name is obtained from the second account.

<pre class="prettyprint">
Create_Account(&amp;account, &quot;Updater&quot;, &quot;Updated?&quot;, &quot;ToUpdate&quot;, &quot;not.up@to.date&quot;);
account_insert_to_db(account, &amp;id);

Show_Account(account);
account_destroy(account);

Create_Account(&amp;account, &quot;Another&quot;, &quot;Updated?&quot;, &quot;ToUpdate&quot;, &quot;not.up@to.date&quot;);
account_insert_to_db(account, &amp;id);

account_get_package_name(account, &amp;package_name);
sprintf(buf, &quot;Package_name: %s\n&quot;, package_name);

Show_Account(account);
account_destroy(account);
</pre>
</li>

<li>Update the account:
<ul><li><p>To update an account by its ID:</p>
<ol type="a">
<li>Create a handle to the account.</li>
<li>Get the account from the database (by ID).</li>
<li>Make the necessary changes.</li>
<li>Update the account using the account handle and a valid ID.</li>
<li>Destroy the account handle.</li>
</ol>

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
account_set_display_name(account, &quot;Updated!&quot;);
account_update_to_db_by_id(account, id);
account_destroy(account);
</pre>
</li>

<li>To update an account by its user name:
<ol type="a">
<li>Create a handle to the account.</li>
<li>Get the account from the database (by ID).</li>
<li>Make the necessary changes.</li>
<li>Update the account using the account handle, a valid user name, and a package name. There can be accounts with the same user names in different packages.</li>
<li>Destroy the account handle.</li>
</ol>

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
account_set_display_name(account, &quot;Updated!&quot;);
account_update_to_db_by_user_name(account, &quot;Another&quot;, package_name);
account_destroy(account);
</pre></li></ul>
</li>

<li>Create the account event callback. When any action is taking place on any account when a notification is subscribed, a callback function is invoked. The callback function provides in its parameters the event type as a string, the ID of the account associated with the actual change, and, additionally, the user data registered while subscribing the notification.

<pre class="prettyprint">
bool
_account_event_cb(const char *event_type, int account_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;ACCOUNT EVENT: %s, %d\n&quot;, event_type, account_id);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Show the accounts to verify the updates:

<pre class="prettyprint">
account_create(&amp;account);
account_query_account_by_account_id(id, &amp;account);
Show_Account(account);
account_destroy(account);
</pre>
</li>

<li>Unsubscribe the notification when no longer needed:

<pre class="prettyprint">
account_unsubscribe_notification(account_subscribe);
</pre>
</li>
</ol>

 <h2 id="type" name="type">Retrieving Account Types</h2>

<p>To retrieve account types:</p>

<ol>
<li>Create a handle to operate on the account type:

<pre class="prettyprint">
account_type_h account_type;

account_type_create(&amp;account_type);
</pre>
</li>

<li>Get the type information. 
<p>If the account type with a specified ID exists, you can get it from the database with the <span style="font-family: Courier New,Courier,monospace;">account_query_by_app_id()</span> function.</p>

<p>It is possible to set, for example:</p>
<ul>
<li>ID</li>
<li>Labels</li>
<li>Features</li>
<li>Multiple account support (this is only a flag)</li>
</ul>

<p>To get the account types by the application ID, use the <span style="font-family: Courier New,Courier,monospace;">account_type_query_by_app_id()</span> function:</p>

<pre class="prettyprint">
int multiple_account_support = -1;
char *your_app_id = &quot;com.tizen.example&quot;; /* App ID for retrieving account types */
char *app_id = NULL;
char *provider_feature = NULL;
char *icon_path = NULL;

if (account_type_query_app_id_exist(your_app_id)) {
&nbsp;&nbsp;&nbsp;&nbsp;account_type_query_by_app_id(your_app_id, &amp;account_type);

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_app_id(account_type, &amp;app_id);

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_multiple_account_support(account_type, &amp;multiple_account_support);

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_icon_path(account_type, &amp;icon_path);

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_provider_feature(account_type, &amp;provider_feature);
}
</pre>
</li>

<li>List the account types or all the labels from a specified type with a proper callback function:

<pre class="prettyprint">
account_type_foreach_account_type_from_db(_account_type_cb, NULL);

account_type_query_label_by_app_id(_account_label_cb, type_id, NULL);
</pre>

<p>While listing the labels, the user has access to the ID of the account type, label and its local value, and the user data passed while casting the query function.</p>

<pre class="prettyprint">
bool
_account_label_cb(char *app_id, char *label, char *locale, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Get Label ID: %s LABEL: %s LOCALE %s\n&quot;, app_id, label, locale);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The account type callback has access to the account type and user data.</p>

<pre class="prettyprint">
bool
_account_type_cb(account_type_h account_type, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char * id;
&nbsp;&nbsp;&nbsp;&nbsp;int support;
&nbsp;&nbsp;&nbsp;&nbsp;char buf[200];

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_app_id(account_type, &amp;id);

&nbsp;&nbsp;&nbsp;&nbsp;account_type_get_multiple_account_support(account_type, &amp;support);
&nbsp;&nbsp;&nbsp;&nbsp;sprintf(buf, &quot;Account Type ID: %s Multiple support %d:\n&quot;, id, support);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Clean up and destroy the allocated handles:

<pre class="prettyprint">
free(app_id);
free(provider_feature);
free(icon_path);

account_type_destroy(account_type);
</pre>
</li>
</ol>  

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>
<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>