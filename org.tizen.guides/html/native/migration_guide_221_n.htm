<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Migration Guide from 2.2.1 to 2.3</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#model_comp">Application Model Comparison</a></li>
			<li><a href="#app_life_cycle">Application Life-cycle</a></li>
			<li><a href="#package_manag">Package Management</a></li>
			<li><a href="#launch">Application Launch and Termination</a></li>
			<li><a href="#ui">UI and Service Applications</a></li>
			<li><a href="#io">I/O Overview</a></li>
			<li><a href="#object">Object Ownership Policy</a></li>
			<li><a href="#low">Low Memory Level Events</a></li>
			<li><a href="#scene">Scene Transitions</a></li>
			<li><a href="#keys">Hardware Keys</a></li>
			<li><a href="#ex">Exceptions</a></li>
			<li><a href="#logs">Logs</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Migration Guide from 2.2.1 to 2.3</h1> 

<p>The Tizen 2.3 release comes with a new version of the native API, created to give you a possibility to make fast and lightweight native applications. It replaces the native API used in the previous versions of Tizen (2.2.1). Combined with the Enlightenment Foundation libraries (EFL), the new native API provides powerful tools to create fantastic applications for Tizen.</p> 

<p>This feature is supported in mobile applications only.</p>

<p>The purpose of this guide is to allow all the current Tizen application developers to port their current 2.2.1 native API-based applications to the new 2.3 native API as simply and quickly as possible. This guide contains basic guides on how to port your 2.2.1 native API application to the 2.3 native API. To fully understand the new API, familiarize yourself with the specifications and tutorials. This guide helps you to understand the main differences and start porting your applications.</p>
<p>For information about the differences between each module of the 2.2.1 and 2.3 version APIs, see <a href="api_comparison_n.htm">API Comparison</a>.</p>

<h2 id="model_comp" name="model_comp">Application Model Comparison</h2>

<p>The new API&#39;s application model is very similar to the one from the older version, so it is easy to adopt it.</p>
<p>The new 2.3 native API as well as the 2.2.1 version both support UI and service applications. UI applications have a graphical user interface, while service applications do not. Also, packaging applications follows same rules in both APIs. Only 1 UI application is allowed in one package.  Applications in a package follow the same installation cycle but they have their own life-cycles. Each application in the package can be identified by its own ID. Applications can communicate with each other using the message port.</p>
<p>Multitasking in Tizen 2.3 works in a similar way as in Tizen 2.2.1, so only 1 application can work in the foreground. The rest are in a PAUSED state, so they are not visible for the user. Since service applications do not have a UI, they all run in the background the whole time.</p>

<p>Different scenarios for switching between UI application states include:</p>
<ul>
<li>Native application state transitions for 2.2.1: <strong>Tizen Native App Programming &gt; Basics of Native App Programming &gt; Application Model &gt; Application Life-cycle &gt; Frame State Transition</strong></li>
<li>Native application state transitions for 2.3: <a href="https://developer.tizen.org/dev-guide/2.3.1/org.tizen.native.mobile.apireference/group__CAPI__APPLICATION__MODULE.html#CAPI_APPLICATION_MODULE_STATES_TRANSITIONS" target="_blank">The Application States and Transitions</a></li>

</ul>
<p>Basically, the scenarios are similar, and the same scenarios result in the same corresponding state transitions.</p>
<p>The main difference in developing UI applications is that the Tizen::Ui namespace has been replaced with the EFL. This change require you to recreate the user interface layer in your application. The EFL is very fast and customizable. Study its documentation to effectively use its features.</p>
  
<h2 id="app_life_cycle" name="app_life_cycle">Application Life-cycle</h2>

<p>The following figure shows the old 2.2.1 application life-cycle model.</p>
  <p class="figure">Figure: 2.2.1 life-cycle model</p> 
  <p align="center"><img src="../images/life_cycle_model_old.png" alt="2.2.1 life-cycle model" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
 
<p>The following figure shows the current application life-cycle model.</p>
  <p class="figure">Figure: 2.3 life-cycle model</p> 
  <p align="center"><img src="../images/life_cycle_model_new.png" alt="2.3 life-cycle model" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
 
<p>The following figures show the 2.2.1 and 2.3 state models.</p>
  <p class="figure">Figure: 2.2.1 state model</p> 
  <p align="center"><img src="../images/state_model_old.png" alt="2.2.1 state model" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p>  

  <p class="figure">Figure: 2.3 state model</p> 
  <p align="center"><img src="../images/state_model_new.png" alt="2.3 state model" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p>  
  
<p>The models have some differences, but basically they work very similarly. In both models, there are specific callbacks called during specific application states.</p>
<p>The main difference is that the old model has 2 life-cycles, one for the backend of the application and another one for the UI. The current model is more unified, so the backend code and the UI of the application are executed in the same callback functions.</p>
<p>First, the <span style="font-family: Courier New,Courier,monospace">app_create_cb()</span> function is called instead of <span style="font-family: Courier New,Courier,monospace">OnAppInitializing()</span>. Place the initialization code, such as loading and creating UI objects, there. After the initialization process (or the <span style="font-family: Courier New,Courier,monospace">OnAppInitialized()</span> callback in the 2.2.1 version), the application state becomes CREATED. Now the main event loop is being started and the <span style="font-family: Courier New,Courier,monospace">app_control_cb()</span> callback is called. The application state becomes RUNNING. This state is similar to the application state of the 2.2.1 version after <span style="font-family: Courier New,Courier,monospace">OnAppInitialized()</span> is executed.</p>
<p>When the application is running, the state can change to PAUSED or TERMINATED. Each state is preceded by a specific callback. Place your code in those callbacks to be executed before the application state changes. Those states are similar to the states from the 2.2.1 Native API, where the frame can be activated, deactivated, and minimized. If the state is PAUSED, it is possible to change it back to RUNNING. These situations are all described in the native <a href="https://developer.tizen.org/dev-guide/2.3.1/org.tizen.native.mobile.apireference/group__CAPI__APPLICATION__MODULE.html" target="_blank">Application API Reference</a>.</p>

<h2 id="package_manag" name="package_manag">Package Management</h2>

<p>The package management during the porting process requires you to pay attention to the installation process and the actual application package structure.</p>

<h3 id="app_inst" name="app_inst">Application Installation Process</h3>

<p>The installation process in the new Native API is very similar to the one in the old API. The following figure shows the scheme.</p>

  <p class="figure">Figure: Installation process</p> 
  <p align="center"><img src="../images/porting_installation_process.png" alt="Installation process" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
 
<p>The installation process looks similar to the one from the 2.2.1 Native API. In the new API, the Package Manager is still responsible for managing packages. Use this API for installing, uninstalling, and updating the packages.</p>

<h3 id="app_package" name="app_package">Application Package</h3>
<p>In comparison with the 2.2.1 application package, the 2.3 native application package has fewer directories.</p>
 
   <p class="figure">Figure: 2.2.1 package structure</p> 
  <p align="center"><img src="../images/package_structure_old.png" alt="2.2.1 package structure" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 

   <p class="figure">Figure: 2.3 package structure</p> 
  <p align="center"><img src="../images/package_structure_new.png" alt="2.3 package structure" style="display: block; text-align: center; margin-left: auto; margin-right: auto" /></p> 
  
<p>In the current package structure, there are no separate <span style="font-family: Courier New,Courier,monospace">info</span>, <span style="font-family: Courier New,Courier,monospace">setting</span>, and <span style="font-family: Courier New,Courier,monospace">shared</span> directories. Despite this change, the rest of the directories are the same. The file extension remains <span style="font-family: Courier New,Courier,monospace">.tpk</span>.</p>
<table>
<caption>Table: 2.3 package directories</caption>
<tbody>
<tr>
 <th>Directory</th>
 <th>Description</th>
</tr>
<tr>
<td><span style="font-family: Courier New,Courier,monospace">&lt;package ID&gt;</span></td>
 <td>Fully qualified name of an application, such as org.tizen.calculator.</td>
</tr>

<tr>
 <td><span style="font-family: Courier New,Courier,monospace">bin</span></td>
 <td>Executable file of the application.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">lib</span></td>
 <td>Application library files.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">res</span></td>
 <td>Root directory in which all resource files are located.
<p>The application cannot write and modify any resource files.</p></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">data</span></td>
 <td>Root directory in which the application&#39;s private data is located.
<p>The application can read and write its own data files in the application 
data directory.</p></td></tr>
</tbody>
</table>

<h2 id="launch" name="launch">Application Launch and Termination</h2>

<p>The process of launching a 2.2.1 native API application can be found in: <strong>Tizen Native App Programming &gt; Basics of Native App Programming &gt; Application Model &gt; Application Life-cycle &gt; Launching Applications</strong>. A native application can also be launched from the Launcher or by another application.</p>
<p>The process of terminating a 2.2.1 native API application is described in: <strong>Tizen Native App Programming &gt; Basics of Native App Programming &gt; Application Model &gt; Application Life-cycle &gt; Terminating Applications</strong>. The possible scenarios for terminating the 2.3 native API application are the same as in the 2.2.1 API:</p>
<ul>
<li>Application calls the <span style="font-family: Courier New,Courier,monospace">ui_app_exit()</span> function to terminate the main event loop.</li>
<li>Low Memory Killer terminates the application to free memory.</li>
</ul>

<h2 id="ui" name="ui">UI and Service Applications</h2>
<p>The main difference in creating UI applications is that the whole Tizen::Ui namespace has been replaced with the EFL. To create powerful applications for Tizen, study the <a href="https://developer.tizen.org/dev-guide/2.3.1/org.tizen.native.mobile.apireference/group__EFL__Group.html" target="_blank">EFL documentation</a>.</p>

<p>The new native API has the same idea of service applications as the 2.2.1 version:</p>
<ul><li><p>The guide for creating service applications in the 2.2.1 version can be found in: <strong>Tizen Native App Programming &gt; Programming Guide &gt; App: Controlling Your Application &gt; Service Application Fundamentals</strong>. Also, the tutorial for the 2.2.1 version is in <strong>Tizen Native App Programming &gt; Tutorials &gt; App Tutorial &gt; Task: Multi Proc Service App</strong>.</p></li>
<li>
<p>The tutorial for the new 2.3 version is <a href="https://developer.tizen.org/development/tutorials/native-application/application-framework/service-application" target="_blank">Service Application: Creating Background Applications</a>.</p></li></ul>

<h2 id="io" name="io">I/O Overview</h2>
<p>In the old Tizen 2.2.1 applications, the operations related to accessing the file system and managing input and output were all defined in the Tizen::Io namespace. Now, all the functionalities of this namespace have been discarded in favor of open source libraries and other modules of the native API. To provide the same functionality as the previous Tizen::Io namespace, the current version of Tizen uses sqlite3 and EGlibc open libraries. It also uses the Message Port and Storage (a System submodule) from the native API, so handle I/O operations using these libraries and API modules.</p>

<h2 id="object" name="object">Object Ownership Policy</h2>
<p>In the native API, the &#39;N&#39; postfix for functions that return a new instance of an object with its ownership is no more supported. In this API, use the <span style="font-family: Courier New,Courier,monospace">object_create()</span> function, and free the memory with a function, such as <span style="font-family: Courier New,Courier,monospace">object_destroy()</span>. The following example is taken from the App Control module:</p>
<pre class="prettyprint">
static app_control_h app_control;

int error_code = app_control_create(&amp;app_control);

error_code = app_control_destroy(app_control);
</pre>

<p>Check from the function documentation whether you have to free the resource you are using. There are many other functions, such as <span style="font-family: Courier New,Courier,monospace">get_something()</span>, which usually allocates memory to store an object or a value that is obtained. For example:</p>
<pre class="prettyprint">
char *uri;

error_code = app_control_get_uri(app_control, &amp;uri);

if (uri != NULL)
{
&nbsp;&nbsp;&nbsp;free(uri);
&nbsp;&nbsp;&nbsp;uri = NULL;
}
</pre>

<p>In those cases, free memory as well. To be sure whether you need to release the resources to avoid memory leaks, check the API documentation.</p>

<h2 id="low" name="low">Low Memory Level Events</h2>
<p>When the memory levels in the system are extremely low, the system terminates the application and removes it from the memory. However, it is possible to save the application state or context right before this happens. In the 2.2.1 version, it was done using the <span style="font-family: Courier New,Courier,monospace">Tizen::App::IAppCheckpointEventListener</span> interface. In the new native API, every time when the low level memory situation occurs on the device and the system wants to terminate some application, the <span style="font-family: Courier New,Courier,monospace">app_event_cb()</span> callback in that application is called. When you create your application, remember to place the code that must be executed in case of a low memory level in this callback and set the callback using the <span style="font-family: Courier New,Courier,monospace">ui_app_add_event_handler()</span> function.</p>

<h2 id="scene" name="scene">Scene Transitions</h2>
<p>In the old 2.2.1 model, the UI scene transitions were handled by specific listeners, such as the <span style="font-family: Courier New,Courier,monospace">Tizen::Ui::Controls::IFormBackEventListener</span> and its <span style="font-family: Courier New,Courier,monospace">OnFormBackRequested()</span> event handler to listen to the <strong>Back </strong>key events for a backward scene transition. In the 2.3 model, all such actions are handled using the EFL and <a href="https://developer.tizen.org/development/ui-practices/native-application/efl/hardware-input-handling" target="_blank">EFL Extension</a>. The EFL has its own view manager for applications, called naviframe. A naviframe is a stack which holds views or pages as its items. When another view is launched, it is pushed on the top of the stack. Only the topmost view is displayed. The old views are stored on the stack. The EFL Extension provides functions to send key events to the naviframe top item or to pop it. Every time the user presses the <strong>Back</strong> key, the current view is removed from the stack and the view that was right under it becomes the topmost view and is displayed. The transition animation between views is handled by the EFL and depends on the theme applied to the UI component.</p>

<h2 id="keys" name="keys">Hardware Keys</h2>
<p>With the arrival of the EFL, handling the hardware key events has changed. Until now, the 2.2.1 model provided the <span style="font-family: Courier New,Courier,monospace">Tizen::Ui::Controls::IFormMenuEventListener</span> interface. This interface delivered the <span style="font-family: Courier New,Courier,monospace">OnFormMenuRequested()</span> event handler to listen to the hardware <strong>Menu</strong> key events. Now, all this functionality is obtained using the EFL. In the <a href="https://developer.tizen.org/development/ui-practices/native-application/efl/hardware-input-handling" target="_blank">EFL Extension</a> documentation, find functions which enable you to manipulate the key modifiers. Use them to add handling for the hardware key events.</p>

<h2 id="ex" name="ex">Exceptions</h2>
<p>Normally in the 2.3 API version, the exceptions model functions return an integer which indicates an error value. Usually, the value is 0 if there are no errors and the name format for this value is MODULE_NAME_ERROR_NONE. As in 2.2.1, the current API provides functions to get and set the last error value in the thread. In the 2.3 version, this functionality and the error enumerations are in the Base module. The following example shows how the current native API returns errors.</p>
<pre class="prettyprint">
int error_code = app_control_create(&amp;app_control);
if (error_code != APP_CONTROL_ERROR_NONE) // Error occurred
</pre>

<h2 id="logs" name="logs">Logs</h2>
<p>The 2.3 native API provides a new method for managing logs. The dlog module is now responsible for these actions. It provides 2 functions to send data to the log output. It supports priority and tags, which can be used to easily filter log messages. The new logging system makes it easier to manage logs, since there are no multiple functions for dealing with different log levels. Set the priority (whether the log is an error or maybe a warning, info, or debug message) and filter the output logs according to the priority levels.</p>

<table>
<caption>Table: Priority levels</caption>
<tbody>
<tr>
 <th>Priority</th>
 <th>Description</th>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">DLOG_DEBUG</span></td>
 <td>Debug message.
<p>Log message which the developer want to check.</p></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">DLOG_INFO</span></td>
 <td>Information message.
<p>Normal operational messages. Logs above this priority are always logged.</p></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">DLOG_WARN</span></td>
 <td>Warning message.
<p>Not an error, but an indication that an error occurs in the future if no action is taken.</p></td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">DLOG_ERROR</span></td>
 <td>Error message.
<p>Indicates an error.</p></td>
</tr>
</tbody>
</table>

<p>You can use the <span style="font-family: Courier New,Courier,monospace">dlogutil</span> command to view and follow the content of the log buffers:</p>
<pre class="prettyprint">
dlogutil [&lt;option&gt;] ... [&lt;filter-spec&gt;] ...  
</pre>

<p>Every log message has a tag and a priority associated with it. A filter expression follows the tag:priority format. The tag indicates the tag of interest and the priority indicates the minimum level of priority to report for that tag. Add any number of tag:priority specifications in a single filter expression. The tag of a log message indicates the system component from which the message originates. The priority is one of the following character values, ordered from lowest to highest priority:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">D</span> - Debug</li>
<li><span style="font-family: Courier New,Courier,monospace">I</span> - Info</li>
<li><span style="font-family: Courier New,Courier,monospace">W</span> - Warning</li>
<li><span style="font-family: Courier New,Courier,monospace">E</span> - Error</li>
</ul>

<p>For example, to see the <span style="font-family: Courier New,Courier,monospace">MY_APP</span> tag with the debug priority:</p>
<pre class="prettyprint"># dlogutil MY_APP:D</pre>

<p>To see all log messages above the info priority:</p>
<pre class="prettyprint"># dlogutil *:I</pre>	 

<table>
<caption>Table: List of logutil command options</caption>
<tbody>
<tr>
 <th>Option</th>
 <th>Description</th>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-b &lt;buffer&gt;</span></td>
 <td>Alternate log buffer. The main buffer is used by the default buffer.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-c</span></td>
 <td>Clears the entire log and exits.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-d</span></td>
 <td>Dumps the log and exits.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-f &lt;filename&gt;</span></td>
 <td>Writes a log to the filename. The default is stdout.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-g</span></td>
 <td>Prints the size of the specified log buffer and exits.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-n &lt;count&gt;</span></td>
 <td>Sets the maximum number of rotated logs to count. The default value is 4. Requires the -r option.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-r &lt;Kbytes&gt;</span></td>
 <td>Rotates the log file every Kbytes of output. The default value is 16. Requires the -f option.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-s</span></td>
 <td>Sets the default filter spec to silent.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">-v &lt;format&gt;</span></td>
 <td>Sets the output format for log messages. The default is the brief format.</td>
</tr>
</tbody>
</table>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

