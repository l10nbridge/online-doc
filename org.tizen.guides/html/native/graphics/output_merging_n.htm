<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Output Merging</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#depth">Depth Buffering</a></li>
			<li><a href="#alpha">Alpha Blending</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">


<h1>Output Merging</h1>

<p>The fragment shader returns a colored fragment, often called the <strong>RGBAZ</strong> fragment. A (for alpha) represents the fragment&#39;s opacity whereas Z represents the depth. In the output merger, the fragment competes or combines with the pixel in the <strong>color buffer</strong> to update the pixel&#39;s color. A and Z are used in this process. In addition to the color buffer, OpenGL ES (GL) supports another buffer named <strong>depth buffer</strong> or <strong>z-buffer</strong>. It has the same resolution as the color buffer and stores the depth values of the pixels.</p> 

<h2 id="depth" name="depth">Depth Buffering</h2>
<p>In the following figure, assume that <span style="font-family: Courier New,Courier,monospace">MinZ</span> of the viewport is 0.0, <span style="font-family: Courier New,Courier,monospace">MaxZ</span> is 1.0, the red triangle&#39;s depth is 0.8, and the blue triangle&#39;s is 0.5. By calling the <span style="font-family: Courier New,Courier,monospace">glClear()</span> function once per frame, the color and depth buffers are simultaneously cleared with the default values selected by the <span style="font-family: Courier New,Courier,monospace">glClearColor()</span> and <span style="font-family: Courier New,Courier,monospace">glClearDepthf()</span> functions, respectively.</p> 

<p class="figure" id="buffer">Figure: Depth buffering visualization: the rendering order is red to blue triangles</p> 
<p align="center"><img alt="Depth buffering visualization: the rendering order is red to blue triangles" src="../../images/output_depth_buffer1.png" /> <img alt="Depth buffering visualization: the rendering order is red to blue triangles" src="../../images/output_depth_buffer2.png" /></p> 
  

<p>When a fragment at <span style="font-family: Courier New,Courier,monospace">(x,y)</span> is passed from the fragment shader, its depth value is compared with the depth buffer value at <span style="font-family: Courier New,Courier,monospace">(x,y)</span>. If the fragment has a smaller depth value, its color and depth update the color buffer and depth buffer at <span style="font-family: Courier New,Courier,monospace">(x,y)</span>, respectively. Otherwise, the fragment is discarded. The above figure shows how the depth buffer is used for filling the color buffer. This method is called <strong>depth buffering</strong> or <strong>z-buffering</strong>.</p> 

<h2 id="alpha" name="alpha">Alpha Blending</h2>
<p>Suppose that the current fragment has a smaller depth than the pixel in the color buffer and is translucent. Then, the pixel must show through the fragment. This is achieved by blending the fragment color with the pixel color. The process uses the alpha value of the fragment, which is in the range of [0,1]: 0 denotes fully transparent and 1 denotes fully opaque.</p> 
<p>A typical blending equation is <span style="font-family: Courier New,Courier,monospace">αc<sub>f</sub> + (1-α)c<sub>p</sub></span>, where <span style="font-family: Courier New,Courier,monospace">α</span> represents the fragment&#39;s opacity, <span style="font-family: Courier New,Courier,monospace">c<sub>f</sub></span> is the fragment color, and <span style="font-family: Courier New,Courier,monospace">c<sub>p</sub></span> is the pixel color. Assume that, in the <a href="#buffer">Depth buffering visualization</a> figure, all vertices of the blue triangle have the RGBA color, (0,0,1,0.5), and those of the red triangle have (1,0,0,1). The scan conversion algorithm interpolates the RGB channels and the alpha channel in the same manner. Therefore, all fragments of the blue triangle are assigned (0,0,1,0.5), and those of the red triangle are (1,0,0,1). Then, the blue fragment is blended with the red pixel at 3 pixel positions. The blended color is (0.5,0,0.5). This process is named <strong>alpha blending</strong>.</p>
<p>GL supports the <span style="font-family: Courier New,Courier,monospace">glBlendFunc()</span> function, where the first parameter specifies the blending coefficient for the incoming (source) fragment and the second parameter specifies the blending coefficient for the destination pixel. Many values, such as <span style="font-family: Courier New,Courier,monospace">GL_ZERO</span> and <span style="font-family: Courier New,Courier,monospace">GL_ONE</span>, can be assigned to the parameters, but <span style="font-family: Courier New,Courier,monospace">GL_SRC_ALPHA</span> best fits the incoming fragment while <span style="font-family: Courier New,Courier,monospace">GL_ONE_MINUS_SRC_ALPHA</span> best fits the destination pixel.</p>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>