<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Texturing</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#process">Processing Texture Coordinates</a></li>
			<li><a href="#filter">Texture Filtering</a></li>
			<li><a href="#mipmap">Mipmapping</a></li>
			<li><a href="#gl">Texturing in GL</a></li>
			<li><a href="#example">Texturing Example</a></li>
            </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/graphics/opengl_tutorial_n.htm">OpenGL ES Tutorial</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">


<h1>Texturing</h1>

<p>While the vertex shader outputs the clip space vertices, the rasterizer outputs a set of fragments at the window space. The per-fragment attributes usually include a normal and a set of texture coordinates. Using these data, the fragment shader determines the final color of each fragment. The most important things to do in the fragment shader are <strong>lighting</strong> and <strong>texturing</strong>.</p>
<p>Before moving on to the fragment shader, consider the basics of texturing. The simplest among the various texturing methods is image texturing. An image texture is a 2D array of <strong>texels</strong> (texture elements). Each texel has a unique position. In the first of the following figures, for example, the lower-left texel&#39;s position is (0.5,0.5). For accessing a texture, you can use &#39;normalized&#39; texture coordinates (<span style="font-family: Courier New,Courier,monospace">s,t</span>) instead of the texel position (as shown in the second of the following figures).</p>

<p class="figure">Figure: 2D array of texels</p> 
<p align="center"><img alt="2D array of texels" src="../../images/texturing_texel.png" /></p>  

<p class="figure">Figure: Accessing textures using normalized texture coordinates</p> 
<p align="center"><img alt="Accessing textures using normalized texture coordinates" src="../../images/texturing_normalise.png" /></p> 
 


<h2 id="process" name="process">Processing Texture Coordinates</h2>

<p>The texture coordinates are assigned to the vertices of the polygon mesh. (This process is called <strong>surface parameterization</strong> or simply <strong>parameterization</strong>, and it is done by graphics packages, such as 3ds Max.) The scan conversion is also done with the texture coordinates. In the following figure, the scan conversion interpolates the per-vertex texture coordinates to determine the per-fragment texture coordinates. For example, the lower-left corner fragment is assigned the texture coordinates, (1/8,1/8). OpenGL ES (GL) simply multiplies the per-fragment texture coordinates by the texture resolution, <span style="font-family: Courier New,Courier,monospace">r<sub>x</sub></span> and <span style="font-family: Courier New,Courier,monospace">r<sub>y</sub></span>. If the resolution is 4x4, the texture coordinates, (1/8,1/8), are mapped to (0.5,0.5) and the lower-left corner texel is retrieved from the image texture.</p>

<p class="figure">Figure: From the texture coordinates to the texel position</p> 
<p align="center"><img alt="From the texture coordinates to the texel position" src="../../images/texturing_position1.png" /> <img alt="From the texture coordinates to the texel position" src="../../images/texturing_position2.png" /> <img alt="From the texture coordinates to the texel position" src="../../images/texturing_position3.png" /></p>    


<h2 id="filter" name="filter">Texture Filtering</h2>
<p>For a fragment located at (<span style="font-family: Courier New,Courier,monospace">x,y</span>) in the window, its texture coordinates (<span style="font-family: Courier New,Courier,monospace">s,t</span>) are mapped to (<span style="font-family: Courier New,Courier,monospace">s&#39;,t&#39;</span>) as presented above. Basically, the fragment at (<span style="font-family: Courier New,Courier,monospace">x,y</span>) is <strong>projected</strong> onto (<span style="font-family: Courier New,Courier,monospace">s&#39;,t&#39;</span>). In the contrived example given above, (<span style="font-family: Courier New,Courier,monospace">s&#39;,t&#39;</span>) exactly falls into the center of a texel. In reality, however, this rarely happens. Then, the texels around (<span style="font-family: Courier New,Courier,monospace">s&#39;,t&#39;</span>) are collected and combined to determine the texture color of the fragment. This process is called <strong>texture filtering</strong>.</p>

<p>Suppose a quad composed of 2 triangles. Depending on the view, view frustum, and viewport parameters, the quad size in the window space may vary. In the following figure, the top row shows a case where the window space quad appears larger than the given image texture. Then, the texture is <strong>magnified</strong> so as to be pasted onto the quad. In contrast, the window space quad in the bottom row appears smaller than the image texture, and the texture is <strong>minified</strong>. Note that the fragments are sparsely projected onto the texture space.</p>
<p>In the figure, the texture is depicted as a grid of dotted lines, where a texel is located in a grid cell. The gold dots represent the window space fragments projected onto the texture space.</p>

<p class="figure">Figure: Magnification (top) vs. minification (bottom)</p> 
<p align="center"><img alt="Magnification (top) vs. minification (bottom)" src="../../images/texturing_magnification.png" /></p>  
<p align="center"><img alt="Magnification (top) vs. minification (bottom)" src="../../images/texturing_minification.png" /></p>  
 

<h3>Filtering for Magnification</h3>
<p>In case of magnification, you have 2 options. The first is <strong>nearest point sampling</strong>. Then, as you can see in the left example below, a block of fragments can be mapped to a single texel. Consequently, a blocky image is often produced. The second option is <strong>bilinear interpolation</strong> illustrated in the right example below. In general, bilinear interpolation is preferred to nearest point sampling.</p>

<p class="figure">Figure: Nearest point sampling (left) vs. bilinear interpolation (right)</p> 
<p align="center"><img alt="Nearest point sampling (left) vs. bilinear interpolation (right)" src="../../images/texturing_nearest.png" /> <img alt="Nearest point sampling (left) vs. bilinear interpolation (right)" src="../../images/texturing_bilinear.png" /></p>       


<h3>Filtering for Minification</h3>
<p>Consider the checkerboard image texture in the following figure. If all fragments are surrounded by dark-gray texels, the textured primitive appears dark gray. If all fragments are surrounded by light-gray texels, the textured primitive appears light gray.</p>

<p class="figure">Figure: Minification problem</p> 
<p align="center"><img alt="Minification problem" src="../../images/texturing_problem.png" /></p>  


<h2 id="mipmap" name="mipmap">Mipmapping</h2>

<p>The filtering for minification process discussed above has a problem, because the texture is larger than the window space primitive and therefore many texels are not involved in texture filtering. The solution is to make the texture smaller, so that all texels are involved for texture filtering. The best case is that the window space primitive and the texture have the same size.</p> 
<p>To make the texture smaller, it is repeatedly down-sampled to a quarter size, and the colors of 2x2 neighboring texels are averaged to determine the color of a texel in the quarter texture, as shown in the following figure. Given an original texture of 2<span style="font-family: Courier New,Courier,monospace"><sup>l</sup></span>x2<span style="font-family: Courier New,Courier,monospace"><sup>l</sup></span> resolution, a texture pyramid of (<span style="font-family: Courier New,Courier,monospace">l</span> + 1) levels is constructed, where the original texture is located at level 0. The pyramid is called a <strong>mipmap</strong>.</p> 

<p class="figure">Figure: Mipmap generation process</p> 
<p align="center"><img alt="Mipmap generation process" src="../../images/texturing_mipmap1.png" /> <img alt="Mipmap generation process" src="../../images/texturing_mipmap2.png" /></p>   


<h3>Mipmap Generation in GL</h3>
<p>To automatically generate a mipmap, GL invokes the <span style="font-family: Courier New,Courier,monospace">glGenerateMipmap()</span> function, where the parameter can be, for example, <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_2D</span> or <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_CUBE_MAP</span> (textures in GL 2.0 come in 2 forms: 2D textures and cube map textures). Use <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_2D</span> for general image texturing.</p>

<h3 id="mipmap_mini">Mipmapping for Minification</h3> 
<p>In any given a mipmap, you must decide which level you want to use for texture filtering. Observe that a pixel (fragment) covers an area on the screen. For simplicity, consider the area as a square so that the entire screen is tiled by an array of square pixels. Then, a pixel&#39;s projection onto the texture space is not a &#39;point&#39;, but an &#39;area&#39; centered at (<span style="font-family: Courier New,Courier,monospace">s&#39;,t&#39;</span>). The projected area is called the <strong>footprint</strong> of the pixel.</p> 
<p>As a simple example, consider a footprint that covers <span style="font-family: Courier New,Courier,monospace">m x m</span> texels of the level-0 texture. Then, the GPU computes <span style="font-family: Courier New,Courier,monospace">log<sub>2</sub>m</span>, which is denoted by &#955;. In the following figure, &#955; = log<sub>2</sub>3 &#8776; 1.585. Consider then &#8970;&#955;&#8971; and &#8968;&#955;&#8969;, which in this example are levels 1 and 2. You have 2 options:</p>

<ul>
<li>Select the level closer to &#955;. In this example, you select level 2. The selected level can be filtered either by nearest point sampling or by bilinear interpolation.
<p>For example: Take the nearest level: <span style="font-family: Courier New,Courier,monospace">i<sub>&#955;</sub>= &#8970;&#955;+0.5&#8971;</span></p>
<ul><li>At the level, you can take the nearest point.</li>
<li>In contrast, you can do bilinear interpolation.</li>
</ul>
</li>
<li>Consider both &#8970;&#955;&#8971; and &#8968;&#955;&#8969; and then linearly interpolate the filtering results. Of course, each level can be filtered either by nearest point sampling or by bilinear interpolation.  
<p>For example: Take &#8970;&#955;&#8971; and &#8968;&#955;&#8969; and linearly interpolate the filtering results.</p>
<ul><li>At each level, you can take the nearest point.</li>
<li>In contrast, you can do bilinear interpolation.</li></ul>
</li></ul>
<p>Note that the last case performs 3 levels of linear interpolations. It is called <strong>trilinear interpolation</strong>.</p>

<p class="figure">Figure: Selecting the mipmap levels</p> 
<p align="center"><img alt="Selecting the mipmap levels" src="../../images/texturing_mipmap_levels.png" /></p>  

<p>There is of course a third option: not to do mipmapping but to use the original image (at level 0) instead. It can be filtered either by nearest point sampling or by bilinear interpolation. Therefore, minification has 6 varieties in total.</p>

<h2 id="gl" name="gl">Texturing in GL</h2>	

<p>When an image file is to be used as a texture, it is first loaded into the GL program. Then, you must take the following steps:</p>

<ol>
<li>Use the <span style="font-family: Courier New,Courier,monospace">glGenTextures()</span> function, where the first parameter defines the number of texture objects to generate and the second parameter returns them in <span style="font-family: Courier New,Courier,monospace">textures</span>.</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">glBindTexture()</span> function, where the first parameter specifies what the texture is used for as, for example, <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_2D</span> or <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_CUBE_MAP</span>.</li>
<li>After a texture object is generated and bound, the image data must be loaded using the <span style="font-family: Courier New,Courier,monospace">glTexImage2D()</span> function, where the first parameter is either <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_2D</span> or one of the cube-map faces, such as <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_CUBE_MAP_POSITIVE_X</span>, the second parameter specifies the mipmap level, and the eighth parameter can be, for example, <span style="font-family: Courier New,Courier,monospace">GL_UNSIGNED_SHORT_4_4_4_4</span> or <span style="font-family: Courier New,Courier,monospace">GL_UNSIGNED_SHORT_5_6_5</span>.</li>
<li>The GPU itself makes a choice between minification and magnification, but allows you to select what kind of filtering to use in each case. For this purpose, invoke the <span style="font-family: Courier New,Courier,monospace">glTexParameteri()</span> function. If the second parameter (parameter name) is <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_MAG_FILTER</span>, the third parameter is either <span style="font-family: Courier New,Courier,monospace">GL_NEAREST</span> or <span style="font-family: Courier New,Courier,monospace">GL_LINEAR</span>. If the second parameter is <span style="font-family: Courier New,Courier,monospace">GL_TEXTURE_MIN_FILTER</span>, the third parameter is either <span style="font-family: Courier New,Courier,monospace">GL_NEAREST_MIPMAP_NEAREST</span>, <span style="font-family: Courier New,Courier,monospace">GL_LINEAR_MIPMAP_NEAREST</span>, <span style="font-family: Courier New,Courier,monospace">GL_NEAREST_MIPMAP_LINEAR</span>, <span style="font-family: Courier New,Courier,monospace">GL_LINEAR_MIPMAP_LINEAR</span>, <span style="font-family: Courier New,Courier,monospace">GL_NEAREST</span>, or <span style="font-family: Courier New,Courier,monospace">GL_LINEAR</span>. These 6 options are those presented in <a href="#mipmap_mini">Mipmapping for Minification</a>.</li>
</ol> 

<h2 id="example" name="example">Texturing Example</h2>
<p>In order to generate a texture in GL, you usually have to decode the image file stored in the file system. In Tizen, you can use the Evas API (in <a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">wearable</a> applications) to get the decoded bitmap buffer from the image file, as shown in the following example. The code creates an independent <span style="font-family: Courier New,Courier,monospace">Ecore_Evas</span> object, which contains <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>. It provides a method to decode the designated image file and store the bitmap data into its own buffer. You can get the internal buffer pointer and then upload the buffer to the texture.</p>

<pre class="prettyprint">
/*
   Create GL Texture object from image file path
   @param[in] parent Evas object
   @param[in] filename image file path
   @return texture id
*/
unsigned int
create_texture(Evas_Object *parent, const char *filename)
{
&nbsp;&nbsp;&nbsp;&nbsp;unsigned int gltex_object;
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;
&nbsp;&nbsp;&nbsp;&nbsp;int surface_w;
&nbsp;&nbsp;&nbsp;&nbsp;int surface_h;
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(parent, NULL, NULL, &amp;surface_w, &amp;surface_h);

&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *inline_buffer = elm_win_add(parent,&quot;Img Read&quot;,ELM_WIN_INLINED_IMAGE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(inline_buffer, 0, 0);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(inline_buffer, surface_w, surface_h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(inline_buffer);

&nbsp;&nbsp;&nbsp;&nbsp;Evas *canvas = evas_object_evas_get(inline_buffer);
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *image = evas_object_image_add(canvas);

&nbsp;&nbsp;&nbsp;&nbsp;char path[200];
&nbsp;&nbsp;&nbsp;&nbsp;sprintf(path, &quot;%s%s&quot;, app_get_resource_path(), filename);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_file_set(image, path, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_size_get(image, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_fill_set(image, 0, 0, w, h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_filled_set(image, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(image, w, h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(image);

&nbsp;&nbsp;&nbsp;&nbsp;elm_win_render(inline_buffer);

&nbsp;&nbsp;&nbsp;&nbsp;GLubyte *pixels;
&nbsp;&nbsp;&nbsp;&nbsp;pixels = (GLubyte *)evas_object_image_data_get(image, EINA_FALSE);

&nbsp;&nbsp;&nbsp;&nbsp;glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
&nbsp;&nbsp;&nbsp;&nbsp;glGenTextures(1, &amp;gltex_object);

&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, gltex_object);

&nbsp;&nbsp;&nbsp;&nbsp;glTexImage2D(GL_TEXTURE_2D, 0, GL_BGRA_EXT, w, h, 0, GL_BGRA_EXT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GL_UNSIGNED_BYTE, pixels);

&nbsp;&nbsp;&nbsp;&nbsp;glGenerateMipmap(GL_TEXTURE_2D);

&nbsp;&nbsp;&nbsp;&nbsp;glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
&nbsp;&nbsp;&nbsp;&nbsp;glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

&nbsp;&nbsp;&nbsp;&nbsp;glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
&nbsp;&nbsp;&nbsp;&nbsp;glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

&nbsp;&nbsp;&nbsp;&nbsp;glBindTexture(GL_TEXTURE_2D, 0);

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(inline_buffer);

&nbsp;&nbsp;&nbsp;&nbsp;return gltex_object;
}
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>