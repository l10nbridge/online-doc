<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Creating OpenGL ES Applications</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/graphics/opengl_tutorial_n.htm">OpenGL ES Tutorial</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Creating OpenGL ES Applications</h1>  

<p>The easiest way to use the OpenGL ES API in a Tizen application is to rely on the <span style="font-family: Courier New,Courier,monospace">Elm_GLView</span> component. The <span style="font-family: Courier New,Courier,monospace">Elm_GLView</span> component is one of the Elementary UI components, which creates an OpenGL ES (GL) target surface and a context. The <span style="font-family: Courier New,Courier,monospace">Elm_GLView</span> component can be embedded in any Tizen UI application. It is basically a wrapper of <span style="font-family: Courier New,Courier,monospace">Evas_GL</span>, the GL/EGL abstraction layer of EFL. By using the <span style="font-family: Courier New,Courier,monospace">Elm_GLView</span> component, you avoid having to consider how EGL environment is coupled with the native windowing systems. Some macros provided by EFL also allow you to use GL APIs directly. In addition, the UI framework can access the surface where the GPU outputs the rendering result and make the entire scene as a combination of 2D and 3D components in a single canvas.</p>

<p>The following example shows the steps to create a GL application. From now on, the <span style="font-family: Courier New,Courier,monospace">Elm_GLView</span> component is shortened to GLView.</p>
<ol>
<li>Create a basic application as presented in the <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">HelloWorld example</a>.
<p>The UI application&#39;s skeleton makes available the window object, which can contain the GLView component.</p></li>
<li>Enable hardware acceleration.
<p>To develop a GL application, call the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function  before creating the window. It makes an application use the GPU.</p>
<p>For developing an application with Elementary, create a window with the <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span> Elementary utility function.</p>
<pre class="prettyprint">
Evas_Object *win;
elm_config_accel_preference_set(&quot;opengl&quot;);
win = elm_win_util_standard_add(name, &quot;OpenGL example&quot;);
</pre>
<p>You must also set hardware acceleration in the manifest file. For more information, see <a href="hw_acceleration_n.htm">Hardware Acceleration</a>.</p></li>
<li>Initialize the GLView.
<p>After creating the window, you can set the GLView mode with the <span style="font-family: Courier New,Courier,monospace">elm_glview_mode_set()</span> function to enable alpha channel, depth buffer, stencil buffer, MSAA, and the client-side rotation features. The following modes are supported:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_ALPHA</span>: Enable the alpha channel for rendering.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_DEPTH</span>: Enable the depth buffer for rendering.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_STENCIL</span>: Enable the stencil buffer for rendering.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_MULTISAMPLE_LOW</span>: Use MSAA with a minimum number of samples.</li>
</ul>
<p>For more information, see the <span style="font-family: Courier New,Courier,monospace">_Elm_GLView_mode</span> enumerator (in <a href="../../../../org.tizen.native.mobile.apireference/group__GLView.html#ga4d0a2281e13c66d7274987ef24e7abe7">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__GLView.html#gaabffbc1312be12b222eb67916e9645d1">wearable</a> applications).</p>
<p>In the following example, the alpha channel and depth buffer are enabled.</p>
<pre class="prettyprint">
// Request a surface with alpha and a depth buffer 
elm_glview_mode_set(glview, ELM_GLVIEW_ALPHA | ELM_GLVIEW_DEPTH);
</pre>
<p>Additionally, you can select the policies for resizing and rendering. The following example shows how to decide what to do with the GL surface when the GLView component is resized. With the default <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RESIZE_POLICY_RECREATE</span> option, the GL surface is destroyed and created again with the new size. The resizing policy can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RESIZE_POLICY_SCALE</span>. In that case, only the image object is scaled, not the underlying GL surface.</p>
<pre class="prettyprint">
// The resize policy tells GLView what to do with the surface when it
// resizes. ELM_GLVIEW_RESIZE_POLICY_RECREATE tells it to
// destroy the current surface and recreate it to the new size
elm_glview_resize_policy_set(glview, ELM_GLVIEW_RESIZE_POLICY_RECREATE);
</pre>
</li>
<li>Get the GL function pointer.
<p>Originally, an application must call the GL APIs using the <span style="font-family: Courier New,Courier,monospace">Evas_GL</span> abstraction layer in EFL. It means that you must get a set of function pointers for abstract GL functions from the <span style="font-family: Courier New,Courier,monospace">Evas_GL</span> object and call functions through the object. This can be annoying, especially when you want to re-use GL parts implemented at other platforms. To resolve this problem, EFL provides convenient helper macros, which are defined in the <span style="font-family: Courier New,Courier,monospace">Elementary_GL_Helpers.h</span> header file. The following example shows how to use the macros.</p>
<pre class="prettyprint">
#include &lt;Elementary_GL_Helpers.h&gt;
ELEMENTARY_GLVIEW_GLOBAL_DEFINE();

static Evas_Object*
add_glview(Evas_Object* parent, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object* glview;

&nbsp;&nbsp;&nbsp;// Create and initialize GLView
&nbsp;&nbsp;&nbsp;glview = elm_glview_add(parent);

&nbsp;&nbsp;&nbsp;// Prepare to use OpenGL ES APIs directly
&nbsp;&nbsp;&nbsp;ELEMENTARY_GLVIEW_GLOBAL_USE(glview);
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">ELEMENTARY_GLVIEW_GLOBAL_DEFINE()</span> and <span style="font-family: Courier New,Courier,monospace">ELEMENTARY_GLVIEW_GLOBAL_USE()</span> macros must be in the same source code. If you have a global header file in your application, the <span style="font-family: Courier New,Courier,monospace">ELEMENTARY_GLVIEW_GLOBAL_DECLARE()</span> macro can be in the header file. However, you must be very careful when using these macros. The recommended solution is to use the <span style="font-family: Courier New,Courier,monospace">ELEMENTARY_GLVIEW_USE()</span> macro in every client function. The following are some situations where you must not use the helper macros:</p>
<ul>
<li>When you use more than one Evas canvas at a time, such as multiple windows.</li>
<li>If you use multiple GL APIs, such as OpenGL ES 1.1, OpenGL ES 2.0, and OpenGL ES 3.0.</li>
<li>If you write or port a library that can be used by other applications.</li>
</ul>

<p>The helper macros must be used only for the following situations:</p>
<ul>
<li>When a single surface is used for GL rendering.</li>
<li>When a single API set (either OpenGL ES 1.1, OpenGL ES 2.0, or OpenGL ES 3.0) is used. In this case, the <span style="font-family: Courier New,Courier,monospace">ELEMENTARY_GLVIEW_GLOBAL_DECLARE()</span> macro must be used in a global header for the application.</li>
</ul>
</li>
<li>Set up callback functions.
<p>When you use the GLView component, you can set up necessary callback functions, which are called in the main loop to render a scene.</p>
<pre class="prettyprint">
// Initialization callback
elm_glview_init_func_set(glview, init_glview);
// Resizing callback
elm_glview_resize_func_set(glview, resize_glview);
// Drawing callback
elm_glview_render_func_set(glview, draw_glview);
// Deletion callback
elm_glview_del_func_set(glview, del_glview);
</pre>
<ol>
<li>Set up the initialization callback.
<p>The initialization callback is called when the GLView is created.</p>
<pre class="prettyprint">
// GL init callback
static void 
init_glview(Evas_Object *glview)
{
&nbsp;&nbsp;&nbsp;// Set GL state color to pink
&nbsp;&nbsp;&nbsp;glClearColor(1.0, 0.2, 0.6, 1.0);

&nbsp;&nbsp;&nbsp;// Do any form of OpenGL ES initialization here
&nbsp;&nbsp;&nbsp;// init_shaders();
&nbsp;&nbsp;&nbsp;// init_vertices();
}
</pre>
</li>
<li>Set up the resizing callback.
<p>The resizing callback is called whenever the GLView component is resized. A common action is to reset the viewport. Because the GLView size can be changed by a parent container, you must set up a resizing callback and reset the viewport size with the new GLView size.</p>
<pre class="prettyprint">
// GLView resize callback
static void 
resize_glview(Evas_Object *glview)
{
&nbsp;&nbsp;&nbsp;int w, h;
&nbsp;&nbsp;&nbsp;elm_glview_size_get(glview, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;glViewport(0, 0, w, h);
}
</pre>
</li>
<li>Set up the drawing callback.
<p>The drawing callback is called whenever the GLView must be updated. The GL draw commands must be made here.</p>
<pre class="prettyprint">
// GL draw callback
static void 
draw_glview(Evas_Object *glview)
{
&nbsp;&nbsp;&nbsp;// Paint it pink
&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

&nbsp;&nbsp;&nbsp;// The usual OpenGL ES draw commands come here
&nbsp;&nbsp;&nbsp;// draw_scene();
}
</pre>
</li>
<li>Set up the deletion callback.
<p>The deletion callback is triggered when the GLView is being destroyed. No other callback can be called on the same object afterwards.</p>
<pre class="prettyprint">
// GLView deletion callback
static void 
del_glview(Evas_Object *glview)
{
&nbsp;&nbsp;&nbsp;// Destroy all the OpenGL ES resources here
&nbsp;&nbsp;&nbsp;// destroy_shaders();
&nbsp;&nbsp;&nbsp;// destroy_objects();
}
</pre>
</li>
</ol>
</li>
</ol>


<table class="note">
<tbody>
        <tr>
          <th class="note">Note</th>
        </tr>
        <tr>
          <td class="note">In case the GL functions are called outside the 4 GLView callback functions, you must call the <span style="font-family: Courier New,Courier,monospace">evas_gl_make_current()</span> function before the GL function is called. However, this results in a performance degradation due to context switching, and only works if the direct rendering mode is not used.
		  <p>If Direct Rendering is enabled, all GL functions must be called from the 4 GLView callback functions only. All other operations can break the rendering order and cause unexpected rendering.</p>
		  </td>
		  </tr>
</tbody>
</table>

	  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>