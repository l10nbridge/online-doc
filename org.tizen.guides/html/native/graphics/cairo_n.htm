<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Cairo Integration</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#create">Creating an Evas_Object Image</a></li>
			<li><a href="#link">Linking Evas_Object Image to Cairo</a></li>
			<li><a href="#paint">Painting with Cairo</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/graphics/cairo_tutorial_n.htm">Cairo Integration Tutorial</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo API</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
 
  <h1>Cairo Integration</h1>
  
<p>Evas Cairo is the connection between the Cairo buffer and the Evas buffer.</p>
<p>EFL and more especially Evas are optimized and designed with bitmaps in mind, and it is more complicated to display vector images with EFL. There is an svg loader for evas, which loads a vectorial file as an evas object image, in other words as pixels. But if you want to create graphs, for example to display the evolutions of stocks during time, you need an external library, and this programming guide explains how to link this external library to evas.</p>
<p>This library is the <a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo</a> API. It is one of the most famous open source libraries for 2D graphics. Evas and EFL already have most of Cairo features, but if you want to display Bezier curves on screen it is advisable to use Cairo.</p>
<p>The <a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas</a> API and Cairo have completely different concepts. Evas knows the state of each object on screen and manipulates the state. So when you create, for example, a rectangle with <span style="font-family: Courier New,Courier,monospace">evas_object_rectangle_add</span>, it is not rendered on screen. After the render is launched, the rectangle may be overlayed by an opaque image and never be rendered on canvas. This is how evas manages the surfaces. Cairo works as a person draws on a paper sheet. Once something is painted on the surface it is rendered on the screen.</p>

<h2 id="create" name="create">Creating an Evas_Object Image</h2>

<p>This is how to create an Evas_Object. We use an Image object as it is displayed as pixels on the screen.</p>
<pre class="prettyprint">Evas_Object *image;

image = evas_object_image_add(evas);
</pre>

<p>To have transparent values enabled, we use ARGB8888 colorspace for the pixels. To do that, use the following code:</p>
<pre class="prettyprint">evas_object_image_alpha_set(image, EINA_TRUE);
evas_object_image_colorspace_set(image, EVAS_COLORSPACE_ARGB8888);
</pre>

<p>The image is now ready to be linked to Cairo.</p>

<h2 id="link" name="link">Linking Evas_Object Image to Cairo</h2>

<p>Now we create the real pixels Cairo uses for painting and EFL for displaying. We allocate the pixels for both Cairo and evas. The size of the row stride is called by <span style="font-family: Courier New,Courier,monospace">cairo_format_stride_for_width</span>. To set the size of the pixels to be allocated, use the following code.</p>
<pre class="prettyprint">cairo_format_t image_format;
cairo_t *cairo;
cairo_surface_t *surface;
unsigned char *pixels;

image_format = CAIRO_FORMAT_ARGB32;
row_stride = cairo_format_stride_for_width(image_format, WIDTH);
// Create the pixels here
pixels = (unsigned char *) calloc(sizeof(unsigned char) * row_stride * HEIGHT, 1);
</pre>

<p>This is how to create a Cairo structure which uses these pixels:</p>
<pre class="prettyprint">surface = cairo_image_surface_create_for_data(pixels, image_format,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WIDTH, HEIGHT, row_stride);
</pre>
<p>To create the Cairo context used for all operations, use the following code.</p>
<pre class="prettyprint">cairo = cairo_create(surface);
</pre>

<p>This is how to associate the pixels to the Evas_Object Image and set the size of the image to be the same as the one on the Cairo canvas.</p>
<pre class="prettyprint">evas_object_image_size_set(image, WIDTH, HEIGHT);
evas_object_image_fill_set(image, 0, 0, WIDTH, HEIGHT);
evas_object_image_data_set(image, pixels);
</pre>

<p>Each time we finish painting with Cairo, evas renders the pixels on screen with the following code.</p>
<pre class="prettyprint">evas_object_image_data_update_add(image, 0, 0, WIDTH, HEIGHT);
</pre>

<h2 id="paint" name="paint">Painting with Cairo</h2>

<p>All painting operations use the Cairo object created previously. To place the pencil at a specific position, use <span style="font-family: Courier New,Courier,monospace">cairo_move_to</span>. To paint a line between the current position and a point on the surface, use <span style="font-family: Courier New,Courier,monospace">cairo_line_to</span>. Here we paint a line with the current style from the point (x, y) 10, 10 to the point 10, 110.</p>
<pre class="prettyprint">cairo_move_to(cairo, 10, 10);
cairo_line_to(cairo, 10, 110);
</pre>

<p>Create a rectangle by using the <span style="font-family: Courier New,Courier,monospace">cairo_rectangle</span> API. This call draws a rectangle from position 10,10 and with 100px width and height.</p>
<pre class="prettyprint">cairo_rectangle(cairo, 10, 10, 110, 110);
</pre>

<p>Change the color of the pen by using the API <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgba</span> or <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgb</span>. This call changes the  color to red with half transparency.</p>
<pre class="prettyprint">cairo_set_source_rgba(cairo, 1.0, 0.0, 0.0, 0.5);
</pre>

<p>Changing the size of the pen is done by calling <span style="font-family: Courier New,Courier,monospace">cairo_set_line_width</span>. For a two pixel width use the following code.</p>
<pre class="prettyprint">cairo_set_line_width(cairo, 2);
</pre>

<p>For the complete official Cairo documentation, see <a href="http://cairographics.org/documentation/" target="_blank">http://cairographics.org/documentation/</a>.</p>  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>