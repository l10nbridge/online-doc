<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Cairo Vector Graphics</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>	
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#cairotizen">Cairo in Tizen</a></li>
			<li><a href="#create">Creating a Cairo Surface Linked with an Evas Object</a></li>
			<li><a href="#draw">Drawing with Cairo</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#image_backend">Creating Cairo with the Image Backend</a></li>
			<li><a href="#gl_backend">Creating Cairo with the GL Backend</a></li>
			<li><a href="#line">Drawing Lines</a></li>
			<li><a href="#image">Painting with Image Files</a></li>
			<li><a href="#text">Showing Text</a></li>
			<li><a href="#delete">Deleting Cairo</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="opengl_n.htm">OpenGL ES Guide</a></li>
			<li><a href="../ui/efl/efl_n.htm">EFL Guide</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__OPENSRC__CAIRO__FRAMEWORK.html">Cairo API for Wearable Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Graphics/Cairo_Basic" target="_blank">Cairo Basic Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Graphics/Cairo_EvasGL" target="_blank">Cairo EvasGL Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Graphics/Cairo_Image_Paint" target="_blank">Cairo Image Paint Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Graphics/Cairo_Show_Text" target="_blank">Cairo Show Text Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Graphics/Cairo_Touch_Drawing" target="_blank">Cairo Touch Drawing Sample Description</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
 
  <h1>Cairo Vector Graphics</h1>
 
<p><a href="http://cairographics.org" target="_blank">Cairo</a> is a famous 2D graphics library with support for multiple output devices. It provides powerful drawing operations to create a graphical experience that you desire, including stroking, filling, compositing images, and any affine transforms (such as scale, rotation, and shear). You can also <a href="#text">render text with Cairo</a>. Within the Tizen framework, Cairo is able to output to 2 different backends: Image and GL backend.</p>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the Cairo functionality</a>.</p>


<h2 id="cairotizen" name="cairotizen">Cairo in Tizen</h2>
<p>Cairo belongs to the Graphics layer in Tizen. As shown in the following figure, the rendering functionality of Cairo is provided through the use of the APIs of the lower modules, such as Pixman or OpenGL ES.</p>

<p class="figure">Figure: Cairo within the Tizen framework</p> 
<p align="center"><img alt="Cairo within the Tizen framework" src="../../images/cairo_tizen.png" /></p> 
 
<p>The Cairo GL backend allows hardware-accelerated rendering by targeting the OpenGL ES API. The goal of the Cairo GL backend is to achieve better performance with equal functionality to the Cairo Image backend, whenever possible.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Since Tizen only exposes EvasGL binding in place of EGL, Cairo EvasGL APIs have been newly added and specified. To use the Cairo GL backend in Tizen, an application must include in its source code the <span style="font-family: Courier New,Courier,monospace">cairo-evas-gl.h</span> header file instead of <span style="font-family: Courier New,Courier,monospace">cairo-gl.h</span>.</td> 
    </tr> 
   </tbody> 
  </table>  

<h2 id="create" name="create">Creating a Cairo Surface Linked with an Evas Object</h2>

<p>To display the rendered output using Cairo APIs, an application must link a Cairo surface with an Evas object. In this context, the Cairo surface is an object that can hold the rendered result within Cairo. Cairo can draw an image on the surface appropriate for a particular backend, and Evas can access the image data from the Cairo surface.</p>

<h3>Creating a Cairo Image Surface in the Evas GL Backend</h3>

<p>To develop an application with Elementary, you create a window by using the elementary utility function, <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span>. And, in order to make the GL application use the GPU, you must call the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set()</span> function before creating the window.</p>

<p>In the Cairo Image backend, you can <a href="#image_backend">create a new Cairo image surface</a> by using the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_for_data()</span> function. The former function requires only the pixel format and dimensions to be specified, while the latter function requires additional data, such as a pointer to an image buffer (supplied by the application) in which to write the content. In order to display a result of Cairo rendering, you must also link an Evas image object to the created Cairo image surface. For this purpose, use the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> function.</p>

<p>To create the image surface:</p>

<ul>
<li>With the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create()</span> function.

<p>Call the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_get_data()</span> function before calling the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> function. The <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_get_data()</span> function returns a pointer to the raw image data of the created image surface. This pointer is used for the raw data to be linked with an Evas image object in the  <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> function.</p>

<pre class="prettyprint">
elm_config_accel_preference_set(&quot;opengl&quot;);
Evas_Object *win = elm_win_util_standard_add(&quot;Cairo Image Backend guide&quot;, &quot; Cairo Image Backend guide&quot;);
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));
evas_object_geometry_get(win, NULL, NULL, &amp;WIDTH, &amp;HEIGHT);

elm_win_resize_object_add(win, img);
evas_object_image_content_hint_set(img, EVAS_IMAGE_CONTENT_HINT_DYNAMIC);
evas_object_image_size_set(img, WIDTH, HEIGHT);
evas_object_image_colorspace_set(img, EVAS_COLORSPACE_ARGB8888);
evas_object_image_alpha_set(img, 0);
evas_object_show(img);

cairo_surface_t *cairo_surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, WIDTH, HEIGHT);
cairo_t *cairo = cairo_create(cairo_surface);
/* Cairo drawing */

cairo_surface_flush(cairo_surface);

unsigned char *imageData = cairo_image_surface_get_data(cairo_surface);
evas_object_image_data_set(img, imageData);
evas_object_image_data_update_add(img, 0, 0, WIDTH, HEIGHT);
</pre>
</li>

<li>With the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_for_data()</span> function.
<p>To use the function, you need a pointer to an image data, which can be retrieved with the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_get()</span> function. The function returns the data pointer of an image object and requires a parameter to determine whether the data is modified. If modification is enabled by setting the parameter to <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span>, Evas updates the image pixels in the next rendering cycle. Finally, you can link the pixel buffer with the image object by using the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> function.</p>

<p>Since the default backend for Evas is GL, the Cairo Image backend is much slower due to the memory copy operation, which occurs whenever the rendered result from Cairo is uploaded to Evas. To enhance the performance of Cairo Image backend to enable the zero copy feature, set the <span style="font-family: Courier New,Courier,monospace">EVAS_IMAGE_CONTENT_HINT_DYNAMIC</span> property with the <span style="font-family: Courier New,Courier,monospace">evas_object_image_content_hint_set()</span> function. For more information, see <a href="../ui/efl/evas_optimization_n.htm">Optimizing Evas</a>.</p>

<p>To update a rectangular region on the screen, the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_update_add()</span> function can be used. For more information about the image object functions of Evas, see <a href="../ui/efl/evas_objects_n.htm#image">Image Objects</a>.</p>
 
<pre class="prettyprint">
Evas_Object *win = elm_win_util_standard_add(&quot;Cairo Image Backend guide&quot;, &quot; Cairo Image Backend guide&quot;);
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));
evas_object_geometry_get(win, NULL, NULL, &amp;WIDTH, &amp;HEIGHT);

elm_win_resize_object_add(win, img);
evas_object_image_content_hint_set(img, EVAS_IMAGE_CONTENT_HINT_DYNAMIC);
evas_object_image_size_set(img, WIDTH, HEIGHT);
evas_object_image_colorspace_set(img, EVAS_COLORSPACE_ARGB8888);
evas_object_image_alpha_set(img, 0);
evas_object_show(img);

int row_stride = cairo_format_stride_for_width(CAIRO_FORMAT_ARGB32, WIDTH);
unsigned char *imageData = (unsigned char *)evas_object_image_data_get(img, EINA_TRUE);
cairo_surface_t *cairo_surface = cairo_image_surface_create_for_data(imageData, CAIRO_FORMAT_ARGB32, WIDTH, HEIGHT, row_stride);
cairo_t *cairo = cairo_create(cairo_surface);
/* Cairo drawing */

cairo_surface_flush(cairo_surface);

evas_object_image_data_set(img, imageData);
evas_object_image_data_update_add(img, 0, 0, WIDTH, HEIGHT);
</pre>
</li>
</ul>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Take care when using the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> function. You must match the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_get()</span> and <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_set()</span> functions as a pair. Since the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_get()</span> function keeps a rendering sink, the rendered result with Cairo can be reflected outside the Evas area, if the functions are not matched.</td> 
    </tr> 
   </tbody> 
  </table>  

<h3>Creating a Cairo GL Surface in the Evas GL Backend</h3>

<p>With the Cairo GL backend, you can <a href="#gl_backend">create a Cairo surface using OpenGL</a>.</p>

<p>To create the GL surface:</p>

<ol>
<li>Since an application utilizing the Cairo GL backend in Tizen is based on Evas GL, an Evas GL handler must be created with the <span style="font-family: Courier New,Courier,monospace">evas_gl_new()</span> function during the initial stage.

<p>Afterwards, the <span style="font-family: Courier New,Courier,monospace">evas_gl_config</span>, <span style="font-family: Courier New,Courier,monospace">evas_gl_surface</span>, and <span style="font-family: Courier New,Courier,monospace">evas_gl_context</span> instances are created in that order. For more information on using Evas GL, see <a href="creating_opengles_n.htm">Creating OpenGL ES Applications</a> and the <a href="opengl_n.htm">OpenGL ES</a> guide.</p>
 
<pre class="prettyprint">
Evas_Object *win = elm_win_util_standard_add(&quot;Cairo GL Backend guide&quot;, &quot; Cairo GL Backend guide&quot;);
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));

Evas_Native_Surface ns;
Evas_GL *evas_gl = evas_gl_new(evas_object_evas_get(img));
Evas_GL_Config *evas_gl_config = evas_gl_config_new();
evas_gl_config-&gt;color_format = EVAS_GL_RGBA_8888;
evas_gl_config-&gt;stencil_bits = EVAS_GL_STENCIL_BIT_8;
evas_gl_config-&gt;multisample_bits = EVAS_GL_MULTISAMPLE_MED;

Evas_GL_Surface *evas_gl_surface = evas_gl_surface_create(evas_gl, evas_gl_config, WIDTH, HEIGHT);
Evas_GL_Context *evas_gl_context = evas_gl_context_create(evas_gl, NULL);
evas_gl_native_surface_get(evas_gl, evas_gl_surface, &amp;ns);
evas_object_image_native_surface_set(img, &amp;ns);
</pre>
</li>

<li>A Cairo GL application can use the <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_dirty_set()</span> function in Tizen to show the rendered output on the screen. This function allows the rendered result to be redrawn on the screen for every animator callback in the default update refresh rate. The rendered results are saved inside the Evas object (in this example, the <span style="font-family: Courier New,Courier,monospace">img</span> object) connected to the Cairo GL backend during the Cairo drawing.

<pre class="prettyprint">
evas_object_image_pixels_dirty_set(img, EINA_TRUE);
evas_object_image_pixels_get_callback_set(img, cairo_drawing, 0);
</pre>
</li>

<li>If your application employs the Cairo GL backend in Tizen, include the <span style="font-family: Courier New,Courier,monospace">cairo-evas-gl.h</span> header file instead of <span style="font-family: Courier New,Courier,monospace">cairo-gl.h</span>.</li>

<li>To fully use the GPU acceleration, set the <span style="font-family: Courier New,Courier,monospace">CAIRO_GL_COMPOSITOR</span> property to <span style="font-family: Courier New,Courier,monospace">MSAA</span>.

<p>In addition, call the <span style="font-family: Courier New,Courier,monospace">cairo_gl_device_set_thread_aware()</span> function with <span style="font-family: Courier New,Courier,monospace">cairo_device</span> and <span style="font-family: Courier New,Courier,monospace">0</span> as input parameters to prevent unnecessary context switches. Cairo can be used in multithreaded environments, and switches out the current GL context by default after each draw finishes. Therefore, if no other thread uses Cairo for GL rendering, set the <span style="font-family: Courier New,Courier,monospace">thread_aware</span> parameter to 0.</p>
 
<p>To create the Cairo GL surface with the <span style="font-family: Courier New,Courier,monospace">cairo_gl_surface_create_for_evas_gl()</span> function, a <span style="font-family: Courier New,Courier,monospace">cairo_device</span> and an <span style="font-family: Courier New,Courier,monospace">evas_gl_surface</span> must be created beforehand:</p>
<ul>
<li>A <span style="font-family: Courier New,Courier,monospace">cairo_device</span> can be created with the <span style="font-family: Courier New,Courier,monospace">cairo_evas_gl_device_create()</span> function, which is an interface to the underlying rendering system. You also need the <span style="font-family: Courier New,Courier,monospace">evas_gl_object</span> and <span style="font-family: Courier New,Courier,monospace">evas_gl_context</span> as input parameters to the <span style="font-family: Courier New,Courier,monospace">cairo_evas_gl_device_create()</span> function.</li>
<li>A <span style="font-family: Courier New,Courier,monospace">evas_gl_surface</span> object is needed to render 2D graphics through the rendering functionality of the Cairo GL backend.</li>
</ul>

<pre class="prettyprint">
setenv(&quot;CAIRO_GL_COMPOSITOR&quot;, &quot;msaa&quot;, 1);
cairo_device_t *cairo_device = cairo_evas_gl_device_create(evas_gl, evas_gl_context);
cairo_boot_t thread_aware = 0;
cairo_gl_device_set_thread_aware(cairo_device, thread_aware);
cairo_surface_t *cairo_surface = cairo_gl_surface_create_for_evas_gl(cairo_device, evas_gl_surface, evas_gl_config, WIDTH, HEIGHT);
cairo_t *cairo = cairo_create(cairo_surface);
/* Cairo drawing */
</pre>
</li>

<li>When any drawing with the Cairo API is finished, call the <span style="font-family: Courier New,Courier,monospace">cairo_surface_flush()</span> function. It guarantees a complete rendered result, because it does any pending drawing for the surface and also restores any temporary modifications Cairo has made to the surface state. Specially, this function must be called before switching from drawing on the surface with Cairo to drawing on it directly with native APIs.

<pre class="prettyprint">
cairo_surface_flush(cairo_surface);
</pre>
</li>
</ol>

<h2 id="draw" name="draw">Drawing with Cairo</h2>

<p>Drawing with Cairo to a surface is accomplished by calling the common backend interface functions. These rendering functions must be called properly for each backend. For more information about the common rendering functions, see the <a href="http://www.cairographics.org/manual/" target="_blank">Cairo: A Vector Graphics Library</a> manual.</p>

<p>The following sections introduce a general example for drawing a line using Cairo APIs, including some special guidelines. Occasionally, you need to adhere to special guidelines to overcome any Cairo drawing limitations in Tizen.</p>

<h3>Using a Surface to Source Pattern</h3>

<p>Within the Cairo API, some functions, such as <span style="font-family: Courier New,Courier,monospace">cairo_set_source_surface()</span> and <span style="font-family: Courier New,Courier,monospace">cairo_mask_surface()</span>, use a surface to set the source pattern. However, the performance of these functions in Tizen, under certain circumstances, can be heavily degraded if the source surface is created using the <span style="font-family: Courier New,Courier,monospace">cairo_gl_surface_create_for_evas_gl()</span> function.</p>

<p>In Tizen, you can create a Cairo GL surface with either the <span style="font-family: Courier New,Courier,monospace">cairo_gl_surface_create()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_gl_surface_create_for_evas_gl()</span> function. To prevent performance issues, always create the source surface with the <span style="font-family: Courier New,Courier,monospace">cairo_gl_surface_create()</span> function.</p>
 
<pre class="prettyprint">
/* Create a surface for destination */
cairo_surface_t *cairo_surface = cairo_gl_surface_create_for_evas_gl(cr, evas_gl_surface, evas_gl_config, WIDTH, HEIGHT);

Evas_GL_Config *evas_gl_config_source = evas_gl_config_new();
evas_gl_config_source-&gt;color_format = EVAS_GL_RGBA_8888;
evas_gl_config_source-&gt;stencil_bits = EVAS_GL_STENCIL_BIT_1;
evas_gl_config_source-&gt;multisample_bits = EVAS_GL_MULTISAMPLE_LOW;
evas_gl_surface_source = evas_gl_surface_create(evas_gl, evas_gl_config_source, WIDTH, HEIGHT);

/* Create a surface for source */
cairo_surface_t *image_surface = cairo_image_surface_create_from_png(image);
cairo_surface_t *gl_surface = cairo_gl_surface_create(cairo_device, CAIRO_CONTENT_COLOR_ALPHA, image_width, image_height);
cairo_t *cairo = cairo_create(gl_surface);
cairo_set_source_surface(cairo, image_surface, 0, 0);
cairo_paint(cairo);
cairo_pattern_create_for_surface(gl_surface);
</pre>

<h3>Support for Reading Various Image Files</h3>

<p>Cairo does not support a functionality for reading image files in JPEG or SPI format; only PNG is supported. With a PNG file, you can use the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_from_png()</span> function to <a href="#image">make a new image surface from the image</a>. However, handle this function with care, because it is experimental and only offers very simple functionality for reading PNG files.</p>
 
<pre class="prettyprint">
cairo_surface_t *image = cairo_image_surface_create_from_png(&quot;test_image.png&quot;);
cairo_set_source_surface(cairo, image, 0, 0);
cairo_paint(cairo);
cairo_surface_destroy(image);
</pre>

<p>On the other hand, Cairo applications in Tizen can read JPEG and other image formats by using the Evas APIs. Evas supports image loaders for various formats as plug-in modules:</p>
<ol>
<li>Create an image buffer as a temporary buffer for decoding an image file with the <span style="font-family: Courier New,Courier,monospace">evas_object_image_add()</span> function.</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">evas_object_image_file_set()</span> function to set the image file on the object (in this example, the <span style="font-family: Courier New,Courier,monospace">decoded_img</span> object).</li>
<li>Use other Evas functions for the image object to manage it. Since the temporary buffers are only used for the decoded content of the given image file (in this example, <span style="font-family: Courier New,Courier,monospace">inline_buffr</span> and <span style="font-family: Courier New,Courier,monospace">decoded_img</span>), you do not need to call the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function. For more information about the image object functions, see <a href="../ui/efl/evas_objects_n.htm#image">Image Objects</a>.</li>
</ol>

<pre class="prettyprint">
evas_object_geometry_get(win, NULL, NULL, &amp;surface_w, &amp;surface_h);
Evas_Object *inline_buffr = elm_win_add(win, &quot;Img Read&quot;, ELM_WIN_INLINED_IMAGE);
evas_object_move(inline_buffr, 0, 0);
evas_object_resize(inline_buffr, surface_w, surface_h);

Evas_Object *decoded_img = evas_object_image_add(evas_object_evas_get(inline_buffer)); /* As a temporary buffer */
evas_object_image_file_set(decoded_img, &quot;test_image.jpeg&quot;, NULL);
evas_object_image_size_get(decoded_img, &amp;w, &amp;h);
evas_object_image_fill_set(decoded_img, 0, 0, w, h);
evas_object_image_filled_set(decoded_img, EINA_TRUE);
evas_object_resize(decoded_img, w, h);
</pre>

<p>After the image file reading is complete, you can create a Cairo surface for the image object by using the <span style="font-family: Courier New,Courier,monospace">evas_object_image_data_get()</span> and <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_for_data()</span> functions. The Cairo surface is used to create a pattern with the <span style="font-family: Courier New,Courier,monospace">cairo_set_source_surface()</span> function for the Cairo drawing. In addition, to prevent memory leaks, <a href="#delete">delete the temporary buffers that are no longer used</a>.</p>
 
<pre class="prettyprint">
src_buffer = (unsigned char *)evas_object_image_data_get(decoded_img, EINA_TRUE);
cairo_surface_t *source = cairo_image_surface_create_for_data(src_buffer, CAIRO_FORMAT_ARGB32, w, h,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_stride_get(decoded_img));
cairo_set_source_surface(cr, source, 0, 0);
cairo_paint(cr);

evas_object_del(inline_buffr);
cairo_surface_destroy(img);
</pre>

<h3>Drawing a Line</h3>

<p>The following example <a href="#line">creates a line drawing with a rectangle</a>, and a path that uses straight sections, arcs, and Bézier curves.</p>

<p class="figure">Figure: Rectangle and path drawing with Cairo</p> 
<p align="center"><img alt="Rectangle and path drawing with Cairo" src="../../images/cairo_draw.png" /></p> 

<p>To draw lines with Cairo APIs:</p>

<ol>
<li>Set the line width and color.
<p>In this example, the line width is 2 and the color is opaque red:</p>

<pre class="prettyprint">
cairo_set_line_width(cairo, 2);
cairo_set_source_rgba(cairo, 1.0, 0.0, 0.0, 1.0);
</pre>
</li>

<li>To create the path:
<ol type="a">
<li>To set the starting point with a user-specified offset, use the <span style="font-family: Courier New,Courier,monospace">cairo_translate()</span> function to modify the user-space origin (x, y) by translating it with the current transformation matrix (CTM):

<pre class="prettyprint">
cairo_translate(cairo, 40, 40);
</pre>
</li>

<li>To draw a line from point (100,100) to point (200,150) on a surface, use the <span style="font-family: Courier New,Courier,monospace">cairo_move_to()</span> and <span style="font-family: Courier New,Courier,monospace">cairo_line_to()</span> functions:
 
<pre class="prettyprint">
cairo_move_to(cairo, 100, 100);
cairo_line_to(cairo, 200, 150);
</pre>
</li>

<li>To add a line on a path from the current point to a point at the offset (dx, dy), use the <span style="font-family: Courier New,Courier,monospace">cairo_rel_line_to()</span> function. In this example, the offset is (100, -50).
 
<pre class="prettyprint">
cairo_rel_line_to(cairo, 100, -50);
</pre>
</li>

<li>To draw a circular arc of a given radius on the current path, use the <span style="font-family: Courier New,Courier,monospace">cairo_arc()</span> function.
<p>In this example, the radius is (100 * sqrt(2)), the arc is centered at (200, 200), begins at an angle (-0.25 * M_PI) and proceeds in the direction of increasing angles to end at an angle (0.25 * M_PI). If the end angle is less than the begin angle, the end angle is progressively increased by 2*M_PI until it is greater than the begin angle.</p>

<pre class="prettyprint">
cairo_arc(cairo, 200, 200, 100 * sqrt(2), -0.25 * M_PI, 0.25 * M_PI);
</pre>
</li>

<li>To draw a cubic Bézier spline, use the <span style="font-family: Courier New,Courier,monospace">cairo_rel_curve_to()</span> function.
<p>In this example, the offsets of (-100, -50) and (-100, 50) are used as the control points. After this function call, the current point is offset by (-200, 0).</p>

<pre class="prettyprint">
cairo_rel_curve_to(cairo, -100, -50, -100, 50, -200, 0);
</pre>
</li>

<li>To add a line segment on the path from the current point to the beginning of the current sub-path, use the <span style="font-family: Courier New,Courier,monospace">cairo_close_path()</span> function. After this call, the current point is repositioned at the joined endpoint of the sub-path.
<p>The behavior of the <span style="font-family: Courier New,Courier,monospace">cairo_close_path()</span> function differs from the <span style="font-family: Courier New,Courier,monospace">cairo_line_to()</span> function with the equivalent coordinates very little: in the case of stroking, a line joining the final and initial segments of the sub-path is also created.</p>

<pre class="prettyprint">
cairo_close_path(cairo);
</pre>
</li>
</ol></li>

<li>To draw a rectangle, use the <span style="font-family: Courier New,Courier,monospace">cairo_rectangle()</span> function.
<p>In this example, the function draws a rectangle starting from the point (0, 0) with the width and height of 400 px.</p>
 
<pre class="prettyprint">
cairo_rectangle(cairo, 0, 0, 400, 400);
</pre>
</li>

<li>If you need to create a stroke on a path, the <span style="font-family: Courier New,Courier,monospace">cairo_stroke()</span> function is a drawing operator that draws a stroke on the current path in accordance to the current line width and line color. After the function call, the current path is cleared from the Cairo context.
 
<pre class="prettyprint">
cairo_stroke(cairo);
</pre>
</li>

<li>To ensure that any pending Cairo operations are drawn, use the <span style="font-family: Courier New,Courier,monospace">cairo_surface_flush()</span> function after finishing the Cairo drawing:
 
<pre class="prettyprint">
cairo_surface_flush(surface);
</pre>
</li>

<li>Destroy the Cairo objects when you terminate the application:
 
<pre class="prettyprint">
cairo_destroy(cairo);
cairo_surface_destroy(surface);
</pre>
</li>
</ol>

<h2>Warm-up</h2>
<p>Become familiar with the Cairo API basics by learning about:</p>
<ul>
			<li><a href="#prerequisites">Prerequisites</a>
			<p>Prepare your application to use the Cairo functionality.</p></li>
			<li><a href="#image_backend">Creating Cairo with the Image Backend</a>
			<p>Create a Cairo context and surface with the image backend.</p></li>
			<li><a href="#gl_backend">Creating Cairo with the GL Backend</a>
			<p>Create a Cairo context and surface with the GL backend.</p></li>
			<li><a href="#line">Drawing Lines</a>
			<p>Draw straight and curved lines.</p></li>
			<li><a href="#image">Painting with Image Files</a>
			<p>Use PNG image files to draw surfaces.</p></li>
			<li><a href="#text">Showing Text</a>
			<p>Show a text with a specific font and properties on a surface.</p></li>
			<li><a href="#delete">Deleting Cairo</a>
			<p>When no longer needed, delete the Cairo resources.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>
<p>To enable your application to use the Cairo functionality:</p>
<ol>
<li>Before using the Cairo library in Tizen:
<ul>
<li>You must understand the basic concepts of Cairo. For more information, see the <a href="http://www.cairographics.org/tutorial/" target="_blank">Cairo Tutorial in cairographics.org</a>.</li>
<li>In the Tizen framework, Cairo can use 2 different backends: image backend and Evas GL backend. You must check which backend is suitable for your work. For more information, see the <a href="#create">Creating a Cairo Surface Linked with an Evas Object</a>.</li>
<li>In creating native UI applications in Tizen, make sure you understand <a href="../ui/efl/efl_n.htm">EFL and its features</a>.</li>
</ul>
</li>
<li>To use the functions and data types of the Cairo image and GL backends, include the <span style="font-family: Courier New,Courier,monospace">&lt;cairo.h&gt;</span> header file in your application. For the Cairo GL backend, you also need the <span style="font-family: Courier New,Courier,monospace">&lt;cairo-evas-gl.h&gt;</span>, and <span style="font-family: Courier New,Courier,monospace">&lt;Evas_GL.h&gt;</span> header files.
<pre class="prettyprint">
#include &lt;cairo.h&gt;

/* For the Cairo GL backend */
#include &lt;cairo-evas-gl.h&gt;
#include &lt;Evas_GL.h&gt;
</pre>
</li>
</ol>

<h2 id="image_backend">Creating Cairo with the Image Backend</h2>

<p>To create a Cairo context and surface with the image backend:</p>
<ol>
<li>Create the window and the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image.
<p>Place an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image into your application&#39;s main window. For more information about creating and placing an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image, see <a href="../ui/efl/evas_basic_objects_n.htm">Basic Manipulation of Evas Objects</a> and the <a href="../ui/efl/evas_images_n.htm">Drawing Simple Images Using Evas Objects</a>.</p>
<pre class="prettyprint">
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));
elm_win_resize_object_add(win, img);
evas_object_image_content_hint_set(img, EVAS_IMAGE_CONTENT_HINT_DYNAMIC);
evas_object_image_size_set(img, WIDTH, HEIGHT);
evas_object_resize(img, WIDTH, HEIGHT);
evas_object_show(img);
</pre>
</li>
<li>Create the Cairo context and surface.
<p>To use the Cairo API, create the Cairo context and surface using the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image. The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image is used in the example code as a rendering destination.</p>
<pre class="prettyprint">
int row_stride = cairo_format_stride_for_width(CAIRO_FORMAT_ARGB32, WIDTH);
unsigned char *imageData = (unsigned char*)evas_object_image_data_get(img, EINA_TRUE);
cairo_surface = cairo_image_surface_create_for_data(imageData, CAIRO_FORMAT_ARGB32, WIDTH, HEIGHT, row_stride);
cairo = cairo_create(cairo_surface);
</pre>
</li>
</ol>

<h2 id="gl_backend">Creating Cairo with the GL Backend</h2>

<p>For the Cairo GL backend in Tizen, you must know OpenGL. For more information, see the <a href="opengl_n.htm">OpenGL ES</a> guide.</p>
<p>To create a Cairo context, surface, and device with the GL backend:</p>
<ol>
<li>Create the window, <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image, and Evas GL.
<p>Place an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image in the application&#39;s main window, and create and initialize Evas GL. Call the <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_get_callback_set()</span> function to initialize the Evas GL handle. The <span style="font-family: Courier New,Courier,monospace">cairo_drawing()</span> function must be set as the input parameter. For more information about creating and initializing Evas GL, see <a href="opengl_n.htm#creating">Creating the Elm Window and EvasGL</a>.</p>
<pre class="prettyprint">
Evas_Object *img = evas_object_image_filled_add(evas_object_evas_get(win));

Evas_Native_Surface ns;
Evas_GL *evas_gl = evas_gl_new(evas_object_evas_get(img));
Evas_GL_Config *evas_gl_config = evas_gl_config_new();
evas_gl_config-&gt;color_format = EVAS_GL_RGBA_8888;

evas_gl_surface = evas_gl_surface_create(evas_gl, evas_gl_config, WIDTH, HEIGHT);
evas_gl_context = evas_gl_context_create(evas_gl, NULL);
evas_gl_native_surface_get(evas_gl, evas_gl_surface, &amp;ns);
evas_object_image_native_surface_set(img, &amp;ns);
evas_object_image_pixels_get_callback_set(img, cairo_drawing, 0);
</pre>
</li>
<li>Create the Cairo context, surface, and device.
<p>Use the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image and Evas GL context to create the Cairo context and surface. Cairo can be used in a multi-threaded environment. By default, Cairo switches out the current GL context after each draw finishes. If no other thread uses Cairo for rendering, Cairo can use the non-thread-aware mode with the <span style="font-family: Courier New,Courier,monospace">cairo_gl_device_set_thread_aware()</span> function&#39;s second parameter set to 0.</p>
<pre class="prettyprint">
setenv(&quot;CAIRO_GL_COMPOSITOR&quot;, &quot;msaa&quot;, 1);
cairo_device = (cairo_device_t*)cairo_evas_gl_device_create(evas_gl, evas_gl_context);
cairo_gl_device_set_thread_aware(cairo_device, 0);
cairo_surface = (cairo_surface_t*)cairo_gl_surface_create_for_evas_gl(cairo_device, evas_gl_surface, evas_gl_config, WIDTH, HEIGHT);
cairo = cairo_create(cairo_surface);
</pre>
</li>
</ol>

<h2 id="line">Drawing Lines</h2>

<p>When drawing an image with Cairo, you must prepare the context (nouns) for each of the drawing verbs. For example, if you want to use the <span style="font-family: Courier New,Courier,monospace">cairo_stroke()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_fill()</span> function, create a path first. Similarly, in case of using the <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function, you must position your text by its insertion point. A primary source is needed for using the <span style="font-family: Courier New,Courier,monospace">cairo_paint()</span> function and a second source pattern or surface is prepared for using the <span style="font-family: Courier New,Courier,monospace">cairo_mask()</span> function. For more information, see the <a href="http://www.cairographics.org/tutorial/" target="_blank">Cairo Tutorial in cairographics.org</a>.</p>
<p>The following figure shows an example of lines drawn using Cairo.</p>
<p class="figure">Figure: Lines drawn using Cairo</p> 
<p align="center"><img alt="Lines drawn using Cairo" src="../../images/cairo_draw_lines.png" /></p>

<p>To draw lines:</p>
<ol>
<li>Prepare the sources.
<p>Prior to drawing a line, prepare and select sources. There are 3 main sources in Cairo - colors, gradients, and images:</p>
<ul>
<li>Colors use a uniform hue and opacity for the entire source. You can select these without any preparation with the <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgb()</span> function and <span style="font-family: Courier New,Courier,monospace">cairo_set_source_rgba()</span> functions.
<pre class="prettyprint">
cairo_set_source_rgba(cairo, 1.0, 0.0, 0.0, 1.0);
</pre>
</li>
<li>Gradients describe a progression of colors by setting a start and stop reference location and a series of &quot;stops&quot; along the way. There are linear and radial gradients built from 2 points. Stops are added to the gradient with the <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgb()</span> and <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgba()</span> functions which take a color like the <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgb()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_add_color_stop_rgba()</span> function, as well as an offset to indicate where it lies between the reference locations.</li>
<li>Images include both surfaces loaded from the existing files with the <span style="font-family: Courier New,Courier,monospace">cairo_image_surface_create_from_png()</span> function and surfaces created from within Cairo as an earlier destination. For more information about these Cairo APIs, see <a href="http://www.cairographics.org/manual/cairo-cairo-pattern-t.html" target="_blank">the cairo_pattern_t in cairographics.org</a>.</li>
</ul>
</li>
<li>Set the starting point.
<p>Cairo uses a connect-the-dots style system for creating paths. To draw a line from a starting point to an ending point, set the starting point of the line with the <span style="font-family: Courier New,Courier,monospace">cairo_move_to()</span> function. This sets the current reference point without making the path connect the previous point to it.</p>
<pre class="prettyprint">
cairo_move_to(cairo, 100, 100);
</pre>
</li>
<li>Draw the shapes.
<ul>
<li>Draw a straight line.
<p>After setting a starting point as (100, 100), you can draw a straight line to an ending point using the <span style="font-family: Courier New,Courier,monospace">cairo_line_to()</span> or <span style="font-family: Courier New,Courier,monospace">cairo_rel_line_to()</span> function. With these functions, the ending point is set as absolute coordinates and relative coordinates respectively, Here, (200, 150) is the absolute coordinates and (100, -50) is the relative coordinates.</p>
<pre class="prettyprint">
cairo_line_to(cairo, 200, 150);
cairo_rel_line_to(cairo, 100, -50);
</pre>
</li>
<li>Draw an arc.
<p>Arcs are parts of the outside of a circle. The point you directly specify is the center of the circle that makes up the addition to the path. Both a starting and an ending point on the circle must be specified, and these points are connected either clockwise using the <span style="font-family: Courier New,Courier,monospace">cairo_arc()</span> or counter-clockwise using the <span style="font-family: Courier New,Courier,monospace">cairo_arc_negative()</span> function.</p>
<pre class="prettyprint">
cairo_arc(cairo, 200, 200, 100 * sqrt(2), -0.25 * M_PI, 0.25 * M_PI);
</pre>
</li>
<li>Draw a curve.
<p>Curves in Cairo are cubic Bézier splines. They start at the current reference point and smoothly follow the direction of 2 other points (without going through them) to get to a third specified point. Like lines, there are both absolute (<span style="font-family: Courier New,Courier,monospace">cairo_curve_to()</span>) and relative (<span style="font-family: Courier New,Courier,monospace">cairo_rel_curve_to()</span>) functions. Note that the relative variant specifies all points relative to the previous reference point, rather than each relative to the preceding control point of the curve.</p>
<pre class="prettyprint">
cairo_rel_curve_to(cairo, -100, -50, -100, 50, -200, 0);
</pre>
</li>
<li>Close the path.
<p>Cairo can also close the path by drawing a straight line to the beginning of the current sub-path. This straight line can be useful for the last edge of a polygon.</p>
<pre class="prettyprint">
cairo_close_path(cairo);
</pre>
</li>
</ul>
</li>
</ol>

<h2 id="image">Painting with Image Files</h2>

<p>With images, Cairo supports the functionality only for the PNG format. These functions for PNG are experimental, so use them with care. For more information about PNG support, see <a href="http://www.cairographics.org/manual/cairo-PNG-Support.html" target="_blank">PNG Support in cairographics.org</a>.</p>

<p>The following figure shows an example of painting with an image file.</p>
<p class="figure">Figure: Painting with image file</p> 
<p align="center"><img alt="Lines drawn using Cairo" src="../../images/cairo_image_png_sample.png" /></p>

<p>To paint with image files:</p>
<ol>
<li>Get the image resource.
<p>The following code snippet shows how to prepare image data for your application. To get an application&#39;s resource image data, use the <span style="font-family: Courier New,Courier,monospace">app_get_resource_path()</span> function. This gets a stored PNG image file path to use as a resource. For more information about the <span style="font-family: Courier New,Courier,monospace">app_get_resource_path()</span> function, see the App Common API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__APP__COMMON__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__APP__COMMON__MODULE.html">wearable</a> applications.</p>
<pre class="prettyprint">
char image_filepath[256];
char *source_filename = &quot;image.png&quot;;
char *resource_path = app_get_resource_path();
snprintf(image_filepath, 256, &quot;%s/%s&quot;, resource_path, source_filename);
free(resource_path);
</pre>
</li>
<li>Create the source surface.
<p>To paint using the image data from the PNG file, first create a source surface. The image data is a source surface to paint on the destination surface.</p>
<pre class="prettyprint">
cairo_surface_t *image = cairo_image_surface_create_from_png(image_filepath);
cairo_set_source_surface(cairo, image, 0, 0);
</pre>
</li>
<li>Paint the Cairo surface.
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_paint()</span> function uses a mask that transfers the entire source to the destination. It can be considered an infinitely large mask, or no mask, but the result is the same. To set a compositing operator, use the <span style="font-family: Courier New,Courier,monospace">cairo_set_operator()</span> and paint a Cairo surface using the source pattern obtained before. For more information about the <span style="font-family: Courier New,Courier,monospace">cairo_set_operator()</span> function, see <a href="http://www.cairographics.org/operators/" target="_blank">operators in cairographics.org</a>.</p>
<pre class="prettyprint">
cairo_set_operator(cairo, CAIRO_OPERATOR_SOURCE);
cairo_paint(cairo);
</pre>
</li>
</ol>

<h2 id="text">Showing Text</h2>

<p>In Cairo, the <span style="font-family: Courier New,Courier,monospace">cairo_font_face_t</span> class represents a particular font at a particular weight, slant, and other characteristics. For more information for using the cairo font, see <a href="http://www.cairographics.org/manual/cairo-cairo-font-face-t.html" target="_blank">cairo_font_face_t of cairographics.org</a>.</p>

<p>The following figure shows an example of text shown using Cairo.</p>
<p class="figure">Figure: Text shown using Cairo</p> 
<p align="center"><img alt="Text shown using Cairo" src="../../images/cairo_text_sample.png" /></p>

<p>To show text:</p>
<ol>
<li>Prepare a text to use as a resource:
<pre class="prettyprint">
const char *utf8 = &quot;Hello, Tizen!&quot;;
</pre>
</li>
<li>Set text configurations.
<p>In this example, create a font face implicitly using the <span style="font-family: Courier New,Courier,monospace">cairo_select_font_face()</span> function. The text is a kind of &quot;mask&quot; you are about to work with. To use a mask, you need a font type and font size. Set the font type as &quot;Sans&quot;, and font size as 52.</p>
<pre class="prettyprint">
cairo_select_font_face(cairo, &quot;Sans&quot;, CAIRO_FONT_SLANT_NORMAL, CAIRO_FONT_WEIGHT_NORMAL);
cairo_set_font_size(cairo, 52.0);
</pre>
</li>
<li>Show the text.
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function forms the mask from the text. You can think of the <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function as a shortcut for creating a path with the <span style="font-family: Courier New,Courier,monospace">cairo_text_path()</span> and using the <span style="font-family: Courier New,Courier,monospace">cairo_fill()</span> function to transfer it.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">cairo_show_text()</span> function caches glyphs, and it is much more efficient if you work with a lot of text. Note that this function is experimental and must be handled with care. For more information about Cairo text, see the <a href="http://www.cairographics.org/manual/cairo-text.html" target="_blank">description of cairo_text</a>.</p>
<pre class="prettyprint">
cairo_text_extents_t extents;
cairo_text_extents(cairo, utf8, &amp;extents);
cairo_move_to(cairo, 10, 10);
cairo_show_text(cairo, utf8);
</pre>
</li>
</ol>

<h2 id="delete">Deleting Cairo</h2>

<p>Delete the Cairo resources when they are no longer needed.</p>
<p>In the <span style="font-family: Courier New,Courier,monospace">cairo_destroy()</span> function, a reference count for a Cairo context is decreased by one. If the count is to be zero, the Cairo context and all associated resources must be freed. The same steps apply for the <span style="font-family: Courier New,Courier,monospace">cairo_surface_destroy()</span> function as well.</p>
<pre class="prettyprint">
cairo_surface_destroy(surface);
cairo_destroy(cairo);
</pre>
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>