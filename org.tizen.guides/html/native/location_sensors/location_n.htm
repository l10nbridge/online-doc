<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Location Information</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>	
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#service">Location Service</a></li>
			<li><a href="#method">Location Methods</a></li>
			<li><a href="#settings">Location Settings</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#start">Starting the Location Service</a></li>
			<li><a href="#last_known">Getting the Last Known Location</a></li>
			<li><a href="#update">Getting Location Updates</a></li>
			<li><a href="#bound">Using Location Bounds</a></li>
			<li><a href="#satellite">Getting Satellite Information</a></li>
			<li><a href="#track">Tracking the Route</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">Location Manager API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">Location Manager API for Wearable Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Locations/Gps_consumer" target="_blank">GPS Consumer Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Locations/Gps_service" target="_blank">GPS Service Sample Description</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">


  <h1>Location Information</h1>
  
  <p>Location information has a geographical point on the Earth, and optionally location-related information can also contain information about altitude, accuracy about the geographical point and altitude, and the user speed and course of direction. The location manager features include managing location information on the device.</p> 
  <p>The main features of the Location Manager API include:</p> 
	<ul> 
	<li><a href="#service">Enabling the location service</a></li>
	<li><a href="#method">Defining the location method</a></li>
	<li><a href="#settings">Defining the location settings</a></li>
	</ul>  
  
  <h2 id="service" name="service">Location Service</h2> 

  <p>The Location Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">wearable</a> applications) provides the current location using the location sources specified in the <a href="#method">location method</a>. You can <a href="#start">use the location service</a> to manage location information in various ways.</p>   
  <p>With the location manager, you can:</p> 
  <ul> 
   <li>Get the current location</li> 
   <li><a href="#last_known">Get the last known location</a></li> 
   <li><a href="#update">Get location updates</a></li>
   <li><a href="#bound">Use location bounds</a></li>
   <li><a href="#satellite">Retrieve satellite information</a></li>
   <li><a href="#track">Track routes</a></li>
  </ul>
 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the location manager functionality</a>.</p>
 
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To test the Tizen location-based services on the Emulator, provide location data (longitude and latitude) using the Event Injector.
	 <p>However, satellite data is not supported on the Emulator, so GPS status data is available only on a target device.</p></td> 
    </tr> 
   </tbody> 
  </table>  
  
  <p>Asynchronous location-related updates and region monitoring notifications are implemented with callback interfaces (functions whose names end with &quot;cb&quot;).</p> 
	<p>You can use the location state and updates as follows:</p> 
  <ul> 
   <li><p>If the location manager is working correctly, the location state is set to <span style="font-family: Courier New,Courier,monospace">LOCATIONS_SERVICE_ENABLED</span>. The device can receive notifications about location updates and accuracy changes only in this update state.</p></li> 
	<li><p>If the location manager is unable to run on the requested device due to weak radio reception, the location update state is set to <span style="font-family: Courier New,Courier,monospace">LOCATIONS_SERVICE_DISABLED (LOCATIONS_ERROR_SERVICE_NOT_AVAILABLE)</span>. If this situation persists for a longer period, it is recommended to stop the service and try again to conserve the device battery.</p></li> 
   <li><p>If the user revokes a permission for the application to use location information, the location update state is set to <span style="font-family: Courier New,Courier,monospace">LOCATIONS_ACCESS_STATE_DENIED</span>, and the location manager stops all on-going services with the application. The application can request the device user for a permission to continue the stopped service.</p></li> 
  </ul> 
  
	<h2 id="method" name="method">Location Methods</h2>

<p>The location method is used to specify the desired quality of service of the location manager. For example, a location-based weather forecast application can require location-related information just to distinguish a city or a neighborhood, while a GPS navigation application can require the highest quality level to pinpoint a map location. Selecting the appropriate quality level not only helps the location manager to run the system efficiently, but also leads to a good user experience.</p> 
<p>Using the <span style="font-family: Courier New,Courier,monospace">location_method_e</span> structure (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#gaec8a29c8b701753a7c9d91f4f8acfac5">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#gaec8a29c8b701753a7c9d91f4f8acfac5">wearable</a> applications) allows your application to specify the following methods of location positioning system:</p>
  <ul> 
   <li>GPS, which uses the global positioning system</li> 
   <li>WPS, which uses the Wi-Fi positioning system</li>
   <li>Hybrid, which selects the best method available at the moment</li> 
  </ul> 
  
<p>Based on the desired method, the location manager provides best-effort location-based services, such as an asynchronous location update or region monitoring notification.</p> 

	<h2 id="settings" name="settings">Location Settings</h2> 

<p>Tizen provides a robust way of controlling the usage of the location data through the device location settings. The following figure shows the various options for enabling or disabling specific positioning technologies.</p> 
    <p class="figure">Figure: Location settings and indicator</p> 
<p align="center"><img alt="Location settings and indicator" src="../../images/location_setting_and_indicator.png" /></p> 

<p>The location-related functions work differently based on whether the location settings are used.</p>

<p>The <strong>GPS</strong> setting controls the Global Positioning System usage. It uses GPS satellite signals and provides accurate positioning services, generally outdoors. The <strong>Wireless networks</strong> setting enables the usage of network-based positioning technology, which includes Wi-Fi and cell tower-based positioning, and improves the coverage of positioning services to indoors.</p> 
<p>All location settings are initially enabled, if the device supports GPS. To disable them, the user must manually toggle the buttons. The manual task required from the user is understood as an implicit user consent.</p> 

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Either the <strong>GPS</strong> or the <strong>Wireless networks</strong> setting must be enabled to retrieve the current location of the device user.</td> 
    </tr> 
   </tbody> 
  </table> 
  <p> Once the <strong>GPS</strong> or <strong>Wireless networks</strong> setting is enabled, the user can control the usage of the location data for each application separately using the privacy setting. If the privacy setting of the application is disabled, location data is no longer available for the application.</p> 
  <p>The applications whose location setting is enabled can get the current and last known location of the user.</p> 

<h2>Warm-up</h2> 
  <p>Become familiar with the Location Manager API basics by learning about:</p>
		<ul>
		<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the location manager functionality.</p></li>
		<li><a href="#start">Starting the Location Service</a>
		<p>Start the location service, and stop it when no longer needed.</p></li>
		<li><a href="#last_known">Getting the Last Known Location</a>
		<p>Retrieve the last known position of the device.</p></li>

		<li><a href="#update">Getting Location Updates</a>
		<p>Retrieve the device position (given as coordinates) and track position updates.</p></li>

		<li><a href="#bound">Using Location Bounds</a>
		<p>Create a location area and monitor when the device crosses the area bounds.</p></li>

		<li><a href="#satellite">Getting Satellite Information</a>
		<p>Retrieve information on satellites, which connect with the device to get location information.</p></li>
		</ul>
  
  <h2>Follow-up</h2> 
  <p>Once we have learned the basics of the Location Manager API, we can now move on to more advanced tasks, including:</p>
		<ul>
		<li><a href="#track">Tracking the Route</a>
		<p>Get information about the current position, velocity, and distance.</p></li>
		</ul>

		
		<h2 id="prerequisites">Prerequisites</h2>
		
<p>To use the functions and data types of the Location Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;locations.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;locations.h&gt;
</pre>

<h2 id="start" name="start">Starting the Location Service</h2>

<p>To start the location service:</p>
<ol>
<li><p>Create a location manager handle using the <span style="font-family: Courier New,Courier,monospace">location_manager_create()</span> function before you use the location service.</p> 
<p>In this example, the GPS is used as the source of the position data, so the first parameter is <span style="font-family: Courier New,Courier,monospace">LOCATIONS_METHOD_GPS</span>. You can use other values of the <span style="font-family: Courier New,Courier,monospace">location_method_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#gaec8a29c8b701753a7c9d91f4f8acfac5">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#gaec8a29c8b701753a7c9d91f4f8acfac5">wearable</a> applications), such as <span style="font-family: Courier New,Courier,monospace;">LOCATIONS_METHOD_HYBRID</span> or <span style="font-family: Courier New,Courier,monospace;">LOCATIONS_METHOD_WPS</span>. <span style="font-family: Courier New,Courier,monospace;">LOCATIONS_METHOD_HYBRID</span> uses both <span style="font-family: Courier New,Courier,monospace;">LOCATIONS_METHOD_GPS</span> and <span style="font-family: Courier New,Courier,monospace;">LOCATIONS_METHOD_WPS</span>, but the latter is less accurate.</p>
<pre class="prettyprint">
location_manager_h manager;
location_manager_create(LOCATIONS_METHOD_GPS, &amp;manager);
</pre>
<p>Each location manager is an independent service. Multiple location managers can be created in the same application to provide different services, such as GPS and Bluetooth. Callbacks are set for a given location manager and are called only if the service is started for their manager.</p></li>

<li><p>Start the location service using the <span style="font-family: Courier New,Courier,monospace">location_manager_start()</span> function. This call is asynchronous and only initiates the process of starting the location manager service. Once the manager is started, the registered callbacks are invoked when their corresponding events take place. To know when the service becomes enabled, use the <span style="font-family: Courier New,Courier,monospace">location_manager_set_service_state_changed_cb()</span> function.</p>
<pre class="prettyprint">
location_manager_start(manager);
</pre></li>

<li><p>Using the location service is power consuming, so if the service is not used, stop updating the location using the <span style="font-family: Courier New,Courier,monospace">location_manager_stop()</span> function. Call the <span style="font-family: Courier New,Courier,monospace">location_manager_start()</span> function again if the update position information is needed.</p>
<pre class="prettyprint">
location_manager_stop(manager);
</pre></li>

<li><p>At the end of the application, destroy all used resources, such as the location manager (<span style="font-family: Courier New,Courier,monospace">location_manager_destroy()</span>):</p>
<pre class="prettyprint">
location_manager_destroy(manager);
manager = NULL;
</pre>
<p>If you destroy the handle, there is no need to call the <span style="font-family: Courier New,Courier,monospace">location_manager_stop()</span> function to stop the service. The service is automatically stopped. Also, you do not have to unset previously set callbacks.</p></li></ol>  

<h2 id="last_known" name="last_known">Getting the Last Known Location</h2>

<p>To retrieve synchronously the last known location of the device:</p>
<ol>
<li>Register a callback function for location service state changes and start the location manager:
<pre class="prettyprint">
ret = location_manager_set_service_state_changed_cb(manager, __state_changed_cb, NULL);
ret = location_manager_start(manager);
</pre>
	<p>The <span style="font-family: Courier New,Courier,monospace">__state_changed_cb()</span> function is a callback, which is called when the status of the location service state changes. </p>
<pre class="prettyprint">
static location_service_state_e service_state;
static void
__state_changed_cb(location_service_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;service_state = state;
}
</pre>
</li>
<li>After starting the location manager, call the <span style="font-family: Courier New,Courier,monospace">location_manager_get_last_location()</span> function to get the last location information, including the altitude, latitude, and direction:
<pre class="prettyprint">
double altitude;
double latitude;
double longitude;
double climb;
double direction;
double speed;
double horizontal;
double vertical;
location_accuracy_level_e level;
time_t timestamp;
ret = location_manager_get_last_location(manager, &amp;altitude, &amp;latitude, &amp;longitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;climb, &amp;direction, &amp;speed, &amp;level, &amp;horizontal,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;vertical, &amp;timestamp);
</pre>

<p>The function returns the last location stored in the system. When the current location is not fixed, the last location may not be the current location, but the old location.</p> 
<p>Use this function instead of repeatedly requesting current locations to spare the location manager from running costly positioning systems.</p></li>

<li>To get the current location information, call the <span style="font-family: Courier New,Courier,monospace">location_manager_get_location()</span> function after the service is enabled:
<pre class="prettyprint">
static void
__state_changed_cb(location_service_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;double altitude;
&nbsp;&nbsp;&nbsp;&nbsp;double latitude;
&nbsp;&nbsp;&nbsp;&nbsp;double longitude;
&nbsp;&nbsp;&nbsp;&nbsp;double climb;
&nbsp;&nbsp;&nbsp;&nbsp;double direction;
&nbsp;&nbsp;&nbsp;&nbsp;double speed;
&nbsp;&nbsp;&nbsp;&nbsp;double horizontal;
&nbsp;&nbsp;&nbsp;&nbsp;double vertical;
&nbsp;&nbsp;&nbsp;&nbsp;location_accuracy_level_e level;
&nbsp;&nbsp;&nbsp;&nbsp;time_t timestamp;

&nbsp;&nbsp;&nbsp;&nbsp;if (state == LOCATIONS_SERVICE_ENABLED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = location_manager_get_location(manager, &amp;altitude, &amp;latitude, &amp;longitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;climb, &amp;direction, &amp;speed, &amp;level,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;horizontal, &amp;vertical, &amp;timestamp);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>When you no longer need the state updates, unset the callback:
<pre class="prettyprint">
location_manager_unset_service_state_changed_cb(manager);
</pre></li></ol>

<h2 id="update" name="update">Getting Location Updates</h2>

<p>You can get a notification of the position update using the position update callback. The callback is invoked periodically, receiving the device&#39;s current position with every call. You can use the callback to retrieve the device position (given as coordinates) and convert it to the corresponding address.</p>
<ol><li><p>Register the callback using the <span style="font-family: Courier New,Courier,monospace">location_manager_set_position_updated_cb()</span> function:</p>
<pre class="prettyprint">
location_manager_set_position_updated_cb(manager, position_updated, 2, NULL);
</pre>
<p>The third parameter determines the frequency of callback calls. In this example, the callback is called every 2 seconds.</p></li>
<li><p>When the update is received, you can, for example, update the variables that store the current position:</p>
<pre class="prettyprint">
static double user_latitude;
static double user_longitude;
static void
position_updated(double latitude, double longitude, double altitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_t timestamp, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;user_latitude = latitude;
&nbsp;&nbsp;&nbsp;&nbsp;user_longitude = longitude;
}
</pre>

	  <table class="note">
	   <tbody>
		<tr>
		 <th class="note">Note</th>
		</tr>
		<tr>
		 <td class="note">The callback is called only if the location manager has been started. The same holds for all other callbacks registered with the manager.</td>
		</tr>
	   </tbody>
	  </table> </li></ol>  

	  <h2 id="bound" name="bound">Using Location Bounds</h2>

<p>You can define a virtual perimeter, which is monitored to see whether the device enters or exits the area.</p>
<p>To use location bounds:</p>

<ol>
<li>Create location bounds with the required area type (rectangle, circle, or polygon) needed for your application (each type has its own API sets):
<pre class="prettyprint">
int poly_size = 3; /* Triangle shaped bounds */
location_coords_s coord_list[poly_size];
coord_list[0].latitude = 37; /* Temporary value */
coord_list[0].longitude = 126;
coord_list[1].latitude = 38;
coord_list[1].longitude = 128;
coord_list[2].latitude = 35;
coord_list[2].longitude = 128;
location_bounds_h bounds_poly;
ret = location_bounds_create_polygon(coord_list, poly_size, &amp;bounds_poly);
</pre>
<p>When a circular bound is needed, use the <span style="font-family: Courier New,Courier,monospace">location_bounds_create_circle()</span> function.</p></li>

<li>To get the generated polygon bounds, register a callback function to notify you of the polygon coordinates:
<pre class="prettyprint">
ret = location_bounds_foreach_polygon_coords(bounds_poly, capi_poly_coords_cb, NULL);
</pre>
<p>Implement the callback function (the second parameter in the function above) separately:</p>
<pre class="prettyprint">
static double latitude;
static double longitude;
static bool
capi_poly_coords_cb(location_coords_s coords, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;latitude = coords.latitude;
&nbsp;&nbsp;&nbsp;&nbsp;longitude = coords.longitude;

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li><p>Register a callback, which is called when you enter or exit the defined region, using the <span style="font-family: Courier New,Courier,monospace">location_bounds_set_state_changed_cb()</span> function:</p>
<pre class="prettyprint">
location_bounds_set_state_changed_cb(bounds_poly, bounds_state_changed_cb, NULL);
</pre>
<p>Implement the <span style="font-family: Courier New,Courier,monospace">bounds_state_changed_cb()</span> callback separately:</p>
<pre class="prettyprint">
static location_boundary_state_e bound_state;
static void
bounds_state_changed_cb(location_boundary_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;bound_state = state;
}
</pre>
</li>
<li><p>Call the <span style="font-family: Courier New,Courier,monospace">location_manager_add_boundary()</span> function to add the bounds to a location manager:</p>
<pre class="prettyprint">
location_manager_add_boundary(manager, bounds_poly);
</pre>
</li>

<li>When the bounds are no longer needed, destroy them:
<pre class="prettyprint">
location_bounds_destroy(bounds_poly);
</pre></li>
</ol>  

<h2 id="satellite" name="satellite">Getting Satellite Information</h2>

<p>You can retrieve and update information of the satellite connected with the device. The information includes azimuth, elevation, PRN, SNR, and NMEA data. You can also get a notification of the satellite update using the satellite update callback. The callback is invoked periodically, receiving the information of connected satellites with every call.</p>
<ol><li><p>Register the callback using the <span style="font-family: Courier New,Courier,monospace">location_manager_set_satellite_updated_cb()</span> function:</p>
<pre class="prettyprint">
gps_status_set_satellite_updated_cb(manager, capi_gps_status_satellite_updated_cb, 10, NULL);
</pre>
<p>The third parameter determines the frequency of callback calls. In this example, the callback is called every 10 seconds.</p> </li>
<li>When the update is received, the callback containing brief satellite information is called. To get the detailed satellite information in the sky, call the <span style="font-family: Courier New,Courier,monospace">gps_status_foreach_satellites_in_view()</span> function in the callback. Variables that store the current satellite information are updated.

<pre class="prettyprint">
int cur_azimuth;
int cur_elevation;
int cur_prn;
int cur_snr;

static bool
capi_gps_status_get_satellites_cb(unsigned int azimuth, unsigned int elevation, unsigned int prn,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int snr, bool is_in_use, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;cur_azimuth = azimuth;
&nbsp;&nbsp;&nbsp;&nbsp;cur_elevation = elevation;
&nbsp;&nbsp;&nbsp;&nbsp;cur_prn = prn;
&nbsp;&nbsp;&nbsp;&nbsp;cur_snr = snr;

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

static int numofactive;
static int numofinview;

static void
capi_gps_status_satellite_updated_cb(int num_of_active, int num_of_inview,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_t timestamp, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;numofinview = num_of_active;
&nbsp;&nbsp;&nbsp;&nbsp;if (num_of_inview &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gps_status_foreach_satellites_in_view(manager, capi_gps_status_get_satellites_cb, NULL);
}
</pre>

	  <table class="note">
	   <tbody>
		<tr>
		 <th class="note">Note</th>
		</tr>
		<tr>
		 <td class="note">The callback is called only if the location manager has been started. The same holds for all other callbacks registered with the manager.</td>
		</tr>
	   </tbody>
	  </table> </li></ol>  

	  <h2 id="track" name="track">Tracking the Route</h2>

<p>To get information about the current position, velocity, and distance:</p>
 
<ol><li>Receive periodic notifications.
<ol type="a"><li>
<p>To get notifications of the position and velocity updates, register the position and velocity update callbacks. The callbacks are invoked periodically, receiving the device&#39;s current position or velocity with every call.</p>

<ul><li><p>Register the position update callback using the <span style="font-family: Courier New,Courier,monospace;">location_manager_set_position_updated_cb()</span> function:</p>

<pre class="prettyprint">
location_manager_set_position_updated_cb(manager, position_updated, 2, NULL);
</pre></li>

<li><p>Register the velocity update callback using the <span style="font-family: Courier New,Courier,monospace;">location_manager_set_velocity_updated_cb()</span> function:</p>

<pre class="prettyprint">
location_manager_set_position_updated_cb(manager, velocity_updated, 2, NULL);
</pre></li></ul>

<p>The third parameter determines the frequency of the callback calls. In this example, the callbacks are called every 2 seconds.</p></li>

<li><p>Define the position and velocity callback functions:</p>

<pre class="prettyprint">
void
position_updated(double latitude, double longitude, double altitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_t timestamp, void *user_data) {}
void
velocity_updated(double speed, double direction, double climb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_t timestamp, void *user_data) {}
</pre>

<p>Within the callback, you can collect obtained data to get the points you have visited, to calculate traveled distance more precisely, or to calculate the average speed or climb.</p></li></ol></li>

<li>Receive the current information.
<p>You can get the current information about position, velocity, or location accuracy:</p>
<ul><li>To get information about the current position (altitude, latitude, and longitude), use the <span style="font-family: Courier New,Courier,monospace;">location_manager_get_position()</span> function:

<pre class="prettyprint">
time_t timestamp;
double altitude;
double latitude;
double longitude;
location_manager_get_position(manager, &amp;altitude, &amp;latitude, &amp;longitude, &amp;timestamp);
</pre></li>

<li><p>To get information about the current velocity (climb in km/h, direction as degrees from the north, and speed in km/h), use the <span style="font-family: Courier New,Courier,monospace;">location_manager_get_velocity()</span> function:</p>

<pre class="prettyprint">
double climb;
double direction;
double speed;
location_manager_get_velocity(manager, &amp;climb, &amp;direction, &amp;speed, &amp;timestamp);
</pre></li>

<li><p>To get information about the current accuracy level (see the <span style="font-family: Courier New,Courier,monospace;">location_accuracy_level_e</span> enumeration in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#ga4878b9a0afa5990dd2bb500850c1828b">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__LOCATION__MANAGER__MODULE.html#ga4878b9a0afa5990dd2bb500850c1828b">wearable</a> applications), and horizontal and vertical accuracy, use the <span style="font-family: Courier New,Courier,monospace;">location_manager_get_accuracy()</span> function:</p>

<pre class="prettyprint">
location_accuracy_level_e level;
double horizontal;
double vertical;
location_manager_get_accuracy(manager, &amp;level, &amp;horizontal, &amp;vertical);
</pre></li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace;">location_manager_get_location()</span> function to get all of the above 10 values at once:</p>

<pre class="prettyprint">
location_manager_get_location(manager, &amp;altitude, &amp;latitude, &amp;longitude, &amp;climb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;direction, &amp;speed, &amp;level, &amp;horizontal, &amp;vertical, &amp;timestamp);
</pre></li>

<li><p>If the location service is currently unavailable, get the last values recorded by the location manager when the GPS signal was available. To get the information, use the following functions:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">location_manager_get_last_position()</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">location_manager_get_last_velocity()</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">location_manager_get_last_accuracy()</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">location_manager_get_last_location()</span></li>
</ul>

<p>The syntax of these functions corresponds to the functions presented above.</p></li></ul></li>

<li>Get the distance.
<p>To get a distance (in meters) between 2 points, use the <span style="font-family: Courier New,Courier,monospace;">location_manager_get_distance()</span> function. The obtained value is a great-circle distance; the shortest distance between 2 points on the sphere.</p>
<p>Provide the latitude and longitude of the starting point, the latitude and longitude of the end point, and the variable to store the obtained distance.</p>

<pre class="prettyprint">
double distance;
location_manager_get_distance(37.28, 127.01, 52.23, 21.01, &amp;distance);
</pre>

<p>To get more a precise traveled distance, sum the distances between each 2 consecutive points, delivered by the periodic position update callback.</p></li></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>
<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
