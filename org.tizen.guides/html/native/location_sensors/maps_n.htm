<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9" />
<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
<script type="text/javascript" src="../../scripts/snippet.js"></script>
<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
<title>Maps and Maps Service</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">
<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
	</div>
	<div id="toc_border">
		<div id="toc">
			<p class="toc-title">Dependencies</p>
			<ul class="toc">
				<li>Tizen Platform 2.4 and Higher for Mobile</li>
			</ul>			
			<p class="toc-title">Content</p>
			<ul class="toc">
				<li><a href="#geocode">Geocodes</a></li> 
				<li><a href="#search_place">Place Search</a></li>
				<li><a href="#search_route">Route Search</a></li>
				<li><a href="#response">Map Service Responses</a></li>
				<li><a href="#view">Map View Widget</a></li>
				<li><a href="#prerequisites">Prerequisites</a></li>
				<li><a href="#start">Starting the Map Service</a></li>
				<li><a href="#geocode">Using Geocode and Reverse Geocode Services</a></li>
				<li><a href="#search_place">Using the Place Search Service</a></li>
				<li><a href="#search_route">Using the Routing Service</a></li>
				<li><a href="#cancel">Canceling the Service Request</a></li>
				<li><a href="#address">Recognizing the Address Information</a></li>
				<li><a href="#place">Recognizing the Place Information</a></li>
				<li><a href="#route">Recognizing the Route Information</a></li>
				<li><a href="#preference">Customizing the Service Requests</a></li>				
				<li>Map view
				<ul class="toc">
					<li><a href="#maps_view">Using the Map View</a></li>
					<li><a href="#maps_object">Creating Map View Objects</a></li>
					<li><a href="#maps_event">Managing Map View Events</a></li>
				</ul>
				</li>
			</ul>
			<p class="toc-title">Related Info</p>
			<ul class="toc">
				<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__SERVICE__MODULE.html">Maps Service API for Mobile Native</a></li>
				<li><a href="https://developer.tizen.org/development/sample/native/Locations/Maps" target="_blank">Maps Sample Description</a></li>
			</ul>
		</div>
	</div>
</div>

	<div id="container"><div id="contents"><div class="content">

<h1>Maps and Maps Service</h1>
<p>Map service features include geocoding, reverse geocoding, place searching, route calculation, and view widgets.</p>

  <p>This feature is supported in mobile applications only.</p>

<p>The main Maps Service API features are:</p>
<ul>
	<li>Discovering and selecting a map provider
	<p>You can also <a href="#start">specify basic maps preferences</a>.</p></li>
	<li><a href="#geocode">Geocoding and reverse geocoding</a>
	<p>You can <a href="#geocode">get the geocode</a> (geographical coordinates) of a place based on an address, or the reverse geocode (address) based on the geographical coordinates (latitude and longitude).</p></li>
	<li><a href="#search_place">Searching places</a>
	<p>You can <a href="#search_place">query place information</a>, corresponding to specified search keys and filters.</p></li>
	<li><a href="#search_route">Searching routes</a>
	<p>You can <a href="#search_route">query a route</a> that defines a path between a start and destination point, passing optionally through  specific intermediate locations and calculated using a specified transportation method.</p></li>
	<li><a href="#response">Handling map service responses</a>
	<p>You can receive responses from the map service through various callbacks.</p></li>	
	<li><a href="#view">Managing a map view widget</a>
	<p>You can <a href="#maps_view">create a map view widget</a> and set various properties (such as theme, language, and traffic).</p>
	<p>You can create objects, such as markers, polylines and polygons, in the widget. You can also receive responses about events over the widget, and get various data from the events.</p></li>	
</ul>

<p>You can also <a href="#cancel">cancel service requests</a> and <a href="#preference">customize them</a>.</p>

 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the maps service functionality</a>.</p>

<p>The following map provider is supported:</p>
	<ul>
		<li><a href="https://developer.here.com">HERE Maps</a> based on the <a href="https://developer.here.com/rest-apis">HERE REST API</a>.
		<p>To use the HERE Maps, you need to <a href="here_credentials_n.htm">get credentials</a>.</p></li>
	</ul>

<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To use the map service, you must get an access key to the map provider from the provider developer site. The service must be used according to the provider&#39;s Term of Use.</td> 
    </tr> 
   </tbody> 
  </table>

<h2 id="geocode">Geocodes</h2>
	<p>The following geocode request types are provided:</p>
	<ul>
		<li>Get place coordinates based on a free text address.</li>
		<li>Get place coordinates based on a free text address within a specified geographical area.</li>
		<li>Get place coordinates based on a structured address (a structure with fields, such as city, street, and building number).</li>
	</ul>
	<p>The geocode response is a geographical location, specified with latitude and longitude values.</p>
	<p>Only 1 type of reverse geocode request is provided:</p>
	<ul>
		<li>Get a structured address based on place coordinates.</li>
	</ul>
	<p>You can <a href="#address">parse the reverse geocode response</a> to use its details. The response consists of structured address information, comprising, for example, of a street name, building number, city name, postal code, district name, state name, and country.</p>
	

<h2 id="search_place">Place Search</h2>
	<p>The following place search request types are provided:</p>
	<ul>
		<li>Query place information within a specific distance around a specified geographical location.</li>
		<li>Query place information within a specified geographical area.</li>
		<li>Query place information based on a free text address within a specified geographical area.</li>
	</ul>
	<p>You can <a href="#place">parse the place search response</a> to use its details. The response consists of structured place information, comprising, for example, of a place ID, name and URL, address, geographical location and distance from the center of the search area, place category, rating, review, and image.</p>
	
	<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Depending on the map provider, some types of place information can be unavailable.</td> 
    </tr> 
   </tbody> 
  </table>

<h2 id="search_route">Route Search</h2>
	<p>The following route search request types are provided:</p>
	<ul>
		<li>Query a route from a starting point to a destination specified as a geographical location.</li>
		<li>Query a route passing through a number of geographical locations.</li>
	</ul>
	<p>You can <a href="#route">parse the route calculation response</a> to use its details. The response consists of structured route information, comprising, for example, of a route ID,	geographical coordinates of the start and destination point, route bounding box, transportation mode, and total distance and duration.</p>
	
	
	<table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Depending on the map provider, the route can be presented as a list of geographical points or segments. The segment list can also be presented as a list of geographical points or maneuvers.</td> 
    </tr> 
   </tbody> 
  </table>



<h2 id="response" name="response">Map Service Responses</h2>

	<p>The asynchronous map service responses are implemented with callback interfaces (functions whose names end with <span style="font-family: Courier New,Courier,monospace;">cb</span>).</p>
	<p>To handle the responses, you can use the map service response states:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_SERVICE_ERROR_NONE</span>: The map service is working correctly.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ERROR_PERMISSION_DENIED</span>: The user has revoked a permission for the application to use the map service.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ERROR_NOT_SUPPORTED</span>: The map request or feature you are trying to use is not supported in the map provider.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ERROR_NETWORK_UNREACHABLE</span>, <span style="font-family: Courier New,Courier,monospace;">MAPS_ERROR_SERVICE_NOT_AVAILABLE</span>, or <span style="font-family: Courier New,Courier,monospace;"> MAPS_ERROR_CONNECTION_TIME_OUT</span>: The map provider cannot access the map server for various reasons.</li>
	</ul>	

<h2 id="view" name="view">Map View Widget</h2>

	<p>The map view widget feature includes drawing a map image on the map port, which is a specified rectangular area of the map application UI.</p>
	<p>With the widget, you can:</p>
	<ul>
		<li>Show, move, and resize the widget.</li>
		<li>Set the map view widget theme.</li>
		<li>Enable a 3D building.</li>
		<li>Enable traffic information.</li>
		<li>Enable a scalebar.</li>
		<li>Set a language for the widget.</li>
	</ul>

	<p>You can <a href="#maps_object">create objects in the widget</a>. The following view object types are provided:</p>
	<ul>
		<li>Marker based on a specified geographical location, image, and marker type.</li>
		<li>Polyline based on a specified geographical locations, color, and width.</li>
		<li>Polygon based on a specified geographical locations and color.</li>
	</ul>
	<p>The object properties can be changed after the object has been created.</p>

	<p>The map view widget can <a href="#maps_event">handle events</a>. The asynchronous view event responses are implemented with callback functions based on the view event type:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_GESTURE</span>: User gesture is detected over the widget.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_ACTION</span>: Predefined action occurs.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_OBJECT</span>: Event occurs on the created object.</li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_READY</span>: Map view widget is ready.</li>
	</ul>
	<p>Each event contains various data, and you can access the data with various <span style="font-family: Courier New,Courier,monospace;">maps_view_event_data_get_XXX()</span> functions.</p>
<h2>Warm-up</h2>
<p>Become familiar with the Maps Service API basics by learning about:</p>
<ul>
	<li><a href="#prerequisites">Prerequisites</a>
	<p>Prepare your application to use the map service functionality.</p></li>
	<li><a href="#start">Starting the Map Service</a>
	<p>Select a map provider, check available capabilities, create the Maps Service instance, and destroy it when no longer needed.</p></li>

	<li><a href="#geocode">Using Geocode and Reverse Geocode Services</a>
	<p>Get the geocode of a specified place, and the reverse geocode corresponding to specified geographical coordinates.</p></li>

	<li><a href="#search_place">Using the Place Search Service</a>
	<p>Search for places near a specified geographical position or inside a specified geographical area.</p></li>

	<li><a href="#search_route">Using the Routing Service</a>
	<p>Query the route from point A to point B, optionally passing through a number of specified waypoints.</p></li>

	<li><a href="#cancel">Canceling the Service Request</a>
	<p>Cancel the map service (geocode, routing, or place search) request.</p></li>
</ul>

<h2>Follow-up</h2>
<p>Once we have learned the basics of the Maps Service API, we can now move on to more advanced tasks, including:</p>
<ul>
	<li><a href="#address">Recognizing the Address Information</a>
	<p>Parse the information obtained from the reverse geocode service.</p></li>

	<li><a href="#place">Recognizing the Place Information</a>
	<p>Parse the information obtained from the place search service.</p></li>

	<li><a href="#route">Recognizing the Route Information</a>
	<p>Parse the information obtained from the routing service.</p></li>

	<li><a href="#preference">Customizing the Service Requests</a>
	<p>Prepare and send a set of extra preferences through a map service request to allow the map provider to generate a more accurate result.</p></li>
	
	<li>Map view
	<ul>
		<li><a href="#maps_view">Using the Map View</a>
		<p>Create the map view instance and define its settings.</p></li>
	
		<li><a href="#maps_object">Creating Map View Objects</a>
		<p>Create a polyline, polygon, or marker instance, and add it to the map view.</p></li>
	
		<li><a href="#maps_event">Managing Map View Events</a>
		<p>Set a callback for map view events, and get various data from the events.</p></li>
	</ul>
	</li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the map service functionality:</p>
<ol>
<li>
<p>To use the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__SERVICE__MODULE.html">Maps Service</a> API, the application has to request permission by adding the following privilege to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/internet&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;!--To use the map view--&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.get&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
</li>
<li><p>To use the functions and data types of the Maps Service API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;maps_service.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;maps_service.h&gt;
</pre>
</li>
<li><p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__VIEW__MODULE.html">View</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;maps_view.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;maps_view.h&gt;
</pre>
</li>
</ol>

<h2 id="start" name="start">Starting the Map Service</h2>

<p>To start using the map service:</p>
<ol>
<li>The Maps Service instance relies on a particular map provider. To get a list of available map providers, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_foreach_provider()</span> function.
<pre class="prettyprint">
static bool
_maps_service_provider_info_cb(char* maps_provider, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the map provider name, passed as maps_provider */

&nbsp;&nbsp;&nbsp;&nbsp;return bool;
}

void
get_available_providers()
{
&nbsp;&nbsp;&nbsp;&nbsp;void *user_data = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;const int error = maps_service_foreach_provider(_maps_service_provider_info_cb, user_data);

&nbsp;&nbsp;&nbsp;&nbsp;if (error == MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Select a provider from the available_providers vector */
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
</pre>
</li>

<li>Before you use the Maps Service API, create a Maps Service instance using the <span style="font-family: Courier New,Courier,monospace;">maps_service_create()</span> function:
<pre class="prettyprint">
maps_service_h maps = NULL;
int error = maps_service_create(&quot;Maps Provider&quot;, &amp;maps);
</pre>
</li>

<li>Set the security key appropriate to the selected map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_set_provider_key()</span> function:
<pre class="prettyprint">
error = maps_service_set_provider_key(maps, &quot;XXXYYYZZZ&quot;);
</pre>
</li>

<li>Check which services are supported by the selected map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_service_supported()</span> function:
<pre class="prettyprint">
bool supported = false;

/* Check whether routing is available */
error = maps_service_provider_is_service_supported(maps, MAPS_SERVICE_SEARCH_ROUTE, &amp;supported);
const bool is_routing_supported = (error == MAPS_ERROR_NONE) ? supported : false;

/* Check whether routing through specified waypoints is available */
error = maps_service_provider_is_service_supported(maps, MAPS_SERVICE_SEARCH_ROUTE_WAYPOINTS, &amp;supported);
const bool is_routing_waypoints_supported = (error == MAPS_ERROR_NONE) ? supported : false;
</pre>
<p>To check for the availability of other services, follow the same approach using the keys from the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__SERVICE__AND__PREFERENCE__MODULE.html#ga8afd98ceb094d4c3edaf603051a69f8e">maps_service_e</a> enumerator.</p>
</li>

<li>Optionally, check which data features are available for the desired services using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function:
<pre class="prettyprint">
/* Check whether route path data is supported */
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_PATH, &amp;supported);
const bool is_route_path_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_path_supported)
&nbsp;&nbsp;&nbsp;&nbsp;/* Use route path */

/* Check whether segment path data is supported */
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_SEGMENTS_PATH, &amp;supported);
const bool is_route_segment_path_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_segment_path_supported)
&nbsp;&nbsp;&nbsp;&nbsp;/* Use segment path */

/* Check whether segment maneuver data is supported */
error = maps_service_provider_is_data_supported(maps, MAPS_ROUTE_SEGMENTS_MANEUVERS, &amp;supported);
const bool is_route_segment_maneuvers_supported = (error == MAPS_ERROR_NONE) ? supported : false;
if (is_route_segment_maneuvers_supported)
&nbsp;&nbsp;&nbsp;&nbsp;/* Use segment maneuvers */
</pre>
<p>To check the availability of other data features, follow the same approach using the keys from the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__SERVICE__AND__PREFERENCE__MODULE.html#ga8f22bd07fe9300b3f3f1c74e83f1e272">maps_service_data_e</a> enumerator.</p>
</li>

<li><p>Set general preferences, such as language and distance units, using the <span style="font-family: Courier New,Courier,monospace;">maps_service_set_preference()</span> function:</p>
<pre class="prettyprint">
/* Create a preference set instance */
maps_preference_h preference = NULL;
int error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Set the distance unit preference */
error = maps_preference_set_distance_unit(preference, MAPS_DISTANCE_UNIT_M);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Set the language preference */
error = maps_preference_set_language(preference, &quot;en-US&quot;);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Apply the set of preferences for the map service */
error = maps_service_set_preference(maps, preference);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Destroy the preference set instance */
error = maps_preference_destroy(preference);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
<p>Optionally, you can set the maximum amount of search results and a default country code using the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_max_results()</span> and <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_country_code()</span> functions.</p>
<p>To set specific preferences for the map provider, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with key-value pairs, defined in the appropriate map provider documentation.</p>
<p>To get the preferences currently applied in the map provider, use the following functions:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_distance_unit()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_language()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_max_results()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get_country_code()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_get()</span> and
			<span style="font-family: Courier New,Courier,monospace;">maps_preference_foreach_property()</span>
			<p>These 2 functions retrieve the map provider-specific preferences not defined in the Maps Service API.</p></li>
	</ul>
</li>
</ol>


<h2 id="geocode" name="geocode">Using Geocode and Reverse Geocode Services</h2>

<p>To retrieve a geocode of a specified place, or the place information corresponding to given geographic coordinates, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<p>To retrieve a geocode:</p>
<ol>
<li>Request the geocode:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode()</span> function for a request based on a free-formed address:
<pre class="prettyprint">
/* Search for geocode of the Samsung&#39;s campus &quot;Digital City&quot; in Suwon */
error = maps_service_geocode(maps, &quot;Suwon, Digital City&quot;, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode_inside_area()</span> function for a request inside a specified area:
<pre class="prettyprint">
maps_area_h bounds = NULL;
/* Use maps_area_create_rectangle() or maps_area_create_circle() to create geographic bounds for geocoding */

/* Search for geocode of the Digital City within a specified geographic area */
error = maps_service_geocode_inside_area(maps, &quot;Digital City&quot;, bounds, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;__maps_service_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_geocode_by_structured_address()</span> function for a request for a place, specified as a structured address:
<pre class="prettyprint">
maps_address_h address = NULL;
/* Use maps_address_create() to create an instance of an address */
/* Then use maps_address_set_XXX() to initialize the address with the desired values */

/* Search for a geocode of a place, specified with a structured address */
error = maps_service_geocode_by_structured_address(maps, address, preference, __maps_service_geocode_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li></ul></li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_geocode_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool
__maps_service_geocode_cb(maps_error_e result, int request_id, int index, int total,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_coordinates_h coordinates, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained coordinate data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_coordinates_destroy(coordinates);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>


<p>To retrieve a reverse geocode:</p>
<ol>
<li>To retrieve a reverse geocode of specified geographic coordinates, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode()</span> function:
<pre class="prettyprint">
/* Obtain the reverse geocode with specified coordinates */
error = maps_service_reverse_geocode(maps, 37.257865, 127.053659, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_reverse_geocode_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_reverse_geocode_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static void
__maps_service_reverse_geocode_cb(maps_error_e result, int request_id, int index, int total,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_address_h address, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained address */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_address_destroy(address);
}
</pre>
</li>

</ol>

<h2 id="search_place" name="search_place">Using the Place Search Service</h2>

<p>To search for a place with a diversity of search parameters, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<ul>
<li>To search for a place:
<ol>
<li>Search for a place:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place()</span> function for a search within a specified distance around the center coordinates:
<pre class="prettyprint">
maps_coordinates_h position = NULL;
/* Create the coordinates with maps_coordinates_create() */

int distance = 500;
error = maps_service_search_place(maps, position, distance, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_area()</span> function for a search for a place within a specified geographic boundary:
<pre class="prettyprint">
maps_area_h boundary = NULL;
/* Create the boundary with maps_area_create_rectangle() or maps_area_create_circle() */

error = maps_service_search_place_by_area(maps, boundary, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_address()</span> function for a search for a place based on an address within a specified geographic boundary:
<pre class="prettyprint">
maps_area_h boundary = NULL;
/* Create the boundary with maps_area_create_rectangle() or maps_area_create_circle() */

error = maps_service_search_place_by_address(maps, &quot;Digital City&quot;, boundary, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li></ul></li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_search_place_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool
__maps_service_search_place_cb(maps_error_e error, int request_id, int index, int total,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_place_h place, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained place data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_destroy(place);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>
</li>
<li>To search for a list of places within a boundary, and get detailed information of a particular place:
<ol>
<li>Search for a place list:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_list()</span> function for a search within a specified distance around the center coordinates:
<pre class="prettyprint">
maps_area_h boundary = NULL;
/* Create the boundary with maps_area_create_rectangle() or maps_area_create_circle() */

error = maps_service_search_place_list(maps, boundary, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_list_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_search_place_list_cb()</span> callback to receive the place list:
<pre class="prettyprint">
static bool
__maps_service_search_place_list_cb(maps_error_e error, int request_id, int total,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_place_list_h place_list, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained place data */
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_list_foreach(place_list, __maps_place_details_cb, user_data);

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_list_destroy(place_list);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_place_details_cb()</span> callback to receive the individual places within the place list:
<pre class="prettyprint">
static bool
__maps_place_details_cb(int index, maps_place_h place, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained place data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Get and store the URI to get the place details later */
&nbsp;&nbsp;&nbsp;&nbsp;char *place_uri = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_get_uri(place, &amp;place_uri);

&nbsp;&nbsp;&nbsp;&nbsp;/* Do not release the place handle, because it is just a reference to the list data */

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ul></li>

<li>Get the place details:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_get_place_details()</span> function to retrieve the place details:
<pre class="prettyprint">
error = maps_service_get_place_details(maps, place_uri,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_get_place_details_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_get_place_details_cb()</span> callback to receive the details:
<pre class="prettyprint">
static void
__maps_service_get_place_details_cb(maps_error_e result, int request_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_place_h place, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained place data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_destroy(place);
}
</pre>
</li>

</ul></li>
</ol>
</li>
</ul>

<h2 id="search_route" name="search_route">Using the Routing Service</h2>

<p>To query a route from point A to point B, use one of the following approaches. The service requests can be <a href="#preference">customized</a>.</p>

<p>To query a route:</p>
<ol>
<li>Query the route:
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route()</span> function for a route from one set of geographic coordinates to another:
<pre class="prettyprint">
maps_coordinates_h origin = NULL, destination = NULL;
/* Create the coordinates with maps_coordinates_create() */

error = maps_service_search_route(maps, origin, destination, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>


<li>Use the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_waypoints()</span> function for a route passing through a specified set of waypoints:
<pre class="prettyprint">
/* Specify the number of waypoints */
const int waypoint_num = 5;

/* Create an array with the waypoint coordinates */
maps_coordinates_h* waypoint_list = NULL;

error = maps_service_search_route_waypoints(maps, waypoint_list, waypoint_num, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li></ul></li>


<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_service_search_route_cb()</span> callback to receive the service response:
<pre class="prettyprint">
static bool
__maps_service_search_route_cb(maps_error_e error, int request_id, int index, int total,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;maps_route_h route, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained route data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_route_destroy(route);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<h2 id="cancel" name="cancel">Canceling the Service Request</h2>

<p>To cancel a geocode, place search, or routing request, use the <span style="font-family: Courier New,Courier,monospace;">maps_service_cancel_request()</span> function:</p>
<pre class="prettyprint">
/* Cancel the request with a specified ID */
error = maps_service_cancel_request(maps, request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>

<h2 id="address" name="address">Recognizing the Address Information</h2>

<p>The result of the <a href="#geocode">reverse geocode request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode()</span>) is retrieved from the map service using the <span style="font-family: Courier New,Courier,monospace;">maps_service_reverse_geocode_cb()</span> callback. The result is structured address data of the specified place.</p>
<p>Parse the address information using the following functions:</p>
<pre class="prettyprint">
/* Obtain the building number */
char *building_number = NULL;
error = maps_address_get_building_number(address, &amp;building_number);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the building_number */

free(building_number);

/* Obtain the street name */
char *street = NULL;
error = maps_address_get_street(address, &amp;street);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the street name */

free(street);
</pre>
<p>Similarly, you can get other address features using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_district()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_city()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_state()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_country()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_country_code()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_county()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_postal_code()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_address_get_freetext()</span></li>
</ul>


<h2 id="place" name="place">Recognizing the Place Information</h2>

<p>The result of the <a href="#search_place">place search request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_search_place()</span>, <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_area()</span>, or <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_by_address()</span>) is retrieved from the map service using multiple iterations of the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_place_cb()</span> callback. The result is an instance of place data.</p>

<table class="note">
<tbody>
    <tr>
		<th class="note">Note</th>
    </tr>
    <tr>
		<td class="note">Different map providers are capable of providing different sets of place data features. Some map providers can extend the place data features with extra properties that are not specified in the Maps Service API. Such properties are organized as a key-value storage where the keys are the names of the properties.

		<p>If your map provider does not support a specific feature, the get function for the feature returns an error. To prevent problems, you can <a href="#start">check which data features are available</a> in your map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function.</p>
		</td>
    </tr>
</tbody>
</table>

<p>To parse place data:</p>

<ol><li><p>To get the place information features, such as place name, location, and rating, use the following functions with a <span style="font-family: Courier New,Courier,monospace;">maps_place_h</span> place handle:</p>

<ul>
<li>To obtain the place name, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_name()</span> function:
<pre class="prettyprint">
/* Obtain the place name */
char *name = NULL;
error = maps_place_get_name(place, &amp;name);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the place name */

free(name);
</pre>
</li>

<li>To obtain the place location, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_location()</span> function:
<pre class="prettyprint">
/* Obtain the place location */
maps_coordinates_h location = NULL;
error = maps_place_get_location(place, &amp;location);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the place location */

maps_coordinates_destroy(location);
</pre>
</li>

<li>To obtain the place rating, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_get_rating()</span> function:
<pre class="prettyprint">
/* Obtain the place rating */
maps_place_rating_h rating = NULL;
error = maps_place_get_rating(place, &amp;rating);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the place rating */

maps_place_rating_destroy(rating);
</pre>
</li></ul>

<p>To obtain other place features, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_id()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_address()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_distance()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_uri()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_supplier_link()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_related_link()</span></li>
</ul>

</li>

<li><p>To get lists of place information features, such as categories, reviews, and attributes, use the following iterating functions:</p>
<ol type="a">
<li>To obtain a list of place categories, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_category()</span> function:
<pre class="prettyprint">
/* Obtain a list of place categories */
error = maps_place_foreach_category(place, __maps_place_categories_cb, user_data);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_place_categories_cb()</span> callback:
<pre class="prettyprint">
static bool
__maps_place_categories_cb(int index, int total, maps_place_category_h category, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained place category data */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_place_category_destroy(category);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>
<p>To obtain other place feature lists, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_attribute()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_contact()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_editorial()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_image()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_review()</span></li>
</ul></li>

<li><p>To get the extra properties that some map providers provide to extend the place data features defined in the Maps Service API:</p>
<ol type="a">
<li>To iterate through the retrieved extra properties, use the <span style="font-family: Courier New,Courier,monospace;">maps_place_foreach_property()</span> function:
<pre class="prettyprint">
/* Obtain the map provider-specific place data properties */
error = maps_place_foreach_property(place, __maps_place_properties_cb, user_data);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_place_properties_cb()</span> callback:
<pre class="prettyprint">
static bool
__maps_place_properties_cb(int index, int total, char* key, void* value, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained property: */
&nbsp;&nbsp;&nbsp;&nbsp;/* property_name: key */
&nbsp;&nbsp;&nbsp;&nbsp;/* property_value: value */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the property name and value */
&nbsp;&nbsp;&nbsp;&nbsp;free(key);
&nbsp;&nbsp;&nbsp;&nbsp;free(value);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol></li></ol>

<h2 id="route" name="route">Recognizing the Route Information</h2>


<p>The result of the <a href="#search_route">route calculation request</a> (<span style="font-family: Courier New,Courier,monospace;">maps_service_search_route()</span> or <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_waypoints()</span>) is retrieved from the map service using multiple iterations of the <span style="font-family: Courier New,Courier,monospace;">maps_service_search_route_cb()</span> callback. The result is an instance of route data.</p>

<table class="note">
<tbody>
    <tr>
		<th class="note">Note</th>
    </tr>
    <tr>
		<td class="note">Different map providers are capable of providing different sets of route data features. Some map providers can extend the route data features with extra properties that are not specified in the Maps Service API. Such properties are organized as a key-value storage where the keys are the names of the properties.

		<p>If your map provider does not support a specific feature, the get function for the feature returns an error. To prevent problems, you can <a href="#start">check which data features are available</a> in your map provider using the <span style="font-family: Courier New,Courier,monospace;">maps_service_provider_is_data_supported()</span> function.</p>
		</td>
    </tr>
  </tbody>
 </table>

  
<p>To parse route data:</p>

<ol><li><p>To get the route information features, such as route ID, origin, destination, and total distance, use the following functions with a <span style="font-family: Courier New,Courier,monospace;">maps_route_h</span> place handle:</p>
<ul>
<li>To obtain the route ID, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_route_id()</span> function:
<pre class="prettyprint">
/* Obtain the route ID */
char *id = NULL;
error = maps_route_get_route_id(route, &amp;id);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the route ID */

free(id);
</pre>
</li>

<li>To obtain the route origin and destination, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_origin()</span> and <span style="font-family: Courier New,Courier,monospace;">maps_route_get_destination()</span> functions:
<pre class="prettyprint">
/* Obtain the route origin and destination */
maps_coordinates_h origin = NULL, destination = NULL;
error = maps_route_get_origin(route, &amp;origin);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
error = maps_route_get_destination(route, &amp;destination);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the route origin and destination */

maps_coordinates_destroy(origin);
maps_coordinates_destroy(destination);
</pre>
</li>

<li>To obtain the route total distance, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_get_total_distance()</span> function:
<pre class="prettyprint">
/* Obtain the total route distance */
double total_distance = .0;
error = maps_route_get_total_distance(route, &amp;total_distance);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

/* Use the total route distance */
</pre>
</li>
</ul>
<p>To obtain other route features, follow the same approach using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_bounding_box()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_transport_mode()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_total_duration()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_route_get_distance_unit()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_supplier_link()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace;">maps_place_get_related_link()</span></li>
</ul></li>
<li>
<p>To get lists of route information features, such as path or list of segments, use the following iterating functions:</p>
<ul>
<li>To obtain the list of geographic points defining the route, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_path()</span> function:
<pre class="prettyprint">
error = maps_route_foreach_path(route, __maps_route_path_cb, user_data);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
<p>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_path_cb()</span> callback:</p>
<pre class="prettyprint">
static bool
__maps_route_path_cb(int index, int total, maps_coordinates_h coordinates, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained route path coordinates */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_coordinates_destroy(coordinates);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>To obtain the list of route segments, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_segment()</span> function:
<pre class="prettyprint">
error = maps_route_foreach_segment(route, __maps_route_segment_cb, user_data);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
<p>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_segment_cb()</span> callback:</p>
<pre class="prettyprint">
static bool
__maps_route_segment_cb(int index, int total, maps_route_segment_h segment, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained route segment */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the results */
&nbsp;&nbsp;&nbsp;&nbsp;maps_route_segment_destroy(segment);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ul></li>

<li><p>To get the extra properties that some map providers provide to extend the route data features defined in the Maps Service API:</p>

<ol type="a">
<li>To iterate through the retrieved extra properties, use the <span style="font-family: Courier New,Courier,monospace;">maps_route_foreach_property()</span> function:
<pre class="prettyprint">
/* Obtain the map provider-specific route data properties */
error = maps_route_foreach_property(route, __maps_route_properties_cb, user_data);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace;">__maps_route_properties_cb()</span> callback:
<pre class="prettyprint">
static bool
__maps_route_properties_cb(int index, int total, char* key, void* value, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the obtained property: */
&nbsp;&nbsp;&nbsp;&nbsp;/* property_name: key */
&nbsp;&nbsp;&nbsp;&nbsp;/* property_value: value */

&nbsp;&nbsp;&nbsp;&nbsp;/* Release the property name and value */
&nbsp;&nbsp;&nbsp;&nbsp;free(key);
&nbsp;&nbsp;&nbsp;&nbsp;free(value);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol></li></ol>

<h2 id="preference" name="preference">Customizing the Service Requests</h2>

<p>All Maps Service API requests can be customized with additional preferences. Preparing and sending the <span style="font-family: Courier New,Courier,monospace;">preference</span> parameter with the service request allows the map provider to generate more accurate results.</p>
<p>To customize the service request:</p>
<ul>
	<li>To prepare preferences for the place search service, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with the following keys:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_PLACE_FILTER_TYPE</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_PLACE_FILTER_SORT_BY</span></li>
	</ul>
<p>The example from <a href="#search_place">Using the Place Search Service</a> can be modified as follows to include the customized preferences:</p>
<pre class="prettyprint">
/* Create extra preferences for the place search service */
error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
error = maps_preference_set_property(preference, MAPS_PLACE_FILTER_TYPE, &quot;restaurant&quot;);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

maps_coordinates_h position = NULL;
/* Create the coordinates with maps_coordinates_create() */

int distance = 500;
error = maps_service_search_place(maps, position, distance, filter, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_place_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

maps_preference_destroy(preference);
</pre>
</li>

<li>To prepare preferences for the routing service, use the following functions:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_optimization()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_transport_mode()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_feature_weight()</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">maps_preference_set_route_feature()</span></li>
	</ul>
	<p>You can also use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with the following keys:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_FREEFORM_ADDR_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_STRUCTED_ADDR_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_CIRCLE_AREA_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_RECT_AREA_TO_AVOID</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_GEOMETRY_BOUNDING_BOX</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_GEOMETRY_RETRIEVAL</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_GEOMETRY</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_BOUNDING_BOX</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_INSTRUCTION_RETRIEVAL</span></li>
		<li><span style="font-family: Courier New,Courier,monospace;">MAPS_ROUTE_REALTIME_TRAFFIC</span></li>
	</ul>

<p>The example from <a href="#search_route">Using the Routing Service</a> can be modified as follows to include the customized preferences:</p>
<pre class="prettyprint">
/* Create extra preferences for the routing service */
error = maps_preference_create(&amp;preference);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
error = maps_preference_set_property(preference, MAPS_ROUTE_FREEFORM_ADDR_TO_AVOID, &quot;Suwon, Digital City&quot;);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
error = maps_preference_set_route_optimization(preference, MAPS_ROUTE_TYPE_SHORTEST);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

maps_coordinates_h origin = NULL, destination = NULL;
/* Create the coordinates with maps_coordinates_create() */

error = maps_service_search_route(maps, origin, destination, preference,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__maps_service_search_route_cb, user_data, &amp;request_id);

if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

maps_preference_destroy(preference);
</pre>
</li>
</ul>
<p>If your map provider requires any specific preferences, use the <span style="font-family: Courier New,Courier,monospace;">maps_preference_set_property()</span> function with key-value pairs defined in the appropriate map provider documentation.</p>


<h2 id="maps_view" name="maps_view">Using the Map View</h2>

<p>To use the map view:</p>
<ol>
<li>Before you use the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__VIEW__MODULE.html">View</a> API, create a map view instance using the <span style="font-family: Courier New,Courier,monospace;">maps_view_create()</span> function:
<pre class="prettyprint">
maps_view_h maps_view = NULL;
/* Create an image object for the map view */
Evas_Object *evas_object_image = evas_object_image_filled_add(evas_object_evas_get(window));

error = maps_view_create(maps, evas_object_image, &amp;maps_view);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view properties:
<ul><li>Set the map view type with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_type()</span> function.
<p>For other available types, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__VIEW__MODULE.html#ga379898d515d81cf500a814571524f106">_maps_view_type_e</a> enumerator.</p>
<pre class="prettyprint">
error = maps_view_set_type(maps_view, MAPS_VIEW_TYPE_NORMAL);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the 3D building of the map view with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_buildings_enabled()</span> function:
<pre class="prettyprint">
error = maps_view_set_buildings_enabled(maps_view, true);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view traffic information with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_traffic_enabled()</span> function:
<pre class="prettyprint">
error = maps_view_set_traffic_enabled(maps_view, true);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view scalebar with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_scalebar_enabled()</span> function:
<pre class="prettyprint">
error = maps_view_set_scalebar_enabled(maps_view, true);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view language with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_language()</span> function:
<pre class="prettyprint">
error = maps_view_set_language(maps_view, &quot;eng&quot;);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li></ul></li>

<li>Set the map view location and size:
<p>Set the map view location with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_screen_location()</span> function:</p>
<pre class="prettyprint">
error = maps_view_set_screen_location(maps_view, 0, 100, 500, 1000);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>

<p>You can also set the location with the <span style="font-family: Courier New,Courier,monospace;">maps_view_move()</span> and <span style="font-family: Courier New,Courier,monospace;">maps_view_resize()</span> functions:</p>
<pre class="prettyprint">
error = maps_view_move(0, 100);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

error = maps_view_resize(500, 1000);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view visibility with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_visibility()</span> function:
<pre class="prettyprint">
error = maps_view_set_visibility(maps_view, true);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>Set the map view center with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_center()</span> function:
<pre class="prettyprint">
maps_coordinates_h maps_coord = NULL;

maps_coordinates_create(28.64362, 77.19865, &amp;maps_coord);

error = maps_view_set_center(maps_view, maps_coord);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

maps_coordinates_destroy(maps_coord);
</pre>
</li>

<li>Set the map view zoom level with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_zoom_level()</span> function:
<pre class="prettyprint">
error = maps_view_set_zoom_level(maps_view, 12);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
</li>

<li>When no longer needed, destroy the map view instance with the <span style="font-family: Courier New,Courier,monospace;">maps_view_destroy()</span> function:
<pre class="prettyprint">
maps_view_destroy(maps_view);
</pre>
</li>
</ol>


<h2 id="maps_object" name="maps_object">Creating Map View Objects</h2>

<p>You can create polyline, polygon, and marker objects for the map view.</p>
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Before you use the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__VIEW__OBJECT__MODULE.html">View Object</a> API, create a map view object instance.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>To create a map view object:</p>

<ol><li>Create a map view object:
<ul><li>To create a polyline:
<pre class="prettyprint">
maps_view_object_h object = NULL;
maps_coordinates_h coord1 = NULL, coord2 = NULL;
maps_coordinates_list_h coord_list = NULL;

maps_coordinates_list_create(&amp;coord_list);
maps_coordinates_create(28.64362, 77.19865, &amp;coord1);
maps_coordinates_list_append(coord_list, coord1);
maps_coordinates_create(28.634418, 77.169080, &amp;coord2);
maps_coordinates_list_append(coord_list, coord2);

error = maps_view_object_create_polyline(coord_list, 255, 0, 0, 0, 5, &amp;object);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre></li>

<li>To create a polygon:
<pre class="prettyprint">
maps_view_object_h object = NULL;
maps_coordinates_h coord1 = NULL, coord2 = NULL, coord3 = NULL;
maps_coordinates_list_h coord_list = NULL;

maps_coordinates_list_create(&amp;coord_list);
maps_coordinates_create(28.64362, 77.19865, &amp;coord1);
maps_coordinates_list_append(coord_list, coord1);
maps_coordinates_create(28.63441, 77.16908, &amp;coord2);
maps_coordinates_list_append(coord_list, coord2);
maps_coordinates_create(28.65344, 77.22803, &amp;coord3);
maps_coordinates_list_append(coord_list, coord3);

error = maps_view_object_create_polyline(coord_list, 255, 0, 0, 0, 5, &amp;object);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre></li>

<li>To create a marker with the <span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_MARKER_PIN</span> type:
<pre class="prettyprint">
maps_view_object_h object = NULL;
maps_coordinates_h coord = NULL;

maps_coordinates_create(28.64362, 77.19865, &amp;coord);

error = maps_view_object_create_marker(coord, &quot;image/marker_icon.png&quot;, MAPS_VIEW_MARKER_PIN, &amp;object);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre>
<p>You can also create the <span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_MARKER_STICKER</span> type marker.</p>
</li>
</ul>
</li>

<li>Add the object instance to the map view with the <span style="font-family: Courier New,Courier,monospace;">maps_view_add_object()</span> function:
<pre class="prettyprint">
error = maps_view_add_object(maps_view, object);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre></li>

<li>When no longer needed, remove the instance with the <span style="font-family: Courier New,Courier,monospace;">maps_view_remove_object()</span> function:
<pre class="prettyprint">
maps_view_remove_object(maps_view, object);
</pre></li>
</ol>



<h2 id="maps_event" name="maps_event">Managing Map View Events</h2>

<p>To handle map view events:</p>
<ol><li>Register an event callback with the <span style="font-family: Courier New,Courier,monospace;">maps_view_set_event_cb()</span> function.
<p>In the second parameter, define the type of the event you want to receive:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_GESTURE</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_ACTION</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_OBJECT</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">MAPS_VIEW_EVENT_READY</span></li>
</ul>

<pre class="prettyprint">
error = maps_view_set_event_cb(maps_view, MAPS_VIEW_EVENT_GESTURE, __main_view_event_cb, NULL);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

static void
__main_view_event_cb(const maps_view_event_type_e type, maps_view_event_data_h event_data, void *user_data)
{
   /* Handle the obtained event */
}
</pre></li>

<li>Within the callback, access the event data with various <span style="font-family: Courier New,Courier,monospace;">maps_view_event_data_get_XXX()</span> functions of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MAPS__VIEW__EVENT__DATA__MODULE.html">View Event Data</a> API.
</li>

<li>When no longer needed, unset the callback with the <span style="font-family: Courier New,Courier,monospace;">maps_view_unset_event_cb()</span> function:
<pre class="prettyprint">
error = maps_view_unset_event_cb(maps_view, MAPS_VIEW_EVENT_GESTURE);
if (error != MAPS_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
</pre></li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div>
</div>
</div>


<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"><p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">    Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
	var _gaq = _gaq || [];
	_gaq.push(['_setAccount', 'UA-25976949-1']);
	_gaq.push(['_trackPageview']);
	(function() {
		 var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
		 ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		 var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
		 })();
</script>
</body>
</html>

