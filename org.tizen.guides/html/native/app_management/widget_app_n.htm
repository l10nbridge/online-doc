<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Widget Application</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#app_instance">Widget Application and Widget Instance</a></li>
			<li><a href="#app">Widget Application States and Events</a></li>
			<li><a href="#instance">Widget Instance States and Events</a></li>
			<li><a href="#share">Data Sharing Between the Widget Application and Other Applications</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#create">Creating the Widget Application</a></li>	 
			<li><a href="#life-cycle">Managing Widget Instance Life-cycle Callbacks</a></li>	 
			<li><a href="#get_window">Drawing the Widget UI</a></li>	 
			<li><a href="#get_instance">Managing the Widget Instance</a></li>	 		
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">Widget Application API for Wearable Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/AppFW/Widget_Animation" target="_blank">Widget Animation Sample Description</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Widget Application</h1>
<p>You can create widget applications, which are Tizen native applications shown on the home screen. They are launched by the home screen when the user selects them in the <strong>Add Widget</strong> menu.</p>

  <p>The main features of the Widget Application API include:</p>
  <ul>
	<li>Managing multiple widget instances
	<p>Each widget application usually has 1 process for maintaining the main loop. Within that process, the application can <a href="#get_instance">create multiple widget instances</a> that can share the same resources.</p></li>
	<li>Managing the life-cycle
	<p>You can manage the widget application and widget instance life-cycles through callbacks that are triggered as the application or instance state changes.</p>
	<p>The widget application starts with the <span style="font-family: Courier New,Courier,monospace">main()</span> function, which <a href="#create">creates and initializes the application</a>. The <span style="font-family: Courier New,Courier,monospace">widget_app_main()</span> function is used to start the application event loop. Before calling this function, set up the <span style="font-family: Courier New,Courier,monospace">widget_app_lifecycle_callback_s</span> structure variable, which is passed to the function.</p>
	<p>To ensure that the application runs smoothly, you must <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#widget_app">edit the application manifest file</a> to define the widget settings.</p>
	</li>
	<li>Creating the widget UI
	<p>The widget application can <a href="#get_window">draw a UI on the home screen</a>. To do this, you must get the window object of the home screen and attach UI components to it. You can use the <span style="font-family: Courier New,Courier,monospace">widget_app_get_elm_win()</span> function to create an EFL object for widget window.</p>
	  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The widget application UI has a limitation with the scroll action to provide better user experience. Design the widget UI to display all the information within the given area of the screen points.</td> 
    </tr> 
   </tbody> 
  </table> 
	
	</li>
	</ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the widget functionality</a>.</p>
	
<h2 id="app_instance" name="app_instance">Widget Application and Widget Instance</h2>

<p>The widget application provides a life-cycle and methods for making and managing a widget class. It consists of 1 process and make the widget class in the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> callback function. With this class, the framework can make instances whenever applications for widget viewers, such as home screen and lock screen, request for a widget instance.</p>
<p>The widget instance has its own life-cycle similar to the widget application. However, the widget instance is only an object shown by the applications for widget viewers. Many widget instances can be running on the same widget application process.</p>
<p class="figure">Figure: Each widget application has 1 or more widget instances</p>
<p align="center"><img alt="Each widget application has 1 or more widget instances" src="../../images/widget_homescreen.png"/></p>


<h2 id="app" name="app">Widget Application States and Events</h2>

<p>The following figure illustrates the widget application states during the application life-cycle:</p>
<ul>
<li>When the application is launched, it is in the Ready state.</li>
<li>When the application is running on the background, it is in the Running state.</li>
<li>When the application exits, it is in the Terminated state.</li>
</ul>
       <p class="figure">Figure: Widget application life-cycle</p>
       <p align="center"><img alt="Widget application life-cycle" src="../../images/widget_app_lifecycle.png" /></p>


<p>The following table lists the callbacks you can use as the application state changes.</p>

<table>
	   <caption>
			   Table: Application state change callbacks
	   </caption>
	   <tbody>
	  <tr>
			   <th>Callback</th>
			   <th>Description</th>
	   </tr>
	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_app_create_cb()</span></td>
			   <td>Called before the main loop of the application starts.</td>
	   </tr>
	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_app_terminate_cb()</span></td>
			   <td>Called after the main loop of the application exits.</td>
	   </tr>
	   </tbody>
</table>
	
<h2 id="instance" name="instance">Widget Instance States and Events</h2>

<p>The following figure illustrates the widget instance states during the instance life-cycle:</p>
<ul>
<li>When the application is in the Ready state, the instance does not exist.</li>
<li>When the instance is created, it is in the Created state.</li>
<li>When the instance is visible, it is in the Running state.</li>
<li>When the instance is invisible, it is in the Paused state.</li>
<li>When the instance is destroyed, it is in the Destroyed state.</li>
</ul>
       <p class="figure">Figure: Widget instance life-cycle</p>
       <p align="center"><img alt="Widget instance life-cycle" src="../../images/widget_instance_lifecycle.png" /></p>


<p>The following table lists the <a href="#life-cycle">callbacks you can use as the instance state changes</a>.</p>

<table>
	   <caption>
			   Table: Instance state change callbacks
	   </caption>
	   <tbody>
	  <tr>
			   <th>Callback</th>
			   <th>Description</th>
	   </tr>
	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_create_cb()</span></td>
			   <td>Called after the widget instance is created.</td>
	   </tr>
	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_destroy_cb()</span></td>
			   <td>Called before the widget instance is destroyed.</td>
	   </tr>

	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_pause_cb()</span></td>
			   <td>Called when the widget is invisible.</td>
	   </tr>
	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_resume_cb()</span></td>
			   <td>Called when the widget is visible.</td>
	   </tr>

	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_resize_cb()</span></td>
			   <td>Called before the widget size is changed.</td>
	   </tr>

	   <tr>
			   <td><span style="font-family: Courier New,Courier,monospace">widget_instance_update_cb()</span></td>
			   <td>Called when an event for updating the widget is received.</td>
	   </tr>
	   </tbody>
</table>	
	
<p>To register widget instance callbacks, use the <span style="font-family: Courier New,Courier,monospace">widget_app_class_create()</span> function within the <span style="font-family: Courier New,Courier,monospace">widget_app_create_cb()</span> callback function:</p>	

<pre class="prettyprint">
static widget_class_h
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s ops =
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.create = widget_instance_create,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.destroy = widget_instance_destroy,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.pause = widget_instance_pause,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.resume = widget_instance_resume,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.update = widget_instance_update,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.resize = widget_instance_resize,
&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;return widget_app_class_create(ops, user_data);
}
</pre>

<p>When the widget launch is requested for the first time, the widget application is initialized and the widget instance is created only after the initialization. If there are additional launch requests for the same widget, a new widget instance for those is created directly, since the widget application has already been initialized.</p>

<p class="figure">Figure: Launching widget instances</p>
<p align="center"><img alt="Launching widget instances" src="../../images/widget_app_instance_flow.png"/></p>

<h2 id="share" name="share">Data Sharing Between the Widget Application and Other Applications</h2>

<p>You can share data between widget applications and UI (or service) applications. However, you must understand that this kind of data sharing is based on the file system. The reason is that the system (Home screen) controls the widget application life-cycle, while the UI application life-cycle is mostly explicitly controlled by the user.</p>

<p>For example, consider the differences between a Weather application and a Weather widget:</p>
<ul>
<li>The Weather application is launched when user selects it from the application list.</li>
<li>The widget is launched when the Home screen is on screen and is terminated when the Home screen is hidden.</li></ul>

<p>Although the widget wants to share some data from the Weather application (such as the user&#39;s favorite city), it is ineffective for the widget to launch the Weather application every time to retrieve such data. This inefficiency makes it difficult to use typical IPC mechanisms, such as socket and <a href="message_port_n.htm">Message Port</a>, in which both the receiver and sender processes must be alive for communication. To overcome this issue, the widget application must use a communication type where the data is permanently stored somewhere in the system.</p> 

<p>In the Tizen platform, applications in the same package (including widget applications) can access files in the <span style="font-family: Courier New,Courier,monospace">data</span> directory of the package installation path. This means that the UI (or service) application can first write files to the <span style="font-family: Courier New,Courier,monospace">data</span> directory, and the widget can later read them, or vice versa.</p>

<p class="figure">Figure: Sharing through the data directory</p> 
<p align="center"><img alt="Sharing through the data directory" src="../../images/widget_data_share.png" /></p> 

<p>To manage data through the <span style="font-family: Courier New,Courier,monospace">data</span> directory:</p>

<ul>
<li><p>You can set and get data in the <span style="font-family: Courier New,Courier,monospace">data</span> directory using the Preference API functions (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__PREFERENCE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__PREFERENCE__MODULE.html">wearable</a> applications). You can use the functions to <a href="app_preferences_n.htm">store and retrieve key-value data</a> in the <span style="font-family: Courier New,Courier,monospace">data</span> directory.</p></li>

<li><p>You can share the <span style="font-family: Courier New,Courier,monospace">data</span> directory content with Sqlite, by creating an Sqlite database file in the <span style="font-family: Courier New,Courier,monospace">data</span> directory.</p>
<p>The Sqlite database has an advantage to a direct use of a file in error handling, such as journaling. Consequently, if the application must handle complex data rather than primitive values, <a href="../data/sql_n.htm">use Sqlite to store and retrieve the data</a>.</p></li></ul>

<p>If an application requires complex control over a widget, such as Music Player, it must implement a service application in the middle and use the Data Control API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__DATA__CONTROL__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__DATA__CONTROL__MODULE.html">wearable</a> applications).</p>
<p>For example, a music-player-service service application is needed to control the audio device, process audio files, and handle play and stop signals. The music-player-ui and music-player-widget applications display the UI controls, title, album arts, and other content retrieved from the music-player-service service application. The service application can export its data using the Data Control to <a href="data_control_n.htm">provide data to the other applications</a> (widget and UI) simultaneously.</p>

<p>The following figure illustrates typical data control flows between the set of UI, service, and widget applications.</p>

<p class="figure">Figure: Sharing through data control</p> 
<p align="center"><img alt="Sharing through data control" src="../../images/widget_data_control_share.png" /></p>

<table class="note">
  <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">For user convenience, a STANDALONE widget application package is not allowed in the Tizen Store.
	 <p>You can make a STANDALONE widget application in the IDE for test purposes. However, to publish it, you must combine it with at least 1 UI application in the package. For more details, see <a href="../../../../org.tizen.tutorials/html/native/process/app_dev_process_n.htm#develop">Developing Multiple Projects as a Combined Package</a>.</p></td>
    </tr>
  </tbody>
</table>

<h2>Warm-up</h2>
<p>Become familiar with the Widget Application API basics by learning about:</p>
	<ul>
		 <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the widget functionality.</p></li>
		 <li><a href="#create">Creating the Widget Application</a>
		 <p>Create a widget application, and define and register system callbacks.</p></li>	 
		 <li><a href="#life-cycle">Managing Widget Instance Life-cycle Callbacks</a>
		 <p>Define and register life-cycle callbacks.</p></li>	 
		 <li><a href="#get_window">Drawing the Widget UI</a>
		 <p>Create a UI object of the widget on the home screen.</p></li>	 
		 <li><a href="#get_instance">Managing the Widget Instance</a>
		 <p>Get the widget instance and the instance ID.</p></li>	 		 
	</ul>


<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the widget functionality:</p>
<ol>
<li>To use the functions and data types of the Widget Application API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__WIDGET__APP__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__WIDGET__APP__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;widget_app.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace">&lt;widget_app_efl.h&gt;</span> header files in your application:
<pre class="prettyprint">
#include &lt;widget_app.h&gt;
#include &lt;widget_app_efl.h&gt;
</pre></li>
<li>Edit the widget application settings in the <a href="../../../../org.tizen.devtools/html/native_tools/manifest_text_editor_n.htm#widget_app">manifest</a> file.</li>
</ol>

 <h2 id="create">Creating the Widget Application</h2> 
 
<p>To create the widget application:</p>
<ol>
<li>
<p>Start and initialize the application with the <span style="font-family: Courier New,Courier,monospace">main()</span> function.</p>
<p>Set up the <span style="font-family: Courier New,Courier,monospace">widget_app_lifecycle_callback_s</span> structure variable for the widget application life-cycle callbacks, define the functions themselves (<span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> for initialization and <span style="font-family: Courier New,Courier,monospace">widget_app_terminate()</span> for termination), and call the <span style="font-family: Courier New,Courier,monospace">widget_app_main()</span> function to start the application event loop.</p>
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_lifecycle_callback_s ops = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;ops.create = widget_app_create;
&nbsp;&nbsp;&nbsp;&nbsp;ops.terminate = widget_app_terminate;

&nbsp;&nbsp;&nbsp;&nbsp;ret = widget_app_main(argc, argv, &amp;ops, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;widget_app_main() failed. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> life-cycle function to initialize any resources that can be shared among widget instances. This function is called before the main event loop starts.
<pre class="prettyprint">
widget_class_h
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Hook to take necessary actions before main event loop starts */
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s obj_callback = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;&nbsp;/* Register the callback functions for the widget instance life-cycle */
</pre>
</li>

<li>Register the callback functions for the system events.
<p>At the end of the <span style="font-family: Courier New,Courier,monospace">widget_app_create()</span> function, remember to create a widget instance class and return a handle for it, so that the handle can be used for making widget instances.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Register the callback functions for system events */
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_low_battery, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_low_memory, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;widget_app_lang_changed, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APP_EVENT_REGION_FORMAT_CHANGED, widget_app_region_changed, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre>
<p>When the system-related callback are no longer needed, remove them with the <span style="font-family: Courier New,Courier,monospace">widget_app_remove_event_handler()</span> function.</p>
</li>

<li>Define the callback functions for the system events:
<pre class="prettyprint">
void
widget_app_lang_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Take actions when language setting changes and messages must be translated */
&nbsp;&nbsp;&nbsp;&nbsp;char *locale = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;app_event_get_language(event_info, &amp;locale);
&nbsp;&nbsp;&nbsp;&nbsp;elm_language_set(locale);
&nbsp;&nbsp;&nbsp;&nbsp;free(locale);
}

void
widget_app_region_changed(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Take actions when the time zone changes */
}

void
widget_app_low_battery(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Take actions when system is running low on battery (less than 5%) */
&nbsp;&nbsp;&nbsp;&nbsp;/* Save the work and avoid battery-intensive processes */
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_exit();
}

void
widget_app_low_memory(app_event_info_h event_info, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Take actions when system is running on low memory */
&nbsp;&nbsp;&nbsp;&nbsp;/* Save the work and release resources; if necessary, some apps can be killed */
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_exit();
}
</pre>
</li>

<li>When you no longer need the widget application, release the resources and terminate the application:
<pre class="prettyprint">
static void
widget_app_terminate(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Release all resources */
}
</pre>
</li>
</ol>

<h2 id="life-cycle">Managing Widget Instance Life-cycle Callbacks</h2>
<p>To manage the widget instance life-cycle:</p>
<ol>
<li>Define the widget instance life-cycle callbacks:
<ul>
<li>This callback is triggered when the widget instance is created.
<p>Initialize resources for this widget instance and <a href="#get_window">draw the UI</a>. If bundle content is not <span style="font-family: Courier New,Courier,monospace">NULL</span>, restore the previous status.</p>
<pre class="prettyprint">
int
widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)malloc(sizeof(widget_instance_data_s));
&nbsp;&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;&nbsp;if (content != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Recover the previous status with the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;/* Create the UI */

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>

<li>This callback is triggered when the widget instance is destroyed. 
<p>Release all widget resources. If the <span style="font-family: Courier New,Courier,monospace">reason</span> for the termination is not <span style="font-family: Courier New,Courier,monospace">WIDGET_APP_DESTROY_TYPE_PERMANENT</span>, store the current status with the incoming bundle.</p>
<pre class="prettyprint">
int
widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Save the current status at the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>

</li>

<li>This callback is triggered when the widget instance is paused.
<p>Take the necessary actions since the widget instance becomes invisible. The framework can destroy a paused widget instance.</p>
<pre class="prettyprint">
int
widget_instance_pause(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
<li>This callback is triggered when the widget instance is resumed.
<p>Take the necessary actions since the widget instance becomes visible.</p>
<pre class="prettyprint">
int
widget_instance_resume(widget_context_h context, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
<li>This callback is triggered before the widget instance is resized.
<p>Take the necessary actions to accommodate the new size.</p>
<pre class="prettyprint">
int
widget_instance_resize(widget_context_h context, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
} 
</pre>
</li>
<li>This callback is triggered when a widget update event is received.
<p>Take the necessary actions for the widget update. If the <span style="font-family: Courier New,Courier,monospace">force</span> parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, the widget can be updated even in the pause state.</p>
<pre class="prettyprint">
int
widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>
</li>
</ul>
</li>

<li>Register the callbacks in the <span style="font-family: Courier New,Courier,monospace">widget_instance_lifecycle_callback_s</span> structure during the widget application initialization:
<pre class="prettyprint">
widget_class_h
widget_app_create(void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_lifecycle_callback_s obj_callback = {0,};
&nbsp;&nbsp;&nbsp;&nbsp;/* Register the callback functions */
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.create = widget_instance_create;
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.destroy = widget_instance_destroy;
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.pause = widget_instance_pause;
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.resume = widget_instance_resume;
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.resize = widget_instance_resize;
&nbsp;&nbsp;&nbsp;&nbsp;obj_callback.update = widget_instance_update;

&nbsp;&nbsp;&nbsp;&nbsp;/* Register system-related callbacks */

&nbsp;&nbsp;&nbsp;&nbsp;return widget_app_class_create(obj_callback, user_data);
}
</pre>
</li>
</ol>

<h2 id="get_window">Drawing the Widget UI</h2>

<p>To draw the widget UI, you must get a window object with the <span style="font-family: Courier New,Courier,monospace">widget_app_get_elm_win()</span> function and create the UI on the home screen:</p>
<pre class="prettyprint">
struct widget_instance_data {
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;
};
typedef struct widget_instance_data widget_instance_data_s;

static int
widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = (widget_instance_data_s*)malloc(sizeof(widget_instance_data_s));

&nbsp;&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;&nbsp;if (content != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Recover the previous status with the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;/* Window */
&nbsp;&nbsp;&nbsp;&nbsp;ret = widget_app_get_elm_win(context, &amp;wid-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret != WIDGET_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get window. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_FAULT;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;win, w, h);

&nbsp;&nbsp;&nbsp;&nbsp;/* Conformant */
&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;conform = elm_conformant_add(wid-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(wid-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(wid-&gt;win, wid-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;conform);

&nbsp;&nbsp;&nbsp;&nbsp;/* Label */
&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;label = elm_label_add(wid-&gt;conform);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(wid-&gt;label, w, h / 3);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(wid-&gt;label, 0, h / 3);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;label);
&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(wid-&gt;label, &quot;Hello widget&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;/* Show the window after the base GUI is set up */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, wid);

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}

int
widget_instance_destroy(widget_context_h context, widget_app_destroy_type_e reason,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (reason != WIDGET_APP_DESTROY_TYPE_PERMANENT)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Save the current status at the bundle object */

&nbsp;&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;wid);

&nbsp;&nbsp;&nbsp;&nbsp;if (wid-&gt;win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;free(wid);

&nbsp;&nbsp;&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>

<h2 id="get_instance">Managing the Widget Instance</h2>

<p>To manage the widget instance:</p>
<ol>
<li>You can set a customized widget instance with the <span style="font-family: Courier New,Courier,monospace">widget_app_context_set_tag()</span> function when the instance is created. To update or destroy the customized widget, get the instance with the <span style="font-family: Courier New,Courier,monospace">widget_app_context_get_tag()</span> function.
<pre class="prettyprint">
struct _user_defined_s {
&nbsp;&nbsp;&nbsp;&nbsp;int val1;
};
typedef struct _user_defined_s user_defined_s;

int
widget_instance_create(widget_context_h context, bundle *content, int w, int h, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;user_defined_s *uds = (user_defined_s*)malloc(sizeof(user_defined_s));
&nbsp;&nbsp;&nbsp;&nbsp;uds-&gt;val1 = 0;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_set_tag(context, uds);
}

int
widget_instance_destroy(widget_context_h context, widget_destroy_type_e reason,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle *content, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;user_defined_s *uds = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;uds);
&nbsp;&nbsp;&nbsp;&nbsp;free(uds);
}

int
widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;user_defined_s *uds = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**)&amp;uds);
&nbsp;&nbsp;&nbsp;&nbsp;uds-&gt;val1 = 1;
}
</pre>
</li>

<li>Get the widget instance ID:
<pre class="prettyprint">
int
widget_instance_update(widget_context_h context, bundle *content, int force, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;const char *inst_id = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;inst_id = widget_app_get_id(context);
}
</pre></li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>	