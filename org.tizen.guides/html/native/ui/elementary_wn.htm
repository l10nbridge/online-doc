<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Elementary</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#getting_started">Getting Started with the Elementary Library</a></li>
				<li><a href="#config">Managing Elementary Profiles</a></li>
				<li><a href="#options">Configuring Elementary Options</a></li>
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/ui/ui_component_tutorials_wn.htm">UI Components Tutorials</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Eina.html">Eina API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Elementary</h1> 
  
 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in wearable applications only.</td> 
    </tr> 
   </tbody> 
  </table>    
 

<p>Elementary UI components are built in a hierarchical fashion. The idea is to factorize as much code as possible between UI components that behave in a similar manner to facilitate the creation of new UI components. The Elementary UI components inherit a lot of their code from the <a href="ui_component_wn.htm#containers">container UI components</a> and the layout component (a container component that takes a standard Edje design file and wraps it very thinly). You can use the container and layout functions on the Elementary UI components, as well as the Elementary object functions, such as <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span>, <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_get()</span>, and <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_unset()</span>.</p>

<h2 id="getting_started" name="getting_started">Getting Started with the Elementary Library</h2>

<p>To use the Elementary library:</p>

<ol><li>Initialize the Elementary library with the <span style="font-family: Courier New,Courier,monospace">elm_init()</span> function.</li>
<li>Start the Elementary main loop with the <span style="font-family: Courier New,Courier,monospace">elm_run()</span> function.
<p>The function does not return, instead, it constantly loops and runs the event and the processing tasks.</p></li>
<li>Add Elementary UI components in the main loop.
<p>Generally, an Elementary UI component can be added with the <span style="font-family: Courier New,Courier,monospace">elm_&lt;UI component name&gt;_add()</span> function, which returns an Evas object (<span style="font-family: Courier New,Courier,monospace">Evas_Object*</span>). The Evas object is passed to the functions that are used to configure the UI component.</p></li>
<li>Stop the main loop and return to the <span style="font-family: Courier New,Courier,monospace">main()</span> function with the <span style="font-family: Courier New,Courier,monospace">elm_exit()</span> function.</li>
<li>When your application terminates, shut down the Elementary library with the <span style="font-family: Courier New,Courier,monospace">elm_shutdown()</span> function.
<p>The function frees the Elementary objects that were allocated in the main loop, so you do not need to separately deallocate them.</p></li></ol>


<p>The following code snippet shows the <span style="font-family: Courier New,Courier,monospace">main()</span> function of a minimal Elementary application:</p>

<pre class="prettyprint">
#include &lt;Elementary.h&gt;
int main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;elm_init(argc, argv);
&nbsp;&nbsp;&nbsp;elm_run();
&nbsp;&nbsp;&nbsp;elm_shutdown();

&nbsp;&nbsp;&nbsp;return 0;
}</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">An Elementary application must use the <span style="font-family: Courier New,Courier,monospace">ELM_MAIN()</span> macro, which calls the <span style="font-family: Courier New,Courier,monospace">elm_init()</span> function. The <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">HelloWorld example</a> shows a basic Elementary application that uses this macro.</td>
        </tr>
    </tbody>
</table>

<h3 id="objects" name="objects">Elementary Objects</h3>

<p>All objects created using Elementary are of the <span style="font-family: Courier New,Courier,monospace">Evas_Object*</span> type. This means that both Evas and Elementary functions can be used on an Elementary object. However, use Elementary functions on Elementary objects only when you do not know which API to use.</p>

<p>Since an Elementary object can take up a lot of memory, the <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> type has been created for situations where you need to use a lot of items, such as in a genlist or gengrid component, and to save memory. Using the <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> type, an Elementary UI component can, in theory, contain a lot of items while maintaining a small memory footprint. In practice, the <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> instance is bigger than expected, but can still help in saving memory.</p>

<h3 id="callbacks" name="callbacks">Elementary Callbacks</h3>

<p>Several callbacks can be registered to handle Elementary object events:</p>

<ul>
<li>Evas event callback
<p>Use the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function to add a callback for input events (key up, key down, mouse wheel) on an Evas object. In case of an Elementary object, the callback is registered on the underlying Evas object without considering the Elementary object infrastructure (no event propagation).</p>
</li>

<li>Evas smart callback
<p>Use the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function to add a callback for a smart event emitted by an Elementary object. Smart callbacks can only be registered on smart objects, and the &quot;smart event&quot; to register must be implemented by the corresponding smart object. Otherwise, the callback does nothing. The callback does not apply to input events (keyboard or mouse).</p>
</li>

<li>Edje signal callback
<p>Use the <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> function to add a callback for a signal coming from an Edje object (a theme object).</p>
</li>

<li>Elementary signal callback
<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> function to add a callback for a signal coming from an Elementary UI component&#39;s theme. The callback does not apply to input events (keyboard or mouse).</p>
</li>

<li>Elementary event callback
<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_object_event_callback_add()</span> function to add a callback for an input event (keyboard or mouse) coming from an Elementary object. In contrast to the Evas event callback, the Elementary event callback takes the hierarchy of the object into account: the event can be propagated to the parents of the object, and the parents can process the event.</p>
</li>
</ul>

<p>For more information about events related to Elementary objects, see <a href="events_effects_n.htm#event_handling">Handling Events</a>. For more information about Evas objects and smart objects, see <a href="evas_n.htm#render">Rendering Concept and Method in Evas</a>.</p>
  
  <h2 id="config" name="config">Managing Elementary Profiles</h2> 

<p>An Elementary profile is a set of preconfigured options that affects the entire look and feel of an application. The options linked to a specific profile form an Elementary configuration, which can be used to store the desired set of options for use in multiple sessions. Once loaded, the Elementary profile configures all the options and sets the look and feel of your Elementary application.</p>

<p>To manage Elementary profiles:</p>
<ul>
<li>List the existing profiles:
<pre class="prettyprint">
Eina_List *list = elm_config_profile_list_get();
</pre>
</li>
<li>Set a particular profile:
<pre class="prettyprint">
elm_config_profile_set(&quot;myprofile&quot;);
</pre>
</li>
<li>Get the current profile:
<pre class="prettyprint">
char *profile = elm_config_profile_get();
</pre>
</li>
<li>To save the current option values as an Elementary configuration for later use, use the <span style="font-family: Courier New,Courier,monospace">elm_config_save()</span> function:
<pre class="prettyprint">
elm_config_save();
</pre>
</li>
<li>To reload the Elementary configuration saved for the current profile:
<pre class="prettyprint">
elm_config_reload();
</pre>
</li>
</ul>

<h2 id="options" name="options">Configuring Elementary Options</h2>

<p>You can set the following options in the Elementary configuration. In addition, you can <a href="#customizing_themes">customize themes</a> and <a href="#config_focus">manage focus</a>.</p>
<ul>

<li>To scale UI components:
<p>You can configure <a href="ui_component_wn.htm#scalability">UI component scaling</a> in terms of both interactive and readable areas.</p>
<ul>
<li>Set the global scaling factor (for example, setting it to 2.0 doubles the size of all scalable UI components):
<pre class="prettyprint">
elm_config_scale_set(2.0);
</pre>
</li>

<li>Set the finger size:
<pre class="prettyprint">
elm_config_finger_size_set(1.5);
</pre>
</li>
</ul>
</li>

<li>To manage caches:
<ul>
<li>Enable the globally configured cache flush, and set the flush interval (in this example, to 60 seconds):
<pre class="prettyprint">
elm_config_cache_flush_enabled_set(EINA_TRUE);
elm_config_cache_flush_interval_set(60);
</pre>
</li>

<li>Configure the font and image cache sizes (to 500 and 5 000 000 bytes, respectively):
<pre class="prettyprint">
elm_config_cache_font_cache_size_set(500);
elm_config_cache_image_cache_size_set(5000000);
</pre>
</li>

<li>Set the Edje collection and Edje file cache sizes:
<pre class="prettyprint">
elm_config_cache_edje_file_cache_size_set(500);
elm_config_cache_edje_collection_cache_size_set(500);
</pre>
</li>
</ul>
</li>


<li>To configure the gesture layer:
<p>You can set the duration of the long tap and double tap events on the gesture layer objects. The following example sets the duration to 500 ms.</p>

<pre class="prettyprint">
elm_config_glayer_long_tap_start_timeout_set(0.5);
elm_config_glayer_double_tap_timeout_set(0.5);
</pre>
</li>
<li>To manage scrolling:
<ul>
<li>Make the scroller bounce when it reaches its viewport&#39;s edge during scrolling by using the <span style="font-family: Courier New,Courier,monospace">elm_config_scroll_bounce_enabled_set()</span> function:
<pre class="prettyprint">
elm_config_scroll_bounce_enabled_set(EINA_TRUE);
</pre>
</li>

<li>Control the inertia of the bounce animation by using the <span style="font-family: Courier New,Courier,monospace">elm_config_scroll_bounce_friction_set()</span> function:
<pre class="prettyprint">
elm_config_scroll_bounce_friction_set(0.5);
</pre>
<p>You can also set the friction for a page scroll, include animations, and zoom animations.</p>
</li>

<li>Set the scroller to be draggable by using the <span style="font-family: Courier New,Courier,monospace">elm_config_scroll_thumbscroll_enabled_set()</span> function. You can configure several drag options, such as friction, sensitivity, acceleration, and momentum.

<p>The following example sets the scroller to be draggable, defines that the number of pixels one must travel while dragging the scroller view to actually trigger  scrolling is 20 pixels.</p>
<pre class="prettyprint">
elm_config_scroll_thumbscroll_enabled_set(EINA_TRUE);
elm_config_scroll_thumbscroll_threshold_set(20);
</pre>
</li>
</ul>
</li>

<li>To configure long press events:
<p>Get the current timeout before a long press event is retrieved, and modify it. The following example increases the timeout by 1 second.</p>
<pre class="prettyprint">
double lp_timeout = elm_config_longpress_timeout_get();
elm_config_longpress_timeout_set(lp_timeout + 1.0);
</pre>
</li>

<li>To configure tooltips:
<p>Set the duration after which a tooltip is shown. The following example sets the delay to 2 seconds.</p>

<pre class="prettyprint">
elm_config_tooltip_delay_set(2.0);
</pre>
</li>

<li>To configure the password show last feature:
<p>The password show last feature enables the user to view the last input entered for a few seconds before it is masked.</p>

<ul>
<li>Enable the password show last feature:
<pre class="prettyprint">
elm_config_password_show_last_set(EINA_TRUE);
</pre>
</li>
<li>Set the visibility timeout (how many seconds the input is visible): 
<pre class="prettyprint">
elm_config_password_show_last_timeout_set(5.0);
</pre>
</li>
</ul>
</li>
<li>To set the Elementary engine:
<p>You can define the rendering engine that Elementary uses to draw the windows. The following rendering engines are supported:</p>

<ul>
    <li>&quot;software_x11&quot;</li>
    <li>&quot;fb&quot;</li>
    <li>&quot;directfb&quot;</li>
    <li>&quot;software_16_x11&quot;</li>
    <li>&quot;software_8_x11&quot;</li>
    <li>&quot;xrender_x11&quot;</li>
    <li>&quot;opengl_x11&quot;</li>
    <li>&quot;software_gdi&quot;</li>
    <li>&quot;software_16_wince_gdi&quot;</li>
    <li>&quot;sdl&quot;</li>
    <li>&quot;software_16_sdl&quot;</li>
    <li>&quot;opengl_sdl&quot;</li>
    <li>&quot;buffer&quot;</li>
    <li>&quot;ews&quot;</li>
    <li>&quot;opengl_cocoa&quot;</li>
    <li>&quot;psl1ght&quot;</li>
</ul>

<pre class="prettyprint">
elm_config_engine_set(&quot;opengl_x11&quot;);
</pre>
</li>

<li>To activate the access mode: 
<p>Set the access mode as active, so that information about an Elementary object is read when the object receives an <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span> event:</p>

<pre class="prettyprint">
elm_config_access_set(EINA_TRUE);
</pre>
</li>

<li>To configure the selection mode: 
<p>Set the selection mode so that the selection is cleared when the entry component is unfocused:</p>
<pre class="prettyprint">
elm_config_selection_unfocused_clear_set(EINA_TRUE);
</pre>
</li>

<li>To enable mirroring: 
<p>Elementary allows UI mirroring both on a single object and on the entire UI. If mirroring is enabled, an Elementary UI component displays as if there was a vertical mirror in the middle of it. Only the controls and the disposition of the UI component are mirrored. Text is not mirrored.</p>

<pre class="prettyprint">
elm_config_mirrored_set(EINA_TRUE);
</pre>
</li>

<li>To set the frame rate:
<p>Define the frames per second (FPS) value for the <span style="font-family: Courier New,Courier,monospace">ecore_animator_frametime</span> and <span style="font-family: Courier New,Courier,monospace">edje_frametime</span> calculations. This example sets the FPS 60.</p>

<pre class="prettyprint">
elm_config_fps_set(60.0);
</pre>
</li>
</ul>

<h3 id="customizing_themes" name="customizing_themes">Customizing Themes</h3>

<p>Elementary uses Edje to theme its UI components. Edje provides a default theme for each UI component in an application. You can change the theme using the <span style="font-family: Courier New,Courier,monospace">ELM_THEME</span> environment variable. You can also modify the theme globally with the <span style="font-family: Courier New,Courier,monospace">elementary_config</span> utility.</p>

<p>For <a href="preferences_n.htm#customize">custom styles</a>, use extensions. Extensions allow you to write styles for specific UI components. Add a new extension to the list of Elementary themes with the <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> function, and apply the new style to the UI component with the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function. Once set, the extension replaces the default theme of the UI component.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">When developing an extension, to respect the signals emitted and the elements that need to be in place, you must know how the UI component is themed. If something is missing from the extension, it can break the UI component&#39;s behavior.</td>
        </tr>
    </tbody>
</table>

<p>To modify Elementary themes, you can also use overlays. An overlay can replace the look of all UI components by overriding the default styles. As with extensions, you must write the correct overlay theme for a UI component. When looking for a theme to apply, Elementary first checks the list of overlays, then the set theme, and finally the list of extensions. To add or remove an overlay, use the <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add()</span> and <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_del()</span> functions.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">With overlays, you can replace the default view and affect every UI component. This is very similar to setting the theme for the whole application, and probably clashes with end user options. Using overlays also runs the risk of non-matching styles across the application. Unless you have a very good reason to use them, avoid overlays.</td>
        </tr>
    </tbody>
</table>

<h3 id="config_focus" name="config_focus">Managing Focus</h3>

<p>When an Elementary object has the focus, input events are directly passed to that object in the application window. The focused object can also change its decoration to show the user where the focus is. In an Elementary application, only one object can have the focus at a time.</p>

<p>To set the focus to a new Elementary object and take the focus away from the previous focused object, use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_set()</span> function. You can make an object unfocusable with the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_allow_set()</span> function.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Only visible objects can have the focus.</td>
        </tr>
    </tbody>
</table>

<p>Elementary supports focus chains that allow you to cycle through all the focusable objects in a window. By default, the focus chain is defined by the order in which the UI components are added to the code. It is also possible to define custom focus chains, when needed.</p>

<p>For more information on focus, see <a href="preferences_n.htm#focus">Managing UI Component Focus</a>.</p>

<p>To manage the focus:</p>

<ul>
<li>To define a custom focus chain, create an <span style="font-family: Courier New,Courier,monospace">Eina_List</span>, and add the Elementary objects to it in the desired focus order. Use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_custom_chain_set()</span> function to set the final list as the custom focus chain of the parent object (in the following example, <span style="font-family: Courier New,Courier,monospace">container_object</span> is the parent object).

<pre class="prettyprint">Eina_List *obj_list = NULL;

list = eina_list_append(list, obj1); 
list = eina_list_append(list, obj4);
list = eina_list_append(list, obj2); 
list = eina_list_append(list, obj3);

elm_object_focus_custom_chain_set(container_object, list);</pre>
</li>

<li>To remove the custom focus chain and use the default focus chain instead, use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_custom_chain_unset()</span> function.
</li>

<li>To programmatically cycle through the focus chain, use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_next()</span> function.
</li>

<li>To show a highlight on the focused object:

<pre class="prettyprint">
elm_config_focus_highlight_enabled_set(EINA_TRUE);
</pre>
</li>

<li>To activate an animation when the focus shifts from one object to another:

<pre class="prettyprint">
elm_config_focus_highlight_animate_set(EINA_TRUE);
</pre>
</li>
</ul>
  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>