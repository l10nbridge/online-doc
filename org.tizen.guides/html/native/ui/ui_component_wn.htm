<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>UI Components</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#scalability">Scaling UI Components</a></li>			
				<li><a href="#components">Using UI Components</a></li>
		</ul>
		
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/ui/ui_component_tutorials_wn.htm">UI Components Tutorials</a></li>	
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje__Group.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>UI Components</h1> 
  <p>The UI component management features allow you manage the UI components and their focus on the screen, as well as create customizations. The Elementary library provides several UI components than can be used to compose the user interface of your application.</p> 
  
 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in wearable applications only.</td> 
    </tr> 
   </tbody> 
  </table>    
  
  <p>The main features of UI component management are:</p>
		<ul>
			<li><a href="#scalability">Scaling UI components</a> <p>Enables you to scale UI components in order to be comfortably used with a finger and make text more readable.</p></li>			
			<li><a href="#components">Using UI components</a> <p>Enables you to build your application without having to reinvent basic objects, such as buttons, lists, or text entries.</p></li>	
		</ul>
  
  <h2 id="scalability" name="scalability">Scaling UI Components</h2> 
  
<p>Elementary, through its configuration API (<span style="font-family: Courier New,Courier,monospace;">elm_config</span>), provides a way to scale UI components with two different parameters. <span style="font-family: Courier New,Courier,monospace;">Finger size</span> parameter is used when the interactive zones (clickable, editable) of the UI components need to be scaled in order to be comfortably used with a finger. <span style="font-family: Courier New,Courier,monospace;">Scale</span> parameter is responsible for scaling readable parts of a UI component (text or icons for example), so that it is more visible in the user interface.</p>

<h3 id="Finger_Size" name="Finger_Size">Finger Size</h3>

<p><span style="font-family: Courier New,Courier,monospace;">Finger size</span> parameter scales UI components based on the user&#39;s finger size. This is useful when using a touchscreen with a finger rather than with a stylus. The finger size parameter is in pixels and determines the minimum size of a square on the screen that is reliably hittable with a finger. This parameter scales the input and interactive areas.</p>

<p>The global finger size is set with the <span style="font-family: Courier New,Courier,monospace;">elm_config_finger_size_set()</span> function. This adjusts the size and hit area of UI components so they are easy to hit with a finger. The current value is retrieved with the <span style="font-family: Courier New,Courier,monospace;">elm_config_finger_size_get()</span> call. The finger size is always in pixel.</p>

<p>To increase the current global finger size by 20px:</p>

<pre class="prettyprint">
Evas_Coord finger_size;

// Get the current finger size
finger_size = elm_config_finger_size_get();

// Add 20px to finger size parameter and set it 
// to the global Elementary configuration
elm_config_finger_size_set(finger_size + 20);
</pre>

<h3 id="Scale" name="Scale">Scale</h3>

<p>This parameter only scales the readable areas of the UI component (text, icons). Parts that must stay pixel-perfect like the highlights, shading, textures and decorations stay as they are.</p>

<p><span style="font-family: Courier New,Courier,monospace;">elm_config_scale_set()</span> function is used to set the global scaling factor, that affects to all the UI components. It is also possible to use <span style="font-family: Courier New,Courier,monospace;">elm_object_scale_set()</span> to set the scaling factor on a given Elementary UI component and all its children.</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The scaling factor is multiplicative, if a child already has a scale size set, it is multiplied by its parent&#39;s scale size.</td>
</tr>
</tbody>
</table>

<p>The following example sets the global scaling factor to 2.0. Then, the scaling factor of an existing Elementary object is set to 2.0, meaning that this object appears as if it had a 4.0 scale factor, the rest of the application is displayed with a 2.0 scaling factor:</p>

<pre class="prettyprint">
Evas_Object *button;

// The button object is created and configured

// Set the global scale factor to 2.0
elm_config_scale_set(2.0);

// Set the scaling factor of the button component to 2.0, this component
// appears 4 times bigger than its initial size
elm_object_scale_set(button, 2.0);
</pre>

<h3 id="Example" name="Example">Example</h3>

<p>This chapter shows the visual result of finger size and scaling factors modification.</p>

<p class="figure">Figure: <span style="font-family: Courier New,Courier,monospace;">elementary_config</span> application</p> 
<p align="center"><img alt="elementary_config application" src="../../images/scale_1_finger_50.png" /></p> 

<p>The previous picture shows the <span style="font-family: Courier New,Courier,monospace;">elementary_config</span> application that enables the user to set global scale factor and finger size parameter. As the user drags the sliders, the UI is updated, directly showing the result of the new parameter value.</p>

<p>The next picture shows the behavior when the finger size parameter has been increased to 1.30. The text of the sliders and the text of the items in the toolbar are bigger.</p>

<p class="figure">Figure: Scale increased (1.30)</p> 
<p align="center"><img alt="Scale increased (1.30)" src="../../images/scale_1.3_finger_50.png" /></p> 

<p>A finger size increase is showed in the image below (increase from 50px to 90 px). Now, the buttons in the toolbar are bigger, so the user can more reliably hit them with a big finger.</p>

<p class="figure">Figure: Finger size increased (90px)</p> 
<p align="center"><img alt="Finger size increased (90px)" src="../../images/scale_1_finger_90.png" /></p> 

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">It is up to the theme (Edje file) to set the parts that are scalable. This is something that needs to be taken into account when developing a new Edje theme. This can be done in EDC with the <span style="font-family: Courier New,Courier,monospace;">scale</span> parameter. Refer to the <a href="edje_n.htm">Edje</a> guide for more information on how to do that.</td>
</tr>
</tbody>
</table> 

<h3 id="Scalable_EDC_Object" name="Scalable_EDC_Object">Creating Scalable EDC Objects</h3>

<h4>Scale Parameter </h4>

<p>This chapter explains how to make a scalable Edje object and give hints how to write an EDC file that is scalable. The example shows a basic button that is composed of a background image part and a swallow part that can receive some content.</p>

<pre class="prettyprint">
group 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;button&quot;;
&nbsp;&nbsp;&nbsp;images 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: &quot;bg.png&quot; COMP;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;bg.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;elm.swallow.content&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible:1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>To have a scalable object, set the <span style="font-family: Courier New,Courier,monospace;">scale</span> parameter to 1 on the parts you want to be scalable as explained in the <a href="edje_n.htm#Scalability">scalability chapter of the Edje guide</a>. Here the <span style="font-family: Courier New,Courier,monospace;">bg</span> and <span style="font-family: Courier New,Courier,monospace;">elm.swallow.content</span> parts must be scalable.</p>

<pre class="prettyprint">
group 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;button&quot;;
&nbsp;&nbsp;&nbsp;images 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: &quot;bg.png&quot; COMP;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;parts
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;bg.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;elm.swallow.content&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible:1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h4>Image Set</h4>

<p>If your application needs to be used at different resolutions it is recommended to have 2 images for the background image <span style="font-family: Courier New,Courier,monospace;">bg.png</span>. Here the <span style="font-family: Courier New,Courier,monospace;">bg_low.png</span> is added to the application. It is used when the size of the image is under 500 px, and a <span style="font-family: Courier New,Courier,monospace;">bg_high.png</span> image is for higher resolutions. Use a set on the <span style="font-family: Courier New,Courier,monospace;">bg.png</span> image as explained in the Using Image Set chapter of the <a href="edje_n.htm">Edje</a> guide.</p>

<pre class="prettyprint">
group 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;button&quot;;
&nbsp;&nbsp;&nbsp;images 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: &quot;bg_low.png&quot; COMP;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 0 0 200 100;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image: &quot;bg_high.png&quot; COMP;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size: 201 101 5000 5000;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The image below shows three buttons with only a background part visible (the SWALLOW part is empty).</p>

<p class="figure">Figure: Image set example</p> 
<p align="center"><img alt="Image set example" src="../../images/scale.png" /></p> 

<p>The first button&#39;s size is 100x50 pixels, the background image (<span style="font-family: Courier New,Courier,monospace;">bg_low.png</span>) is the same size. The second button is twice bigger than the first one (200x100 pixels). The image is scaled and it does not render well, the borders are quite blurry.</p>

<p>To prevent this, the image set has a bigger image to use when the size is bigger than 200x100 pixels (<span style="font-family: Courier New,Courier,monospace;">bg_high.png</span>). The third button size is 201x101 pixels and it uses the new image, which has a better quality than the scaled image.</p>

<h4>Image Borders</h4>

<p>When the button is resized, the image part is also resized because it is marked as scalable. To get the image resized but to keep the image border as it is, use the <span style="font-family: Courier New,Courier,monospace;">border</span> parameter. It specifies the border size which is not resized even if the image is. This is explained in the Border resizing chapter of the <a href="edje_n.htm">Edje</a> guide.</p>

<p>To add a 40 pixel border on the left and right part of the <span style="font-family: Courier New,Courier,monospace;">bg</span> image and a 20 pixel border on top and bottom borders:</p>

<pre class="prettyprint">
parts 
{
&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;bg.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.border: 40 40 20 20;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The image below shows that when resizing the button, the corners keep their initial ratio. Only the middle part of the button is resized.</p>

<p class="figure">Figure: Border example</p> 
<p align="center"><img alt="Border example" src="../../images/border.png" /></p> 

  <h2 id="components" name="components">Using UI Components</h2>
  
  <p class="figure">Figure: Elementary</p>
<p align="center"><img alt="Elementary" src="../../images/elementary.png" /></p>

<p>The Elementary library is a simple toolkit. It provides several UI components than can be used to compose the user interface of your application. UI components allow you to build your application without having to reinvent basic objects, such as buttons, lists, or text entries. UI components will often generate signals that can be caught in the application when the user interacts with the UI components. This guide teaches you the basics of Elementary, describes selected concepts of the Elementary configuration framework, and describes the most common UI components.</p>

<h3 id="elm_basics" name="elm_basics">Elementary Basics</h3>

<p>In this chapter, we explain how UI components are built in a hierarchical manner, how to build a minimal Elementary application, and what the differences are between the callbacks that can be registered for UI components.</p>

<p><a href="elementary_wn.htm#basics">Elementary Basics</a></p>

<h3 id="elm_config" name="elm_config">Elementary Configuration</h3>

<p>Elementary can be configured using profiles. This chapter details some configuration items that can be modified to tweak the use of Elementary.</p>

<p><a href="elementary_wn.htm#config">Elementary Configuration</a></p>

<h3 id="ui" name="ui">Components</h3>
  
  <table border="1"> 
   <caption>
     Table: Available UI components
   </caption> 
   <colgroup> 
    <col /> 
    <col /> 
   </colgroup> 
   <tbody> 
    <tr> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Component name</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr> 	
	<tr> 
     <td><a href="components_wn.htm#background">Background</a></td> 
     <td>The background component can be used to set a solid background decoration to a window or a container object. It works like an image, but has some background specific properties, such as setting it to tiled, centered, scaled, or stretched.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#button">Button</a></td> 
     <td>The button component is a simple push button. It is composed of a label icon and an icon object, and has an auto-repeat feature.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#check">Check</a></td> 
     <td>The check component toggles the value of a Boolean between true and false.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#ctxpopup">Ctxpopup</a></td> 
     <td>The ctxpopup component is a contextual popup that can show a list of items.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#datetime">Datetime</a></td> 
     <td>The datetime component can display and input date and time values.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#entry">Entry</a></td> 
     <td>The entry component is a box to which the user can enter text.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#genlist">Genlist</a></td> 
     <td>The genlist component displays a scrollable list of items. It can hold a lot of items while still being fast and memory-efficient (only the visible items are allocated memory).</td>
    </tr>
		<tr> 
     <td><a href="components_wn.htm#glview">GLView</a></td> 
     <td>The GLView component can render OpenGL in an Elementary object, hiding EvasGL complexity.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#icon">Icon</a></td> 
     <td>The icon component inherits from the image component. It is used to display images in an icon context.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#image">Image</a></td> 
     <td>The image component can load and display an image from a file or from memory.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#index">Index</a></td> 
     <td>The index component provides an index for fast access to another group of UI items.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#label">Label</a></td> 
     <td>The label component displays text with simple HTML-like markup.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#list">List</a></td> 
     <td>The list component is a very simple list for managing a small number of items. If you need to manage a lot of items, use the genlist component instead.</td>
    </tr>
		<tr> 
     <td><a href="components_wn.htm#notify">Notify</a></td> 
     <td>The notify component displays a container in a specific region of the parent object. It can receive some content, and it can be automatically hidden after a certain amount of time.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#plug">Plug</a></td> 
     <td>The plug component allows you to show an Evas object created by another process. It can be used anywhere like any other Elementary UI component.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#popup">Popup</a></td> 
     <td>The popup component shows a pop-up area that can contain a title area, a content area, and an action area.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#progressbar">Progressbar</a></td> 
     <td>The progressbar component can be used to display the progress status of a given job.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#radio">Radio</a></td> 
     <td>The radio component can display 1 or more options, but the user can only select one of them. The UI component is composed of an indicator (selected/unselected), an optional icon, and an optional label. Even though it is usually grouped with 2 or more other radio components, it can also be used alone.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#slider">Slider</a></td> 
     <td>The slider component is a draggable bar that is used to select a value from a range of values.</td>
    </tr>
	<tr> 
     <td><a href="events_effects_n.htm#animation_effect">Transit</a></td> 
     <td>The transit component can apply several transition effects to an Evas object, such as translations and rotations. The use of the transit component is documented in the Creating Animations and Effects guide.</td>
    </tr>
	<tr> 
     <td><a href="components_wn.htm#win">Win</a></td> 
     <td>The win component is the root window component that will be often used in an application. It allows you to create some content in it, and it is handled by the window manager.</td>
    </tr>
   </tbody> 
  </table> 
  
  <table border="1"> 
   <caption>
     Table: Available circle UI components
   </caption> 
   <colgroup> 
    <col /> 
    <col /> 
   </colgroup> 
   <tbody> 
    <tr> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Component name</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr>
	<tr> 
     <td><a href="circle_components_wn.htm#datetime">Circle Datetime</a></td> 
     <td>The circle datetime extends <span style="font-family: Courier New,Courier,monospace">elm_datetime</span> by visualizing the selected field.</td>
    </tr> 	
	<tr> 
     <td><a href="circle_components_wn.htm#genlist">Circle Genlist</a></td> 
     <td>The circle genlist provides a scrollbar with circular movement. It is also operated with rotary events to move to the next or previous item.</td>
    </tr>
	<tr>
     <td><a href="circle_components_wn.htm#object">Circle Object</a></td> 
     <td>The circle object extends elementary components in a form of circular design. Sometimes a circle object merely provides additional UI features to elementary component, and sometimes it works as an independent component with UI and functionalities.</td>
    </tr>
	<tr> 
     <td><a href="circle_components_wn.htm#progressbar">Circle Progressbar</a></td> 
     <td>The circle progressbar aims to show the progress status of a given task with circular design. It visualizes the progress status within a range.</td>
    </tr>
	<tr> 
     <td><a href="circle_components_wn.htm#scroller">Circle Scroller</a></td> 
     <td>The circle scroller changes corresponding to the rotary events. It shows the whole scrollable area with a circular scroll bar.</td>
    </tr>
	<tr> 
     <td><a href="circle_components_wn.htm#slider">Circle Slider</a></td> 
     <td>The circle slider changes corresponding to rotary events. The circle slider not only extends the UI feature of the <span style="font-family: Courier New,Courier,monospace">elm_slider</span>, but also replaces the functionalities of the <span style="font-family: Courier New,Courier,monospace">elm_slider</span> in a circular design.</td>
    </tr>
	<tr> 
     <td><a href="circle_components_wn.htm#surface">Circle Surface</a></td> 
     <td>The circle surface manages and renders circle objects. Multiple circle objects can be connected to one circle surface as candidates of an object to be rendered.</td>
    </tr>
   </tbody> 
  </table> 
  
  
  <h3 id="focus" name="focus">UI Component Focus</h3>

<p>You can programmatically change the focus of UI components in an EFL application.</p>

<p><a href="preferences_n.htm#focus">Managing UI Component Focus</a></p>

<h3 id="styleguide" name="styleguide">UI Component Styles</h3>

<p>You can apply styles to various UI components to change their appearance.</p>

<p><a href="styles_wn.htm">UI Component Styles</a></p>

<h3 id="customization" name="customization">UI Component Customization</h3>

<p>You can use themes and styles to customize the look and feel of UI components.</p>

<p><a href="preferences_n.htm#customize">Customizing UI Components</a></p>
  
  <h3 id="containers" name="containers">Containers</h3> 
  
 <p>All applications use containers to create the layout of their UI. The EFL and Elementary support several ways to create this layout. You can use a predefined layout or an animated layout, or you can create your own layout.</p>

<p>In this guide, we look at how to use the different containers provided by Elementary.</p>
 
   <table border="1"> 
   <caption>
     Table: Available container components
   </caption> 
   <colgroup> 
    <col /> 
    <col /> 
   </colgroup> 
   <tbody> 
    <tr> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Container name</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr> 	
	<tr> 
     <td><a href="containers_wn.htm#box">Box</a></td> 	 
     <td>One of the most simple containers in the EFL is a box.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#conformant">Conformant</a></td> 
     <td>A conformant is a container component that accounts for the space taken by the indicator, virtual keyboard, and softkey windows.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#grid">Grid</a></td> 	 
     <td>In a grid, objects are placed at specific positions along a fixed grid.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#layout">Layout</a></td> 	 
     <td>A layout is a container component that takes a standard Edje design file and wraps it very thinly in a UI component.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#mapbuf">Mapbuf</a></td> 	 
     <td>A mapbuf is a container component that uses an Evas map to hold a content object. This UI component is used to improve the moving and resizing performance of complex UI components.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#naviframe">Naviframe</a></td> 	 
     <td>A naviframe component consists of a stack of views. New views are pushed on top of previous ones, and only the top-most view is displayed.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#scroller">Scroller</a></td> 	 
     <td>A scroller holds (and clips) a single object and allows you to scroll across it.</td>
    </tr>
	<tr> 
     <td><a href="containers_wn.htm#table">Table</a></td>  
     <td>A table is like a box but with 2 dimensions.</td>
    </tr>
	</tbody> 
  </table> 
  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>