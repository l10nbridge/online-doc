<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
    <title>Creating Ecore Animations</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#setup">Setting Up the Animation Target</a></li>
            <li><a href="#rotate">Creating a Rotation Effect</a></li>
            <li><a href="#zoom">Creating a Zoom Effect</a></li>
            <li><a href="#rotate_3d">Creating a 3D Rotation Effect</a></li>
            <li><a href="#drop_bounce">Creating Drop and Bounce Effects</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.native.mobile.apireference/group__Ecore.html">Ecore API for Mobile Native</a></li>
            <li><a href="../../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Creating Ecore Animations</h1>

<p>The following examples demonstrate how you can use Ecore animators to simplify the creation of animations. Using Ecore animators, you can manually create your own animations by changing and manipulating Evas object attributes. Ecore animators work like timers, running callback functions over a given duration (an animation timeline).</p>

<h2 id="setup" name="setup">Setting Up the Animation Target</h2>

<p>To set up the animation target:</p>

<ol>
<li>Create a UI application project in the IDE. The easiest option is to use a template targeted for EFL UI applications as a basis for the application.
</li>
<li>
<p>Set up the UI components to use in the application:</p>
<pre class="prettyprint">
struct appdata {
&nbsp;&nbsp;&nbsp;&nbsp;/* Main window */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;/* Application title */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *label;

&nbsp;&nbsp;&nbsp;&nbsp;/* Buttons */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *bt1;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *bt2;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *bt3;

&nbsp;&nbsp;&nbsp;&nbsp;/* Animation target */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *target;
};
typedef struct appdata appdata_s;
</pre>
</li>

<li>
<p>Create the actual UI components in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, starting with the main window and application title:</p>
<pre class="prettyprint">
/* Main window */
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

if (elm_win_wm_rotation_supported_get(ad-&gt;win)) {
&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}

evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

/* Application title */
ad-&gt;label = elm_label_add(ad-&gt;win);
elm_object_text_set(ad-&gt;label, &quot;Ecore Animation Tutorial&quot;);
evas_object_size_hint_weight_set(ad-&gt;label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
elm_win_resize_object_add(ad-&gt;win, ad-&gt;label);
evas_object_show(ad-&gt;label);
</pre>
</li>

<li>
<p>Create the animation target: an <span style="font-family: Courier New,Courier,monospace">Elm_Image</span> Evas object.</p>
<ol type="a">
<li>
<p>Set the image path by calling the <span style="font-family: Courier New,Courier,monospace">elm_image_file_set()</span> function. This function takes as parameters the <span style="font-family: Courier New,Courier,monospace">ad-&gt;target</span> Evas object and the path of the image file, built with the <span style="font-family: Courier New,Courier,monospace">snprintf()</span> function and stored in a buffer.</p>
<pre class="prettyprint">
/* Set the image path */
char buf[PATH_MAX];
snprintf(buf, sizeof(buf), &quot;/opt/usr/apps/%s/res/images/tizen-logo.png&quot;, PACKAGE);
/* Add the image */
ad-&gt;target = elm_image_add(ad-&gt;win);
/* Set the image path */
if (!elm_image_file_set(ad-&gt;target, buf, NULL))
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;error: could not load image \&quot;%s\&quot;\n&quot;, buf);
evas_object_size_hint_weight_set(ad-&gt;target, EVAS_HINT_FILL, EVAS_HINT_FILL);
</pre>
<p>The image that is used in the source code is stored in the <span style="font-family: Courier New,Courier,monospace">res/images</span> folder of the application. The image that is used in the EDC file is stored in the <span style="font-family: Courier New,Courier,monospace">edje/images</span> folder.</p>
</li>
<li>
<p>In a packaged application, all images are available in the <span style="font-family: Courier New,Courier,monospace">/opt/usr/apps/&lt;PACKAGE_NAME&gt;/res/images</span> folder. The package name is defined at the beginning of the application code:</p>
<pre class="prettyprint">
#if !defined(PACKAGE)
#define PACKAGE &quot;org.tizen.ecoreanimator&quot;
#endif
</pre>
</li>
<li>
<p>You can move and resize the image before showing it:</p>
<pre class="prettyprint">
/* Move the image */
evas_object_move(ad-&gt;target, 130, 100);
/* Resize the image */
evas_object_resize(ad-&gt;target, 200, 100);
/* Show the image */
evas_object_show(ad-&gt;target);
</pre>
</li>
</ol>
</li>

</ol>

<p>The following figure illustrates the basic UI elements: the title, buttons, and the animation target image.</p>

<p class="figure">Figure: Ecore Animation Tutorial screen</p>
<p align="center"><img alt="Ecore Animation Tutorial screen" src="../../../images/ecore_animation_tutorial.png" /></p>

<h2 id="rotate" name="rotate">Creating a Rotation Effect</h2>

<p>To create a rotation effect:</p>

<ol>

<li>
<p>Create a button for triggering the rotation effect. The button is placed and resized, and associated with the <span style="font-family: Courier New,Courier,monospace">_btn_rotate_cb()</span> callback function. This callback function calls the animation on the animation target.</p>
<pre class="prettyprint">
/* Button 1 */
ad-&gt;bt1 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt1, &quot;Rotate&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt1, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt1, 25, 0);
evas_object_resize(ad-&gt;bt1, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt1, &quot;clicked&quot;, _btn_rotate_cb, ad);
evas_object_show(ad-&gt;bt1);
</pre>
</li>

<li>
<p>Create an Ecore animator timeline using the <span style="font-family: Courier New,Courier,monospace">ecore_animator_timeline_add()</span> function. This function adds an animator that runs for a limited time: in this case, it runs the <span style="font-family: Courier New,Courier,monospace">_do_rotate()</span> animation callback function for 1 second on the <span style="font-family: Courier New,Courier,monospace">ad-&gt;target</span> Evas object.</p>
<pre class="prettyprint">
static void
_btn_rotate_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_rotate, ad-&gt;target);
}
</pre>
</li>

<li>
<p>Define the animation callback function that actually runs the animation.</p>
<p>The callback returns an <span style="font-family: Courier New,Courier,monospace">Eina_Bool</span> value and takes as parameters some <span style="font-family: Courier New,Courier,monospace">data</span> (usually the object to be animated) and the current position along the animation timeline (<span style="font-family: Courier New,Courier,monospace">pos</span>).</p>
<p>To create the rotation animation, use an Evas map. The map handles the necessary map points and allows you to manipulate the target Evas object on the X, Y, and Z axes.</p>
<p>In the animation callback function, first declare the Evas map. To implement the rotation, you must set an X and Y center, and because of this, 4 integer variables are created to store the size and position of the target. This information is provided by the <span style="font-family: Courier New,Courier,monospace">evas_object_geometry_get()</span> function, which returns the X and Y coordinates and the width and height of the target Evas object.</p>
<pre class="prettyprint">
static Eina_Bool
_do_rotate(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Get the animation target */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;&nbsp;/* Declare Evas_Map */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;&nbsp;/* Variables to store the target size and position */
&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;

&nbsp;&nbsp;&nbsp;&nbsp;/* Get the size and position of the target */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
</pre>
</li>

<li>
<p>Create an Evas map consisting of 4 points, and populate these points with the animation target:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Create an Evas_Map of 4 points */
&nbsp;&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;&nbsp;/* Populate the source and destination map points to match object exactly */
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
</pre>
</li>

<li>
<p>Define the rotation using the <span style="font-family: Courier New,Courier,monospace">evas_map_util_rotate()</span> function:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Create a rotation of 360 degrees with x+(w/2) &quot;X&quot; center and y +(h/2) &quot;Y&quot; center */
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_rotate(m, 360.0 * pos, x + (w / 2), y + (h / 2));
</pre>
<p>The callback is called at several points along the timeline, which is why the rotation angle is multiplied by the timeline position (<span style="font-family: Courier New,Courier,monospace">pos</span>) to get the actual animation angle. If this is not done, you never see the animation take place.</p> 
<p>Each call to the animation callback function rotates the object (360 * timeline position) degrees.</p>
</li>

<li>
<p>Join the target object to the map and enable the map:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Set the map to the object */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;&nbsp;/* Enable the map */
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
</pre>
</li>

<li>
<p>When you are finished, free up the memory allocated to the Evas map:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Free the used memory */
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
</li>

</ol>

<p> The following figure illustrates the rotation effect. </p>

<p class="figure">Figure: Rotation effect screen</p>
<p align="center"><img alt="Rotation effect screen" src="../../../images/ecore_animation_rotation.png" /></p>

<h2 id="zoom" name="zoom">Creating a Zoom Effect</h2>

<p>To create a zoom effect:</p>

<ol>

<li>
<p>Create a button in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function, and associate it with the <span style="font-family: Courier New,Courier,monospace">_btn_zoom_cb()</span> callback function, which runs the animation on the animation target:</p>
<pre class="prettyprint">
/* Button 2 */
ad-&gt;bt2 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt2, &quot;Zoom&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt2, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt2, 315, 0);
evas_object_resize(ad-&gt;bt2, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt2, &quot;clicked&quot;, _btn_zoom_cb, ad);
evas_object_show(ad-&gt;bt2);
</pre>
</li>

<li>
<p>In the callback, add a new timeline:</p>
<pre class="prettyprint">
static void
_btn_zoom_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_zoom, ad-&gt;target);
}
</pre>
</li>

<li>
<p>Create the <span style="font-family: Courier New,Courier,monospace">_do_zoom()</span> animation callback. It is almost identical to the <span style="font-family: Courier New,Courier,monospace">_do_rotate()</span> callback (described in the previous use case), except that the <span style="font-family: Courier New,Courier,monospace">evas_map_util_zoom()</span> function is used to create the animation.</p>
<p>In the following example, the horizontal and vertical zoom factor of 2 (second and third parameter), and the X and Y coordinates of the target as the horizontal and vertical center coordinates (fourth and fifth parameter) are used.</p>
<pre class="prettyprint">
static Eina_Bool
_do_zoom(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_zoom(m, 2 * pos, 2 * pos, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
<p>The callback is called at several points along the timeline, which is why the horizontal and vertical zoom factor values are multiplied by the timeline position. Each call zooms more than the previous one, thereby creating the animation effect.</p>
</li>

</ol>

<p>The following figure illustrates the zoom effect.</p>

<p class="figure">Figure: Zoom effect screen</p>
<p align="center"><img alt="Zoom effect screen" src="../../../images/ecore_animation_zoom.png" /></p>

<h2 id="rotate_3d" name="rotate_3d">Creating a 3D Rotation Effect</h2>

<p>To create a 3D rotation:</p>

<ol>

<li>
<p>Create a button and its callback function. In this animation, the Evas object is rotated on all 3 axes (X, Y, Z).</p>
<pre class="prettyprint">
/* Button 3 */
ad-&gt;bt3 = elm_button_add(ad-&gt;win);
elm_object_text_set(ad-&gt;bt3, &quot;3D&quot;);
evas_object_size_hint_weight_set(ad-&gt;bt3, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_move(ad-&gt;bt3, 170, 0);
evas_object_resize(ad-&gt;bt3, 90, 70);
evas_object_smart_callback_add(ad-&gt;bt3, &quot;clicked&quot;, _btn_3d_cb, ad);
evas_object_show(ad-&gt;bt3);

/* Callback */
static void
_btn_3d_cb(void *data, Evas_Object *btn, void *ev)
{
&nbsp;&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;&nbsp;ecore_animator_timeline_add(1, _do_3d, ad-&gt;target);
}
</pre>
</li>

<li>
<p>Create the <span style="font-family: Courier New,Courier,monospace">_do_3d()</span> animation callback, which is very similar to the rotate and zoom callback functions described in previous use cases. To create the animation, the <span style="font-family: Courier New,Courier,monospace">evas_map_util_3d_rotate()</span> function is used. This function allows you to rotate any Evas object on all 3 axes.</p>
<p>In this example, the map is rotated 360 degrees around each axis (defined in the second, third, and fourth parameter). The horizontal (X) rotation center is the X position of the target plus its width divided by 3 (fifth parameter). The vertical (Y) rotation center is the Y position of the target plus 60 (sixth parameter). The Z rotation center is 0 (seventh parameter).</p>
<pre class="prettyprint">
static Eina_Bool
_do_3d(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Map *m;
&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;&nbsp;m = evas_map_new(4);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(m, obj);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_util_3d_rotate(m, pos * 360, pos * 360, pos * 360, x + (w / 3), y + 60, 0);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_set(obj, m);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(obj, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;evas_map_free(m);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
<p>As with the rotation and zoom animations, multiply the angles by the timeline position to gently rotate the target along the timeline on each call of the <span style="font-family: Courier New,Courier,monospace">_do_3d()</span> callback function.</p>
</li>

</ol>

<p>The following figure illustrates the 3D rotation effect.</p>

<p class="figure">Figure: 3D rotation effect screen</p>
<p align="center"><img alt="3D rotation effect screen" src="../../../images/ecore_animation_3d.png" /></p>

<h2 id="drop_bounce" name="drop_bounce">Creating Drop and Bounce Effects</h2>

<p>To create drop and bounce effects:</p>

<ol>

<li>
<p>Add drop and bounce effects to the buttons at the application start. To do this, create one timeline per button after creating the buttons in the <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function:</p>
<pre class="prettyprint">
ecore_animator_timeline_add(2, _do_drop, ad-&gt;bt1);
ecore_animator_timeline_add(2.3, _do_drop, ad-&gt;bt2);
ecore_animator_timeline_add(2.5, _do_drop, ad-&gt;bt3);
</pre>
</li>

<li>
<p>Call the same <span style="font-family: Courier New,Courier,monospace">_do_drop()</span> animation callback function for each timeline. In this callback, instead of using an Evas map, simply change the position of the target using the <span style="font-family: Courier New,Courier,monospace">evas_object_move()</span> function.</p>
<p>To get the bounce effect, use the <span style="font-family: Courier New,Courier,monospace">ecore_animator_pos_map()</span> function, which maps an input position from 0.0 to 1.0 along the timeline to a position on a different curve. The curve can be of different types, such as linear, sinusoidal, or bounce (defined as the second parameter).</p>
<p>The used <span style="font-family: Courier New,Courier,monospace">ECORE_POS_MAP_BOUNCE</span> position mapping starts at 0.0, then drops like a ball bouncing to the ground at 1.0, bouncing 4 times with a decay factor of 2. The bouncing times and the decay factor as defined as the third and fourth parameter.</p>
<pre class="prettyprint">
static Eina_Bool
_do_drop(void *data, double pos)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *obj = data;
&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;&nbsp;int w;
&nbsp;&nbsp;&nbsp;&nbsp;int h;
&nbsp;&nbsp;&nbsp;&nbsp;double frame = pos;
&nbsp;&nbsp;&nbsp;&nbsp;frame = ecore_animator_pos_map(pos, ECORE_POS_MAP_BOUNCE, 2, 4);

&nbsp;&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(obj, x, 600 * frame);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">frame</span> variable is used in the <span style="font-family: Courier New,Courier,monospace">evas_object_move()</span> function to create the animation. The value increases on each <span style="font-family: Courier New,Courier,monospace">_do_drop()</span> call along the timeline, producing a nice drop of the buttons from their initial position to 600 pixels on the vertical axis.</p>
</li>
</ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>

</html>