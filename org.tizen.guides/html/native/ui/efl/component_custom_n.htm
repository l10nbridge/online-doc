<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>Customizing UI Components</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Dependencies</p>
	<ul class="toc">
		<li>Tizen Platform 2.4 and Higher for Mobile</li>
		<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
	</ul>
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#theme">Style, Theme, and EDC</a></li>
				<li><a href="#custom">Customization</a></li>
				</ul>	
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Customizing UI Components</h1> 
  
<p>This topic explains how to customize UI components. Before learning the process of customization, you must understand the concept of &quot;style&quot; and &quot;theme&quot; in EFL and how EFL applies the right style for a UI component.</p>
<p>EFL provides the EDC script as a way to define a look for UI components. For detailed information on how to write an EDC script, see <a href="learn_edc_intro_n.htm">Layouting with EDC</a>.</p>

<h2 id="theme">Style, Theme, and EDC</h2>

<p>The style of a UI component refers to its graphical appearance determined by the layout, shapes, fonts, and colors. A theme is a collection of styles for every UI component. Tizen provides a default theme for each profile and version, which includes all available styles of every UI component.</p>

<p>When more than one style is defined for a UI component in the current theme, you can set a different style than the default one using the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function. It is also possible to access the current style with the <span style="font-family: Courier New,Courier,monospace">elm_object_style_get()</span> function.</p>

<p>The default theme of the mobile profile specifies several <a href="component_check_mn.htm#style">styles for the check UI component</a>. The following example shows how to set the <span style="font-family: Courier New,Courier,monospace">favorite</span> style to a newly created check object:</p>

<pre class="prettyprint">
Evas_Object *check;

check = elm_check_add(parent);
elm_object_style_set(check, &quot;favorite&quot;);
</pre>
 
<p>A theme is defined in <a href="learn_edc_intro_n.htm">EDC</a> (<span style="font-family: Courier New,Courier,monospace">.edc</span>) files, and they are compiled into an EDJ (<span style="font-family: Courier New,Courier,monospace">.edj</span>) file during the project building. An EDC file is a collection of <a href="learn_edc_group_n.htm">group</a> blocks, and one group is composed of <a href="learn_edc_part_n.htm">parts</a> and <a href="learn_edc_program_n.htm">programs</a>. A theme corresponds to one EDJ file, and a style corresponds to 1 group in an EDJ file.</p>
 
<p>The following example shows some groups in an EDC file (<span style="font-family: Courier New,Courier,monospace">check.edc</span>), which correspond to the styles of the check component in mobile profile:</p>
 
<pre class="prettyprint">
group {
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/default&quot;;
&nbsp;&nbsp;&nbsp;/* Other content */
}
 
group {
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/favorite&quot;;
&nbsp;&nbsp;&nbsp;/* Other content */
}
 
group {
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/on&amp;off&quot;;
&nbsp;&nbsp;&nbsp;/* Other content */
}
</pre>
 
<p>The groups have a certain format of names according to the naming rule of Elementary. These 3 groups define 3 different styles for the check component: <span style="font-family: Courier New,Courier,monospace">default</span>, <span style="font-family: Courier New,Courier,monospace">favorite</span>, and <span style="font-family: Courier New,Courier,monospace">on&amp;off</span>.</p>
 
<h2 id="custom">Customization</h2>
 
<p>In the best scenario, every application can find the style it needs in the already provided theme. However, you can sometimes need customized styles. EFL allows you to define a new style and add it to an existing theme, or even make a new theme.</p>
 
<p>To customize a UI component:</p>
 
<ol>
   <li>Create a project for a basic EDC UI application.
       <p>See <a href="../../../../../org.tizen.tutorials/html/native/mobile/first_app_mn.htm">Creating Your First Tizen Mobile Native Application</a> or <a href="../../../../../org.tizen.tutorials/html/native/wearable/first_app_wn.htm">Creating Your First Tizen Wearable Native Application</a> for creating a EDC UI project.</p></li>
   <li>Create an EDJ file in the <span style="font-family: Courier New,Courier,monospace">/res/edje/</span> directory.
       <p>If you add the <span style="font-family: Courier New,Courier,monospace">custom.edc</span> file, the SDK calls Edje tools automatically to build the final <span style="font-family: Courier New,Courier,monospace">custom.edj</span> file when building the project.</p>
       <p>The EDJ file is installed under the application data path. You can get the full path of where the EDJ file is installed using the <span style="font-family: Courier New,Courier,monospace">app_get_resource()</span> function.</p>
<pre class="prettyprint">
char edj_path[PATH_MAX] = {0,};

app_get_resource(&quot;/edje/custom.edj&quot;, edj_path, (int)PATH_MAX);
</pre>
       </li>
   <li>Write a style in the EDC file.</li>
   <li>Register the EDJ file in the C code. You can attach the EDJ file to an existing theme in the following ways:
      <ul>
         <li>As an extension: extend the default theme by adding new styles</li>
         <li>As an overlay: override the styles in the default theme</li>
      </ul>
      <p>The following code snippet shows how to add the new theme file as an extension:</p>
<pre class="prettyprint">
char edj_path[PATH_MAX] = {0,};
 
/* Get the full path of the EDJ file */
app_get_resource(&quot;/edje/custom.edj&quot;, edj_path, (int)PATH_MAX);
 
/* Load the check custom style as an extension */
elm_theme_extension_add(NULL, edj_path);
</pre>
   </li>
   <li>Set the new style to the UI component.
<p>To use the <span style="font-family: Courier New,Courier,monospace">custom</span> style on a new check component:</p>

<pre class="prettyprint">
Evas_Object *check;

check = elm_check_add(parent);

/* Set the newly defined custom style */
elm_object_style_set(check, &quot;custom&quot;);
</pre>
   </li>
</ol>
 
<p>You can see the above steps implemented in the <a href="https://developer.tizen.org/development/sample/native/UI/ui_theme_extension_sd_mn.htm" target="_blank">ThemeExtension</a> sample application.</p>
 
<h3>Extension and Overlay</h3>
 
<p>To attach an EDJ file to an existing theme, you can use:</p>
 
<ul>
   <li>Extension
       <p>A theme extension enables you to extend a theme with only a part of the UI component&#39;s style (not all of it).</p>
       <p>Applications can add and delete a theme in the list of extensions with the following calls:</p>
<pre class="prettyprint">
elm_theme_extension_add(NULL, &quot;./theme_button_style_custom.edj&quot;);
elm_theme_extension_del(NULL, &quot;./theme_button_style_custom.edj&quot;);
</pre>
       <p>The above example assumes that the <span style="font-family: Courier New,Courier,monospace">theme_button_style_custom.edj</span> file contains a new button style called <span style="font-family: Courier New,Courier,monospace">custom</span>.</p>
   </li>
   <li>Overlay
       <p>A theme overlay enables you to replace the look of all UI components by overriding the default style.</p>
       <p>If a new style called <span style="font-family: Courier New,Courier,monospace">default</span> is created
       for a button component and it is added as an overlay, Elementary uses the overlay for all button components
       overriding the default theme.</p>
 
       <p>Applications can add and delete a theme in the list of overlays with the following calls:</p>
 <pre class="prettyprint">
elm_theme_overlay_add(NULL, &quot;./theme_button.edj&quot;);
elm_theme_overlay_del(NULL, &quot;./theme_button.edj&quot;);
</pre>
       <p>The above example assumes that the <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span> file
       only contains a new theme for the button component.</p>
       <p>Adding a theme with a default style as an overlay is not recommended, since it makes Elementary to use the new theme for all the objects defined in the application. You must make sure that the <span style="font-family: Courier New,Courier,monospace">theme_button.edj</span> file reimplements everything that was previously defined in the default theme concerning the button component.</p>
<table class="note">
   <tbody>
      <tr>
         <th class="note">Note</th>
      </tr>
      <tr>
         <td class="note">With overlays, you can replace the default view and affect every UI component. This is very similar to setting the theme for the whole application, and probably clashes with the end user options. Using overlays also runs the risk of non-matching styles across the application. Unless you have a very good reason to use them, avoid overlays.</td>
      </tr>
   </tbody>
</table>
   </li>
</ul>
 
<p>The following process shows how Elementary loads a style of a certain name:</p>
 
<ol>
   <li>Check the list of overlays registered on the current theme.</li>
   <li>If the right style is not found, check the default theme.</li>
   <li>If the right style is not found, check the list of extensions registered on the current theme.</li>
   <li>If the right style is not found, use the default style.
   <p>This means that the style with the certain name is not defined in the current theme.</p>
   </li>
</ol>
 
<p>For example, if you make your own EDJ file and name a group <span style="font-family: Courier New,Courier,monospace">elm/button/base/default</span>:</p>
<ul>
<li>If you use the <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add</span> function, the newly defined style is applied to a button object.</li>
<li>If you use the <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add</span> function, the newly defined style is not applied, since there is a group with the same name in the default theme.</li>
</ul>
 
<table class="note">
   <tbody> 
      <tr>
         <th class="note">Note</th>
      </tr>
      <tr>
         <td class="note">When using the <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add()</span> function to add a new theme extension or overlay to a theme object (the default theme), Elementary calls the <span style="font-family: Courier New,Courier,monospace">elm_theme_flush()</span> function to flush the Elementary theme caches. This means that the theme of all UI components that use the default theme is reloaded.</td> 
      </tr>
   </tbody> 
</table>
 
<h3>Example: Creating a Customized Style for the Check Component</h3>
 
<p>An easy way to create a customized style is to copy one of the existing styles and modify some parts or programs. The following example shows how to define a custom style of the check component based on the default style. The aim is to update the background and the check images of the UI component with custom images.</p>
 
<p>When customizing a style, you need to respect the parts and signals in the default style. If something is missing, it can break the UI component&#39;s behavior. You can add new <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts, if you want to control more content from the application. However, removing existing <span style="font-family: Courier New,Courier,monospace">SWALLOW</span> parts can change the UI component&#39;s behavior.</p>
 
<p>To create a customized check component style:</p>
<ol>
<li><p>Copy the group corresponding to the <span style="font-family: Courier New,Courier,monospace">default</span> style to a new file and rename the group to <span style="font-family: Courier New,Courier,monospace">custom</span> to create a new <span style="font-family: Courier New,Courier,monospace">custom</span> style:</p>
<pre class="prettyprint">
group
{
&nbsp;&nbsp;&nbsp;name: &quot;elm/check/base/custom&quot;;
&nbsp;&nbsp;&nbsp;/* Copy of the content of &quot;default&quot; style */
}
</pre>
</li>
<li>
<p>In the new <span style="font-family: Courier New,Courier,monospace">elm/check/base/custom</span> group, find the parts you want to modify.</p>
<p>To modify the background and check images, you must locate the <span style="font-family: Courier New,Courier,monospace">bg</span> and <span style="font-family: Courier New,Courier,monospace">check</span> parts.</p>
<pre class="prettyprint">
part
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.offset: 1 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 16 16;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect: 1.0 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect_preference: VERTICAL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;check_base.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill.smooth: 0;
&nbsp;&nbsp;&nbsp;}
}
part
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offset: -2 -2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;check.png&quot;;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;disabled_visible&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 128 128 128 128;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>
   </li>
   <li>
      <p>Replace the default images with the new custom images by updating the <span style="font-family: Courier New,Courier,monospace">image.normal</span> properties in both parts:</p>
  <ul>
   <li>In the background part, replace <span style="font-family: Courier New,Courier,monospace">check_base.png</span> with <span style="font-family: Courier New,Courier,monospace">check_base_custom.png</span>.</li>
   <li>In the check part, replace <span style="font-family: Courier New,Courier,monospace">check.png</span> with <span style="font-family: Courier New,Courier,monospace">check_custom.png</span>.</li>
    </ul>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This example assumes that the custom images are the same size as the <span style="font-family: Courier New,Courier,monospace">default</span> images.</td> 
    </tr> 
   </tbody> 
  </table> 
	  
<pre class="prettyprint">
part
{
&nbsp;&nbsp;&nbsp;name: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">normal: &quot;check_base_custom.png&quot;;</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;border: 5 5 5 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;middle: 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
part
{
&nbsp;&nbsp;&nbsp;name: &quot;check&quot;;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="highlight">image.normal: &quot;check_custom.png&quot;;</span>
&nbsp;&nbsp;&nbsp;}
}
</pre>



</li>
</ol>
  
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>
  
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>