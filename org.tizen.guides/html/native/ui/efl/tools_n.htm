<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>Tools</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">             
			<li><a href="#string">String</a></li>
			<li><a href="#memory">Memory Pool</a></li>
			<li><a href="#safety">Safety Checks</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
		<li><a href="../../../../../org.tizen.native.mobile.apireference/group__Eina.html">Eina API for Mobile Native</a></li>
		<li><a href="../../../../../org.tizen.native.wearable.apireference/group__Eina__Group.html">Eina API for Wearable Native</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
   
   <h1>Tools</h1>
 <p>The Eina library provides a number of tools to help you when coding applications:</p>

<ul>
<li>Convert fast: Conversion from, for example, strings to integers and double</li>
<li>Counter: Measures the number of calls and their time</li>
<li>Error: Error identifiers</li>
<li>File: File list and path split</li>
<li>Lazy allocator: Manages item allocation</li>
<li>Log: Full-featured logging system</li>
<li>Magic: Provides runtime type checking</li>
<li><a href="#memory">Memory Pool</a>: Abstraction for various memory allocators</li>
<li>Module lists: Loads and shares modules using the <span style="font-family: Courier New,Courier,monospace;">Eina_Module</span> standard</li>
<li>Rectangle: Rectangle structure and standard manipulation methods</li>
<li><a href="#safety">Safety Checks</a>: Extra checks that report unexpected conditions and can be disabled during compilation</li>
<li><a href="#string">String</a>: Set of functions that manage C strings</li>
</ul>    
  
<h2 id="string" name="string">String</h2>

<p>When creating applications, you always need to manipulate strings. Use the following Eina functions for manipulating C strings:</p>

<ul><li>To split a string into an array of strings based on a delimiter that determines where the string is split, use the <span style="font-family: Courier New,Courier,monospace;">eina_str_split()</span> function.

<p>The split is the most common string manipulation method. For example, if you have the <span style="font-family: Courier New,Courier,monospace;">&quot;Rasterman:Bluebugs:Tasn:Illogict:billiob:Puppet_Master&quot;</span> string, and you want to print it in an easily readable format, you can split it using the &quot;:&quot; character as a delimiter.</p>

<p>In the <span style="font-family: Courier New,Courier,monospace;">eina_str_split()</span> function, the first parameter is the string to split, the second is the delimiter, and the third is the maximum number of strings to split the string into. If you set the third parameter to be smaller than 1, the function splits the string as many times as possible.</p>
<p>The function returns a newly-allocated <span style="font-family: Courier New,Courier,monospace;">NULL</span>-terminated array of strings, or <span style="font-family: Courier New,Courier,monospace;">NULL</span>, if it fails to allocate the array. When no longer needed, free the memory allocated by the <span style="font-family: Courier New,Courier,monospace;">eina_str_split()</span> function.</p>

<pre class="prettyprint">
char *nicks = &quot;Rasterman:Bluebugs:Tasn:Illogict:billiob:Puppet_Master&quot;;
char **result_arr;
int i;

/* Split the string with the &#39;:&#39; delimiter */
result_arr = eina_str_split(nicks, &quot;:&quot;, 0);
/* Print the result */
for (i = 0; result_arr[i]; i++)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;Nick: %s\n&quot;, result_arr[i]);
/* Free the memory */
free(result_arr[0]);
free(result_arr);
</pre></li>


<li>To change a string to lowercase or uppercase, use the <span style="font-family: Courier New,Courier,monospace;">eina_str_tolower()</span> and <span style="font-family: Courier New,Courier,monospace;">eina_str_toupper()</span> functions. They modify the original string by changing the case for all characters in the string.

<pre class="prettyprint">
char *str;
/* Initialize the string */
str = malloc(sizeof(char) * 4);
strcpy(str, &quot;bsd&quot;);
/* Change the string to uppercase */
eina_str_toupper((char **)&amp;str);
printf(&quot;%s\n&quot;, str);
/* Change the string to lowercase */
eina_str_tolower(&amp;str);
printf(&quot;%s\n&quot;, str);
/* Free the memory */
free(str);
</pre></li>
<li>To join 2 strings of known length, use the <span style="font-family: Courier New,Courier,monospace;">eina_str_join()</span> function. The first parameter is the buffer to store the result, the second is the size of the buffer, the third is the separator between the 2 strings, and the 2 final parameters are the stings to be joined.

<pre class="prettyprint">
char *part1 = &quot;Tizen powered by&quot;;
char *part2 = &quot;Enlightenment Foundation Libraries&quot;;
char *res;
size_t size;
/* Calculate the string size + 1 for the delimiter */
size = strlen(part1) + strlen(part2) + 1;
/* Allocate memory for the result */
res = malloc(sizeof(char) * size);
/* Join the strings */
eina_str_join(res, size, &#39; &#39;, part1, part2);
printf(&quot;%s\n&quot;, res);
/* Free the memory */
free(res);
</pre></li>
<li>To check whether a string starts or ends with another string, use the <span style="font-family: Courier New,Courier,monospace;">eina_str_has_prefix()</span> or <span style="font-family: Courier New,Courier,monospace;">eina_str_has_suffix()</span> function. You can also check whether a string has a particular extension with the <span style="font-family: Courier New,Courier,monospace;">eina_str_has_extension()</span> function.

<p>These functions return <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> if the string contains the specified prefix, suffix, or extension, and <span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span> if it does not.</p>

<pre class="prettyprint">
char *names = &quot;Carsten;Cedric;Tom;Chidambar;Boris;Philippe&quot;;
if (eina_str_has_prefix(names, &quot;Carsten&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;String starts with &#39;Carsten&#39;&quot;);
if (eina_str_has_suffix(names, &quot;Philippe&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;String ends with &#39;Philippe&#39;&quot;);
if (eina_str_has_extension(names, &quot;philippe&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;String has extension &#39;philippe&#39;&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;String does not have extension &#39;philippe&#39;&quot;);
</pre></li></ul>

<h2 id="memory" name="memory">Memory Pool</h2>

<p>The <span style="font-family: Courier New,Courier,monospace;">Eina_Mempool</span> tool provides the memory pool functionality. With a memory pool, you can preallocate fixed-size memory spaces for easy memory management.</p>

<p>The following memory pools are available:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">buddy</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">chained_pool</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">ememoa_fixed</span> and <span style="font-family: Courier New,Courier,monospace;">ememoa_unknown</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">fixed_bitmap</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">pass_through</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">one_big</span></li>
</ul>

<h2 id="safety" name="safety">Safety Checks</h2>

<p>Eina safety checks are a set of macros that can be used to check for parameters or values that must never occur. The concept is similar to the <span style="font-family: Courier New,Courier,monospace;">assert()</span> function, but safety checks simply log the parameter or value and return, instead of aborting your program.</p>

<p>The following safety checks are available:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN(exp)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN_VAL(exp, val)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_GOTO(exp, label)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_TRUE_RETURN(exp)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_TRUE_RETURN_VAL(exp, val)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_TRUE_GOTO(exp, label)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_FALSE_RETURN(exp)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_FALSE_RETURN_VAL(exp, val)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_FALSE_GOTO(exp, label)</span></li>
<li><span style="font-family: Courier New,Courier,monospace;">EINA_ARG_NONNULL(...)</span></li>
</ul>

<p>The following examples show how to use the safety checks:</p>

<ul>
<li>To return if a variable is <span style="font-family: Courier New,Courier,monospace;">NULL</span>, use the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN()</span> function. This macro calls <span style="font-family: Courier New,Courier,monospace;">return</span> if the given parameter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>.

<pre class="prettyprint">
Eina_Bool
myfunction(char *param)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* If the parameter is NULL, EINA_SAFETY_ON_NULL_RETURN calls &quot;return&quot; */
&nbsp;&nbsp;&nbsp;&nbsp;EINA_SAFETY_ON_NULL_RETURN(param);

&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;My param is: %s\n&quot;, param);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
</li>
<li>To return a specific value, use the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN_VAL()</span> function instead of the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN()</span> function. This macro returns a given value if the given parameter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>.

<pre class="prettyprint">
Eina_Bool void
myfunction(char *param)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* If the parameter is NULL, return EINA_FALSE; */
&nbsp;&nbsp;&nbsp;&nbsp;EINA_SAFETY_ON_NULL_RETURN_VAL(param, EINA_FALSE);
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;My param is: %s\n&quot;, param);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
</li>
<li>To call another function if a parameter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>, use the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_GOTO()</span> function. This macro works similarly to the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_RETURN()</span> function, except that it calls <span style="font-family: Courier New,Courier,monospace;">goto</span> with the given function instead of <span style="font-family: Courier New,Courier,monospace;">return</span>.

<pre class="prettyprint">
static void
isnullcb()
{
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;The parameter is NULL\n&quot;);
}

Eina_Bool void
myfunction(char *param)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* If the parameter is NULL, call isnullcb() */
&nbsp;&nbsp;&nbsp;&nbsp;EINA_SAFETY_ON_NULL_GOTO(param, isnullcb);
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;My param is: %s\n&quot;, param);

&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
</li>
</ul>

<p>Eina also provides macros that check whether a given value is <span style="font-family: Courier New,Courier,monospace;">TRUE</span> or <span style="font-family: Courier New,Courier,monospace;">FALSE</span>. For example:</p>
<ul>
<li>To call <span style="font-family: Courier New,Courier,monospace;">return</span> if a given value is <span style="font-family: Courier New,Courier,monospace;">TRUE</span>, use the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_TRUE_RETURN()</span> function.</li>
<li>To call <span style="font-family: Courier New,Courier,monospace;">goto</span> in a given function if a given value is <span style="font-family: Courier New,Courier,monospace;">TRUE</span>, use the <span style="font-family: Courier New,Courier,monospace;">EINA_SAFETY_ON_NULL_GOTO()</span> function.</li>
</ul>

  
  <table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table> 
   
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>