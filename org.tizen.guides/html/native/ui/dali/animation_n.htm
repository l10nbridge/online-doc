<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Animation</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../../images/mobile_s_n.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#properties">Animating Properties</a></li>
			<li><a href="#playback">Controlling Playback</a></li>
			<li><a href="#notifications">Using Notifications</a></li>
			<li><a href="#alpha">Using Alpha Functions</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../../org.tizen.native.mobile.apireference/classDali_1_1AlphaFunction.html">Dali::AlphaFunction API for Mobile Native</a></li>
			<li><a href="../../../../../org.tizen.native.mobile.apireference/classDali_1_1Animation.html">Dali::Animation API for Mobile Native</a></li>
			<li><a href="../../../../../org.tizen.native.mobile.apireference/structDali_1_1TimePeriod.html">Dali::TimePeriod API for Mobile Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/UI/%28DALi%29_Animation" target="_blank">(DALi) Animation Sample Description</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Animation</h1>

<p>You can use animation to allow your objects to move around and change their properties for a specified duration.</p>

<p>DALi provides a rich and easy to use animation framework which allows you to create visually rich applications. The <span style="font-family: Courier New,Courier,monospace;">Dali::Animation</span> class can be used to animate the <a href="properties_n.htm#attributes">animatable properties</a> of any number of objects.</p> 

<p>DALi animations <a href="multi_threaded_n.htm#animations">occur in a dedicated thread</a>. This allows animations to run smoothly, regardless of the time taken to process the input, events, and other factors in the application code.</p>

<p>The following figure illustrates the animation components.</p>

<p class="figure">Figure: DALi animation components</p>  
	<p align="center"><img alt="DALi animation components" src="../../../images/animation_components.png"/></p> 


<p>To implement a basic animation, create an animation object that takes place over 3 seconds:</p>
<pre class="prettyprint">
Animation animation = Animation::New( 3.0f );
</pre>

<p>For more information about Animation, see <a href="animation_types_n.htm">Animation Types</a> and <a href="constraints_n.htm">Constraints</a>.</p>


<h2 id="properties" name="properties">Animating Properties</h2>

<p>To animate the properties within DALi, you can use 2 distinct functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace;">AnimateTo()</span>: Property animates TO the value in the given time.</li>
	<li><span style="font-family: Courier New,Courier,monospace;">AnimateBy()</span>: Property animates BY the value in the given time (which means that it animates to a value that is the sum of the starting position and the given value).</li>
</ul>

<p>In the following example, the <span style="font-family: Courier New,Courier,monospace;">actor1</span> and <span style="font-family: Courier New,Courier,monospace;">actor2</span> instances are at the position 10.0f, 10.0f, 0.0f at the start of the animation.</p>
<pre class="prettyprint">
// Animate the actor1 position TO 10.0f, 50.0f, 0.0f
animation.AnimateTo( Property( actor1, Dali::Actor::Property::POSITION ), Vector3( 10.0f, 50.0f, 0.0f ) ); 
// End Position: 10.0f, 50.0f, 0.0f

// Animate the actor2 position BY 10.0f, 50.0f, 0.0f
animation.AnimateBy( Property( actor2, Dali::Actor::Property::POSITION ), Vector3( 10.0f, 50.0f, 0.0f ) ); 
// End Position: 20.0f, 60.0f, 0.0f
</pre>

<h2 id="playback" name="playback">Controlling Playback</h2>

<p>After the animation is created, you can play it:</p>

<ul>
<li>To play the animation, use the <span style="font-family: Courier New,Courier,monospace;">Play()</span> function:
<pre class="prettyprint">
animation.Play();
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace;">Play()</span> function is not a synchronous function. It returns after sending a message. After the message is processed in a separate thread, the animation starts. Blocking the application thread does not stop the animation from playing.</p>
</li>
<li>To pause or stop the animation:
<pre class="prettyprint">
animation.Pause();
animation.Stop();
</pre> </li>

<li>To loop the animation to play multiple times:
<pre class="prettyprint">
animation.SetLooping( true );
</pre></li>
<li>By default, when the animation ends, the properties that it was animating are baked (saved). To discard the property changes when the animation ends or is stopped:
<pre class="prettyprint">
animation.SetEndAction( Animation::Discard );
</pre></li></ul>
<h2 id="notifications" name="notifications">Using Notifications</h2>

<p>Using DALi&#39;s signal framework, the application can be notified when the animation finishes. The <span style="font-family: Courier New,Courier,monospace;">Dali::Animation</span> class supports &quot;fire and forget&quot; behavior, which means that the animation continues to play even if the handle is discarded. In the following example, the finished signal is emitted after 2 seconds:</p>
<pre class="prettyprint">
// This sample code is for the HelloWorldExample class
// in <a href="dali_overview_n.htm#create">Creating a DALi Application</a>
void HelloWorldExample::Create( Application&amp; application )
{
&nbsp;&nbsp;// Create a button
&nbsp;&nbsp;PushButton button = PushButton::New();
&nbsp;&nbsp;Stage::GetCurrent().Add( button );

&nbsp;&nbsp;// Create an animation for the button
&nbsp;&nbsp;Animation animation = Animation::New( 2.0f ); // Duration 2 seconds
&nbsp;&nbsp;animation.AnimateTo( Property( button, Actor::Property::POSITION ), Vector3( 100.0f, 100.0f, 0.0f ) );
&nbsp;&nbsp;animation.FinishedSignal().Connect( this, &amp;HelloWorldExample::OnFinished );
&nbsp;&nbsp;animation.Play(); // Fire the animation and forget about it
} // At this point the animation handle has gone out of scope

void HelloWorldExample::OnFinished( Animation&amp; animation )
{
&nbsp;&nbsp;// Do something when the animation is finished
}
</pre>

<h2 id="alpha" name="alpha">Using Alpha Functions</h2>

<p>Alpha functions are used in animations to specify the rate of change of the animation parameter over time. This allows the animation to be, for example, accelerated, decelerated, repeated, or bounced. The built-in supported functions can be viewed in the <a href="../../../../../org.tizen.native.mobile.apireference/classDali_1_1AlphaFunction.html#aacf7780cdb2077166a3cd20a8a9faf4b">Dali::AlphaFunction::BuiltinFunction</a> enumeration.</p>
<pre class="prettyprint">
animation.SetDefaultAlphaFunction( Dali::AlphaFunction::EASE_IN );
</pre>
<p>You can also create your own alpha function:</p>
<pre class="prettyprint">
float MyAlphaFunction( float progress )
{
&nbsp;&nbsp;return progress;
}

AlphaFunction alphaFunction( &amp;MyAlphaFunction );
animation.SetDefaultAlphaFunction( alphaFunction );
</pre>
<p>You can specify a different alpha function for each animate call within the <span style="font-family: Courier New,Courier,monospace;">Animation</span> object:</p>
<pre class="prettyprint">
animation.AnimateTo( Property( actor1, Dali::Actor::Property::POSITION ), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vector3( 10.0f, 50.0f, 0.0f ), Dali::AlphaFunction::EASE_IN );
</pre>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

