<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Elementary</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				<li><a href="#basics">Elementary Basics</a></li>
				<li><a href="#config">Elementary Configuration</a></li>
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/ui/ui_component_tutorials_mn.htm">UI Components Tutorials</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore__Group.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje__Group.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Eina__Group.html">Eina API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>		
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Elementary</h1> 

 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>  
  
  <h2 id="basics" name="basics">Elementary Basics</h2>

<p>Elementary UI components are built in a hierarchical fashion. The idea is to factorize as much code as possible between UI components that behave in a similar manner, so as to facilitate the creation of new UI components. The Elementary UI components that we will use inherit a lot of their code from the container UI components and the layout component (a container component that takes a standard Edje design file and wraps it very thinly). We can therefore use the container and layout functions on them. We can also use Elementary object functions on them, such as <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span>, <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_get()</span>, and <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_unset()</span>.</p>

<p>This programming guide does not describe the container components. More information about containers can be found in <a href="ui_component_mn.htm#containers">Containers</a>.</p>

<p>Generally, an Elementary UI component can be added with the <span style="font-family: Courier New,Courier,monospace">elm_[UI_component_name]_add()</span> function, which returns an Evas object (<span style="font-family: Courier New,Courier,monospace">Evas_Object*</span>). The Evas object is then be passed to the functions that are used to configure the UI component.</p>

<p>At the end of your application, the <span style="font-family: Courier New,Courier,monospace">elm_shutdown()</span> function takes care of freeing the allocated Elementary objects, so there is no need to separately deallocate UI components.</p>

<h3 id="first_use" name="first_use">First Use of the Elementary Library</h3>

<p>A minimal Elementary application looks like this:</p>

<pre class="prettyprint">#include &lt;Elementary.h&gt;
int main(int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;elm_init(argc, argv);
&nbsp;&nbsp;&nbsp;elm_run();
&nbsp;&nbsp;&nbsp;elm_shutdown();

&nbsp;&nbsp;&nbsp;return 0;
}</pre>

<p>First of all, before using the Elementary library, it has to be initialized with the <span style="font-family: Courier New,Courier,monospace">elm_init()</span> function. The Elementary main loop can then be started with the <span style="font-family: Courier New,Courier,monospace">elm_run()</span> function, which will not return, and will constantly loop and run the event and processing tasks. A call to the <span style="font-family: Courier New,Courier,monospace">elm_exit()</span> function will tell the main loop to stop and return to the main function. At the end of the application, the <span style="font-family: Courier New,Courier,monospace">elm_shutdown()</span> function will clean up all resources that were allocated with Elementary in the main loop, and finally shut down Elementary.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">An Elementary application should use the <span style="font-family: Courier New,Courier,monospace">ELM_MAIN()</span> macro, which already calls the <span style="font-family: Courier New,Courier,monospace">elm_init()</span> function. The <a href="../../../../org.tizen.gettingstarted/html/native/first_app/first_app_n.htm">Hello World example</a> shows a basic Elementary application that uses this macro.</td>
        </tr>
    </tbody>
</table>

<h3 id="objects" name="objects">Elementary Objects</h3>

<p>Objects created using Elementary are always of type <span style="font-family: Courier New,Courier,monospace">Evas_Object*</span>. This means that Evas and Elementary functions can be used on an Elementary object. However, use Elementary functions on Elementary objects only when you do not know which API to use.</p>

<p>Since an Elementary object can take up a lot of memory, the <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> type has been created for situations where you need to use a lot of items, such as in a genlist or gengrid component, and save memory. Using the <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> type, an Elementary UI component can, in theory, contain a lot of items while maintaining a small memory footprint. In practice, <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> is bigger than expected, but it is still a good idea to use it.</p>

<h3 id="callbacks" name="callbacks">Elementary Callbacks</h3>

<p>Several callbacks can be registered on an Elementary object. The following is an overview of the different callback types and how they differ. For more information about events, see <a href="events_effects_n.htm#event_handling">Handling Events</a>. For more information about Evas objects and smart objects, see <a href="evas_n.htm#render">Rendering Concept and Method in Evas</a>.</p>

<h4>Evas Event Callback</h4>

<p>Using the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function, this callback can be registered on an Elementary object. It adds a callback for input events (key up, key down, mouse wheel) on an Evas object. In the case of an Elementary object, the callback will be registered on the underlying Evas object without considering the Elementary object infrastructure (no event propagation).</p>

<h4>Evas Smart Callback</h4>

<p>Using the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function, this callback can be registered on a "smart event" emitted by an Elementary object. Smart callbacks can only be registered on smart objects, and the "smart event" we want to register must be implemented by the corresponding smart object. Otherwise, the callback will do nothing. The callback has nothing to do with input events (keyboard or mouse)</p>

<h4>Edje Signal Callbacks</h4>

<p>Using the <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> function, this callback can be registered on a signal coming from an Edje object (a theme object).</p>

<h4>Elementary Signal Callback</h4>

<p>Using the <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> function, this callback can be registered on a signal coming from an Elementary UI component's theme. The callback has nothing to do with input events (keyboard or mouse).</p>

<h4>Elementary Event Callback</h4>

<p>Using the <span style="font-family: Courier New,Courier,monospace">elm_object_event_callback_add()</span> function, this callback can be registered on an input event (keyboard or mouse) coming from an Elementary object. In contrast to the Evas event callback, the Elementary event callback takes the hierarchy of the object into account: the event can be propagated to the parents of the object, and the parents can then process the event.</p>
  
  <h2 id="config" name="config">Elementary Configuration</h2> 
  <p>An Elementary configuration is composed of a set of options linked to a given Elementary profile. Once loaded, the Elementary profile will configure all these options and affect the look and feel of your entire Elementary application.</p>

<p>An Elementary configuration can be used to store the desired set of options that fits your application. Below, we list the different options that can be saved in an Elementary profile.</p>

<h3 id="general_functions" name="general_functions">General Functions</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">elm_config_save()</span> function provides a way to save the current Elementary configuration so that it can be reused in another session:</p>

<pre class="prettyprint">elm_config_save();</pre>

<p>When a profile is selected, we can ask Elementary to reload its configuration with the saved profile:</p>

<pre class="prettyprint">elm_config_reload();</pre>

<h3 id="managing_profiles" name="managing_profiles">Managing Profiles</h3>

<p>A profile is a set of preconfigured options that affects the entire look and feel of an application.</p>

<p>We can list the existing profiles:</p>

<pre class="prettyprint">Eina_List *list = elm_config_profile_list_get();</pre>

<p>We can set a particular profile:</p>

<pre class="prettyprint">elm_config_profile_set(&quot;myprofile&quot;);</pre>

<p>We can get the current profile:</p>

<pre class="prettyprint">char *profile = elm_config_profile_get();</pre>

<h3 id="scaling" name="scaling">Scaling UI Components</h3>

<p>An Elementary configuration allows you to configure UI component scaling both in terms of interactive areas and readable areas. For more information about UI component scaling, see <a href="ui_component_mn.htm#scalability">Scaling UI Components</a>.</p>

<p>Setting the global scaling factor to 2.0 will double the size of all scalable UI components:</p>

<pre class="prettyprint">elm_config_scale_set(2.0);</pre>

<p>We can also set the finger size:</p>

<pre class="prettyprint">elm_config_finger_size_set(1.5);</pre>

<h3 id="config_cache" name="config_cache">Configuring the Cache</h3>

<p>We can enable the globally configured cache flush, and we can then set the flush interval to 60 seconds:</p>

<pre class="prettyprint">elm_config_cache_flush_enabled_set(EINA_TRUE);
elm_config_cache_flush_interval_set(60);</pre>

<p>We can configure the font cache size to 500 bytes and the image cache size to 5 000 000 bytes:</p>

<pre class="prettyprint">elm_config_cache_font_cache_size_set(500);
elm_config_cache_image_cache_size_set(5000000);</pre>

<p>Finally, we can set the Edje collection cache size and the Edje file cache size:</p>

<pre class="prettyprint">elm_config_cache_edje_file_cache_size_set(500);
elm_config_cache_edje_collection_cache_size_set(500);</pre>

<h3 id="customizing_themes" name="customizing_themes">Customizing Themes</h3>

<p>Elementary uses Edje to theme its UI components. Edje provides a default theme for each UI component. This theme can be changed per application using the <span style="font-family: Courier New,Courier,monospace">ELM_THEME</span> environment variable, or it can be modified globally with the <span style="font-family: Courier New,Courier,monospace">elementary_config</span> utility.</p>

<p>When you need custom styles, use extensions. Extensions allow you to write styles for specific UI components. Once set, the extension will completely replace the default theme of the UI component.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">When developing an extension, to respect the signals emitted and the elements that need to be in place, it is important to know how the UI component is themed. If something is missing from the extension, it can break the UI component&#39;s behavior.</td>
        </tr>
    </tbody>
</table>

<p>The <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> function is used to add the new extension to the list of Elementary themes. The style can then be applied to the UI component with the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function.</p>

<p>Overlay is another solution to modify Elementary themes. It can replace the look of all UI components by overriding the default styles. As with extensions, it is up to you to write the correct overlay theme for a UI component. When looking for a theme to apply, Elementary first checks the list of overlays, then the set theme, and finally the list of extensions. With overlays, it is therefore possible to replace the default view so that every UI component is affected. This is very similar to setting the theme for the whole application, and will probably clash with end user options. It also runs the risk of none-matching styles across the application. Unless you have a very good reason to use them, avoid overlays. An overlay can be added with the <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_add()</span> function. It can be removed with the <span style="font-family: Courier New,Courier,monospace">elm_theme_overlay_del()</span> function.</p>

<p>For more information about UI component theme customization, see <a href="preferences_n.htm#customize">Customizing UI Components</a>.</p>

<h3 id="config_focus" name="config_focus">Configuring Focus</h3>

<p>When an Elementary object has the focus, input events are directly passed to that object in the window of the application. The focused object can also change its decoration to show the user where the focus is. The focus can be set to an Elementary object at any time with the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_set()</span> function. This will take the focus away from the previous focused object and give the focus to the new object. In an Elementary application, only one object can have the focus at a time. It is also possible to make an object unfocusable with the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_allow_set()</span> function, so that the object will never take the focus.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Only visible objects can be focused.</td>
        </tr>
    </tbody>
</table>

<p>Elementary also supports focus chains, which allow you to cycle through all the focusable objects in a window. By default, the focus chain is defined by the order in which the UI components were added to the code. It is also possible to define custom focus chains when needed.</p>

<p>To define a custom focus chain, create an <span style="font-family: Courier New,Courier,monospace">Eina_List</span>, and add the Elementary objects to it in the desired focus order. After you have inserted all the objects to the <span style="font-family: Courier New,Courier,monospace">Eina_List</span>, use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_custom_chain_set()</span> function to set this list as the custom focus chain of the parent object (here <span style="font-family: Courier New,Courier,monospace">container_object</span>).</p>

<pre class="prettyprint">Eina_List *obj_list = NULL;

list = eina_list_append(list, obj1); 
list = eina_list_append(list, obj4);
list = eina_list_append(list, obj2); 
list = eina_list_append(list, obj3);

elm_object_focus_custom_chain_set(container_object, list);</pre>

<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_custom_chain_unset()</span> function to remove the custom focus chain and use the default focus chain instead.</p>

<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_object_focus_next()</span> function to programmatically cycle through the focus chain.</p>

<p>For detailed information about focus, see <a href="preferences_n.htm#focus">Managing UI Component Focus</a>.</p>

<p>We can show a highlight on the focused object:</p>

<pre class="prettyprint">elm_config_focus_highlight_enabled_set(EINA_TRUE);</pre>

<p>We can also activate an animation when the focus shifts from one object to another:</p>

<pre class="prettyprint">elm_config_focus_highlight_animate_set(EINA_TRUE);</pre>

<h3 id="config_gesture_layer" name="config_gesture_layer">Configuring the Gesture Layer</h3>

<p>We can configure the duration of the long tap and double tap events on gesture layer objects. Here, we set the duration to 500 ms:</p>

<pre class="prettyprint">elm_config_glayer_long_tap_start_timeout_set(0.5);
elm_config_glayer_double_tap_timeout_set(0.5);</pre>

<h3 id="config_scrolling" name="config_scrolling">Configuring Scrolling</h3>

<p>An Elementary configuration provides several functions for configuring scrolling in UI components.</p>

<p>You can enable bouncing, which makes the scroller bounce when it reaches its viewport's edge during scrolling:</p>

<pre class="prettyprint">elm_config_scroll_bounce_enabled_set(EINA_TRUE);</pre>

<p>You can control the inertia of the bounce animation. Here, the inertia is set to 0.5:</p>

<pre class="prettyprint">elm_config_scroll_bounce_friction_set(0.5);</pre>

<p>You can also set the friction for a page scroll, include animations, and zoom animations.</p>

<p>You can use the <span style="font-family: Courier New,Courier,monospace">elm_config_scroll_thumbscroll_enabled_set()</span> function to set the scroller to be draggable. You can configure several drag options, such as friction, sensitivity, acceleration, and momentum.</p>

<p>Here, we set the scroller to be draggable, and we set the number of pixels one should travel while dragging the scroller's view to actually trigger scrolling to 20 pixels:</p>

<pre class="prettyprint">// Set the scroller to be draggable
elm_config_scroll_thumbscroll_enabled_set(EINA_TRUE);

// Set the thumbscroll threshold to 20 pixels
elm_config_scroll_thumbscroll_threshold_set(20);</pre>

<h3 id="config_long_press" name="config_long_press">Configuring Long Press</h3>

<p>Long press events can be configured using the <a href="../../../../org.tizen.native.mobile.apireference/group__Config.html">Elementary Config</a> API. Here, we get the current timeout before a long press event happens and increase it by 1 second:</p>

<pre class="prettyprint">// Get the long press timeout
double lp_timeout = elm_config_longpress_timeout_get();

// Increase it by 1 second
elm_config_longpress_timeout_set(lp_timeout + 1.0);</pre>

<h3 id="config_tooltips" name="config_tooltips">Configuring Tooltips</h3>

<p>The duration after which a tooltip is shown can be configured through the Elementary Config API. Here, we set the delay to 2 seconds:</p>

<pre class="prettyprint">elm_config_tooltip_delay_set(2.0);</pre>

<h3 id="config_password" name="config_password">Configuring the Password Show Last Feature</h3>

<p>The password show last feature enables users to view the last input entered for a few seconds before it is masked. The following functions allow you to set this feature in the password mode of the entry component and to change the duration over which the input has to be visible.</p>

<p>First, we enable the password show last feature:</p>

<pre class="prettyprint">elm_config_password_show_last_set(EINA_TRUE);</pre>

<p>Then, we set the visibility timeout to 5 seconds:</p>

<pre class="prettyprint">elm_config_password_show_last_timeout_set(5.0);</pre>

<h3 id="config_elm_engine" name="config_elm_engine">Configuring the Elementary Engine</h3>

<p>We can use the Elementary Config API to set the rendering engine that Elementary will use to draw the windows. The following rendering engines are supported:</p>

<ul>
    <li>"software_x11"</li>
    <li>"fb"</li>
    <li>"directfb"</li>
    <li>"software_16_x11"</li>
    <li>"software_8_x11"</li>
    <li>"xrender_x11"</li>
    <li>"opengl_x11"</li>
    <li>"software_gdi"</li>
    <li>"software_16_wince_gdi"</li>
    <li>"sdl"</li>
    <li>"software_16_sdl"</li>
    <li>"opengl_sdl"</li>
    <li>"buffer"</li>
    <li>"ews"</li>
    <li>"opengl_cocoa"</li>
    <li>"psl1ght"</li>
</ul>

<p>Here, we set the engine to "opengl_x11":</p>

<pre class="prettyprint">elm_config_engine_set(&quot;opengl_x11&quot;);</pre>

<h3 id="config_access_mode" name="config_access_mode">Configuring the Access Mode</h3>

<p>When the access mode is active, information about an Elementary object is read when the object receives an <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span> event. Here, we activate the access mode:</p>

<pre class="prettyprint">elm_config_access_set(EINA_TRUE);</pre>

<h3 id="config_selection" name="config_selection">Configuring Selection</h3>

<p>Selection behavior can be set to be cleared when the entry component is unfocused:</p>

<pre class="prettyprint">elm_config_selection_unfocused_clear_set(EINA_TRUE);</pre>

<h3 id="config_mirroring" name="config_mirroring">Configuring Mirroring</h3>

<p>Elementary allows UI mirroring both on a single object and on the entire UI. If activated with the <span style="font-family: Courier New,Courier,monospace">elm_object_mirrored_set()</span> function, an Elementary UI component will display as if there was a vertical mirror in the middle of it. Only the controls and the disposition of the UI component are mirrored. Text is not mirrored.</p>

<p>The default mirror mode of UI components can be set with the Elementary Config API. Here, we activate the mirror mode by default:</p>

<pre class="prettyprint">elm_config_mirrored_set(EINA_TRUE);</pre>

<h3 id="config_frame_rate" name="config_frame_rate">Configuring Frame Rate</h3>

<p>We can also set the frames per second (FPS) value for <span style="font-family: Courier New,Courier,monospace">ecore_animator_frametime</span> and <span style="font-family: Courier New,Courier,monospace">edje_frametime</span> calculations. Here, we set the FPS to 60:</p>

<pre class="prettyprint">elm_config_fps_set(60.0);</pre>
  
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>