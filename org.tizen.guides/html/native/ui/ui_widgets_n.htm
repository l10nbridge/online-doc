<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>UI Widgets</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/><br/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#background">Background Widget</a></li>
			<li><a href="#button">Button Widget</a></li>
			<li><a href="#check">Check Widget</a></li>
			<li><a href="#colorselector">Colorselector Widget</a></li>
			<li><a href="#ctxpopup">Ctxpopup Widget</a></li>
			<li><a href="#datetime">Datetime Widget</a></li>
			<li><a href="#entry">Entry Widget</a></li>
			<li><a href="#flip">Flip Widget</a></li>
			<li><a href="#gengrid">Gengrid Widget</a></li>
			<li><a href="#genlist">Genlist Widget</a></li>
			<li><a href="#glview">GLView Widget</a></li>
			<li><a href="#icon">Icon Widget</a></li>
			<li><a href="#image">Image Widget</a></li>
			<li><a href="#index">Index Widget</a></li>
			<li><a href="#label">Label Widget</a></li>
			<li><a href="#list">List Widget</a></li>
			<li><a href="#map">Map Widget</a></li>
			<li><a href="#notify">Notify Widget</a></li>
			<li><a href="#panel">Panel Widget</a></li>
			<li><a href="#photo">Photo Widget</a></li>
			<li><a href="#photocam">Photocam Widget </a></li>
			<li><a href="#plug">Plug Widget</a></li>
			<li><a href="#popup">Popup Widget</a></li>
			<li><a href="#progressbar">Progressbar Widget</a></li>
			<li><a href="#radio">Radio Widget</a></li>
			<li><a href="#segmentcontrol">Segmentcontrol Widget</a></li>
			<li><a href="#slider">Slider Widget</a></li>
			<li><a href="#spinner">Spinner Widget</a></li>
			<li><a href="#toolbar">Toolbar Widget</a></li>
			<li><a href="#tooltip">Tooltip Widget</a></li>
			<li><a href="#win">Win Widget</a></li>
		</ul>
			<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/ui/ui_control_tutorials_n.htm">UI Control Tutorials</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>UI Widgets</h1>
<div class="cont"><div class="static-cont">	

	<!-- Show / Hide all links -->
	<div class="devicespecs-util mt5 clfix">
		<ul class="dutil">
			<li><a href="#" class="showA">Show All</a></li>
			<li class="none"><a href="#" class="hideA">Hide All</a></li>
		</ul>
	</div>
	<!-- Folds -->
	<ul class="devicespecifications">
		<li>
			<div class="devicespec-tit">
				<h2 id="background" name="background" class="items-tit-h2">Background Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
<p class="figure">Figure: Red color background</p>
<p style="text-align:center;"><img alt="Red color background" src="../../images/bg.png" /></p>

<p class="figure">Figure: Background hierarchy</p>
<p style="text-align:center;"><img alt="Background hierarchy" src="../../images/bg_tree.png" /></p>

<p>The background widget can be used to set a solid background decoration to a window or to a container object. It works like an image, but has some background specific properties, for example it can be set to tiled, centered, scaled or stretched mode. There are no specific signals relative to background object.</p>

<h3>Adding a Background</h3>

<p>A background is created with the <span style="font-family: Courier New,Courier,monospace">elm_bg_add()</span>.</p>

<pre class="prettyprint">
Evas_Object *bg, *parent;

// Creating a background
bg = elm_bg_add(parent);
</pre>

<h3>Change Color of the Background</h3>

<p>You can set the color of the bg with <span style="font-family: Courier New,Courier,monospace">elm_bg_color_set()</span>. Here we set the background color to red.</p>

<pre class="prettyprint">
Evas_Object *bg;

// Use red color for background
elm_bg_color_set(bg, 0xFF, 0x00, 0x00);
</pre>

<h3>Change Image of the Background</h3>

<p>It is also possible to set an image or an Edje group with <span style="font-family: Courier New,Courier,monospace">elm_bg_file_set()</span>. The display mode of the image in the background can be chosen with <span style="font-family: Courier New,Courier,monospace">elm_bg_option_set()</span>, where the following modes are available:</p>

<ul class="ul">
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_CENTER</span>: center the background image</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_SCALE</span>: scale the background image, retaining aspect ratio</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_STRETCH</span>: stretch the background image to fill the widget&#39;s area</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_TILE</span>: tile background image at its original size</li>
</ul>

<pre class="prettyprint">
Evas_Object *bg;

// Set a file on the disk as background image
elm_bg_file_set(bg, &quot;/path/to/the/image&quot;, NULL);
// Set an edje group as background image
elm_bg_file_set(bg, &quot;/path/to/the/edje&quot;, &quot;edje_group&quot;);
elm_bg_option_set(bg, ELM_BG_OPTION_STRETCH)
</pre>

<h3>Using Overlay</h3>

<p>An overlay can be set using the &quot;overlay&quot; part name.</p>

<pre class="prettyprint">
elm_object_part_content_set(bg, &quot;overlay&quot;, over);
</pre>

<p>Here, over is an Edje object that will be displayed on top of the current bg object.</p>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="button" name="button" class="items-tit-h2">Button Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

<p class="figure">Figure: Button widget</p>
<p style="text-align:center;"><img alt="##" src="../../images/button.png" /></p>

<p class="figure">Figure: Button hierarchy</p>
<p style="text-align:center;"><img alt="##" src="../../images/button_tree.png" /></p>

<p>The Elementary button widget is a simple push button. It is composed of a label icon and an icon object and has autorepeat feature.</p>

<h3>Adding a Button</h3>

<pre class="prettyprint">
Evas_Object *button, *parent;

// Creating a button
button = elm_button_add(parent);</pre>

<h3>Adding an Icon Inside a Button</h3>

<p>The icon can be updated with <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function with the &quot;icon&quot; part name.</p>

<pre class="prettyprint">
Evas_Object *ic;
ic = elm_icon_add(button);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button, &quot;icon&quot;, ic);</pre>

<h3>Adding Text Inside a Button</h3>

<p>The label can be modified using the <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function.</p>

<pre class="prettyprint">elm_object_text_set(button, &quot;Click me!&quot;);</pre>

<h3>Using Button Style</h3>

<p>Other styles may be used on the button. Tizen supports the following styles:</p>

<ul class="ul">
    <li>&quot;icon_reorder&quot;</li>
    <li>&quot;icon_expand_add&quot;</li>
    <li>&quot;icon_expand_delete&quot;</li>
    <li>&quot;default&quot;</li>
    <li>&quot;circle&quot;</li>
    <li>&quot;bottom&quot;</li>
    <li>&quot;contacts&quot;</li>
    <li>&quot;option&quot;</li>
</ul>

<p>You can see these themes in action on the following screenshot (in the above order).</p>

<p class="figure">Figure: Button widget</p>
<p style="text-align:center;"><img alt="##" src="../../images/button.png" /></p>

<p>To change the style of the button, we call the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function on our button object.</p>

<pre class="prettyprint">elm_object_style_set(button,&quot;icon_expand_add&quot;);</pre>

<h3>Using Button Callbacks</h3>

<p>Button emits the following signals:</p>

<ul class="ul">
    <li>&quot;clicked&quot;: the user clicked the button (press/release)</li>
    <li>&quot;repeated&quot;: the user pressed the button without releasing it</li>
    <li>&quot;pressed&quot;: the user pressed the button</li>
    <li>&quot;unpressed&quot;: the user released the button after pressing it</li>
</ul>

<p>For all these signals the <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter returned in the callback is NULL.</p>

<p>This is an example to register and define callback function called by the clicked signal.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, clicked_cb, data);
}
// Callback function for the &quot;clicked&quot; signal
// This callback is called when the button is clicked by the user

void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Button clicked\n&quot;);
}</pre>

<h3>Using Autorepeat Feature</h3>

<p>The autorepeat feature (enabled by default) consists of calling the &quot;repeated&quot; signal when the user keeps the button pressed. This feature can be disabled with the <span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_set()</span> function. The autorepeat is configured with</p>

<ul class="ul">
    <li><span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_initial_timeout_set()</span>: to set the initial timeout before the autorepeat event is generated</li>
    <li><span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_gap_timeout_set()</span>: to set the interval between two autorepeat events</li>
</ul>

<p>Disable the autorepeat feature:</p>

<pre class="prettyprint">elm_button_autorepeat_set(button, EINA_FALSE);</pre>

<p>Enable the autorepeat feature (enabled by default):</p>

<pre class="prettyprint">elm_button_autorepeat_set(button, EINA_TRUE);</pre>

<p>Set the initial timeout to five seconds:</p>

<pre class="prettyprint">elm_button_autorepeat_initial_timeout_set(button, 5.0);</pre>

<p>Set the gap between two signals to 0.5 seconds:</p>

<pre class="prettyprint">elm_button_autorepeat_gap_timeout_set(button, 0.5);</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="check" name="check" class="items-tit-h2">Check Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

<p class="figure">Figure: Check widget</p> 
<p style="text-align:center;"><img alt="Check widget" src="../../images/check.png" /></p> 

<p class="figure">Figure: Check hierarchy</p> 
<p style="text-align:center;"><img alt="Check hierarchy" src="../../images/check_tree.png" /></p> 

<p>The check widget is similar to the radio widget, except that it does not work as a group. It toggles the value of a boolean between true and false.</p>

<p>This widget inherits from the layout widget. All layout functions can be used on the check widget.</p>

<h3 id="Adding" name="Adding">Adding Check Widget</h3>

<p>This is how to create a check widget.</p>

<pre class="prettyprint">
Evas_Object *check, *parent;
check = elm_check_add(parent);
</pre>

<h3 id="Modifying" name="Modifying">Modifying Check Styles</h3>

<p>Check widget style can be set with the <span style="font-family: Courier New,Courier,monospace;">elm_object_style_set()</span> function. The following styles are available:</p>
<ul class="ul">
    <li><span style="font-family: Courier New,Courier,monospace;">default</span></li>
    <li><span style="font-family: Courier New,Courier,monospace;">favorite</span></li>
    <li><span style="font-family: Courier New,Courier,monospace;">on</span> and <span style="font-family: Courier New,Courier,monospace;">off</span></li>
</ul>

<p>As an example we will set the favorite style on our check object.</p>

<pre class="prettyprint">
elm_object_style_set(check, &quot;favorite&quot;);
</pre>

<p>We can get the current style with <span style="font-family: Courier New,Courier,monospace;">elm_object_style_get()</span> function.</p>

<pre class="prettyprint">
char *style = elm_object_style_get(check);
</pre>

<h3 id="Using_Check_Widget" name="Using_Check_Widget">Using Check Widget</h3>

<p>After having created a check object, it is possible to set its boolean value to <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>.</p>

<pre class="prettyprint">
elm_check_state_set(check, EINA_TRUE);
</pre>

<p>We can also retrieve the current value of the check object.</p>

<pre class="prettyprint">
Eina_Bool value = elm_check_state_get(check);
</pre>

<p>As with the radio object, an icon and a label can be set.</p>

<pre class="prettyprint">
// Create a Home icon 
Evas_Object *icon;

icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;home&quot;);

// Set it to the check object 
elm_object_part_content_set(check, &quot;icon&quot;, icon);

// Set the check label 
elm_object_text_set(check, &quot;Check label&quot;);
</pre>

<p>We can also modify the &quot;on&quot; and &quot;off&quot; labels.</p>

<pre class="prettyprint">
elm_object_part_text_set(check, &quot;on&quot;, &quot;True&quot;);
elm_object_part_text_set(check, &quot;off&quot;, &quot;False&quot;);
</pre>

<p>The get functions of the elementary object API can be used to retrieve the content set to the check object.</p>

<pre class="prettyprint">
// Get the current set text of the check label 
char *text = elm_object_text_get(check);

// Get the content set in the icon part 
Evas_Object *icon = elm_object_part_content_get(check, &quot;icon&quot;);
</pre>

<h3 id="Using_Check_Callbacks" name="Using_Check_Callbacks">Using Check Callbacks</h3>

<p>When the value is changed by the user, the changed signal is emitted. <span style="font-family: Courier New,Courier,monospace;">event_info</span> parameter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>.</p>

<p>This example shows how to register a callback on this signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(check, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the check value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>


			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="colorselector" name="colorselector" class="items-tit-h2">Colorselector Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

    <p class="figure">Figure: Colorselector widget</p> 
  <p style="text-align:center;"><img alt="Colorselector widget" src="../../images/colorsel.png" /></p> 
  
      <p class="figure">Figure: Colorselector hierarchy</p> 
  <p style="text-align:center;"><img alt="Colorselector hierarchy" src="../../images/colorselector_tree.png" /></p>


<p> The colorselector widget provides a color selection solution to the user. There are different modes available, each of them showing a different configuration of the colorselector widget.</p>

<p>As for now, only the <strong>PALETTE</strong> mode is available in Tizen.</p>

<ul class="ul">
<li>ELM_COLORSELECTOR_PALETTE</li>
</ul>

<p>The Palette mode displays several color items that enable the user to choose a color in the items displayed. It is possible to add new items, or to update the color of the current item. The list of color items is called a palette, it is associated with a unique identifier. This enable the developer to create new series of colors (new palette) and save it under another identifier. By default, the color palette is using the &quot;default&quot; identifier.</p>

<p>This widget inherits from the layout widget, so all function concerning the layout widget can also be used on the colorselector widget.</p>

<h3>Adding a Colorselector Widget</h3>

<p>This is how to create a colorselector object.</p>

<pre class="prettyprint">
Evas_Object *colorsel, *parent;

colorsel = elm_colorselector_add(parent);
</pre>

<h3>Setting Colorselector Modes</h3>

<p>This is how to set the mode of the colorselector to the palette mode.</p>

<pre class="prettyprint">
elm_colorselector_mode_set(colorsel, ELM_COLORSELECTOR_PALETTE);
</pre>

<p>We want to create a new palette called &quot;mypalette&quot;. This new palette will be saved by elementary config and we will be able to load it again later. We then add three colors in &quot;mypalette&quot;: red, green, and blue.</p>

<pre class="prettyprint">
elm_colorselector_palette_name_set(colorsel, &quot;mypalette&quot;);
elm_colorselector_palette_color_add(colorsel, 255, 0, 0, 255);
elm_colorselector_palette_color_add(colorsel, 0, 255, 0, 255);
elm_colorselector_palette_color_add(colorsel, 0, 0, 255, 255);
</pre>

<p>The &quot;default&quot; palette already contains 14 colors.</p>

<pre class="prettyprint">elm_colorselector_palette_name_set(colorsel, &quot;default&quot;);
</pre>

<p>When the user clicks on the color elements, it changes the color that is set to the colorselector widget. We can use the function below to retrieve the current selected color.</p>

<pre class="prettyprint">int r, g, b, a;

elm_colorselector_color_get(colorsel, &amp;r, &amp;g, &amp;b, &amp;a);
</pre>

<h3>Using Colorselector Callbacks</h3>

<p>We can register callbacks on the following signals:</p>

<ul class="ul">
<li>&quot;changed&quot; - The color value changes on the selector. event_info is NULL.</li>
<li>&quot;color,item,selected&quot; - The user clicks on a color item. The event_info parameter of the callback is the selected color item.</li>
<li>&quot;color,item,longpressed&quot; - The user long presses on a color item. The event_info parameter of the callback contains the selected color item.</li>
</ul>

<p>This is how to register a callback on &quot;changed&quot; signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(colorselector, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the colorselector value changes

void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The color has changed\n&quot;);
}
</pre> 

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="ctxpopup" name="ctxpopup" class="items-tit-h2">Ctxpopup Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

    <p class="figure">Figure: Context popup widget</p> 
  <p style="text-align:center;"><img alt="Context popup widget" src="../../images/ctxpopup1.png" /></p> 
  
      <p class="figure">Figure: Context popup hierarchy</p> 
  <p style="text-align:center;"><img alt="Context popup hierarchy" src="../../images/ctxpopup_tree.png" /></p>


<p> Ctxpopup is a contextual popup, which can show a list of items.</p>

<h3>Adding a Ctxpopup</h3>

<p>A ctxpopup can be created with <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_add()</span> and when shown, it automatically chooses an area inside its parent object&#39;s view (set via <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_hover_parent_set()</span>) to optimally fit into it.</p>

<pre class="prettyprint">
Evas_Object *ctxpopup, *parent;

// Creating a ctxpopup 
ctxpopup = elm_ctxpopup_add(parent);
</pre>

<h3>Modifying Ctxpopup Style</h3>

<p>The following styles are available:</p>

<ul class="ul">
<li>&quot;dropdown/list&quot;</li>
<li>&quot;dropdown/label&quot;</li>
<li>&quot;more/default&quot;</li>
</ul>

    <p class="figure">Figure: Context popup more/default style</p> 
  <p style="text-align:center;"><img alt="Context popup more/default style" src="../../images/ctxpopup1.png" /></p> 
  
      <p class="figure">Figure: Context popup dropdown/list</p> 
  <p style="text-align:center;"><img alt="Context popup dropdown/list" src="../../images/ctxpopup2.png" /></p>

      <p class="figure">Figure: Context popup dropdown/label</p> 
  <p style="text-align:center;"><img alt="Context popup dropdown/label" src="../../images/ctxpopup3.png" /></p>

<p> In the following example, we set the &quot;more/default&quot; style.</p>

<pre class="prettyprint">elm_object_style_set(ctxpopup, &quot;more/default&quot;);</pre>

<h3>Configuring Ctxpopup</h3>

<p>The context popup orientation can be set with <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_horizontal_set()</span>. Here we set it to horizontal.</p>

<pre class="prettyprint">elm_ctxpopup_horizontal_set(ctxpopup, EINA_TRUE);
</pre>

<p>We can also disable auto hiding if we want the ctxpopup never to be hidden. (Auto hide is enabled by default.)</p>

<pre class="prettyprint">elm_ctxpopup_auto_hide_disabled_set(ctxpopup, EINA_TRUE);
</pre>

<h3>Managing Ctxpopup Items</h3>

<p>The ctxpopup can contain a small number of items. Each of them can have a label and an icon. Here we append an item with the &quot;Test&quot; label and no icon.</p>
<pre class="prettyprint">
Elm_Object_Item *it;

it = elm_ctxpopup_item_append(ctxpopup, &quot;test&quot;, NULL, _ctxpopup_item_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);
</pre>

<p>The _ctxpopup_item_cb() callback will be called when the item is clicked. This is how to write the definition of this callback.</p>

<pre class="prettyprint">static void
_ctxpopup_item_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;ctxpopup item selected\n&quot;);
}
</pre>

<p>Then the item label is set to &quot;New label&quot;.</p>

<pre class="prettyprint">elm_object_item_part_text_set(it, &quot;default&quot;, &quot;New label&quot;);
</pre>

<p>And its icon is modified to the standard &quot;home&quot; icon.</p>

<pre class="prettyprint">
Evas_Object *home_icon = elm_icon_add(ctxpopup);
elm_icon_standard_set(home_icon, &quot;home&quot;);

elm_object_item_part_content_set(it, &quot;icon&quot;, home_icon);
</pre>

<h3>Using Ctxpopup Callbacks</h3>

<p>The context popup emits the &quot;dismissed&quot; signal when it is dismissed. We can register a callback to this signal. The event_info parameter is NULL.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ctxpopup, &quot;dismissed&quot;, dismissed_cb, data);
}

// Callback function for the &quot;dismissed&quot; signal
// This callback is called when the ctxpopup is dismissed. 

void dismissed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Ctxpopup dismissed\n&quot;);
}
</pre> 

			</div>
		</li>
	
		<li>
			<div class="devicespec-tit">
				<h2 id="datetime" name="datetime" class="items-tit-h2">Datetime Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Datetime selection</p> 
<p style="text-align: center;"> <img alt="Datetime selection" src="../../images/date2.png" /> </p> 
 
<p class="figure">Figure: Datetime hierarchy</p> 
<p style="text-align: center;"> <img alt="Datetime hierarchy" src="../../images/datetime_tree.png" /> </p> 
 
<p>The datetime widget displays and adds date and time values.</p>

<h3>Adding a Datetime Widget</h3>

<p>The widget is created with <span style="font-family: Courier New,Courier,monospace">elm_datetime_add()</span>. It is then possible to select the visible fields with <span style="font-family: Courier New,Courier,monospace">elm_datetime_field_visible_set()</span>. The following fields can be controlled:</p>
  <ul class="ul">
   <li>ELM_DATETIME_YEAR: The Year field</li>
   <li>ELM_DATETIME_MONTH: The Month field</li>
   <li>ELM_DATETIME_DATE: The Date field</li>
   <li>ELM_DATETIME_HOUR: The Hour field</li>
   <li>ELM_DATETIME_MINUTE: The Minute field</li>
   <li>ELM_DATETIME_AMPM: The AM/PM field</li>
  </ul>

<p>As an example, this is how to create a datetime widget and set the HOUR and MINUTE fields visible.</p>

<pre class="prettyprint">
Evas_Object *datetime, *parent;

datetime = elm_datetime_add(parent);

elm_datetime_field_visible_set(datetime, ELM_DATETIME_HOUR, EINA_TRUE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_MINUTE, EINA_TRUE);

elm_datetime_field_visible_set(datetime, ELM_DATETIME_YEAR, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_MONTH, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_DATE, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_AMPM, EINA_FALSE);
</pre>

<h3>Using Datetime Styles</h3>

<p>The following styles are available:</p>
  <ul class="ul">
   <li>&quot;date_layout&quot;</li>
   <li>&quot;time_layout&quot;</li>
   <li>&quot;time_layout_24h&quot;</li>
  </ul>

<p>This is how to create the &quot;date_layout&quot; style.</p>

<pre class="prettyprint">
elm_object_style_set(datetime, &quot;date_layout&quot;);
</pre>

<h3>Setting Datetime Format</h3>

<p>The format of the date and time can be configured with <span style="font-family: Courier New,Courier,monospace">elm_datetime_format_set()</span> using a combination of allowed Libc date format specifiers. Here, as an example, we set the format to: &quot;HH : MM&quot;.</p>

<pre class="prettyprint">
elm_datetime_format_set(datetime, &quot;%H : %M&quot;);
</pre>

<p>Please refer to the API documentation for a complete list of all the options available.</p>

<h3>Using Datetime Callbacks</h3>

<p>A callback can be registered on the &quot;changed&quot; signal to detect when the Datetime field values are changed. The event_info parameter is NULL.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(datetime, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the datetime fields change
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Datetime field changed. \n&quot;);
}</pre>

<p>The &quot;language,changed&quot; signal is emitted when the system locale changes.</p>
 

<h3>UX Issue in Tizen 2.3</h3>

<ul class="ul">
  <li><span style="font-family: Courier New,Courier,monospace">date_layout</span> (default): Year, Month, Day</li>
  <li><span style="font-family: Courier New,Courier,monospace">time_layout</span>: Hour, Minute, AM/PM button</li>
  <li><span style="font-family: Courier New,Courier,monospace">time_layout_24hr</span>: Hour, Minute</li>
</ul>
 
<p>Basically, the <span style="font-family: Courier New,Courier,monospace">elm_datetime</span> widget needs a full-length format that includes the Year, Month, Day, Hour, Minute, and AM/PM. Each style then shows specific fields according their style, limited by the UX concept. If you call the <span style="font-family: Courier New,Courier,monospace">elm_datetime_field_visible_set()</span> function for a field that is not supported in the style, it does not work.</p>
 
			</div>
		</li>
		

		<li>
			<div class="devicespec-tit">
				<h2 id="entry" name="entry" class="items-tit-h2">Entry Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Entry widget</p> 
<p style="text-align: center;"> <img alt="Entry widget" src="../../images/entry.png" /> </p> 
 
<p class="figure">Figure: Entry widget</p> 
<p style="text-align: center;"> <img alt="Entry widget" src="../../images/entry2.png" /> </p> 
 
<p class="figure">Figure: Entry hierarchy</p> 
<p style="text-align: center;"> <img alt="Entry hierarchy" src="../../images/entry_tree.png" /> </p> 
 
<p>The entry widget is a box where the user can enter text. It supports the following features:</p>
  <ul class="ul">
   <li>text wrapping</li>
   <li>multiline</li>
   <li>scrolling</li>
   <li>formatted markup text</li>
   <li>password mode</li>
   <li>filtering text</li>
   <li>read/write from a file</li>
   <li>theme style overrides</li>
  </ul>
   
<h3>Adding Entry Widget</h3>

<p>The entry widget is created with the <span style="font-family: Courier New,Courier,monospace">elm_entry_add()</span> function, and the text inside the entry can be set with <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_set()</span>.</p>

<pre class="prettyprint">
Evas_Object *entry, *parent;

entry = elm_entry_add(parent);
elm_entry_entry_set(entry, &quot;A short text.&quot;);
</pre>

<h3>Using Text Edition</h3>

<p>We can also append text to the end of existing content,</p>

<pre class="prettyprint">
elm_entry_entry_append(entry, &quot;END&quot;);
</pre>

<p>or insert text at the current cursor position.</p>

<pre class="prettyprint">
elm_entry_entry_insert(entry, &quot;CURSOR&quot;);
Eina_Bool Empty = elm_entry_is_empty(entry);
</pre>

<p>Call <span style="font-family: Courier New,Courier,monospace">elm_entry_is_empty()</span> to see whether the entry is empty. Here, the boolean variable Empty will return EINA_FALSE.</p>

<p>By default, the user can enter text in the entry widget when it is in the focus. We can prevent the user from editing text if needed.</p>

<pre class="prettyprint">
elm_entry_editable_set(entry, EINA_FALSE);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">It is still possible to use the previous functions to modify the text of a non-editable entry.</td> 
    </tr> 
   </tbody> 
  </table>  
 
<h3>Setting Password Mode</h3>

<p>When dealing with password content, the password mode activates to hide what the user is typing. In this mode, the display of any text is replaced by asterisks (*), and the entry is single line (there is no line wrap).</p>

<pre class="prettyprint">
elm_entry_password_set(entry, EINA_TRUE);
</pre>

<h3>Entry Line Modes And Wrapping</h3>

<p>The entry widget has two line modes:</p>
  <ul class="ul">
   <li>single line mode</li>
   <li>multiline mode</li>
  </ul>

<p>First, we set the entry in single line mode.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_TRUE);
</pre>

<p>In this mode, the text does not wrap when reaching the edge, but the entry grows horizontally instead. Pressing the &quot;Enter&quot; key in this mode generates an &quot;activate&quot; event instead of adding a new line.</p>

<p>When the entry is set to multiline mode (single line off), the text wraps at the end of the entry and pressing &quot;Enter&quot; creates a new line.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_FALSE);
elm_entry_line_wrap_set(entry, ELM_WRAP_WORD);
</pre>

<p>In multiline entries, <span style="font-family: Courier New,Courier,monospace">elm_entry_line_wrap_set()</span> provides a way to cut the text implicitly into a new line when it reaches the far edge of the widget. The following wrap modes are available:</p>
  <ul class="ul">
   <li>ELM_WRAP_NONE: No wrap</li>
   <li>ELM_WRAP_CHAR: Wrap between characters</li>
   <li>ELM_WRAP_WORD: Wrap in allowed wrapping points (as defined in the unicode standard)</li>
   <li>ELM_WRAP_MIXED: Word wrap, and if that fails, char wrap</li>
  </ul>

<h3>Selecting Text</h3>

<p>Text selections can be made with different functions. This selects all the content of the entry widget.</p>

<pre class="prettyprint">
elm_entry_select_all(entry);
</pre>

<p>We can drop the current selection with</p>

<pre class="prettyprint">
elm_entry_select_none(entry);
</pre>

<p>To select part of the text, use <span style="font-family: Courier New,Courier,monospace">elm_entry_select_region_set()</span>. The code below selects the first twenty characters of the entry content.</p>

<pre class="prettyprint">
elm_entry_select_region_set(entry, 0, 20);
</pre>

<p>Current selected text within the entry can be retrieved like this.</p>

<pre class="prettyprint">
const char *selection;

selection = elm_entry_selection_get(entry);
</pre>

<p>If the entry text is empty, <span style="font-family: Courier New,Courier,monospace">elm_entry_selection_get()</span> will return NULL.</p>

<p>We can copy or cut the selection to the clipboard. (There is an example of a cut below.)</p>

<pre class="prettyprint">
elm_entry_selection_cut(entry);
</pre>

<p>This selection can be pasted in the same or a different entry.</p>

<pre class="prettyprint">
elm_entry_selection_paste(entry);
</pre>

<h3>Controlling Cursor</h3>

<p>The cursor represents the current position in the entry, where the next action is done (for example, text insertion or deletion). Usually, the cursor is represented as a blinking character, but that depends on the theme configuration. Cursor position can be modified by using several functions.</p>

<p>It can be moved to the beginning of the entry,</p>

<pre class="prettyprint">
elm_entry_cursor_begin_set(entry);
</pre>

<p>or to the end.</p>

<pre class="prettyprint">
elm_entry_cursor_end_set(entry);
</pre>

<p>It can be moved one line down or up.</p>

<pre class="prettyprint">
elm_entry_cursor_down(entry);
elm_entry_cursor_up(entry);
</pre>

<p>It can also be moved one character to the left or right,</p>

<pre class="prettyprint">
elm_entry_cursor_prev(entry);
elm_entry_cursor_next(entry);
</pre>

<p>or set at a specific position (15th character, for example).</p>

<pre class="prettyprint">
elm_entry_cursor_pos_set(entry, 15);
</pre>

<p>We can start a selection at the current cursor position, move five characters to the right and end the selection.</p>

<pre class="prettyprint">
elm_entry_cursor_selection_begin(entry);

for(i = 0; i &lt; 5; i++)
{
&nbsp;&nbsp;&nbsp;elm_entry_cursor_next(entry);
}

elm_entry_cursor_selection_end(entry);
</pre>

<h3>Formatting Text</h3>

<p>Text within an entry can be formatted by using markups tags that are defined in the theme. The available markups in the default theme are</p>
  <ul class="ul">
   <li>&lt;br&gt;: Inserts a line break.</li>
   <li>&lt;ps&gt;: Inserts a paragraph separator. This is preferred over line breaks.</li>
   <li>&lt;tab&gt;: Inserts a tab.</li>
   <li>&lt;em&gt;...&lt;/em&gt;: Emphasis. Sets the oblique style for the enclosed text.</li>
   <li>&lt;b&gt;...&lt;/b&gt;: Sets the bold style for the enclosed text.</li>
   <li>&lt;link&gt;...&lt;/link&gt;: Underlines the enclosed text.</li>
   <li>&lt;hilight&gt;...&lt;/hilight&gt;: Highlights the enclosed text.</li>
  </ul>

<h3>Using Special Markups</h3>

<p>Special markups can be added within the text of the entry.</p>
  <ul class="ul">
   <li>&lt;a href = ..&gt;...&lt;/a&gt;: Anchors</li>
   <li>&lt;item size = .. vsize = .. href = ..&gt;...&lt;/item&gt;: Items</li>
  </ul>

<p>Anchors generate an &quot;anchor,clicked&quot; signal when the user clicks on them. The href attribute is used to identify the anchor. It also reacts to the &quot;anchor,in&quot; (mouse in), &quot;anchor,out&quot; (mouse out), &quot;anchor,down&quot; (mouse down), and &quot;anchor,up&quot; (mouse up) events.</p>

<p>The item markup provides a way to insert any Evas_Object in the text. The Evas_Object name has to be specified in the href attribute.</p>

<h3>Overriding Style</h3>

<p>To tweak the style of the text within the entry widget, it is possible to override parts of the theme style to the textblock object by using <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_push()</span>. This function pushes a new style on top of the user style stack that overrides the current style. Remove the style in the top of user style stack with <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_pop()</span>.</p>

<h3>Filtering Text</h3>

<p>Text within an entry can be filtered in size. Here we set the maximum number of characters allowed in the entry to eight.</p>

<pre class="prettyprint">
static Elm_Entry_Filter_Limit_Size limit_size = 
{
&nbsp;&nbsp;&nbsp;.max_char_count = 8,
&nbsp;&nbsp;&nbsp;.max_byte_count = 0
};

// Append a new callback to the list, this function will be called each time
// a text is inserted in the entry. Pass the limit_size struct previously
// created to set the maximum number of characters allowed to 8
 
elm_entry_markup_filter_append(entry, elm_entry_filter_limit_size,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;limit_size);
</pre>

<p>Content can be filtered by passing an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Filter_Accept_Set</span> structure. This structure contains the accepted characters and rejected characters. In the example below we reject the &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39; characters.</p>

<pre class="prettyprint">
static Elm_Entry_Filter_Accept_Set accept_set = 
{
&nbsp;&nbsp;&nbsp;.accepted = NULL,
&nbsp;&nbsp;&nbsp;.rejected = &quot;+*-/&quot;
};

elm_entry_markup_filter_append(entry, elm_entry_filter_accept_set,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;accept_set);
</pre>

<h3>File Load/Save</h3>

<p>The entry content can be saved to a file (<span style="font-family: Courier New,Courier,monospace">/tmp/test.txt</span>, for example).</p>

<pre class="prettyprint">
// Set the file in which the entry text will be saved. This function
// implicitly loads the existing file content 
elm_entry_file_set(entry, &quot;/tmp/test.txt&quot;, ELM_TEXT_FORMAT_MARKUP_UTF8);
</pre>

<p>Autosave is activated by default and changes are written back to the file after a short delay. This feature can be deactivated and we can manually save the content when needed.</p>

<pre class="prettyprint">
// Disable autosaving 
elm_entry_autosave_set(entry, EINA_FALSE);

// Trigger saving when needed 
elm_entry_file_save(entry);
</pre>

<h3>Using Entry Theme Content</h3>

<p>Two content parts of the default theme are available: &quot;icon&quot; and &quot;end&quot;. Here we set an icon in the &quot;end&quot; content part.</p>

<pre class="prettyprint">
Evas_Object *icon;

ic = elm_icon_add(entry);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(entry, &quot;end&quot;, icon);
</pre>

<h3>Using Entry Theme Texts</h3>

<p>The default theme allows the use of the following text parts:</p>
  <ul class="ul">
   <li>&quot;default&quot; - text of the entry</li>
   <li>&quot;guide&quot; - placeholder of the entry</li>
  </ul>

<p>This is how to set the placeholder text of the entry to &quot;Hello World&quot;.</p>

<pre class="prettyprint">
elm_object_part_text_set(entry, &quot;Hello World&quot;);
</pre>

<h3>Using Entry Callbacks</h3>

<p>Entry widget emits the following signals:</p>
  <ul class="ul">
   <li>&quot;aborted&quot;: The escape key is pressed on a single line entry.</li>
   <li>&quot;activated&quot;: The enter key is pressed on a single line entry.</li>
   <li>&quot;anchor,clicked&quot;: An anchor is clicked. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;anchor,down&quot;: Mouse button is pressed on an anchor. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;anchor,hover,opened&quot;: The anchor is clicked. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;anchor,in&quot;: Mouse cursor is moved into an anchor. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;anchor,out&quot;: Mouse cursor is moved out of an anchor. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;anchor,up&quot;: Mouse button is unpressed on an anchor. event_info points to an object of the type Elm_Entry_Anchor_Info.</li>
   <li>&quot;changed&quot;: The text within the entry is changed.</li>
   <li>&quot;changed,user&quot;: The text within the entry is changed because of user interaction. event_info points to an object of the type Edje_Entry_Change_Info.</li>
   <li>&quot;clicked&quot;: The entry is clicked (mouse press and release).</li>
   <li>&quot;clicked,double&quot;: The entry is double clicked.</li>
   <li>&quot;clicked,triple&quot;: The entry is triple clicked.</li>
   <li>&quot;cursor,changed&quot;: The cursor position is changed.</li>
   <li>&quot;cursor,changed,manual&quot;: The cursor position is changed manually.</li>
   <li>&quot;focused&quot;: The entry receives focus. event_info points to an object of the type Elm_Focus_Info.</li>
   <li>&quot;unfocused&quot;: The entry loses focus.</li>
   <li>&quot;language,changed&quot;: Program language is changed.</li>
   <li>&quot;longpressed&quot;: A mouse button is pressed and held for a couple of seconds.</li>
   <li>&quot;maxlength,reached&quot;: A maximum length is reached.</li>
   <li>&quot;preedit,changed&quot;: The preedit string is changed.</li>
   <li>&quot;press&quot;: A mouse button is pressed on the entry.</li>
   <li>&quot;redo,request&quot;: The request is redone.</li>
   <li>&quot;selection,changed&quot;: The current selection is changed.</li>
   <li>&quot;selection,cleared&quot;: The current selection is cleared.</li>
   <li>&quot;selection,copy&quot;: A copy of the selected text into the clipboard is requested.</li>
   <li>&quot;selection,cut&quot;: A cut of the selected text into the clipboard is requested.</li>
   <li>&quot;selection,paste&quot;: A paste of the clipboard contents is requested.</li>
   <li>&quot;selection,start&quot;: A selection is begun and no previous selection exists.</li>
   <li>&quot;text,set,done&quot;: The whole text is set to the entry.</li>
   <li>&quot;theme,changed&quot;: The theme is changed.</li>
   <li>&quot;undo,request&quot;: The request is undone.</li>
  </ul>

<p>For signals, where event_info has not been explicitly described, it is set to NULL.</p>

<p>As an example, we register a callback to the &quot;focused&quot; signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, focused_cb, data);
}

// Callback function for the &quot;focused&quot; signal
// This callback is called when the entry receive the focus
 
void focused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Entry focused\n&quot;);
} 
</pre>
  

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="flip" name="flip" class="items-tit-h2">Flip Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Flip hierarchy</p> 
<p style="text-align: center;"> <img alt="Flip hierarchy" src="../../images/flip_tree.png" /> </p> 
 
<p>The flip widget can hold two Evas_Objects and allows the user flip between them using several pre-defined animations.</p>

<h3>Adding Flip Widget</h3>

<p>This is how to create a flip widget.</p>

<pre class="prettyprint">
Evas_Object *flip, *parent, *content1, *content2;
flip = elm_flip_add(parent);
</pre>

<p>We can add content to the flip widget. content1 is set to the &quot;front&quot; content and content2 is set to the &quot;back&quot; mode.</p>

<pre class="prettyprint">
elm_object_part_content_set(flip, &quot;front&quot;, content1);
elm_object_part_content_set(flip, &quot;back&quot;, content2);
</pre>

<h3>Configuring Flip Animation</h3>

<p>Now we can run an flip animation.</p>

<pre class="prettyprint">
elm_flip_go(flip, ELM_FLIP_CUBE_UP);
</pre>

<p>This animation flips up the &quot;front&quot; content object as if it was on a side of a cube, letting the down facing side of the cube appear with the &quot;back&quot; content object. Several animations are available:</p>
  <ul class="ul">
   <li>ELM_FLIP_ROTATE_X_CENTER_AXIS - Rotate the content around a horizontal axis.</li>
   <li>ELM_FLIP_ROTATE_Y_CENTER_AXIS - Rotate the content around a vertical axis.</li>
   <li>ELM_FLIP_ROTATE_XZ_CENTER_AXIS - Rotate the content around a diagonal axis.</li>
   <li>ELM_FLIP_ROTATE_YZ_CENTER_AXIS - Rotate the content around a diagonal axis.</li>
   <li>ELM_FLIP_CUBE_LEFT - Rotate the content left as if it was on a side of a cube.</li>
   <li>ELM_FLIP_CUBE_RIGHT - Rotate the content right as if it was on a side of a cube.</li>
   <li>ELM_FLIP_CUBE_UP - Rotate the content up as if it was on a side of a cube.</li>
   <li>ELM_FLIP_CUBE_DOWN - Rotate the content down as if it was on a side of a cube.</li>
   <li>ELM_FLIP_PAGE_LEFT - Move the content to the left as if the flip was a book.</li>
   <li>ELM_FLIP_PAGE_RIGHT - Move the content to the right as if the flip was a book.</li>
   <li>ELM_FLIP_PAGE_UP - Move the content up as if the flip was a book.</li>
   <li>ELM_FLIP_PAGE_DOWN - Move the content down as if the flip was a book.</li>
  </ul>

<h3>Interacting With the User</h3>

<p>By default, the user cannot interact with the flip. We can set the interaction to be possible, but we have to choose which animation appears on the interaction (rotation has been selected in the following example).</p>

<pre class="prettyprint">
elm_flip_interaction_set(flip, ELM_FLIP_INTERACTION_ROTATE);
</pre>

<p>The available modes of interaction are</p>
  <ul class="ul">
   <li>ELM_FLIP_INTERACTION_NONE - No interaction is allowed</li>
   <li>ELM_FLIP_INTERACTION_ROTATE - Interaction causes a rotating animation</li>
   <li>ELM_FLIP_INTERACTION_CUBE - Interaction causes a cube animation</li>
   <li>ELM_FLIP_INTERACTION_PAGE - Interaction causes a page animation</li>
  </ul>

<p>We must also choose, which interaction directions are enabled (only right and left in the following example).</p>

<pre class="prettyprint">
elm_flip_interaction_direction_enabled_set(flip, ELM_FLIP_DIRECTION_LEFT, EINA_TRUE);
elm_flip_interaction_direction_enabled_set(flip, ELM_FLIP_DIRECTION_RIGHT, EINA_TRUE);
</pre>

<p>We can also set the amount of the flip that is sensitive to user interaction. In the following example, it is set to the entire flip (1) to make the flip easy to interact with.</p>

<pre class="prettyprint">
elm_flip_interaction_direction_hitsize_set(flip, ELM_FLIP_DIRECTION_LEFT, 1);
elm_flip_interaction_direction_hitsize_set(flip, ELM_FLIP_DIRECTION_RIGHT, 1);
</pre>

<h3>Using Flip Callbacks</h3>

<p>Two signals are emitted by the flip: one when an animation starts and one when it ends. For these signals, event_info parameter is NULL.</p>

<pre class="prettyprint">
&quot;animate,begin&quot; - A flip animation is started
&quot;animate,done&quot; - A flip animation is finished
</pre>

<p>We can register a callback on the &quot;animation,begin&quot; signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;animate,begin&quot;, anim_start_cb, data);
}

// Callback function for the &quot;animate,begin&quot; signal
// This callback is called when the flip animation starts
 
void anim_start_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Animation starts\n&quot;);
}</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="gengrid" name="gengrid" class="items-tit-h2">Gengrid Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Gengrid widget</p> 
<p style="text-align: center;"> <img alt="Gengrid widget" src="../../images/gengrid.png" /> </p> 
 
<p class="figure">Figure: Gengrid hierarchy</p> 
<p style="text-align: center;"> <img alt="Gengrid hierarchy" src="../../images/gengrid_tree.png" /> </p> 
 
<p>Gengrid widget is based on the same idea as the genlist. It aims at displaying objects on a grid layout and rendering only the visible ones. As for the genlist, callbacks are called at item creation or deletion.</p>

<p>This widget inherits from the layout widget and implements the scroller interface. Thus scroller and layout functions can be used with this widget.</p>

<p>A gengrid may display its items using horizontal or vertical layout. In the first layout, items are displayed in columns from top to bottom, starting a new column when the space for the current column is filled. In the second one, items are set in rows from left to right.</p>

<h3>Adding a Gengrid</h3>

<p>We can add a gengrid widget with the following code.</p>

<pre class="prettyprint">
Evas_Object *gengrid, *parent;
gengrid = elm_gengrid_add(parent);
</pre>

<h3>Gengrid Items</h3>

<p>A gengrid item is composed of 0 or more texts, 0 or more contents and 0 or more boolean states. The number of the text and content depends on the theme used for gengrid items. In the default Tizen gengrid item theme, items can have two content parts that can be set with the &quot;elm.swallow.icon elm.swallow.end&quot; part names.</p>

<h3>Creating and Deleting Items</h3>

<p>As with genlists, items are allocated and deleted on the go, while the user is scrolling the gengrid. Here we declare a <span style="font-family: Courier New,Courier,monospace">Elm_Gengrid_Item_Class</span> structure to inform the gengrid how to manage items.</p>

<pre class="prettyprint">
static Elm_Gengrid_Item_Class *gic = elm_gengrid_item_class_new();
gic->item_style = &quot;default&quot;;
gic->func.text_get = _grid_label_get;
gic->func.content_get = _grid_content_get;
gic->func.state_get = _grid_state_get;
gic->func.del = _grid_del;
</pre>

<p>The parameters of this structure will not be detailed here, because they are very similar to that of the genlist. Please refer to the genlist widget page for more detailed information.</p>

<h3>Managing Items</h3>

<p>As with genlists, items can be added with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_append()</span>, <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_prepend()</span>, <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_insert_before()</span> and <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_insert_after()</span> functions. With the gengrid, there is no need to pass the &quot;type&quot; parameters. They can be cleared with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_clear()</span> function.</p>

<p>We can set the multiselection mode on.</p>

<pre class="prettyprint">
elm_gengrid_multi_select_set(gengrid, EINA_TRUE);
</pre>

<p>When this mode is on, selected items are retrieved with <span style="font-family: Courier New,Courier,monospace">elm_gengrid_selected_items_get()</span>. It returns a list of all the selected items.</p>

<p>When the content of an item changes, we can call <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_update()</span> to ask the gengrid to update this item&#39;s content.</p>

<p>We can also manually select or disable some items with <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_selected_set()</span> and <span style="font-family: Courier New,Courier,monospace">elm_object_item_disabled_set()</span>.</p>

<h3>Using Gengrid Callbacks</h3>

<p>The gengrid widget emits the following signals:</p>
  <ul class="ul">
   <li>&quot;activated&quot; - The user has double-clicked or pressed (enter | return | spacebar) on an item. The event_info parameter is the gengrid item that is activated.</li>
   <li>&quot;clicked,double&quot; - The user has double-clicked an item. The event_info parameter is the gengrid item that is double-clicked.</li>
   <li>&quot;longpressed&quot; - The item is pressed for a certain amount of time. By default it is one second.</li>
   <li>&quot;selected&quot; - The user has selected an item. The event_info parameter is the gengrid item that is selected.</li>
   <li>&quot;unselected&quot; - The user has unselected an item. The event_info parameter is the gengrid item that is unselected.</li>
   <li>&quot;realized&quot; - The item in the gengrid has its implementing Evas object instantiated, de facto. event_info is the gengrid item that is created. The object may be deleted at any time, so it is strongly advisable not to use the object pointer returned from <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_object_get()</span>, because it may point to freed objects.</li>
   <li>&quot;unrealized&quot; - The implementing Evas object for this item is deleted. event_info is the gengrid item that is deleted.</li>
   <li>&quot;changed&quot; - An item is added, removed, resized or moved and the gengrid is resized or has &quot;horizontal&quot; property changes.</li>
   <li>&quot;scroll,anim,start&quot; - Scrolling animation starts.</li>
   <li>&quot;scroll,anim,stop&quot; - Scrolling animation stops.</li>
   <li>&quot;drag,start,up&quot; - The item in the gengrid is dragged (not scrolled) up.</li>
   <li>&quot;drag,start,down&quot; - The item in the gengrid has dragged (not scrolled) down.</li>
   <li>&quot;drag,start,left&quot; - The item in the gengrid is dragged (not scrolled) left.</li>
   <li>&quot;drag,start,right&quot; - The item in the gengrid is dragged (not scrolled) right.</li>
   <li>&quot;drag,stop&quot; - The item in the gengrid stops being dragged.</li>
   <li>&quot;drag&quot; - The item in the gengrid is dragged.</li>
   <li>&quot;scroll&quot; - The content is scrolled (moved).</li>
   <li>&quot;scroll,drag,start&quot; - Dragging the content starts.</li>
   <li>&quot;scroll,drag,stop&quot; - Dragging the content stops.</li>
   <li>&quot;edge,top&quot; - The gengrid is scrolled to the top edge.</li>
   <li>&quot;edge,bottom&quot; - The gengrid is scrolled to the bottom edge.</li>
   <li>&quot;edge,left&quot; - The gengrid is scrolled to the left edge.</li>
   <li>&quot;edge,right&quot; - The gengrid is scrolled to the right edge.</li>
  </ul>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="genlist" name="genlist" class="items-tit-h2">Genlist Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Genlist widget</p> 
<p style="text-align: center;"> <img alt="Genlist widget" src="../../images/genlist.png" /> </p> 

<p class="figure">Figure: Genlist hierarchy</p> 
<p style="text-align: center;"> <img alt="Genlist hierarchy" src="../../images/genlist_htree.png" /> </p> 

<p>Genlist is a widget that displays a scrollable list of items. It allows a lot of entries while being fast and has a low memory footprint (only the visible items are allocated in the memory).</p>

<p>For more information, see the <a href="../../../../org.tizen.tutorials/html/native/ui/genlist_tutorial_n.htm">Genlist Tutorial</a>.</p>

<h3>Genlist Item Style</h3>

<p>An item can have 0 or more texts, 0 or more contents, and 0 or more boolean states. This is defined in the Edje item theme style. Genlist looks for data items named respectively &quot;labels&quot;, &quot;contents&quot;, and &quot;states&quot; in the Edje file. The &quot;default&quot; item style provides one text part (&quot;elm.text&quot;), two content parts (&quot;elm.swalllow.icon&quot; and &quot;elm.swallow.end&quot;) and no state parts.</p>

<p>The following item styles are available:</p>
  <ul class="ul">
	<li>&quot;default&quot;</li>
	<li>&quot;full&quot;</li>
	<li>&quot;one_icon&quot;</li>
	<li>&quot;end_icon&quot;</li>
	<li>&quot;group_index&quot;</li>
	<li>&quot;double_label&quot;</li>
  </ul>

<p>Here are several examples of item styles.</p>

<p class="figure">Figure: Default item style</p> 
<p style="text-align: center;"> <img alt="Default item style" src="../../images/gl-default.png" /> </p> 

<p class="figure">Figure: end_icon item style</p> 
<p style="text-align: center;"> <img alt="end_icon item style" src="../../images/gl-end-icon.png" /> </p> 

<p class="figure">Figure: double_label item style</p> 
<p style="text-align: center;"> <img alt="double_label item style" src="../../images/gl-double-label.png" /> </p> 

<p>Refer to the <a href="widget_preferences_n.htm#customize">Customizing Widgets</a> for creating a new genlist item style.</p>

<h3>Adding a Genlist</h3>

<p>Genlist widget is added with the <span style="font-family: Courier New,Courier,monospace">elm_genlist_add()</span> function.</p>

<pre class="prettyprint">
Evas_Object *genlist, *parent;
genlist = elm_genlist_add(parent);
</pre>

<h3>Creating And Deleting Items</h3>

<p>To save up memory, genlist allocates and deletes items on the go, while the user is scrolling the list. To enable that, the user creates and fills a <span style="font-family: Courier New,Courier,monospace">Elm_Genlist_Item_Class</span> structure that informs the genlist widget which callbacks to call when an item is created or deleted.</p>

<pre class="prettyprint">
Elm_Genlist_Item_Class *itc = elm_genlist_item_class_new();

itc-&gt;item_style = &quot;default&quot;;
itc-&gt;decorate_item_style = NULL;
itc-&gt;decorate_all_item_style = NULL;
itc-&gt;func.text_get = _item_label_get;
itc-&gt;func.content_get = _item_content_get;
itc-&gt;func.state_get = _item_state_get;
itc-&gt;func.del = _item_del;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">item_style</span>, <span style="font-family: Courier New,Courier,monospace">decorate_item_style</span>, and <span style="font-family: Courier New,Courier,monospace">decorate_all_item_style</span> attributes define the names of the item style, the decorate mode item style and the decorate all item style.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">func</span> structure contains pointers to functions that are called when an item is going to be created or deleted. All of them receive a data parameter that points to the same data passed to the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> and related item creation functions, and an obj parameter that points to the genlist object itself.</p>
  <ul class="ul">
   <li>text_get
   <p>This function receives a PART parameter that is the name string of one of the existing text parts in the Edje group implementing the item&#39;s theme. It has to return a string (duplicated with the <span style="font-family: Courier New,Courier,monospace">strdup()</span> function) corresponding to the PART parameter. The caller is in charge of freeing the string when done.</p></li>

   <li>content_get
   <p>The PART parameter is the name string of one of the existing swallow parts in the Edje group. When no content is desired it must return NULL, or otherwise, a valid object handle. The object is deleted by the genlist on its deletion or when the item is &quot;unrealized&quot;.</p></li>

   <li>state_get
   <p>The PART parameter is the name string of one of the state parts in the Edje group implementing the item&#39;s theme. It returns EINA_FALSE for false/off or EINA_TRUE for true/on. The default is false. Genlists emit a signal to the PART parameter&#39;s theming Edje object with &quot;elm,state,xxx,active&quot; as &quot;emission&quot; and &quot;elm&quot; as &quot;source&quot; argument, when the state is true. xxx is the name of the (state) part.</p></li>

   <li>del
   <p>This function is called when the genlist item is deleted. It deletes any data that is allocated at the item creation.</p></li>
</ul>

<h3>Managing Items</h3>

<p>To add an item, several functions can be used. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> adds an item to the end of the list, or if there is a parent list, to the end of all the child items of the parent list. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prepend()</span> is otherwise the same but adds to the beginning of the list or children lists. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_insert_before()</span> inserts an item before the indicated item and <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_insert_after()</span> inserts an item after the indicated item.</p>

<p>The previous functions take a &quot;type&quot; parameter that can be one of the following.</p>
  <ul class="ul">
   <li>ELM_GENLIST_ITEM_NONE</li>
   <li>ELM_GENLIST_ITEM_TREE</li>
   <li>ELM_GENLIST_ITEM_GROUP</li>
  </ul>

<p>If ELM_GENLIST_ITEM_TREE is set, this item is displayed as being able to expand and have child items. If ELM_GENLIST_ITEM_GROUP is set, this item is a group index item that is displayed at the top until the next group appears.</p>

<p class="figure">Figure: Genlist tree</p> 
<p style="text-align: center;"> <img alt="Genlist tree" src="../../images/genlist_tree.png" /> </p> 

<p>The application clears the list with <span style="font-family: Courier New,Courier,monospace">elm_genlist_clear()</span>, which deletes all the items in the list. <span style="font-family: Courier New,Courier,monospace">elm_object_item_del()</span> deletes a specific item. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_subitems_clear()</span> clears all items that are children of the indicated parent item.</p>

<p>To help inspect list items, move to the item at the top of the list with <span style="font-family: Courier New,Courier,monospace">elm_genlist_first_item_get()</span>, which returns the item pointer. <span style="font-family: Courier New,Courier,monospace">elm_genlist_last_item_get()</span> moves to the item at the end of the list. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_next_get()</span> and <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prev_get()</span> move to the next and previous items relative to the indicated item. Using these calls you can go through the entire item list or tree.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">As a tree, the items are flattened on the list, so <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_parent_get()</span> gives you the name of the parent item (even to skip them if needed).</td> 
    </tr> 
   </tbody> 
  </table>  

<p><span style="font-family: Courier New,Courier,monospace">elm_genlist_item_show()</span> scrolls the scroller to show the desired item as visible. </p>
<p><span style="font-family: Courier New,Courier,monospace">elm_object_item_data_get()</span> returns the data pointer set by the item creation functions.</p>

<p>If an item changes (state, boolean, text or content change), use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_update()</span> for the genlist to update the item. Genlist will re-realize the item and call the functions in the _Elm_Genlist_Item_Class for it.</p>

<h3>Selection</h3>

<p>Items are manually selected or unselected with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_selected_set()</span> or disabled with <span style="font-family: Courier New,Courier,monospace">elm_object_item_disabled_set()</span>. In case there is a tree or a group item, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> function is used to expand or contract the item.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Calling this function does not show or hide any child of an item (if it is a parent). You must manually delete and create them on the callbacks of the &quot;expanded&quot; or &quot;contracted&quot; signals.</td> 
    </tr> 
   </tbody> 
  </table>  

<p>By default, the genlist is in single-selection mode: only one item can be selected at a time. You can use <span style="font-family: Courier New,Courier,monospace">elm_genlist_multi_select_set()</span> to select multiple items. In single-selection mode, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_selected_item_get()</span> function can be called to retrieve the selected item. If several items are selected, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_selected_items_get()</span> returns a list of the current selected items.</p>

<p>In the picture below, there is a genlist in multi-selection mode with two items selected (#4 and #5) and one item disabled (#2).</p>

<p class="figure">Figure: Genlist widget</p> 
<p style="text-align: center;"> <img alt="Genlist widget" src="../../images/genlist_multi.png"/> </p> 

<h3>Using Genlist Callbacks</h3>

<p>The genlist widget emits the following signals:</p>
  <ul class="ul"> 
   <li>&quot;activated&quot;: The user has double-clicked or pressed (enter | return | spacebar) on an item. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;clicked,double&quot;: The user has double-clicked an item. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;selected&quot;: The user selects an item. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;unselected&quot;: The user unselects an item. event_info in the callback function points at an object of type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;expanded&quot;: The item is to be expanded with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span>. This callback fills in the child items. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;contracted&quot;: The item is to be contracted with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span>. This callback deletes the child items. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;expand,request&quot;: The user wants to expand a tree branch item. The callback decides if the item can expand (if it has any children) and calls <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> to set the state. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;contract,request&quot;: The user wants to contract a tree branch item. The callback decides if the item can contract (if it has any children) and calls <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> to set the state. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;realized&quot;: The item is created as a real evas object. event_info in the callback function points at an object of the type Elm_Object_Item, that contains the activated item.</li> 
   <li>&quot;unrealized&quot;: An item is going to be unrealized. Content objects provided are deleted and the item object is deleted or put into a floating cache. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag,start,up&quot;: The item in the list is dragged (not scrolled) up. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag,start,down&quot;: The item in the list is dragged (not scrolled) down. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag,start,left&quot;: The item in the list is dragged (not scrolled) left. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag,start,right&quot;: The item in the list is dragged (not scrolled) right. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag,stop&quot;: The item in the list has stopped being dragged. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;drag&quot;: The item in the list is being dragged. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;longpressed&quot;: The item is pressed for a certain amount of time. The default specified time is one second. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;scroll,anim,start&quot;: The scrolling animation is started. event_info is NULL.</li> 
   <li>&quot;scroll,anim,stop&quot;: The scrolling animation is stopped. event_info is NULL.</li> 
   <li>&quot;scroll,drag,start&quot;: Dragging the content is started. event_info is NULL.</li> 
   <li>&quot;scroll,drag,stop&quot;: Dragging the content is stopped. event_info is NULL.</li> 
   <li>&quot;edge,top&quot;: The genlist is scrolled to the top edge. event_info is NULL.</li> 
   <li>&quot;edge,bottom&quot;: The genlist is scrolled to the bottom edge. event_info is NULL.</li> 
   <li>&quot;edge,left&quot;: The genlist is scrolled to the left edge. event_info is NULL.</li> 
   <li>&quot;edge,right&quot;: The genlist is scrolled to the right edge. event_info is NULL.</li> 
   <li>&quot;multi,swipe,left&quot;: The genlist is multi-touch swiped left. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;multi,swipe,right&quot;: The genlist is multi-touch swiped right. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;multi,swipe,up&quot;: The genlist is multi-touch swiped up. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li> 
   <li>&quot;multi,swipe,down&quot;: The genlist is multi-touch swiped down. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;multi,pinch,out&quot;: The genlist is multi-touch pinched out. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;multi,pinch,in&quot;: The genlist is multi-touch pinched in. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;swipe&quot;: The genlist is swiped. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;moved&quot;: A genlist item is moved in the reorder mode. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;moved,after&quot;: A genlist item is moved after another item in the reorder mode. To access the relative previous item, use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prev_get()</span>. This signal is called along with the &quot;moved&quot; signal. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;moved,before&quot;: A genlist item is moved before another item in the reorder mode. To access the relative previous item, use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_next_get()</span>. This signal is called along with the &quot;moved&quot; signal. event_info in the callback function points at an object of the type Elm_Object_Item that contains the activated item.</li>
   <li>&quot;language,changed&quot;: The program&#39;s language is changed. event_info is NULL.</li>
   <li>&quot;tree,effect,finished&quot;: A genlist tree effect is finished. event_info is NULL.</li>
  </ul>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="glview" name="glview" class="items-tit-h2">GLView Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

      <p class="figure">Figure: GLView gears example</p> 
  <p style="text-align:center;"><img alt="GLView gears example" src="../../images/glview.png" /></p> 
  
      <p class="figure">Figure: GLView hierarchy</p> 
  <p style="text-align:center;"><img alt="GLView hierarchy" src="../../images/glview_tree.png" /></p>


<p> This widget renders OpenGL in an elementary object, which hides Evas GL complexity. For more information, see <a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES</a>.</p>

<h3>Adding a GLView Widget</h3>

<p>Create a GLView widget with the <span style="font-family: Courier New,Courier,monospace">elm_glview_add()</span> function.</p>

<pre class="prettyprint">Evas_Object *glview, *parent;

glview = elm_glview_add(parent);
</pre>

<p>In this example, the size of the GLView is set to 200x200 pixels.</p>

<pre class="prettyprint">elm_glview_size_set(glview, 200, 200);
</pre>

<h3>Using GLView API</h3>

<p>We can configure the GLView rendering mode by activating the following rendering modes:</p>

<ul class="ul">
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_ALPHA</span>: Alpha channel rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_DEPTH</span>: Depth buffer rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_STENCIL</span>: Stencil buffer rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_DIRECT</span>: Direct rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_CLIENT_SIDE_ROTATION</span>: The client handles the GL view rotation if direct rendering is enabled</li>
</ul>

<p>In this example, we enable alpha channel and depth buffer rendering mode.</p>
<pre class="prettyprint">
elm_glview_mode_set(glview, ELM_GLVIEW_ALPHA | ELM_GLVIEW_DEPTH);
</pre>

<p>We decide what to do with the GL surface when the GLView widget is resized.</p>

<pre class="prettyprint">
elm_glview_resize_policy_set(glview, ELM_GLVIEW_RESIZE_POLICY_RECREATE);
</pre>

<p>The GL surface is destroyed and recreated to the new size (default function). The resize policy can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RESIZE_POLICY_SCALE</span>. In that case, only the image object is scaled, not the underlying GL surface.</p>

<p>This is how to set the GLView rendering policy.</p>

<pre class="prettyprint">
elm_glview_render_policy_set(glview, ELM_GLVIEW_RENDER_POLICY_ALWAYS);
</pre>

<p>The glview object is always redrawn during the rendering loop. It can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RENDER_POLICY_ON_DEMAND</span> (default function), where glview widget is redrawn only when it is visible.</p>

<p>We can register callbacks:</p>

<pre class="prettyprint">elm_glview_init_func_set(glview, _init_gl_cb);
elm_glview_del_func_set(glview, _del_gl_cb);
elm_glview_resize_func_set(glview, _resize_gl_cb);
elm_glview_render_func_set(glview, _draw_gl_cb);
</pre>

<p><span style="font-family: Courier New,Courier,monospace">elm_glview_init_func_set()</span> registers an init callback that is called at the GLView object creation.</p>
<p><span style="font-family: Courier New,Courier,monospace">elm_glview_del_func_set()</span> registers a del function that is called when the GLView object is deleted.</p>
<p><span style="font-family: Courier New,Courier,monospace">elm_glview_resize_func_set()</span> registers the resize function that is called during the rendering loop when the GLView object is resized.</p>
<p><span style="font-family: Courier New,Courier,monospace">elm_glview_render_func_set()</span> registers the render function that is called when the GLView object must be redrawn.</p>

<h3>Using GLView Callbacks</h3>

<p>GLView widget emits the following signals:</p>

<ul class="ul">
<li>&quot;focused&quot; The Glview widget is focused. The event_info parameter points at an object of the type Elm_Focus_Info.</li>
<li>&quot;unfocused&quot; The GLView object is unfocused.</li>
</ul>

<p>This is how to register a callback.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(glview, &quot;focused&quot;, focused_cb, data);
}

// Callback function for the &quot;focused&quot; signal
// This callback is called when the GLView is focused
void focused_cb(void *data, Evas_Object *obj, void  *event_info)
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Focus_Info *fi = event_info;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;GLView is focused\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="icon" name="icon" class="items-tit-h2">Icon Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Icon widget</p> 
<p style="text-align: center;"> <img alt="Icon widget" src="../../images/icon.png" /> </p> 
 
<p class="figure">Figure: Icon hierarchy</p> 
<p style="text-align: center;"> <img alt="Icon hierarchy" src="../../images/icon_tree.png" /> </p> 
  
<p>The icon widget inherits from the image widget. It is used to display images in an icon context.</p>

<h3>Adding an Icon</h3>

<p>We can create an icon and set it as a freedesktop.org &quot;Home&quot; standard icon.</p>

<pre class="prettyprint">
Evas_Object *icon, *parent;
icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;Home&quot;);
</pre>

<h3>Changing Image File</h3>

<p>We can change the image by using an image in the filesystem (for example, /tmp/Home.png),</p>

<pre class="prettyprint">
elm_image_file_set(icon, &quot;/tmp/Home.png&quot;, NULL);
</pre>

<p>or a group in an Edje file (for example, /tmp/Home.edj).</p>

<pre class="prettyprint">
elm_image_file_set(icon, &quot;/tmp/Home.edj&quot;, &quot;elm/icon/Home/default&quot;);
</pre>

<p>A thumbnail can be generated and cached for future use. (For this, you need the Ethumb library support.)</p>

<pre class="prettyprint">
elm_icon_thumb_set(icon, &quot;/tmp/Home.png&quot;, NULL);
</pre>

<p>This function sets the file in the icon and enables the use of a cached thumbnail if it already exists. Otherwise, it creates a new thumbnail and caches it for future use.</p>

<h3>Using Icon Callbacks</h3>

<p>The icon widget emits the following signals:</p>
  <ul class="ul">
   <li>&quot;thumb,done&quot; - <span style="font-family: Courier New,Courier,monospace">elm_icon_thumb_set()</span> is completed with success.</li>
   <li>&quot;thumb,error&quot; - <span style="font-family: Courier New,Courier,monospace">elm_icon_thumb_set()</span> fails.</li>
  </ul>

<p>In both cases, event_info is NULL;</p>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="image" name="image" class="items-tit-h2">Image Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

<p class="figure">Figure: Image widget</p> 
<p style="text-align: center;"> <img alt="Image widget" src="../../images/image.png" /> </p>   

<p class="figure">Figure: Image hierarchy</p> 
<p style="text-align: center;"> <img alt="Image hierarchy" src="../../images/image_tree.png" /> </p>   

<p>The image widget can load and display an image from a disk file or a memory region.</p>

<h3>Adding an Image Widget</h3>

<p>This object is created with <span style="font-family: Courier New,Courier,monospace">elm_image_add()</span>.</p>

<pre class="prettyprint">
Evas_Object *image, *parent;
image = elm_image_add(parent);
</pre>

<h3>Configuring Image Widget</h3>

<p>Various properties of the image can be tuned. First, we disable elementary scaling so that the image does not scale but resizes on both directions.</p>

<pre class="prettyprint">
elm_image_no_scale_set(image, EINA_TRUE);
elm_image_resizable_set(image, EINA_TRUE, EINA_TRUE);
</pre>

<p>When scaling images, the smooth scaling algorithm can be used. It provides a better quality image but is slower than the default algorithm.</p>

<pre class="prettyprint">
elm_image_smooth_set(image, EINA_TRUE);
</pre>

<p>Preloading is used to load images without blocking the user interface. This preserves the reactivity of the user experience. The image is loaded in a thread. It can be disabled if desired.</p>

<pre class="prettyprint">
elm_image_preload_disabled_set(image, EINA_TRUE);
</pre>

<p>The image can be rotated or flipped. Here we rotate our image 180 degrees.</p>

<pre class="prettyprint">
elm_image_orient_set(image, ELM_IMAGE_ROTATE_180);
</pre>

<p>The following orientations are available:</p>
  <ul class="ul">
   <li>ELM_IMAGE_ORIENT_0: No orientation change</li>
   <li>ELM_IMAGE_ROTATE_90: Rotate the image 90 degrees clockwise</li>
   <li>ELM_IMAGE_ROTATE_180: Rotate the image 180 degrees clockwise</li>   
   <li>ELM_IMAGE_ROTATE_270: Rotate the image 90 degrees counter-clockwise</li>
   <li>ELM_IMAGE_FLIP_HORIZONTAL: Flip the image horizontally</li>
   <li>ELM_IMAGE_FLIP_VERTICAL: Flip the image vertically</li>
   <li>ELM_IMAGE_FLIP_TRANSPOSE: Flip the image along the bottom-left to top-right line</li>
   <li>ELM_IMAGE_FLIP_TRANSVERSE: Flip the image along the top-left to bottom-right line</li>
  </ul>
  
<p>If we want to keep the original aspect ration when resizing the image, we must define how the image fits into the object&#39;s area.</p>

<pre class="prettyprint">
// Tell the image to keep original aspect ratio 
elm_image_aspect_fixed_set(image, EINA_TRUE);
// Then let the image fit the entire object 
elm_image_fill_outside_set(image, EINA_TRUE);
</pre>

<p>In this configuration, part of the image may go outside the object. If <span style="font-family: Courier New,Courier,monospace">elm_image_fill_outside_set</span> is set to EINA_FALSE, the image stays inside the limits of the parent object.</p>

<h3>Using Image Callbacks</h3>

<p>The image widget emits the signals below:</p>
  <ul class="ul">
   <li>&quot;drop&quot;: The user drops an image typed object onto the object in question - the event info argument is the path to that image file</li>
   <li>&quot;clicked&quot;: The user clicks the image. event_info is NULL.</li>
  </ul>

<p>Here is how to register a callback when a user clicks on the image:</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(image, &quot;clicked&quot;, clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when the image is clicked
 
void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Image clicked\n&quot;);
}
</pre>  

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="index" name="index" class="items-tit-h2">Index Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con"> 
  
<p class="figure">Figure: Index widget</p> 
<p style="text-align: center;"> <img alt="Index widget" src="../../images/index.png" /> </p> 
 
<p class="figure">Figure: Index hierarchy</p> 
<p style="text-align: center;"> <img alt="Index hierarchy" src="../../images/index_tree.png" /> </p> 
 
<p>An index widget gives you an index for fast access to whichever group of other UI items you have. By default hidden, the index appears when the user clicks over its reserved area in the canvas. In the default theme, it is a one finger wide area on the right side of the index widget&#39;s container. Generally, an index is used together with lists, generic lists or generic grids.</p>

<h3>Adding an Index Widget</h3>

<p>Call <span style="font-family: Courier New,Courier,monospace">elm_index_add()</span> to create a new index widget.</p>

<pre class="prettyprint">
Evas_Object *index, *parent;
index = elm_index_add(parent);
</pre>

<h3>Adding Items</h3>

<p>Here we add the listitem object at the letter &quot;A&quot;, calling the smart callback <span style="font-family: Courier New,Courier,monospace">it_select_cb()</span> when this item is selected.</p>

<pre class="prettyprint">
Elm_Object_Item *list_item1, *list_item2;
elm_index_item_append(index, &quot;A&quot;, it_select_cb, list_item1);
</pre>

<p>This is how to define the smart callback.</p>

<pre class="prettyprint">
// Callback function called when the list_item1 object
// is selected
void it_select_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Item1 selected\n&quot;);
}
</pre>

<p>In the previous case, the indexes are appended to the existing ones. It is also possible to prepend index items with <span style="font-family: Courier New,Courier,monospace">elm_index_item_prepend()</span>.</p>

<h3>Sorting Index Items</h3>

<p>We can insert index items using a sorting function. Indexes can be sorted, for example, by alphabetic order.</p>

<p>We must write a compare function that returns a positive int, 0 or a negative int when the data2 item parameter is respectively greater than, equal to or lower than the data1 parameter.</p>

<pre class="prettyprint">
static int
_index_icmp(const void *data1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *data2)
{
&nbsp;&nbsp;&nbsp;int result;

&nbsp;&nbsp;&nbsp;// Code that does the item comparison will be written here

&nbsp;&nbsp;&nbsp;return result;
}
</pre>

<p>We add a new item at the &quot;B&quot; index using the compare function to sort the indexes.</p>

<pre class="prettyprint">
elm_index_item_sorted_insert(index, &quot;B&quot;, NULL, list_item2, _index_icmp, NULL);
</pre>

<h3>Using Index Callbacks</h3>

<p>The index widget emits the following signals:</p>
  <ul class="ul">
   <li>&quot;changed&quot; - The selected index item changes. event_info is the selected item&#39;s data pointer.</li>
   <li>&quot;delay,changed&quot; - The selected index item changes, but after a small idling period. event_info is the selected item&#39;s data pointer.</li>
   <li>&quot;selected&quot; - The user releases a mouse button and selects an item. event_info is the selected item&#39;s data pointer.</li>
   <li>&quot;level,up&quot; - The user moves a finger from the first level to the second level.</li>
   <li>&quot;level,down&quot; - The user moves a finger from the second level to the first level.</li>
  </ul>

<p>When the user selects an item in the index, the &quot;selected&quot; signal is emitted. The developer can then implement the associated callback to do the appropriate action (to show a given area or child object depending on the index item selected, for example). Here is an example of such a callback.</p>

<pre class="prettyprint">
static void
_index_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *lit = event_info;

&nbsp;&nbsp;&nbsp;// Code that does the desired action
}
</pre>

<p>Then we register this callback to the &quot;selected&quot; signal.</p>

<pre class="prettyprint">
evas_object_smart_callback_add(index, &quot;selected&quot;, _index_selected_cb, NULL);
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="label" name="label" class="items-tit-h2">Label Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Label widget</p> 
<p style="text-align: center;"> <img alt="Label widget" src="../../images/label.png" /> </p> 
 
<p class="figure">Figure: Label hierarchy</p> 
<p style="text-align: center;"> <img alt="Label hierarchy" src="../../images/label_tree.png" /> </p> 

<p>The label widget displays text with simple html-like markup.</p>

<h3>Adding a Label</h3>

<p>To add a label and set the text in it, use the following functions.</p>

<pre class="prettyprint">
Evas_Object *label = elm_label_add(win);

elm_object_text_set(label, &quot;Some long text for our label, that is not so
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long&quot;);
</pre>

<h3>Using Label Styles</h3>

<p>Label displays the text with several predefined styles.</p>
  <ul class="ul"> 
   <li>default: No animation</li> 
   <li>marker: The text is centered and bolded.</li> 
   <li>slide_long: The text appears from the right of the screen and slides until it disappears in the left of the screen(reappearing on the right again).</li> 
   <li>slide_short: The text appears in the left of the label and slides to the right to show the overflow. When all of the text has been shown the position is reset.</li> 
   <li>slide_bounce: The text appears in the left of the label and slides to the right to show the overflow. When all of the text has been shown, the animation reverses, moving the text to the left.</li>   
  </ul>

<p>Here we set the style to &quot;slide_long&quot;.</p>

<pre class="prettyprint">
elm_object_style_set(label, &quot;slide_long&quot;);
</pre>

<h3>Configuring the Label</h3>

<p>The duration of the animation and the slide mode can be set.</p>

<pre class="prettyprint">
elm_label_slide_duration_set(label, 3);
elm_label_slide_mode_set(label, ELM_LABEL_SLIDE_MODE_ALWAYS);
</pre>

<p>The style can be modified.</p>

<pre class="prettyprint">
elm_object_style_set(label, &quot;slide_bounce&quot;);
</pre>

<h3>Using Label Callbacks</h3>

<p>This widget emits the following signals:</p>
  <ul class="ul">
   <li>&quot;language,changed&quot;: The program&#39;s language changes.</li>
   <li>&quot;slide,end&quot;: The slide reaches the end.</li>
   <li>&quot;anchor,clicked&quot;: The anchor is clicked. event_info points to an object of the type Elm_Label_Anchor_Info.</li>
   <li>&quot;anchor,mouse,down&quot; event_info points to an object of the type Elm_Label_Anchor_Info.</li>
   <li>&quot;anchor,mouse,up&quot; event_info points to an object of the type Elm_Label_Anchor_Info.</li>
  </ul>
  
<p>Here we register a callback on the &quot;slide,end&quot; signal.</p>

<pre class="prettyprint">
{

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(label, &quot;slide,end&quot;, slide_end_cb, data);

}

// Callback function for the &quot;slide,end&quot; signal
// This callback is called when the label slide reaches the end

void slide_end_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Slide has reach the end.\n&quot;);
}
</pre>

			</div>
		</li>
		<li>
			<div class="devicespec-tit">
 <h2 id="list" name="list" class="items-tit-h2">List Widget</h2>
<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
  </div>
			<div class="devicespec-con"> 
 <p class="figure">Figure: List widget</p> 
<p style="text-align: center;"> <img alt="List widget" src="../../images/list.png" /> </p> 
  
  <p class="figure">Figure: List hierarchy</p> 
<p style="text-align: center;"> <img alt="List hierarchy" src="../../images/list_tree.png" /> </p> 
 
  
 <p>This widget is a very simple type of a list widget. It is not to be used to manage a lot of items. For that, genlists are a better option. </p>

 <p>The list items can contain a text and two contents (&quot;start&quot;, and &quot;end&quot;). These are set with the <span style="font-family: Courier New,Courier,monospace">elm_object_item_*()</span> functions. </p>

<h3>Adding a List Widget</h3>

<pre class="prettyprint">
Evas_Object *list, *parent;

// Create a list 
list = elm_list_add(parent);
</pre>

<h3>Using the List</h3>

 <p>This widget implements the scrollable interface, so the scroller widget functions can be used on it. For example, if you want to change the bounce property of the scroller or the scrolling policy:</p>

<pre class="prettyprint">
Evas_Object *list;

// Change the scroller policy to fix the scroll only vertically
elm_scroller_policy_set(list, ELM_SCROLLER_POLICY_ON, ELM_SCROLLER_POLICY_OFF);
// Enable bounce effect when the list reaches the upper and lower limits 
elm_scroller_bounce_set(list, EINA_TRUE, EINA_TRUE);
</pre>

 <p>The <span style="font-family: Courier New,Courier,monospace">elm_list_multi_select_set()</span> function can be called to enable multi-selection of items. Each time an item is clicked, the state changes to &quot;selected&quot;.</p>

<pre class="prettyprint">
Evas_Object *list;

// Activate multi selection 
elm_list_multi_select_set(list, EINA_TRUE);
</pre>

<h3>Adding Item to the List</h3>

 <p>Items are added with <span style="font-family: Courier New,Courier,monospace">elm_list_item_append()</span> or <span style="font-family: Courier New,Courier,monospace">elm_list_item_prepend()</span>. Here an example of adding ten items with text and one icon on the front: The last two arguments are the callback function when the created item is clicked and the data passed to the callback function.</p>

<pre class="prettyprint">
Evas_Object *list;
int i;

// This function is called when the list item is selected 
static void _selected_item_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *list_it = elm_list_selected_item_get(obj);
&nbsp;&nbsp;&nbsp;Eina_Bool selected = elm_list_item_selected_get(list_it);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;item is %s\n&quot;, selected? &quot;selected&quot;: &quot;unselected&quot;);
}

for (i = 0; i &lt; 10; i++)
{
&nbsp;&nbsp;&nbsp;Evas_Object *ic;
&nbsp;&nbsp;&nbsp;char tmp[8];
&nbsp;&nbsp;&nbsp;snprintf(tmp, sizeof(tmp), &quot;Item %02d&quot;, i);
&nbsp;&nbsp;&nbsp;// Create an icon 
&nbsp;&nbsp;&nbsp;ic = elm_icon_add(win);
&nbsp;&nbsp;&nbsp;// Set the file to the icon file 
&nbsp;&nbsp;&nbsp;elm_image_file_set(ic, &quot;path/to/file&quot;, NULL);
&nbsp;&nbsp;&nbsp;// Add item to the list 
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, tmp, ic, NULL, _selected_item_cb, NULL);
}

</pre>
 
<h3>Changing Text Or Icon of an Item</h3>

<p>If you want to change the state of an item, you can do it by using all the functions relative to Elm_Object_Item. Each item of the list contains two evas_object. Give those as the third and the fourth arguments when you append or prepend the item in the list. Those evas objects are changed with <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_content_set</span>. The first object is referenced as the &quot;start&quot; object in the theme, whereas the second one is referenced as the &quot;end&quot; object. Give these names when you use the <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_content_set</span>. The label of the item is changed by using <span style="font-family: Courier New,Courier,monospace">elm_object_item_text_set</span>.</p>

<pre class="prettyprint">
Evas_Object *list;
Eina_List *l;
Elm_Object_Item *it;

// Retrieve the current selected item 
it = elm_list_selected_item_get(list);
if (!it)
&nbsp;&nbsp;&nbsp;return;

ic = elm_icon_add(win);
// Set the file to the icon file 
elm_image_file_set(ic, &quot;path/to/file&quot;, NULL);
// Change the first icon 
elm_object_item_part_content_set(it, &quot;start&quot;, ic);
// Change the second icon 
elm_object_item_part_content_set(it, &quot;end&quot;, ic);
// Change the label 
elm_object_item_text_set(it, &quot;I&#39;ve been selected !&quot;);
</pre>
  
<h3>Retrieving Selected Items</h3>

 <p>The list of the currently selected items is retrieved with <span style="font-family: Courier New,Courier,monospace">elm_list_selected_items_get()</span>. If the multiselect mode is false, you can retrieve the only selected item with <span style="font-family: Courier New,Courier,monospace">elm_list_selected_item_get()</span>. For example, this is how to unselect all previously selected items.</p>

<pre class="prettyprint">
Evas_Object *list; Eina_List *l;
Eina_List *selected_items;
// List of Elm_Object_Item 
Elm_Object_Item *it;

selected_items = elm_list_selected_items_get(list);
EINA_LIST_FOREACH(selected_items, l, it)
&nbsp;&nbsp;&nbsp;elm_list_item_selected_set(it, EINA_FALSE);
</pre>

<h3>List Item Operations</h3>

 <p>To find out if an item is selected, call <span style="font-family: Courier New,Courier,monospace">elm_list_item_selected_get</span>. This function returns EINA_TRUE if the item is selected, otherwise EINA_FALSE.</p>

 <p>Elementary list provides two functions for sliding a list to a specific item. <span style="font-family: Courier New,Courier,monospace">elm_list_item_show</span> shows the item passed as an argument, whereas <span style="font-family: Courier New,Courier,monospace">elm_list_item_bring_in</span> shows the item, but only after animating the slide.</p>

 <p>You can go to the item immediately preceding a specific item with the function <span style="font-family: Courier New,Courier,monospace">elm_list_item_prev</span>, or to the one immediately following a specific item with the function <span style="font-family: Courier New,Courier,monospace">elm_list_item_next</span>.</p>

 <p>The following example shows selecting the item immediately following the currently selected one, unselecting it, selecting the next one and bringing it to the screen. </p>

<pre class="prettyprint">
Evas_Object *list;
Elm_Object_Item *current, *next;
current = elm_list_selected_item_get(list);
elm_list_item_selected_set(current, EINA_FALSE);
next = elm_list_item_next(current);
elm_list_item_selected_set(next, EINA_TRUE);
elm_list_item_bring_in(next);
</pre>

<h3>Using List Callbacks</h3>

 <p>The list emits the following signals: </p> 
  <ul class="ul"> 
   <li>&quot;activated&quot;: The user double-clicks or presses (enter | return | spacebar) on an item. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;clicked,double&quot;: The user double-clicks an item. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;selected&quot;: The user selects an item. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;unselected&quot;: The user unselects an item. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;longpressed&quot;: The user long-presses an item. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;edge,top&quot;: The list is scrolled to the top edge.</li> 
   <li>&quot;edge,bottom&quot;: The list is scrolled to the bottom edge.</li> 
   <li>&quot;edge,left&quot;: The list is scrolled to the left edge.</li> 
   <li>&quot;edge,right&quot;: The list is scrolled to the right edge.</li> 
   <li>&quot;highlighted&quot;: The user highlights an item on the list. The event_info parameter of the callback function contains a pointer to the item activated.</li> 
   <li>&quot;unhighlighted&quot;: The user unhighlights an item in the list. The event_info parameter of the callback function contains a pointer to the item activated.</li>  
  </ul>

<p>You can register to the &quot;clicked,double&quot; signal with the following code. Note that the currently double-clicked item can be retrieved via the event_info pointer. This code registers to the &quot;double,clicked&quot; signal and unselects the item that has been double-clicked.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;Evas_Object *list;

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(list, &quot;clicked,double&quot;, double_clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when the button is clicked by the user
void double_clicked_cb(void *data, Evas_Object *obj, void  *event_info)
{
&nbsp;&nbsp;&nbsp;elm_Object_Item *it = event_info;
&nbsp;&nbsp;&nbsp;elm_list_selected_item_set(it,  EINA_FALSE);
}
</pre>
	</div>
		</li>			
		<li>
			<div class="devicespec-tit">
				<h2 id="map" name="map" class="items-tit-h2">Map Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Map hierarchy</p> 
<p style="text-align: center;"> <img alt="Map hierarchy" src="../../images/map_tree.png" /> </p>   

<p>The map widget displays a geographic map. The default map data are provided by the OpenStreetMap project <a href="http://www.openstreetmap.org/" target="_blank">(http://www.openstreetmap.org/)</a>. Custom providers can also be added.</p>

<p>This widget supports</p>
  <ul class="ul"> 
   <li>zooming</li> 
   <li>scrolling</li> 
   <li>markers with content to be displayed when user clicks over them</li> 
   <li>group of markers</li>   
   <li>routes</li> 
  </ul>

<p>The map widget implements the scroller interface so that all the functions that work with the scroller widget also work with maps.</p>

<h3>Adding a Map</h3>

<p>Once created with the <span style="font-family: Courier New,Courier,monospace">elm_map_add()</span> function, zoom level x12 can be set.</p>

<pre class="prettyprint">
Evas_Object *map, *parent;

map = elm_map_add(parent);
elm_map_zoom_mode_set(map, ELM_MAP_ZOOM_MODE_MANUAL);
elm_map_zoom_set(map, 12);
</pre>

<p>Here the zoom mode is set to manual, but it can also be set to the <span style="font-family: Courier New,Courier,monospace">ELM_MAP_ZOOM_MODE_AUTO_FIT</span> mode and the <span style="font-family: Courier New,Courier,monospace">ELM_MAP_ZOOM_MODE_AUTO_FILL</span> mode. In that case however, the <span style="font-family: Courier New,Courier,monospace">elm_map_zoom_set()</span> function cannot be used.</p>

<h3>Playing with the Map</h3>

<p>If we have coordinates of a specific area (2 2 N, 48 8 E), we can show it on the map.</p>

<pre class="prettyprint">
elm_map_region_show(map, 2.2, 48.8);
</pre>

<p>This shows the desired coordinates. We can also show the location with a bring-in animation.</p>

<pre class="prettyprint">
elm_map_region_bring_in(map, 2.2, 48.8);
</pre>

<p>The map is rotated 90 degrees around the current position.</p>

<pre class="prettyprint">
elm_map_rotate_set(map, 90, 2.2, 48.8);
</pre>

<h3>Drawing Overlays</h3>

<p>Overlays are markers that can be placed anywhere on the map. They can represent any object we want to put on the map.</p>

<h4>Creating an Overlay Class</h4>

<p>Overlay classes can be created if several objects are of the same type. For example, we create a forest overlay class to represent the forests visible on the map. We set the minimum zoom level at which this class is visible. The forest class overlay is visible when the zoom level is superior to eight.</p>

<p>We set an icon (&quot;Home&quot; icon here) to the forest class. This icon is displayed in place of the forest class on the map.</p>

<pre class="prettyprint">
Evas_Object *icon;
Elm_Map_Overlay *forest_class = elm_map_overlay_class_add(map);

// Set min zoom level at which class is displayed
elm_map_overlay_displayed_zoom_min_set(forest_class, 8);

// Create a Home icon object and set it to the forest class 
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;home&quot;);
elm_map_overlay_icon_set(forest_class, icon);
</pre>

<h4>Adding Overlays to a Class</h4>

<p>After creating a forest class, we can add overlay objects to it. Here we create an overlay for the Meudon forest. Data is linked to the overlay with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_data_set()</span> function. We set the name of the forest in the data. The icon can be set to the overlay with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_icon_set()</span> function.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Do not use the same icon object for two different overlays. Create a new icon object each time you need one.</td> 
    </tr> 
   </tbody> 
  </table> 
  
<pre class="prettyprint">
Elm_Map_Overlay *ovl;
const char* data_meudon = &quot;Meudon forest&quot;;
const char* data_fausses = &quot;Fausse forest&quot;;

// Add an overlay
ovl = elm_map_overlay_add(map, 2.20718, 48.79759);
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;stop&quot;);
elm_map_overlay_icon_set(ovl, icon);
elm_map_overlay_data_set(ovl, &amp;data_meudon);

// Add the new ovl object to the forest class 
elm_map_overlay_class_append(forest_class, ovl);

// Add another overlay next to the first one 
ovl = elm_map_overlay_add(map, 2.1699, 48.8189);
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;stop&quot;);
elm_map_overlay_icon_set(ovl, icon);
elm_map_overlay_data_set(ovl, &amp;data_fausses);
elm_map_overlay_class_append(forest_class, ovl);
</pre>  

<p>If we add another overlay to the forest class, the two overlays can be grouped under the forest class icon on certain zoom level conditions. We can define on which zoom level items are grouped.</p>

<pre class="prettyprint">
elm_map_overlay_class_zoom_max_set(forest_class, 8);
</pre>

<p>In this case, overlay members of the forest class are grouped when the map is displayed at less than zoom level eight.</p>

<h4>Creating Bubbles Following Overlays</h4>

<p>This is how to set a content in a bubble following an overlay.</p>

<pre class="prettyprint">
// Add an overlay bubble object 
Elm_Map_Overlay *bubble = elm_map_overlay_bubble_add(map);

// Set it to follow a specific overlay (the last created one here) 
elm_map_overlay_bubble_follow(bubble, ovl);
</pre>

<p>Once following an overlay, the bubble appears, moves or hides following the parent overlay&#39;s behavior.</p>

<p>Content is added to the bubble with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_bubble_content_append()</span> function.</p>

<h3>Adding Other Overlays</h3>

<p>We can draw a circle on the map with coordinates and a radius size.</p>

<pre class="prettyprint">
Elm_Map_Overlay *circle = elm_map_overlay_circle_add(map, 2.2, 48.8, 0.02);
</pre>

<p>We can also add a scale at the 200x0 coordinate (in pixels).</p>

<pre class="prettyprint">
Elm_Map_Overlay *scale = elm_map_overlay_scale_add(map, 200, 0);
</pre>

<p>Or we can draw a line, a polygon, or a route. See the full API for a full description of these functions.</p>

<h3>Calculating Routes</h3>

<p>A route between a starting point and an ending point is calculated with the <span style="font-family: Courier New,Courier,monospace">elm_map_route_add()</span> call. The type of transport and the routing calculation method can be provided so as to have the desired result.</p>

<p>In this example, we want a route calculation between the first and the second overlay. We configure it to use the bicycle, and we want to find the fastest route in time.</p>

<pre class="prettyprint">
Elm_Map_Route *route = elm_map_route_add(map,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_MAP_ROUTE_TYPE_BICYCLE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_MAP_ROUTE_METHOD_FASTEST,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.20718, 48.79759,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1699, 48.8189,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL);

// Add a callback to when the route has been calculated and loaded 
evas_object_smart_callback_add(map, &quot;route,loaded&quot;, _route_loaded_cb, route);
</pre>

<p>Once the route is calculated, we can create a route overlay object and change its color. In this example, we use the &quot;route,loaded&quot; callback.</p>

<pre class="prettyprint">
static void
_route_loaded_cb(void *data, Evas_Object *obj, void *ev)
{
&nbsp;&nbsp;&nbsp;Elm_Map_Route *route = data;

&nbsp;&nbsp;&nbsp;Elm_Map_Overlay *route_ovl = elm_map_overlay_route_add(obj, route);
&nbsp;&nbsp;&nbsp;elm_map_overlay_color_set(route_ovl, 0, 255, 0, 255);
}
</pre>     

<h3>Using Map Callbacks</h3>

<p>The map widget emits the following callbacks:</p>
<ul class="ul"> 
   <li>&quot;clicked&quot; - The user has clicked the map without dragging around.</li> 
   <li>&quot;clicked,double&quot; - The user has double-clicked the map.</li> 
   <li>&quot;press&quot; - The user has pressed down on the map.</li> 
   <li>&quot;longpressed&quot; - The user has pressed down on the map for a long time without dragging around.</li>
   <li>&quot;scroll&quot; - The content is scrolled (moved).</li> 
   <li>&quot;scroll,drag,start&quot; - Dragging the contents around starts.</li>  
   <li>&quot;scroll,drag,stop&quot; - Dragging the contents around stops.</li> 
   <li>&quot;scroll,anim,start&quot; - Scrolling animation starts.</li> 
   <li>&quot;scroll,anim,stop&quot; - Scrolling animation stops.</li> 
   <li>&quot;zoom,start&quot; - Zoom animation starts.</li> 
   <li>&quot;zoom,stop&quot; - Zoom animation stops.</li> 
   <li>&quot;zoom,change&quot; - The zoom is changed when using an auto zoom mode.</li> 
   <li>&quot;tile,load&quot; - A map tile image load begins.</li>
   <li>&quot;tile,loaded&quot; - A map tile image load ends.</li> 
   <li>&quot;tile,loaded,fail&quot; - A map tile image load fails.</li>
   <li>&quot;route,load&quot; - Route request begins.</li> 
   <li>&quot;route,loaded&quot; - Route request ends.</li> 
   <li>&quot;route,loaded,fail&quot; - Route request fails.</li>
   <li>&quot;name,load&quot; - Name request begins.</li>   
   <li>&quot;name,loaded&quot; - Name request ends.</li>   
   <li>&quot;name,loaded,fail&quot; - Name request fails.</li>   
   <li>&quot;overlay,clicked&quot; - An overlay is clicked.</li>
   <li>&quot;loaded&quot; - The map is loaded.</li>
</ul>

			</div>
		</li>
				<li>
			<div class="devicespec-tit">
				<h2 id="notify" name="notify" class="items-tit-h2">Notify Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
  <p class="figure">Figure: Notify hierarchy</p> 
<p style="text-align: center;"> <img alt="File analysis" src="../../images/notify_tree.png" /> </p> 

  <p>This widget displays a container in a particular region of the parent object. It can receive some content, and can be automatically hidden after a certain amount of time.</p>

<h3>Adding a Notify Widget</h3> 
  
<p>This is how to create a notify object.</p>

<pre class="prettyprint">
Evas_Object *notify, *parent;
notify = elm_notify_add(parent);
</pre>

<h3>Configuring Notify Widget</h3> 

<p>We create a label and add it to the notify object.</p>

<pre class="prettyprint">
Evas_Object *content;

// Create the label and set some text to it 
content = elm_label_add(parent);

elm_object_text_set(content, &quot;A label text&quot;);
evas_object_show(content);

// Add the label object to the notify widget
elm_object_content_set(notify, content);
</pre>

<p>In this example, we show the notify object on the bottom left corner of the parent object.</p>

<pre class="prettyprint">
elm_notify_align_set(notify, 1.0, 1.0);
evas_object_show(notify);
</pre>

<p>We can set a timeout interval, after which the notify widget is hidden. In this example, the timeout interval is five seconds.</p>

<pre class="prettyprint">
elm_notify_timeout_set(notify, 5.0);
</pre>

<h3>Using Notify Callbacks</h3> 

<p>The notify widget emits the following signals:</p>
 <ul class="ul"> 
   <li>&quot;timeout&quot; - The timeout count ends and the notify is hidden</li> 
   <li>&quot;block,clicked&quot; - The user clicks outside of the notify</li> 
  </ul>

<p>For both these signals event_info is NULL.</p>

<p>Here we register a callback on the &quot;timeout&quot; signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(notify, &quot;timeout&quot;, timeout_cb, data);
}

// Callback function for the &quot;timeout&quot; signal
// The timeout expires and the notify object is hidden
 
void timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Notify is hidden\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="panel" name="panel" class="items-tit-h2">Panel Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  <p class="figure">Figure: Panel hierarchy</p> 
<p style="text-align: center;"> <img alt="Panel hierarchy" src="../../images/panel_tree.png" /> </p> 
   <p>The panel widget is an animated object that can contain subobjects. It can be expanded or contracted by clicking on the button on its edge.</p>

   <p>Panel inherits from layout widget, so the layout API can be used on this widget.</p>

<h3 id="example">Adding Panel Widget</h3>

<p>This is how to add a panel and set its orientation to left.</p>

<pre class="prettyprint">
Evas_Object *panel, *parent;

panel = elm_panel_add(parent);
elm_panel_orient_set(panel, ELM_PANEL_ORIENT_LEFT);
</pre>

<h3 id="example">Using the Panel</h3>

<p>The panel is manually hidden.</p>

<pre class="prettyprint">
elm_panel_hidden_set(pan, EINA_TRUE);
</pre>

<p>It can be toggled if we do not know the hidden state of the widget.</p>

<pre class="prettyprint">
elm_panel_toggle(pan);
</pre>

<p>It can be set scrollable.</p>

<pre class="prettyprint">
elm_panel_scrollable_set(pan, EINA_TRUE);
</pre>

<h3 id="example">Creating a Drawer</h3>

<p>Tizen SDK has implemented a layout theme to add a drawer in the application. In this example, we add a new Elementary layout object and set the theme of this layout to the drawer.</p>

<pre class="prettyprint">
Evas_Object *layout;

// Create a new layout object 
layout = elm_layout_add(parent);

// Set the &quot;drawer&quot; group theme and &quot;panel&quot; style to it 
elm_layout_theme_set(layout,&quot;layout&quot;, &quot;drawer&quot;, &quot;panel&quot;);

// Show the new layout
evas_object_show(layout);
</pre>

<p>Once the panel object is created, we can swallow it in the new layout.</p>

<pre class="prettyprint">
elm_object_part_content_set(layout, &quot;elm.swallow.left&quot;, pan);
</pre>

<p>We can set content to the &quot;elm.swallow.bg&quot; and &quot;elm.swallow.content&quot; parts of the layout.</p>

<pre class="prettyprint">
// Panel Background (Dimmed Area) 
Evas_Object *bg = create_bg(layout);
elm_object_part_content_set(layout, &quot;elm.swallow.bg&quot;, bg);

// Add content to the drawer 
Evas_Object *content;
elm_object_part_content_set(layout, &quot;elm.swallow.content&quot;, content);
</pre>

<h3 id="example">Using Panel Callbacks</h3>

<p>We can register a callback on the &quot;scroll&quot; signal, when the user scrolls the panel. The event_info parameter is of the type Elm_Panel_Scroll_Info.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(pan, &quot;scroll&quot;, scroll_cb, data);
}
// Callback function for the &quot;scroll&quot; signal
// This callback is called when the user scrolls the panel
 
void scroll_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Panel_Scroll_Info *scrollinfo = event_info;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The panel was scrolled.\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="photo" name="photo" class="items-tit-h2">Photo Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
  <p class="figure">Figure: Photo hierarchy</p> 
<p style="text-align: center;"> <img alt="Photo hierarchy" src="../../images/photo_tree.png" /> </p> 
  
 <p>The photo widget is used to display a photo (such as a contact image). If no photo is set on it, it displays a person icon to show that it is a photo placeholder.</p> 
  
<h3 id="example">Adding a Photo Widget</h3>  

 <p>This is how to create a photo object.</p> 

 <pre class="prettyprint">
Evas_Object *photo, *parephotoslider = elm_photo_add(parent);
photo = elm_photo_add(parent);
</pre>

<h3 id="example">Using Photo Widget</h3>  

 <p>A file can be set to the photo widget. Here, <span style="font-family: Courier New,Courier,monospace">PHOTO_FILENAME</span> is a string corresponding to the photo file name on the system.</p> 

<pre class="prettyprint">
elm_photo_file_set(photo, PHOTO_FILENAME);</pre>

 <p>We can set the photo as editable, so it can be copied, cut or dragged in another region of the screen.</p> 

<pre class="prettyprint">
elm_photo_editable_set(photo, EINA_TRUE);</pre>

 <p>It can also be completely visible on the screen.</p>

<pre class="prettyprint">
elm_photo_fill_inside_set(photo, EINA_TRUE);</pre>

<h3 id="example">Using Photo Callbacks</h3> 

 <p>The following callbacks are registered on the photo widget.</p>
  <ul class="ul"> 
   <li>&quot;clicked&quot; - The user has clicked the photo.</li> 
   <li>&quot;drag,start&quot; - The user starts dragging the inner image out of the photo&#39;s frame.</li> 
   <li>&quot;drag,end&quot; - The user drops the dragged image.</li>    
  </ul>

<p>event_info is always NULL.</p>

			</div>
		</li>
				<li>
			<div class="devicespec-tit">
				<h2 id="photocam" name="photocam" class="items-tit-h2">Photocam Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

  <p class="figure">Figure: Photocam hierarchy</p> 
<p style="text-align: center;"> <img alt="Photocam hierarchy" src="../../images/photocam_tree.png" /> </p> 
  
  <p>The photocam widget displays high resolution photos taken from digital cameras. It provides a way to zoom in the photo, load it fast and fit it nicely. It is optimized for .jpeg images format and has a low memory footprint.</p>

  <p>This widget implements the scroller interface, so all the functions concerning the scroller can be used with the photocam widget.</p>

<h3 id="example">Adding a Photocam Widget</h3>

<p>This is how to create a photocam widget and set an image file on it.</p>

<pre class="prettyprint">
Evas_Object *photocam;
photocam = elm_photocam_add(win);
elm_photocam_file_set(photocam, &quot;/tmp/photo.jpeg&quot;);
</pre>

<h3 id="example">Using Photocam Zoom</h3>

<p>We can choose between two automatic zoom modes and a manual zoom mode. Here we set the zoom mode to manual and ask for a double zoom.</p>

<pre class="prettyprint">
elm_photocam_zoom_mode_set(photocam, ELM_PHOTOCAM_ZOOM_MODE_MANUAL);
elm_photocam_zoom_set(photocam, 2.0);
</pre>

<p>The zoom mode can be set to <span style="font-family: Courier New,Courier,monospace">ELM_PHOTOCAM_ZOOM_MODE_AUTO_FIT</span>. In this case, the photo fits exactly inside the scroll frame with no pixels outside this region. The zoom mode can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_PHOTOCAM_ZOOM_MODE_AUTO_FILL</span> to fill all the pixels of the photocam widget.</p>

<p>Multi-touch zooming is activated by enabling gestures.</p>

<pre class="prettyprint">
elm_photocam_gesture_enabled_set(photocam, EINA_TRUE);
</pre>

<p>We can zoom in a specific region. In this example, we want to zoom in the region starting at the coordinates (200x200), with a width of 400px and a height of 300px.</p>

<pre class="prettyprint">
elm_photocam_image_region_bring_in(photocam, 200, 200, 400, 300);
</pre>

<h3 id="example">Using Photocam Callbacks</h3>

<p>The photocam widget emits the following signals:</p>
<ul class="ul"> 
   <li>&quot;clicked&quot; - The user has clicked the photo without dragging around.</li> 
   <li>&quot;press&quot; - The user has pressed down on the photo.</li> 
   <li>&quot;longpressed&quot; - The user has pressed down on the photo for a long time without dragging around.</li> 
   <li>&quot;clicked,double&quot; - The user has double-clicked the photo.</li> 
   <li>&quot;load&quot; - The photo load begins.</li> 
   <li>&quot;loaded&quot; - The image file load is complete for the first view (a low resolution blurry version).</li> 
   <li>&quot;load,detail&quot; - A photo detailed data load begins.</li> 
   <li>&quot;loaded,detail&quot; - The image file load is complete for the detailed image data (full resolution is needed).</li> 
   <li>&quot;zoom,start&quot; - Zoom animation starts.</li> 
   <li>&quot;zoom,stop&quot; - Zoom animation stops.</li> 
   <li>&quot;zoom,change&quot; - The zoom is changed when using an auto zoom mode.</li> 
   <li>&quot;scroll&quot; - The content is scrolled.</li> 
   <li>&quot;scroll,anim,start&quot; - Scrolling animation starts.</li> 
   <li>&quot;scroll,anim,stop&quot; - Scrolling animation stops.</li> 
   <li>&quot;scroll,drag,start&quot; - Dragging the content around starts.</li> 
   <li>&quot;scroll,drag,stop&quot; - Dragging the content around stops.</li> 
  </ul>

<p>For all these signals, event_info is NULL.</p>

<p>This is how to register a callback on the &quot;loaded&quot; signal.</p>

<pre class="prettyprint">
void message_port_cb(int local_port_id, const char *remote_app_id, bundle *message)
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(photocam, &quot;loaded&quot;, loaded_cb, data);
}

// Callback function for the &quot;loaded&quot; signal
// The photocam has loaded the photo file in a low resolution
 
void loaded_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The photo has been loaded\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="plug" name="plug" class="items-tit-h2">Plug Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
  <p class="figure">Figure: Plug hierarchy</p> 
<p style="text-align: center;"> <img alt="Plug hierarchy" src="../../images/plug_tree.png" /> </p> 

<p>The plug widget shows an Evas_Object created by an other process. It can be used anywhere the same way as any other elementary widget.</p>

<h3 id="example">Adding Plug Widget</h3>  

<p>This is how to create a plug.</p>

<pre class="prettyprint">
Evas_Object *plug, *parent;
plug = elm_plug_add(parent);
</pre>

<h3 id="example">Using the Plug</h3>

<p>The socket image provides the service where we can connect the plug object with the <span style="font-family: Courier New,Courier,monospace">elm_plug_connect()</span> function. In this process we use the service name and number set by the socket we want to connect to.</p>

<p>As an example, we connect to a service named &quot;plug_test&quot; on the number 0.</p>

<pre class="prettyprint">
elm_plug_connect(plug, &quot;plug_test&quot;, 0, EINA_FALSE);
</pre>

<p>The Evas_Object corresponding to the distant image is retrieved with the <span style="font-family: Courier New,Courier,monospace">elm_plug_image_object_get()</span> function.</p>

<pre class="prettyprint">
Evas_Object *plug_img = elm_plug_image_object_get(plug);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The socket we try to connect to must be started with the <span style="font-family: Courier New,Courier,monospace">elm_win_socket_listen()</span> function in the other process on the remote window object (it is called remote_win here).</td> 
    </tr> 
   </tbody> 
  </table>

<pre class="prettyprint">
// Create a remote window in the other process 
Elm_Win *remote_win = elm_win_add(NULL,
&nbsp;&nbsp;&nbsp;&quot;Window Socket&quot;,
&nbsp;&nbsp;&nbsp;ELM_WIN_SOCKET_IMAGE);
// Create a socket named &quot;plug_test&quot; and listen to it
elm_win_socket_listen(remote_win, &quot;plug_test&quot;, 0, EINA_FALSE);
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="popup" name="popup" class="items-tit-h2">Popup Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Popup widget</p> 
<p style="text-align:center;"><img alt="Popup widget" src="../../images/popup.png" /></p>
      
<p class="figure">Figure: Popup hierarchy</p> 
<p style="text-align:center;"><img alt="Popup hierarchy" src="../../images/popup_tree.png" /></p>
  

<p> The popup widget shows a popup area that may contain</p>
<ul class="ul">
<li>a title area (optional)</li>
<li>a content area</li>
<li>an action area (optional)</li>
</ul>

<p>The optional title area may contain an icon and text, the action area may contain up to three buttons.</p>

<h3>Adding a Popup</h3>

<p>This is how to create a popup widget.</p>
<pre class="prettyprint">
Evas_Object *popup, *parent;

// Creating a popup 
popup = elm_popup_add(parent);
</pre>

<h3>Using Popup Styles</h3>

<p>A popup has two different styles.</p>
<ul class="ul">
<li>&quot;popup&quot;</li>
<li>&quot;toast&quot;</li>
</ul>

<p>Here we set the style of the popup to &quot;toast&quot;.</p>

<pre class="prettyprint">elm_object_style_set(popup, &quot;toast&quot;);</pre>

<h3>Setting the Popup Areas</h3>

<p>We configure the title area. We set the icon object using the part name &quot;title,icon&quot;. We set the title text to &quot;Test popup&quot; using the partname &quot;title,text&quot;.</p>

<pre class="prettyprint">
Evas_Object *icon;

// Adding an icon to the title area 
elm_object_part_content_set(popup, &quot;title,icon&quot;, icon);

// Setting the title text 
elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Test popup&quot;);
</pre>

<p>We set the content of the popup. It can be a simple text</p>

<pre class="prettyprint">elm_object_part_text_set(popup, &quot;default&quot;, &quot;Test popup&quot;);</pre>

<p>or an Evas object.</p>

<pre class="prettyprint">
Evas_Object *content;

elm_object_content_set(popup, content);
</pre>

<p>We set the buttons of the action area by creating an &quot;OK&quot; button, a &quot;Cancel&quot; button and a &quot;Help&quot; button.</p>

<pre class="prettyprint">
Evas_Object *button1, *button2, *button3;

// Create the three buttons 

button1 = elm_button_add(popup);
elm_object_text_set(button1, &quot;OK&quot;);

button2 = elm_button_add(popup);
elm_object_text_set(button2, &quot;Cancel&quot;);

button3 = elm_button_add(popup);
elm_object_text_set(button3, &quot;Help&quot;);

// Set the buttons to the action area 
elm_object_part_content_set(popup, &quot;button1&quot;, button1);
elm_object_part_content_set(popup, &quot;button2&quot;, button2);
elm_object_part_content_set(popup, &quot;button3&quot;, button3);
</pre>

<h3>Using Popup Callbacks</h3>
<p>The popup emits the following signals:</p>
<ul class="ul">
<li>&quot;timeout&quot; - The popup is closed as a result of timeout.</li>
<li>&quot;block,clicked&quot; - The user clicks on the Blocked Event area.</li>
</ul>

<p><span style="font-family: Courier New,Courier,monospace">elm_popup_timeout_set()</span> is used to hide the popup after a certain time. In this example, we set the timeout to five seconds.</p>

<pre class="prettyprint">elm_popup_timeout_set(popup, 5.0);</pre>

<p>When the timeout expires, the &quot;timeout&quot; signal is sent to the user.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(popup, &quot;timeout&quot;, _timeout_cb, data);
}

static void
_timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Timeout \n&quot;);
}
</pre>

<p>The visible region of the popup is surrounded by a translucent region called <strong>Blocked Event</strong> area. By clicking on this area, the signal &quot;block,clicked&quot; is sent to the application.</p>

			</div>
		</li>
		
		
		<li>
			<div class="devicespec-tit">
				<h2 id="progressbar" name="progressbar" class="items-tit-h2">Progressbar Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
         <p class="figure">Figure: Progressbar widget</p> 
  <p style="text-align:center;"><img alt="Progressbar widget" src="../../images/progressbar.png" /></p>
      
	  <p class="figure">Figure: Progressbar hierarchy</p> 
  <p style="text-align:center;"><img alt="Progressbar hierarchy" src="../../images/progressbar_tree.png" /></p>
  

 <h3>Adding the Progressbar Widget</h3>
 
<p>This widget is used to display the progress status of a given job. It inherits from the layout widget, so all function concerning the layout widget is used on the progressbar widget.</p> 
<p>This is how to create a progressbar widget.</p>

<pre class="prettyprint">Evas_Object *pb = elm_progressbar_add(win);</pre>
<h3>Using Progressbar Styles</h3>

<p>The progressbar has several styles:</p>
<ul class="ul">
<li>&quot;default&quot;</li>
<li>&quot;pending_list&quot;</li>
<li>&quot;process_large&quot;</li>
<li>&quot;process_medium&quot;</li>
<li>&quot;process_small&quot;</li>
</ul>

<p>We set the style of the progressbar to &quot;pending_list&quot;.</p>

<pre class="prettyprint">elm_object_style_set(pb, &quot;pending_list&quot;);</pre>

<h3>Using the Progressbar</h3>

<p>By default, the progressbar does not show a label or an icon, and the unit label is set to &quot;%.0f %%&quot;.</p>

<p>This is how to set a label (in this example, it is named &quot;Test label&quot;).</p>

<pre class="prettyprint">elm_object_text_set(pb, &quot;Test label&quot;);</pre>

<p>An icon is set with <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> using the partname &quot;icon&quot;.</p>
<pre class="prettyprint">elm_object_part_content_set(pb, &quot;icon&quot;, icon_object);</pre>

<p>The unit label format string can be modified using a &quot;printf&quot; style format. We set it to be a float number with two decimals.</p>
<pre class="prettyprint">elm_progressbar_unit_format_set(pb, &quot;%1.2f%%&quot;);</pre>

<h3>Configuring the Progressbar</h3>

<p>The progressbar pulse mode is activated to make the progressbar loop infinitely between the start and end position.</p>

<pre class="prettyprint">elm_progressbar_pulse_set(pb, EINA_TRUE);
elm_progressbar_pulse(pb, EINA_TRUE);
</pre>

<p>It can be inverted. In that mode, the values are inverted so that the high values are on the left and the low values on the right.</p>

<pre class="prettyprint">elm_progressbar_inverted_set(pb, EINA_TRUE);</pre>

<p>The progressbar emits the &quot;changed&quot; signal when the progress value changes. The value is changed with the <span style="font-family: Courier New,Courier,monospace">elm_progressbar_value_set()</span> function. Here the pb progress value is set to 20%.</p>
<pre class="prettyprint">elm_progressbar_value_set(pb, 0.2);</pre>

<p>The current value can be read.</p>
<pre class="prettyprint">double value = elm_progressbar_value_get(pb);</pre>

<p>We can set the orientation of the progressbar to vertical instead of the default horizontal orientation.</p>
<pre class="prettyprint">elm_progressbar_horizontal_set(pb, EINA_FALSE);</pre>

<h3>Using Progressbar Callbacks</h3>

<p>The &quot;changed&quot; signal is the only signal specifically emitted by the progressbar widget.</p>
<p>This is how to register a callback on this signal.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(pb, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the progressbar value changes

void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="radio" name="radio" class="items-tit-h2">Radio Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
  
<p class="figure">Figure: Radio widget</p> 
<p style="text-align:center;"><img alt="Radio widget" src="../../images/radio.png" /></p>
      
<p class="figure">Figure: Radio hierarchy</p> 
<p style="text-align:center;"><img alt="Radio hierarchy" src="../../images/radio_tree.png" /></p>
  
<p> This widget displays one or more options, but the user can only select one of them. It is composed of an indicator (selected/unselected), an optional icon and an optional label. Usually grouped with two or more other radio objects, it can also be used alone.</p>
<p>The radio widget inherits from the layout widget. All the layout functions can be used with radio objects.</p>

<h3>Adding a Radio Widget</h3>

<p>We create a radio widget and set a label to it.</p>
<pre class="prettyprint">Evas_Object *radio, *parent;

// Creating a radio
radio = elm_radio_add(parent);

// Set a label to it
elm_object_text_set(radio, &quot;Radio widget&quot;);
</pre>

<p>We set an icon to the radio object.</p>
<pre class="prettyprint">
// Create a Home icon 
Evas_Object *icon;

icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;home&quot;);

// Set it to the radio widget 
elm_object_part_content_set(radio, &quot;icon&quot;, icon);
</pre>

<h3>Changing Radio Value</h3>

<p>The user can select one of a set of values with the radio widget. Each radio object from a group of radio objects represents an integer value. Here we set the value one to the new radio object.</p>
<pre class="prettyprint">elm_radio_state_value_set(radio, 1);</pre>

<h3>Managing Radio Groups</h3>

<p>We create a group of radio objects with at least two radio widgets.</p>

<pre class="prettyprint">
// Create another radio object 
Evas_Object *radio2 = elm_radio_add(parent);
elm_radio_state_value_set(radio2, 2);

// Create a group composed of radio and radio2
Evas_Object *group = radio;
elm_radio_group_add(radio2, group);
</pre>

<p>Now that we have a group composed of two radio objects, we can choose which one is selected. Here we select radio2.</p>

<pre class="prettyprint">elm_radio_value_set(group, 2);</pre>

<p>We can use <span style="font-family: Courier New,Courier,monospace">elm_radio_value_get()</span> to see the currently selected radio of the group.</p>

<h3>Using Radio Callbacks</h3>

<p>When the state of a radio is modified in a group of radio objects, the &quot;changed&quot; signal is emitted.</p>
<p>This is how to register a callback on this signal.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(radio, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the radio value changes

void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>

			</div>
		</li>
		
		
		<li>
			<div class="devicespec-tit">
				<h2 id="segmentcontrol" name="segmentcontrol" class="items-tit-h2">Segmentcontrol Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">
 
<p class="figure">Figure: Segmentcontrol with text</p> 
<p style="text-align:center;"><img alt="Segmentcontrol with text" src="../../images/segment_text.png" /></p>
      
<p class="figure">Figure: Segmentcontrol with icons</p> 
<p style="text-align:center;"><img alt="Segmentcontrol with icons" src="../../images/segment.png" /></p>
  
<p class="figure">Figure: Segmentcontrol hierarchy</p> 
<p style="text-align:center;"><img alt="Segmentcontrol hierarchy" src="../../images/segment_control_tree.png" /></p>
 
<p> This widget consists of several segment items. A segment item is similar to a discrete two state button. Any time, only one segment item can be selected. A segment item is composed of a label (text) and an icon.</p>
<p>This widget inherits from the layout widget, so all the layout widgets API can be used on segmentcontrol objects.</p>

<h3>Adding Segmentcontrol Widget</h3>

<p>This is how to add a segmentcontrol widget.</p>

<pre class="prettyprint">Evas_Object *segcontrol, *parent;

segcontrol = elm_segment_control_add(parent);
</pre>

<h3>Adding Items</h3>

<p>We can add items to it. Here we add four items containing only text labels (no icons).</p>
<pre class="prettyprint">Elm_Object_Item *it;

elm_segment_control_item_add(segcontrol, NULL, &quot;item1&quot;);
elm_segment_control_item_add(segcontrol, NULL, &quot;item2&quot;);
elm_segment_control_item_add(segcontrol, NULL, &quot;item3&quot;);
it = elm_segment_control_item_add(segcontrol, NULL, &quot;item4&quot;);
</pre>

<p>We can insert an item at a specific position starting at 0</p>
<pre class="prettyprint">elm_segment_control_item_insert_at(segcontrol, NULL, &quot;item7&quot;, 2);</pre>

<p>or delete an item.</p>
<pre class="prettyprint">elm_segment_control_item_del_at(segcontrol, 2);</pre>
<p>We can also set the selected state of an item manually</p>
<pre class="prettyprint">elm_segment_control_item_selected_set(it, EINA_TRUE);</pre>
<p>or disable the whole segment control.</p>
<pre class="prettyprint">elm_object_disabled_set(segcontrol, EINA_TRUE);</pre>

<h3>Using the Segmentcontrol Callbacks</h3>

<p>This is how to register a callback on the &quot;changed&quot; signal. It is called when the user clicks on a segment item which is not previously selected. The event_info parameter is the segment item pointer.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(segcontrol, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the segcontrol selected item changes

void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Segment_Item *it = event_info;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The selected segment item has changed\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="slider" name="slider" class="items-tit-h2">Slider Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

<p class="figure">Figure: Slider widget</p> 
<p style="text-align:center;"><img alt="Slider widget" src="../../images/slider.png" /></p>
      
<p class="figure">Figure: Slider hierarchy</p> 
<p style="text-align:center;"><img alt="Slider hierarchy" src="../../images/slider_tree.png" /></p>

<p> The slider widget is a draggable bar that is used to select a value within a certain range.</p>

<h3>Adding a Slider Widget</h3>

<p>This is how to create a slider object.</p>
<pre class="prettyprint">Evas_Object *slider, *parent;

slider = elm_slider_add(parent);
</pre>

<h3>Using the Slider Styles</h3>

<p>A slider has the following styles:</p>
<ul class="ul">
<li>&quot;default&quot;</li>
<li>&quot;center_point&quot;</li>
</ul>

<p>Here we set the style to &quot;center_point&quot;.</p>
<pre class="prettyprint">elm_object_style_set(slider, &quot;center_point&quot;);</pre>

<p>With this style, the slider &quot;0&quot; point is in the middle of the widget.</p>

<h3>Configuring the Slider</h3>
<p>Orientation is set with the <span style="font-family: Courier New,Courier,monospace">elm_slider_horizontal_set()</span> function, and it is inverted the same way as the progressbar widget. Here we set it vertical and inverted.</p>
<pre class="prettyprint">elm_slider_horizontal_set(slider, EINA_FALSE);
elm_slider_inverted_set(slider, EINA_TRUE);
</pre>

<p>It can contain icons (&quot;icon&quot; and &quot;end&quot; partnames), a label, a unit label and an indicator label.</p>
<pre class="prettyprint">Evas_Object *icon1, *icon2;

// Set the icons 
elm_object_part_content_set(slider, &quot;icon&quot;, icon1);
elm_object_part_content_set(slider, &quot;end&quot;, icon2);

// Set the label 
elm_object_part_text_set(slider, &quot;default&quot;, &quot;slider label&quot;);

// Set the unit format 
elm_slider_unit_format_set(slider, &quot;%1.2f meters&quot;);
</pre>

<p>Before using the slider, its minimum and maximum values are set with <span style="font-family: Courier New,Courier,monospace">elm_slider_min_max_set()</span>. The current value is set with (<span style="font-family: Courier New,Courier,monospace">elm_slider_value_set()</span>). Here we set the minimum value to 0, the maximum value to 100, and the current value to 50.</p>
<pre class="prettyprint">elm_slider_min_max_set(slider, 0.0, 100.0);
elm_slider_value_set(slider, 50.0);
</pre>

<p>The span of the slider represents its length (horizontally or vertically). It is set with <span style="font-family: Courier New,Courier,monospace">elm_slider_span_size_set()</span> and is scaled by the object or applications scaling factor.</p>
<p>We can retrieve the current value of the slider anytime.</p>

<pre class="prettyprint">double value = elm_slider_value_get(slider);</pre>

<p>By default, the slider indicator becomes bigger when the user drags it. This can be disabled if we want the slider indicator to keep its default size. Here we set the state of the indicator enlargement and then invert the behavior.</p>

<pre class="prettyprint">
// Get the current state of the indicator 
Eina_Bool enlarge = elm_slider_indicator_show_get(slider);

// Invert the behavior 
 elm_slider_indicator_show_set(slider, !enlarge);
 </pre>
 
<h3>Using Slider Callbacks</h3>

<p>This widget emits the following signals:</p>
<ul class="ul">
<li>&quot;changed&quot;: The user changes the slider value.</li>
<li>&quot;slider,drag,start&quot;: Dragging the slider indicator around starts.</li>
<li>&quot;slider,drag,stop&quot;: Dragging the slider indicator around stops.</li>
<li>&quot;delay,changed&quot;: A short time after the user changes the value. This is called only when the user stops dragging for a very short period or when releases the finger or mouse, so that it avoids possibly expensive reactions to the value change.</li>
</ul>

<p>For all these signals, event_info is NULL.</p>
<p>This is how to register a callback on the &quot;changed&quot; signal.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(slider, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the slider value changes

void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The slider has changed\n&quot;);
}
</pre>
 
			</div>
		</li>
			<li>
			<div class="devicespec-tit">
				<h2 id="spinner" name="spinner" class="items-tit-h2">Spinner Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con"> 
<p class="figure">Figure: Spinner widget</p> 
<p style="text-align:center;"><img alt="Spinner widget" src="../../images/spin.png" /></p>
      
<p class="figure">Figure: Spinner hierarchy</p> 
<p style="text-align:center;"><img alt="Spinner hierarchy" src="../../images/spinner_tree.png" /></p>

<p> The spinner widget increases or decreases a numeric value with the arrow buttons.</p>

<p>This widget inherits from the layout widget, so all functions concerning the layout widget are used on the spinner widget.</p>

<h3>Adding a Spinner Widget</h3>
<p>This is how to create a spinner object.</p>

<pre class="prettyprint">
Evas_Object *spin, *parent;

spin = elm_spinner_add(parent);
</pre>

<h3>Configuring the Spinner</h3>

<p>The label format is set to a different value:</p>
<pre class="prettyprint">elm_spinner_label_format_set(spin, &quot;%1.2f meters&quot;);</pre>

<p>You can determine the result of clicking the arrow buttons. In this example, a click on an arrow increases or decreases with 2.0 units:</p>
<pre class="prettyprint">elm_spinner_step_set(spin, 2.0);</pre>
<p>The wrapping mode is activated. In this mode, the spinner wraps when it reaches its minimum or maximum value.</p>
<pre class="prettyprint">elm_spinner_wrap_set(spin, EINA_TRUE);</pre>

<p>We set the minimum and maximum values of the spinner.</p>
<pre class="prettyprint">elm_spinner_min_max_set(spin, -25.0, 100.0);</pre>

<p>The spinner object can be set vertical, and the change interval when the user presses the arrows long can be modified so that it changes faster.</p>
<pre class="prettyprint">elm_object_style_set(spin, &quot;vertical&quot;);
elm_spinner_interval_set(spin, 0.1);
</pre>

<p>If the user has to select between text values instead of numerical values, it is possible to add our own text labels. Here spin2 object shows three numbers written in text characters.</p>
<pre class="prettyprint">Evas_Object *spin2 = elm_spinner_add(parent);
elm_spinner_min_max_set(spin2, 1, 3);
elm_spinner_special_value_add(spin2, 1, &quot;One&quot;);
elm_spinner_special_value_add(spin2, 2, &quot;Two&quot;);
elm_spinner_special_value_add(spin2, 3, &quot;Three&quot;);
</pre>

<h3>Using Spinner Callbacks</h3>

<p>This widget emits the following signals:</p>
<ul class="ul">
<li>&quot;changed&quot; - The spinner value changes.</li>
<li>&quot;delay,changed&quot; - A short time after the user changes the value. This is called only when the user stops dragging for a very short period or releases the finger or mouse, so that it avoids possibly expensive reactions to the value change.</li>
</ul>

<p>This is how to register a callback on the &quot;delay,changed&quot; signal.</p>

<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(spin, &quot;delay,changed&quot;, delay_changed_cb, data);
}

// Callback function for the &quot;delay,changed&quot; signal
// This callback is called a short time after the spinner value changes

void delay_changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The spinner value has changed\n&quot;);
}
</pre>
	</div>
		</li>			
		
		<li>
			<div class="devicespec-tit">
				<h2 id="toolbar" name="toolbar" class="items-tit-h2">Toolbar Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

    <p class="figure">Figure: Toolbar widget</p> 
  <p style="text-align:center;"><img alt="toolbar widget" src="../../images/toolbar.png" /></p> 
  
      <p class="figure">Figure: Toolbar hierarchy</p> 
  <p style="text-align:center;"><img alt="Toolbar hierarchy" src="../../images/toolbar_tree.png" /></p> 

  
<p> This widget is a scrollable list of items and shows a menu when an item is selected. Only one item can be selected at a time.</p>

<h3>Adding and Configuring the Toolbar</h3>
<p>Use the following function to create a toolbar.</p>
<pre class="prettyprint">
Evas_Object *toolbar, *parent;

toolbar = elm_toolbar_add(parent);
</pre>

<h3>Using Toolbar Styles</h3>
<p>The toolbar has the following styles:</p>
<ul class="ul">
<li>&quot;default&quot;</li>
<li>&quot;tabbar&quot;</li>
<li>&quot;tabbar_with_title&quot;</li>
<li>&quot;navigationbar&quot;</li>
</ul>
<p>Here, we set the style to &quot;navigationbar&quot;.</p>
<pre class="prettyprint">
elm_object_style_set(toolbar, &quot;navigationbar&quot;);
</pre>

<h3>Configuring the Toolbar</h3>
<p>The toolbar displays its items in one of the following options.</p>
<ul class="ul">
<li>ELM_TOOLBAR_SHRINK_NONE: Toolbar sets a minimum size to its items so that all of them fit without scrolling.</li>
<li>ELM_TOOLBAR_SHRINK_HIDE: Toolbar does not scroll or show the items that do not fit in.</li>
<li>ELM_TOOLBAR_SHRINK_SCROLL: Toolbar scrolls to show the items that do not fit in.</li>
<li>ELM_TOOLBAR_SHRINK_MENU: Toolbar creates a button to popup hidden items.</li>
</ul>
<p>Here we set the Toolbar to ELM_TOOLBAR_SHRINK_NONE.</p>
<pre class="prettyprint">elm_toolbar_shrink_mode_set(toolbar, ELM_TOOLBAR_SHRINK_NONE);</pre>
<p>By default, the toolbar displays items homogeneously. Items with long labels occupy a lot of space. To avoid that, we can disable the homogeneous mode.</p>
<pre class="prettyprint">elm_toolbar_homogeneous_set(toolbar, EINA_FALSE);</pre>

<h3>Adding Items to the Toolbar</h3>
<p>In the following code, we add two items and choose the associated icon, label, and function to call when the item is clicked.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *home_it, *help_it;

&nbsp;&nbsp;&nbsp;home_it = elm_toolbar_item_append(toolbar, &quot;home&quot;, &quot;Home&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_home_item_pressed_cb, NULL);
&nbsp;&nbsp;&nbsp;help_it = elm_toolbar_item_append(toolbar, &quot;help&quot;, &quot;Help&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
}

static void
_home_item_pressed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Home item clicked \n&quot;);
}

static void
_help_item_pressed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Help item clicked \n&quot;);
}
</pre>

<p>An item may be disabled. This is how to disable the help item. The disabled item does not receive input and, if the theme supports it, is themed differently (usually greyed out) from its normal state.</p>
<pre class="prettyprint">elm_object_item_disabled_set(help_it, EINA_TRUE);</pre>

<h3>Adding Items with States</h3>
<p>Items have two or more states. Each state has its own icon, label, and function to call when an item is clicked. As an example, we create two states to the help item with the same icon but two different labels.</p>
<pre class="prettyprint">
elm_toolbar_item_state_add(help_it, &quot;help&quot;, &quot;Help state 1&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
elm_toolbar_item_state_add(help_it, &quot;help&quot;, &quot;Help state 2&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
</pre>
<p>We can cycle through the states of the help item by using the following code.</p>
<pre class="prettyprint">elm_toolbar_item_state_set(help_it, elm_toolbar_item_state_next(help_it));
</pre>

<h3>Using Toolbar Callbacks</h3>
<p>This widget emits the following signals:</p>
<ul class="ul">
<li>&quot;clicked&quot;: The user clicks on a toolbar item, which is selected. event_info is an object of the type Elm_Toolbar_Item.</li>
<li>&quot;clicked,double&quot;: The user double-clicks on a toolbar item. event_info is an object of the type Elm_Toolbar_Item.</li>
<li>&quot;longpressed&quot;: The toolbar is pressed for a certain amount of time. event_info is an object of the type Elm_Toolbar_Item.</li>
<li>&quot;language,changed&quot; - The program language changes.</li>
<li>&quot;item,focused&quot; - The item is highlighted. event_info is an object of the type Elm_Toolbar_Item.</li>
<li>&quot;item,unfocused&quot; - The highlight is removed from the item. event_info is an object of the type Elm_Toolbar_Item.</li>
<li>&quot;scroll&quot; - The toolbar scrolls. event_info is NULL.</li>
<li>&quot;scroll,anim,start&quot; - The toolbar scrolling animation starts. event_info is NULL.</li>
<li>&quot;scroll,anim,stop&quot; - The toolbar scrolling animation stops. event_info is NULL.</li>
<li>&quot;scroll,drag,start&quot; - The user starts dragging the toolbar. event_info is NULL.</li>
<li>&quot;scroll,drag,stop&quot; - The user stops dragging the toolbar. event_info is NULL.</li>
</ul>
<p>This is how to register a callback on the &quot;clicked&quot; signal.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(toolbar, &quot;clicked&quot;, clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when a toolbar item is clicked

void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Toolbar_Item * item = event_info;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Item clicked\n&quot;);
}
</pre>

			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="tooltip" name="tooltip" class="items-tit-h2">Tooltip Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

<p>The tooltip widget is a smart object that shows a content in a frame when mouse hovers a parent object. The widget provides tips or information about the parent object.</p>

<h3>Adding a Tooltip</h3>
<p>The tooltip widget cannot be created with the <span style="font-family: Courier New,Courier,monospace">elm_tooltip_add()</span> function. This widget is already contained in a widget when it is created. We can only activate or disable it.</p>

<h3>Activating the Tooltip</h3>
<p>To activate the tooltip on a parent object, we can set a tooltip text to the parent object,</p>
<pre class="prettyprint">Evas_Object *parent;

elm_object_tooltip_text_set(parent, &quot;The tooltip text&quot;;</pre>
<p>or set a content to the parent object.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;elm_object_tooltip_content_cb_set(parent,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tooltip_content_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tooltip_content_del_cb);
}

Evas_Object*
tooltip_content_cb(void*data, Evas_Object *obj, Evas_Object *tooltip)
{
&nbsp;&nbsp;&nbsp;// Create the tooltip content 
}

void tooltip_content_del_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Destroy the tooltip content 
}
</pre>

<p>When passing content to the tooltip, the <span style="font-family: Courier New,Courier,monospace">tooltip_content_cb</span> function is called each time the tooltip is showed. The role of this function is to create the content to set in the tooltip. It returns a pointer to an Evas_Object.</p>
<p>When the tooltip disappears, the <span style="font-family: Courier New,Courier,monospace">tooltip_content_del_cb</span> function is called. This function is in charge of deleting the previously allocated Evas_Object.</p>
<p>Once set, the tooltip can be manually hidden or shown.</p>

<pre class="prettyprint">elm_object_tooltip_hide(parent);
elm_object_tooltip_show(parent);
</pre>

<p>The tooltip can be removed from the parent object when it is not needed.</p>
<pre class="prettyprint">elm_object_tooltip_unset(parent);</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">When content is set into the tooltip object, unsetting it calls the callback provided as del_cb to notify that the tooltip cannot be used any longer.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>A tooltip object is not a widget, so it does not emit signals. There are no registered callbacks for it.</p>


			</div>
		</li>
		
		<li>
			<div class="devicespec-tit">
				<h2 id="win" name="win" class="items-tit-h2">Win Widget</h2>
				<span class="fr"><a href="#" class="bt-arr"><em>Hide</em></a></span>
			</div>
			<div class="devicespec-con">

    <p class="figure">Figure: Win hierarchy</p> 
  <p style="text-align:center;"><img alt="Win hierarchy" src="../../images/win_tree.png" /></p>   
 

<p> The window widget is the root widget that is often used in an application. It allows the developer create content in it, and it is handled by the window manager.</p>
<p>The window widget is created with <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span>. Content can be added in the window with <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> so that a window resize also resizes the content inside.</p>

<h3>Adding a Window Widget</h3>

<p>Create a new window and change the title.</p>
<pre class="prettyprint">
Evas_Object *window;

// Creating a window 
window = elm_win_add(NULL, &quot;main&quot;, ELM_WIN_BASIC);

// Change window title 
elm_win_title_set(window, &quot;Example Window&quot;);
</pre>

<p>The first element of <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> is the parent window. For example, for a dialog you want to have the main window as the parent. Here, it is NULL meaning there is no parent. &quot;main&quot; is the name of the window used by the window manager for identifying the window uniquely amongst all the windows within this application (and all instances of the application). The type is a basic window (the final parameter).</p>

<p>Create a new window with a title and a background. This API is a shortcut of the previous one. It also creates a standard background to the window with <span style="font-family: Courier New,Courier,monospace">elm_bg_add</span>. The window created is of the type ELM_WIN_BASIC.</p>

<pre class="prettyprint">
Evas_Object *window;

// Creating a standard window 

window = elm_win_util_standard_add(&quot;main&quot;, &quot;Example Window&quot;);
</pre>

<h3>Closing a Window</h3>
<p>When the user closes the window outside of the program control, a &quot;delete,request&quot; signal is emitted to indicate that this event occurred. The developer can take any action, for example, destroy the window object.</p>
<p>When the autodel parameter is set, the window is automatically destroyed after the signal is emitted. If autodel is <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>, the window is not destroyed and the program does so when required. The default is <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>, where the window is not destroyed automatically.</p>
<p>The autodel is set using the following call:</p>
<pre class="prettyprint">elm_win_autodel_set(window, EINA_TRUE);</pre>

<p>To close the window, use the <span style="font-family: Courier New,Courier,monospace">evas_object_del</span> API. The window is destroyed and the signal &quot;delete,request&quot; is sent.</p>

<h3>Using the Window Callbacks</h3>
<p>The window widget emits the following signals:</p>
<ul class="ul">
<li>&quot;focus,in&quot;: The window received focus.</li>
<li>&quot;focus,out&quot;: The window lost focus.</li>
<li>&quot;moved&quot;: The window that holds the canvas is moved.</li>
<li>&quot;withdrawn&quot;: The window is managed normally but is removed from the view.</li>
<li>&quot;iconified&quot;: The window is minimized (for example, into an icon or a taskbar).</li>
<li>&quot;normal&quot;: The window is in the normal state (not withdrawn or iconified).</li>
<li>&quot;stick&quot;: The window shows on all desktops.</li>
<li>&quot;unstick&quot;: The window shows only on one desktop.</li>
<li>&quot;fullscreen&quot;: The window is fullscreen.</li>
<li>&quot;unfullscreen&quot;: The window stops being fullscreen.</li>
<li>&quot;maximized&quot;: The window is maximized.</li>
<li>&quot;unmaximized&quot;: The window is diminished.</li>
<li>&quot;wm,rotation,changed&quot;: The rotation of the window is changed by the Windows Manager.</li>
<li>&quot;ioerr&quot;: A low-level I/O error occurred in the display system.</li>
</ul>
<p>With all these signals, event_info is NULL.</p>
<p>This is an example to register a callback function called on the &quot;fullscreen&quot; signal.</p>
<pre class="prettyprint">{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(window, &quot;fullscreen&quot;, fullscreen_cb, data);
}

// Callback function for the &quot;fullscreen&quot; signal
// This callback is called when the window becomes fullscreen

void fullscreen_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Window fullscreen\n&quot;);
}
</pre>

			</div>
		</li>
	
		

		
	</ul>	
</div>				
</div>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

