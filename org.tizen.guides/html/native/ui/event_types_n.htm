<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Event Types</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
				
				<li><a href="#ecore">Ecore Events</a></li>
				<li><a href="#edje">Edje Events</a></li>
				<li><a href="#evas">Evas Events</a></li>
				<li><a href="#evas_object">Evas Object Events</a></li>
				<li><a href="#evas_smart_object">Evas Smart Object Events</a></li>
		</ul>
	<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/ui/events_effects_tutorials_n.htm">Event and Effect Tutorials</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Ecore__Group.html">Ecore API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje__Group.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>				
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Evas.html">Evas API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Ecore__Group.html">Ecore API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Edje__Group.html">Edje API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Elementary.html">Elementary API for Wearable Native</a></li>				
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__Evas.html">Evas API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

  <h1>Event Types</h1> 
  
  
  
  <h2 id="ecore" name="ecore">Ecore Events</h2>

<h3>Table of Contents</h3>

<ul><li><a href="#ecore_events_useful_for_shortcuts">Ecore Events Useful for Shortcuts</a></li>
<li><a href="#ecore_event_handler_add">Add an Event Handler: ecore_event_handler_add()</a></li>
<li><a href="#ecore_event_handler_del">Remove an Event Handler: ecore_event_handler_del()</a></li>
<li><a href="#ecore_event_add">Send Events to the Main Loop Yourself: ecore_event_add()</a></li>
<li><a href="#ecore_event_type_new">Create Your Own Type of Events: ecore_event_type_new()</a></li>
</ul>

<p>Ecore events are used for low-level handling of events such as key presses, network connections, and communication with sub-processes.</p>
<p>The low-level handling of key presses is particularly useful for shortcuts: instead of adding a signal handler to a specific graphical element, you can add one globally. This guarantees that no matter which UI component is currently receiving events, the shortcut is caught.</p>
<p>Note that ecore events are also used to implement new graphical back-ends, but they are low-level and not useful for most applications.</p>
<h3 id="ecore_events_useful_for_shortcuts">Ecore Events Useful for Shortcuts</h3>

<p>There are eight ecore events for shortcuts:</p>
<pre class="prettyprint">int ECORE_EVENT_KEY_DOWN;
int ECORE_EVENT_KEY_UP;
int ECORE_EVENT_MOUSE_BUTTON_DOWN;
int ECORE_EVENT_MOUSE_BUTTON_UP;
int ECORE_EVENT_MOUSE_MOVE;
int ECORE_EVENT_MOUSE_WHEEL;
int ECORE_EVENT_MOUSE_IN;
int ECORE_EVENT_MOUSE_OUT;
</pre>
<p>The callbacks receive additional data through a <span style="font-family: Courier New,Courier,monospace">void *</span> object, whose type depends on the event that has been received.</p>
<ul>
<li>for ECORE_EVENT_KEY_DOWN and ECORE_EVENT_KEY_UP: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Key Ecore_Event_Key;

struct _Ecore_Event_Key 
{
&nbsp;&nbsp;&nbsp;const char *keyname;
&nbsp;&nbsp;&nbsp;const char *key;
&nbsp;&nbsp;&nbsp;const char *string;
&nbsp;&nbsp;&nbsp;const char *compose;
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;
};
</pre>

</li>

<li>for ECORE_EVENT_MOUSE_BUTTON_DOWN and ECORE_EVENT_MOUSE_BUTTON_UP: 
<pre class="prettyprint">typedef struct _Ecore_Event_Mouse_Button Ecore_Event_Mouse_Button;
struct _Ecore_Event_Mouse_Button 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;
&nbsp;&nbsp;&nbsp;unsigned int buttons;
&nbsp;&nbsp;&nbsp;unsigned int double_click;
&nbsp;&nbsp;&nbsp;unsigned int triple_click;
&nbsp;&nbsp;&nbsp;int same_screen;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;

&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 0 if normal mouse, 1+ for other mouse-devices (eg multi-touch - other fingers)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int device; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Radius of press point - radius_x and y if its an ellipse (radius is the average of the 2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double radius, radius_x, radius_y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pressure - 1.0 == normal, &gt; 1.0 == more, 0.0 == none
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double pressure; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Angle relative to perpendicular (0.0 == perpendicular), in degrees
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double angle; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Same as x, y root.x, root.y, but with sub-pixel precision, if available
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} root;
&nbsp;&nbsp;&nbsp;} multi;
};
</pre>
 
</li>
<li>for ECORE_EVENT_MOUSE_MOVE and ECORE_EVENT_MOUSE_WHEEL: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Mouse_Wheel Ecore_Event_Mouse_Wheel;
struct _Ecore_Event_Mouse_Wheel 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;
&nbsp;&nbsp;&nbsp;int direction;
&nbsp;&nbsp;&nbsp;int z;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;
};
</pre>
</li>
<li>for ECORE_EVENT_MOUSE_IN and int ECORE_EVENT_MOUSE_OUT: 
<pre class="prettyprint">
typedef struct _Ecore_Event_Mouse_Move Ecore_Event_Mouse_Move;
struct _Ecore_Event_Mouse_Move 
{
&nbsp;&nbsp;&nbsp;Ecore_Window window;
&nbsp;&nbsp;&nbsp;Ecore_Window root_window;
&nbsp;&nbsp;&nbsp;Ecore_Window event_window;

&nbsp;&nbsp;&nbsp;unsigned int timestamp;
&nbsp;&nbsp;&nbsp;unsigned int modifiers;

&nbsp;&nbsp;&nbsp;int same_screen;

&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int y;
&nbsp;&nbsp;&nbsp;} root;

&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int device; // 0 if normal mouse, 1+ for other mouse-devices (eg multi-touch - other fingers)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double radius, radius_x, radius_y; // radius of press point - radius_x and y if it is an ellipse (radius is the average of the two)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double pressure; // pressure - 1.0 == normal, &gt; 1.0 == more, 0.0 == none
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double angle; // angle relative to perpendicular (0.0 == perpendicular), in degrees
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y; // same as x, y root.x, root.y, but with sub-pixel precision, if available
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double x, y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} root;
&nbsp;&nbsp;&nbsp;} multi;
};
</pre>

</li>
</ul>
<h3 id="ecore_event_handler_add" name="ecore_event_handler_add">Add an Event Handler: ecore_event_handler_add()</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_add()</span> function enables registering a callback for the given event. Its prototype is:</p>
<pre class="prettyprint">
Ecore_Event_Handler* 
ecore_event_handler_add(int type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecore_Event_Handler_Cb func,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void* data)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">type</span> is an identifier for the event; for example, if you wish to receive notifications when keys are pressed, give <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_DOWN</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">func</span> is the callback that is called when the event takes place.</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is a pointer to additional data that is given as the argument to the callback; it is optional and <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
<li>return value is a pointer to the event handler, which can be used later to uninstall the handler.</li>
</ul>

<p>The type of the callback function is defined as follows.</p>
<pre class="prettyprint">
Eina_Bool (* Ecore_Event_Handler_Cb) (void *data, int type, void *event)</pre>
<p>The callback function declaration is similar to:</p>
<pre class="prettyprint">Eina_Bool some_ecore_event_cb(void *data, int type, void *event);</pre>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the same as the <span style="font-family: Courier New,Courier,monospace">data</span> which was given as a parameter to ecore_event_handler_add().</li>
<li><span style="font-family: Courier New,Courier,monospace">type</span> is the same as the <span style="font-family: Courier New,Courier,monospace">type</span> which was given as a parameter to ecore_event_handler_add().</li>
<li><span style="font-family: Courier New,Courier,monospace">event</span> is an object whose actual type depends on the value of the <span style="font-family: Courier New,Courier,monospace">type</span> parameter and is one of <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Key</span>, <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Button</span>, <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Wheel</span>, <span style="font-family: Courier New,Courier,monospace">Ecore_Event_Mouse_Move</span>.</li>
<li>The return value is either <span style="font-family: Courier New,Courier,monospace">ECORE_CALLBACK_PASS_ON</span>, to allow other callbacks for that event be called, or <span style="font-family: Courier New,Courier,monospace">ECORE_CALLBACK_DONE</span> to not call them.</li>
</ul>
<p>The code below is a short example of how to set a global variable to <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> when the Control key is pressed.</p>
<pre class="prettyprint">
Eina_Bool ctrl_pressed = EINA_FALSE;

static Eina_Bool
_key_down_cb(void *data __UNUSED__, int type __UNUSED__, void *ev)
{
&nbsp;&nbsp;&nbsp;// The callback is used with the ECORE_EVENT_KEY_DOWN signal: the
&nbsp;&nbsp;&nbsp;// parameter &quot;void *ev&quot; is therefore of the actual type Ecore_Event_Key
&nbsp;&nbsp;&nbsp;// The following renders its fields accessible
&nbsp;&nbsp;&nbsp;Ecore_Event_Key *event = ev;

&nbsp;&nbsp;&nbsp;// Test whether the key that is pressed is Ctrl.
&nbsp;&nbsp;&nbsp;if (!strcmp(&quot;Control_L&quot;, event-&gt;key))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If it is, store that piece of information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ctrl_pressed = EINA_TRUE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Let the event continue to other callbacks which have not been called yet
&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_PASS_ON;
}

ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, _key_down_cb, NULL);
</pre>

<h3 id="ecore_event_handler_del" name="ecore_event_handler_del">Remove an Event Handler: ecore_event_handler_del()</h3>
<p>To remove an event handler, use the <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_del()</span> function. The prototype is:</p>
<pre class="prettyprint">
void* ecore_event_handler_del(Ecore_Event_Handler *event_handler)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">event_handler</span> is the value returned by <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_add()</span>.</li>
<li>The return value is the <span style="font-family: Courier New,Courier,monospace">data</span> pointer that was used in the corresponding call to <span style="font-family: Courier New,Courier,monospace">ecore_event_handler_add()</span>.</li>
</ul>
<h3 id="ecore_event_add" name="ecore_event_add">Send Events to the Main Loop Yourself: ecore_event_add()</h3>
<p>You can send events to the main-loop, which helps to handle actions of various origins through the same codepath. Note that this is a thread-safe operation.</p>
<p>To send an event, use the <span style="font-family: Courier New,Courier,monospace">ecore_event_add()</span> function. The prototype is </p>
<pre class="prettyprint">Ecore_Event* 
ecore_event_add(int type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void* ev,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Ecore_End_Cb func_free,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void* func_free_data)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">type</span> is the event type. For example, <span style="font-family: Courier New,Courier,monospace">ECORE_EVENT_KEY_DOWN</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">ev</span> is the event data. It is given as a parameter to the callback.</li>
<li><span style="font-family: Courier New,Courier,monospace">func_free</span> is a function to free <span style="font-family: Courier New,Courier,monospace">ev</span> after the callback is called. It is optional: <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
<li><span style="font-family: Courier New,Courier,monospace">func_free_data</span> is a pointer to additional data that is given as an argument to the <span style="font-family: Courier New,Courier,monospace">func_free</span> callback. It is optional: <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
</ul>

<p>The type of the <span style="font-family: Courier New,Courier,monospace">func_free</span> function is defined as follows.</p>
<pre class="prettyprint">void (* Ecore_End_Cb)(void *user_data, void *func_free_data)</pre>
<p>The callback function declaration is thus similar to</p>
<pre class="prettyprint">void some_func_free(void *user_data, void *func_free_data);</pre>

<h3 id="ecore_event_type_new" name="ecore_event_type_new">Create Your Own Type of Events: ecore_event_type_new()</h3>

<p>You can create your own events. It also helps to use a single codepath.</p>
<p>The function for creating your own events is <span style="font-family: Courier New,Courier,monospace">ecore_event_type_new()</span>. The prototype is: </p>
<pre class="prettyprint">int ecore_event_type_new(void);</pre>
<p>It generates a new unique identifier, which you can use as <span style="font-family: Courier New,Courier,monospace">type</span> in the functions described above.</p>
  
  <h2 id="edje" name="edje">Edje Events</h2>

<h3>Table of Contents</h3>
<ul>
<li><a href="#events_guide_edje_without_layout">Basic Usage, for a Single Part</a></li>
<li><a href="#events_guide_edje_with_layout">Usual Usage for Parts Aggregated in Groups: with Layouts</a></li>
</ul>

<p>Edje themes have <span style="font-family: Courier New,Courier,monospace">program</span> sections. These are small sections triggered upon the reception of a signal that can execute actions, such as changing the state of an edje part and running another program.</p>
<p>For more information on themes and programs, see the <a href="edje_n.htm">Edje</a> guide.</p>

<h3 id="events_guide_edje_without_layout" name="events_guide_edje_without_layout">Basic Usage for a Single Part</h3>
<p>An example <span style="font-family: Courier New,Courier,monospace">program</span> is shown below: </p>
<pre class="prettyprint">program 
{
&nbsp;&nbsp;&nbsp;name: &quot;change_color&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,*&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;*&quot;;
&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;got.a.click&quot; &quot;color_changer&quot;;
}
</pre>
<p>This is a program named &quot;change_color&quot;, which triggers on mouse clicks on the current part and emits a signal &quot;got.a.click&quot;. The source is set to &quot;color_changer&quot;.</p>

<p>To catch this signal from the C side, you need to use either <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span>. The only difference between the two is that the previous one operates on an edje object and the latter one on an elementary object. Unless you do not use Elementary at all, use the Elementary variant.</p>
<p>The prototypes of these two functions are shown below.</p>
<pre class="prettyprint">void
edje_object_signal_callback_add(Edje_Object *obj, const char *emission, const char *source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edje_Signal_Cb func, void *data)
</pre>
<pre class="prettyprint">void
elm_object_signal_callback_add(Evas_Object *obj, const char *emission, const char *source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edje_Signal_Cb func, void *data)
</pre>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> the object which emits the signal that you react on.</li>
<li><span style="font-family: Courier New,Courier,monospace">emission</span> is the signal name (&quot;*&quot; acts as a wildcard).</li>
<li><span style="font-family: Courier New,Courier,monospace">source</span> is the signal source (the second parameter to <span style="font-family: Courier New,Courier,monospace">SIGNAL_EMIT</span> above). (&quot;*&quot; acts as a wildcard.)</li>
<li><span style="font-family: Courier New,Courier,monospace">func</span> is the callback when <span style="font-family: Courier New,Courier,monospace">emission</span> and <span style="font-family: Courier New,Courier,monospace">source</span> match.</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is a pointer to additional data to pass that is given as the argument to the callback. It is optional and NULL is an acceptable value.</li>
</ul>

<p>The type of the callback function is defined as follows. </p>
<pre class="prettyprint">void (*Edje_Signal_Cb) (void *data, Evas_Object *obj, const char *emission, const char *source);</pre>

<p>The callback function definition is similar to</p>
<pre class="prettyprint">void func(void *data, Evas_Object *obj, const char *emission, const char *source);</pre>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the same as the data which was given as parameter to either <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the object which emits the signal.</li>
<li><span style="font-family: Courier New,Courier,monospace">emission</span> is the signal name.</li>
<li><span style="font-family: Courier New,Courier,monospace">source</span> is the signal source.</li>
</ul>

<h3 id="events_guide_edje_with_layout" name="events_guide_edje_with_layout">Usual Usage for Parts Aggregated in Groups: with Layouts</h3>
<p>Most of the time, edje and elementary are used together. In particular, you can define a group in Edje and use it as a layout in Elementary. This enables doing the theming and object placement in Edje while benefiting from the higher-level functions of Elementary. This is achieved through <span style="font-family: Courier New,Courier,monospace">layouts</span>, which contain several parts and are explained in the Layout guide (in <a href="containers_mn.htm#layout">mobile</a> and <a href="containers_wn.htm#layout">wearable</a> applications).</p>
<p>Since there are several parts in a layout, it is not possible to use <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> and <span style="font-family: Courier New,Courier,monospace">edje_object_signal_callback_add()</span>, as they require a single emitter object. The solution is to use the dedicated function <span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span>. Its prototype is shown below.</p>
<pre class="prettyprint">void
elm_layout_signal_callback_add(Evas_Object *obj, const char *emission, const char *source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Edje_Signal_Cb func, void *data)
</pre>

<p><span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span> works very similarly to the functions described in the previous section. The only difference is the type of the object in the first parameter. For <span style="font-family: Courier New,Courier,monospace">elm_layout_signal_callback_add()</span> it is a pointer to an Evas_Object, which is obtained through <span style="font-family: Courier New,Courier,monospace">elm_layout_add()</span> as described in the Layout guide (in <a href="containers_mn.htm#layout">mobile</a> and <a href="containers_wn.htm#layout">wearable</a> applications). </p>

  


  
  
  <h2 id="evas" name="evas">Evas Events</h2>

<h3>Table of Contents</h3>
<ul>
<li><a href="#evas_event_callback_add_del">Adding Callbacks to Canvases: evas_event_callback_add/del</a></li>
<li><a href="#evas_events_types">Types of Evas Events</a></li>
</ul>

<p>Evas events happen on a canvas as a whole. This kind of events are too low-level for writing applications and are most often used when writing the graphical toolkit itself.</p>

<h3 id="evas_event_callback_add_del" name="evas_event_callback_add_del">Adding Callbacks to Canvases: evas_event_callback_add/del</h3>
<p>The callbacks are added with <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span>. Its prototype is</p>
<pre class="prettyprint">void
evas_event_callback_add(Evas* e, Evas_Callback_Type type, Evas_Event_Cb func, const void* data)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">e</span> is the evas canvas on which the events happen. If needed, it can be obtained from an Evas_Object through the <span style="font-family: Courier New,Courier,monospace">evas_object_evas_get()</span> function.</li>
<li><span style="font-family: Courier New,Courier,monospace">type</span> is the type of event that triggers the callback (the list is in the next section).</li>
<li><span style="font-family: Courier New,Courier,monospace">func</span> is the function that is called.</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is a pointer to additional data that is given as an argument to the callback. It is optional and <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
</ul>

<p>The type of the callback function is defined as follows.</p>
<pre class="prettyprint">void (* Evas_Event_Cb) (void *data, Evas *e, void *event_info)</pre>

<p>The callback function definition is similar to</p>
<pre class="prettyprint">void some_evas_object_event_cb(void *data, Evas *e, void *event_info);</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the same as the <span style="font-family: Courier New,Courier,monospace">data</span> which was given as the parameter to <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">e</span> is the canvas on which the event occurred.</li>
<li><span style="font-family: Courier New,Courier,monospace">event_info</span> is data which depends on the object type and the event at play. The documentation must be read for each such event.</li>
</ul>

<h3 id="evas_events_types" name="evas_events_types">Types of Evas Events</h3>
<p>The values are defined from the <span style="font-family: Courier New,Courier,monospace">Evas_Callback_Type</span> enum. Some of them are not used for <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span> but are used in the previous section.</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_FLUSH_PRE</span>: The rendering on the canvas is about to be updated.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_FLUSH_POST</span>: The rendering on the canvas is updated.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_FOCUS_IN</span>: The canvas receives focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_FOCUS_OUT</span>: The canvas loses focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_OBJECT_FOCUS_IN</span>: Any object on the canvas receives focus. It is advisable to use <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> and <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_IN</span> instead.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CANVAS_OBJECT_FOCUS_OUT</span>: Any object on the canvas loses focus. It is advisable to use <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> and <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_OUT</span> instead.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_PRE</span>: Rendering on the canvas starts.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RENDER_POST</span>: Rendering on the canvas finishes. </li>
</ul>

  <h2 id="evas_object" name="evas_object">Evas Object Events</h2>



<h3>Table of Contents</h3>
<ul>
<li><a href="#evas_object_event_callback_add_del">Adding and Removing Callbacks: evas_object_event_callback_add/del</a></li>
<li><a href="#evas_object_events_types">Types of Evas Object Events</a></li>
</ul>

<p>Each of the evas objects on a given evas canvas can be manipulated independently. They send events, to which callbacks can be attached through <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> and removed with <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_del()</span>. These events all relate to single objects, not the whole canvas.</p>

<h3 id="evas_object_event_callback_add_del" name="evas_object_event_callback_add_del">Adding and Removing Callbacks: evas_object_event_callback_add/del</h3>
<p>Callbacks are added with <span style="font-family: Courier New,Courier,monospace">evas_event_callback_add()</span>. Its prototype is</p>
<pre class="prettyprint">void
evas_object_event_callback_add(Evas_Object* obj, Evas_Callback_Type type, Evas_Object_Event_Cb func, const void* data)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the object to attach the callback to.</li>
<li><span style="font-family: Courier New,Courier,monospace">type</span> is the type of event that triggers the callback (the list is in the next section).</li>
<li><span style="font-family: Courier New,Courier,monospace">func</span> is the function that is called.</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is a pointer to additional data that is given as the argument to the callback. It is optional and <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
</ul>

<p>The type of the callback function is defined as follows.</p>
<pre class="prettyprint">
void (* Evas_Object_Event_Cb) (void *data, Evas *e, Evas_Object *obj, void *event_info)
</pre>

<p>The callback function definition is similar to</p>
<pre class="prettyprint">
void some_evas_object_event_cb(void *data, Evas *e, Evas_Object *obj, void *event_info);
</pre>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the same as the <span style="font-family: Courier New,Courier,monospace">data</span> which was given as the parameter to <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">e</span> is the canvas on which the event occurred.</li>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the object to which the event happened.</li>
<li><span style="font-family: Courier New,Courier,monospace">event_info</span> is data which depends on the object type and event at play. The documentation must be read for each event.</li>
</ul>
<h3 id="evas_object_events_types" name="evas_object_events_types">Types of Evas Object Events</h3>
<p>The values are defined from the <span style="font-family: Courier New,Courier,monospace">Evas_Callback_Type</span> enum. Some of them are not used for <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span>, but are used in the next section.</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span>: the pointer got over an object (with no other object between the two). This takes place no matter how the pointer becomes directly above the object. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_OUT</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_IN</span>, but when the pointer goes outside an object&#39;s area. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Out</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>: a mouse button is pressed while the object is receiving events (either because the pointer is on top of the object or because the object had focus). <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_UP</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_MOVE</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Move</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_WHEEL</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Wheel</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_DOWN</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_UP</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MULTI_MOVE</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Multi_Move</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_KEY_DOWN</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Key_Down</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_KEY_UP</span>: triggered similarly to <span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOUSE_DOWN</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Key_Up</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_IN</span>: the object gained focus. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FOCUS_OUT</span>: the object lost focus. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_In</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_SHOW</span>: the object is shown by a call to <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_HIDE</span>: the object is hidden by a call to <span style="font-family: Courier New,Courier,monospace">evas_object_hide()</span>. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_MOVE</span>: the object&#39;s origin was moved (origin is the top-left corner at the creation time of the object). <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RESIZE</span>: the object is resized. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_RESTACK</span>: the object is re-stacked by <span style="font-family: Courier New,Courier,monospace">evas_object_stack_below()</span>, <span style="font-family: Courier New,Courier,monospace">evas_object_stack_above()</span> or other events. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_DEL</span>: the object is deleted.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_FREE</span>: for internal use only. Do not use (the object resources are about to be freed). <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_HOLD</span>: for internal use only. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Event_Hold</span> struct.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_CHANGED_SIZE_HINTS</span>: the size hints of the object changed.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_IMAGE_PRELOADED</span>: an image which was preloaded through <span style="font-family: Courier New,Courier,monospace">evas_object_image_preload()</span> is loaded. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
<li><span style="font-family: Courier New,Courier,monospace">EVAS_CALLBACK_IMAGE_UNLOADED</span>: the image data is unloaded. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback is NULL.</li>
</ul>

<h2 id="evas_smart_object" name="evas_smart_object">Evas Smart Object Events</h2>

<h3>Table of Contents</h3>
<ul>
<li><a href="#evas_object_smart_callback_add">Adding a Callback on an Event: evas_object_smart_callback_add()</a></li>
<li><a href="#evas_object_smart_callback_del">Removing a Callback on an Event: evas_object_smart_callback_del()</a></li>
<li><a href="#evas_smart_objects_examples">Examples</a>
	<ul><li><a href="#evas_object_smart_callback_add_example">Basic Usage: Button with a Callback on the &quot;clicked&quot; Signal</a></li>
	<li><a href="#evas_object_smart_callback_del_example">Usage with evas_object_smart_callback_del(): Clicking on the Button Removes the Callback</a></li>
	</ul>
</li>
</ul>

<p>Evas smart objects events are the most widely-used type of events in graphical applications, since they are used for signals such as &quot;clicked&quot;, &quot;clicked,double&quot; (double-click), &quot;pressed&quot;, etc. They are identified by strings and each smart object is able to define its own events (although the names follow conventions).</p>

<h3 id="evas_object_smart_callback_add" name="evas_object_smart_callback_add">Adding a Callback on an Event: evas_object_smart_callback_add()</h3>

<p>Use the <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function to add a callback for an event to an object. Its prototype is</p>
<pre class="prettyprint">
void
evas_object_smart_callback_add(Evas_Object* obj, const char* event, Evas_Smart_Cb func, const void* data)
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the object to add the callback to.</li>
<li><span style="font-family: Courier New,Courier,monospace">event</span> is the name of the event.</li>
<li><span style="font-family: Courier New,Courier,monospace">func</span> is the function that is called.</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is a pointer to additional data that is given as the argument to the callback. It is optional and <span style="font-family: Courier New,Courier,monospace">NULL</span> is an acceptable value.</li>
</ul>
<p>The type of the callback function is defined as follows.</p>
<pre class="prettyprint">
void (* Evas_Smart_Cb) (void *data, Evas_Object *obj, void *event_info)</pre>
<p>The callback function definition is similar to</p>
<pre class="prettyprint">void some_evas_smart_cb(void *data, Evas_Object *obj, void *event_info);</pre>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the same as the <span style="font-family: Courier New,Courier,monospace">data</span> which is given as the parameter to evas_object_smart_callback_add().</li>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the object for which the event happened.</li>
<li><span style="font-family: Courier New,Courier,monospace">event_info</span> is data, which depends on the object type and event at play. The actual type is given in the documentation for the callback that is triggered.</li>
</ul>
<p>The following defines the <span style="font-family: Courier New,Courier,monospace">_button_clicked()</span> function and sets it as the callback for the <span style="font-family: Courier New,Courier,monospace">clicked</span> event of an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> (a button here).</p>
<pre class="prettyprint">
static void
_button_clicked(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Insert function body here
}

static void
some_function(void) 
{
&nbsp;&nbsp;&nbsp;// Code to build the window object
&nbsp;&nbsp;&nbsp;Evas_Object *button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);
}
</pre>

<p>If some of the arguments are not used by the callback function, the compiler may raise the &quot;unused parameter&quot; warning. To avoid it, you can annotate the argument with the <span style="font-family: Courier New,Courier,monospace">__UNUSED__</span> macro, which is a compiler-independent way to let the compiler know that the parameter is willingly unused rather than by a mistake.</p>
<pre class="prettyprint">void cb(void *data __UNUSED__, Evas_Object *obj, void *event_info __UNUSED__);</pre>

<p>For a given object and event, callbacks are called in the order they have been added. The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function does not execute any special processing if it is called several times with the same callback function and/or data. Callbacks are called as many times as they have been added and in the order they have been added.</p>

<h3  id="evas_object_smart_callback_del" name="evas_object_smart_callback_del">Removing a Callback on an Event: evas_object_smart_callback_del()</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_del()</span> function enables deleting a callback for a signal on an object. Its prototype is</p>

<pre class="prettyprint">void*
evas_object_smart_callback_del(Evas_Object* obj, const char* event, Evas_Smart_Cb func)
</pre>

<p>It removes the first match for the given event and callback and returns the <span style="font-family: Courier New,Courier,monospace">data</span> pointer that was used in the corresponding call to <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span>.</p>

<h3 id="evas_smart_objects_examples" name="evas_smart_objects_examples">Examples</h3>
<h4 id="evas_object_smart_callback_add_example" name="evas_object_smart_callback_add_example">Basic Usage: Button with a Callback on the &quot;clicked&quot; Signal</h4>
<pre class="prettyprint">static void
_button_clicked(void *data __UNUSED__, Evas_Object *obj __UNUSED__, void *event_info __UNUSED__)
{
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Button clicked.\n&quot;);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;elm_exit();
}

static void
_add_button(Evas_Object *window) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *button;

&nbsp;&nbsp;&nbsp;button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Click Me To Exit!&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(button);
}
</pre>

<h4 id="evas_object_smart_callback_del_example" name="evas_object_smart_callback_del_example">Usage with evas_object_smart_callback_del(): Clicking on the Button Removes the Callback</h4>
<pre class="prettyprint">static void
_button_clicked(void *data __UNUSED__, Evas_Object *obj, void *event_info __UNUSED__)
{
&nbsp;&nbsp;&nbsp;fprintf(stdout, &quot;Button clicked.\n&quot;);
&nbsp;&nbsp;&nbsp;fflush(stdout);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_del(obj, &quot;clicked&quot;, _button_clicked);
}

static void
_add_button(Evas_Object *window) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *button;

&nbsp;&nbsp;&nbsp;button = elm_button_add(window);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;Click Me!&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, _button_clicked, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(button);
}
</pre>

  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer"> 
<p class="footer">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p> 
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>