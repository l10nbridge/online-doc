<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>i18n</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#ubrk">Ubrk</a></li>
			<li><a href="#ucalendar">Ucalendar</a></li>
			<li><a href="#uchar">Uchar</a></li>
			<li><a href="#ucoll">Ucollator</a></li>
			<li><a href="#udate">Udate</a></li>
			<li><a href="#udatepg">Udatepg</a></li>
			<li><a href="#uenumeration">Uenumeration</a></li>
			<li><a href="#ulocale">Ulocale</a></li>
			<li><a href="#unormal">Unormalization</a></li>
			<li><a href="#unumber">Unumber</a></li>
			<li><a href="#usearch">Usearch</a></li>
			<li><a href="#uset">Uset</a></li>
			<li><a href="#ustring">Ustring</a></li>				
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm">i18n Tutorial</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">i18n API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">i18n API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>i18n</h1>

<p>You can generate flexible number or date format patterns, format and parse dates and numbers for any locale, and <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#tmz">manage time zones</a>. The i18n API is implemented by using the ICU library.</p>

<h2 id="ubrk" name="ubrk">Ubrk</h2>
<p>The Ubrk API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UBRK__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UBRK__MODULE.html">wearable</a> applications) is used to <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#ubrk">find the location of boundaries in text</a>. The <span style="font-family: Courier New,Courier,monospace">i18n_ubreak_iterator_h</span> handle maintains a current position and scans over the text returning the index of characters where the boundaries occur.</p>
<p>The following boundary analyzing methods are available:</p>
<ul>
	<li>Line boundary analysis determines where a text string can be broken when line-wrapping. The mechanism correctly handles punctuation and hyphenated words.</li>
	<li>Sentence boundary analysis allows selection with correct interpretation of periods within numbers and abbreviations, and trailing punctuation marks, such as quotation marks and parentheses.</li>
	<li>Word boundary analysis is used by search and replace functions, as well as within text editing applications that allow the user to select words with a double-click. Word selection provides correct interpretation of punctuation marks within and following words. Characters that are not part of a word, such as symbols or punctuation marks, have word-breaks on both sides.</li>
	<li>Character boundary analysis identifies the boundaries of Extended Grapheme Clusters, which are groupings of codepoints that must be treated as character-like units for many text operations. For additional information on grapheme clusters and guidelines on their use, see <a href="http://www.unicode.org/reports/tr29/tr29-21.html" target="_blank">Unicode Standard Annex #29, Unicode Text Segmentation</a>.</li>
	<li>Title boundary analysis locates all positions, typically starts of words, that must be set to Title Case when title casing the text.</li>
	<li>The text boundary positions are found according to the rules described in <a href="http://www.unicode.org/reports/tr29/tr29-21.html" target="_blank">Unicode Standard Annex #29, Unicode Text Segmentation</a>, and <a href="http://www.unicode.org/reports/tr14/tr14-30.html" target="_blank">Unicode Standard Annex #14, Unicode Line Breaking Algorithm</a>.</li>
</ul>


<h2 id="ucalendar" name="ucalendar">Ucalendar</h2>

<p>The Ucalendar API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCALENDAR__MODULE.html">wearable</a> applications) is used for <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#dates">converting between a Udate object and a set of integer fields</a>, such as <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_YEAR</span>, <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_MONTH</span>, <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_DAY</span>, and <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_HOUR</span>. A <a href="#udate">Udate</a> object represents a specific instant in time with one millisecond precision.</p>
<p>The types of Ucalendar interpret a Udate according to the rules of a specific calendar system, such as the gregorian or traditional system.</p>
<p>A Ucalendar object can produce all the time field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional).</p>

<p>When computing a Udate from the time fields, 2 special circumstances can arise. The information can be insufficient to compute the Udate (you have only the year and the month, but not the day of the month), or the information can be inconsistent (such as &quot;Tuesday, July 15, 1996&quot; even though July 15, 1996 is actually a Monday).</p>
<ul>
<li><strong>Insufficient information</strong> <p>The calendar uses the default information to specify the missing fields. This can vary by calendar: for the Gregorian calendar, the default for a field is the same as that of the start of the epoch, such as <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_YEAR = 1970</span>, <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_MONTH = JANUARY</span>, <span style="font-family: Courier New,Courier,monospace;">I18N_UCALENDAR_DATE = 1</span>.</p></li>
<li><strong>Inconsistent information</strong> <p>If the fields conflict, the calendar prefers the most recently set fields. For example, when determining the day, the calendar looks for one of the following field combinations listed in the following table. The most recent combination, as determined by the most recently set single field, is used.</p></li>
</ul>
<table> 
   <caption>
     Table: Combinations of the calendar fields to determine the day 
   </caption> 
   <tbody> 
    <tr> 
     <th>Combinations of the calendar fields</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_MONTH + I18N_UCALENDAR_DAY_OF_MONTH</span>
<p><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_MONTH + I18N_UCALENDAR_WEEK_OF_MONTH + I18N_UCALENDAR_DAY_OF_WEEK</span></p>
<p><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_MONTH + I18N_UCALENDAR_DAY_OF_WEEK_IN_MONTH + I18N_UCALENDAR_DAY_OF_WEEK</span></p>
<p><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_DAY_OF_YEAR</span></p>
<p><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_DAY_OF_WEEK + I18N_UCALENDAR_WEEK_OF_YEAR</span></p></td>
</tr> 
   </tbody> 
  </table>

<p>For the time of day:</p>
<table> 
   <caption>
     Table: Combinations of calendar fields to determine the time of the day 
   </caption> 
   <tbody> 
    <tr> 
     <th>Combinations of the calendar fields</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_HOUR_OF_DAY</span>
	 <p><span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_AM_PM + I18N_UCALENDAR_HOUR</span></p></td>
    </tr> 
   </tbody> 
  </table> 

	  <table class="note"> 
	   <tbody> 
		<tr> 
		 <th class="note">Note</th> 
		</tr> 
		<tr> 
		 <td class="note">For some non-Gregorian calendars, different fields are necessary for complete disambiguation. For example, a full specification of the historical
    Arabic astronomical calendar requires the year, month, day-of-month and day-of-week in some cases.</td> 
		</tr> 
	   </tbody> 
	  </table> 

<h2 id="uchar" name="uchar">Uchar</h2>
<p>The Uchar API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCHAR__MODULE.html">wearable</a> applications) provides a low-level access to the Unicode Character Database.</p>
<p>Unicode assigns each code point (not just the assigned character) values for several properties. Most of them are simple boolean flags, or constants from a small enumerated list. For some properties, values are strings or other relatively more complex types.</p>
<p>For more information, see <a href="http://www.unicode.org/ucd/" target="_blank">About the Unicode Character Database</a> and <a href="http://icu-project.org/userguide/properties.html" target="_blank">ICU User Guide chapter on Properties</a>.
</p>

<p>The following table describes the details of script codes that you can get using the <span style="font-family: Courier New,Courier,monospace">i18n_uchar_get_int_property_value()</span> function.
</p>
<table border="1">
   <caption>
     Table: Script codes
   </caption>  
   <tbody>
<tr>
<th>Value</th><th>Code</th><th>English name</th><th>Value</th><th>Code</th><th>English name</th>
</tr>
<tr>   <td>    0       </td><td>       Zyyy    </td><td>       Code for undetermined script    </td><td>       80      </td><td>       Latf    </td><td>       Latin (Fraktur variant)  </td>   </tr>
<tr>   <td>    1       </td><td>       Zinh    </td><td>       Code for inherited script       </td><td>       81      </td><td>       Latg    </td><td>       Latin (Gaelic variant)   </td>   </tr>
<tr>   <td>    2       </td><td>       Arab    </td><td>       Arabic  </td><td>       82      </td><td>       Lepc    </td><td>       Lepcha (Rong)    </td>   </tr>
<tr>   <td>    3       </td><td>       Armn    </td><td>       Armenian        </td><td>       83      </td><td>       Lina    </td><td>       LinearA </td>   </tr>
<tr>   <td>    4       </td><td>       Beng    </td><td>       Bengali </td><td>       84      </td><td>       Mand    </td><td>       Mandaic, Mandaean       </td>   </tr>
<tr>   <td>    5       </td><td>       Bopo    </td><td>       Bopomofo        </td><td>       85      </td><td>       Maya    </td><td>       Mayan hieroglyphs       </td>   </tr>
<tr>   <td>    6       </td><td>       Cher    </td><td>       Cherokee        </td><td>       86      </td><td>       Mero    </td><td>       Meroitic hieroglyphs    </td>   </tr>
<tr>   <td>    7       </td><td>       Copt    </td><td>       Coptic  </td><td>       87      </td><td>       Nkoo    </td><td>       N’Ko  </td>   </tr>
<tr>   <td>    8       </td><td>       Cyrl    </td><td>       Cyrillic        </td><td>       88      </td><td>       Orkh    </td><td>       Old Turkic, Orkhon Runic  </td>   </tr>
<tr>   <td>    9       </td><td>       Dsrt    </td><td>       Deseret (Mormon) </td><td>       89      </td><td>       Perm    </td><td>       Old Permic      </td>   </tr>
<tr>   <td>    10      </td><td>       Deva    </td><td>       Devanagari (Nagari)      </td><td>       90      </td><td>       Phag    </td><td>       Phags-pa        </td>   </tr>
<tr>   <td>    11      </td><td>       Ethi    </td><td>       Ethiopic (Geʻez)        </td><td>       91      </td><td>       Phnx    </td><td>       Phoenician      </td>   </tr>
<tr>   <td>    12      </td><td>       Geor    </td><td>       Georgian (Mkhedruli)     </td><td>       92      </td><td>       Plrd    </td><td>       Miao (Pollard)   </td>   </tr>
<tr>   <td>    13      </td><td>       Goth    </td><td>       Gothic  </td><td>       93      </td><td>       Roro    </td><td>       Rongorongo      </td>   </tr>
<tr>   <td>    14      </td><td>       Grek    </td><td>       Greek   </td><td>       94      </td><td>       Sara    </td><td>       Sarati  </td>   </tr>
<tr>   <td>    15      </td><td>       Gujr    </td><td>       Gujarati        </td><td>       95      </td><td>       Syre    </td><td>       Syriac (Estrangelo variant)       </td>   </tr>
<tr>   <td>    16      </td><td>       Guru    </td><td>       Gurmukhi        </td><td>       96      </td><td>       Syrj    </td><td>       Syriac (Western variant)  </td>   </tr>
<tr>   <td>    17      </td><td>       Hani    </td><td>       Han (Hanzi, Kanji, Hanja)        </td><td>       97      </td><td>       Syrn    </td><td>       Syriac (Eastern variant) </td>   </tr>
<tr>   <td>    18      </td><td>       Hang    </td><td>       Hangul (Hangŭl, Hangeul)        </td><td>       98      </td><td>       Teng    </td><td>       Tengwar </td>   </tr>
<tr>   <td>    19      </td><td>       Hebr    </td><td>       Hebrew  </td><td>       99      </td><td>       Vaii    </td><td>       Vai     </td>   </tr>
<tr>   <td>    20      </td><td>       Hira    </td><td>       Hiragana        </td><td>       100     </td><td>       Visp    </td><td>       Visible Speech  </td>   </tr>
<tr>   <td>    21      </td><td>       Knda    </td><td>       Kannada </td><td>       101     </td><td>       Xsux    </td><td>       Cuneiform, Sumero-Akkadian      </td>   </tr>
<tr>   <td>    22      </td><td>       Kana    </td><td>       Katakana        </td><td>       102     </td><td>       Zxxx    </td><td>       Code for unwritten documents    </td>   </tr>
<tr>   <td>    23      </td><td>       Khmr    </td><td>       Khmer   </td><td>       103     </td><td>       Zzzz    </td><td>       Code for uncoded script </td>   </tr>
<tr>   <td>    24      </td><td>       Laoo    </td><td>       Lao     </td><td>       104     </td><td>       Cari    </td><td>       Carian  </td>   </tr>
<tr>   <td>    25      </td><td>       Latn    </td><td>       Latin   </td><td>       105     </td><td>       Jpan    </td><td>       Japanese (alias for Han+Hiragana+Katakana) </td>   </tr>
<tr>   <td>    26      </td><td>       Mlym    </td><td>       Malayalam       </td><td>       106     </td><td>       Lana    </td><td>       TaiTham (Lanna)  </td>   </tr>
<tr>   <td>    27      </td><td>       Mong    </td><td>       Mongolian       </td><td>       107     </td><td>       Lyci    </td><td>       Lycian  </td>   </tr>
<tr>   <td>    28      </td><td>       Mymr    </td><td>       Myanmar (Burmese)        </td><td>       108     </td><td>       Lydi    </td><td>       Lydian  </td>   </tr>
<tr>   <td>    29      </td><td>       Ogam    </td><td>       Ogham   </td><td>       109     </td><td>       Olck    </td><td>       Ol Chiki (Ol Cemet’, Ol Santali)      </td>   </tr>
<tr>   <td>    30      </td><td>       Ital    </td><td>       Old Italic (Etruscan, Oscan)       </td><td>       110     </td><td>       Rjng    </td><td>       Rejang (Redjang, Kaganga)        </td>   </tr>
<tr>   <td>    31      </td><td>       Orya    </td><td>       Oriya   </td><td>       111     </td><td>       Saur    </td><td>       Saurashtra      </td>   </tr>
<tr>   <td>    32      </td><td>       Runr    </td><td>       Runic   </td><td>       112     </td><td>       Sgnw    </td><td>       SignWriting     </td>   </tr>
<tr>   <td>    33      </td><td>       Sinh    </td><td>       Sinhala </td><td>       113     </td><td>       Sund    </td><td>       Sundanese       </td>   </tr>
<tr>   <td>    34      </td><td>       Syrc    </td><td>       Syriac  </td><td>       114     </td><td>       Moon    </td><td>       Moon (Mooncode, Moonscript, Moontype)    </td>   </tr>
<tr>   <td>    35      </td><td>       Taml    </td><td>       Tamil   </td><td>       115     </td><td>       Mtei    </td><td>       Meitei Mayek (Meithei, Meetei)   </td>   </tr>
<tr>   <td>    36      </td><td>       Telu    </td><td>       Telugu  </td><td>       116     </td><td>       Armi    </td><td>       Imperial Aramaic        </td>   </tr>
<tr>   <td>    37      </td><td>       Thaa    </td><td>       Thaana  </td><td>       117     </td><td>       Avst    </td><td>       Avestan </td>   </tr>
<tr>   <td>    38      </td><td>       Thai    </td><td>       Thai    </td><td>       118     </td><td>       Cakm    </td><td>       Chakma  </td>   </tr>
<tr>   <td>    39      </td><td>       Tibt    </td><td>       Tibetan </td><td>       119     </td><td>       Kore    </td><td>       Korean (alias for Hangul+Han)    </td>   </tr>
<tr>   <td>    40      </td><td>       Cans    </td><td>       Unified Canadian Aboriginal Syllabics   </td><td>       120     </td><td>       Kthi    </td><td>       Kaithi  </td>   </tr>
<tr>   <td>    41      </td><td>       Yiii    </td><td>       Yi      </td><td>       121     </td><td>       Mani    </td><td>       Manichaean      </td>   </tr>
<tr>   <td>    42      </td><td>       Tglg    </td><td>       Tagalog (Baybayin, Alibata)      </td><td>       122     </td><td>       Phli    </td><td>       Inscriptional Pahlavi   </td>   </tr>
<tr>   <td>    43      </td><td>       Hano    </td><td>       Hanunoo (Hanunoo)        </td><td>       123     </td><td>       Phlp    </td><td>       Psalter Pahlavi </td>   </tr>
<tr>   <td>    44      </td><td>       Buhd    </td><td>       Buhid   </td><td>       124     </td><td>       Phlv    </td><td>       Book Pahlavi    </td>   </tr>
<tr>   <td>    45      </td><td>       Tagb    </td><td>       Tagbanwa        </td><td>       125     </td><td>       Prti    </td><td>       Inscriptional Parthian  </td>   </tr>
<tr>   <td>    46      </td><td>       Brai    </td><td>       Braille </td><td>       126     </td><td>       Samr    </td><td>       Samaritan       </td>   </tr>
<tr>   <td>    47      </td><td>       Cprt    </td><td>       Cypriot </td><td>       127     </td><td>       Tavt    </td><td>       TaiViet </td>   </tr>
<tr>   <td>    48      </td><td>       Limb    </td><td>       Limbu   </td><td>       128     </td><td>       Zmth    </td><td>       Mathematical notation    </td>   </tr>
<tr>   <td>    49      </td><td>       Linb    </td><td>       LinearB </td><td>       129     </td><td>       Zsym    </td><td>       Symbols </td>   </tr>
<tr>   <td>    50      </td><td>       Osma    </td><td>       Osmanya </td><td>       130     </td><td>       Bamu    </td><td>       Bamum   </td>   </tr>
<tr>   <td>    51      </td><td>       Shaw    </td><td>       Shavian (Shaw)   </td><td>       131     </td><td>       Lisu    </td><td>       Lisu (Fraser)    </td>   </tr>
<tr>   <td>    52      </td><td>       Tale    </td><td>       TaiLe   </td><td>       132     </td><td>       Nkgb    </td><td>       Nakhi Geba ('Na-'Khi ²Ggŏ-¹baw, Naxi Geba)    </td>   </tr>
<tr>   <td>    53      </td><td>       Ugar    </td><td>       Ugaritic        </td><td>       133     </td><td>       Sarb    </td><td>       Old South Arabian       </td>   </tr>
<tr>   <td>    54      </td><td>       Hrkt    </td><td>       Japanese syllabaries (alias for Hiragana+Katakana)       </td><td>       134     </td><td>       Bass    </td><td>       BassaVah        </td>   </tr>
<tr>   <td>    55      </td><td>       Bugi    </td><td>       Buginese        </td><td>       135     </td><td>       Dupl    </td><td>       Duployan shorthand, Duployan stenography        </td>   </tr>
<tr>   <td>    56      </td><td>       Glag    </td><td>       Glagolitic      </td><td>       136     </td><td>       Elba    </td><td>       Elbasan </td>   </tr>
<tr>   <td>    57      </td><td>       Khar    </td><td>       Kharoshthi      </td><td>       137     </td><td>       Gran    </td><td>       Grantha </td>   </tr>
<tr>   <td>    58      </td><td>       Sylo    </td><td>       Syloti Nagri    </td><td>       138     </td><td>       Kpel    </td><td>       Kpelle  </td>   </tr>
<tr>   <td>    59      </td><td>       Talu    </td><td>       New Tai Lue     </td><td>       139     </td><td>       Loma    </td><td>       Loma    </td>   </tr>
<tr>   <td>    60      </td><td>       Tfng    </td><td>       Tifinagh (Berber)        </td><td>       140     </td><td>       Mend    </td><td>       Mende Kikakui   </td>   </tr>
<tr>   <td>    61      </td><td>       Xpeo    </td><td>       Old Persian     </td><td>       141     </td><td>       Merc    </td><td>       Meroitic Cursive        </td>   </tr>
<tr>   <td>    62      </td><td>       Bali    </td><td>       Balinese        </td><td>       142     </td><td>       Narb    </td><td>       Old North Arabian (Ancient North Arabian)        </td>   </tr>
<tr>   <td>    63      </td><td>       Batk    </td><td>       Batak   </td><td>       143     </td><td>       Nbat    </td><td>       Nabataean       </td>   </tr>
<tr>   <td>    64      </td><td>       Blis    </td><td>       Blissymbols     </td><td>       144     </td><td>       Palm    </td><td>       Palmyrene       </td>   </tr>
<tr>   <td>    65      </td><td>       Brah    </td><td>       Brahmi  </td><td>       145     </td><td>       Sind    </td><td>       Khudawadi, Sindhi       </td>   </tr>
<tr>   <td>    66      </td><td>       Cham    </td><td>       Cham    </td><td>       146     </td><td>       Wara    </td><td>       Warang Citi (Varang Kshiti)      </td>   </tr>
<tr>   <td>    67      </td><td>       Cirt    </td><td>       Cirth   </td><td>       147     </td><td>       Afak    </td><td>       Afaka   </td>   </tr>
<tr>   <td>    68      </td><td>       Cyrs    </td><td>       Cyrillic (Old Church Slavonic variant)   </td><td>       148     </td><td>       Jurc    </td><td>       Jurchen </td>   </tr>
<tr>   <td>    69      </td><td>       Egyd    </td><td>       Egyptian demotic        </td><td>       149     </td><td>       Mroo    </td><td>       Mro, Mru        </td>   </tr>
<tr>   <td>    70      </td><td>       Egyh    </td><td>       Egyptian hieratic       </td><td>       150     </td><td>       Nshu    </td><td>       Nushu   </td>   </tr>
<tr>   <td>    71      </td><td>       Egyp    </td><td>       Egyptian hieroglyphs     </td><td>       151     </td><td>       Shrd    </td><td>       Sharada, Śāradā      </td>   </tr>
<tr>   <td>    72      </td><td>       Geok    </td><td>       Khutsuri (Asomtavruli and Nuskhuri)      </td><td>       152     </td><td>       Sora    </td><td>       Sora Sompeng    </td>   </tr>
<tr>   <td>    73      </td><td>       Hans    </td><td>       Han (Simplified variant) </td><td>       153     </td><td>       Takr    </td><td>       Takri, Ṭākrī, Ṭāṅkrī </td>    </tr>
<tr>   <td>    74      </td><td>       Hant    </td><td>       Han (Traditional variant)        </td><td>       154     </td><td>       Tang    </td><td>       Tangut  </td>   </tr>
<tr>   <td>    75      </td><td>       Hmng    </td><td>       Pahawh Hmong    </td><td>       155     </td><td>       Wole    </td><td>       Woleai  </td>   </tr>
<tr>   <td>    76      </td><td>       Hung    </td><td>       Old Hungarian (Hungarian Runic)  </td><td>       156     </td><td>       Hluw    </td><td>       Anatolian hieroglyphs (Luwian hieroglyphs, Hittite hieroglyphs) </td>    </tr>
<tr>   <td>    77      </td><td>       Inds    </td><td>       Indus (Harappan) </td><td>       157     </td><td>       Khoj    </td><td>       Khojki  </td>   </tr>
<tr>   <td>    78      </td><td>       Java    </td><td>       Javanese        </td><td>       158     </td><td>       Tirh    </td><td>       Tirhuta </td>   </tr>
<tr>   <td>    79      </td><td>       Kali    </td><td>       KayahLi </td><td>       -1      </td><td>               </td><td>       Invalid code     </td>   </tr>
</tbody>
</table>


<h2 id="ucoll" name="ucoll">Ucollator</h2>
<p>The Ucollator API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UCOLLATOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UCOLLATOR__MODULE.html">wearable</a> applications) performs locale-sensitive string comparison. It builds searching and sorting routines for natural language text and provides correct sorting orders for most supported locales. If specific data for a locale is not available, the order eventually falls back to the <a href="http://www.unicode.org/reports/tr35/tr35-31/tr35-collation.html#Root_Collation" target="_blank">CLDR root sort order</a>. The sorting order can be customized by providing your own set of rules. For more information, see the <a href="http://userguide.icu-project.org/collation/customization" target="_blank">ICU Collation Customization</a> section of the User Guide.</p>

<h2 id="udate" name="udate">Udate</h2>
<p>The Udate API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UDATE__MODULE.html">wearable</a> applications) consists of functions that convert dates and times from their internal representations to textual form and back again in a language-independent manner. Converting from the internal representation (milliseconds since midnight, January 1, 1970) to text is known as formatting, and converting from text to milliseconds is known as parsing. Tizen currently defines only one concrete handle (<span style="font-family: Courier New,Courier,monospace">i18n_udate_format_h</span>), which can handle practically all normal date formatting and parsing actions.</p>
<p>The Udate format helps you to format and parse dates for any locale. Your code can be completely independent of the locale conventions for months, days of the week, or even the lunar or solar calendar format.</p>
<p>You can pass in different options for the arguments for date and time style to control the length of the result; you can select from <span style="font-family: Courier New,Courier,monospace">SHORT</span>, <span style="font-family: Courier New,Courier,monospace">MEDIUM</span>, <span style="font-family: Courier New,Courier,monospace">LONG</span>, and <span style="font-family: Courier New,Courier,monospace">FULL</span>. The exact result depends on the locale.</p>

<ul>
    <li>
        <span style="font-family: Courier New,Courier,monospace">I18N_UDATE_SHORT</span> is completely numeric, such as 12/13/52 or 3:30pm
    </li>
    <li>
        <span style="font-family: Courier New,Courier,monospace">I18N_UDATE_MEDIUM</span> is longer, such as Jan 12, 1952
    </li>
    <li>
        <span style="font-family: Courier New,Courier,monospace">I18N_UDATE_LONG</span> is longer, such as January 12, 1952 or 3:30:32pm
    </li>
    <li>
        <span style="font-family: Courier New,Courier,monospace">I18N_UDATE_FULL</span>
        is completely specified, such as Tuesday, April 12, 1952 AD or 3:30:42pm PST.
    </li>
</ul>

<h3 id="pattern" name="pattern">Date and Time Patterns</h3>
<p>The date and time formats are specified by the <span style="font-family: Courier New,Courier,monospace">date and time pattern</span> strings. Within the date and time pattern strings, all unquoted ASCII letters (A-Z and a-z) are reserved as pattern letters representing calendar fields. The <span style="font-family: Courier New,Courier,monospace">i18n_udate_format_h</span> handle supports the date and time formatting algorithm and pattern letters defined by the <a href="http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Field_Symbol_Table" target="_blank">Unicode Technical Standard #35, Unicode Locale Data Markup Language (LDML)</a>. It is further documented in the <a href="https://sites.google.com/site/icuprojectuserguide/formatparse/datetime?pli=1#TOC-Date-Field-Symbol-Table" target="_blank">ICU User Guide</a>.</p>

<h2 id="udatepg" name="udatepg">Udatepg</h2>
<p>The Udatepg API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UDATEPG__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UDATEPG__MODULE.html">wearable</a> applications) enables flexible generation of date format patterns, such as "yy-MM-dd". The user can build up the generator by adding successive patterns. After this, a query can be made using a pattern that includes only the desired fields and lengths. The generator returns the a pattern that is most similar to it.
</p>
<p>The main method is the <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_get_best_pattern()</span> function, since normally the Udatepg API is prebuilt with data from a particular locale. However, generators can be built directly from other data as well.
</p>

<h2 id="uenumeration" name="uenumeration">Uenumeration</h2>

<p>The Uenumeration API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UENUMERATION__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UENUMERATION__MODULE.html">wearable</a> applications) enables you to <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#uenum">create an enumeration object</a> out of a given set of strings. The object can be created out of an array of <span style="font-family: Courier New,Courier,monospace">const char*</span> strings or an array of <span style="font-family: Courier New,Courier,monospace">i18n_uchar*</span> strings.</p>
<p>The enumeration object enables navigation through the enumeration values, with the use of the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_next()</span> or <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_unext()</span> function (depending on the type used for creating the enumeration object), and with the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_reset()</span> function.</p>
<p>You can get the number of values stored in the enumeration object with the <span style="font-family: Courier New,Courier,monospace">i18n_uenumeration_count()</span> function.</p>


<h2 id="ulocale" name="ulocale">Ulocale</h2>
<p>The Ulocale API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__ULOCALE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__ULOCALE__MODULE.html">wearable</a> applications) represents a specific geographical, political, or cultural region. Locale-sensitive operations <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#locales">use the Ulocale functions to tailor information</a> for the user. For example, displaying a number is a locale-sensitive operation. The number must be formatted according to the customs and conventions of the user&#39;s native country, region, or culture.
</p>
<p>You create a locale with one of the options listed below. Each component is separated by an underscore in the locale string:</p>

<table> 
   <caption>
     Table: Options for creating a locale
   </caption> 
   <tbody> 
    <tr> 
     <th>Options for creating a locale</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">newLanguage</span>
	 <p><span style="font-family: Courier New,Courier,monospace">newLanguage + newCountry</span></p>
	 <p><span style="font-family: Courier New,Courier,monospace">newLanguage + newCountry + newVariant</span></p></td>
    </tr>
   </tbody>
  </table>
  
<p>The first option is a valid <a href="http://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank">ISO Language Code</a>. These codes are the lower-case 2-letter codes as defined by the ISO-639 standard.
</p>
<p>The second option includes an additional <a href="http://www.chemie.fu-berlin.de/diverse/doc/ISO_3166.html" target="_blank">ISO Country Code</a>.
</p>
<p>The third option requires additional information on the variant. The variant codes are vendor and browser-specific. For example, use <span style="font-family: Courier New,Courier,monospace">WIN</span> for Windows, <span style="font-family: Courier New,Courier,monospace">MAC</span> for Macintosh, and <span style="font-family: Courier New,Courier,monospace">POSIX</span> for POSIX. Where there are 2 variants, separate them with an underscore, and put the most important one first. For example, a Traditional Spanish collation might be referenced, with <span style="font-family: Courier New,Courier,monospace">ES</span>, <span style="font-family: Courier New,Courier,monospace">ES</span>, <span style="font-family: Courier New,Courier,monospace">Traditional_WIN</span>.
</p>
<p>Because a locale is just an identifier for a region, no validity check is performed when you specify a locale. If you want to see whether particular resources are available for the locale you asked for, you must query those resources.
</p>
<p> Once you have specified a locale you can query it for information about itself. Use <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_language()</span> to get the ISO Language Code. You can use <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_display_name()</span> to get the name of the language suitable for display to the user.
</p>

<h2 id="unormal" name="unormal">Unormalization</h2>

<p> The Unicode normalization API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNORMALIZATION__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNORMALIZATION__MODULE.html">wearable</a> applications) is for the standard unicode normalization. All instances of <span style="font-family: Courier New,Courier,monospace">i18n_unormalizer_s</span> are unmodifiable and immutable. Instances returned by <span style="font-family: Courier New,Courier,monospace">i18n_unormalization_get_instance()</span> are singletons that must not be deleted by the caller.</p>


<h2 id="unumber" name="unumber">Unumber</h2>
<p>The Unumber API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__UNUMBER__MODULE.html">wearable</a> applications) helps you to <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#numbers">format and parse numbers for any locale</a>. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. There are different number format styles like decimal, currency, percent and spellout.</p>

<h2 id="usearch" name="usearch">Usearch</h2>
<p>The Usearch API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__USEARCH__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__USEARCH__MODULE.html">wearable</a> applications) provides language-sensitive text searching based on the comparison rules defined in a Ucollator data struct. This ensures that language eccentricity can be handled. For example, for the German collator, characters ß and SS are matched if case is chosen to be ignored. That is why it can be important to pass a locale when creating the usearch with the <span style="font-family: Courier New,Courier,monospace">i18n_usearch_create_new()</span> function.</p>

<h2 id="uset" name="uset">Uset</h2>
<p>Uset is a mutable <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#uset">set of Unicode characters and multicharacter strings that you can manage</a>. The sets represent character classes used in regular expressions. A character specifies a subset of the Unicode code points. The legal code points are U+0000 to U+10FFFF, inclusive.</p>
<p>The set supports 2 functions:</p>
<ul><li>The operand function allows the caller to modify the value of the set. The operand function works similarly to the boolean logic: a boolean OR is implemented by add, a boolean AND is implemented by retain, a boolean XOR is implemented by a complement taking an argument, and a boolean NOT is implemented by a complement with no argument. In terms of traditional set theory function names, add is a union, retain is an intersection, remove is an asymmetric difference, and complement with no argument is a set complement with respect to the superset range <span style="font-family: Courier New,Courier,monospace">MIN_VALUE-MAX_VALUE</span>.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">i18n_uset_apply_pattern()</span> or <span style="font-family: Courier New,Courier,monospace">i18n_uset_to_pattern()</span> function. Unlike the functions that add characters or categories, and control the logic of the set, the <span style="font-family: Courier New,Courier,monospace">i18n_uset_apply_pattern()</span> function sets all attributes of a set at once, based on a string pattern.</li></ul>

<h3 id="pattern_syntax" name="pattern_syntax">Pattern Syntax</h3>

<p>Patterns are accepted by the <span style="font-family: Courier New,Courier,monospace">i18n_uset_create_pattern()</span>, <span style="font-family: Courier New,Courier,monospace">i18n_uset_create_pattern_options()</span>, and <span style="font-family: Courier New,Courier,monospace">i18n_uset_apply_pattern()</span> functions and returned by the <span style="font-family: Courier New,Courier,monospace">i18n_uset_to_pattern()</span> function. The patterns follow a syntax similar to that employed by version 8 regular expression character classes.</p>
<table>
   <caption>
     Table: Examples of simple pattern syntaxes
   </caption> 
    <tbody>
		<tr>
            <th>Pattern</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[]</span></td>
            <td>No characters</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[a]</span></td>
            <td>Character &#39;a&#39;</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[ae]</span></td>
            <td>Characters &#39;a&#39; and &#39;e&#39;</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[a-e]</span></td>
            <td>Characters &#39;a&#39; through &#39;e&#39; inclusive, in Unicode code point order</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[\u4E01]</span></td>
            <td>Character U+4E01</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[a{ab}{ac}]</span></td>
            <td>Character &#39;a&#39; and the multicharacter strings &#39;ab&#39; and &#39;ac&#39;</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[\p{Lu}]</span></td>
            <td>All characters in the general category &#39;uppercase letter&#39;</td>
        </tr>
    </tbody>
</table>
<p>Any character can be preceded by a backslash in order to remove any special meaning. Whitespace characters are ignored, unless they are escaped.</p>
<p>Property patterns specify a set of characters having a certain property as defined by the Unicode standard. Both the POSIX-like <span style="font-family: Courier New,Courier,monospace">[:Lu:]</span> and the Perl-like syntax <span style="font-family: Courier New,Courier,monospace">\\p{Lu}</span> are recognized.</p>
<p>Patterns specify individual characters, ranges of characters, and Unicode property sets. When the elements are concatenated, they specify their union. To complement a set, place a &#39;^&#39; immediately after the opening &#39;[&#39;. Property patterns are inverted by modifying their delimiters, <span style="font-family: Courier New,Courier,monospace">[:^foo]</span> and <span style="font-family: Courier New,Courier,monospace">\\P{foo}</span>. In any other location, &#39;^&#39; has no special meaning.</p>
<p>Ranges are indicated by placing a &#39;-&#39; between 2 characters, as in &quot;a-z&quot;. This specifies the range of all characters from the left to the right, in Unicode order. If the left character is greater than or equal to the right character, it is a syntax error. If a &#39;-&#39; occurs as the first character after the opening &#39;[&#39; or &#39;[^&#39;, or if it occurs as the last character before the closing &#39;]&#39;, it is taken as a literal. This means that <span style="font-family: Courier New,Courier,monospace">[a\-b]</span>, <span style="font-family: Courier New,Courier,monospace">[-ab]</span>, and <span style="font-family: Courier New,Courier,monospace">[ab-]</span> all indicate the same set of 3 characters, &#39;a&#39;, &#39;b&#39;, and &#39;-&#39;.</p>
<p>Sets can be intersected using the &#39;&amp;&#39; operator or the asymmetric set difference can be taken using the &#39;-&#39; operator. For example, <span style="font-family: Courier New,Courier,monospace">[[:L:]&amp;[\\u0000-\\u0FFF]]</span> indicates the set of all Unicode letters with values less than 4096. Operators (&#39;&amp;&#39; and &#39;|&#39;) have equal precedence and bind left-to-right. This means that <span style="font-family: Courier New,Courier,monospace">[[:L:]-[a-z]-[\\u0100-\\u01FF]]</span> is equivalent to <span style="font-family: Courier New,Courier,monospace">[[[:L:]-[a-z]]-[\\u0100-\\u01FF]]</span>. This only really matters for difference; intersection is commutative.</p>
<table>
   <caption>
     Table: Examples of set syntaxes
   </caption> 
    <tbody>
		<tr>
            <th>Set</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[a]</span></td>
            <td>Set containing &#39;a&#39;</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[a-z]</span></td>
            <td>Set containing &#39;a&#39; through &#39;z&#39; and all letters in between, in Unicode order</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[^a-z]</span></td>
            <td>Set containing all characters but &#39;a&#39; through &#39;z&#39;, that is, U+0000 through &#39;a&#39;-1 and &#39;z&#39;+1 through U+10FFFF</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[[pat1][pat2]]</span></td>
            <td>Union of sets specified by pat1 and pat2</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[[[pat1]&amp;[pat2]]</span></td>
            <td>Intersection of sets specified by pat1 and pat2</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[[pat1]-[pat2]]</span></td>
            <td>Asymmetric difference of sets specified by pat1 and pat2</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[:Lu:]</span> or <span style="font-family: Courier New,Courier,monospace">\p{Lu}</span></td>
            <td>Set of characters having the specified Unicode property, in this case Unicode uppercase letters</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">[:^Lu:]</span> or <span style="font-family: Courier New,Courier,monospace">\P{Lu}</span></td>
            <td>Set of characters not having the given Unicode property</td>
        </tr>
    </tbody>
</table>

  <table class="note"> 
	   <tbody> 
		<tr> 
		 <th class="note">Note</th> 
		</tr> 
		<tr> 
		 <td class="note">You cannot add an empty string (&quot;&quot;) to a set.</td> 
		</tr> 
	   </tbody> 
	  </table> 


<h3 id="formal_syntax" name="formal_syntax">Formal Syntax</h3>

<p>The following table provide examples of formal syntax patterns.</p>

<table>
   <caption>
     Table: Formal syntax patterns 
   </caption> 
    <tbody>
		<tr>
            <th>Pattern</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">pattern :=</span></td>
            <td>(&#39;[&#39; &#39;^&#39;? item* &#39;]&#39;) | property</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">item :=</span></td>
            <td>char | (char &#39;-&#39; char) | pattern-expr</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">pattern-expr :=</span></td>
            <td>pattern | pattern-expr pattern | pattern-expr or pattern</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">op :=</span></td>
            <td>&#39;&amp;&#39; | &#39;-&#39;</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">special :=</span></td>
            <td>&#39;[&#39; | &#39;]&#39; | &#39;-&#39;</td>
	        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">char :=</span></td>
            <td>Any character that is not special | (&#39;\&#39; any character) | (&#39;\u&#39; hex hex hex hex)</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">property :=</span></td>
            <td>Unicode property set pattern</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">a := b</span></td>
            <td>a can be replaced by b</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">a?</span></td>
            <td>0 or 1 instance of a</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">a*</span></td>
            <td>1 or more instances of a</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">a | b</span></td>
            <td>Either a or b</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">&#39;a&#39;</span></td>
            <td>Literal string between the quotes</td>
        </tr>
    </tbody>
</table>



<h2 id="ustring" name="ustring">Ustring</h2>
<p>The Ustring API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__USTRING__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__BASE__UTILS__I18N__USTRING__MODULE.html">wearable</a> applications) allows you to <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#characters">handle general unicode strings</a>. Some functions are similar in name, signature, and behavior to the ANSI C <span style="font-family: Courier New,Courier,monospace">&lt;string.h&gt;</span> functions, and other functions provide more Unicode-specific functionality.</p>
<p>The i18n uses 16-bit Unicode (UTF-16) in the form of arrays of <span style="font-family: Courier New,Courier,monospace">i18n_uchar</span> code units. UTF-16 encodes each Unicode code point with either 1 or 2 <span style="font-family: Courier New,Courier,monospace">i18n_uchar</span> code units. This is the default form of Unicode, and a forward-compatible extension of the original, fixed-width form that was known as UCS-2. UTF-16 superseded UCS-2 with Unicode 2.0 in 1996.</p>
<p>The i18n also handles 16-bit Unicode text with unpaired surrogates. Such text is not well-formed UTF-16. Code-point-related functions treat unpaired surrogates as surrogate code points, such as separate units.</p>
<p>Although UTF-16 is a variable-width encoding form, such as some legacy multi-byte encodings, it is much more efficient even for random access because the code unit values for single-unit characters versus lead units versus trail units are completely disjoint. This means that it is easy to determine character (code point) boundaries from random offsets in the string.</p>
<p>Unicode (UTF-16) string processing is optimized for the single-unit case. Although it is important to support supplementary characters, which use pairs of lead/trail code units called &quot;surrogates&quot;, their occurrence is rare. Almost all characters in modern use require only a single <span style="font-family: Courier New,Courier,monospace">i18n_uchar</span> code unit (such as their code point values are &lt;=0xffff).</p>

 <h3 id="map" name="map">Character Set Mapping Tables</h3>
<p>The i18n API provides a character set conversion with mapping tables for a number of important codepages. The default tables are a subset of IBM&#39;s CDRA conversion table repository. ICU&#39;s <a href="http://demo.icu-project.org/icu-bin/convexp" target="_blank">Converter Explorer</a> shows aliases and codepage charts for the default tables that are built into a standard ICU distribution.</p>
<p>Conversions for most codepages are implemented differently on different platforms. We are providing  mapping tables here from many different sources, so that the i18n users and others can use these tables to get the same conversion behavior as on the original platforms.</p>
<p>The mapping tables and some of the source code of the tools that collected these tables are checked into a <a href="http://source.icu-project.org/repos/icu/data/trunk/charset/data/ucm/" target="_blank">CVS repository</a>.
</p>
<p>For more information about character sets, codepages and encodings, see <a href="http://www.ibm.com/software/globalization/topics/charsets/" target="_blank">Coded Character Sets</a> on the IBM site.
</p>

 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

