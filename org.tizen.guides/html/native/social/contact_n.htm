<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Contacts</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#bulk">Batch Operations</a></li>
			<li><a href="#db">Database Change Notifications</a></li>
			<li><a href="#filter">Filters and Queries</a></li>
			<li><a href="#list">Lists</a></li>
			<li><a href="#person">Persons and Contacts</a></li>
			<li><a href="#record">Records</a></li>
			<li><a href="#view">Views and Properties</a></li>
			<li><a href="#vcard">vCards</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/social/contact_tutorial_n.htm">Contacts Tutorial</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts API for Wearable Native</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">


  <h1>Contacts</h1>

<p>Contact features provide functions for managing contact information, such as address books, groups, persons, and phone logs.</p>

<p>A contact object is always associated with a specific address book. A person object is an aggregation of one or more contacts associated with the same person.</p>

<p>The following figure illustrates the contact structure. There are 3 instances of the same contact in different address books. Person1 is an aggregation of those instances (Contact1, Contact2, and Contact3).</p>

  <p class="figure">Figure: Contact structure</p>
  <p align="center"><img alt="Contact structure" src="../../images/contacts_contact_structure.png" /></p>

<p>The Contact Service supports <a href="#vcard">vCards</a>.</p>

<p>The main features of the Contacts API include:</p>
<ul>
<li>Contact management
	<ul><li>Manage individual <a href="#record">contact records</a>, such as name, phone number, email, address, job, instant messenger, and company with the help of <a href="#view">contact data-views</a>.</li>
	<li>Insert contacts to and remove them from the <a href="#db">contacts database</a>.</li>
	<li>Use <a href="#filter">filters and queries</a> to search and organize contacts.</li></ul></li>
<li>Accounts
	<ul><li>Handle accounts using an account ID created with the Account Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__ACCOUNT__MANAGER__MODULE.html">wearable</a> applications).</li>
	<li>Have the related account ID of 0 because local device address book has no account.</li>
	<li>Create only one address book each.</li></ul></li>
<li>Address books
	<ul><li>Determine where contacts and groups belong.</li>
	<li>Create address books using the local device (with no account), service providers (such as Samsung account), or applications (such as ChatON or Joyn).</li>
	</ul></li>
<li>Groups
	<ul><li>Combine contacts on the same address book.</li>
	<li>Set up many-to-many relationships between groups and contacts.</li></ul></li>
<li>Lists
	<ul><li>Create <a href="#list">lists</a> of similar contacts to manage them in <a href="#bulk">batches</a>.</li></ul></li>
<li>Persons
	<ul>
	<li>Set up a <a href="#person">virtual contact</a> to be shown and managed when more than 1 contact from different sources designate the same individual.</li>
	</ul></li>
<li>My profile
	<ul><li>Manage My profile. My profile has similar properties as the contact information, but no properties, such as group relation, ringtone, and message alert.</li>
	<li>Can have a single entry in each address book.</li></ul></li>
<li>Activities
	<ul><li>Store social activities.</li></ul></li>
<li>Speed dials
	<ul><li>Provide a shortcut dialing number key information.</li></ul></li>
<li>Phone logs
	<ul><li>Store call or message logs.</li></ul></li></ul>

<p>The following figure illustrates the different entities in the Contact Service, and their relationships.</p>

  <p class="figure">Figure: Contact entities</p>
  <p align="center"><img alt="Contact entities" src="../../images/contacts_contact_entity.png" /></p>

  <h2 id="bulk" name="bulk">Batch Operations</h2>

<p>Bulk APIs provide insert, update, and delete operations for multiple records simultaneously. There is no limit on the record count for a bulk API, but it causes a process to hang while the API is operated. Bulk APIs guarantee atomicity. That is, the API operations are performed either for all, or nothing.</p>

<pre class="prettyprint">
int contacts_db_insert_records(contacts_list_h record_list, int **ids, unsigned int *count);
int contacts_db_update_records(contacts_list_h record_list);
int contacts_db_delete_records(const char* view_uri, int record_id_array[], int count);
int contacts_db_replace_records(contacts_list_h list, int record_id_array[], unsigned int count);
</pre>

<p>The following code example inserts 2 contact records using a bulk API:</p>
<pre class="prettyprint">contacts_record_h contact1;
contacts_record_create(_contacts_contact.uri, &amp;contact1);
// Fill contact record

contacts_record_h contact2;
contacts_record_create(_contacts_contact._uri, &amp;contact2);
// Fill contact record

contacts_list_h list = NULL;
contacts_list_create(&amp;list);

contacts_list_add(list, contact1);
contacts_list_add(list, contact2);

int **ids = NULL;
unsigned int count = 0;

// Insert contact records using bulk APIs
contacts_db_insert_records(list, &amp;ids, &amp;count);

// Use IDs

contacts_list_destroy(list, true);
free(ids);</pre>


  <h2 id="db" name="db">Database Change Notifications</h2>

<p>To detect the contact database changes, use the Database API functions (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__DATABASE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__DATABASE__MODULE.html">wearable</a> applications). Register a callback with the <span style="font-family: Courier New,Courier,monospace">contacts_db_add_changed_cb()</span> function. To unregister the callback and ignore database changes, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_remove_changed_cb()</span> function.</p>
<p>Clients wait contacts change notifications on the client side. If the contact is changed by another module, the server publishes a notification. The notification module broadcasts to the subscribed modules and a user callback function is called with the user data. The following example registers person changes notification callback:</p>

<pre class="prettyprint">
static void __person_changed_ cb(const char *view_uri, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Jobs for the callback function
}
// Add a change notification callback
contacts_db_add_changed_cb(_contacts_person._uri, __person_changed_cb, NULL);</pre>

<h2 id="filter" name="filter">Filters and Queries</h2>

<p>Queries are used to retrieve data which satisfies a given criteria, like an integer property being greater than a given value, or a string property containing a given substring. Query needs a filter which can set the condition for search. The Contact Service provides query APIs for sorting set projections and removing duplicated results.</p>

<h3 id="sort" name="sort">Filters</h3>

<p>The Filter API provides the set of definitions and interfaces that enable application developers to make filters to set queries.</p>
<p>When creating a filter, specify the filter type you want to create using the <span style="font-family: Courier New,Courier,monospace">_uri</span> property. A filter handle must be destroyed after use.</p>
<pre class="prettyprint">
int contacts_filter_create(const char* view_uri, contacts_filter_h* filter);
int contacts_filter_destroy(contacts_filter_h filter);</pre>

<p>The following example sets the filter condition to contain a given substring:</p>
<pre class="prettyprint">contacts_filter_add_str(filter, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;1234&quot;);</pre>

<p>The following example sets the filter condition to property value is <span style="font-family: Courier New,Courier,monospace">true</span>:</p>
<pre class="prettyprint">contacts_filter_add_bool(filter, _contacts_person.is_favorite, true);</pre>

<p>Conditions can be added to a filter. Join the conditions by using the logical operators <span style="font-family: Courier New,Courier,monospace">AND</span> and <span style="font-family: Courier New,Courier,monospace">OR</span>.</p>

<p>The following example creates a composite filter with the <span style="font-family: Courier New,Courier,monospace">OR</span> operator.</p>
<pre class="prettyprint">
contacts_filter_add_str(filter1, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;1234&quot;);
contacts_filter_add_operator(filter1, CONTACTS_FILTER_OPERATOR_OR);
contacts_filter_add_str(filter1, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;5678&quot;);</pre>

<p>Additionally, filters can join each other by using the logical operators <span style="font-family: Courier New,Courier,monospace">AND</span> and <span style="font-family: Courier New,Courier,monospace">OR</span>.</p>

<p>The following example creates a joined filter with the <span style="font-family: Courier New,Courier,monospace">AND</span> operator.</p>
<pre class="prettyprint">
contacts_filter_add_str(filter1, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;1234&quot;);
contacts_filter_add_operator(filter1, CONTACTS_FILTER_OPERATOR_OR);
contacts_filter_add_str(filter1, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;5678&quot;);

contacts_filter_add_bool(filter2, _contacts_person.is_favorite, true);

contacts_filter_add_operator(filter1, CONTACTS_FILTER_OPERATOR_AND);
contacts_filter_add_filter(filter1, filter2);
</pre>

<p>The operator precedence in filters is determined by the order in which the conditions and filters are added. The following table shows the results, if the following sequences are added.</p>

<table>
   <caption>
     Table: Filters
   </caption>
   <tbody>
    <tr>
     <th>Filters</th>
     <th>Result</th>
    </tr>
    <tr>
     <td>Condition C1<br/>
OR<br/>
Condition C2<br/>
AND<br/>
Condition C3</td>
     <td>(C1 OR C2) AND C3</td>
    </tr>
    <tr>
	<td>
<strong>Filter F1</strong>:<br/>
 Condition C1<br/>
 OR<br/>
 Condition C2<br/>
<br/>
<strong>Filter F2</strong>:<br/>
 Condition C3<br/>
 OR<br/>
 Condition C4<br/>
 <br/>
<strong>Filter F3</strong>:<br/>
 Condition C5<br/>
 AND<br/>
 F1<br/>
 AND<br/>
 F2</td>
	<td>(C5 AND F1) AND F2, which is<br/>
	(C5 AND (C1 OR C2)) AND (C3 OR C4)</td>
	</tr>
   </tbody>
  </table>

<p>The following example creates a filter which accepts addresses with their contact&#39;s ID equal to a given ID (integer filter), or their country property equal to &quot;Korea&quot; (string filter). Create a query and add the filter to it, results are received in a list.</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;
contacts_list_h list = NULL;
contacts_query_h query = NULL;

contacts_filter_create(_contacts_address._uri, &amp;filter);
contacts_filter_add_int(filter, _contacts_address.contact_id, CONTACTS_MATCH_EQUAL, id);
contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_OR);
contacts_filter_add_str(filter, _contacts_address.country, CONTACTS_MATCH_EXACTLY, &quot;Korea&quot;);
contacts_query_create(_contacts_address._uri, &amp;query);
contacts_query_set_filter(query, filter);

contacts_db_get_records_with_query(query, 0, 0, &amp;list);

contacts_filter_destroy(filter);
contacts_query_destroy(query);
// Use the list

contacts_list_destroy(list, true);
</pre>

<h3 id="sort2" name="sort2">Sorting</h3>

<p>Sort query results list by property ID:</p>
<pre class="prettyprint">int contacts_query_set_sort(contacts_query_h query, unsigned int property_id, bool is_ascending);</pre>

<p>Sort query results by person ID:</p>
<pre class="prettyprint">
contacts_filter_add_str(filter, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;Joe&quot;);
contacts_query_set_filter(query, filter);
contacts_query_set_sort(query, _contacts_person.id, true);

contacts_db_get_records_with_query(query, 0, 0, &amp;list);

contacts_query_destroy(query);
contacts_filter_destroy(filter);
contacts_list_destroy(person_list, true);
</pre>

<h3 id="projection" name="projection">Projection</h3>

<p>Projection allows you to query data for specific properties of a record, at lower latency and cost than retrieving all properties:</p>
<pre class="prettyprint">int contacts_query_set_projection(contacts_query_h query, unsigned int property_ids[], int count)</pre>

<p>The following example creates a filter which gets only the person ID, display name, and image thumbnail path from the person record which &quot;test&quot; (string filter) as vibration path. Create a query and add the filter to it, results are received in a list.</p>
<pre class="prettyprint">
contacts_filter_add_str(filter, _contacts_person.vibration, CONTACTS_MATCH_CONTAINS, &quot;test&quot;);
contacts_query_set_filter(query, filter);

// Set projections
unsigned int person_projection[] =
{
&nbsp;&nbsp;&nbsp;_contacts_person.id,
&nbsp;&nbsp;&nbsp;_contacts_person.display_name,
&nbsp;&nbsp;&nbsp;_contacts_person.image_thumbnail_path,
};

contacts_query_set_projection(query, person_projection, sizeof(person_projection)/sizeof(int));

contacts_db_get_records_with_query(query, 0, 0, &amp;person_list);

// Use the list

contacts_query_destroy(query);
contacts_filter_destroy(filter);
contacts_list_destroy(person_list, true);
</pre>

<h3 id="distinct" name="distinct">Distinct</h3>

<p>If you query a read-only view with a set projection, the result list can contain duplicates. Remove duplicates using <span style="font-family: Courier New,Courier,monospace">contacts_query_set_distinct</span>.</p>
<pre class="prettyprint">int contacts_query_set_distinct(contacts_query_h query, bool set)</pre>

<p>The following example removes duplicates:</p>
<pre class="prettyprint">
unsigned int projection[] =
{
&nbsp;&nbsp;&nbsp;_contacts_person_number.person_id,
&nbsp;&nbsp;&nbsp;_contacts_person_number.display_name,
};
contacts_filter_create(_contacts_person_number._uri, &amp;filter);
contacts_filter_add_bool(filter, _contacts_person_number.has_phonenumber, true);

contacts_query_create(_contacts_person_number._uri, &amp;query);
contacts_query_set_projection(query, projection, sizeof(projection)/sizeof(int));
contacts_query_set_filter(query, filter);

// Set distinct (remove duplicates)
contacts_query_set_distinct(query, true);

contacts_db_get_records_with_query(query, 0, 0, &amp;list);

// Use the list

contacts_list_destroy(list, true);
contacts_query_destroy(query);
contacts_filter_destroy(filter);
</pre>

<h2 id="list" name="list">Lists</h2>

<p>The Contact Service provides functions which can handle lists of records with the same type. The list concept is based on a standard doubly-linked list.</p>

<p>To operate a list, you must obtain its handle. The handle is provided during the list creation. Destroy the list handle after use:</p>
<pre class="prettyprint">
int contacts_list_create(contacts_list_h* contacts_list);
int contacts_list_destroy(contacts_list_h contacts_list, bool delete_child);
</pre>

<p>If the <span style="font-family: Courier New,Courier,monospace">delete_child</span> parameter is <span style="font-family: Courier New,Courier,monospace">true</span>, child resources are destroyed automatically.</p>

<p>The following example creates a list handle:</p>
<pre class="prettyprint">
// Get a list handle with a query
contacts_list_h list = NULL;
contacts_list_create(&amp;list);

// Use the list

contacts_list_destroy(list, true);
</pre>

<p>The following example gets the person list handle from the database:</p>

<pre class="prettyprint">
// Get a list handle with a query
contacts_list_h list = NULL;
contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;list);

// Use the list

contacts_list_destroy(list, true);
</pre>

<h3 id="cursor" name="cursor">Cursor</h3>

<p>The list can be traversed by using a cursor:</p>
<pre class="prettyprint">
int contacts_list_first(contacts_list_h contacts_list);
int contacts_list_last(contacts_list_h contacts_list);
int contacts_list_next(contacts_list_h contacts_list);
int contacts_list_prev(contacts_list_h contacts_list);
</pre>

<p>Get a record of the current cursor:</p>

<pre class="prettyprint">int contacts_list_get_current_record_p(contacts_list_h contacts_list, contacts_record_h* record);</pre>

<p>The following example creates a loop list:</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_record_h record = NULL;
contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;list);
do
{
&nbsp;&nbsp;&nbsp;contacts_list_get_current_record_p(list, &amp;record);
&nbsp;&nbsp;&nbsp;if (NULL == record)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(record, _contacts_person.display_name, &amp;name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;name=%s&quot;, name);
} while (CONTACTS_ERROR_NONE == contacts_list_next(list));
contacts_list_destroy(list, true); // Destroy child records automatically
</pre>

<h3 id="add" name="add">Adding and Removing</h3>

<p>The Contact Service provides functions for adding and removing child records on a list.</p>
<pre class="prettyprint">
int contacts_list_add(contacts_list_h contacts_list, contacts_record_h record);
int contacts_list_remove(contacts_list_h contacts_list, contacts_record_h record);
</pre>

<p>The following example adds records to the list:</p>
<pre class="prettyprint">
contacts_record_h group1 = NULL;
contacts_record_create(_contacts_group._uri, &amp;group1);
contacts_record_set_str(group1, _contacts_group.name, &quot;group test1&quot;);

contacts_record_h group2 = NULL;
contacts_record_create(_contacts_group._uri, &amp;group2);
contacts_record_set_str(group2, _contacts_group.name, &quot;group test2&quot;);

contacts_list_h list = NULL;
contacts_list_create(&amp;list);

// Add records to the list
contacts_list_add(list, group1);
contacts_list_add(list, group2);

contacts_db_insert_records(list, NULL, NULL);
contacts_list_destroy(list, true);
</pre>


<h2 id="person" name="person">Persons and Contacts</h2>
<p> Persons are virtual contacts that keep merged information of contacts linked together. A person is created automatically when a contact record is inserted in the Contacts database. A person record cannot be created directly. Every contact must be linked to at least 1 person.</p>

<p>The following figure illustrates the process of creating a person record.</p>
 <p class="figure">Figure: Creating a person</p>
 <p align="center"><img alt="Creating a person" src="../../images/contacts_person_record.png" /></p>

<p>A person record can be linked to another person. Linking is possible even though the contacts have different address books.</p>

  <p>The following figure illustrates the process of linking a person.</p>

   <p class="figure">Figure: Linking a person</p>
   <p align="center"><img alt="Linking a person" src="../../images/contacts_link_person.png" /></p>

<p>A contact record can also be separated from the person record. As a result of unlinking the contact record, a new person is created.</p>

 <p>The following figure illustrates the process of unlinking a contact.</p>

   <p class="figure">Figure: Unlinking a contact</p>
   <p align="center"><img alt="Unlinking a contact" src="../../images/contacts_unlink_contact.png" /></p>

  <h2 id="record" name="record">Records</h2>

<p>An important concept in the Contacts APIs is a record. Although a record represents an actual record in the internal database, you can consider it a piece of information, like an address, phone number, or group of contacts. A record can be a complex set of data, containing other data. For example, an address record contains country, region, and street information.</p>

<p>The contained data can also be a reference to another record. For example, a contact record contains the <span style="font-family: Courier New,Courier,monospace">address</span> property, which is a reference to an address record. An address record belongs to a contact record - its <span style="font-family: Courier New,Courier,monospace">contact_id</span> property is set to the identifier of the corresponding contact. In this case, the address is the child record of the contact and the contact is the parent record.</p>
<p>Effectively, a record can be a node in a tree or graph of relations between records.</p>

<h3>URI</h3>

<p>A record type is identified by a structure called the view, which contains identifiers of its properties. Every view has a special field - <span style="font-family: Courier New,Courier,monospace">_uri</span> - that uniquely identifies the view. In many cases, you must provide the <span style="font-family: Courier New,Courier,monospace">_uri</span> value to indicate what type of record you want to create or operate on.</p>

<p>The following APIs need a <span style="font-family: Courier New,Courier,monospace">_uri</span> postfix:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_record_create(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_filter_create(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_query_create(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_get_record(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_delete_record(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_get_all_records(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_delete_records(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_add_changed_cb(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_remove_changed_cb(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_get_changes_by_version(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_search_records(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_search_records_with_range(const char* view_uri, ...)</span></li>
<li><span style="font-family: Courier New,Courier,monospace">int contacts_db_get_count(const char* view_uri, ...)</span></li>
</ul>

<h3>Record Handle</h3>

<p>To use a record, you must obtain its handle. There are many methods to obtain the handle. For example, you can create a new record or refer to the child records of a record.</p>

<p>When creating a record, you must specify what type of record you want to create by using the URI property. The following code examples creates a contact record and obtains its handle:</p>

<pre class="prettyprint">contacts_record_h contact = NULL;
contacts_record_create(_contacts_contact._uri, &amp;contact);</pre>

<p>The following example shows how to get a contact record with ID:</p>
<pre class="prettyprint">contacts_record_h contact = NULL;
contacts_db_get_record(_contacts_contact._uri, id, &amp;contact);</pre>


<h4>Basic Types</h4>

<p>Records contain properties of basic types: <span style="font-family: Courier New,Courier,monospace">integer</span>, <span style="font-family: Courier New,Courier,monospace">string</span>, <span style="font-family: Courier New,Courier,monospace">boolean</span>, <span style="font-family: Courier New,Courier,monospace">long integer</span>, <span style="font-family: Courier New,Courier,monospace">lli</span> (long long int), and <span style="font-family: Courier New,Courier,monospace">double</span>.</p>

<p>The following table lists the setter and getter functions for each type.</p>

<table>
   <caption>
     Table: Setter and getter functions
   </caption>
   <tbody>
    <tr>
     <th>Property</th>
     <th>Setter</th>
	 <th>Getter</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">string</span></td>
     <td><span style="font-family: Courier New,Courier,monospace">contacts_record_set_str</span></td>
	 <td><span style="font-family: Courier New,Courier,monospace">contacts_record_get_str</span></td>
    </tr>
     <tr>
     <td><span style="font-family: Courier New,Courier,monospace">integer</span></td>
     <td><span style="font-family: Courier New,Courier,monospace">contacts_record_set_int</span></td>
	 <td><span style="font-family: Courier New,Courier,monospace">contacts_record_get_int</span></td>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">boolean</span></td>
     <td><span style="font-family: Courier New,Courier,monospace">contacts_record_set_bool</span></td>
	 <td><span style="font-family: Courier New,Courier,monospace">contacts_record_get_bool</span></td>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">long long integer</span></td>
     <td><span style="font-family: Courier New,Courier,monospace">contacts_record_set_lli</span></td>
	 <td><span style="font-family: Courier New,Courier,monospace">contacts_record_get_lli</span></td>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">double</span></td>
     <td><span style="font-family: Courier New,Courier,monospace">contacts_record_set_double</span></td>
	 <td><span style="font-family: Courier New,Courier,monospace">contacts_record_get_double</span></td>
    </tr>
   </tbody>
  </table>

<p>The above functions also require specifying which property to get and set. Every getter and setter function needs a record and property ID. Create a property ID by combining the data-view and property name. For example, the property ID of a contact <span style="font-family: Courier New,Courier,monospace">display_name</span> property: <span style="font-family: Courier New,Courier,monospace">_contacts_contact.display_name</span>)</p>

<p>The following example sets the <span style="font-family: Courier New,Courier,monospace">ringtone_path</span> property of a contact record.</p>
<pre class="prettyprint">
char *resource_path = app_get_resource_path();
char ringtone_path[1024];
snprintf(ringtone_path, sizeof(ringtone_path), &quot;%s/ringtone.mp3&quot;, resource_path);
free(resource_path);
contacts_record_set_str(contact, _contacts_contact.ringtone_path, ringtone_path);
</pre>

  <table class="note">
   <tbody>
    <tr>
     <th class="note">Note</th>
    </tr>
    <tr>
     <td class="note">The string getter functions have the <span style="font-family: Courier New,Courier,monospace">_p</span> postfix. It means that the returned value should not be freed by the application, as it is a pointer to data in an existing record.</td>
    </tr>
   </tbody>
  </table>

<p></p>

<p>The following example shows that there are 2 ways of getting string property:</p>
<pre class="prettyprint">
contacts_record_get_str(record, _contacts_person.display_name, &amp;display_name);
contacts_record_get_str_p(record, _contacts_person.display_name, &amp;display_name);</pre>

<p>In the first case, the returned string should be freed by the application. In second one, the <span style="font-family: Courier New,Courier,monospace">display_name</span> value is freed automatically when destroying the record handle.</p>


<h3>Children</h3>

<p>A record can have properties of the <span style="font-family: Courier New,Courier,monospace">record</span> type - called child records. A record can contain several records of a given type. For example, a contact record (parent) can contain many address records (children).</p>

<p class="figure">Figure: Children</p>
<p align="center"><img alt="Children" src="../../images/contacts_children.png" /></p>

<p>The following code example inserts an address record into a contact record. Note that it is not necessary to insert or destroy all records - just the parent record needs to be inserted into the database to store all the information, and when the parent record is destroyed, the child records are also destroyed automatically.</p>

<p>The following example adds a child record:</p>
<pre class="prettyprint">
contacts_record_h address = NULL;
contacts_record_h image = NULL;

int contact_id = 0;

// Image and address record can be child records of contact record
contacts_record_create(_contacts_contact._uri, &amp;contact);

contacts_record_create(_contacts_image._uri, &amp;image);
char *resource_path = app_get_resource_path();
char caller_id_path[1024];
snprintf(caller_id_path, sizeof(caller_id_path), &quot;%s/caller_id.jpg&quot;, resource_path);
free(resource_path);
contacts_record_set_str(image, _contacts_image.path, caller_id_path);
contacts_record_add_child_record(contact, _contacts_contact.image, image);

contacts_record_create(_contacts_address._uri, &amp;address);
contacts_record_set_str(address, _contacts_address.country, &quot;Korea&quot;);
contacts_record_add_child_record(contact, _contacts_contact.address, address);

// Insert contact to the database
contacts_db_insert_record(contact, &amp;contact_id);
contacts_record_destroy(contact, true);</pre>

<h3>Record ID Property</h3>

<p>An ID is a unique number for identifying records. Therefore, if you know the ID of a record, you can directly handle the record. The ID is read-only property, which is available after the record has been inserted into the database. The following example gets a contact record with an ID:</p>

<pre class="prettyprint">
contacts_record_h contact = NULL;
contacts_record_create(_contacts_contact._uri, &amp;contact);

contacts_record_h name = NULL;
contacts_record_create(_contacts_name._uri, &amp;name);
contacts_record_set_str(name, _contacts_name.first, &quot;first name&quot;);
contacts_record_add_child_record(contact, _contacts_contact.name, name);

int contact_id = 0;
contacts_db_insert_record(contact, &amp;contact_id);
contacts_record_destroy(contact, true); // Contact is no longer usable

contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;contact); // Contact is now a handle to the same record as before
char *display_name = NULL;
contacts_record_get_str(contact, _contacts_contact.display_name, &amp;display_name);
contacts_record_destroy(contact, true); // Contact is no longer usable
</pre>

<p>Identifiers can be used to establish a relationship between 2 records. The following code example sets an address record&#39;s <span style="font-family: Courier New,Courier,monospace">contact_id</span> property to the ID of the contact. The <span style="font-family: Courier New,Courier,monospace">contact_id</span> relates between the address record and the contact which is identified by the <span style="font-family: Courier New,Courier,monospace">contact_id</span>. After the ID is set, the address becomes one of the addresses connected to the contact. The address is now the contact&#39;s child record, and the contact is the parent record. The following example adds an address record to a <span style="font-family: Courier New,Courier,monospace">contact_id</span>:</p>

<pre class="prettyprint">int contact_id = ... // Acquire the ID of the created contact
int address_id = 0;
contacts_record_create(_contacts_address._uri, &amp;address);
contacts_record_set_int(address, _contacts_address.contact_id, contact_id);
// Set other address properties

contacts_db_insert_record(address, &amp;address_id);</pre>

<p>With a record handle, you can access all records of a specific type related to the given record.</p>

<p>The following code example changes a country of addresses which are child records of a contact. Each address can be traversed by using the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function. It is possible to apply the changes by updating the contact which is the parent record:</p>

<pre class="prettyprint">
int contact_id = ... // Acquire ID of the created contact
unsigned int address_num = 0;
int i = 0;
contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;contact);
contacts_record_get_child_record_count(contact, _contacts_contact.address, &amp;address_num);
for (i = 0; i &lt; address_num; i++)
{
&nbsp;&nbsp;&nbsp;contacts_record_h address = NULL;
&nbsp;&nbsp;&nbsp;contacts_record_get_child_record_at_p(contact, _contacts_contact.address, i, &amp;address);
&nbsp;&nbsp;&nbsp;contacts_record_set_str(address, _contacts_address.country, &quot;Korea&quot;);
}
contacts_db_update_record(contact);
contacts_record_destroy(contact, true);</pre>

<h2 id="view" name="view">Views and Properties</h2>

<p>Views are provided to access and handle entities. According to data-view declarations, generic access functions, such as <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> and <span style="font-family: Courier New,Courier,monospace">contacts_record_get_int</span>, can be used  to access contact views. A data-view is almost the same as a database &quot;VIEW&quot;, which limits access and guarantees performance. A &quot;record&quot; represents a single row of the data-views.</p>

<p>A data-view is a structure, which has property elements. For example, the <span style="font-family: Courier New,Courier,monospace">_contacts_contact</span> view describes the properties of the contact record. Its properties include, for example, name, company, and nickname of the contact. The property elements have their data types and names.</p>
<p>The record types that have <span style="font-family: Courier New,Courier,monospace">*_id</span> as their property hold identifiers of other records. For example, the name, number, and email views hold the ID of their corresponding contacts in the <span style="font-family: Courier New,Courier,monospace">contact_id</span> property as children of the corresponding contact records.</p>

<p>The property type <span style="font-family: Courier New,Courier,monospace">record</span> means that the parent record can have child records. For example, a contact record has <span style="font-family: Courier New,Courier,monospace">name</span>, <span style="font-family: Courier New,Courier,monospace">number</span>, and <span style="font-family: Courier New,Courier,monospace">email</span> properties, which means that records of those types can be children of the contact type records. The following figure illustrates macros in a <span style="font-family: Courier New,Courier,monospace">contacts_view.h</span> header file.</p>

  <p class="figure">Figure: Properties</p>
  <p align="center"><img alt="Properties" src="../../images/contact_property.png" /></p>

<p>For more information, see the View/Property API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__VIEW__MODULE.html">wearable</a> applications).</p>

<h2 id="vcard" name="vcard">vCards</h2>
<p>The Contact Service provides functions for parsing and making vCards. The vCard APIs are based on the <a href="http://www.ietf.org/rfc/rfc2426.txt" target="blank">vCard v3.0 specification</a>.</p>

<h3>Parsing vCards</h3>

<p>There are 2 ways for parsing vCards. The following example shows parsing vCard from stream and inserting it to the database.
</p>
<pre class="prettyprint">// Make a contact record list from the vCard stream
contacts_list_h list = NULL;
contacts_vcard_parse_to_contacts(vcard_stream, &amp;list);
// Use the contact record list

contacts_list_destroy(list, true);</pre>

<p>The following example shows parsing vCard from a file and inserting it to database:</p>

<pre class="prettyprint">// Get a record handle of the _contacts_contact view
static bool __vcard_parse_cb(contacts_record_h record, void *user_data)
{
&nbsp;&nbsp;&nbsp;int id = 0;
&nbsp;&nbsp;&nbsp;contacts_db_insert_record(record, &amp;id);

&nbsp;&nbsp;&nbsp;// Return false to break out of the loop
&nbsp;&nbsp;&nbsp;// Return true to continue with the next iteration of the loop
&nbsp;&nbsp;&nbsp;return true;
}

// Parse the vCard from a file
char *resource_path = app_get_resource_path();
char vcard_path[1024];
snprintf(vcard_path, sizeof(vcard_path), &quot;%s/vcard.vcf&quot;, resource_path);
free(resource_path);
contacts_vcard_parse_to_contact_foreach(vcard_path, __vcard_parse_cb, NULL);
</pre>


<h3>Making a vCard Stream</h3>
<p>You can make a vCard stream from a contact, person, or my profile record. The following code example makes a vCard stream using a contact record:</p>
<pre class="prettyprint">contacts_record_h contact;
char *vcard_stream = NULL;

contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;contact);
contacts_vcard_make_from_contact(contact, &amp;vcard_stream);
// Use the vcard stream

free(vcard_stream);
contacts_record_destroy(contact, true);</pre>
	  

   
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>
<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>