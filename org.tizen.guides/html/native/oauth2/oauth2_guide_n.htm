<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>OAuth 2.0 Authorization</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
				<li><a href="#intro">OAuth 2.0 Authentication</a></li>
				<li><a href="#grant">Authorization Grant</a></li>
				<ul>
					<li><a href="#code">Authorization Code</a></li>
					<li><a href="#imp">Implicit</a></li>
					<li><a href="#res_owner">Resource Owner Password Credentials</a></li>
					<li><a href="#client_cred">Client Credentials</a></li>
				</ul>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
		<li><a href="../../../../org.tizen.tutorials/html/native/oauth2/oauth2_tutorial_n.htm">OAuth2 Tutorial</a></li>
		<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__OAUTH2__MODULE.html">OAuth2 API</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
    
<h2 id="intro" name="intro">OAuth 2.0 Authentication</h2> 
  <p>The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service,either on behalf of a resource owner by orchestrating <br/>an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf.</p> 
  <p>This specification is define in <a href="http://tools.ietf.org/html/rfc6749" target="_blank">[RFC 6749]</a> and it builds on the OAuth 1.0 <a href="http://tools.ietf.org/html/rfc5849" target="_blank">[RFC 5849]</a> deployment experience, as well as additional use cases and extensibility <br/>requirements gathered from the wider IETF community. The OAuth 2.0 protocol is not backward compatible with OAuth 1.0.</p>
  
<h2 id="grant" name="grant">Authorization Grant</h2> 
  <p>An authorization grant is a credential representing the resource owner's authorization (to access its protected resources) used by the client to obtain an access token. <br/>This specification defines four grant types -- authorization code, implicit, resource owner password credentials, and client credentials -- as well as <br/>an extensibility mechanism for defining additional types.</p>
   
  <h3 id="code" name="code">Authorization Code</h3>
  <p>The authorization code is obtained by using an authorization server as an intermediary between the client and resource owner. Instead of requesting authorization directly <br/>from the resource owner, the client directs the resource owner to an authorization server, which in turn directs the resource owner back to the <br/>client with the authorization code.</p>

 <p>The authorization code provides a few important security benefits, such as the ability to authenticate the client, as well as the transmission of the access token directly to the <br/>client without passing it through the resource owner's user-agent and potentially exposing it to others, including the resource owner.</p>

 <p>To request the authorization code, use the API as shown in <a href="../../../../org.tizen.tutorials/html/native/oauth2/oauth2_tutorials_n.htm#req_code">Requesting Authorization Code</a>.</p>
   
  <h3 id="imp" name="imp">Implicit</h3>
  <p>In the implicit flow, the client is issued an access token directly (as the result of the resource owner authorization). The grant type is implicit, as no intermediate <br/>credentials (such as an authorization code) are issued.</p>

  <p>Implicit grants improve the responsiveness and efficiency of some clients (such as a client implemented as an in-browser application), since it reduces the number of <br/>round trips required to obtain an access token.</p>

 <p>To request the access token for implicit grant type, use the API as shown in <a href="../../../../org.tizen.tutorials/html/native/oauth2/oauth2_tutorials_n.htm#direct_token">Requesting access token directly</a>.</p>
   
  <h3 id="res_owner" name="res_owner">Resource Owner Password Credentials</h3>
  <p>The resource owner password credentials (i.e., username and password) can be used directly as an authorization grant to obtain an access token.</p>

  <p>Even though this grant type requires direct client access to the resource owner credentials, the resource owner credentials are used for a single request and are exchanged <br/>for an access token.  This  grant type can eliminate the need for the client to store the resource owner credentials for future use, by exchanging the credentials with a <br/>long-lived access token or refresh token.</p>

 <p>To request the access token for resource owner grant type, use the API as shown in <a href="../../../../org.tizen.tutorials/html/native/oauth2/oauth2_tutorials_n.htm#direct_token">Requesting access token directly</a>.</p>
   
  <h3 id="client_cred" name="client_cred">Client Credentials</h3>
  <p>The client credentials can be used as an authorization grant when the authorization scope is limited to the protected resources under the control of the client, or to protected <br/>resources previously arranged with the authorization server. Client credentials are used as an authorization grant typically when the client is acting on its own behalf (the <br/>client is also the resource owner) or is requesting access to protected resources based on an authorization previously arranged with the authorization server.</p>

 <p>To request the access token for client credentials grant type, use the API as shown in <a href="../../../../org.tizen.tutorials/html/native/oauth2/oauth2_tutorials_n.htm#direct_token">Requesting access token directly</a>.</p>
  
  <script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>
<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
