<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Image Editing</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
            <li>Image manipulation
                <ul class="toc">
                    <li><a href="#colorspace">Converting the Color Space</a></li>
                    <li><a href="#resize">Resizing an Image</a></li>
                    <li><a href="#rotate">Rotating an Image</a></li>
                    <li><a href="#crop">Cropping an Image</a></li>
                </ul>
            </li>
            <li><a href="#decode">Decoding from a File or Memory</a></li>
            <li><a href="#encode">Encoding to a File or Memory</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html">Image Util API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html">Image Util API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Image Editing</h1>

<p>Tizen offers the following image processing features:</p>
 
 <ul>
 <li>Conversion
 <p>You can <a href="#colorspace">change the colorspace format</a>. The following tables define the supported formats.</p>

   <table> 
   <caption>
     Table: RGB pixel formats 
   </caption> 
   <tbody> 
    <tr> 
		<th>Label</th> 
		<th>FOURCC in hex</th> 
		<th>Bits per pixel</th> 
		<th>Description</th> 	 
    </tr> 
    <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#BI_RGB" target="blank">RGB</a></td> 
     <td>0x32424752</td> 
	 <td>1, 4, 8, 16, 24, 32</td> 
	 <td>Alias for BI_RGB</td> 
    </tr> 
     <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#RGBA" target="blank">RGBA</a></td> 
     <td>0x41424752</td> 
	 <td>16, 32</td> 
	 <td>Raw RGB with alpha. Sample precision and packing is arbitrary and determined using bit masks for each component, as for BI_BITFIELDS.</td> 
    </tr>
   </tbody> 
  </table> 
 
    <table> 
   <caption>
     Table: Packed YUV formats 
   </caption> 
   <tbody> 
    <tr> 
		<th>Label</th> 
		<th>FOURCC in hex</th> 
		<th>Bits per pixel</th> 
		<th>Description</th> 	 
    </tr> 
    <tr> 
     <td><a href="http://www.fourcc.org/yuv.php#UYVY" target="blank">UYVY</a></td> 
     <td>0x59565955</td> 
	 <td>16</td> 
	 <td>YUV 4:2:2 (Y sample at every pixel, U and V sampled at every second pixel horizontally on each line). A macropixel contains 2 pixels in 1 u_int32.</td> 
    </tr> 
     <tr> 
     <td><a href="http://www.fourcc.org/yuv.php#YUYV" target="blank">YUYV</a></td> 
     <td>0x56595559</td> 
	 <td>16</td> 
	 <td>Duplicate of YUY2.</td> 
    </tr>
   </tbody> 
  </table> 			

    <table> 
   <caption>
     Table: Planar YUV formats 
   </caption> 
   <tbody> 
    <tr> 
		<th>Label</th> 
		<th>FOURCC in hex</th> 
		<th>Bits per pixel</th> 
		<th>Description</th> 	 
    </tr> 
    <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#BI_RGB" target="blank">YV16</a></td> 
     <td>0x36315659</td> 
	 <td>16</td> 
	 <td>8-bit Y plane followed by 8-bit 2x1 subsampled V and U planes.</td> 
    </tr> 
     <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#RGBA" target="blank">YV12</a></td> 
     <td>0x32315659</td> 
	 <td>12</td> 
	 <td>8-bit Y plane followed by 8-bit 2x2 subsampled V and U planes.</td> 
    </tr>
     <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#RGBA" target="blank">I420</a></td> 
     <td>0x30323449</td> 
	 <td>12</td> 
	 <td>8-bit Y plane followed by 8-bit 2x2 subsampled U and V planes.</td> 
    </tr>
     <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#RGBA" target="blank">NV12</a></td> 
     <td>0x3231564E</td> 
	 <td>12</td> 
	 <td>8-bit Y plane followed by an interleaved U/V plane with 2x2 subsampling.</td> 
    </tr>
     <tr> 
     <td><a href="http://www.fourcc.org/rgb.php#RGBA" target="blank">NV21</a></td> 
     <td>0x3132564E</td> 
	 <td>12</td> 
	 <td>As NV12 with U and V reversed in the interleaved plane.</td> 
    </tr>	
   </tbody> 
  </table> 
 </li>
 <li>Resizing
<p>You can <a href="#resize">change the image resolution</a>.</p></li>
<li>Rotation
<p>You can <a href="#rotate">change the image angle</a> around the x or y axis.</p></li>
<li>Crop
<p>You can <a href="#crop">remove the outer parts of an image</a> or change the aspect ratio.</p></li></ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the image util functionality</a>.</p>
 
<p>You can <a href="#decode">decode images</a> and <a href="#encode">encode them</a> with the following formats:</p>

<ul><li>Bitmap formats:
<ul><li>YUV420, YUV422, RGB888, RGBA8888, BGRA8888, ARGB8888</li></ul></li>
<li>Input image formats for decoding: 
<ul><li>Only JPEG is supported when using image util</li></ul></li>
<li>Output image formats for encoding: 
<ul><li>JPEG</li>
<li>Quality vs. size

    <table> 
   <caption>
     Table: Quality and size comparison
   </caption> 
   <tbody> 
    <tr> 
		<th>Image</th> 
		<th>Quality</th> 
		<th>Size (bytes)</th> 
		<th>Compression ratio</th>
		<th>Description</th> 	 
    </tr> 
    <tr> 
     <td><img src="../../images/quality_highest.png" alt="Highest quality image" /></td> 
     <td>Highest quality (Q = 100)</td> 
	 <td>83,261</td> 
	 <td>2.6:1</td> 
	  <td>Extremely minor artifacts</td>
    </tr> 
    <tr> 
     <td><img src="../../images/quality_high.png" alt="High quality image" /></td> 
     <td>High quality (Q = 50)</td> 
	 <td>15,138</td> 
	 <td>15:1</td> 
	  <td>Initial signs of subimage artifacts</td>
    </tr> 
    <tr> 
     <td><img src="../../images/quality_medium.png" alt="Medium quality image" /></td> 
     <td>Medium quality (Q = 25)</td> 
	 <td>9,553</td> 
	 <td>23:1</td> 
	  <td>Stronger artifacts; loss of high-frequency information</td>
    </tr> 
    <tr> 
     <td><img src="../../images/quality_low.png" alt="Low quality image" /></td> 
     <td>Low quality (Q = 10)</td> 
	 <td>4,787</td> 
	 <td>46:1</td> 
	  <td>Severe high frequency loss; artifacts on subimage boundaries (&quot;macroblocking&quot;) are obvious</td>
    </tr> 
    <tr> 
     <td><img src="../../images/quality_lowest.png" alt="Lowest quality image" /></td> 
     <td>Lowest quality</td> 
	 <td></td> 
	 <td></td> 
	  <td></td>
    </tr> 	
   </tbody> 
  </table> 	
</li></ul></li></ul>

<h2>Warm-up</h2>

<p>Become familiar with the Image Util API basics by learning about:</p>

<ul>
    <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the image util functionality.</p></li>
    <li>Image manipulation
        <ul>
            <li><a href="#colorspace">Converting the Color Space</a>
                <p>Convert an image from one color space to another.</p>
            </li>
            <li><a href="#resize">Resizing an Image</a>
                <p>Resize an image.</p>
            </li>
            <li><a href="#rotate">Rotating an Image</a>
                <p>Rotate an image.</p>
            </li>
            <li><a href="#crop">Cropping an Image</a>
                <p>Crop an image.</p>
            </li>
        </ul>
    </li>
    <li><a href="#decode">Decoding from a File or Memory</a>
        <p>Decode a JPEG image from a file or from memory.</p>
    </li>
    <li><a href="#encode">Encoding to a File or Memory</a>
        <p>Encode raw image data to a JPEG file or to memory in the JPEG format.</p>
    </li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the image util functionality:</p>

<ol>
<li>
<p>To use the functions and data types of the Image Util API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;image_util.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;image_util.h&gt;
</pre>
<p>To ensure that an Image Util function has been executed properly, make sure that the return value is equal to <span style="font-family: Courier New,Courier,monospace">IMAGE_UTIL_ERROR_NONE</span>.</p>
</li>
<li>
<p>Declare the required variables:</p>
<pre class="prettyprint">
#define SAMPLE_FILENAME &quot;sample_image.jpg&quot;
#define OUTPUT_ROTATED_JPEG &quot;rotated_image.jpg&quot;

const image_util_colorspace_e colorspace = IMAGE_UTIL_COLORSPACE_RGB888;
unsigned char *img_rotate_target = NULL;
unsigned char *img_source = NULL;
int ret = 0;
int width = 0;
int height = 0;
unsigned int size_decode = 0;
</pre>
</li>
<li>
<p>To find out which JPEG color spaces are supported on the device, use the <span style="font-family: Courier New,Courier,monospace">image_util_foreach_supported_jpeg_colorspace()</span> function:</p>
<pre class="prettyprint">
int image_util_foreach_supported_jpeg_colorspace(image_util_supported_jpeg_colorspace_cb callback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void * user_data);
</pre>
<p>The possible color spaces are defined in the <span style="font-family: Courier New,Courier,monospace">image_util_colorspace_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html#gad3ea89a72a617912df9ddbd50be1b991">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html#gad3ea89a72a617912df9ddbd50be1b991">wearable</a> applications).</p>
<p>For more information about the YUV color space, see <a href="http://www.fourcc.org/yuv.php" target="blank">http://www.fourcc.org/yuv.php</a>.</p>
</li>
<li>
<p>To support the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function, which is used for all image transformations, set the source image and create a handle for it (to be used as the second parameter):</p>
<pre class="prettyprint">
ret = image_util_decode_jpeg(SAMPLE_FILENAME, colorspace, &amp;img_source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;width, &amp;height, &amp;size_decode);

ret = media_format_create(&amp;fmt);
ret = media_format_set_video_mime(fmt, colorspace);
ret = media_format_set_video_width(fmt, width);
ret = media_format_set_video_height(fmt, height);

ret = media_packet_create_alloc(fmt, NULL, NULL, &amp;src);
ret = media_packet_get_buffer_size(src, &amp;size);

src = malloc(size);
ret = media_packet_get_buffer_data_ptr(src, &amp;src_ptr);
ret = memcpy(src_ptr, img_source, size);
</pre>
</li>
</ol>

<h2 id="colorspace" name="colorspace">Converting the Color Space</h2>

<p>To convert an image from one color space to another:</p>

<ol>

<li>

<p>Create a transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_create()</span> function:</p>

<pre class="prettyprint">
transformation_h handle;
ret = image_util_transform_create(&amp;handle);
</pre>

</li>

<li>

<p>Optionally, enable hardware acceleration using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_hardware_acceleration()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_hardware_acceleration(handle, true);
</pre>

</li>

<li>

<p>Set the target color space using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_colorspace()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_colorspace(handle, colorspace);
</pre>

</li>

<li>

<p>Execute the transformation using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_run(handle, src,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(image_util_transform_completed_cb)completed_callback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data);
</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note"><ul><li>Here, the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function only converts the color space. The function does not change the image width or height, or any other image property.</li>
   <li>Because of the restrictions of the image processing library, not all color space combinations are supported for conversion. For example, the NV12 format is commonly used in hardware chips, but it is not supported by the library.</li>
   <li>If hardware acceleration is enabled, you can execute 2 more image transformations using the same transformation handle.</li></ul></td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Handle the transformation results in the <span style="font-family: Courier New,Courier,monospace">image_util_transform_completed_cb()</span> callback, which is invoked after the transformation is complete.</p>

</li>

<li>

<p>After the transformation is complete, destroy the transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_destroy()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_destroy(handle);
</pre>

</li>

</ol>

<h2 id="resize" name="resize">Resizing an Image</h2>

<p>To resize an image:</p>

<ol>

<li>

<p>Create a transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_create()</span> function:</p>

<pre class="prettyprint">
transformation_h handle;
ret = image_util_transform_create(&amp;handle);
</pre>

</li>

<li>

<p>Optionally, enable hardware acceleration using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_hardware_acceleration()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_hardware_acceleration(handle, true);
</pre>

</li>

<li>

<p>Set the target resolution using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_resolution()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_resolution(handle, width, height);
</pre>

</li>

<li>

<p>Execute the transformation using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_run(handle, src,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(image_util_transform_completed_cb)completed_callback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data);
</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note"><ul><li>The image format has no effect on the transformation.</li>
   <li>If the color space is YUV, the target image width and height must be multiples of 8. This restriction does not apply to RGB images.</li>
   <li>If hardware acceleration is enabled, you can execute 2 more image transformations using the same transformation handle.</li></ul></td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Handle the transformation results in the <span style="font-family: Courier New,Courier,monospace">image_util_transform_completed_cb()</span> callback, which is invoked after the transformation is complete.</p>

</li>

<li>

<p>After the transformation is complete, destroy the transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_destroy()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_destroy(handle);
</pre>

</li>

</ol>

<h2 id="rotate" name="rotate">Rotating an Image</h2>

<p>To rotate an image:</p>

<ol>

<li>

<p>Create a transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_create()</span> function:</p>

<pre class="prettyprint">
transformation_h handle;
ret = image_util_transform_create(&amp;handle);
</pre>

</li>

<li>

<p>Optionally, enable hardware acceleration using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_hardware_acceleration()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_hardware_acceleration(handle, true);
</pre>

</li>

<li>

<p>Set the amount of rotation using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_rotation()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_rotation(handle, rotation);
</pre>

<p>The possible values for the <span style="font-family: Courier New,Courier,monospace">rotation</span> parameter are defined in the <span style="font-family: Courier New,Courier,monospace">image_util_rotation_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html#gad0682da8519f229944c9c5617b7a1107">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__IMAGE__UTIL__MODULE.html#gad0682da8519f229944c9c5617b7a1107">wearable</a> applications).</p>

</li>

<li>

<p>Execute the transformation using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_run(handle, src,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(image_util_transform_completed_cb)completed_callback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data);
</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note"><ul><li>The image format has no effect on the transformation.</li>
   <li>If the color space is YUV, the target image width and height must be multiples of 8. This restriction does not apply to RGB images.</li>
   <li>If hardware acceleration is enabled, you can execute 2 more image transformations using the same transformation handle.</li></ul></td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Handle the transformation results in the <span style="font-family: Courier New,Courier,monospace">image_util_transform_completed_cb()</span> callback, which is invoked after the transformation is complete.</p>

</li>

<li>

<p>After the transformation is complete, destroy the transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_destroy()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_destroy(handle);
</pre>

</li>

</ol>

<h2 id="crop" name="crop">Cropping an Image</h2>

<p>To crop an image:</p>

<ol>

<li>

<p>Create a transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_create()</span> function:</p>

<pre class="prettyprint">
transformation_h handle;
ret = image_util_transform_create(&amp;handle);
</pre>

</li>

<li>

<p>Optionally, enable hardware acceleration using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_hardware_acceleration()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_hardware_acceleration(handle, true);
</pre>

</li>

<li>

<p>Set the crop area using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_set_crop_area()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_set_crop_area(handle, start_x, start_y, end_x, end_y);
</pre>

</li>

<li>

<p>Execute the transformation using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_run()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_run(handle, src,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(image_util_transform_completed_cb)completed_callback,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data);
</pre>

<table class="note">
 <tbody>
  <tr>
   <th class="note">Note</th>
  </tr>
  <tr>
   <td class="note"><ul><li>Because of a YUV restriction, and because the crop start position can be set arbitrarily, the cropped image width and height must be even.</li>
   <li>If hardware acceleration is enabled, you can execute 2 more image transformations using the same transformation handle.</li></ul></td>
  </tr>
 </tbody>
</table>

</li>

<li>

<p>Handle the transformation results in the <span style="font-family: Courier New,Courier,monospace">image_util_transform_completed_cb()</span> callback, which is invoked after the transformation is complete.</p>

</li>

<li>

<p>After the transformation is complete, destroy the transformation handle using the <span style="font-family: Courier New,Courier,monospace">image_util_transform_destroy()</span> function:</p>

<pre class="prettyprint">
ret = image_util_transform_destroy(handle);
</pre>

</li>

</ol>

<h2 id="decode" name="decode">Decoding from a File or Memory</h2>

<p>To decode a JPEG image:</p>

<ul>

<li>

<p>To decode the image from a file, use the <span style="font-family: Courier New,Courier,monospace">image_util_decode_jpeg()</span> function. Manually allocate the memory for the image buffer based on a calculated buffer size.</p>

<pre class="prettyprint">
ret = image_util_decode_jpeg(SAMPLE_FILENAME, colorspace, &amp;img_source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;width, &amp;height, &amp;size_decode);
</pre>

</li>

<li>

<p>To decode the image from memory, use the <span style="font-family: Courier New,Courier,monospace">image_util_decode_jpeg_from_memory()</span> function. Manually allocate the memory for the image buffer based on a calculated buffer size.</p>

<pre class="prettyprint">
ret = image_util_decode_jpeg_from_memory(jpeg_buffer, jpeg_size, colorspace,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image_buffer, width, height, size);
</pre>

</li>

</ul>

<h2 id="encode" name="encode">Encoding to a File or Memory</h2>

<p>To encode a rotated or flipped image:</p>

<ul>

<li>To encode the image to a JPEG file, use the <span style="font-family: Courier New,Courier,monospace">image_util_encode_jpeg()</span> function:

<pre class="prettyprint">
ret = image_util_encode_jpeg(img_flip_target, dest_width, dest_height,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colorspace, 100, OUTPUT_ROTATED_JPEG);
</pre>

</li>

<li>

<p>To encode the image to memory in the JPEG format, use the <span style="font-family: Courier New,Courier,monospace">image_util_encode_jpeg_to_memory()</span> function:</p>

<pre class="prettyprint">
ret = image_util_encode_jpeg_to_memory(img_flip_target, dest_width, dest_height,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;colorspace, 100, jpeg_buffer, jpeg_size);
</pre>

</li>

</ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>