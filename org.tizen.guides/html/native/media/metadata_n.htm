<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Metadata</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#editor">Metadata Editing</a></li>
			<li><a href="#extract">Metadata Extraction</a></li>
			<li><a href="#mime">MIME Type Information</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li>Metadata editor
				<ul class="toc">
					<li><a href="#edit_metadata">Editing Metadata and Artwork</a></li>
				</ul>
			</li>
			<li>Metadata extractor
				<ul class="toc">
					<li><a href="#get_metadata">Retrieving Metadata</a></li>
				</ul>
			</li>
			<li>MIME type
				<ul class="toc">
					<li><a href="#get_file_ext">Getting the MIME Type for a File Extension</a></li>
					<li><a href="#get_mime">Getting Extensions for a MIME Type</a></li>
				</ul>
			</li>
        </ul>		
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__METADATA__EDITOR__MODULE.html">Metadata Editor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__CONTENT__MIME__TYPE__MODULE.html">MIME Type API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__CONTENT__MIME__TYPE__MODULE.html">MIME Type API for Wearable Native</a></li>			
			<li><a href="https://developer.tizen.org/development/sample/native/Multimedia/Metadata-editor" target="_blank">Metadata-editor Sample Description</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

  <h1>Metadata</h1>
 
<p>To handle content metadata, you can use the following features:</p>

<ul>
<li><a href="#editor">Metadata editing</a> <strong>in mobile applications only</strong>
<p>You can manage audio file attributes.</p></li>
<li><a href="#extract">Metadata extraction</a>
<p>You can extract metadata from media files.</p></li>
<li><a href="#mime">MIME type information</a> 
<p>You can map MIME types with file extensions.</p></li>
</ul>   


  
<h2 id="editor">Metadata Editing in Mobile Applications</h2>
<p>You can <a href="#edit_metadata">edit the metadata</a> of several popular audio formats using the metadata editor. You can add and remove album art, or update the information of the audio file. Before you start, remember to <a href="#prerequisites">prepare your application to use the metadata editor functionality</a>.</p>

<p>The metadata editor supports the mp3 and mp4 (audio only) file formats. Image and video file editing is not supported.</p>

<p>The following table lists the metadata you can edit.</p>
  
  <table> 
   <caption>
     Table: Editable metadata attributes 
   </caption> 
   <tbody> 
    <tr> 
     <th>Attribute</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_ARTIST</span></td> 
     <td>Artist of the audio content</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_TITLE</span></td> 
     <td>Title of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_ALBUM</span></td> 
     <td>Album of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_GENRE</span></td> 
     <td>Genre of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_AUTHOR</span></td> 
     <td>Author of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_COPYRIGHT</span></td> 
     <td>Copyright of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_DATE</span></td> 
     <td>Date of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_DESCRIPTION</span></td> 
     <td>Description of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_COMMENT</span></td> 
     <td>Comment of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_TRACK_NUM</span></td> 
     <td>Track number of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_PICTURE_NUM</span></td> 
     <td>Picture number of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_CONDUCTOR</span></td> 
     <td>Conductor of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_EDITOR_ATTR_UNSYNCLYRICS</span></td> 
     <td>Unsync lyrics of the audio content</td> 
    </tr> 
   </tbody> 
  </table> 

<h2 id="extract">Metadata Extraction</h2>
<p>Media files, such as mp3 and mp4 files, contain metadata. Metadata extractor enables you to <a href="#get_metadata">extract metadata from the media files</a>. Before you start, remember to <a href="#prerequisites">prepare your application to use the metadata extractor functionality</a>.</p>
 
 <p class="figure">Figure: Getting metadata</p> 
 <p align="center"><img src="../../images/metadata.png" alt="Getting metadata" /></p>
 
  <p>The metadata extractor can only be used with video and audio files only. It is not supported in the image files.</p>
  <p>The following table lists the extractable metadata.</p>
  
  <table> 
   <caption>
     Table: Metadata extractor attributes 
   </caption> 
   <tbody> 
    <tr> 
     <th>Attribute</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_DURATION</span></td> 
     <td>Duration of the content</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_VIDEO_BITRATE</span></td> 
     <td>Bitrate of the video content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_VIDEO_FPS</span></td> 
     <td>FPS of the video content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_VIDEO_WIDTH</span></td> 
     <td>Width of the video content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_VIDEO_HEIGHT</span></td> 
     <td>Height of the video content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_HAS_VIDEO</span></td> 
     <td>Whether the content has video stream</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_AUDIO_BITRATE</span></td> 
     <td>Bitrate of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_AUDIO_CHANNELS</span></td> 
     <td>Channel of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_AUDIO_SAMPLERATE</span></td> 
     <td>Sample rate of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_AUDIO_BITPERSAMPLE</span></td> 
     <td>Bit per sample of the audio content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_HAS_AUDIO</span></td> 
     <td>Whether the content has audio stream</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_ARTIST</span></td> 
     <td>Artist of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_TITLE</span></td> 
     <td>Title of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_ALBUM</span></td> 
     <td>Album of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_ALBUM_ARTIST</span></td> 
     <td>Album artist of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_GENRE</span></td> 
     <td>Genre of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_AUTHOR</span></td> 
     <td>Author of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_COPYRIGHT</span></td> 
     <td>Copyright of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_DATE</span></td> 
     <td>Date of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_DESCRIPTION</span></td> 
     <td>Description of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_COMMENT</span></td> 
     <td>Comment about the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_TRACK_NUM</span></td> 
     <td>Track number of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_CLASSIFICATION</span></td> 
     <td>Classification of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_RATING</span></td> 
     <td>Rating of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_LONGITUDE</span></td> 
     <td>Longitude of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_LATITUDE</span></td> 
     <td>Latitude of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_ALTITUDE</span></td> 
     <td>Altitude of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_CONDUCTOR</span></td> 
     <td>Conductor of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_UNSYNCLYRICS</span></td> 
     <td>Asynchronous lyrics of the content</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_SYNCLYRICS_NUM</span></td> 
     <td>Synchronous lyrics of the content</td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_RECDATE</span></td> 
     <td>Recorded date of the content</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">METADATA_ROTATE</span></td> 
     <td>Orientation of the content</td> 
    </tr> 
   </tbody> 
  </table> 

  
  <h2 id="mime">MIME Type Information</h2> 
  
<p>You can retrieve various information related to the MIME type.</p>  
  
<p>The main features of the MIME Type API include:</p>
 
<ul><li>Getting the MIME type
<p>To <a href="#get_file_ext">get a MIME type</a> for a file extension, use the <span style="font-family: Courier New,Courier,monospace">mime_type_get_mime_type()</span> function. The MIME type is &#39;application/octet-stream&#39;, if the given file extension is not associated with any specific file format.</p></li>

<li>Getting associated extensions
<p>To <a href="#get_mime">get a list of extensions</a> associated, for example, with an image or a JPEG MIME type, use the <span style="font-family: Courier New,Courier,monospace">mime_type_get_file_extension()</span> function.</p></li></ul>

 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the MIME type functionality</a>.</p>
 

  
<h2>Warm-up</h2>
<p>Become familiar with the Metadata Editor, Metadata Extractor, and MIME Type API basics by learning about:</p>
	<ul>
		<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the metadata functionality.</p></li>
        <li>Metadata editor
            <ul>
				<li><a href="#edit_metadata">Editing Metadata and Artwork</a>
				<p>Create a metadata editor handle, bind the handle with an audio file, edit the metadata and artwork, and apply the edits to the file.</p></li>
			</ul>
		</li>
        <li>Meta extractor
            <ul>
				<li><a href="#get_metadata">Retrieving Metadata</a>
				<p>Create a metadata extractor handle, bind the handle with a media file, and retrieve the metadata, artwork, lyrics, and frames.</p></li>
			</ul>
		</li>
        <li>MIME type
            <ul>
				<li><a href="#get_file_ext">Getting the MIME Type for a File Extension</a>
				<p>Get a MIME type when an extension is known.</p></li>
				<li><a href="#get_mime">Getting Extensions for a MIME Type</a>
				<p>Get extensions mapped to certain MIME types.</p></li>
			</ul>
		</li>
	</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the metadata functionality:</p>
<ol>
<li>

<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__METADATA__EDITOR__MODULE.html">Metadata Editor</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;metadata_editor.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;metadata_editor.h&gt;
</pre>

</li>

<li>

<p>To work with the Metadata Editor API, define a handle variable for the metadata editor:</p>

<pre class="prettyprint">
static metadata_editor_h g_metadata_h = NULL;
</pre>

<p>This guide uses a global variable for the handle.</p>

</li>

<li>

<p>Make sure you have access to the file whose metadata and artwork you want to edit.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The metadata editor APIs can use both common content in the device storage (internal or external) and private content in your application data.</td>
        </tr>
    </tbody>
</table>

<p>This guide uses an MP3 audio file, which is accessed through its file path. The following example code uses an internal storage, so you must include the <span style="font-family: Courier New,Courier,monospace;">storage.h</span> header file for the code to work.</p>

<pre class="prettyprint">
int internal_storage_id;
char *internal_music_storage_path;
char *music_file_name = &quot;test_music.mp3&quot;;
char *music_test_path;

static bool
storage_cb(int storage_id, storage_type_e type, storage_state_e state,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

void
_get_internal_storage_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int error;
&nbsp;&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;error = storage_foreach_device_supported(storage_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_MUSIC, &amp;path);
&nbsp;&nbsp;&nbsp;&nbsp;if (error == STORAGE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_music_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

void
_make_test_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int path_len = 0;

&nbsp;&nbsp;&nbsp;&nbsp;path_len = strlen(internal_music_storage_path) + strlen(music_file_name) + 2;
&nbsp;&nbsp;&nbsp;&nbsp;music_test_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;&nbsp;memset(music_test_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;&nbsp;snprintf(music_test_path, path_len, &quot;%s/%s&quot;, internal_music_storage_path, music_file_name);
}
</pre>

</li>
<li>

<p>To use the functions and data types of the Metadata Extractor API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace;">&lt;metadata_extractor.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;metadata_extractor.h&gt;
</pre>

<p>To ensure that a Metadata Extractor function has been executed properly, make sure that the return value is equal to <span style="font-family: Courier New,Courier,monospace;">METADATA_EXTRACTOR_ERROR_NONE</span>.</p>

</li>

<li>

<p>To work with the Metadata Extractor API, define a handle variable for the metadata extractor:</p>

<pre class="prettyprint">
static metadata_extractor_h g_metadata_h = NULL;
</pre>

<p>This guide uses a global variable for the handle.</p>

</li>

<li>

<p>Make sure you have access to the files whose metadata you want to extract, and make sure the files contain metadata, since the Metadata Extractor API only works on files with metadata.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The Metadata Extractor functions can use both common content in the device storage (internal or external) and private content in your application data.</td>
        </tr>
    </tbody>
</table>

<p>This guide uses 2 files: an MP3 audio file and an MP4 video file, which are accessed through their file paths. The following example code uses an internal storage, so you must include the <span style="font-family: Courier New,Courier,monospace;">storage.h</span> header file for the code to work.</p>

<pre class="prettyprint">
int internal_storage_id;
char *internal_music_storage_path;
char *internal_video_storage_path;
char *music_file_name = &quot;test_music.mp3&quot;;
char *video_file_name = &quot;test_video.mp4&quot;;
char *music_test_path;
char *video_test_path;

static bool
storage_cb(int storage_id, storage_type_e type, storage_state_e state,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_storage_id = storage_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

void
_get_internal_storage_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int error;
&nbsp;&nbsp;&nbsp;&nbsp;char *path = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;error = storage_foreach_device_supported(storage_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_MUSIC, &amp;path);
&nbsp;&nbsp;&nbsp;&nbsp;if (error != STORAGE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_music_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;error = storage_get_directory(internal_storage_id, STORAGE_DIRECTORY_VIDEOS, &amp;path);
&nbsp;&nbsp;&nbsp;&nbsp;if (error != STORAGE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal_video_storage_path = strdup(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(path);
&nbsp;&nbsp;&nbsp;&nbsp;}
}

void
_make_test_path()
{
&nbsp;&nbsp;&nbsp;&nbsp;int path_len = 0;

&nbsp;&nbsp;&nbsp;&nbsp;path_len = strlen(internal_music_storage_path) + strlen(music_file_name) + 1;
&nbsp;&nbsp;&nbsp;&nbsp;music_test_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;&nbsp;memset(music_test_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;&nbsp;strncat(music_test_path, internal_music_storage_path, strlen(internal_music_storage_path));
&nbsp;&nbsp;&nbsp;&nbsp;strncat(music_test_path, music_file_name, strlen(music_file_name));

&nbsp;&nbsp;&nbsp;&nbsp;path_len = strlen(internal_video_storage_path) + strlen(video_file_name) + 1;
&nbsp;&nbsp;&nbsp;&nbsp;video_test_path = malloc(path_len);
&nbsp;&nbsp;&nbsp;&nbsp;memset(video_test_path, 0x0, path_len);

&nbsp;&nbsp;&nbsp;&nbsp;strncat(video_test_path, internal_video_storage_path, strlen(internal_video_storage_path));
&nbsp;&nbsp;&nbsp;&nbsp;strncat(video_test_path, video_file_name, strlen(video_file_name));
}
</pre>

</li>
<li>
<p>To use the functions and data types of the MIME Type API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__CONTENT__MIME__TYPE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__CONTENT__MIME__TYPE__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;mime_type.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;mime_type.h&gt;
</pre>
</li>

</ol>


<h2 id="edit_metadata" name="edit_metadata">Editing Metadata and Artwork in Mobile Applications</h2>

<p>To edit the metadata and artwork in the file:</p>

<ol>

<li>

<p>Create the metadata editor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_create()</span> function:</p>

<pre class="prettyprint">
ret = metadata_editor_create(&amp;g_metadata_h);
</pre>

</li>

<li>

<p>Set the path to the file you want to edit using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_set_path()</span> function:</p>

<pre class="prettyprint">
ret = metadata_editor_set_path(g_metadata_h, music_test_path);
</pre>

<p>The function binds the metadata editor handle (first parameter) with the file specified in the <span style="font-family: Courier New,Courier,monospace;">music_test_path</span> variable (second parameter).</p>

</li>

<li>

<p>Edit the metadata in the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_set_metadata()</span> function. Edit each piece of metadata (each metadata attribute) individually.</p>

<p>As parameters, define the metadata editor handle, the attribute you want to edit, and the new value you want to set to the attribute. The possible attributes are defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__METADATA__EDITOR__MODULE.html#ga1c6a8dcf861f527302e9c55152692df3">metadata_editor_attr_e</a> enumeration.</p>

<p>The following example code edits the title of the audio content. You can edit other attributes by defining a different attribute enumerator (and a corresponding new value).</p>

<pre class="prettyprint">
char *value = &quot;My Song&quot;;

ret = metadata_editor_set_metadata(g_metadata_h, METADATA_EDITOR_ATTR_TITLE, value);
</pre>

<p>After calling the function, check whether the return value is <span style="font-family: Courier New,Courier,monospace;">METADATA_EDITOR_ERROR_NONE</span>. If it is, you can check the updated metadata using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_get_metadata()</span> function. Otherwise, the function failed because of an error, which you need to handle.</p>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The updated metadata is applied to the file only after you call the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_update_metadata()</span> function, which is discussed below.</td>
        </tr>
    </tbody>
</table>

</li>

<li>

<p>Add artwork to the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_append_picture()</span> function.</p>

<p>As parameters, define the metadata editor handle and the path of the image file that contains the artwork. The image file must be in the JPEG or PNG format. The image is added to the last image file position. You can add multiple image files to the same audio file.</p>

<pre class="prettyprint">
char *artwork = &quot;append_image.jpg&quot;;

ret = metadata_editor_append_picture(g_metadata_h, artwork);
</pre>

<p>To remove artwork from the file, use the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_remove_picture()</span> function. As parameters, define the metadata editor handle and the index number of the image file you want to remove.</p>

<p>To retrieve the number of images in the file, use the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_get_metadata()</span> function. To retrieve a specific image, use the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_get_picture()</span> function.</p>

<pre class="prettyprint">
int index = 0;

ret = metadata_editor_remove_picture(g_metadata_h, index);
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">The artwork is added to the file or removed from the file only after you call the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_update_metadata()</span> function, which is discussed below.</td>
        </tr>
    </tbody>
</table>

</li>

<li>

<p>Apply the metadata and artwork edits to the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_update_metadata()</span> function:</p>

<pre class="prettyprint">
ret = metadata_editor_update_metadata(g_metadata_h);
</pre>

</li>

<li>

<p>When no longer needed, destroy the metadata editor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_editor_destroy()</span> function:</p>

<pre class="prettyprint">
metadata_editor_destroy(g_metadata_h);
</pre>

</li>

</ol>

<h2 id="get_metadata" name="get_metadata">Retrieving Metadata</h2>

<p>To retrieve metadata from the file:</p>

<ol>

<li>

<p>Create the metadata extractor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_create()</span> function:</p>

<pre class="prettyprint">
ret = metadata_extractor_create(&amp;g_metadata_h);
</pre>

</li>

<li>

<p>Set the path to the file whose metadata you want to retrieve using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_set_path()</span> function:</p>

<pre class="prettyprint">
ret = metadata_extractor_set_path(g_metadata_h, video_test_path);

/* Or */

ret = metadata_extractor_set_path(g_metadata_h, music_test_path);
</pre>

<p>The function binds the metadata extractor handle (first parameter) with the file specified in the path variable (second parameter).</p>

</li>

<li>

<p>Retrieve the metadata from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_metadata()</span> function. Retrieve each piece of metadata (each metadata attribute) individually.</p>

<p>As parameters, define the metadata extractor handle, the attribute you want to retrieve, and a pointer to the <span style="font-family: Courier New,Courier,monospace;">char</span> variable in which you want to store the attribute value. The possible attributes are defined in the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_attr_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html#ga5b27fedbf5aaa22106f88b831c596872">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html#ga5b27fedbf5aaa22106f88b831c596872">wearable</a> applications).</p>

<p>The following example code retrieves the duration and prints it on the screen. You can retrieve other attributes by defining a different attribute enumerator as the second parameter.</p>

<pre class="prettyprint">
char *value = NULL;

ret = metadata_extractor_get_metadata(g_metadata_h, METADATA_DURATION, &amp;value);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;METADATA_DURATION: %s\n&quot;, value);
if (value != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(value);
&nbsp;&nbsp;&nbsp;&nbsp;value = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">value</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>

</li>

<li>

<p>In case of an audio file, retrieve the artwork from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_artwork()</span> function.</p>

<p>The retrieved artwork information is available in the 3 out parameters, which define the artwork image, image size, and MIME type.</p>

<p>The following example code retrieves the artwork and prints the image size and MIME type on the screen:</p>

<pre class="prettyprint">
int artwork_size = 0;
void *artwork = NULL;
char *artwork_mime = NULL;

ret = metadata_extractor_get_artwork(g_metadata_h, &amp;artwork, &amp;artwork_size, &amp;artwork_mime);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Artwork: size: %d, mime type: %s\n&quot;, artwork_size, artwork_mime);
if (artwork != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(artwork);
&nbsp;&nbsp;&nbsp;&nbsp;artwork = NULL;
}

if (artwork_mime != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(artwork_mime);
&nbsp;&nbsp;&nbsp;&nbsp;artwork_mime = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">artwork</span> and <span style="font-family: Courier New,Courier,monospace;">artwork_mime</span> variables using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variables.</p>

</li>

<li>

<p>In case of an audio file, retrieve the synchronized lyrics from the file using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_synclyrics()</span> function.</p>

<p>The following example code retrieves the synchronized lyrics from index number 1 and prints the time information and lyrics on the screen:</p>

<pre class="prettyprint">
unsigned long time_info = 0;
char *lyrics = NULL;

ret = metadata_extractor_get_synclyrics(g_metadata_h, 1, &amp;time_info, &amp;lyrics);
if (lyrics != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Synclyrics: time_info: %d, lyrics: %s\n&quot;, time_info, lyrics);
&nbsp;&nbsp;&nbsp;&nbsp;free(lyrics);
&nbsp;&nbsp;&nbsp;&nbsp;lyrics = NULL;
}
</pre>

<p>To retrieve the synchronized lyrics index number, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_metadata()</span> function with the <span style="font-family: Courier New,Courier,monospace;">METADATA_SYNCLYRICS_NUM</span> attribute.</p>
<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">lyrics</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>

</li>

<li>

<p>In case of a video file, retrieve frames from the file in one of the following ways:</p>

<ul>
    <li><p>To retrieve a frame without specifying the time when the frame appears, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame()</span> function.</p></li>
    <li><p>To retrieve a frame at a specified time, use the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_get_frame_at_time()</span> function.</p></li>
</ul>

<p>The following example code first retrieves a frame at an unspecified time and prints the frame size, and then retrieves another frame at a specified time and prints its size:</p>

<pre class="prettyprint">
/* Use metadata_extractor_get_frame() */
int frame_size = 0;
void *frame = NULL;

ret = metadata_extractor_get_frame(g_metadata_h, &amp;frame, &amp;frame_size);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Frame: size: %d\n&quot;, frame_size);
if (frame != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(frame);
&nbsp;&nbsp;&nbsp;&nbsp;frame = NULL;
}

/* Use metadata_extractor_get_frame_at_time() */
unsigned long timestamp = 500;

ret = metadata_extractor_get_frame_at_time(g_metadata_h, timestamp, true, &amp;frame, &amp;frame_size);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Frame at %d: size: %d\n&quot;, timestamp, frame_size);
if (frame != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;free(frame);
&nbsp;&nbsp;&nbsp;&nbsp;frame = NULL;
}
</pre>

<p>To avoid memory leaks, release the <span style="font-family: Courier New,Courier,monospace;">frame</span> variable using the <span style="font-family: Courier New,Courier,monospace;">free()</span> function when you no longer need the variable.</p>
</li>
<li>

<p>When no longer needed, destroy the metadata extractor handle using the <span style="font-family: Courier New,Courier,monospace;">metadata_extractor_destroy()</span> function:</p>

<pre class="prettyprint">
metadata_extractor_destroy(g_metadata_h);
</pre>

</li>

</ol>


<h2 id="get_file_ext" name="get_file_ext">Getting the MIME Type for a File Extension</h2>

<p>To get the MIME types of all files in a directory when the extensions are known:</p>
<ul>
<li>For an individual file extension:
<p>Use the <span style="font-family: Courier New,Courier,monospace;">mime_type_get_mime_type()</span> function. The first parameter is the file extension without the leading dot and the second parameter is the MIME type for the given file extension.</p>
 
<p>The MIME type is <span style="font-family: Courier New,Courier,monospace;">&#39;application/octet-stream&#39;</span> if the given file extension is not associated with any specific file format.</p>

<pre class="prettyprint">
#include &lt;dirent.h&gt;
#include &lt;string.h&gt;

char *mime_type;
int error = mime_type_get_mime_type(&quot;jpg&quot;, &amp;mime_type);
</pre></li>

<li>For the extensions of all files in the resource directory:
<ol>
<li>To get the directory content, use the <span style="font-family: Courier New,Courier,monospace;">dirent</span> structure available in the <span style="font-family: Courier New,Courier,monospace;">&lt;dirent.h&gt;</span> header:

<pre class="prettyprint">
struct dirent *pDirent = NULL;
DIR *dir;
char *res_path = app_get_resource_path();
if (!res_path)
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
dir = opendir(res_path);
if (dir) {
&nbsp;&nbsp;&nbsp;&nbsp;while ((pDirent = readdir(dir)) != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pDirent-&gt;d_type != DT_REG) /* Only regular files */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
</pre></li>

<li><p>Get the extension from a file name using the <span style="font-family: Courier New,Courier,monospace;">strrchr()</span> function available in the <span style="font-family: Courier New,Courier,monospace;">&lt;string.h&gt;</span> header. Incrementing the pointer address is necessary, so use the extension without a dot:</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *extension = strrchr(pDirent-&gt;d_name, &#39;.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!extension)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extension++;
</pre></li>

<li><p>Use the <span style="font-family: Courier New,Courier,monospace;">mime_type_get_mime_type()</span> function to get the MIME type of each file using the extension pointer as an extension:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mime_type_get_mime_type(extension, &amp;mime_type);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Here you have a MIME type in its variable */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(mime_type);
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;closedir(dir);
}
</pre></li></ol></li>
</ul>

 <h2 id="get_mime" name="get_mime">Getting Extensions for a MIME Type</h2>

<p>To get a list of extensions associated, for example, with an image or JPEG MIME type, use the <span style="font-family: Courier New,Courier,monospace;">mime_type_get_file_extension()</span> function. </p>
<p>The function takes the MIME type as an input parameter, and fills the array of file extensions and the array length (marked as zero if empty) as the output parameters.</p>
<pre class="prettyprint">
char **extension;
int length;
int error = mime_type_get_file_extension(&quot;image/jpeg&quot;, &amp;extension, &amp;length);

int i;
for (i = 0; i &lt; length; i++)
&nbsp;&nbsp;&nbsp;&nbsp;/* Use extension[i] */

for (i = 0; i &lt; length; i++)
&nbsp;&nbsp;&nbsp;&nbsp;free(extension[i]);
free(extension);
</pre>

 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>