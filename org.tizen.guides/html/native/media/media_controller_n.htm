<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Media Controller</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#get_media">Updating and Retrieving Information</a></li>
            <li><a href="#send_media">Sending and Processing Commands</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__MODULE.html">Media Controller API for Mobile Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Multimedia/Media-controller_client" target="_blank">Media-controller Client Sample Description</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Multimedia/Media-controller_server" target="_blank">Media-controller Server Sample Description</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Media Controller</h1>
<p>Tizen enables you to communicate between the media controller server and the media controller client. You can <a href="#send_media">send commands</a> from the client to the server, and the client can <a href="#get_media">request updated metadata and playback information</a> from the server.</p>

  <p>This feature is supported in mobile applications only.</p>

<p>The main features of the Media Controller API include:</p>

<ul> 
<li>Media controller server
	<p>The media controller server provides current information about the registered application that you can send to the client.</p>
	<p>To transfer the information at the client request, the media controller server updates the state information while the application is active. If the application is terminated when the client request arrives, the media controller server transfers the latest information.</p>		
</li>  
<li>Media controller client
	<p>You can request information, and the media controller client can receive it from the media controller server through a callback.</p> 
	<p>The following tables define the various information the client can receive.</p> 
  <table> 
   <caption>
     Table: Media controller server state attributes
   </caption> 
   <tbody> 
    <tr> 
     <th>Attribute</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td colspan="2"><strong>Server states</strong></td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_SERVER_ACTIVATE</span></td> 
     <td>Requested media controller server is active</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_SERVER_DEACTIVATE</span></td> 
     <td>Requested media controller server is not active</td> 
    </tr> 
    <tr> 
     <td colspan="2"><strong>Playback states</strong></td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_NONE</span></td> 
     <td>No history of media playback</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_PLAYING</span></td> 
     <td>Playback state of playing</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_PAUSED</span></td> 
     <td>Playback state of paused</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_STOPPED</span></td> 
     <td>Playback state of stopped</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_NEXT_FILE</span></td> 
     <td>Playback state of next file</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_PREV_FILE</span></td> 
     <td>Playback state of previous file</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_FAST_FORWARD</span></td> 
     <td>Playback state of fast forward</td> 
    </tr>
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_PLAYBACK_STATE_REWIND</span></td> 
     <td>Playback state of rewind</td> 
    </tr>	
    <tr> 
     <td colspan="2"><strong>Shuffle mode states</strong></td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_SHUFFLE_MODE_ON</span></td> 
     <td>Shuffle mode is on</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_SHUFFLE_MODE_OFF</span></td> 
     <td>Shuffle mode is off</td> 
    </tr> 	
    <tr> 
     <td colspan="2"><strong>Repeat mode states</strong></td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_REPEAT_MODE_ON</span></td> 
     <td>Repeat mode is on</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_REPEAT_MODE_OFF</span></td> 
     <td>Repeat mode is off</td> 
    </tr> 	
   </tbody> 
  </table> 
    <table> 
   <caption>
     Table: Media controller server metadata attributes 
   </caption> 
   <tbody> 
    <tr> 
     <th>Attribute</th> 
     <th>Description</th> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_TITLE</span></td> 
     <td>Title of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_ARTIST</span></td> 
     <td>Artist of the latest content in the media controller server</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_ALBUM</span></td> 
     <td>Album name of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_AUTHOR</span></td> 
     <td>Author of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_GENRE</span></td> 
     <td>Genre of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_DURATION</span></td> 
     <td>Duration of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_DATE</span></td> 
     <td>Date of the latest content in the media controller server</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_COPYRIGHT</span></td> 
     <td>Copyright of the latest content in the media controller server</td> 
    </tr>     
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_DESCRIPTION</span></td> 
     <td>Description of the latest content in the media controller server</td> 
    </tr>
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_TRACK_NUM</span></td> 
     <td>Track number of the latest content in the media controller server</td> 
    </tr>
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">MC_META_MEDIA_PICTURE</span></td> 
     <td>Album art of the latest content in the media controller server</td> 
    </tr>
   </tbody> 
  </table> 
 </li></ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the media controller functionality</a>.</p>

<h2>Warm-up</h2>

<p>Become familiar with the Media Controller API basics by learning about:</p>

<ul>
    <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the media controller functionality.</p></li>
    <li><a href="#get_media">Updating and Retrieving Information</a>
        <p>Update the metadata and playback information on the server side, and then retrieve the metadata and playback information on the client side.</p></li>
    <li><a href="#send_media">Sending and Processing Commands</a>
        <p>Send a command to the server from the client side, and then process the command on the server side.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the media controller functionality:</p>

<ul>
<li>To use the media controller server:
<ol>
<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__SERVER__MODULE.html">Media Controller Server</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_server.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;media_controller_server.h&gt;
</pre>
</li>
<li>
<p>To work with the Media Controller Server API, define a handle variable for the media controller server:</p>
<pre class="prettyprint">
static mc_server_h g_server_h = NULL;
</pre>
<p>The server updates the metadata and playback information, and processes the requests and commands sent by the client.</p>
<p>This guide uses a global variable for the handle.</p>
</li>
</ol>
</li>
<li>
<p>To use the media controller client:</p>
<ol>
<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__CONTROLLER__CLIENT__MODULE.html">Media Controller Client</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;media_controller_client.h&gt;</span> header file in your application:</p>

<pre class="prettyprint">
#include &lt;media_controller_client.h&gt;
</pre>
</li>
<li>
<p>To work with the Media Controller Client API, define a handle variable for the media controller client:</p>
<pre class="prettyprint">
static mc_client_h g_client_h = NULL;
</pre>
<p>The client requests metadata and playback information from the server, and sends playback commands to server.</p>
<p>This guide uses a global variable for the handle.</p>
</li>
</ol>
</li>
</ul>

<h2 id="get_media" name="get_media">Updating and Retrieving Information</h2>

<p>To update the metadata and playback information on the server side:</p>

<ol>

<li>

<p>Create the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre>

</li>

<li>

<p>Set the metadata or playback information to be updated using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_server_set_XXX()</span> function, and then update the metadata or playback information using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_server_update_XXX()</span> function.</p>

<p>For example, to update the playback state information, set the information to be updated using the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state()</span> function, and then update the information using the <span style="font-family: Courier New,Courier,monospace;">mc_server_update_playback_info()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_set_playback_state(g_mc_server, MC_PLAYBACK_STATE_PLAYING);

ret = mc_server_update_playback_info(g_mc_server);
</pre>

</li>

<li>

<p>When no longer needed, destroy the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_destroy()</span> function:</p>

<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre>

</li>

</ol>

<p>To retrieve the metadata and playback information on the client side:</p>

<ol>

<li>

<p>Create the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre>

</li>

<li>

<p>Retrieve the server name using the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function:</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_server_state_e server_state;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);
</pre>

</li>

<li>

<p>Retrieve the metadata or playback information from the server using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_XXX()</span> function. Use the server name retrieved in the previous step to identify the server.</p>

<p>For example, to retrieve the playback information from the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_playback_info()</span> function:</p>

<pre class="prettyprint">
mc_playback_h playback = NULL;
mc_playback_states_e playback_state;

ret = mc_client_get_server_playback_info(g_client_h, server_name, &amp;playback);

ret = mc_client_get_playback_state(playback, &amp;playback_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Playback State: %d\n&quot;, playback_state);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">mc_client_get_playback_state()</span> function retrieves the playback state from the playback information returned by the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_server_playback_info()</span> function.</p>

</li>

<li>

<p>When no longer needed, destroy the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_destroy()</span> function:</p>

<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre>

</li>

</ol>

<h2 id="send_media" name="send_media">Sending and Processing Commands</h2>

<p>To send a command to the server from the client side:</p>

<ol>

<li>

<p>Create the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_client_create(&amp;g_client_h);
</pre>

</li>

<li>

<p>Retrieve the server name using the <span style="font-family: Courier New,Courier,monospace;">mc_client_get_latest_server_info()</span> function:</p>

<pre class="prettyprint">
char *server_name = NULL;
mc_server_state_e server_state;

ret = mc_client_get_latest_server_info(g_mc_client, &amp;server_name, &amp;server_state);
dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Server Name: %s, Server state: %d\n&quot;, server_name, server_state);
</pre>

</li>

<li>

<p>Send the command to the server using the corresponding <span style="font-family: Courier New,Courier,monospace;">mc_client_send_XXX()</span> function. Use the server name retrieved in the previous step to identify the server.</p>

<p>For example, to send a playback state change command to the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_playback_state_command()</span> function with the new state defined in the third parameter:</p>

<pre class="prettyprint">
mc_playback_h playback = NULL;
mc_playback_states_e playback_state = MC_PLAYBACK_STATE_PLAYING;

ret = mc_client_send_playback_state_command(g_client_h, server_name, playback_state);
</pre>

<p>If you want to define your own commands to send to the server, use the <span style="font-family: Courier New,Courier,monospace;">mc_client_send_custom_command()</span> function.</p>

</li>

<li>

<p>When no longer needed, destroy the media controller client handle using the <span style="font-family: Courier New,Courier,monospace;">mc_client_destroy()</span> function:</p>

<pre class="prettyprint">
mc_client_destroy(g_client_h);
</pre>

</li>

</ol>

<p>To process the received command on the server side:</p>

<ol>

<li>

<p>Create the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_create()</span> function:</p>

<pre class="prettyprint">
ret = mc_server_create(&amp;g_server_h);
</pre>

</li>

<li>

<p>Define the callback that is invoked when the server receives the command.</p>

<p>For example, to define a callback for playback state change commands:</p>

<pre class="prettyprint">
void
command_received_cb(const char* client_name, mc_playback_states_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Client Name: %s, Playback state: %d\n&quot;, client_name, state);
}
</pre>

</li>

<li>

<p>Register the callback:</p>

<ul>

<li>

<p>To register a callback for playback state change commands, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_playback_state_command_received_cb()</span> function.</p>

</li>

<li>

<p>To register a callback for a custom command, use the <span style="font-family: Courier New,Courier,monospace;">mc_server_set_custom_command_received_cb()</span> function.</p>

</li>

</ul>

<p>For example, to register a callback for playback state change commands:</p>

<pre class="prettyprint">
ret = mc_server_set_playback_state_command_received_cb(g_mc_server, command_received_cb, NULL);
</pre>

</li>

<li>

<p>When no longer needed, destroy the media controller server handle using the <span style="font-family: Courier New,Courier,monospace;">mc_server_destroy()</span> function:</p>

<pre class="prettyprint">
mc_server_destroy(g_server_h);
</pre>

</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>