<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Media Stream Recording</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 3.0 and Higher for Mobile</li>
			<li>Tizen Platform 3.0 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#encode">Managing Encoding</a></li>
			<li><a href="#packet">Creating a Media Packet</a></li>
			<li><a href="#record_stream">Recording a Stream</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html">StreamRecorder API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html">StreamRecorder API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Media Stream Recording</h1>

<p>Tizen provides basic stream recorder features, including audio and video recording from a live buffer. With the stream recorder, live audio and video can be kept in your target.</p>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the stream recorder functionalities</a>.</p>

<p>The main features of the StreamRecorder API include:</p>
<ul>
<li>Creating a media packet
<p>You must <a href="#packet">create a media packet</a> for the stream recording using raw data from the source. The media packet must be created for each buffer captured from source and passed to the <span style="font-family: Courier New,Courier,monospace">streamrecorder_push_stream_buffer()</span> function.</p></li>
<li>Recording audio and video, and controlling the recording
<p>You can <a href="#record_stream">record a stream, and stop, pause, and cancel the recording</a>, and push the buffer.</p>
</li>

<li>Encoding files
<p>You can <a href="#encode">encode files</a> with various formats and codecs:</p>
<ul>

<li>Supported file formats:
<ul>
<li>Video: <span style="font-family: Courier New,Courier,monospace">mp4</span> and <span style="font-family: Courier New,Courier,monospace">3gp</span></li>
<li>Audio: <span style="font-family: Courier New,Courier,monospace">amr</span> and <span style="font-family: Courier New,Courier,monospace">aac</span></li>
</ul>
<p>The supported file formats are defined in the <span style="font-family: Courier New,Courier,monospace">streamrecorder_file_format_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#gadb3d70e90207c780e1473785a712d90d">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#gadb3d70e90207c780e1473785a712d90d">wearable</a> applications).</p></li>
<li>Video codec for encoding a video stream
<p>To set the video codec for encoding a video stream, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_video_encoder()</span> function.</p>
<p>The available video codecs are defined in the <span style="font-family: Courier New,Courier,monospace">streamrecorder_video_codec_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#gae2912d9eceeac43640efa52f96556473">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#gae2912d9eceeac43640efa52f96556473">wearable</a> applications).</p></li>
<li>Audio codec for encoding an audio stream
<p>To set the audio codec for encoding an audio stream, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_audio_encoder()</span> function.</p>
<p>The available audio codecs are defined in the <span style="font-family: Courier New,Courier,monospace">streamrecorder_audio_codec_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#ga46f244622314395be47eddb8d84fabd2">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#ga46f244622314395be47eddb8d84fabd2">wearable</a> applications).</p>
</li>
</ul>
</li>
<li>Managing recording details
<p>You can manage various recording details, such as get and set the filename for the video and audio recording.</p>
<p>You can manage the following attributes:</p>
<ul>
<li>Audio codec for encoding the audio stream</li>
<li>Video codec for encoding the video stream</li>
<li>File format</li>
<li>File path to record</li>
<li>Time and file size limit of the recording file</li>
<li>Sampling rate of the audio stream</li>
<li>Bitrate of the audio or video encoder</li>
<li>Number of audio channels</li>
</ul></li>
</ul>

<p>Valid input sources consist of external sources, such as a live buffer passed by the application. Most operations of the stream recorder functions work in a synchronous mode, but some operations can work in an asynchronous mode, which means that callbacks are required to pass an event notification to the application.</p>

<p>The following figure illustrates the general stream recorder state changes. Use the stream recorder functions according to pre and post conditions, by following the state changes.</p>

<p class="figure">Figure: Stream recorder state changes</p>
<p align="center"><img alt="Stream recorder state changes" src="../../images/streamrecorder_states.png" /></p>

<p>The stream recorder functions serve as the interface with the software. Input is processed through a handle.</p>


<h2>Warm-up</h2>

<p>Become familiar with the StreamRecorder API basics by learning about:</p>
<ul>
	<li><a href="#prerequisites">Prerequisites</a>
	<p>Prepare your application to use the stream recorder functionality.</p></li>
	<li><a href="#encode">Managing Encoding</a>
	<p>Get and set encoding attributes.</p></li>
	<li><a href="#packet">Creating a Media Packet</a>
	<p>Create a media packet from the source.</p></li>
	<li><a href="#record_stream">Recording a Stream</a>
	<p>Record a stream from a source.</p></li>
</ul> 


<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the stream recorder functionality:</p>
<ol>
<li>
<p>To use the functions and data types of the StreamRecorder API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;streamrecorder.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;streamrecorder.h&gt;
</pre>
</li>
<li>
<p>Define a structure containing the stream recorder handle and media packet. You can also declare variables to keep the recording time, video file paths, bitrate, recording limits, flag, and return values.</p>
<pre class="prettyprint">
struct streamrecorder_data {
&nbsp;&nbsp;&nbsp;&nbsp;streamrecorder_h streamrecorder;
&nbsp;&nbsp;&nbsp;&nbsp;media_packet_h media_packet;
};
typedef struct streamrecorder_data streamrecdata;

static streamrecdata streamrec_data;

int error_code = 0;
streamrec_data.streamrecorder = NULL;
</pre>
</li>
<li><p>Create the stream recorder handle using the <span style="font-family: Courier New,Courier,monospace">streamrecorder_create()</span> function. On success, the StreamRecorder state becomes <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_CREATED</span>.</p>
<pre class="prettyprint">
/* Create the streamrecorder handle */
error_code = streamrecorder_create(&amp;streamrec_data.streamrecorder);
assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
</pre>
<p>You can get the stream recorder state using the <span style="font-family: Courier New,Courier,monospace">streamrecorder_get_state()</span> function after the handle is created.</p>
</li>
<li>To enable video recording using a live buffer as a source, you have to call the <span style="font-family: Courier New,Courier,monospace">streamrecorder_enable_source_buffer()</span> function. Additionally, you can enable other types of sources with the <span style="font-family: Courier New,Courier,monospace">streamrecorder_source_e</span> enumeration (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#ga1d4c1835d2b7357850bdf706dd58b97e">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMRECORDER__MODULE.html#ga1d4c1835d2b7357850bdf706dd58b97e">wearable</a> applications).
<pre class="prettyprint">
/* Set the video source as live buffer to be used for recording */
error_code = streamrecorder_enable_source_buffer(&amp;streamrec_data.streamrecorder, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STREAMRECORDER_SOURCE_VIDEO);
assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
</pre>
</li>
<li>To subscribe to notifications, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_notify_cb()</span> function to register a callback function. The parameters are a valid stream recorder handle, a callback function, and data passed to the callback.
<pre class="prettyprint">
/* Set the streamrecorder notify callback */
error_code = streamrecorder_set_notify_cb(streamrec_data.streamrecorder, streamrecorder_notify_cb,  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;streamrec_data);
assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
</pre>
<p>The callback function receives 4 parameters, which are the previous and current state of the stream recorder, the notification type, and user data.</p>
<pre class="prettyprint">
/*
   Stream recorder callback is invoked when 
   the streamrecorder gets notifications
*/
static void
streamrecorder_set_notify_cb(streamrecorder_state_e previous, streamrecorder_state_e current, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;streamrecorder_notify_e notification, void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;fprintf(stderr, &quot;streamrecorder_notify (prev: %d, curr: %d)\n&quot;, previous, current);
}
</pre>
</li>
</ol>

<h2 id="encode">Managing Encoding</h2>

<p>To get and set information about video and audio encoding:</p>
<ol>
<li>To get a list of video codecs your device supports, call the <span style="font-family: Courier New,Courier,monospace">streamrecorder_foreach_supported_video_encoder()</span> function. One of its parameters is a callback, which is called for each codec supported for the given stream recorder.
<p>In the following example, the codec of the stream recorder is set to the first found supported codec.</p>
<pre class="prettyprint">
streamrecorder_video_codec_supported_codec;
static bool
_video_encoder_cb(streamrecorder_video_codec_e codec, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;streamrecorder_video_codec_e * supported_codec = (streamrecorder_video_codec_e*)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;supported_codec = codec;

&nbsp;&nbsp;&nbsp;&nbsp;return false;
}

error_code = streamrecorder_foreach_supported_video_encoder(streamrec_data.streamrecorder, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_video_encoder_cb,&amp;supported_codec);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}

/* Set the stream recorder video encoder */
error_code = streamrecorder_set_video_encoder(streamrec_data.streamrecorder,supported_codec);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
</li>
<li>You can set the bitrate of the video encoder with the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_video_encoder_bitrate()</span> function. Even if the bitrate was set, it can depend on the stream buffer which you push. 
<p>You can also set the file format for the recording media stream by invoking the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_file_format()</span> function. Before setting the file format, check the file formats your device supports using the <span style="font-family: Courier New,Courier,monospace">streamrecorder_foreach_supported_file_format()</span> function.</p>
<p>Finally, you need to set the file path to store the recorded data by invoking the <span style="font-family: Courier New,Courier,monospace">streamrecorder_set_filename()</span> function.</p>
<pre class="prettyprint">
staticintg_bitrate = 288000;
static char *g_file = &quot;/opt/media/Downloads/myvideo.mp4&quot;;

/* Set bitrate of video encoder */
error_code = streamrecorder_set_video_encoder_bitrate(streamrec_data.streamrecorder, g_bitrate);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}

/* Set recording file format */
error_code = streamrecorder_set_file_format(streamrec_data.streamrecorder, STREAMRECORDER_FILE_FORMAT_MP4);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}

/* Set file path to store the recorded data */
error_code = streamrecorder_set_filename(streamrec_data.streamrecorder, g_file);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
</li>
</ol>


<h2 id="packet">Creating a Media Packet</h2>

<p>When the stream recorder is configured, create the media packet using the raw data from the source with the Media Tool API functions (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__TOOL__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__TOOL__MODULE.html">wearable</a> applications).</p>
<pre class="prettyprint">
/* Create media packet to be passed to the push stream buffer API */
media_format_h fmt;
void *data; 
void *rawbuffer; /* Data to be passed for recording */
int size; /* Size of each frame buffer */

error_code = media_format_set_video_mime(fmt, MEDIA_FORMAT_MPEG4_SP);
error_code = media_format_set_video_width(fmt, 640);
error_code = media_format_set_video_height(fmt, 480);
error_code = media_packet_create_alloc(fmt, NULL, NULL, &amp;streamrecdata.streamrecorder);

error_code = media_packet_get_buffer_data_ptr(streamrecdata.streamrecorder, &amp;data);
memcpy(data, rawbuffer, size);
error_code = media_packet_set_buffer_size(streamrecdata.streamrecorder, size);
</pre>
<p>The media packet must be created for each buffer captured from the source and passed to the <span style="font-family: Courier New,Courier,monospace">streamrecorder_push_stream_buffer()</span> function when the stream recorder is prepared to record.</p>

<h2 id="record_stream">Recording a Stream</h2>

<p>To record a stream:</p>
<ol>
<li>Call the <span style="font-family: Courier New,Courier,monospace">streamrecorder_prepare()</span> function with a valid stream recorder handle to change the stream recorder state to <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PREPARED</span>. This is one of the states in which you are able to start recording by calling the <span style="font-family: Courier New,Courier,monospace">streamrecorder_start()</span> function.
<pre class="prettyprint">
/* Prepare the streamrecorder, changing the state to STREAMRECORDER_STATE_PREPARED */
error_code = streamrecorder_prepare(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
</li>
<li>Start recording by calling the <span style="font-family: Courier New,Courier,monospace">streamrecorder_start()</span> function with a valid stream recorder handle:
<pre class="prettyprint">
/* Start the stream recorder */
error_code = streamrecorder_start(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
<p>Once the recording starts, the file is removed automatically and replaced with a new one, if you set the file path to an existing file.</p>
<p>Note that you can only call the <span style="font-family: Courier New,Courier,monospace">streamrecorder_start()</span> function in the prepared state (<span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PREPARED</span>) and paused state (<span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PAUSED</span>).</p>
<p>Call the <span style="font-family: Courier New,Courier,monospace">streamrecorder_push_stream_buffer()</span> function, which pushes the media packet to record audio or video.</p>
<pre class="prettyprint">
/* Push the stream buffer to record audio or video */
error_code = streamrecorder_push_stream_buffer(streamrec_data.streamrecorder, streamrec_data.media_packet);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
</li>
<li>During the recording, you can pause or stop it:
<ul>
<li>To stop recording and save the result, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_commit()</span> function with the valid stream recorder handle. The results of the recording are saved to a previously configured file path. This function can be called if the recorder is in the <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_RECORDING</span> or <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PAUSED</span> state.
<pre class="prettyprint">
/* Stop recording and save recorded data to the previously configured path */
error_code = streamrecorder_commit(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
<p>After committing, the stream recorder state is changed to the <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PREPARED</span> state.</p>
<p>If you do not want to save your recording, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_cancel()</span> function with the proper stream recorder handle. The only difference between this function and the <span style="font-family: Courier New,Courier,monospace">streamrecorder_commit()</span> function is that the recording data are not written in the file.</p>
<pre class="prettyprint">
/* Stop recording but don not save the recorded data */
error_code = streamrecorder_cancel(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
</li>
<li>To pause recording, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_pause()</span> function with the valid stream recorder handle. To start recording again later, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_start()</span> function.
<p>This function can be called if the stream recorder is in the <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_RECORDING</span> state.</p>
<pre class="prettyprint">
/* Pause the recording */
error_code = streamrecorder_pause(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
<p>After pausing, the stream recorder state is changed to <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PAUSED</span>.</p>
<p>As a special case, you can stop pushing the stream buffers. In this case, the stream recorder state is <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_RECORDING</span>, because the stream recorder is waiting for buffers. It can make the same effect as a pause in recording.</p>
</li>
</ul>
</li>
<li>When you have finished recording, use the <span style="font-family: Courier New,Courier,monospace">streamrecorder_unprepare()</span> function to reset the stream recorder. The required state for this function is <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_PREPARED</span>. After calling the function, the recorder state is <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_CREATED</span>, which allows you to free all stream recorder resources with the <span style="font-family: Courier New,Courier,monospace">streamrecorder_destroy()</span> function.
<pre class="prettyprint">
/* Unprepare the stream recorder */
error_code = streamrecorder_unprepare(streamrec_data-&gt;streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}

/* Destroy the recorder */
error_code = streamrecorder_destroy(streamrec_data.streamrecorder);
if (STREAMRECORDER_ERROR_NONE != error_code) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
&nbsp;&nbsp;&nbsp;&nbsp;assert_eq(error_code, STREAMRECORDER_ERROR_NONE);
}
</pre>
<p>After this, the stream recorder is changed to the <span style="font-family: Courier New,Courier,monospace">STREAMRECORDER_STATE_NONE</span> state.</p>
</li>
</ol>



<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
