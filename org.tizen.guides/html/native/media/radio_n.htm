<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Radio</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#scan">Scanning for Radio Frequencies</a></li>
            <li><a href="#tune">Tuning the Radio</a></li>
            <li><a href="#seek">Searching for an Adjacent Channel</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RADIO__MODULE.html">Radio API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RADIO__MODULE.html">Radio API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Radio</h1>

<p>Tizen provides functions for controlling radio hardware on your system.</p>

<p>The main features of the Radio API include:</p>  
  
<ul>
  <li>Switching the radio on and off</li>
  <li>Seeking radio frequency</li>
  <li>Scanning radio signals</li>
  <li>Setting the state of the radio</li>
</ul>
  
<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the radio functionality</a>.</p>

<p>Create a handle for a radio instance using the <span style="font-family: Courier New,Courier,monospace;">radio_create()</span> function. A successful creation of the handle requires a radio tuner. You can switch the radio on and off using the <span style="font-family: Courier New,Courier,monospace;">radio_start()</span> and <span style="font-family: Courier New,Courier,monospace;">radio_stop()</span> functions. <a href="#scan">Scan for frequencies</a> and <a href="#tune">select the radio frequency</a> using the <span style="font-family: Courier New,Courier,monospace;">radio_set_frequency()</span> function, or <a href="#seek">seek an adjacent channel</a> with the <span style="font-family: Courier New,Courier,monospace;">radio_seek_up()</span> and <span style="font-family: Courier New,Courier,monospace;">radio_seek_down()</span> functions.</p>

<p>The Radio API allows only one instance at the time. Radio playback can be interrupted by another radio application.</p>

<p>The following figure illustrates the general radio state changes.</p>

  <p class="figure">Figure: Radio state changes</p> 
  <p align="center"><img src="../../images/radio_state_changes.png" alt="Radio state changes" /></p> 
  
<h2>Warm-up</h2>

<p>Become familiar with the Radio API basics by learning about:</p>

<ul>
    <li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the radio functionality.</p></li>
    <li><a href="#scan">Scanning for Radio Frequencies</a>
        <p>Scan for all available radio frequencies.</p></li>
    <li><a href="#tune">Tuning the Radio</a>
        <p>Select and start playing a frequency.</p></li>
    <li><a href="#seek">Searching for an Adjacent Channel</a>
        <p>Search for and tune in to an adjacent channel.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the radio functionality:</p>
<ol>
<li><p>To use the functions and data types of the Radio API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RADIO__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__RADIO__MODULE.html">wearable</a> applications), include the <span style="font-family: Courier New,Courier,monospace">&lt;radio.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;radio.h&gt;
</pre>
</li>
<li><p>Define a handle for the radio using the <span style="font-family: Courier New,Courier,monospace">radio_create()</span> function:</p>
<pre class="prettyprint">
#define MAX_FREQUENCIES 10
struct radioInfo {
&nbsp;&nbsp;&nbsp;&nbsp;radio_h radio;
&nbsp;&nbsp;&nbsp;&nbsp;int frequencies[MAX_FREQUENCIES];
&nbsp;&nbsp;&nbsp;&nbsp;int num_freq;
&nbsp;&nbsp;&nbsp;&nbsp;int selected_channel;
};
typedef struct radioInfo mRadioInfo;

mRadioInfo mRadio;
ret = radio_create(&amp;mRadio.radio);
if (ret != RADIO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
</li>
<li><p>To receive notifications when the radio playback is interrupted, register a callback function using the <span style="font-family: Courier New,Courier,monospace">radio_set_interrupted_cb()</span> function:</p>
<pre class="prettyprint">
ret = radio_set_interrupted_cb(mRadio.radio, on_radio_interrupted, &amp;mRadio);
if (ret != RADIO_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;/* Delete the radio handle before closing the application */

&nbsp;&nbsp;&nbsp;&nbsp;return false;
}
</pre>
<p>Radio playback is interrupted, for example, when the application moves to the background.</p>
</li>
<li><p>Implement the interruption callback:</p>
<pre class="prettyprint">
static void
on_radio_interrupted(radio_interrupted_code_e code, void* userdata)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Search the radio handle from userdata */
&nbsp;&nbsp;&nbsp;&nbsp;mRadioInfo* mRadio = (mRadioInfo *)userdata;

&nbsp;&nbsp;&nbsp;&nbsp;switch (code) {
&nbsp;&nbsp;&nbsp;&nbsp;case RADIO_INTERRUPTED_COMPLETED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Application, which was the source of the conflict, is now closed */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Restart the radio playback here */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Radio listening is interrupted */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Release the application resources or save the current state here */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h2 id="scan" name="scan">Scanning for Radio Frequencies</h2>

<p>To scan for all available radio frequencies:</p>

<ol>
<li><p>To receive a notification when the scan is completed, register a callback function using the <span style="font-family: Courier New,Courier,monospace">radio_set_scan_completed_cb()</span> function:</p>
<pre class="prettyprint">
ret = radio_set_scan_completed_cb(mRadio.radio, on_scan_finished, &amp;mRadio);
if (ret != RADIO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
</li>
<li><p>Implement the scan complete callback:</p>
<pre class="prettyprint">
void
on_scan_finished(void* userdata)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Frequency scanning is completed */
&nbsp;&nbsp;&nbsp;&nbsp;/* Tune in to one of the scanned frequencies and start listening */
}
</pre>
</li>
<li><p>Start scanning:</p>
<pre class="prettyprint">
radio_scan_start(mRadio.radio, on_scan_updated, &amp;mRadio);
</pre>
<p>The scanning time depends on the environment (the strength of the radio signal).</p>
<p>Each time the scan finds a new frequency, it calls the <span style="font-family: Courier New,Courier,monospace">on_scan_updated()</span> callback function, which returns the kHz value of the frequency. To cancel the scan before it completes, use the <span style="font-family: Courier New,Courier,monospace">radio_scan_stop()</span> function.</p>
</li>
<li><p>Implement the scan update callback that returns the available frequencies:</p>
<pre class="prettyprint">
void
on_scan_updated(int frequency, void* userdata)
{
&nbsp;&nbsp;&nbsp;&nbsp;mRadioInfo* mRadio = (mRadioInfo *)userdata;
&nbsp;&nbsp;&nbsp;&nbsp;/* Store the radio channels in the array */
&nbsp;&nbsp;&nbsp;&nbsp;/* Frequency values represent the kHz of the channel */
&nbsp;&nbsp;&nbsp;&nbsp;mRadio-&gt;frequencies[mRadio-&gt;num_freq++] = frequency;
}
</pre>
<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Do not call radio functions (such as <span style="font-family: Courier New,Courier,monospace">radio_set_frequency()</span> or <span style="font-family: Courier New,Courier,monospace">radio_start()</span>) in the callback function.</td>
        </tr>
    </tbody>
</table>
</li>
</ol>

<h2 id="tune" name="tune">Tuning the Radio</h2>

<p>To select and start playing a frequency:</p>

<ol>
<li><p>Set the frequency you want to play using the <span style="font-family: Courier New,Courier,monospace">radio_set_frequency()</span> function:</p>
<pre class="prettyprint">
ret = radio_set_frequency(mRadio.radio, mRadio.frequencies[mRadio.selected_channel]);
if (ret != RADIO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
</li>
<li><p>Start playing the frequency using the <span style="font-family: Courier New,Courier,monospace">radio_start()</span> function:</p>
<pre class="prettyprint">
ret = radio_start(mRadio.radio);
if (ret != RADIO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
<p>If the radio emits no sound, check the signal strength with the <span style="font-family: Courier New,Courier,monospace">radio_get_signal_strength()</span> function, which returns the current signal strength as a dBuV value.</p>
</li>
</ol>

<h2 id="seek" name="seek">Searching for an Adjacent Channel</h2>

<p>To search for and tune in to an adjacent channel:</p>
<ol>
<li><p>Search for an active adjacent frequency using the <span style="font-family: Courier New,Courier,monospace">radio_seek_up()</span> and <span style="font-family: Courier New,Courier,monospace">radio_seek_down()</span> functions.</p>
<p>This is similar to the scanning operation, but only the nearest active frequency is searched for. Once the maximum frequency is reached in either direction, the search ends, and the radio is set to that frequency.</p>
<p>To seek down, use the <span style="font-family: Courier New,Courier,monospace">radio_seek_down()</span> function:</p>
<pre class="prettyprint">
ret = radio_seek_down(mRadio.radio, on_seek_completed, &amp;mRadio);
if (ret != RADIO_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return false;
</pre>
<p>To seek up, use the <span style="font-family: Courier New,Courier,monospace">radio_seek_up()</span> function in the same way.</p>
</li>
<li><p>Implement the search complete callback that returns the adjacent frequency:</p>
<pre class="prettyprint">
void
on_seek_completed(int frequency, void* userdata)
{
&nbsp;&nbsp;&nbsp;&nbsp;mRadioInfo *mRadio = (mRadioInfo *)userdata;
&nbsp;&nbsp;&nbsp;&nbsp;int new_frequency = 0;

&nbsp;&nbsp;&nbsp;&nbsp;/* Search is complete, and the radio is tuned in to the new frequency */
&nbsp;&nbsp;&nbsp;&nbsp;/* Application sets the new frequency and updates the user interface */
&nbsp;&nbsp;&nbsp;&nbsp;radio_get_frequency(mRadio-&gt;radio, &amp;new_frequency);
}
</pre>
</li>
</ol>
  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>