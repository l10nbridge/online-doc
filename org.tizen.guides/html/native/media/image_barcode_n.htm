<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Barcode Detection</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
				<li><a href="#prerequisites">Prerequisites</a></li>
                <li><a href="#prepare">Preparing the Barcode Engines</a></li>
                <li><a href="#generate">Generating Barcodes</a></li>
                <li><a href="#detect">Detecting Barcodes</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
		<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VISION__MODULE.html">Media Vision API for Mobile Native</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Barcode Detection</h1>

<p>You can perceive and understand an image or to extract information from images in your application.</p>

  <p>This feature is supported in mobile applications only.</p>

<p>The main features of Media Vision API include:</p>

<ul>
<li>Handling images
<p>You can handle images by creating a source handle and filling it from an image buffer or media packet. <a href="#prepare">Create the source handle</a> with the <span style="font-family: Courier New,Courier,monospace;">mv_create_source()</span> function, and fill it with the <span style="font-family: Courier New,Courier,monospace;">mv_source_fill_by_buffer()</span> or <span style="font-family: Courier New,Courier,monospace;">mv_source_fill_by_media_packet()</span> function.</p>
</li>
<li>Detecting barcodes
<p>You can <a href="#detect">detect barcodes</a> in an image or from camera preview streams, and then decrypt them to display messages to the user.</p> 
<p>Before detecting a barcode, you must define the barcode detection target attribute value:</p>
				<ul>
					<li>Detect both 1D and 2D barcodes</li>
					<li>Detect 1D barcodes only</li>
					<li>Detect 2D barcodes only</li>
				</ul>
</li>
<li>Generating barcodes
<p>You can encrypt a given message, <a href="#generate">generate a barcode</a> from it, and save it in a memory or as a file.</p>
<p>Before generating a barcode, you must define the barcode text generation attribute value:</p>
			   <ul>
					   <li>Generate barcode without an input message</li>
					   <li>Generate barcode with an input message (supports only 1D barcodes)</li>
			   </ul>
<p>You must also define the following specifications:</p>
	
		<ul>
			<li><a href="#barcode">Barcode type</a></li>
			<li><a href="#qrcode">QR code specification</a> (if the QA code barcode type is used)</li>
			<li>Image format (if the barcode is saved as a file)
				<ul>
					<li>JPEG</li>
					<li>BMP</li>
					<li>PNG</li>
				</ul>
			</li>			
		</ul>
</li>
</ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the media vision functionality</a>.</p>

<p>The following tables provides more information about the barcode generation specifications.</p>

<table border="1" id="barcode"> 
   <caption>
     Table: Supported barcode types
   </caption> 
   <tbody> 
    <tr> 
	 <th style="text-align:center;margin-left:auto;margin-right:auto;">1D or 2D</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Type</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Example</th> 
    </tr> 
	<tr> 
     <td rowspan="7">1-D</td>
	 <td>UPC-A</td>
	 <td>Universal product code with numeric 12-digit</td>
	 <td><p align="center"><img alt="UPC-A" src="../../images/mediavision_upc_a.png" /></p> </td>
    </tr>
	<tr> 
	 <td>UPC-E</td>
     <td>Universal product code with numeric 6-digit</td>
	 <td><p align="center"><img alt="UPC-E" src="../../images/mediavision_upc_e.png" /></p></td>
    </tr>
	<tr> 
     <td>EAN-8</td>
	 <td>International article number with numeric 8-digit</td>
	 <td><p align="center"><img alt="EAN-8" src="../../images/mediavision_ean_8.png" /></p></td>
    </tr>
	<tr> 
     <td>EAN-13</td>
	 <td>International article number with numeric 13-digit</td>
	 <td><p align="center"><img alt="EAN-13" src="../../images/mediavision_ean_13.png" /></p></td>
    </tr>
	<tr> 
     <td>CODE-128</td>
	 <td>Code 128; supports alphanumeric or numeric-only</td>
	 <td><p align="center"><img alt="CODE-128" src="../../images/mediavision_code_128.png" /></p></td>
    </tr>
	<tr> 
     <td>CODE-39</td>
	 <td>Code 39; supports 34 characters consisting of uppercase letters (A to Z), numeric digits (0 to 9), and special characters(-, ., $, /, %, space)</td>
	 <td><p align="center"><img alt="CODE-39" src="../../images/mediavision_code_39.png" /></p></td>
    </tr>
	<tr> 
     <td>INTERLEAVED 2 of 5</td>
	 <td>Interleaved 2 of 5 with numeric digits</td>
	 <td><p align="center"><img alt="UPC-A" src="../../images/mediavision_interleaved_2_5.png" /></p></td>
    </tr>
	<tr> 
     <td>2-D</td>
	 <td>QR code</td>
	 <td>Quick Response code</td>
	 <td><p align="center"><img alt="UPC-A" src="../../images/mediavision_qr.png" /></p></td>
    </tr>
   </tbody> 
  </table> 

  <table border="1" id="qrcode"> 
   <caption>
     Table: Supported QR code specifications
   </caption> 
   <tbody> 
    <tr> 
	 <th style="text-align:center;margin-left:auto;margin-right:auto;">Specification</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Support type</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr> 
	<tr> 
     <td rowspan="4">Error Correction Code (ECC) Level</td>
	 <td>ECC Low</td>
	 <td>Recovery up to 7% damage</td>
    </tr>
	<tr> 
	 <td>ECC Medium</td>
     <td>Recovery up to 15% damage</td>
    </tr>
	<tr> 
     <td>ECC Quartile</td>
	 <td>Recovery up 25% damage</td>
    </tr>
	<tr> 
     <td>ECC High</td>
	 <td>Recovery up to 30% damage</td>
    </tr>
	<tr>
	 <td rowspan="4">Encoding mode</td>
	 <td>Numeric</td>
	 <td>Numeric digits (&#39;0&#39;, &#39;1&#39;, ..., &#39;9&#39;)</td>
    </tr>
	<tr> 
	 <td>Alphanumeric</td>
     <td>Alphanumeric characters: numeric (0, 1, ..., 9), characters (A, B, ..., Z), and punctuation (&#39; &#39;, $, %, *, +, -, &#39;.&#39;, /, &#39;:&#39;)</td>
    </tr>
	<tr> 
     <td>Byte 8-bit</td>
	 <td>Raw 8-bit bytes</td>
    </tr>
	<tr> 
     <td>UTF-8</td>
	 <td>Universal character set and Transformation Format 8-bit, encoding characters</td>
	</tr>
   </tbody> 
  </table> 
  
<h2>Warm-up</h2>

<p>Become familiar with the Media Vision API basics by learning about:</p>

<ul>
	<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the media vision functionality.</p></li>
    <li><a href="#prepare">Preparing the Barcode Engines</a>
        <p>Initialize the barcode generation and detection engines for use.</p></li>
    <li><a href="#generate">Generating Barcodes</a>
        <p>Generate a barcode into memory or a file.</p></li>
    <li><a href="#detect">Detecting Barcodes</a>
        <p>Detect barcodes in the camera preview.</p></li>
</ul>



<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the media vision functionality:</p>
<ol>
<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VISION__MODULE.html">Media Vision</a> API, include the <span style="font-family: Courier New,Courier,monospace;">&lt;mv_barcode.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;mv_barcode.h&gt;
</pre>
</li>
<li>
<p>To handle camera preview images in barcode detection, include the <span style="font-family: Courier New,Courier,monospace;">&lt;camera.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;camera.h&gt;
</pre>
</li>
</ol>
<h2 id="prepare">Preparing the Barcode Engines</h2>

<p>To initialize the barcode generation and detection engines for use:</p>

<ol>

<li>

<p>For barcode generation:</p>

<ol type="a">

<li>

<p>Create a structure for storing the data required for barcode generation engine configuration:</p>

<pre class="prettyprint">
struct _bargendata_s {
&nbsp;&nbsp;&nbsp;&nbsp;/* Barcode information variables */
&nbsp;&nbsp;&nbsp;&nbsp;mv_barcode_type_e type;
&nbsp;&nbsp;&nbsp;&nbsp;mv_barcode_qr_ecc_e ecc;
&nbsp;&nbsp;&nbsp;&nbsp;mv_barcode_qr_mode_e mode;
&nbsp;&nbsp;&nbsp;&nbsp;int version;

&nbsp;&nbsp;&nbsp;&nbsp;size_t width;
&nbsp;&nbsp;&nbsp;&nbsp;size_t height;

&nbsp;&nbsp;&nbsp;&nbsp;mv_barcode_image_format_e image_format;

&nbsp;&nbsp;&nbsp;&nbsp;/* Media source handle */
&nbsp;&nbsp;&nbsp;&nbsp;mv_source_h g_source;
&nbsp;&nbsp;&nbsp;&nbsp;/* Barcode generation engine handle */
&nbsp;&nbsp;&nbsp;&nbsp;mv_engine_config_h g_engine_cfg;
};
typedef struct _bargendata_s bargendata_s;

static bargendata_s bargendata;
</pre>

</li>

<li>

<p>Configure the barcode generation engine using the <span style="font-family: Courier New,Courier,monospace;">mv_create_engine_config()</span> function. The function configures the engine with default attribute values.</p>

<pre class="prettyprint">
int error_code = 0;

error_code = mv_create_engine_config(&amp;bargendata.g_engine_cfg);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

<p>For example, to define whether the barcode is generated with text, use the <span style="font-family: Courier New,Courier,monospace;">mv_engine_config_set_int_attribute()</span> function with the <span style="font-family: Courier New,Courier,monospace;">MV_BARCODE_GENERATE_ATTR_TEXT</span> attribute. The possible values for the attribute are defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VISION__BARCODE__MODULE.html#gaff049431f2259d00cfd0fdc7ee721858">mv_barcode_generate_attr_text_e</a> enumeration. The default value is <span style="font-family: Courier New,Courier,monospace;">MV_BARCODE_GENERATE_ATTR_TEXT_INVISIBLE</span>.</p>

</li>

</ol>

</li>

<li>

<p>For barcode detection:</p>

<ol type="a">

<li>

<p>Create a structure for storing the data required for barcode detection engine configuration:</p>

<pre class="prettyprint">
struct _bardetdata_s {
&nbsp;&nbsp;&nbsp;&nbsp;/* Camera display variables */
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *rect;
&nbsp;&nbsp;&nbsp;&nbsp;Evas *evas;

&nbsp;&nbsp;&nbsp;&nbsp;int preview_width;
&nbsp;&nbsp;&nbsp;&nbsp;int preview_height;

&nbsp;&nbsp;&nbsp;&nbsp;/* Media source handle */
&nbsp;&nbsp;&nbsp;&nbsp;mv_source_h g_source;
&nbsp;&nbsp;&nbsp;&nbsp;/* Barcode detection engine handle */
&nbsp;&nbsp;&nbsp;&nbsp;mv_engine_config_h g_engine_cfg;

&nbsp;&nbsp;&nbsp;&nbsp;/* Camera handle */
&nbsp;&nbsp;&nbsp;&nbsp;camera_h g_camera;
};
typedef struct _bardetdata_s bargendata_s;

static bardetdata_s bardetdata;
</pre>

</li>

<li>

<p>Create a source handle using the <span style="font-family: Courier New,Courier,monospace;">mv_create_source()</span> function with the <span style="font-family: Courier New,Courier,monospace;">mv_source_h</span> member of the detection data structure as the out parameter:</p>

<pre class="prettyprint">
int error_code = 0;

error_code = mv_create_source(&amp;bardetdata.g_source);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

<p>The source stores the barcode to be detected and all related data. You manage the source through the source handle.</p>

</li>

<li>

<p>Configure the barcode detection engine using the <span style="font-family: Courier New,Courier,monospace;">mv_create_engine_config()</span> function. The function configures the engine with default attribute values.</p>

<pre class="prettyprint">
int error_code = 0;

error_code = mv_create_engine_config(&amp;bardetdata.g_engine_cfg);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

<p>For example, to define the detection target, use the <span style="font-family: Courier New,Courier,monospace;">mv_engine_config_set_int_attribute()</span> function with the <span style="font-family: Courier New,Courier,monospace;">MV_BARCODE_DETECT_ATTR_TARGET</span> attribute. The possible values are defined in the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__VISION__BARCODE__MODULE.html#ga47aaef5d40653352c5bee73b227062a6">mv_barcode_detect_attr_target_e</a> enumeration. The default value is <span style="font-family: Courier New,Courier,monospace;">MV_BARCODE_DETECT_ATTR_TARGET_ALL</span>.</p>

</li>

<li>

<p>To provide camera preview images, create the camera handle, set the camera display and the camera preview callback, and start the camera preview:</p>

<pre class="prettyprint">
/* Create the camera handle */
error_code = camera_create(CAMERA_DEVICE_CAMERA0, &amp;bardetdata.g_camera);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

/* Set the camera display */
error_code = camera_set_display(bardetdata.g_camera, CAMERA_DISPLAY_TYPE_OVERLAY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GET_DISPLAY(bardetdata.win));
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

/* Get the camera preview resolution */
error_code = camera_get_preview_resolution(bardetdata.g_camera, &amp;bardetdata.width,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;bardetdata.height);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code %d&quot;, error_code);

/* Set the camera preview callback */
error_code = camera_set_media_packet_preview_cb(bardetdata.g_camera,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_camera_media_packet_preview_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

/* Start the camera preview */
error_code = camera_start_preview(barcodeAppData.g_camera);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

<p>For more information about the <span style="font-family: Courier New,Courier,monospace;">camera_set_display()</span> function, see <a href="camera_n.htm#configuring_callback">Configuring the Camera and its Callbacks</a> in the Camera guide.</p>

</li>

</ol>

</li>

</ol>

<h2 id="generate" name="generate">Generating Barcodes</h2>

<p>To generate a barcode:</p>

<ol>

<li>

<p>Set the barcode type. In case of the QR type, also set the error correction level, encoding mode, and version.</p>

<pre class="prettyprint">
bargendata.type = MV_BARCODE_QR;
bargendata.ecc = MV_BARCODE_QR_ECC_LOW;
bargendata.mode = MV_BARCODE_QR_MODE_BYTE;
bargendata.version = 20;
</pre>

</li>

<li>

<p>To generate the barcode into memory:</p>

<ol type="a">

<li>

<p>Create a source handle using the <span style="font-family: Courier New,Courier,monospace;">mv_create_source()</span> function with the <span style="font-family: Courier New,Courier,monospace;">mv_source_h</span> member of the generation data structure as the out parameter:</p>

<pre class="prettyprint">
int error_code = 0;

error_code = mv_create_source(&amp;bargendata.g_source);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code= %d&quot;, error_code);
</pre>

<p>The source handle is used to save the generated barcode and related data into the source, and to access the barcode and related data from the source.</p>

</li>

<li>

<p>Generate the barcode using the <span style="font-family: Courier New,Courier,monospace;">mv_barcode_generate_source()</span> function:</p>

<pre class="prettyprint">
error_code = mv_barcode_generate_source(bargendata.g_engine_cfg,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MediaVision-Tutorial-QRcode&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.type, bargendata.mode,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.ecc, bargendata.version,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.g_source);

if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

<li>

<p>Retrieve the width, height, color space, and memory address of the barcode using the <span style="font-family: Courier New,Courier,monospace;">mv_source_get_width()</span>, <span style="font-family: Courier New,Courier,monospace;">mv_source_get_height()</span>, <span style="font-family: Courier New,Courier,monospace;">mv_source_get_colorspace()</span>, and <span style="font-family: Courier New,Courier,monospace;">mv_source_get_buffer()</span> functions:</p>

<pre class="prettyprint">
mv_colorspace_e image_colorspace = MEDIA_VISION_COLORSPACE_INVALID;
unsigned int image_width = 0;
unsigned int height_height = 0;
unsigned char *image_buffer_ptr = NULL;
unsigned int image_buffer_size = 0;

error_code = mv_source_get_width(bargendata.g_source, &amp;image_width);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = mv_source_get_height(bargendata.g_source, &amp;image_height);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = mv_source_get_colorspace(bargendata.g_source, &amp;image_colorspace);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = mv_source_get_buffer(bargendata.g_source, &amp;image_buffer_ptr,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;image_buffer_size);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

<li>

<p>After the barcode generation is complete, destroy the source handle using the <span style="font-family: Courier New,Courier,monospace;">mv_destroy_source()</span> function:</p>

<pre class="prettyprint">
error_code = mv_destroy_source(bargendata.g_source);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

</ol>

</li>

<li>

<p>To generate the barcode into a file:</p>

<ol type="a">

<li>

<p>Define the file format and image resolution:</p>

<pre class="prettyprint">
bargendata.width = 800;
bargendata.height = 800;

bargendata.image_format = MV_BARCODE_IMAGE_FORMAT_PNG;
</pre>

</li>

<li>

<p>Generate the barcode using the <span style="font-family: Courier New,Courier,monospace;">mv_barcode_generate_image()</span> function.</p>

<p>The following example code saves the generated file in the <span style="font-family: Courier New,Courier,monospace;">/opt/usr/media</span> directory with the file name <span style="font-family: Courier New,Courier,monospace;">mv_barcode_qrcode.png</span>:</p>

<pre class="prettyprint">
error_code = mv_barcode_generate_image(bargendata.g_engine_cfg,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;MediaVision-Tutorial-QRcode&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.width, bargendata.height,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.type, bargendata.mode,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.ecc, bargendata.version,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;/opt/usr/media/mv_barcode_qrcode.png&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bargendata.image_format);

if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

</ol>

</li>

<li>

<p>Destroy the barcode generation engine handle using the <span style="font-family: Courier New,Courier,monospace;">mv_destroy_engine_config()</span> function:</p>

<pre class="prettyprint">
error_code = mv_destroy_engine_config(bargendata.g_engine_cfg);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

</ol>

<h2 id="detect" name="detect">Detecting Barcodes</h2>

<p>To detect barcodes:</p>

<ol>

<li>

<p>To access the camera preview images in which to detect barcodes:</p>

<ol type="a">

<li>

<p>Implement the <span style="font-family: Courier New,Courier,monospace;">_camera_media_packet_preview_cb()</span> callback. This callback is invoked by the <span style="font-family: Courier New,Courier,monospace;">camera_start_preview()</span> function after each captured preview image and returns a handle for the media packet containing the image.</p>

</li>

<li>

<p>In the callback, fill the source with the media packet using the <span style="font-family: Courier New,Courier,monospace;">mv_source_fill_by_media_packet()</span> function. This function takes as parameters the source handle and the media packet handle.</p>

<p>The image is now stored in the source, and you can access the image through the source handle.</p>

</li>

</ol>

<pre class="prettyprint">
static void
_camera_media_packet_preview_cb(media_packet_h pkt, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;mv_rectangle_s mv_roi = {{0,0}, bardetdata.width, bardetdata.height};

&nbsp;&nbsp;&nbsp;&nbsp;if (pkt == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;&nbsp;error_code = mv_source_fill_by_media_packet(bardetdata.g_source, pkt);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error code);

&nbsp;&nbsp;&nbsp;&nbsp;if (pkt) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = media_packet_destroy(pkt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pkt = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>

</li>

<li>

<p>In the <span style="font-family: Courier New,Courier,monospace;">_camera_media_packet_preview_cb()</span> callback, detect barcodes in the image using the <span style="font-family: Courier New,Courier,monospace;">mv_barcode_detect()</span> function:</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;error_code = mv_barcode_detect(bardetdata.g_source, bardetdata.g_engine_cfg,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mv_roi, _barcode_detected_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
}
</pre>

<p>The ROI (region of interest) feature allows you to define a rectangular region of the image in which to detect barcodes. In the above example code, the whole image is set as the ROI.</p>

</li>

<li>

<p>Implement a callback that is invoked by the <span style="font-family: Courier New,Courier,monospace;">mv_barcode_detect()</span> function after it has finished processing the image for barcodes.</p>

<p>Use the callback to handle the detection results, and to clear the source for the next image. To clear the source, use the <span style="font-family: Courier New,Courier,monospace;">mv_source_clear()</span> function.</p>

<p>The following example code implements a callback that prints the number of detected barcodes and their messages, if the number is greater than zero. The code also clears the source of the image data.</p>

<pre class="prettyprint">
static void
_barcode_detected_cb(mv_source_h source, mv_engine_config_h engine_cfg,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const mv_quadrangle_s *barcode_locations, const char *message[],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const mv_barcode_type_e *types, int number_of_barcodes, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int i = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char type[50] = {&#39;\0&#39;};

&nbsp;&nbsp;&nbsp;&nbsp;/* Clear the source for the next preview image */
&nbsp;&nbsp;&nbsp;&nbsp;mv_source_clear(mv_source);

&nbsp;&nbsp;&nbsp;&nbsp;if (number_of_barcode &gt; 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;the number of barcodes: %d&quot;, number_of barcode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; number_of_barcodes; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%d &gt;&gt; message: %s\n&quot;, I, messages[i]);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>

</li>

<li>

<p>After the barcode detection is complete, stop the camera preview, unset the camera preview callback function, and destroy the camera handle:</p>

<pre class="prettyprint">
error_code = camera_unset_media_packet_preview_cb(bardetdata.g_camera);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = camera_stop_preview(bardetdata.g_camera);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = camera_destroy(bardetdata.g_camera);
if (error_code != CAMERA_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

<p>For more information, see <a href="camera_n.htm#release">Releasing Resources</a> in the Camera guide.</p>

</li>

<li>

<p>Destroy the source and barcode detection engine handles using the <span style="font-family: Courier New,Courier,monospace;">mv_destroy_source()</span> and <span style="font-family: Courier New,Courier,monospace;">mv_destroy_engine_config()</span> functions:</p>

<pre class="prettyprint">
error_code = mv_destroy_engine_config(bardetdata.g_engine_cfg);
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);

error_code = mv_destroy_source(bardetdata.g_source)
if (error_code != MEDIA_VISION_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error code = %d&quot;, error_code);
</pre>

</li>

</ol>

  
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>