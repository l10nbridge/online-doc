<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Media Streamer</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#create">Creating the Media Streamer</a></li>
            <li><a href="#plugin">Plugging Media Streamer Nodes in Manual or Autoplug Mode</a></li>
            <li><a href="#manage">Managing the Media Streamer Parameters</a></li>
            <li><a href="#play">Playing Files with the Media Streamer</a></li>
            <li><a href="#destroy">Destroying the Media Streamer</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm">Media Streamer Tutorial</a></li>
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__STREAMER__MODULE.html">Media Streamer API for Mobile Native</a></li>
            <li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__STREAMER__MODULE.html">Media Streamer API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Media Streamer</h1>

<p>Tizen enables you to use media streamer functionalities, such as playing video content and streaming video and audio over an IP. Media streaming allows you to stream content in 1 or both directions.</p>

<p class="figure">Figure: Video call</p>
<p align="center"><img alt="Video call" src="../../images/media_streamer_phone.png" /></p>

<p>The media streamer is an object that manages media data flow in a kind of pipeline. The Media Streamer API provides various types of media processing pipelines using a simple GStreamer wrapper (Tizen uses GStreamer as a fundamental multimedia framework). To use the media streamer, familiarize yourself with how the GStreamer works. For more information, see <a href="http://gstreamer.freedesktop.org/" target="_blank">http://gstreamer.freedesktop.org/</a>.</p>

<p>The media streamer works by using a collection of nodes, which are connected in a specific order to make a specific pipeline of multimedia data running through the nodes:</p>

<ul>
<li>The <strong>source nodes</strong> represent the source of the input data. The media streamer provides a common interface for getting a media stream from various source nodes, such as media files, network, and various input devices, such as cameras and microphones.</li>
<li>The <strong>topology nodes</strong> (transforming nodes) are used to transform the data along the pipeline.</li>
<li>The <strong>sink nodes</strong> are used to render the media stream data.</li>
</ul>

<p>The main features of the Media Streamer API include:</p>

<ul>
<li>
<p><a href="#create">Creating the media streamer</a></p>
<p>You can create a media streamer handle used for linking content source and sink elements in <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#create_server">server</a> and <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#create_client">client</a> parts.</p>
</li>
<li>
<p><a href="#plugin">Plugging media streamer nodes in manual or autoplug mode</a></p>
<p>You can create a chain of media streamer nodes to properly play a video file or combine the server and client parts for streaming the content. This can be done manually or automatically within the Media Streamer framework.</p>
</li>
<li>
<p><a href="#manage">Managing the media streamer parameters</a></p>
<p>You can set a number of parameters to properly play a video file or combine the server and client parts for playing or streaming the content. You can also get a number of parameters from the media streamer nodes to find out the characteristics of playing or streaming the content.</p>
</li>
<li>
<p><a href="#play">Playing files with the media streamer</a></p>
<p>You can play video files or launch content streaming over IP.</p>
</li>
<li>
<p><a href="#destroy">Destroying the media streamer</a></p>
<p>When no longer needed, you can destroy the media streamer handle used for linking content source and sink elements.</p>
</li>
</ul>

<p>The Tizen Media Streamer framework can be used in many scenarios:</p>

<ul>
<li>
<p>Playing a local video file</p>
<p class="figure">Figure: Playing a local video file</p>
<p align="center"><img alt="Playing a local video file" src="../../images/media_streamer_local_video.png" /></p>
</li>
<li>
<p>Playing a local video file with internal or external subtitles</p>
<p class="figure">Figure: Playing a local video file with subtitles</p>
<p align="center"><img alt="Playing a local video file with subtitles" src="../../images/media_streamer_local_video_subtitles.png" /></p>
</li>
<li>
<p>Streaming a video file with or without internal subtitles through the IP protocol from the server part to the client part</p>
<p class="figure">Figure: Streaming a file through IP in the broadcast mode</p>
<p align="center"><img alt="Streaming a file through IP in the broadcast mode" src="../../images/media_streamer_stream_broadcast.png" /></p>
</li>
<li>
<p>Streaming video and audio content through the IP protocol from 1 device (server part) to another device (client part) in 1 way (broadcast mode) or both ways (VOIP mode)</p>
<p class="figure">Figure: Streaming video and audio content through IP in the broadcast or VOIP mode</p>
<p align="center"><img alt="Streaming video and audio content through IP in the broadcast or VOIP mode" src="../../images/media_streamer_stream_broadcast_or_voip.png" /></p>
</li>
</ul>

<h2 id="create" name="create">Creating the Media Streamer</h2>

<p>The media streamer is created using the <span style="font-family: Courier New,Courier,monospace">media_streamer_create()</span>, <span style="font-family: Courier New,Courier,monospace">media_streamer_node_create_src()</span>, and <span style="font-family: Courier New,Courier,monospace">media_streamer_node_create_sink()</span> functions.</p>

<p>The following types are examples of the source nodes according to their functionalities:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_NODE_SRC_TYPE_FILE</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_NODE_SRC_TYPE_CAMERA</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_NODE_SRC_TYPE_AUDIO_CAPTURE</span></p></li>
</ul>

<p>In the same concept, the following types are examples of the sink nodes:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_NODE_SINK_TYPE_OVERLAY</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_NODE_SINK_TYPE_AUDIO</span></p></li>
</ul>

<p>The media streamer RTP node is also created in case of a streaming scenario which is responsible for transmitting and receiving data through an IP.</p>

<p>After the nodes are created, they are uploaded into the media streamer pipeline where, in connection with other topology nodes, they construct a logic chain to be launched according to the chosen scenario. The <span style="font-family: Courier New,Courier,monospace">media_streamer_node_add()</span> function is used to add a node to the media streamer.</p>

<h2 id="plugin" name="plugin">Plugging Media Streamer Nodes in Manual or Autoplug Mode</h2>

<p>The Media Streamer framework creates and links nodes for launching video encoding and decoding chains in manual or autoplug modes.</p>

<ul>
<li>
<p>In the manual mode, a user takes responsibility on creating and linking the appropriate encoding or decoding chain of nodes to launch the media streamer for the chosen scenario.</p>
<p>The media streamer nodes are plugged in the manual mode using the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_create()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_node_add()</span> functions.</p>
<p>Link the media streamer nodes with the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_link()</span> function.</p>
<p>The function attributes include <span style="font-family: Courier New,Courier,monospace">src_pad_name</span> and <span style="font-family: Courier New,Courier,monospace">sink_pad_name</span>, which can be <span style="font-family: Courier New,Courier,monospace">src</span> or <span style="font-family: Courier New,Courier,monospace">sink</span>, an income or outcome pads of the previous and the following nodes to be linked accordingly.</p>
</li>
<li><p>In the autoplug mode, the video encoding and decoding chain of the media streamer is automatically constructed from the previously created source and sink nodes.</p></li>
</ul>

<h2 id="manage" name="manage">Managing the Media Streamer Parameters</h2>

<p>The Media Streamer framework sets parameters onto the nodes for launching appropriate video encoding and decoding chains. It also gets parameters from the nodes to find out about the encoding and decoding characteristics of the node.</p>

<h3>Setting Parameters</h3>

<p>A parameter is set onto the media streamer node using the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_set_param()</span> function. The function sets a possible parameter for the given node with the appropriate value. The possible parameter can be found in the <span style="font-family: Courier New,Courier,monospace">media_streamer.h</span> header file. The parameter can be, for example, <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_CAMERA_ID</span>, <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_ROTATE</span>, or <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_PORT</span>. You can also set a parameter list using a <span style="font-family: Courier New,Courier,monospace">bundle</span> structure.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_node_set_pad_format()</span> function sets the media format onto the media streamer node pad. The pad of the media streamer node can be <span style="font-family: Courier New,Courier,monospace">sink</span> or <span style="font-family: Courier New,Courier,monospace">src</span>, which are income or outcome pads of the node. The following are examples of the format:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_RAW</span></p></li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_ENCODED</span></p>
<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_H263</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_YV12</span></p></li>
</ul>
</li>
</ul>

<p>You can use the following media streamer callbacks when setting parameters:</p>

<ul>
<li><p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_set_error_cb()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_unset_error_cb()</span> functions register and unregister an error callback function to be invoked when an error occurs.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_set_state_change_cb()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_unset_state_change_cb()</span> functions register and unregister a callback to be invoked after the media streamer state changes.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_src_set_buffer_status_cb()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_src_unset_buffer_status_cb()</span> functions register and unregister a callback function to be invoked when a buffer underrun or overflow occurs.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_sink_set_data_ready_cb()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_sink_unset_data_ready_cb()</span> functions register and unregister a callback function to be invoked when the custom sink is ready for data processing.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_sink_set_eos_cb()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_sink_unset_eos_cb()</span> functions register and unregister a callback function to be invoked when the custom sink detects the end-of-stream.</p></li>
</ul>

<h3>Getting Parameters</h3>

<p>Use the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_get_param()</span> function to get a parameter from the media streamer node. The function gets a parameter possible for the given node with the appropriate value. The possible parameters returned can be found in the <span style="font-family: Courier New,Courier,monospace">media_streamer.h</span> header file. They can be, for example, <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_CAMERA_ID</span>, <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_ROTATE</span>, or <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_PARAM_PORT</span>.</p>

<p>You can also use the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_get_params()</span> function to get the list of parameters from the created media streamer node in the <span style="font-family: Courier New,Courier,monospace">bundle</span> structure format.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_node_get_pad_format()</span> function gets the media format from the media streamer node pad. The pad of the media streamer node can be <span style="font-family: Courier New,Courier,monospace">sink</span> or <span style="font-family: Courier New,Courier,monospace">src</span>, which are income or outcome pads of the node. The following are examples of the format:</p>

<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_RAW</span></p></li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_ENCODED</span></p>
<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_H263</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">MEDIA_FORMAT_YV12</span></p></li>
</ul>
</li>
</ul>

<p>To get the name from the media streamer node pad, use the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_get_pad_name()</span> function. The <span style="font-family: Courier New,Courier,monospace">src_pad_num</span> parameter defines the number of <span style="font-family: Courier New,Courier,monospace">src</span> pads in the previous node, and the <span style="font-family: Courier New,Courier,monospace">sink_pad_num</span> parameter defines the number of <span style="font-family: Courier New,Courier,monospace">sink</span> pads in the following node.</p>

<p>You can get the media streamer state using the <span style="font-family: Courier New,Courier,monospace">media_streamer_get_state()</span> function. The states of the media streamer node can be found in the <span style="font-family: Courier New,Courier,monospace">media_streamer.h</span> header file. The state can be, for example, <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_READY</span>.</p>

<h2 id="play" name="play">Playing Files with the Media Streamer</h2>

<p>Before playing the media streamer, it must be prepared and the state of the media streamer nodes must be set to the <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_READY</span> state in <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#prepare_server">server</a> and <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#client_prepare">client</a> parts.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_prepare()</span> function prepares the media streamer. With this function, the encoding chain of the media streamer nodes becomes fully constructed, if the autoplug mode is chosen within the streaming scenario.</p>

<p>To play or stream files with the media streamer, use the <span style="font-family: Courier New,Courier,monospace">media_streamer_play()</span> function in <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#playing_server">server</a> and <a href="../../../../org.tizen.tutorials/html/native/multimedia/media_streamer_tutorial_n.htm#client_play">client</a> parts. The media streamer state changes to <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_PLAYING</span>. With this function, the decoding chain of the media streamer nodes becomes fully constructed, if the autoplug mode is chosen within the streaming or playing scenario. The media streamer starts playing or streaming content, and the appropriate content appears on the sink nodes.</p>

<p>You can control the playing status of the media streamer:</p>

<ul>
<li>
<p>Pause</p>
<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_pause()</span> function sets the media streamer state to <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_PAUSED</span> in the playing mode or at the server part in the streaming mode. Playing or streaming of the content pauses, and this can be seen on the sink nodes.</p>
</li>
<li>
<p>Stop</p>
<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_stop()</span> function sets the media streamer state to <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_PAUSED</span> in the playing mode or at the server part in the streaming mode. The position of the content is set to the 0sec position. Playing or streaming of the content stops, and this can be seen on the sink nodes.</p>
</li>
<li>
<p>Seek</p>
<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_set_play_position()</span> function seeks the content at the appropriate playing position set in milliseconds in the playing mode or at the server part in the video file streaming mode. Playing or streaming of the content seeks to the appropriate position, and this can be seen on the sink nodes.</p>
</li>
<li>
<p>Get info</p>
<p>The <span style="font-family: Courier New,Courier,monospace">media_streamer_get_play_position()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_get_duration()</span> functions get the media streamer playing position and duration of the content in milliseconds in the playing mode or at the server part in the video file streaming mode.</p>
</li>
</ul>

<h2 id="destroy" name="destroy">Destroying the Media Streamer</h2>

<p>Before destroying the media streamer, it must be unprepared using the <span style="font-family: Courier New,Courier,monospace">media_streamer_unprepare()</span> function, and the state of the media streamer nodes must be set to <span style="font-family: Courier New,Courier,monospace">MEDIA_STREAMER_STATE_IDLE</span>.</p>

<p>With the <span style="font-family: Courier New,Courier,monospace">media_streamer_unprepare()</span> function, the media streamer nodes within the encoding and decoding chains become disconnected, if the autoplug mode is chosen in the streaming or playing scenario. Any intermediate topology nodes between the source and sink nodes that have been automatically created are removed.</p>

<p>Use the <span style="font-family: Courier New,Courier,monospace">media_streamer_node_remove()</span> and <span style="font-family: Courier New,Courier,monospace">media_streamer_node_destroy()</span> functions to remove and destroy a media streamer node created in the manual mode.</p>

<p>To destroy the media streamer, use the <span style="font-family: Courier New,Courier,monospace">media_streamer_destroy()</span> function. The media streamer nodes that have not been removed manually from the media streamer are removed automatically.</p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>