<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Player</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#audio">Handling Audio</a></li>
			<li><a href="#video">Handling Video</a></li>
			<li><a href="#features">Features</a></li>
			<li><a href="#stream">Streaming Playback</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.tutorials/html/native/multimedia/player_tutorial_n.htm">Player Tutorial</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API for Wearable Native</a></li>
        </ul>
    </div></div>
</div>
<div id="container"><div id="contents"><div class="content">
<h1>Player</h1>
<p>You can play audio, video, and tones in your application.</p> 
  <p>The main player features are:</p> 
  <ul>
    <li><a href="#audio">Handling audio</a> 
	<p>Enables you to play audio and control the playback.</p></li>
	<li><a href="#video">Handling video</a>
	<p>Enables you to play video.</p></li>
	<li><a href="#features">Using player features</a>
	<p>Enables you control the player volume, sound mode, display, stream info, and audio effects.</p></li>
	<li><a href="#stream">Streaming playback</a>
	<p>Enables you to set specific URLs for streaming media playback.</p></li>	
</ul>
   
<p>The Player API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">wearable</a> applications) enables your application to play video and sound. It supports 3 content formats: file, network stream, and memory. It also provides the following features:</p>

<ul><li>Operating general controls for the <a href="#audio">audio</a> or <a href="#video">video</a> content, such as play, pause, resume, and stop</li> 
<li>Moving the audio or video content based on time</li>
<li>Controlling the volume of the audio or video content based on each instance</li>
<li>Looping the audio or video content</li>
<li>Getting information of the audio or video content</li>
<li>Playing multiple <a href="#stream">audio streams</a></li></ul>

<p>The maximum count of a player instance is limited by the system and multimedia resources. The maximum count is a system-wide count and it can be applied depending on the CPU model, CPU speed, CPU core number, CPU load from other applications, and the available memory. Thus, the exact count can be smaller than the maximum count, in which case the prepare functions fail. A reasonable working player count is under 10.</p>
<p>The player works based on the audio session manager policy. This means that an application can be interrupted by another application if a resource is in conflict or it has an audio policy rule to follow. You can change the session&#39;s property directly by using the Sound Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">wearable</a> applications).</p>
<p>The callback interface specifies the functions used to notify the player status during playback events. Since the player engine works asynchronously, you must implement this listener to ensure that the player flows correctly. When each player operation is completed, an event is generated, and the <span style="font-family: Courier New,Courier,monospace;">player_completed_cb()</span> function is called. If an error occurs in the player engine, you are notified if you have registered the <span style="font-family: Courier New,Courier,monospace;">player_error_cb()</span> callback.</p>
<p>If the player state is changed to <span style="font-family: Courier New,Courier,monospace;">ready</span>, the multimedia resource is available and you can get content information of the media. You can also get content information in a playing state in some cases of playback streaming.</p>

 
  <h2 id="audio" name="audio">Handling Audio</h2> 
  <p>Tizen enables your application to play audio and provides controlling functions for using audio resources. The resources can be media files stored on the device or they can be streamed from a streaming server (defined with a URI) through the network.</p> 
  
  <p>The audio formats your application can use include MP3, AAC, WMA, M4A, 3GA, WAV, and AMR. The available formats depend on the target device.</p>

  
  <p>The <span style="font-family: Courier New,Courier,monospace;">player_interrupted_cb()</span> function is called when an application is interrupted by another application. The player is paused or moved to an idle state according to the audio policy. You must check the state of the current instance and take appropriate action. If the player is changed to a paused state due to an interruption, the <span style="font-family: Courier New,Courier,monospace;">PLAYER_INTERRUPTED_COMPLETED</span> can be called at the end of the interruption. For example, if the application is interrupted by a call, alarm, or notification, the completed message is posted. However, no messages are posted if the interruption has other causes. Make sure you handle the application accordingly when audio switching occurs between various applications.</p>
  
  <p>Multiple instances of the player can be used to play several audio data streams concurrently. This means that your application can play multiple uncompressed audio files at the same time.</p> 

  <p>The following figure illustrates the general player state changes:</p> 
  <p class="figure">Figure: Player state changes</p> 
  <p align="center"><img src="../../images/using_players_state_changes.png" alt="Player state changes" style="display: block; text-align: center; margin-left: auto; margin-right: auto;"/></p> 
  <p>The following figure illustrates what happens when the player gets interrupted by the system:</p> 
  <p class="figure">Figure: Player states when interrupted by system</p> 
  <p align="center"><img alt="Player states when interrupted by system" src="../../images/using_players_interrupted_state.png"/></p> 
  
  <h2 id="video" name="video">Handling Video</h2> 
  <p>Tizen enables your application to play video, and it uses its own user surface. The surface requires a drawing area, so you have to get an overlay region and set it to the player instance to display the drawing area:</p> 
  <ol> 
     <li>Get the overlay region or Evas from the Graphics module.
	 <p>You can display video on a UI layer with the Evas object as well as on an overlay layer.</p></li> 
     <li>Create the player instance.</li> 
     <li>Set the surface type and display a handle to the player using the <span style="font-family: Courier New,Courier,monospace;">player_set_display()</span> function.</li> 
    </ol>
  <p>The video formats your application can use include: </p> 
  <ul> 
   <li>WMV, ASF, MP4, 3GP, AVI, MKV, OGG
   <p>The available formats depend on the target device.</p></li> 
  </ul> 

  <p>In case of a video interruption, the state can be <span style="font-family: Courier New,Courier,monospace;">READY</span> due to the resource restriction in the system. </p> 
  
  <p>The following figure illustrates what happens when the player gets interrupted by the system.</p> 
<p class="figure">Figure: Player states when interrupted by system</p> 
<p align="center"><img alt="Player states when interrupted by system" src="../../images/using_videoplayer_interrupted_state.png"/></p>
<h2 id="features" name="features">Features</h2>
The main features of the Player API include:
<ul>
  <li>Player
  <p>Use the Player API to control audio and video stream.</p>
  <p>After changing to the <span style="font-family: Courier New,Courier,monospace;">READY</span> state, properties such as volume, sound type, latency mode, mute mode, and looping mode can be adjusted.</p>
    <p>To learn about these features, see the <a href="../../../../org.tizen.tutorials/html/native/multimedia/player_tutorial_n.htm">Player Tutorial</a>.</p>
    </li>
  <li>Display
<p>Use the Display API to play video stream.</p>
<p>After changing to the <span style="font-family: Courier New,Courier,monospace;">IDLE</span> state, create the display handle and set the display type.</p>
<p>To learn about these features, see the <a href="../../../../org.tizen.tutorials/html/native/multimedia/player_tutorial_n.htm#set_parameters">Setting Display Parameters</a>.</p>
</li>
  <li>Stream Info
  <p>Use the Stream Info API to play video stream.</p>
    <p>After changing to the <span style="font-family: Courier New,Courier,monospace;">READY</span> state, you can retrieve stream information.</p>
    <p>To learn about these features, see the <a href="../../../../org.tizen.tutorials/html/native/multimedia/player_tutorial_n.htm#get_stream">Getting Stream Information</a>.</p>
    </li>

  <li>Audio Effect
    <p>Use the Audio Effect API to set and get the audio effect.</p>
<p>After changing to the <span style="font-family: Courier New,Courier,monospace;">IDLE</span> state, you can adjust the audio effect.</p>
    </li>
  <li>Subtitle
    <p>Use the Subtitle API to read the subtitle track.</p>
    <p>After changing to the <span style="font-family: Courier New,Courier,monospace;">READY</span> state, the subtitle can be read.</p>
    <p>To learn about these features, see the <a href="../../../../org.tizen.tutorials/html/native/multimedia/player_tutorial_n.htm#insert">Inserting Subtitles</a>.</p>
    </li>
  </ul>
 
<h2 id="stream" name="stream">Streaming Playback</h2> 
  <p>You can set specific URLs for streaming media playback by using the <span style="font-family: Courier New,Courier,monospace;">player_set_uri()</span> function.</p> 
  <p>Both Hypertext Transfer Protocol (HTTP) and Real Time Streaming Protocol (RTSP) protocols support streaming media   playback. The HTTP request header supports the playback of both complete and download-in-progress media files. The index table (atoms) must be moved in front of the file for progressive download.</p> 
 
 <p>In case of HTTP streaming, buffering can happen when the player is prepared. You can get the status using the <span style="font-family: Courier New,Courier,monospace;">player_set_buffering_cb()</span> function.</p>
 
 <h3 id="protocol" name="protocol">Streaming Protocol Features</h3>
<p>The following table lists the streaming protocol features supported by the player.</p>

  <table> 
   <caption>
     Table: Supported streaming protocol features 
   </caption> 
   <tbody> 
    <tr> 
     <th>Streaming protocol</th> 
     <th>Supported feature</th> 
    </tr> 
    <tr> 
     <td rowspan="3">Hypertext Transfer Protocol (HTTP)</td> 
     <td>HTTP Streaming</td> 
    </tr> 
    <tr> 
     <td>HTTP Live Streaming</td> 
    </tr> 
    <tr> 
     <td>HTTP Progressive Download Play</td> 
    </tr> 	
    <tr> 
     <td>Real Time Streaming Protocol (RTSP)</td> 
     <td>RTSP Streaming</td> 
    </tr> 
   </tbody> 
  </table> 

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>