<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Internationalization</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#marking">Marking Text Parts as Translatable</a></li>
			<li><a href="#translating">Translating Texts Directly</a></li>
			<li><a href="#extracting">Extracting Messages for Translation</a></li>
			<li><a href="#tips">Internationalization Tips</a></li>
        </ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__I18N__MODULE.html">Internationalization API for Mobile Native</a></li>   
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__I18N__MODULE.html">Internationalization API for Wearable Native</a></li> 
			</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Internationalization</h1> 

<p>Tizen provides localized resources to make your application usable for different countries. The localization is based on the Internationalization API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__I18N__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__I18N__MODULE.html">wearable</a> applications), which makes strings translatable and places them  in <span style="font-family: Courier New,Courier,monospace">.po</span> (portable object) files.</p> 

<table class="note">
  <tbody>
    <tr>
      <th class="note">Note</th>
    </tr>
    <tr>
      <td class="note">The <span style="font-family: Courier New,Courier,monospace">.po</span> files must be placed in the <span style="font-family: Courier New,Courier,monospace">res/po</span> directory of the application. The files can be edited using the <a href="../../../../org.tizen.devtools/html/native_tools/po_file_editor_n.htm">PO File Editor</a> provided by the Tizen SDK.
<p>The <span style="font-family: Courier New,Courier,monospace">.po</span> file is compiled into a <span style="font-family: Courier New,Courier,monospace">.mo</span> file, and the <span style="font-family: Courier New,Courier,monospace">.mo</span> file name is decided using the project name that you define when you create the project in the IDE. The application <span style="font-family: Courier New,Courier,monospace">appid</span> is made based on the project name, and the framework finds the <span style="font-family: Courier New,Courier,monospace">.mo</span> file of the application with the application <span style="font-family: Courier New,Courier,monospace">appid</span>.</p>
<p>If you change the <span style="font-family: Courier New,Courier,monospace">appid</span> in the Tizen manifest editor later on, the <span style="font-family: Courier New,Courier,monospace">.mo</span> file name is not automatically changed. This can cause problems when getting the string resources. Be careful if you change the <span style="font-family: Courier New,Courier,monospace">appid</span> in the Tizen manifest editor.</p>
</td> 
    </tr>
  </tbody>
</table>

<p>Depending on the device&#39;s locale information, your application must load the proper resource set. If no matching resource set is found for the device&#39;s current locale, the default resource set is used.</p>		  

<p>To get the localized value of a string, use the <span style="font-family: Courier New,Courier,monospace">MsgID</span> shown in the PO File Editor, prefaced with an underscore <span style="font-family: Courier New,Courier,monospace">_</span> (for example, <span style="font-family: Courier New,Courier,monospace">_(&lt;MsgID&gt;)</span>). The underlying implementation calls the <span style="font-family: Courier New,Courier,monospace">i18n_get_text()</span> function to retrieve the localized value:</p>

<pre class="prettyprint">
char *hello_text = i18n_get_text(&quot;Hello&quot;);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">hello_text</span> variable is set to the localized text for &quot;Hello&quot; for the current locale of the device.</p>
<p>When you change the language setting on the device, the text changes in the application according to the current language.</p>

<h2 id="marking" name="marking">Marking Text Parts as Translatable</h2>
<p>The most common way to use a translation involves the following APIs: </p>

<pre class="prettyprint">
elm_object_translatable_text_set(Evas_Object *obj, const char *text);
elm_object_item_translatable_text_set(Elm_Object_Item *it, const char *text);
</pre>

<p>They set the untranslated string for the &quot;default&quot; part of the given <span style="font-family: Courier New,Courier,monospace;">Evas_Object</span> or <span style="font-family: Courier New,Courier,monospace;">Elm_Object_Item</span> and mark the string as translatable.</p>

<p>Similar functions are available if you wish to set the text for a part that is not &quot;default&quot;: </p>

<pre class="prettyprint">
elm_object_translatable_part_text_set(Evas_Object *obj, const char *part, const char *text);
elm_object_item_translatable_part_text_set(Elm_Object_Item *it, const char *part, const char *text);
</pre>

<p>It is important to provide the untranslated string to these functions, because the EFLs trigger the translation themselves and re-translate the strings automatically, if the system language changes.</p>


<h2 id="translating" name="translating">Translating Texts Directly</h2>

<p>The approach described in the previous section is not applicable all of the time. For instance, it does not work if you are populating a genlist, if you need plurals in the translation or if you want to do something else than put the translation in elementary UI components.</p>

<p>It is possible to retrieve the translation for a given text through the <span style="font-family: Courier New,Courier,monospace;">i18n_get_text()</span> function from <span style="font-family: Courier New,Courier,monospace;">app_i18n.h</span>.</p>

<pre class="prettyprint">
char *i18n_get_text(const char *msgid);
</pre>

<p>This function takes as input a string (that is copied to an <span style="font-family: Courier New,Courier,monospace;">msgid</span> field in the .po files) and returns the translation (the corresponding <span style="font-family: Courier New,Courier,monospace;">msgstr</span> field).</p>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">Do not modify or free the return value of these functions. They are statically allocated.</td>
</tr>
</tbody>
</table> 

<p>When giving the text for a genlist item, you can use it in a similar manner as in the example below.</p>

<pre class="prettyprint">
#include &quot;app_i18n.h&quot;
static char*
_genlist_text_get(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;&nbsp;return strdup(i18n_get_text(&quot;Some Text&quot;));
}
</pre>

<h3>Plurals</h3>
<p>Plurals are handled through the <span style="font-family: Courier New,Courier,monospace;">ngettext()</span> function. Its prototype is shown below.</p>

<pre class="prettyprint">
char *ngettext(const char *msgid, const char *msgid_plural, unsigned long int n);
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">msgid</span> is the same as before, that is, the untranslated string</li>
<li><span style="font-family: Courier New,Courier,monospace;">msgid_plural</span> is the plural form of <span style="font-family: Courier New,Courier,monospace;">msgid</span></li>
<li>the quantity (in English, 1 is singular and anything else is plural)</li>
</ul>

<p>A matching fr.po file contains the following lines.</p>

<pre class="prettyprint">
msgid &quot;%d Comment&quot;
msgid_plural &quot;%d Comments&quot;
msgstr[0] &quot;%d commentaire&quot;
msgstr[1] &quot;%d commentaires&quot;
</pre>

<h3>Several Plurals</h3>
<p>It is possible to have several plural forms. For instance, the .po file for Polish could contain the following lines.</p>

<pre class="prettyprint">
msgid &quot;%d Comment&quot;
msgid_plural &quot;%d Comments&quot;
msgstr[0] &quot;%d Komentarz&quot;
msgstr[1] &quot;%d Komentarze&quot;
msgstr[2] &quot;%d Komentarzy&quot;
</pre>

<p>The index values after <span style="font-family: Courier New,Courier,monospace;">msgstr</span> are defined in system-wide settings. The ones for Polish are given below:</p>

<pre class="prettyprint">
&quot;Plural-Forms: nplurals = 3; plural = n = = 1 ? 0 : n%10&gt; = 2 &amp;&amp; n%10&lt; = 4 &amp;&amp; (n%100&lt;10 | | n%100&gt; = 20) ? 1 : 2;\n&quot;
</pre>

<p>There are 3 forms (including singular). The index is 0 (singular), if the given integer n is 1. Then, if <span style="font-family: Courier New,Courier,monospace;">(n % 10 &gt;= 2 &amp;&amp; % 10 &lt;= 4 &amp;&amp; (n % 100 &lt; 10 | | n % 100 &gt;= 20)</span>, the index is 1, otherwise it is 2.</p>

<h3>Handling Language Changes at Runtime</h3>

<p>The user can change the system language settings at any time. When that is done, the framework notifies the application, which changes the language used in the Elementary. The UI components receive a &quot;language,changed&quot; signal and reset their text.</p>

<p>This is how to handle the framework event:</p>

<pre class="prettyprint">
static void
_app_language_changed(void *data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char *language;
&nbsp;&nbsp;&nbsp;&nbsp;/* Retrieve the current system language */
&nbsp;&nbsp;&nbsp;&nbsp;system_settings_get_value_string(SYSTEM_SETTINGS_KEY_LOCALE_LANGUAGE, &amp;language);
&nbsp;&nbsp;&nbsp;&nbsp;/* Set the language in elementary */
&nbsp;&nbsp;&nbsp;&nbsp;elm_language_set(language);
&nbsp;&nbsp;&nbsp;&nbsp;free(language);
}
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, _app_language_changed, &amp;ad);
}
</pre>

<p>The call to <span style="font-family: Courier New,Courier,monospace;">elm_language_set()</span> above triggers the emission of the &quot;language,changed&quot; signal, which is handled the same way as the typical smart event signals.</p>

<h2 id="extracting" name="extracting">Extracting Messages for Translation</h2>

<p>The <span style="font-family: Courier New,Courier,monospace;">xgettext</span> tool extracts strings to translate to a .pot file (po template), while <span style="font-family: Courier New,Courier,monospace;">msgmerge</span> maintains the existing .po files. The typical workflow is as follows:</p>
<ul>
<li>run <span style="font-family: Courier New,Courier,monospace;">xgettext</span> once; it generates a .pot file</li>
<li>when adding a new translation, copy the .pot file to &lt;locale&gt;.po and translate that file</li>
<li>new runs of <span style="font-family: Courier New,Courier,monospace;">xgettext</span> update the existing .pot file and <span style="font-family: Courier New,Courier,monospace;">msgmerge</span> updates the .po files</li>
</ul>

<p>The following example is a typical call to <span style="font-family: Courier New,Courier,monospace;">xgettext</span>.</p>

<pre class="prettyprint">
xgettext --directory = src --output-dir = res/po --keyword = _ --keyword = N_ --keyword = elm_object_translatable_text_set:2 --keyword = elm_object_item_translatable_text_set:2 --add-comments = --from-code = utf-8 --foreign-use
</pre>

<p>This extracts all strings that are used inside the <span style="font-family: Courier New,Courier,monospace;">_()</span> function (as an optional short-hand for <span style="font-family: Courier New,Courier,monospace;">i18n_get_text()</span>), use UTF-8 as the encoding and add the comments right before the strings to the output files).</p>

<p>The following example is a typical call to <span style="font-family: Courier New,Courier,monospace;">msgmerge</span>.</p>

<pre class="prettyprint">
msgmerge --width=120 --update res/po/fr.po res/po/ref.pot
</pre>

<h2 id="tips" name="tips">Internationalization Tips</h2>

<h3 id="assumptions" name="assumptions">Do Not Make Assumptions about Languages</h3>

<p>Languages vary greatly and even if you knew several of them, do not assume there is any common logic to them.</p>

<p>For example, with English typography, no character must appear before colons and semicolons (&#39;:&#39; and &#39;;&#39;). However, with French typography, there must be &quot;espace fine insécable&quot;, that is, a non-breakable space (HTML&#39;s &amp;nbsp;) that is narrower that regular spaces.</p>

<p>This prevents proper translation in the following construct:</p>

<pre class="prettyprint">
snprintf(buf, some_size, &quot;%s: %s&quot;, i18n_get_text(error), i18n_get_text(reason));
</pre>

<p>The correct way to translate it is to use a single string and let the translators manage the punctuation. This means translating the format string instead:</p>

<pre class="prettyprint">
snprintf(buf, some_size, i18n_get_text(&quot;%s: %s&quot;), i18n_get_text(error), i18n_get_text(reason));
</pre>

<p>It is not always possible, but aim for this unless a specific issue arises.</p>

<h3 id="length" name="length">Translations Are of Different Lengths</h3>
<p>Depending on the language, the translation has a different length on screen. In some cases, a language has a shorter construct than another, while the situation is reversed in another case; a language may have a word for a specific concept, while another does not and requires a circumlocution (designating something by using several words).</p>

<h3 id="source" name="source">For Source Control, Do Not Commit .po If Only Line Indicators Have Changed</h3>

<p>From the example above, a translation block looks like:</p>

<pre class="prettyprint">
#: some_file.c:43 another_file.c:41
msgid &quot;Click Here&quot;
msgstr &quot;Cliquez ici&quot;
</pre>

<p>In case you insert a new line at the top of &quot;some_file.c&quot;, the line indicator changes to look like this:</p>

<pre class="prettyprint">
#: some_file.c:44 another_file.c:41
</pre>

<p>Obviously, on non-trivial projects, such changes often happen. If you use source control and commit such changes even though no actual translation change has happened, each commit probably contains a change to .po files. This hampers readability of the change history, and in case several people are working in parallel and need to merge their changes, this creates huge merge conflicts each time.</p>

<p>Only commit changes to .po files when there are actual translation changes, not because line comments have changed.</p>

<h3 id="shorthand" name="shorthand">Using <span style="font-family: Courier New,Courier,monospace;">_()</span> as Shorthand to the <span style="font-family: Courier New,Courier,monospace;">i18n_get_text()</span> Function</h3>

<p>Since calling <span style="font-family: Courier New,Courier,monospace;">i18n_get_text()</span> may often happen, it is abbreviated to <span style="font-family: Courier New,Courier,monospace;">_()</span>. The Tizen SDK provides this abbreviation by default.</p>

<h3 id="sorting" name="sorting">Proper Sorting: <span style="font-family: Courier New,Courier,monospace;">strcoll()</span></h3>
<p>There is a string comparison tailored for sorting data for display: <span style="font-family: Courier New,Courier,monospace;">strcoll()</span>. It works the same way as <span style="font-family: Courier New,Courier,monospace;">strcmp()</span> but sorts the data according to the current locale settings.</p>

<pre class="prettyprint">
int strcmp(const char *s1, const char *s2);
int strcoll(const char *s1, const char *s2);
</pre>

<p>The function prototype is a standard one and indicates how to order strings. A detailed explanation is out of scope for this guide, but use the <span style="font-family: Courier New,Courier,monospace;">strcoll()</span> function as the comparison function for sorting the data set you are using.</p>

<h3 id="translators" name="translators">Working with Translators</h3>
<p>The system described above is a common one and is likely to be known to translators, meaning that giving its name (<span style="font-family: Courier New,Courier,monospace;">gettext</span>) may be enough to explain how it works. In addition to this documentation, there is extensive additional documentation as well as questions and answers on the topic in the Internet.</p>

<p>Do not hesitate to put comments in your code above the strings to be translated, since they can be extracted along with the strings and saved in the .po files for the translator to see them.</p>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>	