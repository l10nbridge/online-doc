<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Wi-Fi</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#wifi_manager">Wi-Fi Manager</a></li>
			<li><a href="#ap">Access Point</a></li>
			<li><a href="#wifi_monitor">Wi-Fi Monitor</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#activate">Activating a Wi-Fi Device</a></li>
			<li><a href="#scan">Scanning for Access Points</a></li>
			<li><a href="#connect">Connecting to a Specific Access Point</a></li>
		</ul>			
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">Wi-Fi API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">Wi-Fi API for Wearable Native</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Wi-Fi</h1>

<p>Tizen allows your application to connect to a Wireless Local Area Network (WLAN) and transfer data over the network. The Wi-Fi Manager enables your application to activate and deactivate a local Wi-Fi device, and to connect to a WLAN network in the infrastructure mode.</p>
<p>The main features of the Wi-Fi API include:</p>
<ul><li>Wi-Fi device and connection management using the <a href="#wifi_manager">Wi-Fi Manager</a></li>
<li><a href="#ap">Access point</a> management
<p>You can manage the Wi-Fi account and security information.</p>
<p>The infrastructure mode is used to connect to a wireless local area network (WLAN). The infrastructure mode requires a wireless access point. To connect to a WLAN, a client must be configured to use the same service set identifier (SSID) as the access point.</p></li>
<li>Wi-Fi state monitoring using the <a href="#wifi_monitor">Wi-Fi Monitor</a></li>
</ul>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">You can test the Wi-Fi functionality only on a target device. The Emulator does not support this feature.</td> 
    </tr> 
   </tbody> 
  </table> 

  
<h2 id="wifi_manager" name="wifi_manager">Wi-Fi Manager</h2>  

<p>The Tizen Wi-Fi Manager API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__MANAGER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__MANAGER__MODULE.html">wearable</a> applications) provides functions for using a Wi-Fi connection. </p>
<p>Using the Wi-Fi Manager, you can implement features that allow the users of your application to:</p>

<ul><li>Activate and deactivate a Wi-Fi device
<p>You can <a href="#activate">activate and deactivate a local Wi-Fi device</a> using the <span style="font-family: Courier New,Courier,monospace">wifi_activate()</span> and <span style="font-family: Courier New,Courier,monospace">wifi_deactivate()</span> functions. Both functions have a callback function as the first parameter. The callback function is called after the activation or deactivation is completed. You can use  the <span style="font-family: Courier New,Courier,monospace">NULL</span> value, if you want no notifications.</p>
</li>
<li>Connect to an access point
<p>You can <a href="#connect">connect to an access point</a> asynchronously using the <span style="font-family: Courier New,Courier,monospace">wifi_connect()</span> function.</p>
</li>
<li>Scan the access points
<p>To <a href="#scan">scan access points</a>, use the <span style="font-family: Courier New,Courier,monospace">wifi_scan()</span> and <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> functions.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">wifi_scan()</span> function starts the scan asynchronously. When the scan is finished, a callback function is called. The <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function allows you to get the result of the scan. It also invokes a callback function.</p></li></ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the Wi-Fi functionality</a>.</p>
 
  <h2 id="ap" name="ap">Access Point</h2> 

<p>The Access Point API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__AP__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__AP__MODULE.html">wearable</a> applications) provides functions for managing access points (AP). You need to create an AP handle (<span style="font-family: Courier New,Courier,monospace">wifi_ap_h</span>) for using the API functions. </p>

<p>The Access Point API supports the following main features:</p>
<ul><li>Creating and destroying an AP handle</li>
<li>Getting the network information</li>
<li>Getting the security information</li></ul>

<p>The following table lists the network information details you can access with the Network Information API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__AP__NETWORK__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__AP__NETWORK__MODULE.html">wearable</a> applications).</p>
<table> 
   <caption>
     Table: Network information details
   </caption> 
   <tbody> 
    <tr> 
     <th>Information</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td>Bssid</td> 
     <td>Basic service set identifier</td> 
    </tr> 
	    <tr> 
     <td>Connection state</td> 
     <td>Connection state</td> 
    </tr>
	    <tr> 
     <td>DNS address</td> 
     <td>DNS address</td> 
    </tr>
	    <tr> 
     <td>Essid</td> 
     <td>Extended service set identifier</td> 
    </tr>
	    <tr> 
     <td>Frequency</td> 
     <td>Frequency (in MHz)</td> 
    </tr>
	    <tr> 
     <td>IP address</td> 
     <td>IP address</td> 
    </tr>
	    <tr> 
     <td>IP config type</td> 
     <td>Net IP configuration type</td> 
    </tr>
	    <tr> 
     <td>Max speed</td> 
     <td>Maximum speed (in Mbps)</td> 
    </tr>
	    <tr> 
     <td>Proxy address</td> 
     <td>Proxy address</td> 
    </tr>
	    <tr> 
     <td>Proxy type</td> 
     <td>Proxy method type</td> 
    </tr>
	    <tr> 
     <td>Rssi</td> 
     <td>Received signal strength indication</td> 
    </tr>
	    <tr> 
     <td>Subnet mask</td> 
     <td>Subnet mask</td> 
    </tr>
   </tbody> 
  </table> 


<p>The following table lists the security information details you can access with the Security Information API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__AP__SECURITY__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__AP__SECURITY__MODULE.html">wearable</a> applications).</p>
<table> 
   <caption>
     Table: Security information details
   </caption> 
   <tbody> 
    <tr> 
     <th>Information</th> 
     <th>Description</th> 
    </tr> 
	<tr> 
     <td>Encryption type</td> 
     <td>Wi-Fi encryption type, used in the infrastructure and ad-hoc mode</td> 
    </tr>
	<tr> 
     <td>Security type</td> 
     <td>Wi-Fi security type</td> 
    </tr>
	<tr> 
     <td>Passphrase required</td> 
     <td>Whether the passphrase is required</td> 
    </tr>
	    <tr> 
     <td>WPS supported</td> 
     <td>Whether the WPS (Wi-Fi Protected Setup) is supported</td> 
    </tr>
   </tbody> 
  </table> 

<p>You can also obtain the EAP information listed in the following table.</p>
<table> 
   <caption>
     Table: EAP information details
   </caption> 
   <tbody> 
    <tr> 
     <th>Information</th> 
     <th>Description</th> 
    </tr> 
	    <tr> 
     <td>Authentication type</td> 
     <td>Type of EAP phase2 authentication of Wi-Fi</td> 
    </tr>
		    <tr> 
     <td>CA certificate</td> 
     <td>EAP CA certificate (valid only if the EAP type is TLS)</td> 
    </tr>
		    <tr> 
     <td>Client Certificate</td> 
     <td>EAP client certificate (valid only if the EAP type is TLS)</td> 
    </tr>
		    <tr> 
     <td>Passphrase</td> 
     <td>EAP passphrase (valid if the EAP type is PEAP or TTLS)</td>
    </tr>
		    <tr> 
     <td>Private key file</td> 
     <td>EAP private key file (valid only if the EAP type is TLS)</td> 
    </tr>
	    <tr> 
     <td>EAP type</td> 
     <td>EAP type of Wi-Fi</td> 
    </tr>	
   </tbody> 
  </table> 

<h2 id="wifi_monitor" name="wifi_monitor">Wi-Fi Monitor</h2> 

<p>The Wi-Fi Monitor API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__MONITOR__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__MONITOR__MODULE.html">wearable</a> applications) provides functions for monitoring the Wi-Fi connection state.</p>

<p>The Wi-Fi Monitor allows you to get the state of the Wi-Fi connection. The state can be:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">WIFI_CONNECTION_STATE_FAILURE</span>
<p>Connection failed.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">WIFI_CONNECTION_STATE_DISCONNECTED</span>
<p>Disconnected.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">WIFI_CONNECTION_STATE_ASSOCIATION</span>
<p>Association.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">WIFI_CONNECTION_STATE_CONFIGURATION</span>
<p>Configuration.</p></li>
<li><span style="font-family: Courier New,Courier,monospace">WIFI_CONNECTION_STATE_CONNECTED</span>
<p>Connected.</p></li></ul>

<p>The Wi-Fi Monitor also allows monitoring the changes in Wi-Fi. With the Wi-Fi Monitor, you can register callback functions, which notify you when Wi-Fi properties change. The property changes resulting in notifications are listed in the following table.</p>

<table> 
   <caption>
     Table: Property changes
   </caption> 
   <tbody> 
    <tr> 
     <th>Change in</th> 
     <th>Description</th> 
    </tr> 
	<tr> 
     <td>Connection state</td> 
     <td>The callback is called when the connection state is changed.</td> 
    </tr>
	<tr> 
     <td>Device state</td> 
     <td>The callback is called when the device state changes.</td> 
    </tr>
	<tr> 
     <td>RSSI level</td> 
     <td>The callback is called when the RSSI of the connected Wi-Fi changes.</td> 
    </tr>	
   </tbody> 
  </table> 	

<h2>Warm-up</h2>
<p>Become familiar with the Wi-Fi API basics by learning about: </p>
		<ul>
			<li><a href="#prerequisites">Prerequisites</a><p>Prepare your application to use the Wi-Fi functionality.</p></li>
			<li><a href="#activate">Activating a Wi-Fi Device</a><p>Activate the Wi-Fi device asynchronously.</p></li>
			<li><a href="#scan">Scanning for Access Points</a><p>Scan the nearby access points and retrieve information about them.</p></li>
			<li><a href="#connect">Connecting to a Specific Access Point</a><p>Connect to a specific access point after scanning.</p></li>
		</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the Wi-Fi functionality:</p>
<ol>
<li>
<p>To use the Wi-Fi API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">wearable</a> applications), the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.get&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.set&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/network.profile&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>		
</li>
<li>
<p>To use the functions and data types of the Wi-Fi API, include the <span style="font-family: Courier New,Courier,monospace">&lt;wifi.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;wifi.h&gt;
</pre>
</li>
<li>
<p>To be able to use all Wi-Fi functions, initialize Wi-Fi using the <span style="font-family: Courier New,Courier,monospace;">wifi_initialize()</span> function:</p>

<pre class="prettyprint">
int error_code;

error_code = wifi_initialize();
if (error_code != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;return;
</pre>
</li>
<li>
<p>When Wi-Fi is no longer needed or the application is exiting, release Wi-Fi:</p>

<pre class="prettyprint">
wifi_deinitialize();
</pre>
</li>
</ol>

<table class="note">
<tbody>
<tr>
<th class="note">Note</th>
</tr>
<tr>
<td class="note">The Wi-Fi feature is not thread-safe and depends on the ecore main loop. Implement Wi-Fi within the ecore main loop, and do not use it in a thread.</td>
</tr>
</tbody>
</table>

 <h2 id="activate" name="activate">Activating a Wi-Fi Device</h2>

<p>To activate and deactivate a local Wi-Fi device, and to check that Wi-Fi is activated:</p>

<ol><li>Activate a Wi-Fi device using the <span style="font-family: Courier New,Courier,monospace">wifi_activate()</span> function:
<pre class="prettyprint">
error_code = wifi_activate(__wifi_activated_cb, NULL);
</pre>

<p>Define the <span style="font-family: Courier New,Courier,monospace">__wifi_activated_cb()</span> callback, which is invoked when the Wi-Fi activation is completed.</p>
<p>In the following example, the callback prints an information message using the dlogutil tool:</p>

<pre class="prettyprint">
static void
__wifi_activated_cb(wifi_error_e result, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (result == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success to activate Wi-Fi device!&quot;);
}
</pre></li>

<li>Check the Wi-Fi connection using the <span style="font-family: Courier New,Courier,monospace">wifi_is_activated()</span> function. The parameter indicates whether Wi-Fi is activated.

<pre class="prettyprint">
bool wifi_activated = false;
wifi_is_activated(&amp;wifi_activated);
if (wifi_activated)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success to get Wi-Fi device state.&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to get Wi-Fi device state.&quot;);
</pre></li>
<li>
<p>To deactivate the Wi-Fi device when Wi-Fi is no longer needed (or the application is exiting), use the <span style="font-family: Courier New,Courier,monospace">wifi_deactivate()</span> function:</p>
<pre class="prettyprint">
wifi_deactivate(NULL, NULL);
</pre>
</li>
</ol>

 <h2 id="scan" name="scan">Scanning for Access Points</h2>

<p>To scan nearby access points and print the scanning result, such as the AP name and state:</p>

<ol><li>Scan nearby access points asynchronously:
 
<pre class="prettyprint">
wifi_scan(__scan_request_cb, NULL);
</pre></li>

<li>Define a callback, which is invoked when the scan is finished.
<p>In the following example, the callback calls the <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function for getting information on the found AP. The <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function gets the result of the scan, and the <span style="font-family: Courier New,Courier,monospace">__wifi_found_ap_cb()</span> callback is called for each found access point.</p>
 
<pre class="prettyprint">
void
__scan_request_cb(wifi_error_e error_code, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_foreach_found_aps(__wifi_found_ap_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to scan&quot;);
}
</pre></li>

<li>Show the result of the scan using the <span style="font-family: Courier New,Courier,monospace">__wifi_found_ap_cb()</span> callback.
<p>In the following example, the callback prints the AP name and connection state:</p>

<pre class="prettyprint">
bool
__wifi_found_ap_cb(wifi_ap_h ap, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *ap_name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;wifi_connection_state_e state;

&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_essid(ap, &amp;ap_name);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to get AP name.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_connection_state(ap, &amp;state);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to get state.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;AP name: %s, state: %s&quot;, ap_name, print_state(state));

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

static const char*
print_state(wifi_connection_state_e state)
{
&nbsp;&nbsp;&nbsp;&nbsp;switch (state) {
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_DISCONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Disconnected&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_ASSOCIATION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Association&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_CONNECTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Connected&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;case WIFI_CONNECTION_STATE_CONFIGURATION:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &quot;Configuration&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>You can get other information, including frequency, IP address, and security type. For more information, see the <a href="#ap">Access Point</a>.</p></li></ol>

 <h2 id="connect" name="connect">Connecting to a Specific Access Point</h2>

<p>To make a connection using a specific access point:</p>

<ol><li>Select an access point.
<p>Check whether Wi-Fi is activated using the <span style="font-family: Courier New,Courier,monospace">wifi_is_activated()</span> function, and receive the specific AP name from the user. Call the <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function to compare the AP name with the result of the scan:</p>

<pre class="prettyprint">
char ap_name[33];
bool state = false;

wifi_is_activated(&amp;state);
if (state == false)
&nbsp;&nbsp;&nbsp;&nbsp;return -1;

dlog_print(DLOG_INFO, LOG_TAG, &quot;Input a part of AP name to connect : &quot;);
error_code = scanf(&quot;%32s&quot;, ap_name);

error_code = wifi_foreach_found_aps(__found_connect_ap_cb, ap_name);
if (error_code != WIFI_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to connect (can&#39;t get AP list)&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}

dlog_print(DLOG_INFO, LOG_TAG, &quot;Connection step finished&quot;);
</pre></li>

<li>Make a connection with an access point.
<p>Define the <span style="font-family: Courier New,Courier,monospace">__found_connect_ap_cb()</span> callback invoked by the <span style="font-family: Courier New,Courier,monospace">wifi_foreach_found_aps()</span> function.</p>
<p>The callback compares <span style="font-family: Courier New,Courier,monospace">user_data</span> (the AP name from the user input) with the name of the found AP. If it is correct, the function checks whether the AP requires a passphrase. Set the passphrase using the <span style="font-family: Courier New,Courier,monospace">wifi_ap_set_passphrase()</span> function.</p> 
<p>Finally, connect to a specific AP using the <span style="font-family: Courier New,Courier,monospace">wifi_connect()</span> function.</p>

<pre class="prettyprint">
static bool
__found_connect_ap_cb(wifi_ap_h ap, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;&nbsp;char *ap_name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;char *ap_name_part = (char*)user_data;

&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_ap_get_essid(ap, &amp;ap_name);
&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to get AP name&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;if (strstr(ap_name, ap_name_part) != NULL) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool required = false;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wifi_ap_is_passphrase_required(ap, &amp;required) == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Passphrase required: %s&quot;, required ? &quot;True&quot; : &quot;False&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to get Passphrase required&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (required) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char passphrase[100];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Input passphrase for %s :&quot;, passphrase);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = scanf(&quot;99%s&quot;, passphrase);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_ap_set_passphrase(ap, passphrase);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to set passphrase&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = wifi_connect(ap, __connected_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed in connection request&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Success in connection request&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(ap_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;free(ap_name);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li>Provide a notification about the connection result.
<p>The <span style="font-family: Courier New,Courier,monospace">wifi_connect()</span> function called within the <span style="font-family: Courier New,Courier,monospace">__found_connect_ap_cb()</span> callback  invokes the <span style="font-family: Courier New,Courier,monospace">__connected_cb()</span> function, which you can use to notify the user of the connection result:</p>

<pre class="prettyprint">
static void
__connected_cb(wifi_error_e result, void* user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (result == WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Wi-Fi Connection Succeeded&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Wi-Fi Connection Failed!&quot;);
}
</pre></li></ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>