<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
    <title>Service Access through Plugins</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#adaptors">Available Adaptors</a></li>
			<li><a href="#start_plugin">Starting a Plugin</a></li>
            <li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#Starting_up">Retrieving Available Service Plugins</a></li>
            <li><a href="#Files_listing">Retrieving Files</a></li>
            <li><a href="#File_upload">Uploading Files</a></li>
            <li><a href="#File_download">Downloading Files</a></li>
            <li><a href="#File_remove">Removing Files</a></li>
        </ul>		
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.native.mobile.apireference/group__SERVICE__ADAPTOR__MODULE.html">Service Adaptor API for Mobile Native</a></li>
			<li><a href="https://developer.tizen.org/development/sample/native/Social/Service_Adaptor" target="_blank">Service Adaptor Sample Description</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Service Access through Plugins</h1>

<p>You can manage adaptors, which function as agents between the Service Adaptor Client and the related plugins, to take advantage of various services. For example, the Auth and Storage adaptors allow you to access the Auth and Service Plugins to use services, such as Amazon, Box, Dropbox, Google Drive, Onedrive, and Sugarsync.</p>

<p>This feature is supported in mobile applications only.</p>

<p class="figure">Figure: Service Adaptor structure</p>
<p style="text-align:center;"><img alt="Service Adaptor structure" src="../../images/service_adaptor_structure.png"/></p>

<p>The main feature of the Service Adaptor API is to connect adaptors to and disconnect them from the Service Adaptor Client though D-Bus. The Service Adaptor uses 2 path types:</p>
    <ul>
        <li><strong>Logical path</strong>
<p>The path of the root file system. It starts from the root path (&quot;/&quot;), and you can use the path like in Linux (for example, &quot;/folder1/image1.jpg&quot;).</p>
        </li>
        <li><strong>Physical path</strong>
<p>A specific URI used for the cloud server. Some clouds use a logical path, but others use a specific key or URL (for example, &quot;/&quot; is &quot;ZmNhMWY2MTZlY2M1NDg4OGJmZDY4O&quot; and &quot;/folder1&quot; is &quot;2JI32UNJDWQEQWQWEADSSAD&quot;).</p>
        </li>
    </ul>

<h2 id="adaptors" name="adaptors">Available Adaptors</h2>	
	
<p>The following adaptors are provided:</p>

<ul>
    <li>Auth adaptor
<p>This adaptor manages authentication plugins. It allows you to:</p>
    <ul>
        <li>Get the Auth Plugin list.</li>
        <li>Set the Plugin.</li>
        <li>Request the Channel Auth, such as the service name (&quot;com.serviceadaptor.message&quot;), app ID, service ID (0: contact, 1: free message), and mobile station identification number (IMSI).</li>
    </ul>
</li>
    <li>Storage adaptor
<p>This adaptor handles files transfers to and from a cloud. It allows you to:</p>
    <ul>
        <li><a href="#File_download">Download a server or thumbnail file</a> and write it to a local file.</li>
        <li><a href="#File_upload">Upload a local file</a> to a server path.</li>
        <li><a href="#Files_listing">Request the file status</a>.</li>
        <li>Cancel, pause, and resume a file transfer.</li>
		<li><a href="#File_remove">Remove a file from the storage</a>.</li>
    </ul>
	</li> 
	<li>Contact adaptor
<p>This adaptor manages contact information in the Contact server, including the contact profiles and service registration information. It allows you to:</p>
    <ul>
        <li>Reset contact information in the Contact server and upload native contact information of the device to the server.</li>
        <li>Synchronize native contact information of the device with the Contact server according to the <span style="font-family: Courier New,Courier,monospace">[type]</span> field of each contact.</li>
        <li>Get contact profiles and service registration information.</li>
        <li>Set and update the device profile in the server.</li>
        <li>Upload and delete profile image meta in the File server and set the my profile image to the Profile server.</li>
        <li>Set and get the my profile privacy level</li>
        <li>Set my presence ON/OFF information to the Presence server.</li>
    </ul>
</li>
    <li>Discovery adaptor
	<p>This adaptor is a future development. Not in use yet.</p></li>
    <li>Message adaptor
<p>This adaptor manages chatting and messaging. It allows you to:</p>
    <ul>
        <li>Create a chatroom, and invite people to (or end) a chat.</li>
        <li>Get all unread messages.</li>
        <li>Read or unseal a message.</li>
        <li>Forward online or unread messages.</li>
        <li>Save the call log.</li>
        <li>Get the chat ID based on the phone number.</li>
    </ul>
	</li>
    <li>Push adaptor
<p>This adaptor receives push notifications from a push service.</p></li>
    <li>Shop adaptor
<p>This adaptor allows you to:</p>
    <ul>
        <li>Get a list of items.</li>
        <li>Get item information for download.</li>
        <li>Download an item.</li>
        <li>Get the item panel URL.</li>
    </ul>
	</li>
</ul>


<h2 id="start_plugin" name="start_plugin">Starting a Plugin</h2>

<p>To start a plugin, use the following process:</p>

<ol><li><a href="#prerequisites">Create a Service Adaptor</a> with the <span style="font-family: Courier New,Courier,monospace">service_adaptor_create()</span> function.</li>
<li>With a valid Service Adaptor handler, <a href="#Starting_up">iterate through all installed plugins</a> with the <span style="font-family: Courier New,Courier,monospace">service_adaptor_foreach_plugin()</span> function.</li>
<li>Inside the callback (invoked for each plugin), get the <span style="font-family: Courier New,Courier,monospace">plugin_uri</span> value, which is passed to the <span style="font-family: Courier New,Courier,monospace">service_adaptor_create_plugin()</span> function.</li>
<li>Request a start initialization for the service plugin with the <span style="font-family: Courier New,Courier,monospace">service_plugin_start()</span> function.</li></ol>

<p>The following example starts all installed Auth and Storage plugins appending each <span style="font-family: Courier New,Courier,monospace">plugin_uri</span> to the <span style="font-family: Courier New,Courier,monospace">list</span> object:</p>
<pre class="prettyprint">
bool
_plugin_iterator_cb(char *plugin_uri, int service_mask, void *user_data);

service_adaptor_h service_adaptor = NULL;
ret = service_adaptor_create(&amp;service_adaptor);

Evas_Object *list;
ret = service_adaptor_foreach_plugin(service_adaptor, _plugin_iterator_cb, (void *)list);

bool
_plugin_iterator_cb(char *plugin_uri, int service_mask, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *list = (Evas_Object *)user_data;

&nbsp;&nbsp;&nbsp;&nbsp;if (!plugin_uri || !list)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;&nbsp;if ((service_mask &amp; SERVICE_PLUGIN_SERVICE_AUTH) &amp;&amp; (service_mask &amp; SERVICE_PLUGIN_SERVICE_STORAGE)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(list, plugin_uri, NULL, NULL, _show_plugin_view, plugin_uri);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_h plugin = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_adaptor_create_plugin(service_adaptor, plugin_uri, &amp;plugin);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Hide this using config file or user input, because it is security information */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(plugin, SERVICE_PLUGIN_PROPERTY_APP_KEY, &quot;enasvv4l8hdbmhn&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(plugin, SERVICE_PLUGIN_PROPERTY_APP_SECRET, &quot;uqhl4pp8mo7hmgn&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_start(plugin, (SERVICE_PLUGIN_SERVICE_AUTH | SERVICE_PLUGIN_SERVICE_STORAGE));
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h2>Warm-up</h2>

<p>Become familiar with the Service Adaptor API basics by learning about:</p>

<ul>
	<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the Service Adaptor functionality.</p></li>
    <li><p><a href="#Starting_up">Retrieving Available Service Plugins</a></p>
        <p>Retrieve available service plugins and store handles to them.</p></li>
    <li><p><a href="#Files_listing">Retrieving Files</a></p>
        <p>Retrieve information about all the files in the storage.</p></li>
    <li><p><a href="#File_upload">Uploading Files</a></p>
        <p>Upload a file to the storage.</p></li>
    <li><p><a href="#File_download">Downloading Files</a></p>
        <p>Download a file from the storage.</p></li>
    <li><p><a href="#File_remove">Removing Files</a></p>
        <p>Remove a file from the storage.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the Service Adaptor functionality:</p>
<ol>
<li>
<p>To use the functions and data types of the <a href="../../../../org.tizen.native.mobile.apireference/group__SERVICE__ADAPTOR__MODULE.html">Service Adaptor</a> API, include the <span style="font-family: Courier New,Courier,monospace">&lt;service_adaptor_client.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;service_adaptor_client.h&gt;
</pre>
</li>

<li>
<p>Create a Service Adaptor handle using the <span style="font-family: Courier New,Courier,monospace">service_adaptor_create()</span> function:</p>
<pre class="prettyprint">
static service_adaptor_h service_adaptor;

void
service_adaptor_init()
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = service_adaptor_create(&amp;service_adaptor);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret != SERVICE_ADAPTOR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
</pre>
</li>
<li>
<p>When no longer needed, destroy the Service Adaptor handle and release all its resources with the <span style="font-family: Courier New,Courier,monospace">service_adaptor_destroy()</span> function:</p>

<pre class="prettyprint">
static void
service_adaptor_deinit(int result, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = service_adaptor_destroy(service_adaptor);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret != SERVICE_ADAPTOR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
</pre>
</li>
</ol>


<h2 id="Starting_up" name="Starting_up">Retrieving Available Service Plugins</h2>

<p>To retrieve available service plugins:</p>

<ol>
<li>
<p>Create a data structure for storing the service plugin handles:</p>
<pre class="prettyprint">
struct plugin_list_item_s {
&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_h plugin;
&nbsp;&nbsp;&nbsp;&nbsp;struct plugin_list_item_s *next;
};

typedef struct plugin_list_item_s plugin_list_item_t;
typedef plugin_list_item_t plugin_list_t;
typedef plugin_list_item_t* plugin_list_item_h;
typedef plugin_list_t* plugin_list_h;
</pre>
</li>

<li>
<p>Retrieve a list of available service plugins:</p>
<pre class="prettyprint">
static plugin_list_t plugins;

/* Handle a plugin from the plugin list */
static bool
_plugin_iterator_cb(char *plugin_uri, int service_mask, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;plugin_list_item_h plugin_item = (plugin_list_item_h)calloc(1, sizeof(plugin_list_item_t));

&nbsp;&nbsp;&nbsp;&nbsp;/* Create the plugin handle */
&nbsp;&nbsp;&nbsp;&nbsp;service_adaptor_create_plugin(service_adaptor, plugin_uri, &amp;plugin_item-&gt;plugin);

&nbsp;&nbsp;&nbsp;&nbsp;/* Set the plugin properties */
&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(plugin_item-&gt;plugin, SERVICE_PLUGIN_PROPERTY_APP_KEY, &quot;app_key&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(plugin_item-&gt;plugin, SERVICE_PLUGIN_PROPERTY_APP_SECRET, &quot;app_secret&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;/* Initialize the plugin */
&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_start(plugin_item-&gt;plugin, service_mask);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}

/* Retrieve the plugin list */
void
plugin_lookup()
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Iterate through the plugin list */
&nbsp;&nbsp;&nbsp;&nbsp;/* Use the callback to separately handle each plugin in the list */
&nbsp;&nbsp;&nbsp;&nbsp;int ret = service_adaptor_foreach_plugin(service_adaptor, _plugin_iterator_cb, &amp;plugins);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SERVICE_ADAPTOR_ERROR_NO_DATA)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle no plugins */
&nbsp;&nbsp;&nbsp;&nbsp;else if (ret != SERVICE_ADAPTOR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
</pre>
</li>
</ol>

<h2 id="Files_listing" name="Files_listing">Retrieving Files</h2>

<p>To retrieve information about all the files in the storage:</p>

<ol>

<li>
<p>Retrieve the list of files using the <span style="font-family: Courier New,Courier,monospace">service_storage_get_file_list()</span> function with the storage service plugin handle as the first parameter and the file list callback as the third parameter:</p>
<pre class="prettyprint">
void
plugin_get_file_list(service_plugin_h plugin)
{
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_get_file_list(plugin, &quot;/&quot;, _service_storage_result_cb, NULL);
}
</pre>
</li>

<li>
<p>Define the file list callback. In the callback, iterate through the list using the <span style="font-family: Courier New,Courier,monospace">service_storage_file_list_foreach_file()</span> function with the file callback as the second parameter. The file callback is called separately for each file in the list.</p>
<pre class="prettyprint">
/* Handle the returned file list */
static void
_service_storage_result_cb(int result, service_storage_file_list_h list, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Iterate through the list */
&nbsp;&nbsp;&nbsp;&nbsp;/* Use the callback to separately handle each file in the list */
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_file_list_foreach_file(list, _file_iterator_cb, NULL);
}
</pre>
</li>

<li>
<p>Define the file callback. In the callback, use the <span style="font-family: Courier New,Courier,monospace">service_storage_file_XXX()</span> functions to retrieve information about the current file.</p>
<pre class="prettyprint">
/* Handle a file from the file list */
static bool
_file_iterator_cb(service_storage_file_h file, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;unsigned long long size = 0;
&nbsp;&nbsp;&nbsp;&nbsp;bool is_dir = false;

&nbsp;&nbsp;&nbsp;&nbsp;/* Get basic file information */
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_file_is_dir(file, &amp;is_dir);
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_file_get_size(file, &amp;size);
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_file_get_logical_path(file, &amp;name);

&nbsp;&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

</ol>

<h2 id="File_upload" name="File_upload">Uploading Files</h2>

<p>To upload a file to the storage:</p>

<ol>

<li>
<p>Define the callbacks for monitoring the upload task progress and state during the upload:</p>
<pre class="prettyprint">
static void
task_progress_cb(unsigned long long progress, unsigned long long total, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle the task progress */
}

static void
task_state_cb(service_storage_task_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;/* Handle task states */
&nbsp;&nbsp;&nbsp;&nbsp;switch (state) {
&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_STORAGE_TASK_IN_PROGRESS:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_STORAGE_TASK_COMPLETED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_STORAGE_TASK_CANCELED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_STORAGE_TASK_FAILED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>Create an upload task:</p>
<pre class="prettyprint">
void
plugin_upload_file(service_plugin_h plugin, const char *local_path, const char *storage_path)
{
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_task_h task;

&nbsp;&nbsp;&nbsp;&nbsp;/* Upload a local file to the storage */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_create_upload_task(plugin, local_path, storage_path, &amp;task) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li>
<p>Register the defined callbacks:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Register the task progress change callback */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_set_task_progress_cb(task, task_progress_cb, NULL) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/* Register the task state change callback */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_set_task_state_changed_cb(task, task_state_cb, NULL) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li>
<p>Start the upload task:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_start_task(task) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

</ol>

<h2 id="File_download" name="File_download">Downloading Files</h2>

<p>To download a file from the storage:</p>

<ol>

<li>
<p>Create a download task:</p>
<pre class="prettyprint">
void
plugin_download_file(service_plugin_h plugin, const char *storage_path, const char *local_path)
{
&nbsp;&nbsp;&nbsp;&nbsp;service_storage_task_h task;

&nbsp;&nbsp;&nbsp;&nbsp;/* Download a file from the storage to a local directory */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_create_download_task(plugin, storage_path, local_path, &amp;task) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li>
<p>Register callbacks for monitoring the download task progress and state:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;/* Register the task progress change callback */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_set_task_progress_cb(task, task_progress_cb, NULL) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;/* Register the task state change callback */
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_set_task_state_changed_cb(task, task_state_cb, NULL) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>

<p>The file upload and download processes use the same callback types. You can use the callbacks defined for the file upload, or define separate callbacks, as needed.</p>

</li>

<li>
<p>Start the download task:</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;if (service_storage_start_task(task) != SERVICE_ADAPTOR_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h2 id="File_remove" name="File_remove">Removing Files</h2>

<p>To remove a file from the storage, use the <span style="font-family: Courier New,Courier,monospace">service_storage_remove()</span> function:</p>

<pre class="prettyprint">
/* Handle the results of removing the file */
static void
file_remove_cb(int result, void *user_data)
{
&nbsp;&nbsp;&nbsp;&nbsp;if (result != SERVICE_ADAPTOR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}

/* Remove the file */
void
plugin_remove_file(service_plugin_h plugin, const char *file)
{
&nbsp;&nbsp;&nbsp;&nbsp;int ret = service_storage_remove(plugin, file, file_remove_cb, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret != SERVICE_ADAPTOR_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Error handling */
}
</pre>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
