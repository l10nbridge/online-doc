<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>VPN Connections</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
			<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 3.0 and Higher for Mobile</li>
		</ul>
		<p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#components">VPN Connection Components</a></li>
            <li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#get_param">Getting Interface Parameters</a></li>
            <li><a href="#set_param">Setting Interface Parameters</a></li>
            <li><a href="#config">Configuring the Interface</a></li>
            <li><a href="#block">Blocking and Unblocking Networks</a></li>
            <li><a href="#read">Reading and Writing Data</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__VPN__SERVICE__MODULE.html">VPN Service API for Mobile Native</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>VPN Connections</h1>

<p>A Virtual Private Network (VPN) connects 2 computers securely and privately over the internet. Using the VPN service, you can allow the users of your application to initialize the VPN device, and manage routing, DNS, and firewall features.</p>

<p>This feature is supported in mobile applications only.</p>

<p>The main features of the VPN Service API include:</p>
<ul>
<li>VPN manager 
<p>You can create or initialize the tunnel interface for the VPN device with various functions. The application can use those functions to <a href="#get_param">get various tunnel details</a>, such as the tunnel ID and tunnel name, MTU for the tunnel interface, and connection statistics.</p>
<p>You can also <a href="#set_param">set various details</a>, such as the MTU for the tunnel interface, and the session name.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_tun_s</span> structure contains detailed information about the tunnel interface, such as the ID, name, and MTU. The possible errors are defined with the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__VPN__SERVICE__MODULE.html#ga8d8e9c964218d7aad622115bb51491e8">vpnsvc_error_e</a> enumerator.</p>

<table> 
<caption>Table: Common macros</caption>
<tbody>
<tr>
	<th>Macro</th>
	<th>Description</th>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">_MAX_FILE_PATH_LEN</span></td>
	<td>Maximum file path length</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">_USER_SETTING_DEFAULT_MTU</span></td>
	<td>Default MTU</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">_USER_SETTING_DEFAULT_SESSION</span></td>
	<td>Default session name</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">VPNSVC_IP4_STRING_LEN</span></td>
	<td>IPv4 address string length</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">VPNSVC_TUN_IF_NAME_LEN</span></td>
	<td>Tunnel interface name length</td>
</tr>
<tr>
	<td><span style="font-family: Courier New,Courier,monospace">VPNSVC_SESSION_STRING_LEN</span></td>
	<td>Session name string length</td>
</tr>
</tbody>
</table>
</li>
<li>VPN profile 
<p>You can map the VPN profile and get details about the VPN service using the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__VPN__SERVICE__MODULE.html#gaef3a3f46336ee7e8c43dd16144b22ac5">vpnsvc_h</a> handle.</p>
<p>The VPN profile provides different functions for routing management, DNS management, and firewall management:</p>
<ul>
	<li>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_up()</span> function is used to <a href="#config">set up the tunnel interface</a> by setting the default route and DNS parameters.</li>
	<li>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_block_networks()</span> function is used to <a href="#block">block network traffic</a> by creating a route parameter for allowed VPN and original interface routes.</li>
</ul>
</li>
<li>VPN statistics
<p>The VPN service allows you to <a href="#read">track data transfer information</a>. Use the VPN statistics to gather and reset statistics on network usage, such as the size of the sent or received data, in bytes:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_read()</span> function is used to read the data from tunnel interface in a specified time period.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_write()</span> function is used to write data to a tunnel file descriptor with a specific size.</li>
</ul></li>
</ul>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the VPN service functionality</a>.</p>

<p>The VPN service uses 2 mechanisms for managing access control between the application and service:</p>
<ul>
<li>Privilege: 
<p>The application needs the partner level privilege for accessing the VPN service daemon.</p>
</li>
<li>VPN license:
<p>The VPN configurations, such as DNS, routing, and firewall (iptables), need an admin capability. The VPN service daemon checks the application&#39;s VPN license to verify that the client application has the admin capability.</p>
</li>
</ul>

<h2 id="components">VPN Connection Components</h2> 

<p>A VPN connection includes the following components:</p>
<ul>
<li>VPN server
<p>A computer that accepts VPN connections from VPN clients.</p>
</li>
<li>VPN client
<p>A computer that initiates a VPN connection to a VPN server. A VPN client can be an individual computer or a router.</p>
</li>
<li>Tunnel
<p>The portion of the connection in which your data is encapsulated.</p>
</li>
<li>VPN connection
<p>The portion of the connection in which your data is encrypted. For typical secure VPN connections, the data is encrypted and encapsulated along the same portion of the connection.</p>
</li>
<li>Tunneling protocols
<p>Protocols that are used to manage tunnels and encapsulate private data. Data that is tunneled must also be encrypted to be a VPN connection.</p>
</li>
<li>Tunneled data
<p>Data that is usually sent across a private point-to-point link.</p>
</li>
<li>Transit inter-network
<p>The shared or public network crossed by the encapsulated data. The transit inter-network can be the Internet or a private IP-based intranet.</p>
</li>
</ul>

<h2>Warm-up</h2>

<p>Become familiar with the VPN Service API basics by learning about:</p>

<ul>
	<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the VPN service functionality.</p></li>
	<li><a href="#get_param">Getting Interface Parameters</a>
	<p>Pass the handle and get the required interface parameter details.</p></li>
	<li><a href="#set_param">Setting Interface Parameters</a>
	<p>Update the parameter value, and set the parameter as per the client application.</p></li>
	<li><a href="#config">Configuring the Interface</a>
	<p>Set up the tunnel interface, bring it up, and install specified routes and servers.</p></li>
	<li><a href="#block">Blocking and Unblocking Networks</a>
	<p>Add routing details for blocked and allowed networks, and remove restrictions when needed.</p></li>
	<li><a href="#read">Reading and Writing Data</a>
	<p>Set a timeout interval for reading and writing.</p></li>
</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the VPN service functionality:</p>

<ol>

<li>To use the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__VPN__SERVICE__MODULE.html">VPN Service</a> API, the application has to request permission by adding the following privilege to the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file:
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://developer.samsung.com/tizen/vpnservice&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
</li>
<li>To use the functions and data types of the VPN Service API, include the <span style="font-family: Courier New,Courier,monospace">&lt;vpn_service.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;vpn_service.h&gt;
</pre>
</li>
<li>To be able to use all VPN functions, you must create a handle that contains information about the VPN. At the beginning, create a <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__VPN__SERVICE__MODULE.html#gaef3a3f46336ee7e8c43dd16144b22ac5">vpnsvc_h</a> type variable, which is a <span style="font-family: Courier New,Courier,monospace">void*</span> that stores the VPN handle.
<pre class="prettyprint">
vpnsvc_h handle = NULL;
</pre>
</li>
<li>Create the VPN handle using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_init()</span> function that allows you to obtain the VPN state and data transfer information:
<pre class="prettyprint">
char *name = TEST_VPN_IF_NAME;
int ret = VPNSVC_ERROR_NONE;

ret = vpnsvc_init(name, &amp;handle);

if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_init failed: %d\n&quot;, ret);
</pre>
</li>
<li>When the VPN handle is no longer needed, destroy it using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_deinit()</span> function:
<pre class="prettyprint">
if (handle)
&nbsp;&nbsp;&nbsp;&nbsp;vpnsvc_deinit(handle);

handle = NULL;
</pre>
</li>
</ol>


<h2 id="get_param" name="get_param">Getting Interface Parameters</h2> 

<p>To get the interface parameters after successfully initializing the VPN service:</p>
<ul>
<li>Get the tunnel file descriptor using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_get_tun_fd()</span> function:
<pre class="prettyprint">
int int_value;

if (vpnsvc_get_tun_fd(handle, &amp;int_value) == VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;tun_fd: %d\n&quot;, int_value);
</pre>
</li>
<li>Get the tunnel index using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_get_tun_index()</span> function:
<pre class="prettyprint">
int int_value;

if (vpnsvc_get_tun_index(handle, &amp;int_value) == VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;tun_index: %d\n&quot;, int_value);
</pre>
</li>
<li>Get the tunnel name using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_get_tun_name()</span> function:
<pre class="prettyprint">
char* result_name = NULL;
int ret = VPNSVC_ERROR_NONE;

ret = vpnsvc_get_tun_name(handle, &amp;result_name);
if (ret == VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;tun_name: %s\n&quot;, result_name);
</pre>
</li>
<li>Get the session for the tunnel interface using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_get_session()</span> function:
<pre class="prettyprint">
int ret = VPNSVC_ERROR_NONE;
char *get_session = NULL;

ret = vpnsvc_get_session(handle, &amp;get_session);
printf(&quot;Session Name = %s\n&quot;, get_session);
printf(&quot;vpnsvc_set_session succeeded!\n&quot;);
</pre>
</li>
</ul>

<h2 id="set_param" name="set_param">Setting Interface Parameters</h2>

<p>To set the interface parameters:</p> 
<ul>
<li>Set the MTU configuration for the tunnel interface using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_set_mtu()</span> function. The MTU value is used when the user brings up the VPN interface using the VPN UP API.
<pre class="prettyprint">
int ret;

ret = vpnsvc_set_mtu(handle, 9000);
if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_set_mtu failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_set_mtu succeeded!\n&quot;);
</pre>
</li>
<li>Set the session name for the tunnel interface using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_set_session()</span> function:
<pre class="prettyprint">
char *set_session = &quot;vpnsvc_test VPN Session&quot;;
int ret;

ret = vpnsvc_set_session(handle, set_session);
if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_set_session failed!\n&quot;);
</pre>
</li>
</ul>

<h2 id="config" name="config">Configuring the Interface</h2> 

<p>To configure the interface:</p>
<ol> 
<li>Protect the underlying VPN traffic to be routed to the VPN itself by binding the socket to the underlying network interface, such as <span style="font-family: Courier New,Courier,monospace">wlan0</span>:
<pre class="prettyprint">
int sock;
int ret;

ret = vpnsvc_protect(handle, sock, &quot;wlan0&quot;);
if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_protect failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_protect succeeded!\n&quot;);
</pre>
</li>
<li>Set up the tunnel interface. 
<p>The <span style="font-family: Courier New,Courier,monospace">vpnsvc_up()</span> function configures the VPN tunnel interface based on the configured parameters passed by the client application.</p>
<p>To change the MTU parameter of the configured interface, the client application must invoke the <span style="font-family: Courier New,Courier,monospace">vpnsvc_set_mtu()</span> function that is used to set the MTU value. The client application must invoke the function before the <span style="font-family: Courier New,Courier,monospace">vpnsvc_up()</span> function call.</p>
<pre class="prettyprint">
int ret;
char local[VPNSVC_IP4_STRING_LEN] = {&#39;\0&#39;,};
char remote[VPNSVC_IP4_STRING_LEN] = {&#39;\0&#39;,};
char *routes[2];
int prefix[2];
int nr_routes = 2;
const char *dns_server[2];
int nr_dns = 2;
char dns_suffix[100] = &quot;tizen.org&quot;;

if (!handle) {
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;invalid handle\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}

strncpy(local, &quot;192.168.0.82&quot;, VPNSVC_IP4_STRING_LEN);
strncpy(remote, &quot;192.168.0.1&quot;, VPNSVC_IP4_STRING_LEN);

routes[0] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);
routes[1] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);

memset(routes[0], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);
memset(routes[1], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);

strncpy(routes[0], &quot;192.168.0.10&quot;, VPNSVC_IP4_STRING_LEN);
prefix[0] = 32;

strncpy(routes[1], &quot;192.168.0.11&quot;, VPNSVC_IP4_STRING_LEN);
prefix[1] = 32;

char *dns1 = &quot;1.1.1.1&quot;;
char *dns2 = &quot;2.2.2.2&quot;;

dns_server[0] = dns1;
dns_server[1] = dns2;

ret = vpnsvc_up(handle, local, remote, routes, prefix, nr_routes,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dns_server, nr_dns, dns_suffix);

if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_up failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_up succeeded!\n&quot;);
</pre>
</li>
<li>Set down the tunnel interface, and remove it using the <span style="font-family: Courier New,Courier,monospace">vpnsvc_down()</span> function:
<pre class="prettyprint">
int ret;

if (!handle) {
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;invalid handle\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}

ret = vpnsvc_down(handle);

if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_down failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_down succeeded!\n&quot;);
</pre>
</li>
</ol>

<h2 id="block" name="block">Blocking and Unblocking Networks</h2> 

<p>To block or unblock the network:</p>
<ul>
<li>Block all traffic, except specified allowed networks, and send the specified UP addresses to a specified interface:
<pre class="prettyprint">
char* block_nets[2];
int block_prefix[2];
int block_nr_nets = 2;
char* allow_nets[2];
int allow_prefix[2];
int allow_nr_nets = 2;
int ret;

if (!handle) {
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;invalid handle\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}

block_nets[0] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);
block_nets[1] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);
memset(block_nets[0], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);
memset(block_nets[1], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);
strncpy(block_nets[0], &quot;125.209.222.141&quot;, VPNSVC_IP4_STRING_LEN);
block_prefix[0] = 32;
strncpy(block_nets[1], &quot;180.70.134.19&quot;, VPNSVC_IP4_STRING_LEN);
block_prefix[1] = 32;

allow_nets[0] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);
allow_nets[1] = malloc(sizeof(char) * VPNSVC_IP4_STRING_LEN);
memset(allow_nets[0], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);
memset(allow_nets[1], 0, sizeof(char) * VPNSVC_IP4_STRING_LEN);
strncpy(allow_nets[0], &quot;216.58.221.142&quot;, VPNSVC_IP4_STRING_LEN);
allow_prefix[0] = 32;
strncpy(allow_nets[1], &quot;206.190.36.45&quot;, VPNSVC_IP4_STRING_LEN);
allow_prefix[1] = 32;

ret = vpnsvc_block_networks(handle, block_nets, block_prefix, block_nr_nets,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;allow_nets, allow_prefix, allow_nr_nets);

if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_block_networks failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_block_networks succeeded!\n&quot;);
</pre>
</li>
<li>Remove any restrictions from the VPN network:
<pre class="prettyprint">
int ret;

if (!handle) {
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;invalid handle\n&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;return -1;
}

ret = vpnsvc_unblock_networks(handle);

if (ret != VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_unblock_networks failed!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_unblock_networks succeeded!\n&quot;);
</pre>
</li>
</ul>

<h2 id="read" name="read">Reading and Writing Data</h2>

<p>To read or write data:</p>
<ul>
<li>Check whether there is data to read within a specified time period:
<pre class="prettyprint">
int ret;
int timeout_ms = 20;

ret = vpnsvc_read(handle, timeout_ms);

if (ret == VPNSVC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_read: Data available to read!\n&quot;);
</pre>
</li>
<li>Write data directly to the underlying socket using a system call for performance. The number of bytes written is returned on success (the same as the system write call).
<pre class="prettyprint">
int ret;
char *message = &quot;test message&quot;;

ret = vpnsvc_write(handle, message, strlen(message));

if (ret &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_write: failed!\n&quot;);
else if (ret == 0)
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_write: Nothing written!\n&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;vpnsvc_read: %d bytes written!\n&quot;, ret);
</pre>
</li>
</ul>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>