<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Smart Card</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile native" src="../../images/mobile_s_n.png"/> <img alt="Wearable native" src="../../images/wearable_s_n.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#service">Using the SE Service</a></li>
			<li><a href="#reader">Managing the Reader</a></li>
			<li><a href="#session">Managing Sessions</a></li>
			<li><a href="#channel">Managing Channels</a></li>
			<li><a href="#send">Sending a Transmission</a></li>			
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">Smartcard API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">Smartcard API for Wearable Native</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Smart Card</h1>

<p>Tizen enables you to use smart card functionalities, such as accessing a secure element (SE). Before using the Smartcard API, make sure you have a secure element on the device. The smart card service allow you to open a session on an SE, open a channel to the applet in the SE, send a command to the channel, and finally receive a response to the command.</p>

<p>The main components of the Smartcard API include:</p>

<ul>
    <li>SE service
		<p>The SE Service API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__SE__SERVICE__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__SE__SERVICE__MODULE.html">wearable</a> applications) allows you to <a href="#service">initialize and deinitialize the smart card features</a>, and get the available readers. The SE service functions as a connector to the SE framework system.</p>
    </li>
    <li>Reader
<p>The Reader API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__READER__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__READER__MODULE.html">wearable</a> applications) allows you to access the SE connected with the selected reader. You can <a href="#reader">get the reader name and open and close sessions</a>.</p>		
    </li>
    <li>Session
	<p>A session is an open connection between an application on the device and a SE. The Session API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__SESSION__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__SESSION__MODULE.html">wearable</a> applications) allows you to <a href="#session">open and close basic and logical channels</a>, and get ATR (answer to reset).</p>
    </li>
    <li>Channel
	<p>A channel is an open connection between an application on the device and an applet on the SE. The Channel API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__CHANNEL__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__CHANNEL__MODULE.html">wearable</a> applications) allows you to <a href="#channel">close channels and transmit application protocol data units</a> (APDU).</p>
    </li>
</ul>

<p>All of the above are used when you <a href="#send">send a transmission</a>.</p>

<p>Before you start, remember to <a href="#prerequisites">prepare your application to use the smart card functionality</a>.</p>

<p>The following figure illustrates the smart card service architecture in Tizen. The smart card service sends and receives data through the terminal of each SE.</p>
<p class="figure">Figure: Smart card service architecture</p> 
<p align="center"> <img alt="Smart card service architecture" src="../../images/smartcard_architecture.png" /> </p>  

<p>The Smartcard API is a reference implementation of the SIMalliance Open Mobile 3.0 API specification that enables Tizen applications to communicate with secure elements. For more information, see the <a href="http://simalliance.org/" target="_blank">SimAlliance</a>. The Tizen implementation differs from the original as follows:</p>

<ul><li>Only the transport layer is provided. There is no service layer support in Tizen.</li>
<li>The &quot;get version&quot; function does not exist. In Tizen, version management is not performed through a function.</li>
<li>Allocation style differs dramatically. 
The Open Mobile API can facilitate the memory management by calling the API twice (for an example, see section 6.3.1, Usage pattern, in the SIMalliance Open Mobile 3.0 API specification). However, Tizen Smartcard API does not follow this allocation style.</li>
<li>For the <span style="font-family: Courier New,Courier,monospace;">SE Service</span> object management, Tizen provides functions for initialization and deinitialization.</li></ul>

<table class="note">
	<tbody>
	<tr>
	<th class="note">Note</th>
	</tr>
	<tr>
	<td class="note">In some Tizen devices, after a specified time, the screen is automatically switched off and the CPU goes to the resting state. If this occurs during communication with the SE using the Smartcard API, the API may not function normally.
	<p>To avoid the screen switching off and the CPU going to the resting state, use the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__DEVICE__MODULE.html">Device</a> API to lock the device CPU (not LDC):</p>

<pre class="prettyprint">
#include &lt;nfc.h&gt;
#include &lt;device/power.h&gt;

device_power_request_lock(POWER_LOCK_CPU, 300000);
/* Input your Smartcard API code */
device_power_release_lock(POWER_LOCK_CPU);
</pre>
			</td>
		</tr>
	</tbody>
</table>

<h2>Warm-up</h2>
<p>Become familiar with the Smartcard API basics by learning about:</p>
	<ul>
		<li><a href="#prerequisites">Prerequisites</a>
		<p>Prepare your application to use the smart card functionality.</p></li>
		<li><a href="#service">Using the SE Service</a>
		<p>Initialize the SE service and retrieve available readers.</p></li>
		<li><a href="#reader">Managing the Reader</a>
		<p>Retrieve the reader name, check whether the SE is present in the reader, open sessions, and close all sessions.</p></li>
		<li><a href="#session">Managing Sessions</a>
		<p>Retrieve session information, open basic and logical channels, and close channels and the session.</p></li>
		<li><a href="#channel">Managing Channels</a>
		<p>Retrieve channel information, select the next applet, transmit APDU commands, and close the channel.</p></li>
	</ul>
<h2>Follow-up</h2>	
<p>Once we have learned the basics of the Smartcard API, we can now move on to more advanced tasks, including:</p>
	<ul>
		<li><a href="#send">Sending a Transmission</a>
		<p>Retrieve a reader, open a session and a logical channel, and transmit an APDU command over the channel.</p></li>
	</ul>

<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the smart card functionality:</p>
<ol>
<li>
<p>To use the Smartcard API (in <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__SMARTCARD__MODULE.html">wearable</a> applications), the application has to request permission by adding the following privilege to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file:</p>
<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/secureelement&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
</li>
<li>
<p>To use the functions and data types of the Smartcard API, include the <span style="font-family: Courier New,Courier,monospace">&lt;smartcard.h&gt;</span> header file in your application:</p>
<pre class="prettyprint">
#include &lt;smartcard.h&gt;
</pre>
</li>
</ol>

 <h2 id="service" name="service">Using the SE Service</h2>

<p>To use the SE service:</p>
<ol>

<li>
<p>Initialize the smart card service for use:</p>
<pre class="prettyprint">
int ret;
ret = smartcard_initialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard initialize successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard initialize failed&quot;);
</pre>
<p>When the service is no longer needed, deinitialize it:</p>
<pre class="prettyprint">
ret = smartcard_deinitialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard deinitialize successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard deinitialize failed&quot;);
</pre>
</li>

<li><p>Retrieve the available readers with the <span style="font-family: Courier New,Courier,monospace;">smartcard_get_readers()</span> function:</p>
<pre class="prettyprint">
int pLength;
int *phReaders = NULL;

ret = smartcard_get_readers(&amp;phReaders, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_get_readers successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;readers length: %d&quot;, pLength);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_get_readers failed: %d&quot;, ret);
}

if (phReaders != NULL)
&nbsp;&nbsp;&nbsp;&nbsp;free(phReaders);
</pre></li>
</ol>

 <h2 id="reader" name="reader">Managing the Reader</h2>
			
<p>To manage a reader:</p>			

<ol><li>
<p>Retrieve the name of the reader with the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_get_name()</span> function:</p>
<pre class="prettyprint">
int ret;
int reader = phReaders[0]; /* Get the reader using smartcard_get_readers() */
char * pReader = NULL;

ret = smartcard_reader_get_name(reader, &amp;pReader);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_get_name successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;reader name: %s&quot;, pReader);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_get_name failed: %d&quot;, ret);
}
</pre>
</li>

<li><p>Before establishing a session, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_is_secure_element_present()</span> function to make sure that the SE is present in the reader:</p>

<pre class="prettyprint">
bool is_present = false;

ret = smartcard_reader_is_secure_element_present(reader, &amp;is_present);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_is_secure_element_present successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;reader secure element present: %d&quot;, is_present);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_is_secure_element_present failed: %d&quot;, ret);
}
</pre>
</li>


<li><p>Open  a session to connect to the SE in the reader using the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_open_session()</span> function.</p>
<p>When you no longer need the reader, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_reader_close_sessions()</span> function to close all sessions opened on the specific reader.</p>
<pre class="prettyprint">
int session;
ret = smartcard_reader_open_session(reader, &amp;session);

if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_reader_close_sessions(reader);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_close_sessions successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_reader_close_sessions failed: %d&quot;, ret);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;open session failed: %d&quot;, ret);
}
</pre></li>
</ol>


 <h2 id="session" name="session">Managing Sessions</h2>

<p>You can manage a session using the session instance that you have created when opening the session with a reader. The session instance is the first parameter in all session-related APIs.</p> 
 
<p>To manage sessions:</p>

<ul><li>Retrieve the reader that provides the session:
<pre class="prettyprint">
int ret;
int reader;

ret = smartcard_session_get_reader(session, &amp;reader);
ret = smartcard_reader_get_name(reader, &amp;pReader);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_get_reader successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;reader name: %s&quot;, pReader);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_get_reader failed&quot;);
}
</pre></li>
<li>Retrieve the answer to reset (ATR) of the SE:
<pre class="prettyprint">
int i;
int ret;
unsigned char *pAtr;
int pLength;

ret = smartcard_session_get_atr(session, &amp;pAtr, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_get_atr successful: %d&quot;, pLength);
&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%x &quot;, (int)pAtr[i]);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_get_atr failed&quot;);
}
</pre></li>
<li>Open a basic or logical channel.
<p>A basic channel is defined in the ISO/IEC 7816-4 specification (the one that has number 0). To open a logical channel with the SE, you must select the applet represented by the given Application ID (AID).</p>
<pre class="prettyprint">
int ret;
unsigned char aid[] = {0x00, 0x01, 0x02, 0x03};
int channel;

/* Open basic channel */
ret = smartcard_session_open_basic_channel(session, aid, 4, 0x00, &amp;channel);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_open_basic_channel successful: %d&quot;, channel);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_open_basic_channel failed&quot;);

/* Open logical channel */
ret = smartcard_session_open_logical_channel(session, aid, 12, 0x04, &amp;channel);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_open_logical_channel successful: %d&quot;, (channel);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_open_logical_channel failed: %d&quot;, ret);
</pre>
</li>
<li>Close all channels opened for a specific session:

<pre class="prettyprint">
int ret;
ret = smartcard_session_close_channels(session);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_close_channels successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_close_channels failed&quot;);
</pre>
</li>
<li>Close a session and check that it is truly closed:

<pre class="prettyprint">
int ret;
bool is_closed;

ret = smartcard_session_close(session);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_close successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_close failed&quot;);

ret = smartcard_session_is_closed(session, &amp;is_closed);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_closed == true)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_is_closed successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_session_is_closed failed&quot;);
</pre>
</li></ul>

 <h2 id="channel" name="channel">Managing Channels</h2>

<p>You can manage a channel using the channel instance that you have created when opening the channel with a session. The channel instance is the first parameter in all channel-related APIs.</p>  
 
<p>To manage channels:</p>

<ul>
<li>Retrieve the session that has opened the specific channel:
<pre class="prettyprint">
int ret;
int session_handle;

ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_get_session(channel, &amp;session_handle);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_get_session successful: %d&quot;, session_handle);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_get_session failed&quot;);
}
</pre></li>

<li>Check whether a specific channel is a basic or logical channel:
<pre class="prettyprint">
int ret;
bool is_basic;

ret = smartcard_channel_is_basic_channel(channel, &amp;is_basic);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_basic == false)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_is_basic_channel successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_is_basic_channel failed&quot;);
</pre></li>

<li>Select the next applet on the specific channel that matches to the partial Application ID (AID):
<pre class="prettyprint">
ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;bool is_next = true;
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_select_next(channel, &amp;is_next);
&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_next == false)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_select_next successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_select_next failed&quot;);
}
</pre>
<p>To get a response for the selection command, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_channel_get_select_response()</span> function:</p>
<pre class="prettyprint">
int i;
int ret;
unsigned char* pSelectResponse;
int pLength;

ret = smartcard_channel_get_select_response(channel, &amp;pSelectResponse, &amp;pLength);

if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_get_select_response successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_print(&quot;%x &quot;, (int)pSelectResponse[i]);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_get_select_response failed&quot;);
}
</pre>
</li>

<li>Check whether a specific channel is closed:

<pre class="prettyprint">
int ret;
bool is_close;

ret = smartcard_channel_close(channel);
ret = smartcard_channel_is_closed(channel, &amp;is_close);

if (ret == SMARTCARD_ERROR_NONE &amp;&amp; is_close == true)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_is_closed successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_is_closed failed&quot;);
</pre>
</li>
<li>Close the channel opened for a specific SE:

<pre class="prettyprint">
int ret;

ret = smartcard_channel_close(channel);

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_close successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_close failed: %d&quot;, ret);
</pre>
</li>
<li>Transmit an APDU command (as per ISO/IEC 7816-4) to the SE:

<pre class="prettyprint">
int i;
int ret;
int resp_len;
unsigned char *response = NULL;
unsigned char command[] = {0x00, 0x01, 0x02, 0x03};

ret = smartcard_channel_transmit(channel, command, 4, &amp;response, &amp;resp_len);

if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;response is &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; resp_len; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%x &quot;, (int)response[i]);
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;\n&quot;);
} else {
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit failed&quot;);
}
</pre>
<p>To get a response for the transmission, use the <span style="font-family: Courier New,Courier,monospace;">smartcard_channel_transmit_retrieve_response()</span> function:</p>
<pre class="prettyprint">
int i;
unsigned char * ptransmitResponse;

ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit(channel, command, 11, &amp;response, &amp;resp_len);
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit_retrieve_response(channel, &amp;ptransmitResponse, &amp;pLength);

&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit_get_response successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;response is &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; pLength; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%x &quot;, (int)ptransmitResponse[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit_get_response failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li></ul>

<h2 id="send" name="send">Sending a Transmission</h2>

<p>This use case covers the entire work flow of sending an APDU transmission from getting a reader to closing the session afterwards.</p>

<p>To send a transmission:</p>

<ol><li>Define the required variables and initialize the smart card service for use:
<pre class="prettyprint">
int i = 0;
int pLength;
int *phReaders = NULL;
int session;
int channel;
unsigned char aid[] = {0xA0, 0x00, 0x00, 0x00, 0x63, 0x50, 0x4B, 0x43, 0x53, 0x2D, 0x31, 0x35};
unsigned char command[] = {0x00, 0x28, 0x00, 0x00};
unsigned char *response = NULL;
int resp_len = 50;

ret = smartcard_initialize();
if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard initialize successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard initialize failed&quot;);
</pre>
</li>

<li>Get the available readers:
<pre class="prettyprint">
ret = smartcard_get_readers(&amp;phReaders, &amp;pLength);
</pre>
</li>

<li>Open a session:
<pre class="prettyprint">
if (ret == SMARTCARD_ERROR_NONE &amp;&amp; pLength != 0) {
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_reader_open_session(phReaders[0], &amp;session);
</pre>
</li>

<li>Open a logical channel:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE &amp;&amp; session != 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_session_open_logical_channel(session, aid, 12, 0x00, &amp;channel);
</pre>
</li>

<li>Transmit the command:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_channel_transmit(channel, command, 4, &amp;response, &amp;resp_len);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret == SMARTCARD_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit successful&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;response is &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; resp_len; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;%x &quot;, (int)response[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard_channel_transmit failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>
<li>Close the session:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;ret = smartcard_session_close(session);
}
</pre>
</li>
<li>Deinitialize the service:
<pre class="prettyprint">
ret = smartcard_deinitialize();

if (ret == SMARTCARD_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard deinitialize successful&quot;);
else
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;smartcard deinitialize failed&quot;);
</pre>
</li>

</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>