<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>API Comparison</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#content">Content</a></li>
			<li><a href="#locales">Locales</a></li>
			<li><a href="#locations">Locations</a></li>
			<li><a href="#media">Media</a></li>
			<li><a href="#messaging">Messaging</a></li>
			<li><a href="#net">Net</a></li>
			<li><a href="#security">Security</a></li>
			<li><a href="#shell">Shell</a></li>
			<li><a href="#social">Social</a></li>
			<li><a href="#system">System</a></li>
			<li><a href="#telephony">Telephony</a></li>
			<li><a href="#text">Text</a></li>
			<li><a href="#uix">UIX</a></li>
			<li><a href="#web">Web</a></li>
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>API Comparison</h1> 

<p>The following table shows where to find information related to the 2.2.1 and 2.3 version APIs.</p>
<table>
<caption>Table: API Comparison</caption>
<tbody>
<tr>
 <th>API</th>
 <th>Version 2.2.1</th>
 <th>Version 2.3</th>
</tr>
<tr>
 <td>Content: Managing Content</td>
 <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
 <ul>
 <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/content/content_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Content: Managing Content</strong></li>
 <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/content_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Content Tutorial</strong></li></ul></td>
 <td><a href="../../../../org.tizen.tutorials/html/native/content/content_tutorials_n.htm">Content Tutorials</a></td>
 </tr>
 <tr>
  <td>Locales: Internationalization and Localization</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/locales/locales_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Locales: Internationalization and Localization</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/locales_tutorial/locales_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Locales Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm">i18n Tutorial</a></td>
 </tr>
  <tr>
  <td>Locations: Using Location Information and Services</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/locations/locations_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Locations: Using Location Information and Services</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/locations_tutorial/locations_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Locations Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/location/location_tutorials_n.htm">Location Tutorials</a></td>
 </tr>
  <tr>
  <td>Media: Handling Audio, Video, Camera, and Images</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/media/media_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Media: Handling Audio, Video, Camera, and Images</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/media_tutorial/media_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Media Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/multimedia/multimedia_tutorials_n.htm">Multimedia Tutorials</a></td>
 </tr>
  <tr>
  <td>Messaging: SMS, MMS, Email, and Push</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/messaging/messaging.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Messaging: SMS, MMS, Email, and Push</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/messaging_tutorial/messaging_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Messaging Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/messaging/messaging_tutorials_n.htm">Messaging Tutorials</a></td>
 </tr>
  <tr>
  <td>Net: Managing Network Connections and Communication</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/net/net_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Net: Managing Network Connections and Communication</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/net_tutorial/net_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Net Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/network/network_tutorials_n.htm">Network Tutorials</a></td>
 </tr>
  <tr>
  <td>Security: Handling Certificates and Cryptographic Primitives</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/security/security_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Security: Handling Certificates and Cryptographic Primitives</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/security_tutorial/security_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Security Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/security/security_tutorials_n.htm">Security Tutorials</a></td>
 </tr>
  <tr>
  <td>Shell: Managing Tizen Shell</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/shell/shell_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Shell: Managing Tizen Shell</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/shell_tutorial/shell_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Shell Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/app_framework/app_framework_tutorials_n.htm">Application Framework Tutorials</a></td>
 </tr>
  <tr>
  <td>Social: Managing Personal Data</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/social/social_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Social: Managing Personal Data</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/social_tutorial/social_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Social Tutorial</strong></li></ul></td>
 <td><a href="../../../../org.tizen.tutorials/html/native/social/social_tutorials_n.htm">Social Tutorials</a></td>
 </tr> 
 <tr>
  <td>System: Getting System Information and Using Alarms</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/system/system_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; System: Getting System Information and Using Alarms</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/system_tutorial/system_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; System Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/system/system_tutorials_n.htm">System Tutorials</a></td>
 </tr>
  <tr>
  <td>Telephony: Handling Phone Call, SIM card, and Network Information</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/telephony/telephony.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Telephony: Handling Phone Call, SIM card, and Network Information</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/telephony_tutorial/telephony_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Telephony Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/telephony/telephony_tutorials_n.htm">Telephony Tutorials</a></td>
 </tr>
  <tr>
  <td>Text: Encoding and Decoding Characters</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/text/text.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Text: Encoding and Decoding Characters</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/text_tutorial/text_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Text Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm">i18n Tutorial</a></td>
 </tr>
  <tr>
  <td>UI: Creating the Application UI</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/ui/ui_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; UI: Creating the Application UI</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/ui_tutorial/ui_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; UI Tutorial</strong></li></ul></td>
  <td><ul><li><a href="../../../../org.tizen.tutorials/html/native/graphics/graphics_tutorials_n.htm">Graphics Tutorials</a></li>
  <li><a href="../../../../org.tizen.tutorials/html/native/ui/ui_tutorials_n.htm">UI Tutorials</a></li></ul></td>
 </tr>
  <tr>
  <td>Uix: Interaction for Advanced UX</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/uix/uix_namespace.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Uix: Interaction for Advanced UX</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/uix_tutorial/uix_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Uix Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/uix/uix_tutorials_n.htm">UIX Tutorials</a></td>
 </tr>
  <tr>
  <td>Web: Managing Web Pages and Web Content</td>
  <td><a href="https://developer.tizen.org/documentation/dev-guide/2.2.1" target="_blank">Documentation:</a>
  <ul>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/guide/web/web_browsers_and_web_content.htm" target="_blank">Guide</a>: <strong>Tizen Native App Programming &gt; Programming Guide &gt; Web: Managing Web Pages and Web Content</strong></li>
  <li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/web_tutorial/web_tutorial.htm" target="_blank">Tutorial</a>: <strong>Tizen Native App Programming &gt; Tutorials &gt; Web Tutorial</strong></li></ul></td>
  <td><a href="../../../../org.tizen.tutorials/html/native/web/web_tutorials_n.htm">Web Tutorials</a></td>
 </tr>
 </tbody></table>

<h2 id="content" name="content">Content</h2>
<p>The Content API has the same functionality as earlier, providing features to manage the local device content. However, the API model has changed.</p>

<h3 id="create" name="create">Creating Content</h3>
<p>The process of content instance creation in the 2.2.1 version is presented in the 2.2.1 Content Tutorial. According to that tutorial, the content can be created in the following ways:</p>
<ul>
	<li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/creating_device_content_filepath.htm" target="_blank">Using a File Path</a></li>
	<li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/creating_device_content_filepath_pointer.htm" target="_blank">Using a File Path with Content Information</a></li>
	<li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/creating_device_content_bytebuffer.htm" target="_blank">Using a ByteBuffer</a></li>
	<li><a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/creating_device_content_bytebuffer_pointer.htm" target="_blank">Using a ByteBuffer with Content Information</a></li>
</ul>
<p>In version 2.3, to create a content instance, insert the media file into the media database. To do this, you can use 2 different functions:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace;">media_info_insert_to_db()</span> takes the path to the file as an input parameter and returns the <span style="font-family: Courier New,Courier,monospace;">media_info_h</span> handle as the second output parameter.</li>
<li><span style="font-family: Courier New,Courier,monospace;">media_content_scan_file()</span> scans the database for the file. If the file is not found, it is added to the database.</li></ul>

<p>Use the <a href="../../../../org.tizen.tutorials/html/native/content/media_content_tutorial_n.htm#insert">Inserting Media in the Database</a> instructions in the 2.3 Media Information Tutorial:</p>
<pre class="prettyprint">
media_info_h media_file = NULL;

media_content_connect(); // Required to establish the connection with the Content Service

media_info_insert_to_db(your_media_file_path, &amp;media_file);

// OR

media_content_scan_file(your_media_file_path);
</pre>
<p>Note that the <span style="font-family: Courier New,Courier,monospace;">media_content_scan_file()</span> function does not return the <span style="font-family: Courier New,Courier,monospace;">media_info_h</span> handle. To obtain it, perform a search on the database.</p>

<h3 id="update" name="update">Updating Content</h3>

<p>You can <a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/updating_device_content.htm" target="_blank">update the content</a> in 2 different ways in the 2.3 API model:</p>
<ul>
	<li>The <span style="font-family: Courier New,Courier,monospace;">media_content_scan_file()</span> function updates the media file information if the file is already stored in the database. Otherwise, it inserts the information to the database or, when the file does not exist in the system anymore, it removes the information about it from the database.</li>
	<li>To update content information, search through the database for the media information that you want to change. After retrieving the handle to the required media information, change the information by calling the <span style="font-family: Courier New,Courier,monospace;">media_info_set_*(&lt;name of the property to be changed&gt;)</span> function. When the updating is finished, call the <span style="font-family: Courier New,Courier,monospace;">media_info_update_to_db(</span>) function to apply the update to the database:
<pre class="prettyprint">
filter_h filter = NULL; // Handle for the filter used for searching

media_filter_create(&amp;filter); // Creation of the filter

media_filter_set_condition(filter, ..., ...); // Setting the condition to the filter

media_info_foreach_media_from_db(filter, gallery_media_item_cb, NULL);
</pre>
	<p>The <span style="font-family: Courier New,Courier,monospace;">gallery_media_item_cb()</span> callback is called for each media info in the media database that match the given filter conditions. Inside the callback, edit the obtained media info and update the database with the following code:</p>
<pre class="prettyprint">
bool gallery_media_item_cb(media_info_h media, void *user_data)
{
&nbsp;&nbsp;&nbsp;media_info_set_longitude(media, ...);
&nbsp;&nbsp;&nbsp;media_info_set_latitude(media, ...);
&nbsp;&nbsp;&nbsp;media_info_set_favorite(media, ...);

&nbsp;&nbsp;&nbsp;media_info_update_to_db(media);
}
</pre>
	</li>
</ul>

<h3 id="remove" name="remove">Removing Content</h3>
<p>To remove content information in the 2.2.1 version, see the <a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/deleting_device_content.htm" target="_blank">Deleting Content</a> section of the Content Tutorial. Now, the <span style="font-family: Courier New,Courier,monospace">media_info_delete_from_db()</span> function performs this action. It takes the media ID property as its parameter. To obtain the media ID for the given media information, use the <span style="font-family: Courier New,Courier,monospace">media_info_get_media_id()</span> function:</p>
<pre class="prettyprint">
char *media_id;

media_info_get_media_id(media, &amp;media_id);  // Getting the media ID of the given media record
media_info_delete_from_db(media_id); // Removing the media from the Content database
</pre>

<h3 id="track" name="track">Tracking Content Changes</h3>
<p>The <a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/content_tutorial/retrieve_db_notification.htm" target="_blank">Retrieving Database Notifications</a> use case from the 2.2.1 version is fully covered by the <a href="../../../../org.tizen.tutorials/html/native/content/media_content_tutorial_n.htm#update">Receiving Update Notifications</a> use case in the 2.3 Media Content Tutorial. The main difference is that instead of setting a listener with the <span style="font-family: Courier New,Courier,monospace">AddContentUpdateEventListener</span> interface to listen for database updates, the <span style="font-family: Courier New,Courier,monospace">media_content_set_db_updated_cb()</span> function must be used to set the callback that is called when the data in the database changes:</p>
<pre class="prettyprint">
media_content_set_db_updated_cb(_database_updated_cb, NULL);

_database_updated_cb(media_content_error_e error, int pid, media_content_db_update_item_type_e update_item, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;media_content_db_update_type_e update_type, media_content_type_e media_type, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *uuid, char *path, char *mime_type, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (MEDIA_CONTENT_ERROR_NONE == error) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Database was successfully updated
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(path) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;path : %s&quot;, path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(uuid) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;uuid : %s&quot;, uuid);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(mime_type) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;mime_type : %s&quot;, mime_type);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3 id="search" name="search">Searching Content</h3>

<p>The Content Search section of the Content tutorial for the 2.2.1 version describes how to search for content. The Searching Content and Retrieving an Audio Genre List use cases from the 2.2.1 tutorial are covered by the <a href="../../../../org.tizen.tutorials/html/native/content/media_content_tutorial_n.htm">Media Content Tutorial</a> in the new 2.3 tutorial. This section describes how to search through the content database using different filters. With the old API, you called the <span style="font-family: Courier New,Courier,monospace">SearchN()</span> function with some filtering parameters. Now, you create and set the filtering conditions to the filter instance, and then use this filter as a parameter of the <span style="font-family: Courier New,Courier,monospace">media_info_foreach_media_from_db()</span> function to search for matching content:</p>
<pre class="prettyprint">
#define BUFLEN 200

filter_h filter = NULL;
char buf[BUFLEN] = { &#39;\0&#39; };

media_filter_create(&amp;filter);

snprintf(buf, BUFLEN, &quot;%s = &#39;Samsung&#39;&quot;, MEDIA_ARTIST);  // Search for albums with the artist name &quot;Samsung&quot;
media_filter_set_condition(filter, buf, MEDIA_CONTENT_COLLATE_NOCASE); // Set the case insensitive condition
// Set the order of results by the artist name, ascending, case sensitive
media_filter_set_order(filter, MEDIA_CONTENT_ORDER_ASC, MEDIA_ARTIST, MEDIA_CONTENT_COLLATE_DEFAULT); 

media_info_foreach_media_from_db(filter, media_cb, NULL);
</pre>
<h3 id="download" name="download">Downloading Content</h3>

<p>The Downloading the Content section is named the <a href="../../../../org.tizen.tutorials/html/native/content/download_tutorial_n.htm">Download Tutorial</a> for version 2.3. The difference between them is that there is no Download Manager anymore. All download operations are based on the download ID (in the 2.2.1 version the <span style="font-family: Courier New,Courier,monospace">requestId</span>). This ID is obtained by using the <span style="font-family: Courier New,Courier,monospace">download_create()</span> function. Instead of the <span style="font-family: Courier New,Courier,monospace">SetDownloadListener()</span> function, use the <span style="font-family: Courier New,Courier,monospace">download_set_state_changed_cb()</span> function to invoke the callback function when the download status changes. The <span style="font-family: Courier New,Courier,monospace">download_set_url()</span> function replaces the 2.2.1 <span style="font-family: Courier New,Courier,monospace">DownloadRequest</span> constructor. To start the download, call the <span style="font-family: Courier New,Courier,monospace">download_start()</span> function the same way as <span style="font-family: Courier New,Courier,monospace">Start()</span> in the 2.2.1 API. For more information, see the content of these tutorials.</p>
<pre class="prettyprint">
int download_id;

download_create(&amp;download_id);
download_set_state_changed_cb(download_id, _state_changed_cb, NULL);
download_set_url(download_id, &quot;http://tizen.org&quot;);
download_start(download_id);

_state_changed_cb(int download_id, download_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;// The state of the downloading process can be checked here. 
}
</pre>

<h3 id="playlists" name="playlists">Managing Playlists</h3>

<p>The last section of the 2.2.1 Content Tutorial is about playlist management. A matching tutorial in the 2.3 version is the <a href="../../../../org.tizen.tutorials/html/native/content/media_content_tutorial_n.htm">Media Content Tutorial</a>. It describes managing playlists in detail. In the 2.2.1 API, the playlist was created with the <span style="font-family: Courier New,Courier,monospace">Construct()</span> function as a new independent instance of a playlist. In the 2.3 model, the playlist is created as an item of the media playlist database using the <span style="font-family: Courier New,Courier,monospace">media_playlist_insert_to_db()</span> function:</p>
<pre class="prettyprint">
media_playlist_h playlist = NULL;

media_playlist_insert_to_db(&quot;Put your playlist name here&quot;, &amp;playlist);
</pre>

<p>To manage the playlists:</p>

<ul><li><p>To add the media item to the playlist, the <span style="font-family: Courier New,Courier,monospace">media_id</span> is needed, so the media must already be placed in the media database. When the <span style="font-family: Courier New,Courier,monospace">media_id</span> is available, use the <span style="font-family: Courier New,Courier,monospace">media_playlist_add_media()</span> function to attach the media to the playlist:</p>
<pre class="prettyprint">
media_playlist_add_media(playlist, media_id);
</pre></li>
<li><p>To retrieve the playlist from the database, use one of the following ways:</p>
<ul><li>Use the <span style="font-family: Courier New,Courier,monospace">media_playlist_get_playlist_from_db()</span>, which is similar to the <span style="font-family: Courier New,Courier,monospace">GetPlayListN()</span> function. The difference is that the playlist ID is required as a parameter instead of the playlist name.
<pre class="prettyprint">
media_playlist_get_playlist_from_db(playlist_id);
</pre></li>
<li><p>Search for the playlist by using the <span style="font-family: Courier New,Courier,monospace">media_playlist_foreach_playlist_from_db()</span> function and a proper filter as a parameter. This function invokes the callback for every playlist in the database that matches the given filtering conditions.</p>
<pre class="prettyprint">
media_playlist_foreach_playlist_from_db(filter, _playlist_list_cb,  NULL);

static bool _playlist_list_cb(media_playlist_h playlist, void* user_data) 
{
&nbsp;&nbsp;&nbsp;int playlist_id;
&nbsp;&nbsp;&nbsp;char *name = NULL;

&nbsp;&nbsp;&nbsp;// Manage the retrieved playlist here
&nbsp;&nbsp;&nbsp;media_playlist_get_name(playlist, &amp;name);
&nbsp;&nbsp;&nbsp;media_playlist_get_playlist_id(playlist, &amp;playlist_id);
&nbsp;&nbsp;&nbsp;media_playlist_set_name(playlist, &quot;Put new playlist name here.&quot;);
}
</pre></li></ul></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">SetPlayListName()</span> function is covered by <span style="font-family: Courier New,Courier,monospace">media_playlist_set_name()</span>.</p></li>
<li><p>To remove the playlist, use the following code instead of a single <span style="font-family: Courier New,Courier,monospace">RemovePlayList()</span> method on an existing object:</p>
<pre class="prettyprint">
int playlist_id;

media_playlist_get_playlist_id(playlist, &amp;playlist_id);
media_playlist_delete_from_db(playlist_id); // Remove the playlist from the database

media_playlist_destroy(playlist); // Release the memory allocated for the playlist
</pre></li></ul>

<h2 id="locales" name="locales">Locales</h2>
<p>The calendar creation and use (described in the <a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/locales_tutorial/creating_calendar.htm" target="_blank">Creating a Calendar and Changing the Date</a> use case for the 2.2.1 version) is described in the new tutorial under the <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#dates">Managing Dates and Calendar</a> use case.</p>
<p>Note that in addition to functions described in this section, time-related functions are also provided by the following libraries:</p>
<ul>
    <li> Eglibc, a variant of glibc (<a href="http://www.eglibc.org/home" target="_blank">http://www.eglibc.org/home</a>)</li>
    <li> GLib (<a href ="https://developer.gnome.org/glib/2.38/" target="_blank">https://developer.gnome.org/glib/2.38/</a>)</li>
</ul>

<p>Previously, you created the calendar instance with this method:</p>
<pre class="prettyprint">
Calendar* pCalendar = Calendar::CreateInstanceN(CALENDAR_GREGORIAN);
</pre>
<p>Now, to create the calendar instance, do the following:</p>
<pre class="prettyprint">
i18n_uchar timezone[16];
i18n_ustring_copy_ua_n(timezone, &quot;America/New_York&quot;, 16);

i18n_ucalendar_h ucalendar;
i18n_ucalendar_create(timezone, -1, I18N_ULOCALE_US, I18N_UCALENDAR_DEFAULT, &amp;ucalendar);
</pre>
<p>In the 2.3 version, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_create()</span> function to create the calendar instance. The function takes 5 parameters instead of the 1 in the 2.2.1 API. The <span style="font-family: Courier New,Courier,monospace">CALENDAR_GREGORIAN</span> parameter passed in the 2.2.1 API is now the fourth parameter, and its type is <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_type_e</span>. To create the Gregorian calendar, use the <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_GREGORIAN</span> type. The other parameters are:</p>
<ul>
	<li>Desired time zone ID (for example, &quot;America/New_York&quot;).</li>
	<li>Length of the time zone ID input string. The value -1 can be used when the zone ID is null-terminated.</li>
	<li>Desired locale, such as <span style="font-family: Courier New,Courier,monospace">I18N_ULOCALE_US</span>.</li>
	<li>Last parameter is an out-type parameter. It is a pointer to an <span style="font-family: Courier New,Courier,monospace">i18n_calendar</span> instance which is created.</li>
</ul>
<p>The <span style="font-family: Courier New,Courier,monospace">SetTime()</span> function for setting the current time of the calendar is replaced with the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_set_date_time()</span> function. Now it takes a detailed date as its parameters, and the hour, minute, and seconds can also be specified. You also have to pass the pointer to the calendar instance as a parameter.</p>
<pre class="prettyprint">
// The parameters are: calendar instance, year, month, day, hour, minute, and second
i18n_ucalendar_set_date_time(ucalendar, 2014, I18N_UCALENDAR_JULY, 1, 9, 0, 0); 
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">AddTimeField()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_add()</span> function. It works almost as in the 2.2.1 version; for more information, see the documentation.</p>
<pre class="prettyprint">
i18n_ucalendar_add(ucalendar, I18N_UCALENDAR_HOUR, 3);
</pre>

<p>The Formatting Time and Date section is also now a part of the Managing Dates and Calendar use case in the 2.3 tutorial.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">GetCurrentTime()</span> function has been replaced with the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get_now()</span> function. It gets an actual current date from the system, and it is represented as milliseconds from the epoch.</p>
<pre class="prettyprint">
i18n_udate now;
i18n_ucalendar_get_now(&amp;now);
</pre>

<p>The date formatter functionality provided in the 2.3 API is similar to the 2.2.1 version. The <span style="font-family: Courier New,Courier,monospace">CreateDateFormatterN()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">i18n_udate_create()</span> function. The difference is that during the creation of the formatter you already pass the date pattern created with the <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_create()</span> and <span style="font-family: Courier New,Courier,monospace">i18n_udatepg_get_best_pattern()</span> functions (in 2.2.1, the pattern was applied to the formatter after it was created, by using the <span style="font-family: Courier New,Courier,monospace">ApplyPattern()</span> function). The main functionality provided earlier by the <span style="font-family: Courier New,Courier,monospace">Format()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">i18n_udate_format_date()</span> function. To see the exact usage of the mentioned functions, see the tutorials.</p>
<pre class="prettyprint">
i18n_udatepg_h udatepg;
i18n_udatepg_create(I18N_ULOCALE_UK, &amp;udatepg); // Create the pattern generator

i18n_uchar format[64];
// Create a draft format for the date (E - day of the week, M - month, y - year, d - day of the month, and D - day of the year)
i18n_ustring_copy_ua_n(format, &quot;EEEdMMMyyyyHHmmssz&quot;, 64); 

int pattern_len;
i18n_uchar best_pattern[64];
// Generate the best pattern using pattern generator
i18n_udatepg_get_best_pattern(udatepg, format, 64, best_pattern, 64, &amp;pattern_len); 

i18n_udate_format_h date_format;
i18n_ustring_copy_ua_n(timezone, &quot;Asia/Seoul&quot;, 16);
// Create a date format
i18n_udate_create(I18N_UDATE_FULL, I18N_UDATE_FULL, I18N_ULOCALE_UK, timezone, -1, best_pattern, -1, &amp;date_format); 

i18n_uchar date_result[64];
int date_len;
// Format the date
i18n_udate_format_date(date_format, now, date_result, 64, NULL, &amp;date_len); 
</pre>

<p>The 2.2.1 API provides time zone-related functionality. Getting the time zone identifier was possible with the <span style="font-family: Courier New,Courier,monospace">TimeZone::GetId()</span> function. In the 2.3 API, use the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get_timezone_displayname()</span> function with the display format type as the second parameter.</p>
<pre class="prettyprint">
i18n_ucalendar_get_timezone_displayname(ucalendar, I18N_UCALENDAR_STANDARD, ...);
</pre>

<p>Getting the time zone offset from UTC/GMT (in minutes) was possible using the <span style="font-family: Courier New,Courier,monospace">TimeZone::GetRawOffset()</span> function. In the 2.3 API, this functionality is covered by the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get()</span> function with the <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_ZONE_OFFSET</span> as its second parameter.</p>
<pre class="prettyprint">
int offset;

i18n_ucalendar_get(ucalendar, I18N_UCALENDAR_ZONE_OFFSET, &amp;offset); // Value is given in milliseconds
</pre>

<p>In 2.2.1, it was possible to find the daylight savings time (in minutes) with the <span style="font-family: Courier New,Courier,monospace">TimeZone::GetDstSavings()</span> function. In 2.3, it can be done for a particular date using the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get()</span> function with the <span style="font-family: Courier New,Courier,monospace">I18N_UCALENDAR_DST_OFFSET</span> as its second parameter.</p>
<pre class="prettyprint">
int offset;

i18n_ucalendar_get(ucalendar, I18N_UCALENDAR_DST_OFFSET, &amp;offset); // Value is given in milliseconds
</pre>

<p>It is also possible to check whether a date is in daylight savings time with the <span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_is_in_daylight_time()</span> function:</p>
<pre class="prettyprint">
bool is_in_dst;

i18n_ucalendar_is_in_daylight_time(ucalendar, &amp;is_in_dst);
</pre>

<p>In case of the <a href="https://developer.tizen.org/dev-guide/2.2.1/org.tizen.native.appprogramming/html/tutorials/locales_tutorial/getting_system_loc_and_time_zone.htm" target="_blank">Getting the System Locale</a> use case, you can find helpful 2.3 API information in the <a href="../../../../org.tizen.tutorials/html/native/system/runtime_tutorial_n.htm">Runtime information Tutorial</a>. Getting the system locale is now done by using the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_default()</span> function (<span style="font-family: Courier New,Courier,monospace">GetSystemLocale()</span> in the 2.2.1 version). To get the full name of the specified locale, the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_display_name()</span> function is used. To get the language for the given locale, call the <span style="font-family: Courier New,Courier,monospace">i18n_ulocale_get_language()</span> function.</p>
<p>The Formatting Numbers use case is now the <a href="../../../../org.tizen.tutorials/html/native/base/i18n_tutorial_n.htm#numbers">Managing Numbers</a> use case. The functions in these use cases match like this:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">CreateNumberFormatter()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">i18n_unumber_create()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">Format()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">i18n_unumber_get_symbol()</span></li>
</ul>
<p>For more information, see the tutorials.</p>

<h2 id="locations" name="locations">Locations</h2>
<p>To work with the location functionality, the 2.3 API model requires creating and starting the Location Manager instance. It is an equivalent to the <span style="font-family: Courier New,Courier,monospace">LocationProvider</span> class from the 2.2.1 API.</p>
<pre class="prettyprint">
location_manager_h manager;

// Use LOCATIONS_METHOD_HYBRID to support both GPS and WPS
location_manager_create(LOCATIONS_METHOD_GPS, &amp;manager); 
location_manager_start(manager); // Start the location manager

location_manager_stop(manager); // Stop the location manager
// Destroy the location manager to release the allocated memory
location_manager_destroy(manager); 
</pre>

<p>The first part of the old tutorial is Getting the Last Known Location. The same section appears in the new tutorials. The difference in the new API is that the function used to get the last location (<span style="font-family: Courier New,Courier,monospace">location_manager_get_last_location()</span>) takes pointers to parameters of the location and fulfills them with data. It also returns the error code, instead of returning the <span style="font-family: Courier New,Courier,monospace">Location</span> structure like it did with the <span style="font-family: Courier New,Courier,monospace">GetLastKnownLocation()</span> function in the 2.2.1 API. As long as you have all the parameters fulfilled by the function and you have the pointers to the obtained values, you already have the timestamp and coordinates values, so there is no need to call the <span style="font-family: Courier New,Courier,monospace">GetTimestamp()</span> and <span style="font-family: Courier New,Courier,monospace">GetCoordinates()</span> functions, like in the 2.2.1 tutorial.</p>
<pre class="prettyprint">
double altitude, latitude, longitude, climb, direction, speed;
double horizontal, vertical;
location_accuracy_level_e level;
time_t timestamp;

int error_code = location_manager_get_last_location(manager, &amp;altitude, &amp;latitude, &amp;longitude, &amp;climb, &amp;direction, &amp;speed, &amp;level, &amp;horizontal, &amp;vertical, &amp;timestamp);
</pre>

<p>The next part about Getting Location Updates also has its equivalent in the new 2.3 tutorials. Now, it is much simpler to handle the location update events. The only thing you have to do to get the location updates is to register the proper callback by using the <span style="font-family: Courier New,Courier,monospace">location_manager_set_position_updated_cb()</span> function. As well as in the 2.2.1 API, it is possible to set the interval for callback calls:</p>
<pre class="prettyprint">
location_manager_set_position_updated_cb(manager, position_updated, 2, NULL); // Interval is set to 2 seconds
</pre>
<p>When the callback is called, it already has all the position information stored in its parameters, so there is no need to call any function, like <span style="font-family: Courier New,Courier,monospace">GetCoordinates()</span>, inside the callback:</p>
<pre class="prettyprint">
static void position_updated(double latitude, double longitude, double altitude, time_t timestamp, void *user_data)
{
&nbsp;&nbsp;&nbsp;// You can manipulate the obtained location information here. For example:
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The latitude value is: %d&quot;, latitude);
}
</pre>
<p>For more information, see the Getting Location Updates use case in the 2.3 Location Manager Tutorial.</p>


<p>The last section of the 2.2.1 Location Tutorial,  Monitoring Regions, is not covered by the new 2.3 tutorial, but the functionality described there can be found in the Location Manager documentation in 2.3 API. Now, it is easier to track the region changes. There is no need to create the class for a proper Listener or do other actions described in the 2.2.1 tutorial. You only have to set the proper callback that is called when the specified boundary area is entered or exited. To do this, use the <span style="font-family: Courier New,Courier,monospace">location_bounds_set_state_changed_cb()</span> function. For more information, see the Location Manager module documentation.</p>
<pre class="prettyprint">
int poly_size = 3;
location_coords_s coord_list[poly_size];
coord_list[0].latitude = 10;
coord_list[0].longitude = 10;
coord_list[1].latitude = 20;
coord_list[1].longitude = 20;
coord_list[2].latitude = 30;
coord_list[2].longitude = 10;
location_bounds_h bounds_poly;

location_bounds_create_polygon(coord_list, poly_size, &amp;bounds_poly); // Create a triangle shaped polygon

location_bounds_set_state_changed_cb(bounds_poly, bounds_state_changed_cb, NULL); // Set the callback

static void bounds_state_changed_cb(location_boundary_state_e state, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (LOCATIONS_BOUNDARY_IN == state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The boundary was entered&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The boundary was exited&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h2 id="media" name="media">Media</h2>
<h3 id="audio" name="audio">PLAYING AUDIO -&gt; PLAYING AN AUDIO FILE (PLAYER TUTORIAL)</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">OpenFile()</span> functionality from the 2.2.1 version is now handled by the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function. It specifies which file is played. To start the playback, use the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function. It is like the <span style="font-family: Courier New,Courier,monospace">Play()</span> function from the 2.2.1 API. One important difference between 2.2.1 and 2.3 APIs is that, before the playback can be started, the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> and <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> functions have to be called. The <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function sets the file path to the file that is played. It is important to call this function before calling the <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function, because otherwise an error occurs. The <span style="font-family: Courier New,Courier,monospace">player_prepare()</span> function prepares the media player for playback. In the 2.2.1 API, no such function had to be used before playing the file. The rest of the functionalities described in the 2.2.1 tutorial are covered in the 2.3 API by the following functions: <span style="font-family: Courier New,Courier,monospace">player_stop()</span> to stop the playback, <span style="font-family: Courier New,Courier,monospace">player_pause()</span> to pause the playback, and <span style="font-family: Courier New,Courier,monospace">player_get_play_position()</span> to get the current playback position in milliseconds. </p>
<pre class="prettyprint">
player_h player;

char file_path[1024];
strcpy(file_path, app_get_shared_data_path());
strcat(file_path, &quot;audio.mp3&quot;);

player_create(&amp;player);
player_set_uri(player, file_path);
player_prepare(player);
player_start(player);
</pre>

<p>To read and set playing position, use:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">Player::GetPosition()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">player_get_play_position()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">Player::SeekTo()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">player_set_play_position()</span>
<p>The <span style="font-family: Courier New,Courier,monospace">player_set_play_position()</span> function is asynchronous (like its 2.2.1 counterpart) and signals seeking completion through a callback.</p></li></ul>

<p>To check the rest of the player functionalities, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API Reference</a>.</p>

<h3 id="video" name="video">PLAYING VIDEO -&gt; PLAYING A VIDEO FILE (PLAYER TUTORIAL)</h3>
<p>Playing the video file is very similar to playing the audio file. The difference is that you have to set the display where the video is presented. There was no such functionality mentioned in the 2.2.1 tutorial, but it can be found in the 2.3 tutorial.</p>
<pre class="prettyprint">
player_set_display(player, PLAYER_DISPLAY_TYPE_EVAS, GET_DISPLAY(evas_obj));
</pre>

<h3 id="control" name="control">HANDLING PLAYER CONTROLLERS -&gt; PLAYER DOCUMENTATION</h3>
<p>To handle the events of opening the player and reaching the end of a played file, you can use the <span style="font-family: Courier New,Courier,monospace">player_prepared_cb()</span> callback with the <span style="font-family: Courier New,Courier,monospace">player_prepare_async()</span> function and register the <span style="font-family: Courier New,Courier,monospace">player_completed_cb()</span> callback using the <span style="font-family: Courier New,Courier,monospace">player_set_completed_cb()</span> function. The first one is related to the situation when the player is prepared. The second one is invoked when the player reaches the end of the stream.</p>

<pre class="prettyprint">
player_prepare_async(player, _prepared_cb, NULL);
</pre>
<p>This function asynchronously prepares the player. After its work is finished, the <span style="font-family: Courier New,Courier,monospace">_prepared_cb()</span> is invoked.</p>
<pre class="prettyprint">
static void _prepared_cb(void *data)
{
&nbsp;&nbsp;&nbsp;// This callback is invoked when the player is prepared
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The player is ready to start the playback&quot;);
}
</pre>
<p>This code presents the example usage of the <span style="font-family: Courier New,Courier,monospace">player_set_completed_cb()</span> function.</p>
<pre class="prettyprint">
player_set_completed_cb(player, _player_completed_cb, NULL);

static void _player_completed_cb(void *data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The playback ended.&quot;);
}
</pre>
<p>For more information, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player API Reference</a>.</p>

<h3 id="camera" name="camera">CAPTURING AND RECORDING MEDIA -&gt; CAMERA TUTORIAL</h3>
<p>The overall models of capturing and recording functionalities are pretty much the same in both API versions. The corresponding functions are:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">Construct()</span> and <span style="font-family: Courier New,Courier,monospace">PowerOn()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">camera_create()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">StartPreview()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">camera_start_preview()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">StopPreview()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">camera_stop_preview()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">OnCameraPreviewed()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">camera_set_preview_cb()</span></li>
</ul>
<p>The main difference is connected with setting the display surface for the camera preview. To set the place for displaying the preview image, use the <span style="font-family: Courier New,Courier,monospace">camera_set_display()</span> function. An <span style="font-family: Courier New,Courier,monospace">Evas_object</span> can be used for showing the preview, instead dealing with, for example, an OverlayRegion or rectangles. </p>
<pre class="prettyprint">
camera_h camera;

camera_create(CAMERA_DEVICE_CAMERA0, camera);
camera_set_display(camera, CAMERA_DISPLAY_TYPE_EVAS, put_your_evas_object_here);
camera_set_preview_resolution(camera, width_resolution, height_resolution);
camera_start_preview(camera);
camera_stop_preview(camera);
</pre>

<p>The next little difference is about getting the supported preview resolutions. In the 2.2.1 API, it was possible by using the <span style="font-family: Courier New,Courier,monospace">GetSupportedPreviewResolutionListN()</span> function. Now, in 2.3 API model, the <span style="font-family: Courier New,Courier,monospace">camera_foreach_supported_preview_resolution()</span> function must be used. It iterates through all the supported preview resolutions and calls the callback, passed as one of the parameters, for each of them. The <span style="font-family: Courier New,Courier,monospace">camera_set_preview_resolution()</span> function is a replacement for the <span style="font-family: Courier New,Courier,monospace">SetPreviewResolution()</span> from the 2.2.1 API. The same applies with setting the capture resolution. Use the <span style="font-family: Courier New,Courier,monospace">camera_foreach_supported_capture_resolution()</span> and <span style="font-family: Courier New,Courier,monospace">camera_set_capture_resolution()</span> functions for this purpose.</p>
<pre class="prettyprint">
int resolution[2];

// Find resolution that is supported by the device
camera_foreach_supported_preview_resolution(camera, _preview_resolution_cb, resolution); 

// Set supported resolution for camera preview
camera_set_preview_resolution(camera, resolution[0], resolution[1]); 

static bool _preview_resolution_cb(int width, int height, void *user_data)
{
&nbsp;&nbsp;&nbsp;int *resolution = (int*)user_data;
&nbsp;&nbsp;&nbsp;resolution[0] = width;
&nbsp;&nbsp;&nbsp;resolution[1] = height;

&nbsp;&nbsp;&nbsp;return false; // Stop the iteration after finding first supported resolution
}
</pre>

<p>Setting the capture and preview format follows the same scheme as setting the resolution. As you can see, the main difference in this matter is that instead of getting the list of supported resolutions and formats, you have functions to iterate through all of them and invoke callbacks for each one to handle it (<span style="font-family: Courier New,Courier,monospace">camera_foreach_supported_capture_format()</span> and <span style="font-family: Courier New,Courier,monospace">camera_foreach_supported_preview_format()</span>).</p>

<h3 id="record" name="record">RECORDING AUDIO -&gt; AUDIO RECORDER TUTORIAL</h3>
<p>The old <span style="font-family: Courier New,Courier,monospace">Construct()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">recorder_create_audiorecorder()</span> function. It creates the handle to the audio recorder instance.</p>
<pre class="prettyprint">
recorder_h recorder;

recorder_create_audiorecorder(&amp;recorder);
</pre>

<p>Before the recording can be started, the file for the recording has to be specified. The 2.2.1 API provided the <span style="font-family: Courier New,Courier,monospace">CreateAudioFile()</span> function. In 2.3, there are 2 functions responsible for this:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">recorder_set_file_format()</span> defines in what kind of file format the recording is stored.</li>
	<li><span style="font-family: Courier New,Courier,monospace">recorder_set_filename()</span> sets the name of the file in which the recording is stored.</li>
</ul>
<pre class="prettyprint">
recorder_set_file_format(recorder, RECORDER_FILE_FORMAT_3GP);

recorder_set_filename(recorder, your_audio_file_path);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">SetMaxRecordingSize()</span> and <span style="font-family: Courier New,Courier,monospace">SetMaxRecordingTime()</span> functions are now covered by the <span style="font-family: Courier New,Courier,monospace">recorder_attr_set_size_limit()</span> and <span style="font-family: Courier New,Courier,monospace">recorder_attr_set_time_limit()</span> functions.</p>
<pre class="prettyprint">
// Set max file size to 1024 [kB]
recorder_attr_set_size_limit(recorder, 1024); 

// Set max recording time to 2 minutes [120 seconds]
recorder_attr_set_time_limit(recorder, 120); 
</pre>

<p>Getting the supported file formats and codecs is again implemented with the usage of a set of foreach functions. These functions work the same way as it was described in previous sections.</p>
<p>In the 2.2.1 API, it was possible to set the quality of the recording, by simply using the <span style="font-family: Courier New,Courier,monospace">SetQuality()</span> function. Now, the quality can be controlled by the different functions from the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__RECORDER__ATTRIBUTES__MODULE.html">Recorder Attributes</a> submodule.</p>
<p>Starting, pausing, and stopping the record process are managed by similar functions like in the 2.2.1 API. The <span style="font-family: Courier New,Courier,monospace">Record()</span>, <span style="font-family: Courier New,Courier,monospace">Pause()</span>, <span style="font-family: Courier New,Courier,monospace">Stop()</span>, and <span style="font-family: Courier New,Courier,monospace">Close()</span> functions are now covered by the <span style="font-family: Courier New,Courier,monospace">recorder_prepare()</span>, <span style="font-family: Courier New,Courier,monospace">recorder_start()</span>, <span style="font-family: Courier New,Courier,monospace">recorder_pause()</span>, <span style="font-family: Courier New,Courier,monospace">recorder_cancel()</span>, and <span style="font-family: Courier New,Courier,monospace">recorder_commit()</span> functions.</p>
<p>The scheme of recording a video file is similar to the process of recording an audio file. The difference is that the display for the camera has to be specified. The recorder has to be created with the <span style="font-family: Courier New,Courier,monospace">recorder_create_videorecorder()</span> function, instead of using the <span style="font-family: Courier New,Courier,monospace">recorder_create_audiorecorder()</span> function. For more information, see the tutorials.</p>

<h3 id="decode" name="decode">DECODING IMAGES -&gt; DECODING FROM A FILE OR MEMORY (IMAGE UTIL TUTORIAL)</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">DecodeN()</span> function has been replaced with the <span style="font-family: Courier New,Courier,monospace">image_util_decode_jpeg()</span> and <span style="font-family: Courier New,Courier,monospace">image_util_decode_jpeg_from_memory()</span> functions.</p>
<p>Note that the <span style="font-family: Courier New,Courier,monospace">Tizen::Media::Image::DecodeN()</span> function supports the JPEG, GIF, PNG, BMP, TIFF, and WBMP formats, while the <span style="font-family: Courier New,Courier,monospace">image_util_*</span> functions support only the JPEG format.</p>

<h3 id="image" name="image">ENCODING AN IMAGE TO A FILE -&gt; ENCODING TO A FILE OR MEMORY (IMAGE UTIL TUTORIAL)</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">EncodeToFile()</span> function has been replaced with the <span style="font-family: Courier New,Courier,monospace">image_util_encode_jpeg()</span> function.</p>
<p>Note that the <span style="font-family: Courier New,Courier,monospace">Tizen::Media::Image::EncodeToFile()</span> function supports the JPEG, BMP, and PNG formats, while the <span style="font-family: Courier New,Courier,monospace">image_util_*</span> functions support only the JPEG format.</p>

<h3 id="buffer" name="buffer">ENCODING AN IMAGE TO A BUFFER AND WRITING TO A FILE -&gt; IMAGE UTIL TUTORIAL</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">EncodeToBufferN()</span> function has been replaced with the <span style="font-family: Courier New,Courier,monospace">image_util_encode_jpeg_to_memory()</span> and <span style="font-family: Courier New,Courier,monospace">fwrite()</span> functions to save the buffer into the file.</p>
<p>Note that the <span style="font-family: Courier New,Courier,monospace">Tizen::Media::Image::EncodeToBufferN()</span> function supports the JPEG, BMP, and PNG formats, while the <span style="font-family: Courier New,Courier,monospace">image_util_*</span> functions support only the JPEG format.</p>

<h2 id="messaging" name="messaging">Messaging</h2>
<p>Sending messages is still done asynchronously, and this is why the callback which notifies about the status of sending the message is needed. In the 2.2.1 API, there was the <span style="font-family: Courier New,Courier,monospace">OnSmsMessageSent()</span> listener. In the 2.3 API, the function responsible for sending messages takes as a parameter the callback function that is called after sending the message is finished and informs about the status of this operation. Creating a message and setting its attributes is similar to the 2.2.1 scenario. The difference is that when you want to create the MMS message, you do not need to create different listeners. The only thing you need to do is to use <span style="font-family: Courier New,Courier,monospace">MESSAGES_TYPE_MMS</span> as a parameter of the <span style="font-family: Courier New,Courier,monospace">messages_create_message()</span> function.</p>
<pre class="prettyprint">
messages_message_h message = NULL;
messages_service_h message_service = NULL;

// The connection with the message service must be established
messages_open_service(&amp;message_service); 

// To create the MMS, use MESSAGES_TYPE_MMS instead
messages_create_message(MESSAGES_TYPE_SMS, &amp;message); 
messages_add_address(message, &quot;Put the recipient number here&quot;, MESSAGES_RECIPIENT_TO);
messages_set_text(message, &quot;Put the text of the message here&quot;);

// Part for MMS messages only
messages_mms_set_subject(message, &quot;Put the MMS subject here&quot;);
messages_mms_add_attachment(message, MESSAGES_MEDIA_IMAGE, your_image_file_path);

// The third parameter (&quot;true&quot;) defines whether to save the message to the sentbox
messages_send_message(message_service, message, true, sent_msg_cb, NULL);

// Close the connection with the message service, when no longer needed
messages_close_service(message_service); 
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">sent_msg_cb()</span> function is called when the process of sending the message to all recipients is finished:</p>
<pre class="prettyprint">
static void sent_msg_cb(messages_sending_result_e result, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (MESSAGES_SENDING_SUCCEEDED == result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Message sending succeeded&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Message sending failed&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>To listen for incoming messages in the 2.2.1 API, the <span style="font-family: Courier New,Courier,monospace">OnSmsMessageReceived()</span> listener had to be overridden and the <span style="font-family: Courier New,Courier,monospace">AddSmsMessageEventListener()</span> function used to add the listener to the SMS manager. In the 2.3 API, use the <span style="font-family: Courier New,Courier,monospace">messages_set_message_incoming_cb()</span> function. It registers a callback for the given messages service, invoked when an incoming message is received.</p>
<pre class="prettyprint">
messages_set_message_incoming_cb(message_service, _messages_incoming_cb, NULL);

static void _messages_incoming_cb(messages_message_h incoming_message, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Manage the received message here.
}
</pre>

<p>In the 2.3 API, there are 2 ways of searching messages. One way is to use the <span style="font-family: Courier New,Courier,monospace">messages_search_message()</span> function. It works similarly to the <span style="font-family: Courier New,Courier,monospace">SearchMessageBoxN()</span> function from the 2.2.1 API. It returns the list of messages that match the given searching conditions.</p>
<pre class="prettyprint">
messages_message_h *message_array;
int array_length;
int total_matching;

messages_search_message(message_service, MESSAGES_MBOX_ALL,  MESSAGES_TYPE_UNKNOWN, &quot;keyword searched in the text and subject&quot;, &quot;recipient address&quot;, 0, 0, &amp;message_array, &amp;array_length, &amp;total_matching);
</pre>
<p>The second way is to use the <span style="font-family: Courier New,Courier,monospace">messages_foreach_message()</span> function. In this case, instead of obtaining the list of all the queried messages, the search function iterates through messages and launches a callback for those that match the query.</p>
<pre class="prettyprint">
messages_foreach_message(message_service, MESSAGES_MBOX_ALL,  MESSAGES_TYPE_UNKNOWN, &quot;keyword searched in the text and subject&quot;, &quot;recipient address&quot;, 0, 0, _search_messages_cb, NULL);

static void _search_messages_cb(messages_message_h message, int index, int result_count, int total_count, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Manage the found matching message here
&nbsp;&nbsp;&nbsp;return true; // To continue the iteration. To stop the iteration, return false
}
</pre>

<p>Sending an email follows the same pattern as sending an MMS message in both 2.3 and 2.2.1 versions of the API. The difference is that the callback that notifies you about the operation status, after sending is finished, is not passed to the send function, but it is set by an independent <span style="font-family: Courier New,Courier,monospace">email_set_message_sent_cb()</span> function.</p>
<pre class="prettyprint">
email_h email;

email_create_message(&amp;email);
email_add_recipient(email, EMAIL_RECIPIENT_TYPE_TO, &quot;example@mail.com&quot;);
email_add_attach(email, your_attachment_file_path);
email_set_message_sent_cb(email, email_send_status, NULL);

// The second parameter (&quot;false&quot;) defines whether to save the email in the sentbox
email_send_message(email, false); 

static void email_send_status(email_h email, email_sending_e result, void *user_data)
{
&nbsp;&nbsp;&nbsp;if(EMAIL_SENDING_SUCCEEDED == result) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Email was sent successfully&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3 id="push" name="push">PUSH</h3>
<p>In the 2.3 API, to work with the push messaging service, you have to fulfill the following requirements:</p>
<ul>
	<li>Your device must be connected to the internet and be able to contact to any IP addresses with the port 5223.</li>
	<li>Remember that the Tizen push server identifies your applications using the package ID. It is the ID randomly generated or entered by yourself, when you create your project in the Tizen SDK.</li>
	<li>Your application needs to have permission to the Tizen push servers. You can request it by sending an email to the Tizen push service team (push.tizen@samsung.com). You can find the list of required information that you have to put in that email in the 2.3 Push Tutorial. When the team approves your request, you receive a push app ID corresponding to your package ID. You have to keep this push app ID confidential, otherwise your push notifications can be hijacked by malicious applications.</li>
</ul>

<p>Before you can send messages and register a request for push messaging like in the 2.2.1 API using the <span style="font-family: Courier New,Courier,monospace">RegisterPushService()</span> function, you have to establish the connection with the push daemon using the <span style="font-family: Courier New,Courier,monospace">push_service_connect()</span> function. The first parameter of this function is the push app ID, received from the Tizen push server team. There are also 2 callbacks described below. The next one is dedicated for some user data that is passed to the callback function and the last one is the handle to the <span style="font-family: Courier New,Courier,monospace">push_connection_s</span> structure, which is fulfilled by the function.</p>
<pre class="prettyprint">
push_service_connection_h push_connection;

push_service_connect(&quot;Push app ID received from the Tizen push server team&quot;, _state_cb, _noti_cb, NULL, &amp;push_connection);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">_state_cb</span> parameter is a callback function invoked when the state of the push service changes. It arrives with the current state of the service as its parameter. You can use it to handle the different states of the push service.</p>
<pre class="prettyprint">
static void _state_cb(push_service_state_e state, const char *error, void *user_data)
{
&nbsp;&nbsp;&nbsp;switch (state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PUSH_SERVICE_STATE_UNREGISTERED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The push service is currently unregistered.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PUSH_SERVICE_STATE_REGISTERED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The push service is registered.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PUSH_SERVICE_STATE_ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;An error occurred.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Unknown state.&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">_noti_cb</span> parameter is a callback function invoked when a notification arrives from the server through the push daemon.</p>
<pre class="prettyprint">
static void _noti_cb(push_service_notification_h notification, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *data = NULL;
&nbsp;&nbsp;&nbsp;char *message = NULL;
&nbsp;&nbsp;&nbsp;long long int time_stamp;

// Retrieve the application data stored in the notification
&nbsp;&nbsp;&nbsp;push_service_get_notification_data(notification, &amp;data); 

// Retrieve the message carried by the notification
&nbsp;&nbsp;&nbsp;push_service_get_notification_message(notification, &amp;message); 

// Retrieve the time of the notification creation
&nbsp;&nbsp;&nbsp;push_service_get_notification_time(noti, &amp;time_stamp); 
}
</pre>
<p>Remember that the <span style="font-family: Courier New,Courier,monospace">push_service_get_notification_data()</span> and <span style="font-family: Courier New,Courier,monospace">push_service_get_notification_message()</span> functions allocate the memory for the data they return, so this memory needs to be released with the <span style="font-family: Courier New,Courier,monospace">free()</span> function when it is no longer needed. However, do not free the notification structure. It is released automatically after the callback function execution.</p>

<p>When the connection with the push daemon is established, you can proceed with the registration process of your application. The <span style="font-family: Courier New,Courier,monospace">push_service_register()</span> function is an equivalent for the <span style="font-family: Courier New,Courier,monospace">RegisterPushService()</span> function. However, it no longer takes the request ID. It takes the daemon connection handle and the result callback function instead. The callback is called at the end of the registration process. That callback carries the result of the registration as its first parameter. The application does not have to deliver the registration ID anymore. It is assigned by the push server and can be obtained with the <span style="font-family: Courier New,Courier,monospace">push_service_get_registration_id()</span> function.</p>
<pre class="prettyprint">
push_service_register(push_connection, _result_cb, NULL);

static void _result_cb(push_service_result_e result, const char *msg, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (PUSH_SERVICE_RESULT_SUCCESS == result) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Your application has been successfully registered to the push server.&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">UnregisterPushService()</span> function from the 2.2.1 API also has its equivalent - the <span style="font-family: Courier New,Courier,monospace">push_service_deregister()</span> function. It takes the same parameters as the registration function.</p>
<pre class="prettyprint">
push_service_deregister(push_connection, _deregistration_result_cb, NULL);

static void _deregistration_result_cb(push_service_result_e result, const char *msg, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (PUSH_SERVICE_RESULT_SUCCESS == result) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Your application has been successfully deregistered from the push server.&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The 2.3 API supports handling the push messages in 2 different ways as it was in the 2.2.1 model. If the application is running (connected to the push daemon) and the message is received, the notification callback set during establishing the connection with the push daemon is called. It is like the <span style="font-family: Courier New,Courier,monospace">IPushEventListener::OnPushMessageReceived()</span> event handler from the 2.2.1 API. In the second situation, when the application is not running, there are 2 possible solutions. One is like in 2.2.1 and involves saving the notification in a database and reading it later, when the application is launched. This functionality can be handled by using the <span style="font-family: Courier New,Courier,monospace">push_service_get_unread_notification()</span> function like the <span style="font-family: Courier New,Courier,monospace">GetUnreadMessagesN()</span> function from the 2.2.1 API.</p>
<pre class="prettyprint">
push_service_notification_h notification;

push_service_get_unread_notification(push_connection, &amp;notification);
</pre>
<p>The second one differs from the one from 2.2.1. The push message can be send from your application server with an option <span style="font-family: Courier New,Courier,monospace">&#39;action=LAUNCH&#39;</span>, which forcibly launches the application and delivers the notification as a bundle. To handle this situation, the <span style="font-family: Courier New,Courier,monospace">app_control_get_operation()</span> function from the App Control module is required. This function gets the operation that must be performed based on the <span style="font-family: Courier New,Courier,monospace">app_control_h</span> handle passed to the <span style="font-family: Courier New,Courier,monospace">app_control()</span> callback that is invoked when your application is launched by another application or process.</p>
<pre class="prettyprint">
static void app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *operation = NULL;
&nbsp;&nbsp;&nbsp;char *notification_data = NULL;

&nbsp;&nbsp;&nbsp;app_control_get_operation(app_control, &amp;operation);

// Retrieve notification data
&nbsp;&nbsp;&nbsp;notification_data = push_service_app_control_to_noti_data(app_control, operation);  from the bundle.
}
</pre>
<p>Remember to release the memory allocated for the operation and <span style="font-family: Courier New,Courier,monospace">notification_data</span> to avoid memory leaks.</p>

<h2 id="net" name="net">Net</h2>
<p>The initialization of the Bluetooth connection does not require the creation of the <span style="font-family: Courier New,Courier,monospace">Bluetooth</span> class. In the 2.3 API, the <span style="font-family: Courier New,Courier,monospace">bt_initialize()</span> function must be called without any parameters.</p>
<pre class="prettyprint">
bt_initialize();
</pre>
<p>The Bluetooth adapter can be launched by calling the <span style="font-family: Courier New,Courier,monospace">bt_adapter_enable()</span> function. Getting the name and address of the local device is done in the same way as in the 2.2.1 API. The difference is in getting the list of paired devices. The <span style="font-family: Courier New,Courier,monospace">bt_adapter_foreach_bonded_device()</span> function iterates through all the bonded devices instead of returning the list of paired devices like the <span style="font-family: Courier New,Courier,monospace">GetPairedDeviceListN()</span> function from the 2.2.1 API. The specified callback is called for every paired device. The callback carries the information about a particular bonded device as its first parameter, so it is possible to check the device name by looking at the passed <span style="font-family: Courier New,Courier,monospace">bt_device_info_s</span> structure.</p>
<p>The documentation for the Bluetooth OPP (Object Push Profile) client provides functions to initialize the OPP client (<span style="font-family: Courier New,Courier,monospace">bt_opp_client_initialize()</span>), add files to be pushed (<span style="font-family: Courier New,Courier,monospace">bt_opp_client_add_file()</span>), and push them to the OPP server (<span style="font-family: Courier New,Courier,monospace">bt_opp_client_push_files()</span>).</p>
<pre class="prettyprint">
char remote_address[18] = &quot;The address of the remote device&quot;;

bt_opp_client_initialize();

bt_opp_client_add_file(your_file_path);
 
bt_opp_client_push_files(remote_address, _bt_opp_client_push_responded_cb, _bt_opp_client_push_progress_cb, _bt_opp_client_push_finished_cb, NULL);

void _bt_opp_client_push_responded_cb(int result, const char *remote_address, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Called when OPP server responds to the push request
}

void _bt_opp_client_push_progress_cb(const char *file, long long size, int percent, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Called when each file is being transferred
}

void _bt_opp_client_push_finished_cb(int result, const char *remote_address, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Called when the push request is finished
}
</pre>
<p>For more details, see the <a href="../../../../org.tizen.tutorials/html/native/network/bluetooth_tutorial_n.htm#exc">Exchanging Data Using Object Push Profile (OPP)</a> use case of the Bluetooth Tutorial and the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__OPP__MODULE.html">Bluetooth OPP Client API Reference</a>.</p>

<p>The OPP server in the 2.3 API works similarly to the 2.2.1 model. The <span style="font-family: Courier New,Courier,monospace">bt_opp_server_initialize_by_connection_request()</span> function replaces the <span style="font-family: Courier New,Courier,monospace">StartService()</span> function. It defines that the specified callback is called to handle the incoming OPP connection request. There are also functions for setting the destination, accepting the push request, and stopping the push service. For more information, see the <a href="../../../../org.tizen.tutorials/html/native/network/bluetooth_tutorial_n.htm#exc">Bluetooth OPP Server tutorial</a>.</p>
<pre class="prettyprint">

bt_opp_server_initialize_by_connection_request(your_destination_path, connection_requested_cb_for_opp_server, NULL);

void connection_requested_cb_for_opp_server(const char *remote_address, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Called when an OPP connection is requested
&nbsp;&nbsp;&nbsp;// Call bt_opp_server_accept_connection() if you want to accept
&nbsp;&nbsp;&nbsp;// Otherwise, call bt_opp_server_reject_connection()
}
</pre>

<p>For the Bluetooth SPP module, see the <a href="../../../../org.tizen.tutorials/html/native/network/bluetooth_tutorial_n.htm#connect">Serial Port Profile (SPP)</a> use case of the Bluetooth Tutorial for 2.3 API.</p>
<p>The 2.3 API supports the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__HDP__MODULE.html">Bluetooth Health Device Profile (HDP)</a> connections. Connecting to the source is similar, just the name of the function has changed a little. The connection is being established asynchronously, so still some kind of listener or callback is needed. This time (in the 2.3 API), the callbacks for connected and disconnected states are set by using the <span style="font-family: Courier New,Courier,monospace">bt_hdp_set_connection_state_changed_cb()</span> function. The rest of the functionality is pretty much the same, so check the new function names in the documentation.</p>
<p>The Discovering Bluetooth Devices use case works similarly in both 2.2.1 and 2.3 APIs. For more information, see the <a href="../../../../org.tizen.tutorials/html/native/network/bluetooth_tutorial_n.htm#find">Finding Other Devices</a> use case in the Bluetooth Tutorial for the 2.3 API.</p>
<p>Pairing 2 Bluetooth devices is called bonding devices in the 2.3 API. The <span style="font-family: Courier New,Courier,monospace">bt_device_create_bond()</span> function works like the <span style="font-family: Courier New,Courier,monospace">Pair()</span> function in the 2.2.1 API. The <span style="font-family: Courier New,Courier,monospace">IBluetoothDeviceEventListener::OnBluetoothPaired()</span> event handler is now covered by the functionality of the <span style="font-family: Courier New,Courier,monospace">bt_device_set_bond_created_cb()</span> function, which sets the callback invoked when the pairing process is finished.</p>
<p>All the functionality connected with the HTTP protocol is now covered by the libcurl library. All the sockets are now provided with glibc library.</p>
<p>The process of Activating and Deactivating a Wi-Fi Device is very similar in both 2.2.1 and 2.3 tutorials. The <span style="font-family: Courier New,Courier,monospace">wifi_activate()</span> and <span style="font-family: Courier New,Courier,monospace">wifi_deactivate()</span> functions work like <span style="font-family: Courier New,Courier,monospace">Activate()</span> and <span style="font-family: Courier New,Courier,monospace">Deactivate()</span> in 2.2.1. Instead of creating a Wi-Fi manager, the 2.3 API requires you to call the <span style="font-family: Courier New,Courier,monospace">wifi_initialize()</span> function before starting the work with Wi-Fi.</p>
<pre class="prettyprint">
wifi_initialize();

wifi_deinitialize();
</pre>

<h2 id="security" name="security">Security</h2>
<p>Most of the security features from the 2.2.1 API are provided now by the OpenSSL library. However, there is also a Key Manager module in the 2.3 API, which enables some of the 2.2.1 Security module functionalities.</p>
<p>In 2.2.1, the <span style="font-family: Courier New,Courier,monospace">GenerateKeyPairN()</span> function was used to generate a pair of keys. Then the <span style="font-family: Courier New,Courier,monospace">EncryptN()</span> method of the RsaCipher class was used to apply the RSA cipher to the generated keys. In the 2.3 API, to generate key pairs (RSA or ECDSA), use the <span style="font-family: Courier New,Courier,monospace">ckmc_create_key_pair_rsa()</span> or <span style="font-family: Courier New,Courier,monospace">ckmc_create_key_pair_ecdsa()</span> function.</p>
<pre class="prettyprint">
size_t size = 2048; // Key Manager supports 1024, 2048, and 4096
const char *private_key_alias = &quot;PRV_RSA1&quot;;
const char *public_key_alias = &quot;PUB_RSA1&quot;;
ckmc_policy_s policy_private_key;
ckmc_policy_s policy_public_key;

// This private key is encrypted with a password additionally
policy_private_key.password = (char *)&quot;pri_password&quot;; 
// This key cannot be extracted from the key manager
policy_private_key.extractable = false; 

policy_public_key.password = NULL;
policy_public_key.extractable = true;

ckmc_create_key_pair_rsa(size, private_key_alias, public_key_alias, policy_private_key, policy_public_key);
</pre>

<p>The generation of the pseudo-random numbers is now provided by the OpenSSL rand generator.</p>
<p>All the cryptographic algorithms presented in the 2.2.1 tutorials, such as AES, Hash, HMAC and RSA, are provided by the OpenSLL library as well, so if you need them in your application, study the OpenSLL documentation and examples.</p>

<h2 id="shell" name="shell">Shell</h2>
<p>The Creating Notifications use case can now be found in the Application Framework module instead of the 2.2.1 Shell module. The notification is created with the <span style="font-family: Courier New,Courier,monospace">notification_create()</span> function, which takes the notification type (Regular or Ongoing) as its parameter. This allowed the reduction of all the different <span style="font-family: Courier New,Courier,monospace">Notify()</span> functions from the 2.2.1 API to 1 <span style="font-family: Courier New,Courier,monospace">notification_post()</span> function.</p>
<pre class="prettyprint">
notification_h notification;

// The NOTIFICATION_TYPE_ONGOING can also be used here
notification = notification_create(NOTIFICATION_TYPE_NOTI); 
notification_set_text(notification, NOTIFICATION_TEXT_TYPE_TITLE, &quot;I'm Title&quot;, &quot;IDS_APP_BODY_IM_TITLE&quot;, NOTIFICATION_VARIABLE_TYPE_NONE);
notification_post(notification);
</pre>

<h2 id="social" name="social">Social</h2>
<h3 id="account" name="account">ACCOUNT MANAGEMENT</h3>
<p>In the 2.3 API, there is no account manager instance. The connection with the accounts database has to be established instead. The constructor for the account is replaced with the <span style="font-family: Courier New,Courier,monospace">account_create()</span> function. The <span style="font-family: Courier New,Courier,monospace">AddAccount()</span> function from the 2.2.1 API is covered by the <span style="font-family: Courier New,Courier,monospace">account_insert_to_db()</span> function. Differently from the old function, the new one takes an additional parameter, the pointer to the account ID. This parameter is filled with the ID associated with the account inside the database.</p>
<pre class="prettyprint">
account_h account = NULL;
int account_id = 0;

account_connect(); // Establish the connection with the account database

account_create(&amp;account);

account_insert_to_db(account, &amp;account_id);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">SetExtendedData()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">account_set_custom()</span> function and some other functions provided to set each of the account additional information (for example: <span style="font-family: Courier New,Courier,monospace">account_set_user_name()</span>).</p>
<pre class="prettyprint">
account_set_user_name(account, &quot;account user name&quot;);

account_set_display_name(account, &quot;account display name&quot;);

account_set_domain_name(account, &quot;account domain name&quot;);

account_set_email_address(account, &quot;account email address&quot;);

account_set_custom(account, &quot;key1&quot;, &quot;value1&quot;);
</pre>

<p>Instead of a single <span style="font-family: Courier New,Courier,monospace">UpdateAccount()</span> function, the 2.3 API has <span style="font-family: Courier New,Courier,monospace">account_update_to_db_by_id()</span>, <span style="font-family: Courier New,Courier,monospace">account_update_to_db_by_id_ex()</span>, and
<span style="font-family: Courier New,Courier,monospace">account_update_to_db_by_user_name()</span> functions to update the account information.</p>
<pre class="prettyprint">
account_update_to_db_by_id(account, account_id);

// OR

// Updates the account without checking provider's permission
account_update_to_db_by_id_ex(account, account_id); 

// OR

account_update_to_db_by_user_name(account, &quot;account user name&quot;, &quot;package name for the user name&quot;);
</pre>

<p>The removal of the account is now covered by the <span style="font-family: Courier New,Courier,monospace">account_delete_from_db_by_id()</span>, <span style="font-family: Courier New,Courier,monospace">account_delete_from_db_by_package_name()</span>, and <span style="font-family: Courier New,Courier,monospace">account_delete_from_db_by_user_name()</span> functions, instead of the <span style="font-family: Courier New,Courier,monospace">RemoveAccount()</span> function.</p>
<pre class="prettyprint">
account_delete_from_db_by_id(account_id);

// OR

account_delete_from_db_by_package_name(&quot;package name for the user name&quot;)

// OR

account_delete_from_db_by_user_name(&quot;account user name&quot;, &quot;package name for the user name&quot;);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">GetAccountsByAccountProviderN()</span> functionality is now described in the <a href="../../../../org.tizen.tutorials/html/native/social/account_tutorial_n.htm#retrieve">Retrieving Accounts by Account Provider</a> use case in the 2.3 Account Tutorial. Mainly, the <span style="font-family: Courier New,Courier,monospace">account_query_account_by_package_name()</span> function is responsible for that. Instead of returning the list of accounts, it invokes a callback, specified as its first parameter, for every account that matches given package name.</p>
<pre class="prettyprint">
account_query_account_by_package_name(account_callback, &quot;The package name of the account provider&quot;, NULL);

static bool account_callback(account_h account, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Called once for each account in the database matching the given package name.
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">GetAccountProvidersByCapabilityN()</span> method is covered by the <span style="font-family: Courier New,Courier,monospace">account_type_query_by_provider_feature()</span> function. It does not return the list of account providers, but it invokes the callback specified as the first parameter for each account type that supports the mentioned capability. It takes the capability type as its second parameter. For example, the <span style="font-family: Courier New,Courier,monospace">&quot;http://tizen.org/account/capability/contact&quot;</span> or <span style="font-family: Courier New,Courier,monospace">ACCOUNT_SUPPORTS_CAPABILITY_CONTACT</span> can be used.</p>
<pre class="prettyprint">
account_type_query_by_provider_feature(account_type_callback, &quot;http://tizen.org/account/capability/contact&quot;, NULL);

static bool account_type_callback(account_type_h account_type, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Called once for each account type in the database matching given provider capability.
}
</pre>

<h3 id="address" name="address">ADDRESS BOOK</h3>
<p>The Contact module in the 2.3 API has a similar mechanism as the Account Manager module. Again, like it was with accounts, there is no addressbook manager instance. The connection with the contacts database has to be established instead. Use the <span style="font-family: Courier New,Courier,monospace">contacts_connect()</span> function for this purpose.</p>
<pre class="prettyprint">
contacts_connect();

contacts_disconnect();
</pre>
<p>When the work with contacts is finished, the connection with the database must be closed with the <span style="font-family: Courier New,Courier,monospace">contacts_disconnect()</span> function.</p>


<h4>RETRIEVING PERSON INFORMATION</h4>
<p>The <span style="font-family: Courier New,Courier,monospace">GetAllPersonsN()</span> functionality is now covered by the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function. It can be used to retrieve all types of records stored in the contacts database. To obtain the list of all persons, the <span style="font-family: Courier New,Courier,monospace">_contacts_person._uri</span> value must be used as its first parameter.</p>
<pre class="prettyprint">
contacts_list_h list = NULL;

contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;list);
</pre>
<p> Note that the first &quot;0&quot; defines the offset - the starting index for getting results. The second one defines the limit for the number of obtained results. In case of the &quot;0&quot; value, all the records are obtained.</p>

<p>To move through the retrieved list, use the Contacts&#39; <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__LIST__MODULE.html">List</a> submodule API. It is very similar to the matching functionality from the 2.2.1 API. In the 2.3 API, the <span style="font-family: Courier New,Courier,monospace">MoveNext()</span> function is covered by the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> function. The <span style="font-family: Courier New,Courier,monospace">GetCurrent()</span> functionality is provided by the <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> function. No enumerator is required. All the actions are called directly for the list, so the handle to that list is always passed as the first parameter for every function from the List submodule.</p>
<pre class="prettyprint">
int list_count, counter;
contacts_record_h record;
char *display_name;
char *image_thumbnail_path;

contacts_list_get_count(list, &amp;list_count);
for (counter = 0; counter &lt; list_count; counter++)
{
&nbsp;&nbsp;&nbsp;contacts_list_get_current_record_p(list, &amp;record);
&nbsp;&nbsp;&nbsp;contacts_record_get_str(record, _contacts_person.display_name, &amp;display_name);
&nbsp;&nbsp;&nbsp;contacts_record_get_str(record, _contacts_person.image_thumbnail_path, &amp;image_thumbnail_path);

&nbsp;&nbsp;&nbsp;// Manage the display name and thumbnail path for the currently obtained contact here

&nbsp;&nbsp;&nbsp;contacts_list_next(list);
}
</pre>

<p>There is no <span style="font-family: Courier New,Courier,monospace">GetFavoritePersonsN()</span> function anymore. To retrieve the list of all favorite contacts, a query filter must be used. The filter is created with the <span style="font-family: Courier New,Courier,monospace">contacts_filter_create()</span> function. To query for favorite contacts, the following condition must be added to the filter:</p>
<pre class="prettyprint">
contacts_filter_h filter = NULL;

contacts_filter_create(_contacts_person._uri, &amp;filter);
contacts_filter_add_bool(filter, _contacts_person.is_favorite, true);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">filter</span> is the handle to the filter instance. The <span style="font-family: Courier New,Courier,monospace">_contacts_person.is_favorite</span> parameter defines which field the filter operates on. If you want to find only favorite contacts, you define the <span style="font-family: Courier New,Courier,monospace">is_favorite</span> field and set it to <span style="font-family: Courier New,Courier,monospace">true</span> (the third parameter). The whole process of searching the contacts is described below, under the SEARCHING PERSONS USING COMPLEX CONDITIONS use case.</p>

<h4>MANAGING FAVORITES</h4>
<p>The <span style="font-family: Courier New,Courier,monospace">SetPersonAsFavorite()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_record_set_bool()</span> function. This new function can be used to set the Boolean property by using the property ID and the desired Boolean value. It can be done during the creation of the contact record or applied to the contact that already is placed in the database. In the second case, the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function has to be called after changing the value, to update this value in the database record.</p>
<pre class="prettyprint">
contacts_record_h contact = NULL;

contacts_record_create(_contacts_contact._uri, &amp;contact);
contacts_record_set_bool(contact, _contacts_contact.is_favorite, true);
</pre>
<p>To remove a contact from the favorite contacts, the same function must be used, with <span style="font-family: Courier New,Courier,monospace">false</span> as its third parameter. After this operation, the contact record has to be updated in the database with the <span style="font-family: Courier New,Courier,monospace">contacts_db_update_record()</span> function.</p>
<pre class="prettyprint">
contacts_record_set_bool(contact, _contacts_contact.is_favorite, false);

contacts_db_update_record(contact);
</pre>

<h4>MANAGING PRIMARY PHONE NUMBER</h4>
<p>Retrieving the default phone number of some person or a single contact is now a little different. In the 2.2.1 API, the first step was to obtain the list of all the person&#39;s contacts with the <span style="font-family: Courier New,Courier,monospace">GetContactsByPersonN()</span> function. Then, the specified contact instance was retrieved from the list with the <span style="font-family: Courier New,Courier,monospace">GetAt()</span> function. The next step was to invoke the Contact method called <span style="font-family: Courier New,Courier,monospace">GetValuesN()</span> with the <span style="font-family: Courier New,Courier,monospace">CONTACT_MPROPERTY_ID_PHONE_NUMBERS</span> enumeration value as its parameter, to get the list of all phone numbers attached to that particular contact. The primary phone number of that contact was stored as the first one on the list, so it was obtained with the <span style="font-family: Courier New,Courier,monospace">GetAt(0)</span> method called on the phone number list. In the 2.3 API, to get the default phone number for the person&#39;s particular contact, use the querying functionality. First of all, query for the contacts linked to the given person. When the list with those contacts is obtained, use the ID of the chosen contact. For the query, use the <span style="font-family: Courier New,Courier,monospace">contacts_record_get_child_record_at_p()</span> function. It returns the child record of the given parent record. If there are multiple child records entities, the index specifies which record is obtained.</p>
<pre class="prettyprint">
int person_id, contact_id;
contacts_record_h contact, contact_default_number;
contacts_query_h query, query2;
contacts_filter_h filter, filter2;
contacts_list_h associated_contacts, default_numbers;

// Getting the ID of the managed person
contacts_record_get_int(person, _contacts_person.id, &amp;person_id); 

contacts_query_create(_contacts_contact._uri, &amp;query);
contacts_filter_create(_contacts_contact._uri, &amp;filter);
contacts_filter_add_int(filter, _contacts_contact.person_id, CONTACTS_MATCH_EQUAL, person_id);
contacts_query_set_filter(query, filter);

// Obtain the list of contacts associated with the managed person
contacts_db_get_records_with_query(query, 0, 0, &amp;associated_contacts); 

contacts_list_next(associated_contacts); // Move to the second contact of the person (like in 2.2.1)
// Get the contact record to search for its default phone number
contacts_list_get_current_record_p(associated_contacts, &amp;contact); 

// Getting the ID of the managed person
contacts_record_get_int(contact, _contacts_contact.id, &amp;contact_id); 

contacts_query_create(_contacts_contact_number._uri, &amp;query2);
contacts_filter_create(_contacts_contact_number._uri, &amp;filter2);
contacts_filter_add_bool(filter2, _contacts_contact_number.is_primary_default, true);
contacts_query_set_filter(query2, filter2);
contacts_db_get_records_with_query(query2, 0, 0, &amp;default_numbers);

contacts_list_get_current_record_p(default_numbers, &amp;contact_default_number);

// Release unnecessary resources
contacts_list_destroy(associated_contacts, true);
contacts_list_destroy(default_numbers, true);
contacts_filter_destroy(filter);
contacts_filter_destroy(filter2);
contacts_query_destroy(query);
contacts_query_destroy(query2);
</pre>


<p>It is also possible to get person&#39;s default number by using the <span style="font-family: Courier New,Courier,monospace">contacts_person_get_default_property()</span> function with <span style="font-family: Courier New,Courier,monospace">CONTACTS_PERSON_PROPERTY_NUMBER</span> as a first parameter. It returns the ID of the number record that is currently set to be the default number for the given person.</p>
<pre class="prettyprint">
int person_default_number_id;
contacts_record_h person_default_number = NULL;

contacts_person_get_default_property(CONTACTS_PERSON_PROPERTY_NUMBER, person_id, &amp;person_default_number_id);

contacts_db_get_record(_contacts_person_number._uri, person_default_number_id, &amp;person_default_number);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">SetAsPrimaryPhoneNumber()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_person_set_default_property()</span>. You have to pass the ID of the contact and the ID of the number record that must be set as default.</p>
<pre class="prettyprint">
contacts_person_set_default_property(CONTACTS_PERSON_PROPERTY_NUMBER, person_id, person_default_number_id);
</pre>

<h4>SEARCHING PERSONS USING COMPLEX CONDITIONS</h4>
<p>To search for the contacts matching some complex conditions, use filters as in the 2.2.1 API. It is still possible to add different conditions to the filter with the proper API functions and connect them by using operators between them. The <span style="font-family: Courier New,Courier,monospace">SearchN()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_records_with_query()</span> function. Familiarize yourself with the new filter syntax by reading the documentation and tutorials.</p>
<pre class="prettyprint">
contacts_list_h list = NULL;
contacts_query_h query = NULL;
contacts_filter_h filter = NULL;

contacts_query_create(_contacts_person._uri, &amp;query);
contacts_filter_create(_contacts_person._uri, &amp;filter);

contacts_filter_add_str(filter, _contacts_person.display_name, CONTACTS_MATCH_CONTAINS, &quot;John&quot;);
contacts_filter_add_operator(filter, CONTACTS_FILTER_OPERATOR_AND);
contacts_filter_add_bool(filter, _contacts_person.is_favorite, true);

contacts_query_set_filter(query, filter);
contacts_db_get_records_with_query(query, 0, 0, &amp;list);
</pre>
<p>The iteration through each person on the list was described in the RETRIEVING PERSON INFORMATION use case above.</p>

<h4>CREATING AND MANAGING CATEGORIES AND CONTACTS</h4>
<p>In the 2.3 API, the categories are called groups. There is one function to create both contact and group - <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span>. The first parameter of this function defines whether it is a group or contact. After the record is created, different values can be set by using specified API functions. When the record is ready, insert it to the database with the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function. The <span style="font-family: Courier New,Courier,monospace">AddMemberToCategory()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_group_add_contact()</span> function. As in the 2.2.1 API, this function also takes the group ID and contact ID as its parameters.</p>
<pre class="prettyprint">
contacts_record_h group = NULL;
contacts_record_h contact = NULL;
int added_group_id = -1;
int contact_id = -1;

// Create and add new group
contacts_record_create(_contacts_group._uri, &amp;group);

contacts_record_set_str(group, _contacts_group.image_path, your_group_image_path);
contacts_record_set_str(group, _contacts_group.ringtone_path, your_ringtone_path);

contacts_db_insert_record(group, &amp;added_group_id);

// Create and add new contact
contacts_record_create(_contacts_contact._uri, &amp;contact);
contacts_record_set_str(contact, _contacts_contact.display_name, your_contact_display_name);
contacts_record_set_str(contact, _contacts_contact.ringtone_path, your_ringtone_path);

contacts_db_insert_record(contact, &amp;contact_id);

// Add the contact to the group
contacts_group_add_contact(group, contact_id);
</pre>

<h4>DISPLAYING ALL CATEGORIES AND THEIR MEMBERS</h4>
<p>In the 2.3 API, the <span style="font-family: Courier New,Courier,monospace">GetAllCategoriesN()</span> function has been replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> function. This function enables you to get all the records of a specified type. To retrieve the list of all groups, the <span style="font-family: Courier New,Courier,monospace">_contacts_group._uri</span> must be used as its parameter. To move through the list, use the <span style="font-family: Courier New,Courier,monospace">contacts_list_next()</span> or <span style="font-family: Courier New,Courier,monospace">contacts_list_prev()</span> function. The <span style="font-family: Courier New,Courier,monospace">GetCurrent()</span> function is called <span style="font-family: Courier New,Courier,monospace">contacts_list_get_current_record_p()</span> in the 2.3 API. After getting the record, it is possible to get its properties using 2.3 API functions, for example, <span style="font-family: Courier New,Courier,monospace">contacts_record_get_str_p(record, _contacts_group.name, &amp;name)</span> to obtain the name of the group. The function is similar to the <span style="font-family: Courier New,Courier,monospace">GetValue()</span> function in the 2.2.1 API.</p>
<pre class="prettyprint">
contacts_list_h groups_list = NULL;
contacts_record_h single_group = NULL;
int groups_count, groups_counter, group_id;
contacts_query_h query = NULL;
contacts_filter_h filter = NULL;
contacts_list_h group_members = NULL;
int group_members_count, group_members_counter, member_id;
contacts_record_h member = NULL;
char *member_display_name, group_name;

contacts_db_get_all_records(_contacts_group._uri, 0, 0, &amp;groups_list);
contacts_list_get_count(groups_list, &amp;groups_count);

for (groups_counter = 0; groups_counter &lt; groups_count, groups_counter++)
{
&nbsp;&nbsp;&nbsp;contacts_list_get_current_record_p(groups_list, single_group);
&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(single_group, _contacts_group.id, &amp;group_id);
&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(single_group, _contacts_group.name, &amp;group_name);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Group name: %s", group_name);

&nbsp;&nbsp;&nbsp;contacts_query_create(_contacts_person_group_assigned._uri, &amp;query);
&nbsp;&nbsp;&nbsp;contacts_filter_create(_contacts_person_group_assigned._uri, &amp;filter);
&nbsp;&nbsp;&nbsp;contacts_filter_add_int(filter, _contacts_person_group_assigned.group_id, CONTACTS_MATCH_EQUAL, group_id);
&nbsp;&nbsp;&nbsp;contacts_query_set_filter(query, filter);
&nbsp;&nbsp;&nbsp;contacts_db_get_records_with_query(query, 0, 0, &amp;group_members);

&nbsp;&nbsp;&nbsp;contacts_list_get_count(group_members, &amp;group_members_count);

&nbsp;&nbsp;&nbsp;for (group_members_counter = 0; group_members_counter &lt; group_members_count; group_members_counter++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_list_get_current_record_p(group_members, member);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_int(member, _contacts_person_group_assigned.person_id, &amp;member_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Member id: %d&quot;, member_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_get_str_p(member, _contacts_person_group_assigned.display_name, &amp;member_display_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Member display name: %s&quot;, member_display_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_list_next(group_members);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;contacts_list_next(groups_list);
}
</pre>

<h4>RETRIEVING CONTACTS AND CATEGORIES STORED ON THE DEVICE</h4>
<p>The <span style="font-family: Courier New,Courier,monospace">CreateAddressbookN()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">contacts_record_create()</span> function. To create the address book, the <span style="font-family: Courier New,Courier,monospace">_contacts_address_book._uri</span> must be used as a parameter for this function. Add this record to the database by using the <span style="font-family: Courier New,Courier,monospace">contacts_db_insert_record()</span> function. After creating the address book, you already have the handle to it. If you want to get this address book later, query for it. The <span style="font-family: Courier New,Courier,monospace">DeleteAddressbook()</span> function is replaced with the <span style="font-family: Courier New,Courier,monospace">contacts_db_delete_record()</span>. It removes the address book from the device by deleting it from the database.</p>  
<p>To get all the address books stored on the device, use the <span style="font-family: Courier New,Courier,monospace">contacts_db_get_all_records()</span> again, instead of the <span style="font-family: Courier New,Courier,monospace">GetAllAddressbooksN()</span> function. The parameter is <span style="font-family: Courier New,Courier,monospace">_contacts_address_book._uri</span>. This returns the list of all the address book records stored on the device. The navigation through the list is done the same way as it was in case of group list and contact list. 
</p>

<h4>SEARCHING CONTACTS BY NAME</h4>
<p>The <span style="font-family: Courier New,Courier,monospace">SearchContactsByName()</span> function is covered by the functionality of the filters and queries in the 2.3 API. It is described in the <a href="../../../../org.tizen.tutorials/html/native/social/contact_tutorial_n.htm#get_contact">Getting Contacts</a> use case of the 2.3 Contacts Tutorial. The filter for the query has to be created and the condition for <span style="font-family: Courier New,Courier,monospace">_contacts_person.display_name</span> must be added to this filter. Then it is possible to query all the contacts stored on the device to look for the given display name. The list of matching contacts is returned. All the operations on the retrieved list have been described above.</p>

<h4>GETTING ADDRESS BOOK CHANGE NOTIFICATIONS</h4>
<p>The 2.2.1 API provided listeners to get notifications about contacts and groups changes. The 2.3 API delivers the <span style="font-family: Courier New,Courier,monospace">contacts_db_add_changed_cb()</span> function. Using this function, it is possible to register callbacks for record changes. It can be done for each type of records, including contacts and groups. You can check the code example in the <a href="../../../../org.tizen.tutorials/html/native/social/contact_tutorial_n.htm#monitor_contact">Monitoring Person Changes</a> use case of the Contacts Tutorial for the 2.3 API.</p>

<h3 id="calendar" name="calendar"> CALENDAR BOOK </h3>
<p>The 2.3 Calendar API model is similar to the 2.3 Contacts model.</p>

<h4>ADDING CALENDARS</h4>
<p>Instead of using the constructor and <span style="font-family: Courier New,Courier,monospace">AddCalendar()</span> function to create a new calendar on the device, the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function with <span style="font-family: Courier New,Courier,monospace">_calendar_book._uri</span> must be used to create the calendar and the <span style="font-family: Courier New,Courier,monospace">calendar_db_insert_record()</span> function to add it to the device database. There is no more <span style="font-family: Courier New,Courier,monospace">AddEvent()</span> function. In the 2.3 API, you can create an event as a separate calendar database record and then set its <span style="font-family: Courier New,Courier,monospace">calendar_book_id</span> field to point to the calendar that you want it to be correlated with. </p>
<pre class="prettyprint">
calendar_record_h calendar_book = NULL;
int book_id = -1;

calendar_connect();
calendar_record_create(_calendar_book._uri, &amp;calendar_book);

calendar_db_insert_record(calendar_book, &amp;book_id);
</pre>

<h4>ADDING CALENDAR EVENTS</h4>
<p>The event is created with the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function. After this operation, all the properties of the events can be set similarly like in the 2.2.1 API. The summary (subject in 2.2.1) can be set with the <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> function, like other string type values. Other 2.2.1 and 2.3 function mappings in case of the calendar event are as follows:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">SetStartAndEndTime()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">SetFrequency()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">calendar_record_set_int(..., _calendar_event.freq, ...)</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">SetUntil()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">calendar_record_set_int(..., _calendar_event. until_time, ...)</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">SetInterval()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">calendar_record_set_int(..., _calendar_event.interval, ...)</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">SetDayOfWeek()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">calendar_record_set_str(..., _calendar_event.byday, ...)</span></li>
</ul>

<h4>ADDING CALENDAR TASKS</h4>
<p>The creation of tasks is possible with the <span style="font-family: Courier New,Courier,monospace">calendar_record_create()</span> function. The parameter is <span style="font-family: Courier New,Courier,monospace">_calendar_todo._uri</span>. Setting all the properties of a task does not require a different function for each parameter anymore. The 2.3 API provides a few functions to set properties depending on their types:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">calendar_record_set_str()</span> to set all the string values</li>
	<li><span style="font-family: Courier New,Courier,monospace">calendar_record_set_int()</span> to set all the integer values</li>
	<li><span style="font-family: Courier New,Courier,monospace">calendar_record_set_caltime()</span> to set all the <span style="font-family: Courier New,Courier,monospace">calendar_time_s</span> values</li>
</ul>
<p>The rest of such functions and the list of properties of a task can be found in the documentation for the 2.3 API.</p>

<h4>REMOVING CALENDAR EVENTS</h4>
<p>The <span style="font-family: Courier New,Courier,monospace">RemoveEvent()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">calendar_db_delete_record()</span> function. It takes the ID of an event as its parameter and also requires the type of the record, in this case the <span style="font-family: Courier New,Courier,monospace">_calendar_event._uri</span> type.</p>

<h4>UPDATING CALENDAR TASKS</h4>
<p>The process of updating calendar tasks using the 2.3 API is the same as updating an event, which is described in the Updating an Event section of the Calendar Tutorial for the 2.3 API. The <span style="font-family: Courier New,Courier,monospace">UpdateTodo()</span> function is now covered by the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> function. As can be seen, the function does not specify what kind of a record is actually being updated. The only parameter it takes is the record handle. The function recognizes what kind of a record ii is dealing with internally and updates it in the database. Before using the updating function, the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_record()</span> function with <span style="font-family: Courier New,Courier,monospace">_calendar_todo._uri</span> parameter must be used to obtain the record that you want to update. Then some properties of the record can be changed with the set of functions mentioned above. Finally, when the record is updated, the <span style="font-family: Courier New,Courier,monospace">calendar_db_update_record()</span> is used to store the changes in the database.</p>

<h4>SEARCHING EVENT INSTANCES</h4>
<p>The process of filtering and querying for the calendar records is pretty much the same as this process for the contacts database. Basically, also the query and the filter have to be created. Filtering conditions are added by using the <span style="font-family: Courier New,Courier,monospace">calendar_filter_add_str()</span> functions and the <span style="font-family: Courier New,Courier,monospace">calendar_filter_add_operator()</span> function to connect different conditions. The <span style="font-family: Courier New,Courier,monospace">SearchN()</span> functionality is covered by the <span style="font-family: Courier New,Courier,monospace">calendar_db_get_records_with_query()</span> function.</p>

<h4>GETTING CALENDAR CHANGE NOTIFICATIONS</h4>
<p>Similarly, like in the previous section about contacts, several callbacks can be set to monitor the calendar changes. The matching functionality of the <span style="font-family: Courier New,Courier,monospace">OnCalendarEventsChanged()</span> and <span style="font-family: Courier New,Courier,monospace">OnCalendarTodosChanged()</span> listeners from the 2.2.1 API is now provided by the <span style="font-family: Courier New,Courier,monospace">calendar_db_add_changed_cb()</span> function. It enables you to set callbacks invoked when some changes in calendar events or tasks (todos) are made.</p>

<h2 id="system" name="system">System</h2>
<h3 id="alarm" name="alarm">CREATING A DAILY ALARM</h3>
<p>The daily alarm creation functionality is now under Application Framework -&gt; Application -&gt; Alarm submodule. The tutorial for the 2.3 API Alarm module can be found <a href="../../../../org.tizen.tutorials/html/native/app_framework/application_tutorial_n.htm">here</a>.</p>
<p>Instead of creating a class with the implementation of the <span style="font-family: Courier New,Courier,monospace">Tizen::System::IAlarmEventListener</span> interface in it, the 2.3 API simply provides some functions to set the alarm. To set the alarm to be launched at the specified time, use the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_at_date()</span> function.</p>

<h3 id="power" name="power">POWER MANAGER </h3>
<p>The 2.3 tutorial for this feature can be found in the <a href="../../../../org.tizen.tutorials/html/native/system/device_tutorial_n.htm#power">Controlling the Power State</a> use case of the Attached Device Tutorial.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">KeepScreenOnState()</span> function matches 2 functions in the 2.3 API:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">device_power_wakeup()</span> function sets the current power state to normal or dim state, depending on the given parameter.</li>
<li><span style="font-family: Courier New,Courier,monospace">device_power_request_lock()</span> function allows you to lock the current state for the specified time.</li></ul>
<p>The Controlling the Display use case describes how to get and set the brightness like it was done using the <span style="font-family: Courier New,Courier,monospace">GetScreenBrightness()</span> and <span style="font-family: Courier New,Courier,monospace">SetScreenBrightness()</span> functions in the 2.2.1 API.  There are similar functions in the 2.3 API: <span style="font-family: Courier New,Courier,monospace">device_display_get_brightness()</span> and <span style="font-family: Courier New,Courier,monospace">device_display_set_brightness()</span>.</p>
<p>The Getting the Battery Level process is described under Retrieving Battery Information in the Device Tutorial for the 2.3 API. The functions map as follows:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">GetCurrentLevelInPercentage()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">device_battery_get_percent()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">IsCharging()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">device_battery_is_charging()</span></li>
</ul>

<h3 id="setting" name="setting">GETTING SETTING INFORMATION</h3>
<p>This process is almost the same in both 2.2.1 and 2.3 APIs. The 2.3 tutorial for this is named <a href="../../../../org.tizen.tutorials/html/native/system/system_setting_tutorial_n.htm">System Setting Tutorial</a>.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">GetValue()</span> function has been replaced with multiple <span style="font-family: Courier New,Courier,monospace">system_settings_get_value_*</span> functions depending on the type of value to be obtained. For example, to obtain a string value, use the <span style="font-family: Courier New,Courier,monospace">system_settings_get_value_string()</span> function.</p>

<h3 id="system_info" name="system_info">GETTING SYSTEM INFORMATION</h3>
<p>The 2.3 tutorial for this section is under <a href="../../../../org.tizen.tutorials/html/native/system/sysinfo_tutorial_n.htm">Device-specific System Information Tutorial</a>.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">GetValue()</span> function for obtaining the system information has also been replaced with various functions like in the System Setting model. For example, to obtain the string value for some System Information, use the <span style="font-family: Courier New,Courier,monospace">system_info_get_platform_string()</span> function.</p>

<h3 id="time" name="time">GETTING THE SYSTEM TIME</h3>
Instead of <span style="font-family: Courier New,Courier,monospace">SystemTime::GetCurrentTime</span>, you can use:
<ul>
    <li><span style="font-family: Courier New,Courier,monospace">i18n_ucalendar_get_now()</span> from the i18n module </li>
    <li><span style="font-family: Courier New,Courier,monospace">g_date_time_new_now()</span> from <a href="https://developer.gnome.org/glib/2.38/glib-GDateTime.html#g-date-time-new-now" target="blank">GLib</a> </li>
    <li>Functions from <a href="http://www.eglibc.org/home" target="blank">Eglibc</a> (a variant of glibc)</li>
</ul>

<h3 id="vibrate" name="vibrate">VIBRATING THE DEVICE</h3>
<p>This section is covered by the <a href="../../../../org.tizen.tutorials/html/native/system/device_tutorial_n.htm#haptic">Controlling Haptic Devices</a> use case of the Device Tutorial for the 2.3 API.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">Start()</span> function is now called <span style="font-family: Courier New,Courier,monospace">device_haptic_vibrate()</span>. To stop the vibrations, use the <span style="font-family: Courier New,Courier,monospace">device_haptic_stop()</span> function.</p>

<pre class="prettyprint">
haptic_device_h device;
device_haptic_open(0, &amp;device);

int duration = 1000;
int feedback = 20; // [0-100], vibration intensity
haptic_effect_h effect;

device_haptic_vibrate(device, duration, feedback, &amp;effect); // Also obtains the played effect handle

// Use the effect handle to stop the effect
device_haptic_stop(device, effect);
</pre>

<h2 id="telephony" name="telephony">Telephony</h2>
<h3 id="call" name="call">GETTING CURRENT CALL INFORMATION</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">GetCurrentCallStatus()</span> function is now covered by the  <span style="font-family: Courier New,Courier,monospace">telephony_call_get_voice_call_state()</span> function.</p>

<h3 id="network" name="network">GETTING NETWORK INFORMATION</h3>
<p>The old and new functions match as follows:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">IsCallServiceAvailable()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_type()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">IsDataServiceAvailable()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_type()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">IsRoaming()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_roaming_status()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetMnc()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_mnc()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetMcc()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_mcc()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetCellId()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_cell_id()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetLac()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_lac()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetOperatorName()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_network_name()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetRssi()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_network_get_rssi()</span></li>
</ul>

<h3 id="status" name="status">GETTING NOTIFICATIONS OF CALL STATUS CHANGES</h3>
<p>Listening for call status changes is similar in both 2.2.1 and 2.3 APIs. The 2.2.1 API provided the <span style="font-family: Courier New,Courier,monospace">OnTelephonyCallStatusChangedN()</span> event handler to listen for those changes. In the 2.3 API, a callback function can be registered with the <span style="font-family: Courier New,Courier,monospace">telephony_set_noti_cb()</span> function, to be triggered when the state of the call changes. The second parameter has to be <span style="font-family: Courier New,Courier,monospace">TELEPHONY_NOTI_VOICE_CALL_STATE</span> to define that the callback is registered for call status changes.</p>

<h3 id="net_status" name="net_status">GETTING NOTIFICATIONS OF NETWORK STATUS CHANGES</h3>
<p>This case is almost the same as the previous one. The <span style="font-family: Courier New,Courier,monospace">OnTelephonyNetworkStatusChanged()</span> listener is replaced with a callback registered using the <span style="font-family: Courier New,Courier,monospace">telephony_set_noti_cb()</span> function with <span style="font-family: Courier New,Courier,monospace">TELEPHONY_NOTI_NETWORK_SERVICE_STATE</span> as its second parameter.</p>

<h3 id="sim" name="sim">GETTING SIM CARD INFORMATION</h3>
<p>The SIM card is determined by the <span style="font-family: Courier New,Courier,monospace">telephony_h</span> handle, which is obtained from the <span style="font-family: Courier New,Courier,monospace">telephony_init()</span> function. Information stored on the SIM card can be retrieved by using the following functions:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">IsAvailable()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_sim_get_state()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetMnc()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_sim_get_operator()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetMcc()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_sim_get_operator()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetSpn()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_sim_get_spn()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">GetIccId()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">telephony_sim_get_icc_id()</span></li>
</ul>


<h2 id="text" name="text">Text</h2>
<p> In the 2.3 API, the conversion between Unicode and UTF-8 formats is covered by the EFL functionality. The Eina library provides:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">eina_unicode_utf8_to_unicode()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">eina_unicode_unicode_to_utf8()</span></li>
	<li>Other <span style="font-family: Courier New,Courier,monospace">eina_unicode_*</span> utility functions</li>
</ul>

<h2 id="uix" name="uix">UIX</h2>
<h3 id="sensors" name="sensors">GETTING DATA FROM DEVICE SENSORS</h3>
<p>The old and new functions match as follows:</p>
<ul><li><p><span style="font-family: Courier New,Courier,monospace">IsAvailable()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">sensor_is_supported()</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">GetMinInterval()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">sensor_get_min_interval()</span></p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">AddSensorListener()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">sensor_create_listener()</span>, <span style="font-family: Courier New,Courier,monospace">sensor_listener_set_event_cb()</span>, and <span style="font-family: Courier New,Courier,monospace">sensor_listener_start()</span> (receive events in the callback, check sensor type in the event handler, and use the <span style="font-family: Courier New,Courier,monospace">sensor_event_s data</span>)</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">RemoveSensorListener()</span> -&gt; <span style="font-family: Courier New,Courier,monospace">sensor_listener_unset_event_cb()</span>, <span style="font-family: Courier New,Courier,monospace">sensor_listener_stop()</span>, and <span style="font-family: Courier New,Courier,monospace">sensor_destroy_listener()</span></p></li></ul>

<h3 id="double" name="double">DETECTING DOUBLE-TAPS</h3>
<p>In the 2.2.1 API:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">Tizen::Uix::Sensor::Motion* pMotion</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">pMotion-&gt;SetEnabled(MOTION_TYPE_DOUBLETAP)</span></li>
</ul>

<p>In the 2.3 API:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">gesture_h gesture;</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">gesture_create()</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">gesture_start_recognition(gesture, GESTURE_DOUBLE_TAP, ...)</span></li>
</ul>
<p>For more information, see the <a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__CONTEXT__GESTURE__MODULE.html">Gesture Recognition API Reference</a>.</p>


<h2 id="web" name="web">Web</h2>
<h3 id="json" name="json">JSON</h3>
<p>In the 2.2.1 API, the <span style="font-family: Courier New,Courier,monospace">Tizen::Web::Json</span> namespace was used.</p>
<p>In the 2.3 API, the <a href="https://developer.gnome.org/json-glib/" target="blank">Json-glib library</a> is used.</p>

<h3 id="web_controls" name="web_controls">WEB CONTROLS</h3>
<p>In the 2.2.1 API, the <span style="font-family: Courier New,Courier,monospace">Tizen::Web::Controls::Web</span> namespace was used.</p>
<p>In the 2.3 API, the WebView module provides those functionalities.</p>

<h4>INITIALIZING THE WEB CONTROL INSTANCE</h4>
<p> In 2.2.1 API, it was done this way: </p>
<ol>
	<li>Create the <span style="font-family: Courier New,Courier,monospace">Tizen::Web::Controls::Web *__pWeb</span> object.</li>
	<li>Set the shape with the <span style="font-family: Courier New,Courier,monospace">__pWeb->Construct()</span> function.</li>
	<li>Add the control to a window with the <span style="font-family: Courier New,Courier,monospace">form-&gt;AddControl(__pWeb)</span> function.</li>
</ol> 
<p>Initializing in 2.3 is vastly different. A very brief outline is below. For more information, see the tutorial.</p>
<ol>
	<li>Basic structure (example):
	<pre class="prettyprint">
typedef struct _Browser_Window
{ 
&nbsp;&nbsp;&nbsp;Evas_Object *elm_window; 
&nbsp;&nbsp;&nbsp;Evas_Object *ewk_view; 
}
Browser_Window

Browser_Window *window; 
</pre></li>
	
	<li>Create the window with the <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> function.</li>
	<li>Set window geometry callbacks (<span style="font-family: Courier New,Courier,monospace">window_geometry_get</span> and <span style="font-family: Courier New,Courier,monospace">window_geometry_set</span>) for the window&#39;s smart class.</li>
	<li>Use the <span style="font-family: Courier New,Courier,monospace">evas_object_geometry_get()</span>, <span style="font-family: Courier New,Courier,monospace">evas_object_move()</span>, and  <span style="font-family: Courier New,Courier,monospace">evas_object_resize()</span> functions to react to events:
	<pre class="prettyprint">
static Ewk_View_Smart_Class *miniBrowserViewSmartClass() 
{ 
&nbsp;&nbsp;&nbsp;static Ewk_View_Smart_Class ewkViewClass = EWK_VIEW_SMART_CLASS_INIT_NAME_VERSION(&quot;MiniBrowser_View&quot;); 

&nbsp;&nbsp;&nbsp;return &amp;ewkViewClass; 
} 

ewk_view_smart_class_set(miniBrowserViewSmartClass());

// Callback headers
// static Eina_Bool on_window_geometry_get(Ewk_View_Smart_Data *sd, Evas_Coord *x, Evas_Coord *y, Evas_Coord *width, Evas_Coord *height);
// static Eina_Bool on_window_geometry_set(Ewk_View_Smart_Data *sd, Evas_Coord x, Evas_Coord y, Evas_Coord width, Evas_Coord height);

Ewk_View_Smart_Class *ewkViewClass = miniBrowserViewSmartClass();
ewkViewClass-&gt;window_geometry_get = on_window_geometry_get;
ewkViewClass-&gt;window_geometry_set = on_window_geometry_set;
</pre></li>
</ol>

<h4>LOADING A WEB PAGE</h4>
<p>The 2.2.1 API used the <span style="font-family: Courier New,Courier,monospace">__pWeb-&gt;LoadUrl(url)</span> function, while the 2.3 API uses the <span style="font-family: Courier New,Courier,monospace">ewk_view_url_set()</span> function. </p>

    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

