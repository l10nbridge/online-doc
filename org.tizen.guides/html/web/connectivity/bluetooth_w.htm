<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Bluetooth</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../images/mobile_s_w_optional.png"/> <img alt="Wearable Web" src="../../images/wearable_s_w_optional.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#Managing_BT_Adapter">Managing the Local Bluetooth Adapter</a></li>
            <li><a href="#Discovering_BT_Devices">Discovering Bluetooth Devices</a></li>
            <li><a href="#Creating_Bond">Creating a Bonding with a Bluetooth Device</a></li>
            <li><a href="#Connecting_BT_device">Connecting to and Exchanging Data with a Bluetooth Device</a></li>
            <li><a href="#Communicating_Health">Communicating with a Health Source Device</a></li>
			<li>Bluetooth Low Energy
			    <ul class="toc">
					<li><a href="#Discovering_BT_LE_Devices">Discovering Bluetooth Low Energy Devices</a></li>
					<li><a href="#Managing_Advertising">Managing the Advertising Options</a></li>
					<li><a href="#Connecting">Connecting to a Bluetooth Low Energy Device</a></li>
					<li><a href="#Connection_Notification">Receiving Notifications on Connection State Changes</a></li>
					<li><a href="#Retrieving_Services">Retrieving Bluetooth GATT Services</a></li>
					<li><a href="#Characteristic_Value">Accessing the Bluetooth GATT Characteristic Value</a></li>
				   <li><a href="#Characterictic_Notification">Receiving Notifications on Characteristic Value Changes</a></li>
					<li><a href="#Descriptor_Value">Accessing the Bluetooth GATT Descriptor Value</a></li>
				</ul>
			</li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html">Bluetooth API for Mobile Web</a></li>
			<li><a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html">Bluetooth API for Wearable Web</a></li>
			<li><a href="https://developer.tizen.org/development/sample/web/Communication/Bluetooth_Chat" target="_blank">Bluetooth Chat Sample Description</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Bluetooth</h1>
 
  <p>You can use Bluetooth functionalities in your application, such as managing the local Bluetooth adapter, bonding, and exchanging data between Bluetooth-enabled devices. The Bluetooth standard provides a peer-to-peer (P2P) data exchange functionality over short distance between compliant devices.</p>
  
<p>The Bluetooth API is optional for both Tizen mobile and wearable profiles, which means that it may not be supported in all mobile and wearable devices. The Bluetooth API is not supported on any Tizen Emulators.</p> 

 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the Bluetooth functionality</a>.</p>
  
  <p>The main features of the Bluetooth API include:</p>
  <ul>
   <li>Managing the local Bluetooth adapter <p>You can <a href="#Managing_BT_Adapter">manage the local Bluetooth adapter</a> using the system-provided service through the <span style="font-family: Courier New,Courier,monospace">ApplicationControl</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html#ApplicationControl">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html#ApplicationControl">wearable</a> applications).</p> <p>To use the Bluetooth functionality of the device, you must switch the Bluetooth adapter on.</p></li>
   <li>Discovering devices <p>You can <a href="#Discovering_BT_Devices">discover other Bluetooth devices</a>.</p> <p>The device discovery process can retrieve multiple types of Bluetooth devices, such as printers, mobile phones, and headphones. To find the kind of devices you want to communicate with, the <span style="font-family: Courier New,Courier,monospace">BluetoothClass</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothClass">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothClass">wearable</a> applications) is used to define characteristics and capabilities of a Bluetooth device. The <span style="font-family: Courier New,Courier,monospace">BluetoothClassDeviceMajor</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothClassDeviceMajor">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothClassDeviceMajor">wearable</a> applications) and <span style="font-family: Courier New,Courier,monospace">BluetoothClassDeviceMinor</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothClassDeviceMinor">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothClassDeviceMinor">wearable</a> applications) specify the identifiers for major and minor Class of Device (CoD).</p> <p>In addition, you can retrieve the known devices which were bonded or found in a prior discovery process.</p></li>
   <li>Creating a bonding with a Bluetooth device <p>You can <a href="#Creating_Bond">create a bonding</a> with another device retrieved through the discovery process. The bonding allows the 2 devices to establish a connection.</p> </li>
   <li>Connecting to and exchanging data with a Bluetooth device <p>You can <a href="#Connecting_BT_device">connect to and exchange data with a remote Bluetooth device</a>. When you attempt to open a connection to another device, a Service Discovery Protocol (SDP) look-up is performed on the device, and the protocol and channel to be used for the connection are determined. If a connection is established and the socket is opened successfully, a <span style="font-family: Courier New,Courier,monospace">BluetoothSocket</span> instance (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothSocket">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothSocket">wearable</a> applications) with an open state is returned. The socket is subsequently used for exchanging data between the connected devices.</p> <p>If a device allows other devices to use its functionalities through this kind of connection, it is said to provide a service.</p> </li>
   <li>Communicating with a health source device <p>The Health Device Profile defines the requirements for the Bluetooth health device implementation. In the profile, there are 2 device type: one device is a source, such as a blood pressure monitor or pulse oximeter, while the other is a sink, such as a mobile phone or laptop. You can use your device as a sink and <a href="#Communicating_Health">communicate with a health source device</a>.</p> </li>
  </ul>

<p>The main Bluetooth (4.0) Low Energy features include:</p>
  <ul>
   <li>Managing the local Bluetooth adapter
     <p>The <a href="#Managing_BT_Adapter">Bluetooth adapter management</a> is performed the same way as in the regular Bluetooth API.</p></li>
   <li>Discovering Bluetooth Low Energy devices
     <p>You can <a href="#Discovering_BT_LE_Devices">discover Bluetooth Low Energy devices</a> in range. Through the discovery process, you can obtain basic information about available remote devices, such as their names and provided services.</p></li>
   <li>Managing the advertising options
     <p>You can <a href="#Managing_Advertising">manage advertising</a> to control how your device announces itself to other Bluetooth Low Energy devices to be discovered.</p></li>
   <li>Connecting to a Bluetooth Low Energy device
     <p>You can <a href="#Connecting">connect to a remote Bluetooth Low Energy device</a>. When connected, you can access services and characteristics of the remote device.</p></li>
   <li>Receiving notifications on connection state changes
     <p>You can <a href="#Connection_Notification">monitor the connection state</a> to detect when the connection to the remote device is lost.</p></li>
   <li>Retrieving Bluetooth GATT services
     <p>You can <a href="#Retrieving_Services">retrieve information about Bluetooth GATT services</a> provided by the remote device.</p>
     <p>Every GATT service defines characteristics it includes. By knowing the service, you know what features the Bluetooth device exposes.</p></li>
   <li>Accessing the Bluetooth GATT characteristic value
     <p>You can <a href="#Characteristic_Value">read and write the Bluetooth GATT characteristic value</a>.</p>
     <p>Characteristics allows you to monitor and sometimes control remote Bluetooth Low Energy devices. For example, a sensor reading can be exposed by the sensor device as a Bluetooth GATT characteristic.</p></li>
   <li>Receiving notifications on characteristic value changes
     <p>You can <a href="#Characterictic_Notification">monitor a characteristic value</a> to detect any changes, for example, in sensor readings and battery level.</p></li>
   <li>Accessing the Bluetooth GATT descriptor value
     <p>You can <a href="#Descriptor_Value">read and write the Bluetooth GATT descriptor value</a>.</p></li>
</ul>

<h2 id="warm_up" name="warm_up">Warm-up</h2>
      <p>Become familiar with the Bluetooth API basics by learning about:</p>
      <ul>
	   <li><a href="#prerequisites">Prerequisites</a> <p>Prepare your application to use the Bluetooth functionality.</p></li>	  
       <li><a href="#Managing_BT_Adapter">Managing the Local Bluetooth Adapter</a> <p>Enable and disable the local Bluetooth adapter, and change the device name for it.</p></li>
       <li><a href="#Discovering_BT_Devices">Discovering Bluetooth Devices</a> <p>Search remote devices and get a list of the known devices.</p></li>
       <li><a href="#Creating_Bond">Creating a Bonding with a Bluetooth Device</a> <p>Create and end a bonding with a Bluetooth device.</p></li>
       <li><a href="#Connecting_BT_device">Connecting to and Exchanging Data with a Bluetooth Device</a> <p>Register a service as a server, connect as a client to the service provided by the server device, and exchange data with the device.</p></li>
       <li><a href="#Communicating_Health">Communicating with a Health Source Device</a> <p>Act as a sink and communicate with a health source device.</p></li>
	   <li>Bluetooth Low Energy
		  <ul>
		   <li><a href="#Discovering_BT_LE_Devices">Discovering Bluetooth Low Energy Devices</a> <p>Search for remote devices.</p></li>
		   <li><a href="#Managing_Advertising">Managing the Advertising Options</a> <p>Manage what information is advertised to any Bluetooth Low Energy device in the proximity.</p></li>
		   <li><a href="#Connecting">Connecting to a Bluetooth Low Energy Device</a> <p>Connect to a detected Bluetooth Low Energy device.</p></li>
		   <li><a href="#Connection_Notification">Receiving Notifications on Connection State Changes</a> <p>Monitor the connection state to a remote Bluetooth Low Energy device.</p></li>
		   <li><a href="#Retrieving_Services">Retrieving Bluetooth GATT Services</a> <p>Check information about the Bluetooth GATT services provided by a remote device.</p></li>
		   <li><a href="#Characteristic_Value">Accessing the Bluetooth GATT Characteristic Value</a> <p>Read and write a value of the Bluetooth GATT characteristic of a remote device.</p></li>
		   <li><a href="#Characterictic_Notification">Receiving Notifications on Characteristic Value Changes</a> <p>Monitor changes in a Bluetooth GATT characteristic value.</p></li>
		   <li><a href="#Descriptor_Value">Accessing the Bluetooth GATT Descriptor Value</a> <p>Read and write a value of the Bluetooth GATT characteristic descriptor of a remote device.</p></li>
		  </ul>	   
	   </li>
      </ul>
       <h2 id="task" name="task">Task</h2>
      <p>In the <a href="task_bluetoothchat_w.htm">Bluetooth Chat</a> task, we will walk through how to use the device as a Bluetooth server or client in a chat application.</p>
	  
	  <h2 id="prerequisites">Prerequisites</h2>
<p>To use the Application (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html">wearable</a> applications) and Bluetooth (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html">wearable</a> applications) APIs, the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file:</p>
<pre class="prettyprint">
&lt;tizen:privilege name=&quot;http://tizen.org/privilege/application.launch&quot;/&gt;
&lt;tizen:privilege name=&quot;http://tizen.org/privilege/bluetooth&quot;/&gt;
</pre>

	 
  <h2 id="Managing_BT_Adapter" name="Managing_BT_Adapter">Managing the Local Bluetooth Adapter</h2>
  
  <p>Learning how to enable or disable the local Bluetooth adapter, and set the device name is a basic Bluetooth management skill:</p>
  <p>The Bluetooth API does not provide a method to enable or disable the Bluetooth adapter of the device directly. Whenever Bluetooth is required, request a built-in Settings application to present the relevant switch to the user so that they can enable or disable the Bluetooth.</p>
  <p class="figure">Figure: Bluetooth setting screen</p>
  <p align="center"><img src="../../images/bluetooth_onoff.png" alt="Bluetooth setting screen"/></p>
  <ol>
   <li>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothAdapter">mobile</a> and  <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getDefaultAdapter()</span> method and prepare the <span style="font-family: Courier New,Courier,monospace">ApplicationControl</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html#ApplicationControl">mobile</a> and  <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html#ApplicationControl">wearable</a> applications) to request the Bluetooth switching operation:
<pre class="prettyprint">var bluetoothSwitchAppControl = new tizen.ApplicationControl(&quot;http://tizen.org/appcontrol/operation/edit&quot;, null, &quot;application/x-bluetooth-on-off&quot;);
var adapter = tizen.bluetooth.getDefaultAdapter();</pre></li>

<li> Define a callback for the <span style="font-family: Courier New,Courier,monospace">launchAppControl()</span> method:
<pre class="prettyprint">function launchSuccess()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Bluetooth Settings application is successfully launched.&quot;);
}
function launchError(error)
{
&nbsp;&nbsp;&nbsp;alert(&quot;An error occurred: &quot; + error.name + &quot;. Please enable Bluetooth through the Settings application.&quot;);
}</pre></li>

<li> Define the reply callback of the application control which implements the <span style="font-family: Courier New,Courier,monospace">ApplicationControlDataArrayReplyCallback</span> (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html#ApplicationControlDataArrayReplyCallback">mobile</a> and  <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html#ApplicationControlDataArrayReplyCallback">wearable</a> applications):
<pre class="prettyprint">var serviceReply =
{
&nbsp;&nbsp;&nbsp;/* Called when the launched application reports success */
&nbsp;&nbsp;&nbsp;onsuccess: function(data)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (adapter.powered)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Bluetooth is successfully turned on.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Bluetooth is still switched off.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;/* Called when launched application reports failure */
&nbsp;&nbsp;&nbsp;onfailure: function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;Bluetooth Settings application reported failure.&quot;);
&nbsp;&nbsp;&nbsp;}
};</pre></li>

<li> If necessary, request launching the Bluetooth Settings with the prepared <span style="font-family: Courier New,Courier,monospace">bluetoothSwitchAppControl</span>:
<pre class="prettyprint">if (adapter.powered)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Bluetooth is already enabled&quot;);
}
else
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Try to launch the Bluetooth Settings application.&quot;);
&nbsp;&nbsp;&nbsp;tizen.application.launchAppControl(bluetoothSwitchAppControl, null, launchSuccess, launchError, serviceReply);
}</pre></li>

<li><p>To display the Bluetooth visibility switch, use the <span style="font-family: Courier New,Courier,monospace">application/x-bluetooth-visibility</span> mime option. Bluetooth visibility means that the device is discoverable by other Bluetooth devices.</p>
<pre class="prettyprint">var bluetoothVisibilityAppControl = new tizen.ApplicationControl(&quot;http://tizen.org/appcontrol/operation/edit&quot;, null, &quot;application/x-bluetooth-visibility&quot;);
function launchVisibilityError(error) 
{
&nbsp;&nbsp;&nbsp;alert(&quot;An error occurred: &quot; + error.name + &quot;. Please enable Bluetooth visibility through the Settings application.&quot;);
}
var serviceVisibilityReply = 
{
&nbsp;&nbsp;&nbsp;/* Called when the launched application reports success */
&nbsp;&nbsp;&nbsp;onsuccess: function(data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Bluetooth is " + (adapter.visible ? &quot;now discoverable.&quot; : &quot;still not visible.&quot;));
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;/* Called when launched application reports failure */
&nbsp;&nbsp;&nbsp;onfailure: function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;Bluetooth Settings application reported failure.&quot;);
&nbsp;&nbsp;&nbsp;}
};
tizen.application.launchAppControl(bluetoothVisibilityAppControl, null, null, launchVisibilityError, serviceVisibilityReply);
</pre></li>

   <li><p>Set a friendly name for the device using the <span style="font-family: Courier New,Courier,monospace">setName()</span> method.</p> <p>The name helps to recognize the device in a list of <a href="#Discovering_BT_Devices">retrieved devices</a>.</p> <pre class="prettyprint">adapter.setName(chatServerName);</pre></li> 
  </ol>
  
  <h2 id="Discovering_BT_Devices" name="Discovering_BT_Devices">Discovering Bluetooth Devices</h2>
  
  <p>Learning how to search for remote devices and get the known devices is a basic Bluetooth management skill:</p>
  <ol>
   <li>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getDefaultAdapter()</span> method:<p></p> <pre class="prettyprint">var adapter = tizen.bluetooth.getDefaultAdapter();
</pre></li>
   <li><p>To search for remote devices, use the <span style="font-family: Courier New,Courier,monospace">discoverDevices()</span> method.</p> <p>The results of the search are returned in the <span style="font-family: Courier New,Courier,monospace">BluetoothDiscoverDevicesSuccessCallback</span> (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothDiscoverDevicesSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothDiscoverDevicesSuccessCallback">wearable</a> applications).</p> <pre class="prettyprint">
var discoverDevicesSuccessCallback =
{
&nbsp;&nbsp;&nbsp;/* When a device is found */
&nbsp;&nbsp;&nbsp;ondevicefound: function(device)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Found device - name: &quot; + device.name);
&nbsp;&nbsp;&nbsp;}
}

/* Discover devices */
adapter.discoverDevices(discoverDevicesSuccessCallback, null);
</pre>
    <table class="note">
     <tbody>
      <tr>
       <th class="note">Note</th>
      </tr>
      <tr>
       <td class="note">To allow other Bluetooth devices to find your device, you must set the device to be visible through the system settings.</td>
      </tr>
     </tbody>
    </table> </li>
   <li><p>To retrieve known devices (which have been previously paired or searched for), use the <span style="font-family: Courier New,Courier,monospace">getKnownDevices()</span> method.</p> <p>The results of the search are returned in the <span style="font-family: Courier New,Courier,monospace">BluetoothDeviceArraySuccessCallback</span> (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothDeviceArraySuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothDeviceArraySuccessCallback">wearable</a> applications).</p> <pre class="prettyprint">
/* When a known device is found */
function onGotDevices(devices)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;The number of known devices: &quot; + devices.length);
}

/* Retrieve known devices */
adapter.getKnownDevices(onGotDevices);
</pre></li>
  </ol>
  
  <h2 id="Creating_Bond" name="Creating_Bond">Creating a Bonding with a Bluetooth Device</h2>
  
  <p>Learning how to create a bonding with other devices is a basic Bluetooth management skill:</p>
  <ol>
   <li>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getDefaultAdapter()</span> method:<p></p> <pre class="prettyprint">var adapter = tizen.bluetooth.getDefaultAdapter();
</pre></li>
   <li><p>To create a bonding with another device, use the <span style="font-family: Courier New,Courier,monospace">createBonding()</span> method:</p> <pre class="prettyprint">
function onBondingSuccessCallback(device)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;A bonding is created - name: &quot; + device.name);
}

function onErrorCallback(e)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Cannot create a bonding, reason: &quot; + e.message);
}

adapter.createBonding(&quot;35:F4:59:D1:7A:03&quot;, onBondingSuccessCallback, onErrorCallback);
</pre>

   <table class="note">
    <tbody>
     <tr>
      <th class="note">Note</th>
     </tr>
     <tr>
      <td class="note">The MAC address of the Bluetooth device is a <span style="font-family: Courier New,Courier,monospace">BluetoothAddress</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothAddress">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothAddress">wearable</a> applications). You can get the MAC address of the peer device from the <span style="font-family: Courier New,Courier,monospace">BluetoothDevice</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothDevice">wearable</a> applications), which is returned in the success callback of the <span style="font-family: Courier New,Courier,monospace">BluetoothAdapter</span>&#39;s <span style="font-family: Courier New,Courier,monospace">getKnownDevices()</span> and <span style="font-family: Courier New,Courier,monospace">discoverDevices()</span> methods.</td>
     </tr>
    </tbody>
   </table></li>

   <li><p>To end the bonding with a remote device, use the <span style="font-family: Courier New,Courier,monospace">destroyBonding()</span> method:</p> <pre class="prettyprint">adapter.destroyBonding(&quot;35:F4:59:D1:7A:03&quot;);</pre></li>
  </ol>
 
  <h2 id="Connecting_BT_device" name="Connecting_BT_device">Connecting to and Exchanging Data with a Bluetooth Device</h2>
  
   <p>The Radio Frequency Communication (RFCOMM) is a set of transport protocols which allows multiple simultaneous connections to a device. The device that provides a service is called a server device, and devices that request the service are called client devices. </p> 
  <p>Learning how to connect to services provided by a server device to the client devices is a basic Bluetooth management skill:</p> 
  <ol> 
   <li>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getDefaultAdapter()</span> method:<p></p> <pre class="prettyprint">var adapter = tizen.bluetooth.getDefaultAdapter();
</pre></li> 
   <li><p>To register a service and allow client devices to connect to it, use the <span style="font-family: Courier New,Courier,monospace">registerRFCOMMServiceByUUID()</span> method on the server device:</p> <pre class="prettyprint">adapter.registerRFCOMMServiceByUUID(serviceUUID, &quot;My service&quot;);</pre> 
    <table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">For P2P communication between 2 instances of the same application, the UUID can be hard-coded in your application. To retrieve the UUID of a Bluetooth device, use the <span style="font-family: Courier New,Courier,monospace">BluetoothDevice</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothDevice">wearable</a> applications). The object has an array of UUIDs available for the device.</td> 
      </tr> 
     </tbody> 
    </table> <p>When the service has been successfully registered, the <span style="font-family: Courier New,Courier,monospace">BluetoothServiceSuccessCallback</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothServiceSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothServiceSuccessCallback">wearable</a> applications) is triggered.</p> </li> 
	
	<li>Before establishing a connection, your device must be bonded with a peer device. For more information, see <a href="#Creating_Bond">Creating a Bonding with a Bluetooth Device</a>.</li>
	
	<li><p>To connect to the server device, use the <span style="font-family: Courier New,Courier,monospace">connectToServiceByUUID()</span> method on the client device:</p>
<pre class="prettyprint">
device.connectToServiceByUUID(serviceUUID, function(sock)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;socket connected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket = sock;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;function(error)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Error while connecting: &quot; + error.message);
&nbsp;&nbsp;&nbsp;}
);</pre> 

<p>When a connection between 2 devices is established, the <span style="font-family: Courier New,Courier,monospace">BluetoothSocketSuccessCallback</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothSocketSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothSocketSuccessCallback">wearable</a> applications) on the client device and the <span style="font-family: Courier New,Courier,monospace">onconnect</span> event handler in the <span style="font-family: Courier New,Courier,monospace">BluetoothServiceHandler</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothServiceHandler">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothServiceHandler">wearable</a> applications) on the server device are triggered.</p></li> 
   <li><p>To send data to the peer device, use the <span style="font-family: Courier New,Courier,monospace">writeData()</span> method:</p>
<pre class="prettyprint">
var somemsg = [3, 2, 1];
var length = socket.writeData(somemsg);
</pre> 

<p>To send data between the devices, use a socket mechanism with the <span style="font-family: Courier New,Courier,monospace">BluetoothSocket</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothSocket">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothSocket">wearable</a> applications). The proper socket is received when the devices are connected.</p></li> 

<li><p>To read the data in the server device, use the <span style="font-family: Courier New,Courier,monospace">readData()</span> method:</p> 

<pre class="prettyprint">var data = socket.readData();</pre> 

<p>When an incoming message is received from the peer device, the <span style="font-family: Courier New,Courier,monospace">onmessage</span> event handler in the <span style="font-family: Courier New,Courier,monospace">BluetoothSocket</span> interface is triggered. </p></li> 
  </ol> 
 
  <h2 id="Communicating_Health" name="Communicating_Health">Communicating with a Health Source Device</h2>
			
   <p>To increase the communication capabilities of your application, you must learn to communicate with a health source device:</p> 
  <ol> 
   <li>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothHealthProfileHandler</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthProfileHandler">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthProfileHandler">wearable</a> applications): 
   <pre class="prettyprint">var adapter = tizen.bluetooth.getDefaultAdapter();
var healthProfileHandler = adapter.getBluetoothProfileHandler(&quot;HEALTH&quot;);
var healthApplication = null, healthChannel = null;
</pre></li> 
   <li><p>Register an application as a sink to wait for connection requests from health source devices (4100 means oximeter):</p> 
   <pre class="prettyprint">
function onSinkApp(app) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Success&quot;);
&nbsp;&nbsp;&nbsp;healthApplication = app;
}

healthProfileHandler.registerSinkApplication(4100, &quot;testSinkApp&quot;, onSinkApp);
</pre> 
<p>When the sink application is registered successfully, the <span style="font-family: Courier New,Courier,monospace">BluetoothHealthApplicationSuccessCallback</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthApplicationSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthApplicationSuccessCallback">wearable</a> applications) is invoked and you can get the registered sink application object.</p></li> 
<li>Before establishing a connection, your device must be bonded with a health source device. For more information, see <a href="#Creating_Bond">Creating a Bonding with a Bluetooth Device</a>.</li>
<li><p>To connect to the health source device, use the <span style="font-family: Courier New,Courier,monospace">connectToSource()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothHealthProfileHandler</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthProfileHandler">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthProfileHandler">wearable</a> applications):</p>
<pre class="prettyprint">
function onConnect(channel) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Success&quot;);
&nbsp;&nbsp;&nbsp;healthChannel = channel;
}

adapter.getDevice(&quot;35:F4:59:D1:7A:03&quot;, function(device)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;healthProfileHandler.connectToSource(device, healthApplication, onConnect); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
</pre> 
<p>When a connection between 2 devices is established, the success callback of the <span style="font-family: Courier New,Courier,monospace">connectToSource()</span> method is called. In addition, the <span style="font-family: Courier New,Courier,monospace">onconnect</span> event handler of the <span style="font-family: Courier New,Courier,monospace">BluetoothHealthApplication</span> instance (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthApplication">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthApplication">wearable</a> applications) is called, if the success callback attribute is set. You can get the connected <span style="font-family: Courier New,Courier,monospace">BluetoothHealthChannel</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthChannel">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthChannel">wearable</a> applications) from the callbacks.</p></li> 
<li><p>To send data to the source device, use the <span style="font-family: Courier New,Courier,monospace">sendData()</span> method:</p>
<pre class="prettyprint">
var dataToSend = [0, 0, 0];
var length = healthChannel.sendData(dataToSend);</pre> 
<p>The <span style="font-family: Courier New,Courier,monospace">onmessage</span> event handler in the <span style="font-family: Courier New,Courier,monospace">BluetoothHealthChannelChangeCallback</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothHealthChannelChangeCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothHealthChannelChangeCallback">wearable</a> applications) is called when the data is received, if you set a listener on the connected channel by using the <span style="font-family: Courier New,Courier,monospace">setListener()</span> method.</p></li> 
   
    <li><p>Disconnect from the health source device:</p> <pre class="prettyprint">
healthChannel.close();
</pre> 
<p>When the channel is disconnected, the <span style="font-family: Courier New,Courier,monospace">onclose</span> event handler in the <span style="font-family: Courier New,Courier,monospace">BluetoothHealthChannelChangeCallback</span> interface is called.</p></li>   
  </ol> 
    
<h2 id="Discovering_BT_LE_Devices" name="Discovering_BT_LE_Devices">Discovering Bluetooth Low Energy Devices</h2>

  <p>Learning how to search for remote devices is a basic Bluetooth management skill:</p>
  <ol>
   <li>Define a scan event handler by implementing the <span style="font-family: Courier New,Courier,monospace">BluetoothLEScanCallback</span> callback (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEScanCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEScanCallback">wearable</a> applications).
    <p>The callback is invoked when a remote device has been detected.</p>
<pre class="prettyprint">
function successcallback(device)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Found device: &quot; + device.name + &quot; [&quot; + device.address + &quot;]&quot;);
};
</pre>
    <table class="note">
     <tbody>
      <tr>
       <th class="note">Note</th>
      </tr>
      <tr>
       <td class="note">To allow other Bluetooth devices to find your device, you must set the device to be visible through the system settings.</td>
      </tr>
     </tbody>
    </table> </li>

   <li><p>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getLEAdapter()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothManager</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothManager">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothManager">wearable</a> applications):</p>
<pre class="prettyprint">var adapter = tizen.bluetooth.getLEAdapter();</pre>
   </li>

   <li><p>To search for remote devices, use the <span style="font-family: Courier New,Courier,monospace">startScan()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> interface:</p>
<pre class="prettyprint">adapter.startScan(successcallback);</pre>
   </li>
   <li><p>When you find the right remote device or the user cancels the scanning, disable the scan using the <span style="font-family: Courier New,Courier,monospace">stopScan()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> interface:</p>
<pre class="prettyprint">adapter.stopScan();</pre>
   </li>

  </ol>

  <h2 id="Managing_Advertising" name="Managing_Advertising">Managing the Advertising Options</h2>
  <p>The Bluetooth Low Energy technology allows a device to broadcast some information without a connection between devices. The Bluetooth Low Energy API provides methods to control this advertising (broadcasting).</p>
  <p>Learning how to control what information is advertised by the device is a useful Bluetooth Low Energy skill:</p>

  <ol>
   <li><p>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getLEAdapter()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothManager</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothManager">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothManager">wearable</a> applications):</p>
<pre class="prettyprint">var adapter = tizen.bluetooth.getLEAdapter();</pre>
   </li>

   <li><p>Set up options and start advertising with the <span style="font-family: Courier New,Courier,monospace">startAdvertise()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> interface:</p>
<pre class="prettyprint">
var advertiseData = new tizen.BluetoothLEAdvertiseData(
{
&nbsp;&nbsp;&nbsp;includeName: true,
&nbsp;&nbsp;&nbsp;serviceuuids: [&quot;180f&quot;]  /* 180F is 16bit Battery Service UUID */
});
var connectable = true;

adapter.startAdvertise(advertiseData, &quot;ADVERTISE&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onstate(state)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Advertising configured: &quot; + state);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(error)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;startAdvertise() failed: &quot; + error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;LOW_LATENCY&quot;, connectable);
</pre>
    <table class="note">
     <tbody>
      <tr>
       <th class="note">Note</th>
      </tr>
      <tr>
       <td class="note">To learn how to make your mobile device visible to other Bluetooth devices, see <a href="#Managing_BT_Adapter">Managing the Local Bluetooth Adapter</a>.</td>
      </tr>
     </tbody>
    </table>
   </li>
   <li><p>To disable the advertising, use the <span style="font-family: Courier New,Courier,monospace">stopAdvertise()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> interface:</p>
<pre class="prettyprint">adapter.stopAdvertise();</pre>
   </li>
  </ol>

  <h2 id="Connecting" name="Connecting">Connecting to a Bluetooth Low Energy Device</h2>

  <p>Learning how to connect to other devices is a basic Bluetooth Low Energy management skill:</p>
  <ol>
   <li><p>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getLEAdapter()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothManager</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothManager">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothManager">wearable</a> applications):</p>
<pre class="prettyprint">var adapter = tizen.bluetooth.getLEAdapter();</pre>
   </li>
   <li><p>Define success and error callbacks for the connect operation:</p>
<pre class="prettyprint">
function connectFail(error) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Failed to connect to device: &quot; + e.message);
}

function connectSuccess() 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Connected to device&quot;);
}
</pre>
   </li>

   <li><p>Define a callback for the scan operation that connects to a found device and stops the scan.</p>
     <p>Within the callback request, establish a connection with the found device using the <span style="font-family: Courier New,Courier,monospace">connect()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">
var remoteDevice = null;

function onDeviceFound(device)
{
&nbsp;&nbsp;&nbsp;if (remoteDevice === null) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remoteDevice = device;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Found device &quot; + device.name + &quot;. Connecting...&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device.connect(connectSuccess, connectFail);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;adapter.stopScan();
}
</pre>
   </li>

   <li><p>When the callbacks are completed, initiate the Bluetooth Low Energy scan using the <span style="font-family: Courier New,Courier,monospace">startScan()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> adapter:</p>
<pre class="prettyprint">adapter.startScan(onDeviceFound);</pre></li>

   <li><p>When the connection to the remote device is no longer required, disconnect from the device by calling the <span style="font-family: Courier New,Courier,monospace">disconnect()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface:</p>
<pre class="prettyprint">remoteDevice.disconnect();</pre></li>

  </ol>

  <h2 id="Connection_Notification" name="Connection_Notification">Receiving Notifications on Connection State Changes</h2>

  <p>Learning how to receive notifications whenever the device connection is established or lost is a useful Bluetooth management skill:</p>
  <ol>

   <li><p>Retrieve a <span style="font-family: Courier New,Courier,monospace">BluetoothLEAdapter</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEAdapter">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEAdapter">wearable</a> applications) with the <span style="font-family: Courier New,Courier,monospace">getLEAdapter()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothManager</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothManager">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothManager">wearable</a> applications):</p>
<pre class="prettyprint">var adapter = tizen.bluetooth.getLEAdapter();</pre>
   </li>
   <li><p>Define a connection state change listener by implementing the <span style="font-family: Courier New,Courier,monospace">BluetoothLEConnectChangeCallback</span> callback (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEConnectChangeCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEConnectChangeCallback">wearable</a> applications):</p>
<pre class="prettyprint">
var connectionListener = 
{
&nbsp;&nbsp;&nbsp;onconnected: function(device) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Connected to the device: &quot; + device.name + &quot; [&quot; + device.address + &quot;]&quot;);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;ondisconnected: function(device) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Disconnected from the device &quot; + device.name + &quot; [&quot; + device.address + &quot;]&quot;);
&nbsp;&nbsp;&nbsp;}
};
</pre>
   </li>

   <li><p>Define a callback for the scan operation that connects to a found device and stops the scan.</p>
     <p>Within the callback, register a connection state change listener using the <span style="font-family: Courier New,Courier,monospace">addConnectStateChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">
var remoteDevice = null;
var watchId;

function onDeviceFound(device)
{
&nbsp;&nbsp;&nbsp;if (remoteDevice === null) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remoteDevice = device;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Found device &quot; + device.name + &quot;. Connecting...&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;watchId = remoteDevice.addConnectStateChangeListener(connectionListener);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remoteDevice.connect();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;adapter.stopScan();
}
</pre>
   </li>

   <li><p>When the callbacks are completed, initiate the Bluetooth Low Energy scan:</p>
<pre class="prettyprint">adapter.startScan(onDeviceFound);</pre></li>

   <li><p>When the notifications about the connection are no longer required, deregister the listener from the device by calling the <span style="font-family: Courier New,Courier,monospace">removeConnectStateChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface:</p>
<pre class="prettyprint">remoteDevice.removeConnectStateChangeListener(watchId);</pre></li>
  </ol>

  <h2 id="Retrieving_Services" name="Retrieving_Services">Retrieving Bluetooth GATT Services</h2>

  <p>Learning how to retrieve a list of GATT services (Generic Attribute) provided by a remote device is basic Bluetooth Low Energy management skill:</p>
  <ol>

   <li><a href="#Connecting">Connect to a Bluetooth Low Energy device</a>.</li>
   <li><p>Define a connection state change listener by implementing the <span style="font-family: Courier New,Courier,monospace">BluetoothLEConnectChangeCallback</span> (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEConnectChangeCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEConnectChangeCallback">wearable</a> applications):</p>
<pre class="prettyprint">
function showGATTService(service, indent)
{
&nbsp;&nbsp;&nbsp;if (indent === undefined) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indent = &quot;&quot;;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;console.log(indent + &quot;Service &quot; + service.uuid + &quot;. Has &quot; + service.characteristics.length 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ &quot; characteristics and &quot; + service.services.length + &quot; sub-services.&quot;);

&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; service.services.length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showGATTService(service.services[i], indent + &quot;   &quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
   </li>
   <li><p>Retrieve a list of GATT service UUIDs from the <span style="font-family: Courier New,Courier,monospace">uuids</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">var serviceUUIDs = remoteDevice.uuids;</pre>
   </li>
   <li><p>Retrieve GATT service information using the <span style="font-family: Courier New,Courier,monospace">getService()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface for every service UUID:</p>
<pre class="prettyprint">
var i = 0, service = null;

for (i; i &lt; serviceUUIDs.length; i++) 
{

&nbsp;&nbsp;&nbsp;service = remoteDevice.getService(serviceUUIDs[i]);

&nbsp;&nbsp;&nbsp;showGATTService(service);
}</pre>
   </li>

  </ol>

       <h2 id="Characteristic_Value" name="Characteristic_Value">Accessing the Bluetooth GATT Characteristic Value</h2>

  <p>Learning how to read and write a value of the Bluetooth characteristic is a useful Bluetooth Low Energy management skill:</p>
  <ol>

    <li><a href="#Connecting">Connect to a Bluetooth Low Energy device</a>.</li>
   <li><p>Retrieve a list of GATT service UUIDs from the <span style="font-family: Courier New,Courier,monospace">uuids</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">var serviceUUIDs = remoteDevice.uuids;</pre>
   </li>
   <li><p>Select a GATT service and use the <span style="font-family: Courier New,Courier,monospace">getService()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface to retrieve an object representing the service. In this example, the first service is used:</p>
<pre class="prettyprint">var gattService = remoteDevice.getService(serviceUUIDs[0]);</pre>
   </li>
   <li><p>Select an interesting characteristic from the <span style="font-family: Courier New,Courier,monospace">characteristics</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTService</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTService">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTService">wearable</a> applications). In this example, the first characteristic is used:</p>
<pre class="prettyprint">var property = gattService.characteristics[0];</pre>
   </li>
   <li><p>Define a callback implementing the <span style="font-family: Courier New,Courier,monospace">ReadValueSuccessCallback</span> callback (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#ReadValueSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#ReadValueSuccessCallback">wearable</a> applications), which receives the value of the characteristic:</p>
<pre class="prettyprint">
function readSuccess(value)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Characteristic value: &quot; + value);
}

function readFail(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;readValue() failed: &quot; + error);
}
</pre>
   </li>
   <li><p>To retrieve the GATT characteristic value, use the <span style="font-family: Courier New,Courier,monospace">readValue()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTCharacteristic</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTCharacteristic">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTCharacteristic">wearable</a> applications):</p>
<pre class="prettyprint">
if (!property.isReadable) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Property seems not to be readable. Attempting to read...&quot;);
}
property.readValue(readSuccess, readFail);</pre>
   </li>
   <li><p>To change the characteristic value, define callbacks and use the <span style="font-family: Courier New,Courier,monospace">writeValue()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTCharacteristic</span> interface:</p>
<pre class="prettyprint">
function writeSuccess(value)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Written&quot;);
}

function writeFail(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;writeValue() failed: &quot; + error);
}

if (!property.isWritable) 
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Property seems not to be writable. Attempting to write...&quot;);
}
var newValue = [82];

property.writeValue(newValue, writeSuccess, writeFail);
</pre>
   </li>
  </ol>

  <h2 id="Characterictic_Notification" name="Characterictic_Notification">Receiving Notifications on Characteristic Value Changes</h2>

  <p>Learning how to monitor a changes in a Bluetooth characteristic is a useful Bluetooth Low Energy management skill:</p>
  <ol>

    <li><a href="#Connecting">Connect to a Bluetooth Low Energy device</a>.</li>
   <li><p>Retrieve a list of GATT service UUIDs from the <span style="font-family: Courier New,Courier,monospace">uuids</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">var serviceUUIDs = remoteDevice.uuids;</pre>
   </li>
   <li><p>Select a GATT service and use the <span style="font-family: Courier New,Courier,monospace">getService()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface to retrieve an object representing the service. In this example, the first service is used:</p>
<pre class="prettyprint">var gattService = remoteDevice.getService(serviceUUIDs[0]);</pre>
   </li>
   <li><p>Select an interesting characteristic from the <span style="font-family: Courier New,Courier,monospace">characteristics</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTService</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTService">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTService">wearable</a> applications). In this example, the first characteristic is used:</p>
<pre class="prettyprint">var property = gattService.characteristics[0];</pre>
   </li>
   <li><p>Define a callback implementing the <span style="font-family: Courier New,Courier,monospace">ReadValueSuccessCallback</span> callback (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#ReadValueSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#ReadValueSuccessCallback">wearable</a> applications), which receives the value of the characteristic every time the value changes:</p>
<pre class="prettyprint">
function onValueChange(value)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Characteristic value is now: &quot; + value);
}
</pre>
   </li>

   <li><p>Register a value change listener using the <span style="font-family: Courier New,Courier,monospace">addValueChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTCharacteristic</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTCharacteristic">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTCharacteristic">wearable</a> applications):</p>
<pre class="prettyprint">var watchId = property.addValueChangeListener(onValueChange);</pre></li>

   <li><p>When the notifications about the connection are no longer required, deregister the listener from the device by calling the <span style="font-family: Courier New,Courier,monospace">removeValueChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTCharacteristic</span> interface:</p>
<pre class="prettyprint">property.removeValueChangeListener(watchId);</pre></li>
  </ol>

  <h2 id="Descriptor_Value" name="Descriptor_Value">Accessing the Bluetooth GATT Descriptor Value</h2>

  <p>Learning how to read and write a value of the Bluetooth descriptor is a useful Bluetooth Low Energy management skill:</p>
  <ol>

   <li><a href="#Connecting">Connect to a Bluetooth Low Energy device</a>.</li>
   <li><p>Retrieve a list of GATT service UUIDs from the <span style="font-family: Courier New,Courier,monospace">uuids</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothLEDevice">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothLEDevice">wearable</a> applications):</p>
<pre class="prettyprint">var serviceUUIDs = remoteDevice.uuids;</pre>
   </li>
   <li><p>Select a GATT service and use the <span style="font-family: Courier New,Courier,monospace">getService()</span> method  of the <span style="font-family: Courier New,Courier,monospace">BluetoothLEDevice</span> interface to retrieve an object representing the service. In this example, the first service is used:</p>
<pre class="prettyprint">var gattService = remoteDevice.getService(serviceUUIDs[0]);</pre>
   </li>
   <li><p>Select an interesting characteristic from the <span style="font-family: Courier New,Courier,monospace">characteristics</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTService</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTService">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTService">wearable</a> applications). In this example, the first characteristic is used:</p>
<pre class="prettyprint">var characteristic = gattService.characteristics[0];</pre></li>
   <li><p>Select an interesting descriptor from the <span style="font-family: Courier New,Courier,monospace">descriptors</span> attribute of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTCharacteristic</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTCharacteristic">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTCharacteristic">wearable</a> applications). In this example, the first descriptor is used:</p>
<pre class="prettyprint">var descriptor = characteristic.descriptors[0];</pre>
   </li>
   <li><p>Define a callback implementing the <span style="font-family: Courier New,Courier,monospace">ReadValueSuccessCallback</span> callback (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#ReadValueSuccessCallback">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#ReadValueSuccessCallback">wearable</a> applications), which receives the value of the descriptor:</p>
<pre class="prettyprint">
function readSuccess(value)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Descriptor value: &quot; + value);
}

function readFail(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;readValue() failed: &quot; + error);
}
</pre>
   </li>
   <li><p>To retrieve the GATT descriptor value, use the <span style="font-family: Courier New,Courier,monospace">readValue()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTDescriptor</span> interface (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html#BluetoothGATTDescriptor">mobile</a> and <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/bluetooth.html#BluetoothGATTDescriptor">wearable</a> applications):</p>
<pre class="prettyprint">
descriptor.readValue(readSuccess, readFail);</pre>
   </li>
   <li><p>To change the descriptor value, define callbacks and use the <span style="font-family: Courier New,Courier,monospace">writeValue()</span> method of the <span style="font-family: Courier New,Courier,monospace">BluetoothGATTDescriptor</span> interface:</p>
<pre class="prettyprint">
function writeSuccess(value)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Written&quot;);
}

function writeFail(error)
{
&nbsp;&nbsp;&nbsp;console.log(&quot;writeValue() failed: &quot; + error);
}

var newValue = [3];

descriptor.writeValue(newValue, writeSuccess, writeFail);
</pre>
   </li>
  </ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>