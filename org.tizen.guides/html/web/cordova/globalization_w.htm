<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Globalization</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../images/wearable_s_w.png"/> <img alt="TV Web" src="../../images/tv_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 3.0 and Higher for Mobile</li>
			<li>Tizen Platform 3.0 and Higher for Wearable</li>
			<li>Tizen Platform 3.0 and Higher for TV</li>
		</ul>
		<p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#current_language">Retrieving the Current Language</a></li>
            <li><a href="#current_locale">Retrieving the Current Locale</a></li>
            <li><a href="#currency">Retrieving the Currency Details</a></li>
            <li><a href="#names_of_months_and_days">Retrieving the Names of the Months and Days of the Week</a></li>
            <li><a href="#date_format">Retrieving the Date Format Details</a></li>
            <li><a href="#first_day_of_week">Retrieving the First Day of the Week</a></li>
            <li><a href="#number_format">Retrieving the Number Format Details</a></li>
            <li><a href="#dst">Retrieving the Daylight Saving Time Status</a></li>
            <li><a href="#conversions">Performing Conversions</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/globalization.html">Globalization API for Mobile Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/globalization.html">Globalization API for Wearable Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/globalization.html">Globalization API for TV Web</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

  <h1>Globalization</h1>

<p>You can get information about the user&#39;s locale, language, and time zone. You can also convert strings, numbers, and dates according to the user locale.</p>

<p>The Globalization API is mandatory for both Tizen mobile and wearable profiles, which means that it is supported in all mobile and wearable devices. All mandatory APIs are supported on the Tizen Emulators.</p>

<p>All Globalization functions are accessible by the <span style="font-family: Courier New,Courier,monospace">navigator.globalization</span> object (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/globalization.html#GlobalizationManager">mobile</a>, <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/globalization.html#GlobalizationManager">wearable</a>, and <a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/globalization.html#GlobalizationManager">TV</a> applications).</p>

 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the globalization functionality</a>.</p>

  <p>The main features of the Globalization API include:</p>
  <ul>
<li>Obtaining locale information
<p>You can obtain the following locale information:</p>
<ul>
  <li><a href="#current_language">Get the user&#39;s current language</a> as the BCP 47 identifier (such as en-US).</li>
  <li><a href="#current_locale">Get the user&#39;s current locale</a> as the BCP 47 identifier (such as en-US).</li>
  <li><a href="#currency">Get the pattern string to format and parse currency</a> and the ISO 4217 currency code.</li>
  <li><a href="#names_of_months_and_days">Get the names of months and names of the days of the week</a>.</li>
  <li><a href="#date_format">Get the pattern string to format and parse dates</a>.</li>
  <li><a href="#first_day_of_week">Get the first day of the week</a>.</li>
  <li><a href="#number_format">Get the pattern string to format and parse numbers</a>.</li>
  <li><a href="#dst">Determine whether the Daylight Saving Time is in effect</a> for a given date.</li>
</ul>
</li>
<li>Converting data
<p>You can <a href="#conversions">convert strings, numbers, and dates</a> according to the user locale. The following conversions are available:</p>
  <ul>
    <li>Date to string</li>
    <li>String to date</li>
    <li>Number to string</li>
    <li>String to number</li>
  </ul>
</li>
</ul> 


  <h2 id="warm_up" name="warm_up">Warm-up</h2>
  <p>Become familiar with the Globalization API basics by learning about:</p>
  <ul>
	<li><a href="#prerequisites">Prerequisites</a> <p>Prepare your application to use the globalization functionality.</p></li>
	<li><a href="#current_language">Retrieving the Current Language</a> <p>Get the current BCP 47 language identifier.</p></li>
	<li><a href="#current_locale">Retrieving the Current Locale</a> <p>Get the current BCP 47 locale identifier.</p></li>
	<li><a href="#currency">Retrieving the Currency Details</a> <p>Get various information about the currency.</p></li>
	<li><a href="#names_of_months_and_days">Retrieving the Names of the Months and Days of the Week</a> <p>Get the names of months and weekdays.</p></li>
	<li><a href="#date_format">Retrieving the Date Format Details</a> <p>Get various information about the date format.</p></li>
	<li><a href="#first_day_of_week">Retrieving the First Day of the Week</a> <p>Get information on which day is the first day of the week.</p></li>
	<li><a href="#number_format">Retrieving the Number Format Details</a> <p>Get various information about the number format.</p></li>
	<li><a href="#dst">Retrieving the Daylight Saving Time Status</a> <p>Get information on whether the daylight saving time is in effect for a given date using the current time zone.</p></li>
	<li><a href="#conversions">Performing Conversions</a> <p>Make conversions between strings, numbers, and dates according to the current locale.</p></li>
  </ul>
  
<h2 id="prerequisites">Prerequisites</h2>
<p>To perform any Cordova-related operations, you must wait until Cordova is fully set up (the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event occurs):</p>
	 <pre class="prettyprint">
document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);

function onDeviceReady()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Cordova features now available&quot;);
}
</pre>
     
<h2 id="current_language">Retrieving the Current Language</h2>
<p>To get the current BCP 47 language identifier:</p>
<pre class="prettyprint">
navigator.globalization.getPreferredLanguage(function(language) {console.log(&#39;Language: &#39; + language.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting language.&#39;);});</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language,
   this outputs a similar text as below
*/

Language: en-US
</pre>

<h2 id="current_locale">Retrieving the Current Locale</h2>
<p>To get the current BCP 47 locale identifier:
</p>
<pre class="prettyprint">
navigator.globalization.getLocaleName(function(locale) {console.log(&#39;Locale: &#39; + locale.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting locale.&#39;);});</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language,
   this outputs a similar text as below
*/

Locale: en-US
</pre>

<h2 id="currency">Retrieving the Currency Details</h2>
<p>To obtain the following information about the currency:</p>
<ul>
  <li>Currency pattern to format and parse the currency values
<p>The patterns follow the Unicode Technical Standard #35.</p></li>
  <li>ISO 4217 currency code</li>
  <li>Number of fractional digits</li>
  <li>Rounding increment</li>
  <li>Decimal symbol</li>
  <li>Grouping symbol</li>
</ul>

<pre class="prettyprint">
navigator.globalization.getCurrencyPattern(&#39;USD&#39;, function (pattern)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;pattern: &#39; + pattern.pattern);
&nbsp;&nbsp;&nbsp;console.log(&#39;code: &#39; + pattern.code);
&nbsp;&nbsp;&nbsp;console.log(&#39;fraction: &#39; + pattern.fraction);
&nbsp;&nbsp;&nbsp;console.log(&#39;rounding: &#39; + pattern.rounding);
&nbsp;&nbsp;&nbsp;console.log(&#39;decimal: &#39; + pattern.decimal);
&nbsp;&nbsp;&nbsp;console.log(&#39;grouping: &#39; + pattern.grouping);
}, function() {console.log(&#39;Error getting pattern.&#39;);});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

pattern: $#,##0.##;($#,##0.##)
code: USD
fraction: 2
rounding: 0
decimal: .
grouping: ,
</pre>

<h2 id="names_of_months_and_days">Retrieving the Names of the Months and Days of the Week</h2>
<p>To obtain the names of months:</p>
<pre class="prettyprint">
navigator.globalization.getDateNames(function(names)
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; names.value.length; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;month: &#39; + names.value[i]);
&nbsp;&nbsp;&nbsp;}
}, function() {console.log(&#39;Error getting names.&#39;);},
{type: &#39;wide&#39;, item: &#39;months&#39;});
</pre>

<p>In the above example, the third parameter is <span style="font-family: Courier New,Courier,monospace">{type: &#39;wide&#39;, item: &#39;months&#39;}</span>, and the names of months are obtained. To obtain the names of weekdays, pass <span style="font-family: Courier New,Courier,monospace">{type: &#39;wide&#39;, item: &#39;days&#39;}</span> as the third parameter.</p>
 
<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language,
   this outputs a similar text as below
*/

month: January
month: February
month: March
month: April
month: May
month: June
month: July
month: August
month: September
month: October
month: November
month: December
</pre>

<h2 id="date_format">Retrieving the Date Format Details</h2>
<p>To get the following information about the date format:</p>
<ul>
  <li>Date and time pattern that follows Unicode Technical Standard #35</li>
  <li>Abbreviated name of the time zone</li>
  <li>Current difference in seconds between the user&#39;s time zone and coordinated universal time</li>
  <li>Current daylight saving time offset in seconds between the user&#39;s non-daylight saving time zone and the user&#39;s daylight saving time zone.</li>
</ul>

<pre class="prettyprint">
function checkDatePattern()
{
&nbsp;&nbsp;&nbsp;navigator.globalization.getDatePattern(function(date) {console.log(&#39;Date pattern: &#39; + date.pattern);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting pattern&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{formatLength: &#39;short&#39;, selector: &#39;date and time&#39;});
}

checkDatePattern();
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

Date pattern: M/d/yyyy h:mm a
</pre>

<h2 id="first_day_of_week">Retrieving the First Day of the Week</h2>
<p>To obtain information on which day is the first day of the week (1 means Sunday):</p>
<pre class="prettyprint">
navigator.globalization.getFirstDayOfWeek(function (day) {console.log(&#39;day: &#39; + day.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting first day of week.&#39;);});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

day: 1
</pre>

<h2 id="number_format">Retrieving the Number Format Details</h2>
<p>To obtain the following information about the number format:</p>
<ul>
  <li>Number pattern that follows Unicode Technical Standard #35</li>
  <li>Symbol to use when formatting and parsing, such as percent or currency symbol
  <p>It depends on the third parameter of the <span style="font-family: Courier New,Courier,monospace">getNumberPattern()</span> method, which can be <span style="font-family: Courier New,Courier,monospace">&#39;decimal&#39;</span>, <span style="font-family: Courier New,Courier,monospace">&#39;percent&#39;</span>, or <span style="font-family: Courier New,Courier,monospace">&#39;currency&#39;</span>.</p></li>
  <li>Number of fractional digits</li>
  <li>Rounding increment</li>
  <li>Symbol to use for positive numbers</li>
  <li>Symbol to use for negative numbers</li>
  <li>Decimal symbol</li>
  <li>Grouping symbol</li>
</ul>
<pre class="prettyprint">
navigator.globalization.getNumberPattern(function (pattern)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;pattern: &#39; + pattern.pattern);
&nbsp;&nbsp;&nbsp;console.log(&#39;symbol: &#39; + pattern.symbol);
&nbsp;&nbsp;&nbsp;console.log(&#39;fraction: &#39; + pattern.fraction);
&nbsp;&nbsp;&nbsp;console.log(&#39;rounding: &#39; + pattern.rounding);
&nbsp;&nbsp;&nbsp;console.log(&#39;positive: &#39; + pattern.positive);
&nbsp;&nbsp;&nbsp;console.log(&#39;negative: &#39; + pattern.negative);
&nbsp;&nbsp;&nbsp;console.log(&#39;decimal: &#39; + pattern.decimal);
&nbsp;&nbsp;&nbsp;console.log(&#39;grouping: &#39; + pattern.grouping);
}, function() {console.log(&#39;An error occurred.&#39;);},
{type: &#39;decimal&#39;});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

pattern: #,##0.###
symbol: .
fraction: 0
rounding: 0
positive:
negative: -
decimal: .
grouping: ,
</pre>

<h2 id="dst">Retrieving the Daylight Saving Time Status</h2>
<p>To obtain information on whether the daylight saving time is in effect for a given date using the current time zone:</p>
<pre class="prettyprint">
navigator.globalization.isDayLightSavingsTime(new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(date) {console.log(&#39;dst: &#39; + date.dst);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting the DST state.&#39;);});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set DST-enabled time zone and
   it is summer,
   this outputs a similar text as below
*/

dst: true
</pre>

<h2 id="conversions">Performing Conversions</h2>
<p>To make conversions between strings, numbers, and dates according to the current locale:</p>
<ul>
  <li>Date to string
  <p>To convert a date to a string according to the user&#39;s locale and time zone:</p>
<pre class="prettyprint">
/* This example uses the default conversion options */
 
navigator.globalization.dateToString(new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(date) {console.log(&#39;Date: &#39; + date.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting dateString.&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{formatLength: &#39;short&#39;, selector: &#39;date and time&#39;});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

Date: 9/25/2012 4:21PM
</pre>
  </li>
  <li>String to date
  <p>To convert a date formatted as a DOMString according to the user&#39;s locale and time zone:</p>

  <pre class="prettyprint">
navigator.globalization.stringToDate(&#39;9/25/2012&#39;, function (date)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;month: &#39; + date.month +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;, day: &#39; + date.day +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;, year: &#39; + date.year)
}, function() {console.log(&#39;Error getting date.&#39;);},
{selector: &#39;date&#39;});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
   Note that the month integer is 1 less than the string,
   as the month integer represents an array index
*/

month: 8, day: 25, year: 2012
</pre>
  </li>
  <li>Number to string
  <p>To return a number formatted as a string according to the user&#39;s preferences:</p>
  <pre class="prettyprint">
navigator.globalization.numberToString(3.1415926,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(number) {console.log(&#39;decimal number: &#39; + number.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting number.&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type: &#39;decimal&#39;});

navigator.globalization.numberToString(1000003,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(number) {console.log(&#39;big decimal number: &#39; + number.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting number.&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type: &#39;decimal&#39;});

navigator.globalization.numberToString(0.3183099,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(number) {console.log(&#39;percentile: &#39; + number.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting number.&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type: &#39;percent&#39;});

navigator.globalization.numberToString(1099.95,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(number) {console.log(&#39;currency: &#39; + number.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting number&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type: &#39;currency&#39;});</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

decimal number: 3.142
big decimal number: 1,000,003
percentile: 32%
currency: $1,099.95
</pre>
  </li>
  <li>String to number
  <p>To parse a number formatted as a string according to the user&#39;s preferences and return the corresponding number:</p>  
 <pre class="prettyprint">
navigator.globalization.stringToNumber(&#39;1234.56&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function(number) {console.log(&#39;number: &#39; + number.value);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function() {console.log(&#39;Error getting number.&#39;);},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{type: &#39;decimal&#39;});
</pre>

<p>The following output is shown in the system log:</p>
<pre class="prettyprint">
/*
   When the browser is set to the en-US language and
   the selected currency is United States Dollars,
   this outputs a similar text as below
*/

number: 1234.56
</pre>
  </li>
</ul>
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>