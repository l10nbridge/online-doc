<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Event Handling</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../images/wearable_s_w.png"/> <img alt="TV Web" src="../../images/tv_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
			<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 3.0 and Higher for Mobile</li>
			<li>Tizen Platform 3.0 and Higher for Wearable</li>
			<li>Tizen Platform 3.0 and Higher for TV</li>
		</ul>
		<p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#add">Adding Event Listeners</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
			<li><a href="#pauseresume">Handling Pause and Resume Events</a></li>
			<li><a href="#buttons">Handling Button Press Events</a></li>   
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/events.html">Events API for Mobile Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/events.html">Events API for Wearable Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/events.html">Events API for TV Web</a></li>		
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

  <h1>Event Handling</h1>

<p>You can use events provided by Cordova in Web applications by registering custom listeners with no parameters. The Events API has no objects or properties.</p>

<p>The Events API is mandatory for both Tizen mobile and wearable profiles, which means that it is supported in all mobile and wearable devices. All mandatory APIs are supported on the Tizen Emulators.</p>

  <p>The Events API provides the following events:</p>
<ul>
    <li><span style="font-family: Courier New,Courier,monospace">deviceready</span>
        <p>The <span style="font-family: Courier New,Courier,monospace">deviceready</span> event is a prerequisite for all Cordova operations. <a href="#prerequisites">Use the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event</a> to receive a signal when Cordova&#39;s device APIs have loaded and are ready to access.</p>
    </li>
    <li><span style="font-family: Courier New,Courier,monospace">pause</span>
        <p><a href="#pauseresume">Use the <span style="font-family: Courier New,Courier,monospace">pause</span> event</a> to receive a signal when the application is put to the background. This happens typically when the screen is being locked or when the user switches to a different application.</p>
    </li>
    <li><span style="font-family: Courier New,Courier,monospace">resume</span>
        <p><a href="#pauseresume">Use the <span style="font-family: Courier New,Courier,monospace">resume</span> event</a> to receive a signal when the application is retrieved from the background.</p>
    </li>
</ul>
<p>In addition, you can <a href="#buttons">add event listeners for specific button press events</a>, as defined in the following table.</p>

<table id="button-press-events">
<caption>Table: Button press events</caption>
<tbody>
    <tr>
     <th>Event</th>
     <th>Button name</th>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">backbutton</span></td><td>Back button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">menubutton</span></td><td>Menu button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">searchbutton</span></td><td>Search button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">startcallbutton</span></td><td>Start call button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">endcallbutton</span></td><td>End call button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">volumedownbutton</span></td><td>Volume down button</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">volumeupbutton</span></td><td>Volume up button</td>
    </tr>
</tbody>
</table>

<h2 id="add">Adding Event Listeners</h2>
<p>The applications typically use the <span style="font-family: Courier New,Courier,monospace">document.addEventListener()</span> method to attach an event listener once the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event fires. This means that event listeners for other events (such as <span style="font-family: Courier New,Courier,monospace">pause</span>, <span style="font-family: Courier New,Courier,monospace">resume</span>, and <span style="font-family: Courier New,Courier,monospace">backbutton</span>) are added during or after the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event handler:</p>

<pre class="prettyprint">
document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);

function onDeviceReady()
{
&nbsp;&nbsp;&nbsp;document.addEventListener(&quot;pause&quot;, onPause);
&nbsp;&nbsp;&nbsp;document.addEventListener(&quot;volumeupbutton&quot;, onVolumeUp);
}

function onPause()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Application has been put into the background&quot;);
}

function onVolumeUp()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Volume up button pressed&quot;);
}
</pre>

 <h2 id="warm_up" name="warm_up">Warm-up</h2>
  <p>Become familiar with the Events API basics by learning about:</p>
  <ul>
   <li><a href="#prerequisites">Prerequisites</a> <p>Prepare your application to use the event functionality.</p></li>
   <li><a href="#pauseresume">Handling Pause and Resume Events</a><p>Handle the events when the application moves to the background or returns to the foreground.</p></li>
   <li><a href="#buttons">Handling Button Press Events</a><p>Handle the events when the user presses specific buttons.</p></li>   
  </ul>
  
<h2 id="prerequisites">Prerequisites</h2>
<p>To perform any Cordova-related operations, you must wait until Cordova is fully set up (the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event occurs):</p>
	 <pre class="prettyprint">
document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);

function onDeviceReady()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Cordova features now available&quot;);
}
</pre>
<p>Alternatively, you can add the event listener in the <span style="font-family: Courier New,Courier,monospace">&lt;body&gt;</span> element onload handler:</p>
<pre class="prettyprint">
window.onload = function()
{
&nbsp;&nbsp;&nbsp;document.addEventListener(&quot;deviceready&quot;, onDeviceReady);
};
</pre>

<h2 id="pauseresume">Handling Pause and Resume Events</h2>

<p>The pause signals that the application is put into the background. This happens typically when the screen is being locked or when the user switches to a different application. The resume signals that the application returns from the background to the foreground.</p>

<p>To handle the <span style="font-family: Courier New,Courier,monospace">pause</span> and <span style="font-family: Courier New,Courier,monospace">resume</span> events:</p>

<ol>
<li><p>Define the event handlers for the <span style="font-family: Courier New,Courier,monospace">pause</span> and <span style="font-family: Courier New,Courier,monospace">resume</span> events:</p>
<pre class="prettyprint">
function onPause()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Application paused&quot;);
}

function onResume()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Application resumed&quot;);
}
</pre>
</li>
<li><p>Add the event listeners in the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event handler (see <a href="#prerequisites">Prerequisites</a>).</p>
<pre class="prettyprint">
document.addEventListener(&quot;pause&quot;, onPause);
document.addEventListener(&quot;resume&quot;, onResume);
</pre>
</li>
</ol>

<h2 id="buttons">Handling Button Press Events</h2>

<p>Events are triggered when the corresponding button is pressed.</p>

<p>To add event listeners for the menu, volume up, and volume down buttons:</p>
<ol>
<li><p>Define the event handlers for the <span style="font-family: Courier New,Courier,monospace">menubutton</span>, <span style="font-family: Courier New,Courier,monospace">volumeupbutton</span>, and <span style="font-family: Courier New,Courier,monospace">volumeupbutton</span> events:</p>
<pre class="prettyprint">
function onVolumeChanged()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Volume changed&quot;);
}

function onMenuButton()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Menu button pressed&quot;);
}
</pre>
</li>
<li><p>In the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event handler (see <a href="#prerequisites">Prerequisites</a>), add the listeners.</p>
<p>In this example, the same listener is used for both the volume up and down buttons.</p>
<pre class="prettyprint">
document.addEventListener(&quot;menubutton&quot;, onMenuButton);
document.addEventListener(&quot;volumeupbutton&quot;, onVolumeChanged);
document.addEventListener(&quot;volumedownbutton&quot;, onVolumeChanged);
</pre>
</li>
</ol>
<p>When you press the buttons, the result is shown in the system console.</p>
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>