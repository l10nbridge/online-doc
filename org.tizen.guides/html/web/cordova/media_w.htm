<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Media Playback and Recording</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../images/wearable_s_w.png"/> <img alt="TV Web" src="../../images/tv_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
			<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 3.0 and Higher for Mobile</li>
			<li>Tizen Platform 3.0 and Higher for Wearable</li>
			<li>Tizen Platform 3.0 and Higher for TV</li>
		</ul>
		<p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#status">Playback and Status Changes</a></li>
			<li><a href="#prerequisites">Prerequisites</a></li>
            <li><a href="#play">Playing Audio Files</a></li>
            <li><a href="#seek">Seeking Position</a></li>
            <li><a href="#volume">Changing the Volume</a></li>
            <li><a href="#callbacks">Using Playback Callbacks</a></li>
            <li><a href="#duration">Getting the Duration and Position</a></li>
            <li><a href="#record">Recording Audio</a></li>
		</ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html">Media API for Mobile Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html">Media API for Wearable Web</a></li>
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html">Media API for TV Web</a></li>		
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

  <h1>Media Playback and Recording</h1>

<p>You can play and record audio files using various functionalities, such as play, stop, pause, volume change, and seek to position.</p>

<p>The Media API is mandatory for both Tizen mobile and wearable profiles, which means that it is supported in all mobile and wearable devices. All mandatory APIs are supported on the Tizen Emulators.</p>

 <p>Before you start, remember to <a href="#prerequisites">prepare your application to use the media functionality</a>.</p>

  <p>The main features of the Media API include:</p>
<ul>
    <li>Playing audio files
	<p>You can <a href="#play">start audio file playback</a>.</p></li>
    <li>Seeking position
	<p>You can <a href="#seek">change the playing position</a>.</p></li>
    <li>Changing the volume
	<p>You can <a href="#volume">change the volume during playback</a>.</p></li>
    <li>Getting the duration and position
	<p>You can <a href="#duration">get the duration of the audio file, and retrieve the current position</a>.</p></li>
    <li>Recording audio
	<p>You can <a href="#record">start and stop recording</a>.</p></li>
</ul>

<h2 id="status">Playback and Status Changes</h2>
<p>You can <a href="#callbacks">monitor the playback and status changes</a>. Each time the playback status changes, you can be notified by defining the <span style="font-family: Courier New,Courier,monospace">statusCallback</span> parameter of the <span style="font-family: Courier New,Courier,monospace">Media</span> constructor (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html#Media">mobile</a>, <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html#Media">wearable</a>, and <a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html#Media">TV</a> applications):</p>

<pre class="prettyprint">
var myMedia = new Media(src, successCallback, errorCallback, statusCallback);
</pre>

<p>Each time the status changes, the defined callback is called with a status constant as a parameter. The following table lists the available status constants.</p>

<table id="status-changes">
<caption>Table: Playback status changes</caption>
<tbody>
    <tr>
     <th>Constant</th>
     <th>Description</th>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">Media.MEDIA_NONE</span></td><td>File has no status.</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">Media.MEDIA_STARTING</span></td><td>Playback is starting.</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">Media.MEDIA_RUNNING</span></td><td>Playback is running.</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">Media.MEDIA_PAUSED</span></td><td>Playback is paused.</td>
    </tr>
    <tr>
        <td><span style="font-family: Courier New,Courier,monospace">Media.MEDIA_STOPPED</span></td><td>Playback is stopped.</td>
   </tr>
</tbody>
</table>

 <h2 id="warm_up" name="warm_up">Warm-up</h2>
  <p>Become familiar with the Media API basics by learning about:</p>
  <ul>
   <li><a href="#prerequisites">Prerequisites</a> <p>Prepare your application to use the media functionality.</p></li>
	<li><a href="#play">Playing Audio Files</a> <p>Play an audio file from the beginning to the end.</p></li>
	<li><a href="#seek">Seeking Position</a> <p>Change the position of the playback.</p></li>
	<li><a href="#volume">Changing the Volume</a> <p>Change the output volume during playback.</p></li>
	<li><a href="#callbacks">Using Playback Callbacks</a> <p>Use callbacks to handle playback success and errors, and various status events.</p></li>
	<li><a href="#duration">Getting the Duration and Position</a> <p>Get the audio file duration and the current position.</p></li>
	<li><a href="#record">Recording Audio</a> <p>Record audio to a file.</p></li>
  </ul>
  
<h2 id="prerequisites">Prerequisites</h2>

<p>To enable your application to use the media functionality:</p>
<ol>
<li>
<p>To perform any Cordova-related operations, you must wait until Cordova is fully set up (the <span style="font-family: Courier New,Courier,monospace">deviceready</span> event occurs):</p>
	 <pre class="prettyprint">
document.addEventListener(&quot;deviceready&quot;, onDeviceReady, false);

function onDeviceReady()
{
&nbsp;&nbsp;&nbsp;console.log(&quot;Cordova features now available&quot;);
}
</pre>
</li>
<li>
<p>To use the Media API (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html">mobile</a>, <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html">wearable</a>, and <a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html">TV</a> applications), the application has to request permission by adding the following privileges to the <span style="font-family: Courier New,Courier,monospace">config.xml</span> file:</p>
<pre class="prettyprint">
&lt;!--To record audio--&gt;
&lt;tizen:privilege name=&quot;http://tizen.org/privilege/mediacapture&quot;/&gt;
&lt;!--To change the volume during playback--&gt;
&lt;tizen:privilege name=&quot;http://tizen.org/privilege/volume.set&quot;/&gt;
</pre>
</li>
</ol>
     
<h2 id="play">Playing Audio Files</h2>

<p>To implement simple audio file playback, where the audio is played from the beginning to the end:</p>

<ol>
    <li><p>Place the audio file in a directory on a device. In this example, it is in the owner home directory: <span style="font-family: Courier New,Courier,monospace">/home/owner/content/Music/play.mp3</span>.</p></li>
    <li><p>Construct a new media object from the audio file. No additional parameters are required.</p>
<pre class="prettyprint">
var myMedia = new Media(&quot;file:///home/owner/content/Music/play.mp3&quot;);
</pre>
    </li>
    <li><p>Call the <span style="font-family: Courier New,Courier,monospace">play()</span> method:</p>
<pre class="prettyprint">
myMedia.play();
</pre>
    </li>
</ol>
<p>Release the media resources when they are no longer needed.</p>

<h2 id="seek">Seeking Position</h2>
<p>To change the position of the played file:</p>

<ol>
    <li><p>Construct a new media object from the audio file.</p>
<pre class="prettyprint">
var myMedia = new Media(&quot;file:///home/owner/content/Music/play.mp3&quot;);
</pre>
    </li>
    <li><p>Start playing:</p>
<pre class="prettyprint">
myMedia.play();
</pre>
    </li>
    <li><p>After 5 seconds, seek the position of 10 seconds.</p>
<p>A timer is registered using the <span style="font-family: Courier New,Courier,monospace">setTimeout()</span> global function.</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.seekTo(10000);
&nbsp;&nbsp;&nbsp;console.log(&#39;Playback position has been set to 10 seconds.&#39;);
}, 5000);
</pre></li>
    <li><p>Stop the media and release after 10 seconds:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.release();
}, 10000);
</pre>
    </li>
</ol>

<h2 id="volume">Changing the Volume</h2>
<p>To change the volume during playback:</p>

<ol>
    <li><p>Construct a new media object from the audio file:</p>
<pre class="prettyprint">
var myMedia = new Media(&quot;file:///home/owner/content/Music/play.mp3&quot;);
</pre>
    </li>
    <li><p>Start playing:</p>
<pre class="prettyprint">
myMedia.play();
</pre>
    </li>
    <li><p>Mute the volume after 2 seconds:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.setVolume(0.0);
}, 2000);
</pre></li>
    <li><p>Set volume to 1.0 after 5 seconds:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.setVolume(1.0);
}, 5000);
</pre>
</li>
</ol>

<h2 id="callbacks">Using Playback Callbacks</h2>
<p>Each time the audio playback is starting, paused, or finished, a success or error listener can be notified.</p>

<p>To handle playback callbacks:</p>

<ol>
    <li>
        <p>Define a success callback, which is called when the playback finishes successfully:</p>
<pre class="prettyprint">
var successCallback = function()
{
&nbsp;&nbsp;&nbsp;console.log(&#39;Audio file has been played back.&#39;);
}
</pre>
    </li>
    <li>
        <p>Define an error callback, which is called when an error occurs. The only parameter contains the error code (for a list of error codes, see the <span style="font-family: Courier New,Courier,monospace">MediaError</span> API Reference in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html#MediaError">mobile</a>, <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html#MediaError">wearable</a>, and <a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html#MediaError">TV</a> applications).</p>
<pre class="prettyprint">
var errorCallback = function(err)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;An error occurred: &#39; + err.code);
}</pre>
    </li>
    <li>
        <p>Define a status callback, which is called when a playback event (such as preparing to playback, running, paused, and stopped) occurs:</p>
<pre class="prettyprint">
var statusCallback = function(status)
{
&nbsp;&nbsp;&nbsp;switch (status)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Media.MEDIA_NONE: console.log(&#39;Audio file status is none&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Media.MEDIA_STARTING: console.log(&#39;Audio file is starting&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Media.MEDIA_RUNNING: console.log(&#39;Audio file is running&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Media.MEDIA_PAUSED: console.log(&#39;Audio file is paused&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case Media.MEDIA_STOPPED: console.log(&#39;Audio file is stopped&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default: console.log(&#39;Audio file status unknown&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
    </li>
    <li><p>Construct a new media object and pass the callbacks as parameters.</p>
<p>Since the callbacks are optional, you do not need to provide them all.</p>
<pre class="prettyprint">
var src = &quot;file:///home/owner/content/Music/play.mp3&quot;;
var myMedia = new Media(src, successCallback, errorCallback, statusCallback);
</pre>
    </li>
    <li><p>Start playing:</p>
<pre class="prettyprint">
myMedia.play();
</pre>
    </li>
    <li>
        <p>Test the callbacks by pausing and resuming playback after 3 and 5 seconds:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.pause();
}, 3000);

setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.play();
}, 5000);
</pre>
    </li>
</ol>

<h2 id="duration">Getting the Duration and Position</h2>
<p>To get the duration of the audio file, and retrieve the current position:</p>
<ol>
    <li>
        <p>Construct a new media object from an audio file:</p>
<pre class="prettyprint">
var myMedia = new Media(&quot;file:///home/owner/content/Music/play.mp3&quot;);
</pre>
    </li>
    <li>
        <p>Get the duration and print it to the system log. The -1 value means that the duration is unknown.</p>
<pre class="prettyprint">
console.log( &#39;Audio duration in seconds is &#39; + myMedia.getDuration());
</pre>
    </li>
    <li><p>Start playing:</p>
<pre class="prettyprint">
myMedia.play();
</pre>
    </li>
    <li>
        <p>The method for getting the current position is asynchronous, so a callback is used. Define the callback:</p>
<pre class="prettyprint">
var positionCallback = function(position)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;Current position in seconds is &#39; + position );
}
</pre>
    </li>
    <li>
        <p>Define the optional callback for errors in retrieving the position. For the specific error codes, see the <span style="font-family: Courier New,Courier,monospace">MediaError</span> API Reference (in <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/cordova/media.html#MediaError">mobile</a>, <a href="../../../../org.tizen.web.apireference/html/device_api/wearable/tizen/cordova/media.html#MediaError">wearable</a>, and <a href="../../../../org.tizen.web.apireference/html/device_api/tv/tizen/cordova/media.html#MediaError">TV</a> applications).</p>
<pre class="prettyprint">
var errorCallback = function(err)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;An error occurred: &#39; + err.code);
}
</pre>
    </li>
    <li>
        <p>Request the position. The result is passed asynchronously to the callback function.</p>
<pre class="prettyprint">
myMedia.getCurrentPosition(positionCallback, errorCallback);
</pre>
    </li>
    <li>
        <p>You can set a timer to get the position 5 seconds later:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.getCurrentPosition(positionCallback, errorCallback);
}, 5000);
</pre>
        <p>Something similar to the following example is shown in the system log:</p>
<pre class="prettyprint">
Current position in seconds is 0
Current position in seconds is 4.919
</pre>
    </li>
</ol>

<h2 id="record">Recording Audio</h2>

<p>To start and stop recording:</p>

<ol>
    <li><p>Define the optional success and error callbacks:</p>
<pre class="prettyprint">
var successCallback = function()
{
&nbsp;&nbsp;&nbsp;console.log(&#39;Started recording audio file.&#39;);
}

var errorCallback = function(err)
{
&nbsp;&nbsp;&nbsp;console.log(&#39;Error occurred &#39; + err.code);
}
</pre>
    </li>
    <li><p>Construct a media object and pass the name for the new audio file:</p>
<pre class="prettyprint">
var myMedia = new Media(&quot;recording.mp3&quot;, successCallback, errorCallback);
</pre>
    </li>
    <li><p>Start recording:</p>
<pre class="prettyprint">
myMedia.startRecord();
</pre>
    </li>
    <li><p>Stop recording after 10 seconds and release the media object:</p>
<pre class="prettyprint">
setTimeout(function()
{
&nbsp;&nbsp;&nbsp;myMedia.stopRecord();
&nbsp;&nbsp;&nbsp;console.log(&#39;Stopped recording an audio file.&#39;);
&nbsp;&nbsp;&nbsp;myMedia.release();
}, 10000);
</pre>
<p>Always release the media object when no longer needed.</p>
    </li>
 </ol>
 
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>