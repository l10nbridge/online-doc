<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
    <script type="text/javascript" src="../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Input Device</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../images/mobile_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
            <li><a href="#getkeys">Getting a List of All Supported Keys</a></li>
            <li><a href="#getkeyinfo">Gathering Key Information</a></li>
            <li><a href="#reg_unreg">Registering and Deregistering Keys</a></li>
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html">Input Device API for Mobile Web</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Input Device</h1>
  <p>Tizen enables you to manage input device keys.</p>
  
<p>This feature is supported in mobile applications only.</p> 

  <p>The main features of the Input Device API include:</p>
  <ul>
   <li>Gathering a list of supported keys
     <p>You can <a href="#getkeys">get a list of all supported keys</a>
      using the <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceManager">InputDeviceManager</a> interface.</p> </li>
   <li>Getting key information by its name
     <p>You can <a href="#getkeyinfo">gather information about the key by its name</a>
     using the <span style="font-family: Courier New,Courier,monospace">InputDeviceManager</span> interface and <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceKey">InputDeviceKey</a> object.</p> </li>
   <li>Registering and deregistering key events
	 <p>When you want to react to Input Device key presses, <a href="#reg_unreg">register the applicable key</a> using the <span style="font-family: Courier New,Courier,monospace">InputDeviceManager</span> interface. After registering the input device key, the application receives a DOM keyboard event when the key is pressed or released. When the events are no longer needed, deregister the key.</p>
	 <p>The application cannot register the mandatory keys (<strong>ArrowLeft</strong>, <strong>ArrowRight</strong>, <strong>ArrowUp</strong>, <strong>ArrowDown</strong>, <strong>Enter</strong>, and <strong>Back</strong>).</p></li>
  </ul>

  <p>The key names are listed in the <a href="http://www.w3.org/TR/2014/WD-DOM-Level-3-Events-key-20140612" target="_blank">DOM Level 3 KeyboardEvent key Values</a> specification. The <span style="font-family: Courier New,Courier,monospace">name</span> attribute in the Input Device API is equal to the key value specified in the specification (the <a href="http://www.w3.org/TR/2014/WD-DOM-Level-3-Events-key-20140612/#keys-media-controller" target="_blank">Media Controller Keys</a> section is the most relevant to the Input Device API). If the specification does not contain an appropriate entry for the key, the Input Device API provides a device-specific <span style="font-family: Courier New,Courier,monospace">name</span>.</p>

<h2>Warm-up</h2>
<p>Become familiar with the Input Device API basics by learning about:</p>
<ul> 
 <li><a href="#getkeys">Getting a List of All Supported Keys</a> <p>Get a list of all supported keys and perform actions for the list.</p> </li>
 <li><a href="#getkeyinfo">Gathering Key Information</a> <p>Gather the key code based on the key name.</p> </li>
 <li><a href="#reg_unreg">Registering and Deregistering Keys</a> <p>Register keys to handle DOM events for them.</p></li>
</ul>

<h2 id="getkeys" name="getkeys">Getting a List of All Supported Keys</h2>

<p>To manage input device keys, you must learn to gather a list of all supported keys:</p>
<ol>
<li><p>To get a supported key list, use the <span style="font-family: Courier New,Courier,monospace">getSupportedKeys()</span> method of the <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceManager">InputDeviceManager</a> interface:</p>

<pre class="prettyprint">
var keyCodes = {};
var supportedKeys = tizen.inputdevice.getSupportedKeys();

console.log(&quot;Supported keys list&quot;);
for (var i = 0; i &lt; supportedKeys.length; ++i) 
{
&nbsp;&nbsp;&nbsp;keyCodes[supportedKeys[i].name] = supportedKeys[i].code;
&nbsp;&nbsp;&nbsp;console.log(i + &quot; : &quot; + supportedKeys[i].name + &quot; - &quot; + supportedKeys[i].code);
}
</pre> </li>

<li> <p>Use the gathered list to handle <span style="font-family: Courier New,Courier,monospace">keydown</span> and <span style="font-family: Courier New,Courier,monospace">keyup</span> events.</p></li>

</ol>

<h2 id="getkeyinfo" name="getkeyinfo">Gathering Key Information</h2>

<p>To manage input device keys, you must learn to gather key information.</p>

<ol>
<li>
<p>Create a list of keys for which you want the information.</p>
<p>If you do not want to gather information about all supported keys, create a separate list of keys for information gathering. If you want information about all supported keys, use the list retrieved in the previous use case.</p> 

<pre class="prettyprint">
var keys = [&quot;VolumeUp&quot;, &quot;VolumeDown&quot;];
var keyCodes = {};
</pre>
</li>

<li><p>Check each key separately using the <span style="font-family: Courier New,Courier,monospace">getKey()</span> method of the <a href="../../../../org.tizen.web.apireference/html/device_api/mobile/tizen/inputdevice.html#InputDeviceManager">InputDeviceManager</a> interface.</p>

<p>If the result of the <span style="font-family: Courier New,Courier,monospace">getKey()</span> method is not <span style="font-family: Courier New,Courier,monospace">null</span>, you can access the key information. If the result is <span style="font-family: Courier New,Courier,monospace">null</span>, the key is not supported.</p>
<pre class="prettyprint">
for (var i = 0; i &lt; keys.length; i++) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var key = tizen.inputdevice.getKey(keys[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (key == null) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;key: &quot; + keys[i] + &quot; is not supported&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyCodes[key.name] = key.code;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;key: &quot; + key.name + &quot; has code: &quot; + key.code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;error: &quot; + e.name + &quot;:&quot; + e.message + &quot;, when getting key with name &quot; + keys[i]);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h2 id="reg_unreg" name="reg_unreg">Registering and Deregistering Keys</h2>
<p>To manage input device keys, you must learn to change the action of a supported key:</p>

<ol>
<li>
<p>To gather the keys, <a href="#getkeys">get a list of all supported keys</a>.</p>
</li>

<li>
<p>To register all supported keys for handling <span style="font-family: Courier New,Courier,monospace">keydown</span> and <span style="font-family: Courier New,Courier,monospace">keyup</span> events:</p>

<pre class="prettyprint">
var codeNamesMap = {};
var supportedKeys = tizen.inputdevice.getSupportedKeys();

for (var i = 0; i &lt; supportedKeys.length; ++i) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.inputdevice.registerKey(supportedKeys[i].name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;codeNamesMap[supportedKeys[i].code] = supportedKeys[i].name;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;key: &quot; + supportedKeys[i].name + &quot; was registered for event handling&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;failed to register &quot; + supportedKeys[i].name + &quot;: &quot; + error);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If you know the exact list of keys you want to register, the registration can also be done with the asynchronous <span style="font-family: Courier New,Courier,monospace">registerKeyBatch()</span> method:</p>
<pre class="prettyprint">
var keys = [&quot;VolumeUp&quot;, &quot;VolumeDown&quot;];

function errorCB(err) 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;The following error occurred: &#39; +  err.name);
}

function successCB() 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;All keys registered successfully&#39;);
}

tizen.inputdevice.registerKeyBatch(keys, successCB, errorCB);
</pre>

</li>

<li>
<p>To handle events for registered keys:</p>
<pre class="prettyprint">
window.addEventListener(&quot;keydown&quot;, function(keyEvent) 
{
&nbsp;&nbsp;&nbsp;if (codeNamesMap.hasOwnProperty(keyEvent.keyCode)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Registered key was pressed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Define some custom action */
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Some other key was pressed&quot;);
&nbsp;&nbsp;&nbsp;}
});

window.addEventListener(&quot;keyup&quot;, function(keyEvent) 
{
&nbsp;&nbsp;&nbsp;if (codeNamesMap.hasOwnProperty(keyEvent.keyCode)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Registered key was released&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Define some custom action */
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Some other key was released&quot;);
&nbsp;&nbsp;&nbsp;}
});
</pre>
</li>

<li>
<p>When custom actions are no longer needed, deregister the keys:</p>
<pre class="prettyprint">
for (var i = 0; i &lt; supportedKeys.length; ++i) 
{
&nbsp;&nbsp;&nbsp;tizen.inputdevice.unregisterKey(supportedKeys[i].name);
&nbsp;&nbsp;&nbsp;console.log(&quot;key: &quot; + supportedKeys[i].name + &quot; was unregistered for event handling&quot;);
}
</pre>

<p>The deregistration can also be done with the <span style="font-family: Courier New,Courier,monospace">unregisterKeyBatch()</span> method:</p>
<pre class="prettyprint">
var keys = [&quot;VolumeUp&quot;, &quot;VolumeDown&quot;];

function errorCB(err) 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;The following error occurred: &#39; +  err.name);
}

function successCB() 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;Unregistered successfully&#39;);
}

tizen.inputdevice.unregisterKeyBatch(keys, successCB, errorCB);
</pre>

<p>After deregistration, the <span style="font-family: Courier New,Courier,monospace">keydown</span> and <span style="font-family: Courier New,Courier,monospace">keyup</span> events are no longer triggered for the keys.</p>
</li>
</ol>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
