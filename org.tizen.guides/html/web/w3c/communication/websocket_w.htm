<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
    <script type="text/javascript" src="../../../scripts/snippet.js"></script>
    <script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>WebSocket</title>
 </head>
 <body onload="prettyPrint()" style="overflow: auto;">

 <div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#Connecting_Socket_Server">Connecting to the Socket Server</a></li>
			<li><a href="#Sending_Data">Sending Data to the Server</a></li>
			<li><a href="#Receiving_Data">Receiving Data from the Server</a></li>
			<li><a href="#Closing_Socket_Connection">Closing the Socket Connection</a></li>
		</ul>		
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#websocket">WebSocket API for Mobile Web</a></li>
			<li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#websocket">WebSocket API for Wearable Web</a></li>
            </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>WebSocket</h1>
  
<p>WebSocket in a Web environment enables connection-oriented full duplex communication, as with a TCP socket. (The server and browser can send and receive data real-time through a continuously connected TCP line.)</p>
<p>The difference between the previously used communication method in the Web environment and the new  Web socket lies in the protocol. The Web socket protocol uses HTTP in establishing a connection, however, all communication after the connection is established happens using the Web socket&#39;s independent protocol.</p>

<p>With a Web socket, the used header is extremely small, causing very little overhead. A long-term connection is used as a basis, meaning that if there is connection, sending data from client or server is possible. The long-term connection means that data can be sent and received through 1 connection, and you do not need to establish a separate connection for each sending and receiving instance. <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#ping-and-pong-frames" target="_blank">Ping and pong frames</a> can also be used.</p>

<p>The main features of the WebSocket API include:</p>
<ul>
<li>Connecting to a server
<p>To <a href="#Connecting_Socket_Server">connect to a server</a>, you must create a <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#the-websocket-interface" target="_blank">WebSocket</a> interface with the socket server URL as a mandatory parameter. The <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#parsing-websocket-urls" target="_blank">
URL format has some restrictions</a>, for example, it must use the <span style="font-family: Courier New,Courier,monospace">ws</span> or <span style="font-family: Courier New,Courier,monospace">wss</span> protocol. If the URL is not valid or uses a wrong protocol, a syntax error occurs.</p>
<p>If the connection with the socket server succeeds, the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute value is set to <span style="font-family: Courier New,Courier,monospace">1</span>. If the connection fails the attribute value is set to <span style="font-family: Courier New,Courier,monospace">3</span>, and the HTTP 503 error is returned.</p>
<p>When the connection is no longer needed, you can <a href="#Closing_Socket_Connection">close the connection</a> with the  <span style="font-family: Courier New,Courier,monospace">close()</span> method.</p>
</li>
<li>Sending data
<p>By using the <span style="font-family: Courier New,Courier,monospace">send()</span> method of the<span style="font-family: Courier New,Courier,monospace">WebSocket</span> interface, you can <a href="#Sending_Data">send data to the server</a>. The data is transmitted using the established connection. If the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute value is <span style="font-family: Courier New,Courier,monospace">CONNECTING</span>, the method throws an <span style="font-family: Courier New,Courier,monospace">InvalidStateError</span> exception.</p>
</li>
<li>Receiving data
<p>You can <a href="#Receiving_Data">receive data from the server</a> through the <span style="font-family: Courier New,Courier,monospace">message</span> event.</p>
</li>
</ul>

<h2>Warm-up</h2>
        <p>Become familiar with the WebSocket API basics by learning about:</p>
        <ul>
            <li><a href="#Connecting_Socket_Server">Connecting to the Socket Server</a>
            <p>Open a connection to the socket server and track the connection status.</p></li>
            <li><a href="#Sending_Data">Sending Data to the Server</a>
            <p>Send data to the socket server.</p></li>
            <li><a href="#Receiving_Data">Receiving Data from the Server</a>
            <p>Receive data from the socket server.</p></li>
            <li><a href="#Closing_Socket_Connection">Closing the Socket Connection</a>
            <p>Close the connection to the socket server, and track the closing status.</p></li>
        </ul>

  <h2 id="Connecting_Socket_Server" name="Connecting_Socket_Server">Connecting to the Socket Server</h2>
  
<p>To use the Web socket features in your application, you must learn to connect to a socket server:</p>  
<ol>
<li><p>Create a <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#the-websocket-interface" target="_blank">WebSocket</a> interface instance using a valid socket server URL as a parameter:</p>
<pre class="prettyprint">
var webSocketUrl = &quot;wss://html5labs-interop.cloudapp.net:443/echo&quot;;

var webSocket = new WebSocket(webSocketURL);
</pre>
<p>If the socket server URL is valid, the connection is created automatically. When the instance is created, the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute of the <span style="font-family: Courier New,Courier,monospace">WebSocket</span> instance must be set to <span style="font-family: Courier New,Courier,monospace">0</span> (CONNECTING). </p>
</li>
<li><p>Use the <span style="font-family: Courier New,Courier,monospace">open</span> and <span style="font-family: Courier New,Courier,monospace">error</span> events to track the connection status:</p>
<pre class="prettyprint">
/* If the connection is established */
webSocket.onopen = function(e) 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;connection open, readyState: &#39; + e.target.readyState);
};

/* If the connection fails or is closed with prejudice */
webSocket.onerror = function(e) 
{
&nbsp;&nbsp;&nbsp;/* Error handling */
};
</pre>
<p>If the connection is established, the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute is changed to <span style="font-family: Courier New,Courier,monospace">1</span> and the <span style="font-family: Courier New,Courier,monospace">open</span> event is triggered.</p>
</li>
</ol>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/communication/the_websocket_api" target="_blank">web_socket.htm</a></li>
 </ul>

  <h2 id="Sending_Data" name="Sending_Data">Sending Data to the Server</h2>
  
<p>To use the Web socket features in your application, you must learn to connect to send data to the server:</p>  
<ol>
<li><p>Create a <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#the-websocket-interface" target="_blank">WebSocket</a> interface instance using a valid socket server URL as a parameter:</p>
<pre class="prettyprint">
var webSocketUrl = &quot;wss://html5labs-interop.cloudapp.net:443/echo&quot;;

var webSocket = new WebSocket(webSocketURL);
</pre>
</li>
<li><p>Check the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute value, which is <span style="font-family: Courier New,Courier,monospace">1</span> (OPEN), if the socket is connected. </p>
<p>If the socket is connected, use the <span style="font-family: Courier New,Courier,monospace">send()</span> method to send the data.</p>
<pre class="prettyprint">
function sendMessage(msg) 
{
&nbsp;&nbsp;&nbsp;if (webSocket.readyState === 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webSocket.send(msg);
&nbsp;&nbsp;&nbsp;}
};
</pre>
</li>
</ol>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/communication/the_websocket_api" target="_blank">web_socket.htm</a></li>
 </ul>


  <h2 id="Receiving_Data" name="Receiving_Data">Receiving Data from the Server</h2>
  
<p>To use the Web socket features in your application, you must learn to receive data from the server:</p>  
<ol>
<li><p>Create a <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#the-websocket-interface" target="_blank">WebSocket</a> interface instance using a valid socket server URL as a parameter:</p>
<pre class="prettyprint">
var webSocketUrl = &quot;wss://html5labs-interop.cloudapp.net:443/echo&quot;;

var webSocket = new WebSocket(webSocketURL);
</pre>
</li>
<li><p>Register the <span style="font-family: Courier New,Courier,monospace">message</span> event in the <span style="font-family: Courier New,Courier,monospace">WebSocket</span> instance. The event is triggered when data is received from the server.</p>
<pre class="prettyprint">
webSocket.onmessage = function(e) 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;server message: &#39; + e.data);
};
</pre>
</li>
</ol>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/communication/the_websocket_api" target="_blank">web_socket.htm</a></li>
 </ul>

 
  <h2 id="Closing_Socket_Connection" name="Closing_Socket_Connection">Closing the Socket Connection</h2>
  
<p>To use the Web socket features in your application, you must learn to close the socket connection:</p>  
<ol>
<li><p>Create a <a href="http://www.w3.org/TR/2012/CR-websockets-20120920/#the-websocket-interface" target="_blank">WebSocket</a> interface instance using a valid socket server URL as a parameter:</p>
<pre class="prettyprint">
var webSocketUrl = &quot;wss://html5labs-interop.cloudapp.net:443/echo&quot;;

var webSocket = new WebSocket(webSocketURL);
</pre>
</li>
<li><p>Register a <span style="font-family: Courier New,Courier,monospace">close</span> event in the <span style="font-family: Courier New,Courier,monospace">WebSocket</span> instance to be notified when the connection closes:</p>
<pre class="prettyprint">
webSocket.onclose = function(e) 
{
&nbsp;&nbsp;&nbsp;console.log(&#39;connection close, readyState: &#39; + e.target.readyState);
};
</pre>
</li>
<li><p>Check the <span style="font-family: Courier New,Courier,monospace">readyState</span> attribute value, which is <span style="font-family: Courier New,Courier,monospace">1</span> (OPEN), if the socket is connected.</p>
<p>If the socket is connected, use the <span style="font-family: Courier New,Courier,monospace">close()</span> method to close the connection between the client and the server.</p>
<pre class="prettyprint">
function closeConnection() 
{
&nbsp;&nbsp;&nbsp;if (webSocket.readyState === 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;webSocket.close();
&nbsp;&nbsp;&nbsp;}
};
</pre>
</li>
</ol>
<h3>Source Code</h3>
 <p>For the complete source code related to this use case, see the following file:</p>
 <ul>
	<li><a href="http://download.tizen.org/misc/examples/w3c_html5/communication/the_websocket_api" target="_blank">web_socket.htm</a></li>
 </ul>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>