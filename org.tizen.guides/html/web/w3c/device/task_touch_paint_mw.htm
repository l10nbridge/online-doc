<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Touch Paint</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#draw">Drawing on Canvas</a></li>
            <li><a href="#feature">Using Drawing Features</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc"> 
            <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#touch">Touch Events version 1 API for Mobile Web</a></li>
			<li><a href="https://developer.tizen.org/development/sample/web/Graphics/Touch_Paint_1" target="_blank">Touch Paint Sample Description</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Task: Touch Paint</h1>

<p>This task, based on the TouchPaint sample delivered with the Tizen SDK, demonstrates how you can use the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#touch">Touch Events version 1</a> API to create a simple paint application using the touch events and the <a href="../graphics/canvas_w.htm">Canvas</a> element. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-mobile-applications" target="blank">TouchPaint</a>.</p> 

<p>This task consists of the following parts:</p> 
  <ul> 
   <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens.</li>
   <li><a href="#draw">Drawing on Canvas</a> defines how to detect touch events and draw lines on the canvas.</li> 
   <li><a href="#feature">Using Drawing Features</a> defines how to select and use drawing features, such as colors and line widths.</li> 
  </ul> 
<p>This sample is a fully functional application for implementing a basic drawing application.</p> 


<h2 id="layout" name="layout">Defining the Application Layout</h2>

<p>The TouchPaint sample application layout contains only 1 screen: the main screen that displays a canvas on which you can draw with a finger.</p> 


  <p>The following figure shows the main screen of the application.</p> 
 
<p class="figure">Figure: TouchPaint screen</p> 
<p align="center"><img alt="TouchPaint screen" src="../../../images/touchpaint_sd.png" /></p> 

<h3 id="main" name="main">Defining the Main Screen</h3>
  <ol class="tutorstep"> 

   <li>index.html Source File 
<p>The main screen displays a <a href="../graphics/canvas_w.htm">Canvas</a> element, and a description area. The description area defines a color picker and a slider as <span style="font-family: Courier New,Courier,monospace;">&lt;input&gt;</span> elements to allow the user can select the color and line width of their strokes. A <a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Mobile_UIComponents/mobile_Button.htm">button</a> is also defined to allow the user to clear the canvas.</p>
	 <pre class="prettyprint lang-html">
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;h2&gt;Touch paint&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;canvas class=&quot;canvas addHeight&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This browser is not supported
&nbsp;&nbsp;&nbsp;&lt;/canvas&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;desc&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;Color: &lt;input type=&quot;color&quot; class=&quot;strokeColor&quot;&gt;&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;Line width: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;range&quot; min=&quot;5&quot; max=&quot;30&quot; step=&quot;5&quot; value=&quot;5&quot; class=&quot;strokeWidth&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;nav&gt;&lt;/nav&gt;
&nbsp;&nbsp;&nbsp;&lt;button class=&quot;clearBtn&quot;&gt;Clear&lt;/button&gt;
&lt;/body&gt;
</pre>

</li>
  </ol> 


<h2 id="draw" name="draw">Drawing on Canvas</h2>

  <p>This section builds upon the elements described in <a href="touch_w.htm#handle">Handling Touch Events</a> and <a href="touch_w.htm#control">Controlling Multi-point Touches</a>.</p> 


<h3 id="initialize" name="initialize">Initializing the Canvas</h3>
  <ol class="tutorstep"> 
   <li>main.js Source File 
<p>Define event listeners and handlers to manage the <a href="http://www.w3.org/TR/2013/WD-touch-events-20130124/#the-touchstart-event" target="_blank">touchstart</a>, <a href="http://www.w3.org/TR/2013/WD-touch-events-20130124/#the-touchmove-event" target="_blank">touchmove</a>, and <a href="http://www.w3.org/TR/2013/WD-touch-events-20130124/#the-touchend-event" target="_blank">touchend</a> events on the canvas.</p>

<pre class="prettyprint">
window.onload = function() 
{
&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&quot;.canvas&quot;);
&nbsp;&nbsp;&nbsp;var context = canvas.getContext(&quot;2d&quot;);

&nbsp;&nbsp;&nbsp;/* Canvas size setting */
&nbsp;&nbsp;&nbsp;canvas.width = document.width;
&nbsp;&nbsp;&nbsp;canvas.height = document.height - 130;
    
&nbsp;&nbsp;&nbsp;/* Touch event listeners */
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&quot;touchstart&quot;, touchStartHandler, false);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&quot;touchmove&quot;, touchMoveHandler, false);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&quot;touchend&quot;, touchEndHandler, false);
}    
</pre>
</li></ol>

 <h3 id="draw2" name="draw2">Drawing Lines Based on Touch Events</h3>
<p>The line drawing functionality is implemented in the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.</p> 
  <ol class="tutorstep"> 
<li>Drawing based on Retrieved Event Coordinates
<p>To draw an image with fingers, you must find out the coordinates of the triggered touch events.  
Retrieve the coordinates in the <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> event handler.</p> 
<pre class="prettyprint">
function touchMoveHandler(e) 
{
&nbsp;&nbsp;&nbsp;touches = e.touches.item(0);
    
&nbsp;&nbsp;&nbsp;log.innerHTML =&#39;&lt;strong&gt;pageX:&lt;/strong&gt; &#39; + touches.pageX + 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;&lt;br/&gt;&lt;strong&gt;pageY:&lt;/strong&gt; &#39; + touches.pageY;
    
&nbsp;&nbsp;&nbsp;context.fillStyle = &quot;#f00&quot;;
    
&nbsp;&nbsp;&nbsp;/* For accurate coordinates, calculate minus offset(Left) from page(X) */
&nbsp;&nbsp;&nbsp;context.fillRect(touches.pageX - this.offsetLeft, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touches.pageY - this.offsetTop, 5, 5);
}
</pre>
<p>Every time a <span style="font-family: Courier New,Courier,monospace">touchmove</span> event is fired, the pageX and pageY coordinates of the page are shown in the log, and a quadrangle of 5 x 5 pixels is created. However, since it is difficult to implement line drawing this way, use the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> attribute instead, as shown below.</p> 
</li>

<li>Drawing based on Stored Event Coordinates
<p>Create a <span style="font-family: Courier New,Courier,monospace">drawPath</span> array that remembers the order of the triggered touch events, and edit the <span style="font-family: Courier New,Courier,monospace">touchStartHandler()</span> and <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> event handlers to define the lines the user is drawing.</p>
<ol type="a">
<li>
<p>When a <span style="font-family: Courier New,Courier,monospace">touchstart</span> event is triggered, the event handler stores the initial position.</p>
<pre class="prettyprint">
var touches;
/* Remember the order of the touch events */ 
var drawPath = new Array();
/* Flag for displaying the touching point */
var isMoved = false;
    
function touchStartHandler(e) 
{
&nbsp;&nbsp;&nbsp;/* Store the current touch information (coordinates) */
&nbsp;&nbsp;&nbsp;touches = e.changedTouches;
&nbsp;&nbsp;&nbsp;drawPath.push(touches[0]);  
}
</pre>
</li>
<li>
<p>When a <span style="font-family: Courier New,Courier,monospace">touchmove</span> event is triggered, the coordinates of the previously triggered <span style="font-family: Courier New,Courier,monospace">touchmove</span> event stored in the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> attribute are saved in the <span style="font-family: Courier New,Courier,monospace">drawPath</span> array and assigned as a parameter value of the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method. The coordinates of the current <span style="font-family: Courier New,Courier,monospace">touchmove</span> event are assigned as a parameter value of the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method, and thus the connected line is indicated.</p>
<pre class="prettyprint">
function touchMoveHandler(e) 
{
&nbsp;&nbsp;&nbsp;isMoved = true;
&nbsp;&nbsp;&nbsp;touches = e.changedTouches;
    
&nbsp;&nbsp;&nbsp;/* Assign the line style to be drawn */ 
&nbsp;&nbsp;&nbsp;context.lineWidth = strokeWidth;
&nbsp;&nbsp;&nbsp;context.strokeStyle = strokeColor;
&nbsp;&nbsp;&nbsp;context.lineJoin = &quot;round&quot;;

&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; touches.length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var idx = drawPathSetting(touches[i].identifier);
    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Draw a line from the stored coordinates to the current coordinates */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.moveTo(drawPath[idx].pageX - this.offsetLeft, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath[idx].pageY - this.offsetTop);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.lineTo(touches[i].pageX - this.offsetLeft, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touches[i].pageY - this.offsetTop);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.stroke();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Delete the stored coordinates and store the current ones */    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath.splice(idx, 1, touches[i]); 
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;e.preventDefault();
}
</pre>
</li>
<li>
<p>When a <span style="font-family: Courier New,Courier,monospace">touchend</span> event is triggered, it deletes the stored position.</p>
<pre class="prettyprint">
function touchEndHandler() 
{
&nbsp;&nbsp;&nbsp;/* Display the touching point */
&nbsp;&nbsp;&nbsp;if (!isMoved)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var startPoint = (Math.PI/180)*0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var endPoint = (Math.PI/180)*360;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.fillStyle = strokeColor;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.arc(touches[0].pageX - this.offsetLeft, touches[0].pageY - this.offsetTop, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWidth/2, startPoint, endPoint, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;isMoved=false;
&nbsp;&nbsp;&nbsp;drawPath.length = 0; /* Initialize the stored coordinates */ 
}
</pre>
</li>
</ol></li>
<li>Drawing based on Multi-point Touches
<p>If the application is controlled with fingers, you must handle multi-point touches (a mouse-controlled application only create one touch at a time and only needs 2 events to handle it). To manage multi-touches, the index of the <span style="font-family: Courier New,Courier,monospace">touches[index]</span> array is used.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">drawPathSetting()</span> method allows the application to handle multi-point touches since the existing and current coordinates of the touch events are connected respectively.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> event handler uses the <span style="font-family: Courier New,Courier,monospace">drawPathSetting()</span> method to return the index of the <span style="font-family: Courier New,Courier,monospace">drawPath</span> array (which contains the touch event details saved so far). Since the information is similar to the <span style="font-family: Courier New,Courier,monospace">identifier</span> of the touch event which has been currently triggered, the array enables each touch event to have its own information.</p>
<pre class="prettyprint">
function drawPathSetting(idx) 
{
&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; drawPath.length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var _idx = drawPath[i].identifier;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (_idx === idx) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return -1;
}    
</pre>


</li>
</ol>


<h2 id="feature" name="feature">Using Drawing Features</h2>

 
 <h3 id="initialize2" name="initialize2">Initializing Drawing</h3>
  <ol class="tutorstep"> 
   <li>main.js Source File 
<p>Variables are declared to store and display the color and line width selection of the user.</p>
<pre class="prettyprint">var strokeColorSel, strokeWidthSel;
var strokeColor;
var strokeWidth = 5;
</pre>
</li></ol>

<h3 id="stroke" name="stroke">Applying the Stroke Styles</h3>
  <ol class="tutorstep"> 
   <li>main.js Source File
<ol type="a">
<li>Add the color and line width values that the user has selected to the applicable variables, and define event handlers to track changes in the user selection.
<pre class="prettyprint">
window.onload = function() 
{
&nbsp;&nbsp;&nbsp;strokeColorSel = document.querySelector(&quot;.strokeColor&quot;);
&nbsp;&nbsp;&nbsp;strokeWidthSel = document.querySelector(&quot;.strokeWidth&quot;);
    
&nbsp;&nbsp;&nbsp;/* Add event listeners */
&nbsp;&nbsp;&nbsp;strokeColorSel.addEventListener(&quot;change&quot;, changeStrokeColor, false);
&nbsp;&nbsp;&nbsp;strokeWidthSel.addEventListener(&quot;change&quot;, changeStrokeWidth, false);
</pre>
</li>
<li>If the user changes the color or line width, the event handlers call the <span style="font-family: Courier New,Courier,monospace">changeStrokeColor()</span> or <span style="font-family: Courier New,Courier,monospace">changeStrokeWidth()</span> method to set the new style value.
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;function changeStrokeColor() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeColor = this.value;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function changeStrokeWidth() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWidth = this.value;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>To use the style values, apply them in the <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> event handler, which draws the user&#39;s strokes on the canvas.
<pre class="prettyprint">
function touchMoveHandler(e) 
{
&nbsp;&nbsp;&nbsp;context.lineWidth = strokeWidth; /* Selected line width */ 
&nbsp;&nbsp;&nbsp;context.strokeStyle = strokeColor; /* Selected line color */ 

&nbsp;&nbsp;&nbsp;/* Draw the strokes */
} 
</pre>
</li>
</ol>
</li>
</ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>