<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>JavaScript Performance Improvement</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../../../images/mw_icon.png"/> <img alt="Wearable Web" src="../../../images/ww_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
	<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#debugging">Removing the Debugging Statement</a></li>
			<li><a href="#loops">Removing Slow Loop Statements</a></li>
			<li><a href="#arraylength">Using Cached Array Length</a></li>
			<li><a href="#literal">Using Literal Expressions</a></li>
			<li><a href="#dom">Managing DOM Control</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
 <h1>JavaScript Performance Improvement</h1>
<p>The following techniques of writing JavaScript code can be used to improve application performance:</p>
<ul>
	<li><a href="#debugging">Removing the debugging statement</a></li>
	<li><a href="#loops">Removing slow loop statements</a></li>
	<li><a href="#arraylength">Using cached array length</a></li>
	<li><a href="#literal">Using literal expressions</a></li>
	<li><a href="#dom">Managing DOM control</a></li>
</ul>
 <h2 id="debugging" name="debugging">Removing the Debugging Statement</h2>
<p> The <span style="font-family: Courier New,Courier,monospace">console.log</span> statement, which is frequently used in JavaScript debugging, can cause poor performance. The following example shows how deleting the statement improves performance.</p>
<pre class="prettyprint">/* Code#1 */
var array_list = [0,1,2,3,4,5,6,7,8,9],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [];

for (var i = 0, len = array_list.length; i &lt; len; i++)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[i]);
&nbsp;&nbsp;&nbsp;console.log(array_list[i]);
}</pre>
<pre class="prettyprint">/* Code#2 */
var array_list = [0,1,2,3,4,5,6,7,8,9],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [];

for (var i = 0, len = array_list.length; i &lt; len; i++)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[i])
}</pre>
<p class="figure">Figure: JavaScript performance improvement result (in mobile applications only)</p> 
<p align="center"><img alt="JavaScript performance improvement result (in mobile applications only)" src="../../../images/js_perform_result_debug.png" /></p> 
<table border="1">
	<caption>Table: JavaScript performance improvement result</caption>
	<tbody>
		<tr>
			<th>Browser</th>
			<th>Execution time for Code#1</th>
<th> Execution time for Code#2</th>
		</tr>
		<tr>
			<td>Tizen</td>
			<td>0.823</td>
			<td>0.100</td>
		</tr>
	</tbody>
</table>
 <h2 id="loops" name="loops">Removing Slow Loop Statements</h2>
<p> The <span style="font-family: Courier New,Courier,monospace">for - in</span> loop is relatively slower than the other loops, such as <span style="font-family: Courier New,Courier,monospace">for</span> , <span style="font-family: Courier New,Courier,monospace">while</span>,  and <span style="font-family: Courier New,Courier,monospace">do - while</span>, as it assigns object properties to the variable (<span style="font-family: Courier New,Courier,monospace">idx</span>  in the example below), navigating the object every time the loop is iterated. The following example shows how modifying the loop improves performance.</p>
<pre class="prettyprint">/* Code#1 */
var array_list = [0,1,2,3,4,5,6,7,8,9],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [];
for (var idx in array_list)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[idx]);
}</pre>

<pre class="prettyprint">/* Code#2 */
var array_list = [0,1,2,3,4,5,6,7,8,9],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [];
for (var i = 0, len = array_list.length; i &lt; len; i++)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[i]);
}</pre>
<p class="figure">Figure: JavaScript performance improvement result (in mobile applications only)</p> 
<p align="center"><img alt="JavaScript performance improvement result (in mobile applications only)" src="../../../images/js_perform_result_loop.png" /></p> 
  <table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">By caching the <span style="font-family: Courier New,Courier,monospace">array_list.length</span> before using it, as shown in the second example above, better performance is achieved. For more information, see <a href="#arraylength">Using cached array length</a>.</td> 
      </tr> 
     </tbody>
</table>
<table border="1">
	<caption>Table: JavaScript performance improvement result</caption>
	<tbody>
		<tr>
			<th>Browser</th>
			<th>Execution time for Code#1</th>
<th> Execution time for Code#2</th>
		</tr>
		<tr>
			<td>Tizen</td>
			<td>0.150</td>
			<td>0.100</td>
		</tr>
	</tbody>
</table>
 <h2 id="arraylength" name="arraylength">Using Cached Array Length</h2>
<p>In a loop statement, you can cache the length of an array before using it instead of using it directly in the loop. Minimizing the steps taken to search for the scope chain activation object speeds up the response performance. The following example shows how caching the array list improves performance.</p>
<pre class="prettyprint">/* Code#1 */
var array_list = [],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [],
&nbsp;&nbsp;&nbsp;&nbsp;i = 0;
for (i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;array_list.push(i);
}
for (i = 0; i &lt; array_list.length; i++)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[i]);
}</pre>
<pre class="prettyprint">/* Code#2 */
var array_list = [],
&nbsp;&nbsp;&nbsp;&nbsp;new_array_list = [],
&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;arrayLen = 0;
for (i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;array_list.push(i);
}
for (i = 0, arrayLen = array_list.length; i &lt; arrayLen; i++)
{
&nbsp;&nbsp;&nbsp;new_array_list.push(array_list[i]);
}</pre>
<p class="figure">Figure: JavaScript performance improvement result (in mobile applications only)</p> 
<p align="center"><img alt="JavaScript performance improvement result (in mobile applications only)" src="../../../images/js_perform_result_array.png" /></p> 
<table border="1">
	<caption>Table: JavaScript performance improvement result</caption>
	<tbody>
		<tr>
			<th>Browser</th>
			<th>Execution time for Code#1</th>
<th> Execution time for Code#2</th>
		</tr>
		<tr>
			<td>Tizen</td>
			<td>0.104</td>
			<td>0.100</td>
		</tr>
	</tbody>
</table>
 <h2 id="literal" name="literal">Using Literal Expressions</h2>
<p> Using literal expressions instead of newly created ones improves the JavaScript performance. Literal expressions are optimized for modern browser engines. They reduce the amount of interpretation time of the JavaScript interpreter. The following example shows how using literal expressions improves performance.</p>
<pre class="prettyprint">/* Code#1 */
var str = &quot;&quot;;    
for (var i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;str = new String(&quot;abcd&quot;);
}</pre>
<pre class="prettyprint">/* Code#2 */
var str = &quot;&quot;;    
for (var i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;str = &quot;abcd&quot;;
}</pre>

<p class="figure">Figure: JavaScript performance improvement result (in mobile applications only)</p> 
<p align="center"><img alt="JavaScript performance improvement result (in mobile applications only)" src="../../../images/js_perform_result_literal.png" /></p> 
<table border="1">
	<caption>Table: JavaScript performance improvement result</caption>
	<tbody>
		<tr>
			<th>Browser</th>
			<th>Execution time for Code#1</th>
<th> Execution time for Code#2</th>
		</tr>
		<tr>
			<td>Tizen</td>
			<td>0.197</td>
			<td>0.100</td>
		</tr>
	</tbody>
</table>
 <h2 id="dom" name="dom">Managing DOM Control</h2>
<p> Rendering performance can be improved by minimizing direct DOM manipulation and creating a new instance of a cached DOM object.</p>
<p>When referring to variables, JavaScript revolves around a scope chain (variable object set that can be accessed in the current scope). The deeper the scope chain, the more execution time is needed.</p>
<p>The following example shows how applying DOM control improves performance.</p>
<pre class="prettyprint">/* Code#1 */
var id = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;id&#39;);
var name = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;name&#39;);
var style = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;style&#39;);
for (var i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;id = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;id&#39;);
&nbsp;&nbsp;&nbsp;name = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;name&#39;);
&nbsp;&nbsp;&nbsp;style = document.getElementById(&#39;contents_list&#39;).getAttribute(&#39;style&#39;);
}</pre>
<pre class="prettyprint">/* Code#2 */
var contents_list = document.getElementById(&#39;contents_list&#39;);
var id = contents_list.getAttribute(&#39;id&#39;);
var name = contents_list.getAttribute(&#39;name&#39;);
var style = contents_list.getAttribute(&#39;style&#39;);
for (var i = 0; i &lt; 100; i++)
{
&nbsp;&nbsp;&nbsp;id = contents_list.getAttribute(&#39;id&#39;);
&nbsp;&nbsp;&nbsp;name = contents_list.getAttribute(&#39;name&#39;);
&nbsp;&nbsp;&nbsp;style = contents_list.getAttribute(&#39;style&#39;);
}</pre>
<p class="figure">Figure: JavaScript performance improvement result (in mobile applications only)</p> 
<p align="center"><img alt="JavaScript performance improvement result (in mobile applications only)" src="../../../images/js_perform_result_js_dom.png" /></p> 
<table border="1">
	<caption>Table: JavaScript performance improvement result</caption>
	<tbody>
		<tr>
			<th>Browser</th>
			<th>Execution time for Code#1</th>
<th> Execution time for Code#2</th>
		</tr>
		<tr>
			<td>Tizen</td>
			<td>0.119</td>
			<td>0.100</td>
		</tr>
	</tbody>
</table>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>