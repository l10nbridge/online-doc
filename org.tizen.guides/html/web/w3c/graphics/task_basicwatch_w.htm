<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>

	<title>Task: Basic Watch</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
		<p class="toc-title">Content</p>
		<ul class="toc">
            <li><a href="#layout">Defining the Application Layout</a></li>
            <li><a href="#initialize">Initializing the Application</a></li>
            <li><a href="#time">Displaying the Time</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
            <li><a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#canvas2d">HTML Canvas 2D Context API for Wearable Web</a></li>
			<li><a href="https://developer.tizen.org/development/sample/web/Watch/Basic_Watch" target="_blank">Basic Watch Sample Description</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Task: Basic Watch</h1>
  
<p>This task, based on the BasicWatch sample delivered with the Tizen SDK, demonstrates how you can use the <a href="../../../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#canvas2d">HTML Canvas 2D Context</a> API to create an analog watch on a canvas. For more information on the sample functionality and creating the sample with the full source code, see <a href="https://developer.tizen.org/downloads/sample-applications/sample-wearable-applications" target="blank">BasicWatch</a>.</p>  

  <p>This task consists of the following parts:</p> 
  <ul> 
    <li><a href="#layout">Defining the Application Layout</a> defines how to create the application screens.</li>
    <li><a href="#initialize">Initializing the Application</a> defines how to initialize the application.</li>
    <li><a href="#time">Displaying the Time</a> defines how to show the clock needles on the watch canvas in a correct location.</li>
  </ul> 
  <p>This sample is a fully functional application for displaying a clock on a canvas.</p> 

<h2 id="layout" name="layout">Defining the Application Layout</h2>
 
 <p>The BasicWatch sample application layout contains only 1 screen: the main screen that displays the clock.</p> 
 
  <p>The following figure shows the main screen of the application.</p> 
  <p class="figure">Figure: BasicWatch screen</p> 
  <p align="center"><img alt="BasicWatch screen" src="../../../images/basicwatch_sd.png" /></p>
 
  <h3 id="main" name="main">Defining the Main Screen</h3> 
  <ol class="tutorstep"> 
   <li>index.html Source File 
 <p>The main screen displays a <a href="http://www.w3.org/TR/2012/WD-html5-20120329/the-canvas-element.html#the-canvas-element" target="_blank">canvas</a> element on which the watch face and needles are placed.</p>

<pre class="prettyprint lang-html">
&lt;head&gt;
&nbsp;&nbsp;&nbsp;&lt;title&gt;Canvas Clock - Canvas API Tutorial&lt;/title&gt;
&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot; /&gt;
&lt;/head&gt;
&lt;body&gt;
&nbsp;&nbsp;&nbsp;&lt;canvas class=&quot;canvas&quot;&gt;&lt;/canvas&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
</pre> </li>
<li>main.js Source File
<ol type="a">
 <li>   
<p>Create the clock in the middle of the canvas. Define the watch face style.</p>  
<pre class="prettyprint">
function renderDots() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var dx = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = null;

&nbsp;&nbsp;&nbsp;context.save();
&nbsp;&nbsp;&nbsp;context.translate(canvas.width / 2, canvas.height / 2);
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.fillStyle = &#39;#999999&#39;;	
</pre></li>
<li><p>Create 4 dots on the sides of the watch face and use the <span style="font-family: Courier New,Courier,monospace">fill()</span> method to style the dots.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;for (i = 1; i &lt;= 4; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;angle = (i - 3) * (Math.PI * 2) / 4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = clockRadius * 0.9 * Math.cos(angle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = clockRadius * 0.9 * Math.sin(angle);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.arc(dx, dy, 3, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;context.closePath();
</pre></li>
 
<li>
<p>Create the center point.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;context.beginPath();

&nbsp;&nbsp;&nbsp;context.fillStyle = &#39;#ff9000&#39;;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;

&nbsp;&nbsp;&nbsp;context.arc(0, 0, 7, 0, 2 * Math.PI, false);
&nbsp;&nbsp;&nbsp;context.fill();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
}
</pre></li></ol></li></ol>

<h2 id="initialize" name="initialize">Initializing the Application</h2>

 <ol class="tutorstep">
  <li>config.xml Source File
   <p>Define the application category.</p>

   <pre class="prettyprint">
&lt;tizen:category name=&quot;http://tizen.org/category/wearable_clock&quot; /&gt;
</pre>

	  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">
	 <p>To run your application on Samsung Gear 2, Samsung Gear 2 Neo, and Samsung Gear S devices, use <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;com.samsung.wmanager.WATCH_CLOCK&quot; /&gt;</span> instead of <span style="font-family: Courier New,Courier,monospace">&lt;tizen:category name=&quot;http://tizen.org/category/wearable_clock&quot; /&gt;</span>.</p></td> 
    </tr> 
   </tbody> 
  </table>
  </li>  
  <li>main.js Source File
   <ol type="a">
    <li>
     <p>Modify the <span style="font-family: Courier New,Courier,monospace">window.requestAnimationFrame()</span> method to make the application compatible with the main browsers.</p>
     <pre class="prettyprint">
window.requestAnimationFrame = window.requestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.webkitRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.mozRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.oRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;window.msRequestAnimationFrame ||
&nbsp;&nbsp;&nbsp;function(callback) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.setTimeout(callback, 1000 / 60);
&nbsp;&nbsp;&nbsp;};</pre>
    </li>
    <li>
     <p>Initialize the canvas context and define the canvas area.</p>
     <pre class="prettyprint">
window.onload = function() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&#39;canvas&#39;);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&#39;2d&#39;);
&nbsp;&nbsp;&nbsp;clockRadius = document.width / 2;

&nbsp;&nbsp;&nbsp;canvas.width = document.width;
&nbsp;&nbsp;&nbsp;canvas.height = canvas.width;</pre>
    </li>
    <li>
     <p>Define an event listener to detect back key events.</p>
     <pre class="prettyprint">
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName == &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
};</pre>
    </li>
   </ol>
  </li>
 </ol>

<h2 id="time" name="time">Displaying the Time</h2>
 
<p>This section builds upon the elements described in <a href="canvas_w.htm#text">Creating Text and Lines on the Canvas</a>.</p> 


<h3 id="needle" name="needle">Creating the Clock Needles</h3>
The clock needles are rendered in the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.
  <ol class="tutorstep"> 
   <li>Rendering the Clock Needles
<p>The needles can be created using the <span style="font-family: Courier New,Courier,monospace">renderNeedle()</span> method.</p>
   <p>To create the needle as a triangle or a polygon, assign the coordinate of the beginning point with the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method. To assign the rest of the points of the triangle or polygon, use the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method, which defines the position of the next connecting vertex. You can also adjust the size of each clock needle with the <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method.</p>
<pre class="prettyprint">
function renderNeedle(angle, radius) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;context.save();
&nbsp;&nbsp;&nbsp;context.rotate(angle);
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.lineWidth = 4;
&nbsp;&nbsp;&nbsp;context.strokeStyle = &#39;#fff&#39;;
&nbsp;&nbsp;&nbsp;context.moveTo(6, 0);
&nbsp;&nbsp;&nbsp;context.lineTo(radius, 0);
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.stroke();
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.restore();
}
</pre></li>
   <li>Creating the Hour Needle
<p>To create the hour needle, use the <span style="font-family: Courier New,Courier,monospace">renderHourNeedle()</span> method.</p>
<pre class="prettyprint">
function renderHourNeedle(hour) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (hour - 3) * (Math.PI * 2) / 12;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.55;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}
</pre></li>
   <li>Creating the Minute Needle
<p>To create the minute needle, use the <span style="font-family: Courier New,Courier,monospace">renderMinuteNeedle()</span> method.</p>
<pre class="prettyprint">
function renderMinuteNeedle(minute)
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var angle = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radius = null;

&nbsp;&nbsp;&nbsp;angle = (minute - 15) * (Math.PI * 2) / 60;
&nbsp;&nbsp;&nbsp;radius = clockRadius * 0.75;
&nbsp;&nbsp;&nbsp;renderNeedle(angle, radius);
}
</pre></li>
</ol>

<h3 id="current" name="current">Indicating the Current Time</h3>
<p>The time displaying functionality is implemented in the <span style="font-family: Courier New,Courier,monospace">main.js</span> file.</p>
  <ol class="tutorstep"> 
   <li>Determining the Time     
<p>Use the <span style="font-family: Courier New,Courier,monospace">new Date()</span> method to find out the current time. To point the needles accurately, define variables for the current hour and minute.</p>

<pre class="prettyprint">
function watch() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var date = new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hours = date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minutes = date.getMinutes(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;seconds = date.getSeconds(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hour = hours + minutes / 60,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;minute = minutes + seconds / 60;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nextMove = 1000 - date.getMilliseconds();
</pre></li>
<li>Erasing the Previous Time
<p>Use the <span style="font-family: Courier New,Courier,monospace">clearRect()</span> method to delete the previous time (the previously positioned needles) every time a new time is indicated. </p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;context.clearRect(0, 0, context.canvas.width, context.canvas.height);
</pre></li>
<li>Pointing the Clock Needles
<p>Display the current time.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;renderDots();
&nbsp;&nbsp;&nbsp;renderHourNeedle(hour);
&nbsp;&nbsp;&nbsp;renderMinuteNeedle(minute);

&nbsp;&nbsp;&nbsp;context.restore();
&nbsp;&nbsp;&nbsp;setTimeout(function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(watch);
&nbsp;&nbsp;&nbsp;}, nextMove);
}</pre></li></ol>

<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>