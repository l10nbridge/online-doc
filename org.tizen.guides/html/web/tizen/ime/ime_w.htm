<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
  <title>IME Application</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#architecture">Architecture</a></li>
			<li><a href="#types">Supported Application Types</a></li>
			<li><a href="#apis">Supported APIs</a></li>
			<li><a href="#config">Web IME Configuration</a></li>
			<li><a href="#hw">Hardware Key Events</a></li>
			<li><a href="#key">Key Events, Commit Strings, and Pre-edit Strings</a></li>
			<li><a href="#lifecycle">Web IME Life-cycle</a></li>
			<li><a href="#sample">Sample IME Application</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>IME Application</h1>

<p>This feature is supported in wearable applications only.</p>

 <p>Tizen Web IME (Input Method Editor) applications are written in HTML5 for Tizen, combining HTML, JavaScript, and CSS into a package that can be installed on a Tizen device, such as Samsung Gear, or the Tizen Emulator. Both the Tizen device and the Emulator must run Tizen version 2.3 or later to run Web IME applications.</p> 
 

<h2 id="architecture" name="architecture">Architecture</h2>
 
  <p>IME applications differ from other applications in that they do not follow the normal application life-cycle management and they need a mechanism to interact with the client application requesting the IME.</p> 
  <p>Tizen provides a special architecture to guarantee that Web IME applications work just like native IME applications (however, there are some restrictions due to the capability limitations of the Web applications in general). A Web IME application can be run within the core Input Service Engine process, which is also used to run native IME applications.</p> 
  <p>The following figure shows the overall architecture of the Tizen Web IME support.</p> 
  <p class="figure">Figure: Tizen Web IME support architecture</p>  
  <p align="center"><img alt="Tizen Web IME support architecture" src="../../../images/web_ime_architecture.png"/></p> 
  <p>When a Web IME is executed, the Input Service framework launches the Input Service Engine process, just like with native IME applications. The Input Service Engine process loads a special bridge IME module, <span style="font-family: Courier New,Courier,monospace">ise-web-helper-agent</span>, which executes a Web IME within its Web container and communicates with the executed Web IME.</p> 
  <p>The communication between the Web IME and the <span style="font-family: Courier New,Courier,monospace">ise-web-helper-agent</span> module is accomplished by 2 utility modules, <span style="font-family: Courier New,Courier,monospace">web-helper-agent</span> on the Web helper agent side and <span style="font-family: Courier New,Courier,monospace">web-helper-client</span> on the Web IME side. Therefore, a Web IME application must contain the <span style="font-family: Courier New,Courier,monospace">web-helper-client.js</span>, which is created automatically when you create a Web IME project using the Tizen SDK.</p> 
  <p>Since the Web IME runs within a Web container and communicates with it, as a Web IME application developer you do not need knowledge of the platform architecture or details of the native API. You can develop Web IME applications as if they were normal Web applications, as long as the <span style="font-family: Courier New,Courier,monospace">web-helper-client.js</span> file is included and properly used.</p> 
 
<h2 id="types" name="types">Supported Application Types</h2>

  <p>Tizen Web IME can interact with 2 types of Tizen applications:</p> 

  <ul> 
   <li>In-house (native) application</li> 
   <li>Downloaded (Web) application</li>
  </ul>
  
   <p>The <a href="#architecture">Web container is executed by the core Input Service Engine process</a>, allowing the Web IME to provide text input services to both Web applications and in-house native applications.</p>
 
<h2 id="apis" name="apis">Supported APIs</h2>

  <p>All the APIs you can use for your Web IME are provided by the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> object, which is accessible when you include the <span style="font-family: Courier New,Courier,monospace">web-helper-client.js</span> file in your Web IME project:</p>
  <pre class="prettyprint">&lt;script type=&quot;text/javascript&quot; src=&quot;js/web-helper-client.js&quot;&gt;&lt;/script&gt;</pre>
  <p>The following table lists the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> methods that you can invoke in your Web IME.</p>
  
  <table> 
   <caption>
     Table: WebHelperClient methods 
   </caption> 
   <tbody> 
    <tr> 
     <th>Method</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">initialize(handler)</span></td> 
     <td>Initializes the WebHelperClient object by registering a handler object. Before using the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> functionalities, make sure to call this method passing the handler object as its parameter, which implements the event handlers that must be handled by the IME.
	 <p><span style="font-family: Courier New,Courier,monospace">handler</span> parameter: Handler object implementing the <span style="font-family: Courier New,Courier,monospace">on*</span> event handlers.</p>
	 <p>The following example shows how to initialize the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> by passing a customized handler object.</p>
	     <pre class="prettyprint">
var WebHelperClientHandler = 
{
&nbsp;&nbsp;&nbsp;onInit: function () 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do what you want when your IME gets the INIT message */
&nbsp;&nbsp;&nbsp;}
};
WebHelperClient.initialize(WebHelperClientHandler);</pre>

	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">log(str)</span></td> 
     <td>Leaves a dlog message.
	 <p><span style="font-family: Courier New,Courier,monospace">str</span> parameter: Log message to display.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">commitString(str)</span></td> 
     <td>Commits a UTF-8 string to the client application directly.
	 <p><span style="font-family: Courier New,Courier,monospace">str</span> parameter: Byte array of the UTF-8 string to be committed.</p>
	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">updatePreeditString(str)</span></td> 
     <td>Updates a new UTF-8 string for pre-edit.
	<p><span style="font-family: Courier New,Courier,monospace">str</span> parameter: Byte array of the UTF-8 string to be updated.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">sendKeyEvent(code)</span></td> 
     <td>Sends a key event to a client application.
	 <p><span style="font-family: Courier New,Courier,monospace">code</span> parameter: Key event to be sent.</p>
	 </td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">setKeyboardSizes(portraitWidth, portraitHeight, landscapeWidth, landscapeHeight)</span></td> 
     <td>Updates the keyboard window geometry information.
	 <p>You must specify the portrait and landscape sizes of the Web IME using this method, or the Web IME cannot be displayed correctly as the Input Service Engine process cannot resize the IME window to the desired size.</p> 
	 <p><span style="font-family: Courier New,Courier,monospace">portraitWidth</span> parameter: Width of the keyboard, when in portrait mode.<br/>
	   <span style="font-family: Courier New,Courier,monospace">portraitHeight</span> parameter: Height of the keyboard, when in portrait mode.<br/>
	   <span style="font-family: Courier New,Courier,monospace">landscapeWidth</span> parameter: Width of the keyboard, when in landscape mode.<br/>
	   <span style="font-family: Courier New,Courier,monospace">landscapeHeight</span> parameter: Height of the keyboard, when in landscape mode.
	   </p>
	 </td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">setSelection(start_index, end_index)</span></td> 
     <td>Selects text.
        <p><span style="font-family: Courier New,Courier,monospace">start_index</span> parameter: Text start position.<br/>
          <span style="font-family: Courier New,Courier,monospace">end_index</span> parameter: Text end position.</p>
        </td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">getSelection()</span></td> 
     <td>Gets the selected text.
        </td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">getSurroundingText(maxlen_before, maxlen_after)</span></td> 
     <td>Selects the surrounding text.
        <p><span style="font-family: Courier New,Courier,monospace">maxlen_before</span> parameter: Max length before.<br/>
          <span style="font-family: Courier New,Courier,monospace">maxlen_after</span> parameter: Max length after.</p>
        </td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">deleteSurroundingText(offset, len)</span></td> 
     <td>Deletes the surrounding text.
        <p><span style="font-family: Courier New,Courier,monospace">offset</span> parameter: Cursor position offset.<br/>
          <span style="font-family: Courier New,Courier,monospace">len</span> parameter: Length of the text deletion.</p>
        </td> 
    </tr>
   </tbody>
  </table>
  
  <p>The following table lists the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> enumerations that you can use when invoking the <span style="font-family: Courier New,Courier,monospace">sendKeyEvent()</span> and <span style="font-family: Courier New,Courier,monospace">forwardKeyEvent()</span> methods of the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> object.</p>
  
  <table> 
   <caption>
     Table: WebHelperClient enumerations 
   </caption> 
   <tbody> 
    <tr> 
     <th>Enumeration</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">Keycode</span></td> 
     <td>Enumeration values used when invoking the <span style="font-family: Courier New,Courier,monospace">sendKeyEvent()</span> and <span style="font-family: Courier New,Courier,monospace">forwardKeyEvent()</span> methods. 
	  <p>Keycode example:</p>
	     <pre class="prettyprint">
Keycode: 
{
&nbsp;&nbsp;&nbsp;BACKSPACE:0xff08,
&nbsp;&nbsp;&nbsp;TAB:0xff09,
&nbsp;&nbsp;&nbsp;RETURN:0xff0d,

&nbsp;&nbsp;&nbsp;ASCIITILDE:0x07e
},</pre>

	 </td> 
    </tr> 
   </tbody>
  </table>
  
  <p>You can display event notifications, such as client application requesting the IME, on the screen. In these cases, implement the event handlers in your handler  object, which you pass as a parameter of the <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span> object <span style="font-family: Courier New,Courier,monospace">initialize()</span> method.</p>
 
 <p>The following table lists the events that you can implement in your handler object.</p>
 
  <table> 
   <caption>
     Table: Handler events 
   </caption> 
   <tbody> 
    <tr> 
     <th>Event</th> 
     <th>Description</th> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onInit()</span></td> 
     <td>Handler for the initialization signal, used when the Web IME framework initialization is finished.

	 </td> 
    </tr> 
    <tr>
	 <td><span style="font-family: Courier New,Courier,monospace">onExit()</span></td> 
     <td>Handler for the exit signal, used when this Web IME is about to be terminated.
	 </td> 
    </tr> 
    <tr>
	 <td><span style="font-family: Courier New,Courier,monospace">onFocusIn(inputContext)</span></td> 
     <td>Handler for the focus in signal, used to do something when the input context is focused in.
	 <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
    <tr>
	 <td><span style="font-family: Courier New,Courier,monospace">onFocusOut(inputContext)</span></td> 
     <td>Handler for the focus out signal, used to do something when the input context is focused out.
	  <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onShow(inputContext)</span></td> 
     <td>Handler for the show signal, used to show the keyboard.
	   <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onHide(inputContext)</span></td> 
     <td>Handler for the hide signal, used to hide the keyboard.
	   <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetRotation(degree)</span></td> 
     <td>Handler for the rotation signal, used to notify that the keyboard is being rotated.
	   <p><span style="font-family: Courier New,Courier,monospace">degree</span> parameter: Angle that this keyboard is being rotated to.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onUpdateCursorPosition(inputContext, position)</span></td> 
     <td>Handler for the update cursor position signal, used to let the keyboard get the cursor position information.
	   <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetLanguage(language)</span></td> 
     <td>Handler for the set language signal, used to set the input language.
	   <p><span style="font-family: Courier New,Courier,monospace">language</span> parameter: Language to be set.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetImdata(imdata)</span></td> 
     <td>Handler for the set IM data signal, used to send IM data to the keyboard.
	   <p><span style="font-family: Courier New,Courier,monospace">imdata</span> parameter: IM data to be set.</p>
	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onGetImdata()</span></td> 
     <td>Handler for the get IM data signal, used to get IM data from the keyboard.
	   <p>This method returns the current IM data value.</p>
	 </td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetReturnKeyType(type)</span></td> 
     <td>Handler for the set return key type signal, used to set the return key type to the keyboard.
	   <p><span style="font-family: Courier New,Courier,monospace">type</span> parameter: Type of the return key to be set; the following values are acceptable:</p>	
	     <pre class="prettyprint">
&quot;default&quot;
&quot;done&quot;
&quot;go&quot;
&quot;join&quot;
&quot;login&quot;
&quot;next&quot;
&quot;search&quot;
&quot;send&quot;
&quot;signin&quot;</pre>
	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onGetReturnKeyType()</span></td> 
     <td>Handler for the get return key type signal, used to get the return key type from the keyboard.
	   <p>This method returns the current return key type value, which is one of the values introduced in the <span style="font-family: Courier New,Courier,monospace">onSetReturnKeyType()</span> event.</p>
	 </td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetReturnKeyDisable(disabled)</span></td> 
     <td>Handler for the set return key disable signal, used to set the return key disabled state to the keyboard.
	   <p><span style="font-family: Courier New,Courier,monospace">disabled</span> parameter: Value that indicates whether the return key must be disabled.</p>
	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onGetReturnKeyDisable()</span></td> 
     <td>Handler for the get return key disable signal, used to get the return key disabled state from the keyboard.
	   <p>This method returns the current return key disabled state value.</p>
	 </td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onSetLayout(layout)</span></td> 
     <td>Handler for the set virtual keyboard layout signal, used to set the virtual keyboard layout.
	   <p><span style="font-family: Courier New,Courier,monospace">layout</span> parameter: Virtual keyboard layout value to be set; the following values are acceptable:</p>	
	     <pre class="prettyprint">
&quot;normal&quot;
&quot;number&quot;
&quot;email&quot;
&quot;url&quot;
&quot;phonenumber&quot;
&quot;ip&quot;
&quot;month&quot;
&quot;numberonly&quot;
&quot;password&quot;
&quot;datetime&quot;</pre>

	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onGetLayout()</span></td> 
     <td>Handler for the get virtual keyboard layout signal, used to get the virtual keyboard layout.
	   <p>This method returns the current virtual keyboard layout value, which is one of the values introduced in <span style="font-family: Courier New,Courier,monospace">onSetLayout()</span> event.</p>
	 </td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onResetInputContext(inputContext)</span></td> 
     <td>Handler for the reset input context signal, used to reset the keyboard input context.
	   <p><span style="font-family: Courier New,Courier,monospace">inputContext</span> parameter: Handle of the client input context that sent this event.</p>
	 </td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onProcessKeyEvent(code, mask, layout)</span></td> 
     <td>Handler for the process key event signal.
	 
	   <p>
	   <span style="font-family: Courier New,Courier,monospace">code</span> parameter: Key code of the current key event.<br/>
	   <span style="font-family: Courier New,Courier,monospace">mask</span> parameter: Modifier mask of the current key event.<br/>
	   <span style="font-family: Courier New,Courier,monospace">layout</span> parameter: Hardware keyboard layout identifier.
	   </p>
	   <p>This method returns <span style="font-family: Courier New,Courier,monospace">true</span> if the event is processed; otherwise it is forwarded to the client application.</p>
	 </td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onUpdateSurroundingText(cursor, text)</span></td> 
     <td>Handler for the surrounding text signal update.
        
          <p>
          <span style="font-family: Courier New,Courier,monospace">cursor</span> parameter: Cursor position.<br/>
          <span style="font-family: Courier New,Courier,monospace">text</span> parameter: Surrounding text near the cursor.</p>
        </td> 
    </tr>
       <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">onUpdateSelection(text)</span></td> 
     <td>Handler for the selection signal update.
        
          <p>
          <span style="font-family: Courier New,Courier,monospace">text</span> parameter: Currently selected text.</p>
        </td> 
    </tr>
	
   </tbody>
  </table>
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The Device APIs are currently not supported in Web IME applications. Device API support is expected to be included in the next version.</td> 
    </tr> 
   </tbody> 
  </table> 
  
  
<h2 id="config" name="config">Web IME Configuration</h2>
 
  <p>The Web IME configuration follows the Tizen packaging policy with certain extensions. Tizen applications are packaged according to the <a href="http://www.w3.org/TR/widgets/" target="_blank">Widget packaging guidelines</a>. For more information about Tizen extensions to configuration elements, see <a href="../../../../../org.tizen.devtools/html/web_tools/config_editor_w.htm#elements">Configuration Elements</a> and <a href="../../../../../org.tizen.devtools/html/web_tools/config_editor_w.htm#ww_extend">Extending Configuration Elements</a>.</p> 
  <p>Internally, the application package manager is responsible for installing, uninstalling, and updating packages and storing their information.</p> 
  <p>Tizen has the following additional configuration elements:</p> 
  <ul> 
   <li>
    <span style="font-family: Courier New,Courier,monospace">tizen:category</span>
	<p>To identify with other IMEs, the Web IME application must contain the UUID information.</p>	
	<pre class="prettyprint">&lt;tizen:category name="http://tizen.org/category/ime"/&gt;</pre>
   </li>
   <li>
    <span style="font-family: Courier New,Courier,monospace">tizen:uuid</span>
	<p>Added to identify the Web IME application type. If this element is defined, the application type is IME.</p>
	<table class="note"> 
     <tbody> 
      <tr> 
       <th class="note">Note</th> 
      </tr> 
      <tr> 
       <td class="note">The Device APIs are currently not supported in Web IME applications. Device API support is expected to be included in the next version.</td> 
      </tr> 
     </tbody> 
    </table>
	<pre class="prettyprint">&lt;tizen:uuid&gt;6153122a-a429-40d2-ef21-a75f468c202c&lt;/tizen:uuid&gt;</pre>
   </li>
   <li>
    <span style="font-family: Courier New,Courier,monospace">tizen:languages </span>
	
	<p>The locale string in the <span style="font-family: Courier New,Courier,monospace">&lt;tizen:language&gt;</span> element can be used to display the input language the specific Input Method Editor supports. The <span style="font-family: Courier New,Courier,monospace">&lt;tizen:languages&gt;</span> parent element can have more than 1 <span style="font-family: Courier New,Courier,monospace">&lt;tizen:language&gt;</span> child element.</p>	
	<pre class="prettyprint">
&lt;tizen:languages&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:language&gt;en-us&lt;/tizen:language&gt;
&nbsp;&nbsp;&nbsp;&lt;tizen:language&gt;en-gb&lt;/tizen:language&gt;
&lt;/tizen:languages&gt;
</pre>
   </li>
  </ul> 
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Two-letter primary codes are reserved for [ISO639] language abbreviations. Two-letter codes include <span style="font-family: Courier New,Courier,monospace">fr</span> (French), <span style="font-family: Courier New,Courier,monospace">de</span> (German), <span style="font-family: Courier New,Courier,monospace">it</span> (Italian), <span style="font-family: Courier New,Courier,monospace">nl</span> (Dutch), <span style="font-family: Courier New,Courier,monospace">el</span> (Greek), <span style="font-family: Courier New,Courier,monospace">es</span> (Spanish), <span style="font-family: Courier New,Courier,monospace">pt</span> (Portuguese), <span style="font-family: Courier New,Courier,monospace">ar</span> (Arabic), <span style="font-family: Courier New,Courier,monospace">he</span> (Hebrew), <span style="font-family: Courier New,Courier,monospace">ru</span> (Russian), <span style="font-family: Courier New,Courier,monospace">zh</span> (Chinese), <span style="font-family: Courier New,Courier,monospace">ja</span> (Japanese), <span style="font-family: Courier New,Courier,monospace">hi</span> (Hindi), <span style="font-family: Courier New,Courier,monospace">ur</span> (Urdu), and <span style="font-family: Courier New,Courier,monospace">sa</span> (Sanskrit).
<p>Any two-letter subcode is understood to be a [ISO3166] country code. For more information, see <a href="http://www.w3.org/TR/html401/struct/dirlang.html" target="_blank">http://www.w3.org/TR/html401/struct/dirlang.html</a>.</p>
</td> 
    </tr> 
   </tbody> 
  </table> 
 
<h2 id="hw" name="hw">Hardware Key Events</h2>

  <p>The Web IME is capable of not only showing a soft keyboard and emitting key events to client application, but also handling hardware key events and translating them to a specific language. This is very common when typing texts in CJK (Chinese, Japanese, and Korean) languages, where each key event must be composed to produce a final result string.</p> 
  <p>When a hardware key is pressed, the client application receives the key event and requests the Input Service framework to translate the key event. The request is then delivered to the currently selected Web IME through the event handler.</p>  

  <p>When creating the handler object for <span style="font-family: Courier New,Courier,monospace">WebHelperClient</span>, implement the <span style="font-family: Courier New,Courier,monospace">onProcessKeyEvent()</span> method in case you want to translate each hardware key event.</p> 
  <p>The following example translates the key event to a string &quot;ㅁ&quot;, which is a Korean character mapped to the <span style="font-family: Courier New,Courier,monospace">a</span> key event. </p> 
  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">To provide a full support for Korean character composition, a more complex process is needed. This example is only a demonstration.</td> 
    </tr> 
   </tbody> 
  </table>
  <pre class="prettyprint">
var WebHelperClientHandler =
{
&nbsp;&nbsp;&nbsp;onProcessKeyEvent: function(code, mask, layout)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (code == WebHelperClient.Keycode.a)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WebHelperClient.commitString(&quot;ㅁ&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
};
WebHelperClient.initialize(WebHelperClientHandler);</pre>  

  <p>When the processing of a hardware key event is completed, the <span style="font-family: Courier New,Courier,monospace">onProcessKeyEvent</span> event handler must return <span style="font-family: Courier New,Courier,monospace">true</span>. Otherwise, the client application considers the Web IME as not reacting to the key event, and tries to invoke its fallback handler, which appends an additional <span style="font-family: Courier New,Courier,monospace">a</span> to the committed &quot;ㅁ&quot; string.</p> 
 
<h2 id="key" name="key">Key Events, Commit Strings, and Pre-edit Strings</h2>

  <p>Key events, commit strings and pre-edit strings are needed to send appropriate messages to the client application.</p> 
  <p>Key events, when sent to the client application, use the same process as when a hardware key is pressed. Therefore, sending a key event to the client application using the <span style="font-family: Courier New,Courier,monospace">sendKeyEvent()</span> method calls the Web IME <span style="font-family: Courier New,Courier,monospace">onProcessKeyEvent()</span> event handler.</p> 
  <p>To prevent the key event from being sent back to the Web IME (as there is no need to translate that key event again), use the <span style="font-family: Courier New,Courier,monospace">forwardKeyEvent()</span> method that invokes the client application&#39;s fallback key event handler.</p> 
  <pre class="prettyprint">
&lt;script type=&quot;text/javascript&quot;&gt;
&nbsp;&nbsp;&nbsp;/* Trigger the Web IME onProcessKeyEvent() event handler */
&nbsp;&nbsp;&nbsp;WebHelperClient.sendKeyEvent(WebHelperClient.Keycode.a);
&nbsp;&nbsp;&nbsp;/* Do NOT trigger the Web IME onProcessKeyEvent() event handler */
&nbsp;&nbsp;&nbsp;WebHelperClient.forwardKeyEvent(WebHelperClient.Keycode.SEMICOLON);
&lt;/script&gt;</pre>

  <p>To send a batch of strings simultaneously, without generating key events for each of the component of a specific string, use the <span style="font-family: Courier New,Courier,monospace">commitString()</span> method:</p> 
  <pre class="prettyprint">
/* Generate the &quot;a&quot; key event in the client application
&quot;a&quot; is appended to the client application&#39;s editable widget */
WebHelperClient.forwardKeyEvent(WebHelperClient.Keycode.a);
/* Append the string &quot;www.&quot; to the client application&#39;s editable widget,
without generating key events */
WebHelperClient.commitString(&quot;www.&quot;);</pre>
  <p>To display a pre-edit string (a string that has not been finalized and can be substituted with another string), use the <span style="font-family: Courier New,Courier,monospace">updatePreeditString()</span> method:</p> 
  <pre class="prettyprint">
/* Show the pre-edit string &quot;abc&quot;, usually marked with an underline or highlight,
such as &quot;<u>abc</u>&quot; or &quot;<span style="background-color:#c3c3c3;">abc</span>&quot; */
WebHelperClient.updatePreeditString(&quot;abc&quot;);
/* Substitute the &quot;abc&quot; pre-edit string with a new pre-edit string &quot;def&quot;,
erasing the existing &quot;abc&quot; pre-edit string and displaying &quot;<u>def</u>&quot; or &quot;<span style="background-color:#c3c3c3;">def</span>&quot; string on the editable widget */
WebHelperClient.updatePreeditString(&quot;def&quot;);</pre>
 
<h2 id="lifecycle" name="lifecycle">Web IME Life-cycle</h2>

  <p>The Web IME applications have exactly the same life-cycle as the native IME applications. They have 4 states: unloaded, invisible, visible, and terminated.</p> 
  <p>A Web IME in the unloaded state is loaded and transferred to the invisible state when:</p> 
  <ul> 
   <li>The system starts.</li> 
   <li>The Web IME is selected in setting the application keyboard selection menu.</li>
  </ul>
  
   <p>The invisible state changes to the visible state when the Web IME receives a request from a client application to show the IME, and decides to show itself according to the request. This process is usually initiated by the user touching the editable widget area. In contrast, the visible state changes back to the invisible state when the Web IME receives a hide request message due to the loss of focus in the client application and decides to hide itself. On occasion, the Web IME can hide itself without a request from client application, for example, when the Web IME provides a <strong>Hide keyboard</strong> button within the soft keyboard, and hides itself when the button is pressed.</p>
   <p>A Web IME in the visible or invisible state can move on to the terminated state when:</p>
  <ul> 
   <li>The system is shut down.</li> 
   <li>A different Web IME is selected in setting the application keyboard selection menu.</li>
  </ul>
 
 <h2 id="sample" name="sample">Sample IME Application</h2>
 
  <p>To create an IME application:</p>
  
  <ol> 
   <li>To create the Web IME project, launch the Tizen IDE and go to <strong>File &gt; New &gt; Tizen Wearable Web Project &gt; Template &gt; IME Application &gt; Web IME application</strong>.</li> 
   <li>Enter the project name and click <strong>Finish</strong>.
   <p align="center"><img alt="Create a Web IME project" src="../../../images/web_ime_create_project.png"/></p></li> 
   <li>Modify the source code in, for example, the <span style="font-family: Courier New,Courier,monospace">index.html</span> and <span style="font-family: Courier New,Courier,monospace">style.css</span> files, as needed.</li>
   <li>Install the Web IME package  on the Emulator. To run the application, go to <strong>Run As &gt; Tizen Wearable Web Application</strong>.</li> 
   <li>In the Emulator, change the default keyboard with the Web IME you developed in <strong>Setting &gt; Text input</strong>.
   <p align="center"><img alt="Setting main" src="../../../images/web_ime_setting_main.png"/><img alt="Setting text input" src="../../../images/web_ime_setting_text_input.png"/></p></li> 
  </ol>
 
<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>