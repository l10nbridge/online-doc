<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../../css/snippet.css" />
	<script type="text/javascript" src="../../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../../scripts/search.js" charset="utf-8"></script>
    <title>Animation</title>
</head>
<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Mobile Web" src="../../../images/mobile_s_w.png"/> <img alt="Wearable Web" src="../../../images/wearable_s_w.png"/></p>
    </div>

    <div id="toc_border"><div id="toc">
		<p class="toc-title">Dependencies</p>
		<ul class="toc">
			<li>Tizen Platform 2.4 and Higher for Mobile</li>
			<li>Tizen Platform 2.3.1 and Higher for Wearable</li>
		</ul>
        <p class="toc-title">Content</p>
        <ul class="toc">
			<li><a href="#fundamentals">Animation Fundamentals</a></li>
			<li><a href="#functions">Animation Functions</a></li>
            
        </ul>
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../../../org.tizen.web.apireference/html/ui_fw_api/Animation/animation.htm">Animation API</a></li>
        </ul>
    </div></div>
</div>


<div id="container"><div id="contents"><div class="content">

<h1>Animation</h1>
<p>TAU Animation is a module for animating target objects. It allows you to make and use animation without using any other animation library. TAU Animation provides good usability, high performance, and various functionalities.</p>

 <p>This feature is supported in mobile and wearable applications only.</p>

<p>TAU Animation provides the following features:</p>
<ul>
	<li>Single or group animation
	<p>Provides usability from minimized parameters and APIs. You can easily make an animation or <span style="font-family: Courier New,Courier,monospace">TimeLine</span>.</p></li>
	<li>Group effects
	<p>Provided by a stagger. Insert a stagger into the option, and all objects in the group are applied a sequential delay.</p></li>
	<li>Time control
	<p>You can use ease, duration, and delay.</p></li>
	<li>Effect
	<p>Provides predefined effects. This means that you can use a fancy effect just by sting instead of specifying an animation value. Predefined effects are fully controlled in TAU Animation. You can also stop the animation.</p></li>
	<li>CSS animation
	<p>Target objects can be animated using CSS styles, such as <span style="font-family: Courier New,Courier,monospace">backgroundColor</span>, <span style="font-family: Courier New,Courier,monospace">border</span>, <span style="font-family: Courier New,Courier,monospace">margin</span>, <span style="font-family: Courier New,Courier,monospace">padding</span>, and <span style="font-family: Courier New,Courier,monospace">shadow</span>. A CSS animation can also be controlled by TAU Animation.</p></li>
	<li>HTML element-based animation (in future)
	<p>You can set an animation in an element instead of JavaScript. If you are skilled in HTML, you can make the animation in HTML.</p></li>
	<li>Custom <span style="font-family: Courier New,Courier,monospace">KeyFrame</span> (in future)
	<p>You can make an animation based on a custom <span style="font-family: Courier New,Courier,monospace">KeyFrame</span>.</p></li>
	<li>Callbacks
	<p>Provides the <span style="font-family: Courier New,Courier,monospace">onStart</span>, <span style="font-family: Courier New,Courier,monospace">onUpdate</span>, and <span style="font-family: Courier New,Courier,monospace">onComplete</span> callbacks. CSS animations do not support the <span style="font-family: Courier New,Courier,monospace">updateCallback</span> and <span style="font-family: Courier New,Courier,monospace">progress</span> callbacks. TAU Animation provides these features.</p></li>
</ul>

<p>To use TAU Animation, you must load the <span style="font-family: Courier New,Courier,monospace">tau.animation.min.js</span> file, which can work with any other library or Web framework. There are no other prerequisites.</p>

<h2 id="fundamentals">Animation Fundamentals</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">tau.animation.js</span> file has its own modules for animating target objects when animation methods are invoked.</p>
<p>The general idea of animating target objects is for several parts to interact with each other.</p>
<p class="figure">Figure: Animation parts</p>
<p align="center"><img src="../../../images/tau_animation_1.png" alt="Animation parts" /></p>
<ul>
	<li>Ticker: Switches the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method on and off. Ticker is operated based on events.</li>
	<li>TweenAnimator: Runs the whole time logic. The TweenAnimator invokes the animation to play or stop, and it also updates the tween value per frame.</li>
	<li>SimpleAnimation: Consists of the animation play logic. The animation makes the tween object and target object, and it also interacts with the TweenAnimator.</li>
	<li>SimpleAnimationGroup: Group of <span style="font-family: Courier New,Courier,monospace">simpleAnimation</span> objects. It can include several objects for animation.</li>
	<li>SimpleAnimation Extension: Provides the mixin functionality. Pure DOM can be a target object with the <span style="font-family: Courier New,Courier,monospace">simpleAnimation</span> extension.</li>
	<li>DomObject: Target object that also has a render logic. If the tick is switched on, the TweenAnimator invokes the update method. And then, the render logic of DomObject is invoked, and the target objects are moved based on the animation option.</li>
	<li>AnimationObject: Interface for various target objects. In this example, the <span style="font-family: Courier New,Courier,monospace">DomObject</span> is used as a reference.</li>
</ul>
<p>To make and call several animations:</p>

<ol>
<li>Make a target object for the animation.
<p>After making the target object, you can make and call animations.</p>

<p class="figure">Figure: Target object</p>
<p align="center"><img src="../../../images/tau_animation_2.png" alt="Target object" /></p>
<pre class="prettyprint">
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px;&quot;&gt;
&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blueBox = document.getElementById(&#39;blueBox&#39;);
t(&#39;#blueBox&#39;);
/* Pure HTML element can be a target */
t(blueBox);
</pre>
</li>
<li>Create an animation with transform, CSS properties, effects, and ease.
<p>Once the target object is made, you can create an animation. The animation consists of an animation value including transform, CSS properties, and effect. Basically, an animation option is inserted with the duration of 1 s (1000 ms) only as a default. If you want to add an ease function, delay, loop, or callback, create an object for an animation option.</p>
<pre class="prettyprint">
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px;&quot;&gt;
&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target;
t(&#39;#blueBox&#39;).tween({translateX: 1000}, {duration: 1000, delay: 500})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.tween({scaleX: 1.2, scaleY: 1.2}, {duration: 1000})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.tween({rotateZ: 30}, {duration: 1000})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.tween({skewX: 30}, {duration: 1000});
</pre>
</li>
<li>Put the animations into an animation queue.
<p>After making an animation, the animation is inserted into the animation queue automatically.</p>

<p class="figure">Figure: Animation queue</p>
<p align="center"><img src="../../../images/tau_animation_3.png" alt="Animation queue" /></p>

</li>
<li>After inserting the animation, send an event to the Ticker.
<p>In the above queue, there are 4 animations in queue. When all animations are inserted, the animations are popped and animated sequentially by the TweenAnimator.</p>
</li>
<li>The Ticker calls the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method.
<p>The TweenAnimator invokes the play and tick methods in the Ticker. The Ticker calls the <span style="font-family: Courier New,Courier,monospace">on()</span> method, and the <span style="font-family: Courier New,Courier,monospace">on()</span> method includes the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method. The <span style="font-family: Courier New,Courier,monospace">RAF()</span> method is invoked until the TweenAnimator&#39;s tick time reaches the end of the duration.</p>
</li>
<li>During the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method call, the <span style="font-family: Courier New,Courier,monospace">AnimationObject</span> renders the target object and the TweenAnimator&#39;s time logic is operating.
<p>The <span style="font-family: Courier New,Courier,monospace">AnimationObject</span> can get the time value using the calculating animation. The <span style="font-family: Courier New,Courier,monospace">AnimationObject</span> renders the target object based on the time value. If the duration is 1000 (ms), the TweenAnimator gives time 0 through 1000.</p>
<p class="figure">Figure: TweenAnimator</p>
<p align="center"><img src="../../../images/tau_animation_4.png" alt="TweenAnimator" /></p>
</li>
</ol>

<h2 id="functions">Animation Functions</h2>

<p>To provide better functionality, various animation features have been implemented. You can easily increase and improve an animation effect. If you want to connect several animations, use chaining animations. Predefined effects and animations with CSS properties and stagger are also provided.</p>

<h3 id="tween">Tween</h3>

<p>You can make an animation using the <span style="font-family: Courier New,Courier,monospace">tween()</span> method. If a tween animation is made, the animation is run right away. The <span style="font-family: Courier New,Courier,monospace">tween()</span> method consists of 2 parameters, <span style="font-family: Courier New,Courier,monospace">{animation}</span> and <span style="font-family: Courier New,Courier,monospace">{option}</span>:</p>
<pre class="prettyprint">
tween({animation}, {option});
</pre>
<p><span style="font-family: Courier New,Courier,monospace">{animation}</span> can be various animations, such as transform, CSS property, or predefined effect. Basically, <span style="font-family: Courier New,Courier,monospace">{animation}</span> indicates the destination of the animation. For example, <span style="font-family: Courier New,Courier,monospace">{rotateZ: 90}</span> indicates a rotation from the current value to 90 degrees. To do this, you must set the starting point of the animation, and for this, an additional animation form is provided. <span style="font-family: Courier New,Courier,monospace">{rotateZ: [30, 90]}</span> indicates the changing rotation value of the transform from 30 to 90.</p>
<pre class="prettyprint">
&lt;div id=&quot;redBox&quot; style=&quot;background-color: &#39;red&#39;; position:absolute; width:100px; height:100px;&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px; left: 200px;&quot;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">var t = tau.animation.target;
t(&#39;#redBox&#39;).tween({translateX: 1000}, 1000); /* Translate from current position to 1000 */
t(&#39;#blueBox&#39;).tween({left: 200, top: [100, 300]}, 1000); /* Add left property from current to 200, add top property from 100 to 300 */
</pre>

<h3 id="chaining">Chaining</h3>
<p>The animation is inserted to the animation queue automatically before playing. At first, this feature does not seem important for making an animation, but if this method is supported, the LOC (Line Of Code) is decreased significantly.</p>
<pre class="prettyprint">
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px;&quot;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">var t = tau.animation.target;
t(&#39;#blueBox&#39;).tween({translateX: [500, 1000]}, 1000).tween({translateY: 500}, 1000)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.tween({rotateZ: 120}, 1000).tween({skewX: [0, 30]}, 1000)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.tween({opacity: [1, 0]}, 1000).tween({opacity: 0.5}, 1000);
</pre>

<p class="figure">Figure: Animation queue and chaining</p>
<p align="center"><img src="../../../images/tau_animation_5.png" alt="Animation queue and chaining" /></p>

<p>The chaining feature makes an intuitive sequence group animation.</p>

<h3 id="effects">Predefined Effects</h3>
<p>The following predefined effects are available:</p>
<p><span style="font-family: Courier New,Courier,monospace">bounce</span>, <span style="font-family: Courier New,Courier,monospace">flash</span>, <span style="font-family: Courier New,Courier,monospace">pulse</span>, <span style="font-family: Courier New,Courier,monospace">rubberBand</span>, <span style="font-family: Courier New,Courier,monospace">shake</span>, <span style="font-family: Courier New,Courier,monospace">swing</span>, <span style="font-family: Courier New,Courier,monospace">tada</span>, <span style="font-family: Courier New,Courier,monospace">wobble</span>, <span style="font-family: Courier New,Courier,monospace">jello</span>, <span style="font-family: Courier New,Courier,monospace">bounceIn</span>, <span style="font-family: Courier New,Courier,monospace">bounceInDown</span>, <span style="font-family: Courier New,Courier,monospace">bounceInLeft</span>, <span style="font-family: Courier New,Courier,monospace">bounceInRight</span>, <span style="font-family: Courier New,Courier,monospace">bounceInUp</span>, <span style="font-family: Courier New,Courier,monospace">bounceOut</span>, <span style="font-family: Courier New,Courier,monospace">bounceOutDown</span>, <span style="font-family: Courier New,Courier,monospace">bounceOutLeft</span>, <span style="font-family: Courier New,Courier,monospace">bounceOutRight</span>, <span style="font-family: Courier New,Courier,monospace">bounceOutUp</span>, <span style="font-family: Courier New,Courier,monospace">fadeIn</span>, <span style="font-family: Courier New,Courier,monospace">fadeInDown</span>, <span style="font-family: Courier New,Courier,monospace">fadeInLeft</span>, <span style="font-family: Courier New,Courier,monospace">fadeInRight</span>, <span style="font-family: Courier New,Courier,monospace">fadeInUp</span>,
<span style="font-family: Courier New,Courier,monospace">fadeOut</span>, <span style="font-family: Courier New,Courier,monospace">fadeOutDown</span>, <span style="font-family: Courier New,Courier,monospace">fadeOutLeft</span>, <span style="font-family: Courier New,Courier,monospace">fadeOutRight</span>, <span style="font-family: Courier New,Courier,monospace">fadeOutUp</span>, <span style="font-family: Courier New,Courier,monospace">flip</span>, <span style="font-family: Courier New,Courier,monospace">flipInX</span>, <span style="font-family: Courier New,Courier,monospace">flipInY</span>, <span style="font-family: Courier New,Courier,monospace">flipOutX</span>, <span style="font-family: Courier New,Courier,monospace">flipOutY</span>,
<span style="font-family: Courier New,Courier,monospace">lightSpeedIn</span>, <span style="font-family: Courier New,Courier,monospace">lightSpeedOut</span>, <span style="font-family: Courier New,Courier,monospace">rotateIn</span>, <span style="font-family: Courier New,Courier,monospace">rotateInDownLeft</span>, <span style="font-family: Courier New,Courier,monospace">rotateInDownRight</span>, <span style="font-family: Courier New,Courier,monospace">rotateInUpLeft</span>, <span style="font-family: Courier New,Courier,monospace">rotateInUpRight</span>,
<span style="font-family: Courier New,Courier,monospace">rotateOut</span>, <span style="font-family: Courier New,Courier,monospace">rotateOutDownLeft</span>, <span style="font-family: Courier New,Courier,monospace">rotateOutDownRight</span>, <span style="font-family: Courier New,Courier,monospace">rotateOutUpLeft</span>, <span style="font-family: Courier New,Courier,monospace">rotateOutUpRight</span>, <span style="font-family: Courier New,Courier,monospace">slideInUp</span>, <span style="font-family: Courier New,Courier,monospace">slideInDown</span>, <span style="font-family: Courier New,Courier,monospace">slideInLeft</span>, <span style="font-family: Courier New,Courier,monospace">slideInRight</span>,
<span style="font-family: Courier New,Courier,monospace">slideOutUp</span>, <span style="font-family: Courier New,Courier,monospace">slideOutDown</span>, <span style="font-family: Courier New,Courier,monospace">slideOutLeft</span>, <span style="font-family: Courier New,Courier,monospace">slideOutRight</span>, <span style="font-family: Courier New,Courier,monospace">zoomIn</span>, <span style="font-family: Courier New,Courier,monospace">zoomInDown</span>, <span style="font-family: Courier New,Courier,monospace">zoomInLeft</span>, <span style="font-family: Courier New,Courier,monospace">zoomInRight</span>, <span style="font-family: Courier New,Courier,monospace">zoomInUp</span>, <span style="font-family: Courier New,Courier,monospace">zoomOut</span>, <span style="font-family: Courier New,Courier,monospace">zoomOutDown</span>, <span style="font-family: Courier New,Courier,monospace">zoomOutLeft</span>, <span style="font-family: Courier New,Courier,monospace">zoomOutRight</span>, <span style="font-family: Courier New,Courier,monospace">zoomOutUp</span>, <span style="font-family: Courier New,Courier,monospace">hinge</span>, <span style="font-family: Courier New,Courier,monospace">rollIn</span>, <span style="font-family: Courier New,Courier,monospace">rollOut</span></p>


<p>To make an identical effect, you can make many single animations. The following example shows the <span style="font-family: Courier New,Courier,monospace">shake</span> effect:</p>
<pre class="prettyprint">
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px;&quot;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target;
t(&#39;#blueBox&#39;).tween({translateX: -10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: 10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: -10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: 10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: -10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: 10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: -10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: 10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: -10}, 100);
t(&#39;#blueBox&#39;).tween({translateX: 0}, 100);
</pre>
<p>Or instead, you can use a predefined animation:</p>
<pre class="prettyprint">
&lt;div id=&quot;blueBox&quot; style=&quot;background-color: &#39;blue&#39;; position:absolute; width:100px; height:100px;&quot;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target;
t(&#39;#blueBox&#39;).tween(&#39;shake&#39;, 1000);
</pre>

<h3 id="group">Group</h3>
<p>Sometimes, you need to animate all objects with the same animation. To make an animation group for this purpose, the <span style="font-family: Courier New,Courier,monospace">target()</span> method is provided. If all classes of DOM are <span style="font-family: Courier New,Courier,monospace">box</span>, you can create a box group. Like a CSS selector, &#39;.&#39; means a class selector and &#39;#&#39; means an ID selector. Also, a pure HTML element can be a parameter of the <span style="font-family: Courier New,Courier,monospace">target()</span> method.</p>
<pre class="prettyprint">
&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target;
t(&#39;.box&#39;).tween({rotateZ: 120}, 1000);
/* All DOM are rotated */
</pre>

<h3 id="stagger">Stagger</h3>
<p>In case of handling an animation group, you can apply a different delay value to a group. The following example shows a delay with the <span style="font-family: Courier New,Courier,monospace">zoomIn</span> effect:</p>
<pre class="prettyprint">
&lt;div class=&#39;box&#39;&gt;&lt;/div&gt;
&lt;div class=&#39;box&#39;&gt;&lt;/div&gt;
&lt;div class=&#39;box&#39;&gt;&lt;/div&gt;
&lt;div class=&#39;box&#39;&gt;&lt;/div&gt;
&lt;div class=&#39;box&#39;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint">
var t = tau.animation.target;
t(&#39;.box&#39;).tween(&#39;zoomIn&#39;, {duration: 1000, stagger: 200});
/* Each box is animated with 200 ms time difference */
</pre>

<h3 id="callback">Callback</h3>
<p>You can add some actions before and after an animation. If you add the <span style="font-family: Courier New,Courier,monospace">onStart</span> callback, it is invoked before the animation. The <span style="font-family: Courier New,Courier,monospace">onComplete</span> callback is invoked after the animation.</p>
<pre class="prettyprint">
&lt;div id=&#39;blueBox&#39;&gt;&lt;/div&gt;
</pre>
<pre class="prettyprint"
>var t = tau.animation.target;
t(&#39;#blueBox&#39;).tween({translateY: [0, 150], rotateZ: [0, 180]}, 
{
&nbsp;&nbsp;&nbsp;duration: 1000,
&nbsp;&nbsp;&nbsp;onStart: function()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t(&#39;#blueBox&#39;).innerText = &#39;start&#39;;
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onComplete: function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t(&#39;#blueBox&#39;).tween({backgroundColor: &#39;navy&#39;}, {duration: 1000});
&nbsp;&nbsp;&nbsp;}
});
</pre>
<p>In the above animation, the box is translated by Y axis from 0 to 150 and rotated from 0 to 180. Before translating and rotating, the <span style="font-family: Courier New,Courier,monospace">start</span> text is inserted into the box. After translating and rotating, the box&#39;s background color is changed to navy.</p>


<script type="text/javascript" src="../../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', 'UA-25976949-1']);
    _gaq.push(['_trackPageview']);
    (function() {
        var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
        ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
        var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
    })();
</script>

</body>
</html>