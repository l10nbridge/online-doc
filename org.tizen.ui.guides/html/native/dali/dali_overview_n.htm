<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>DALi Overview: Getting Started with DALi UI Programming</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#dali">Dali Fundamentals</a></li>
			<li><a href="#create">Creating a DALi Application</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/###.html">DALi API References for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/###.html">DALi API References for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>DALi Overview: Getting Started with DALi UI Programming</h1>

<p>Dynamic Animation Library (DALi) internally defines a virtual 3D world (space) and maintains hierarchical objects in the 3D world. The hierarchical object tree is known as the <a href="http://en.wikipedia.org/wiki/Scene_graph" target="_blank">scene graph</a>. A node in the scene graph can have several children but often only a single parent, with the effect of a parent applied to all its child nodes; an operation performed on a group automatically propagates its effect to all of its members.</p>
<p>There are various types of nodes, such as image, text, and 3D object.</p>

<h2 id="dali" name="dali">DALi Fundamentals</h2>

<p>Before starting UI programming with DALi, familiarize yourself with the basic concepts.</p>

<h3>Actor and Stage</h3>

<p>Actor is the primary object for interaction in DALi applications. Actors are effective nodes that receive input (touch events) and act as a container for drawable elements and other actors. A DALi application uses a hierarchy of actor objects to position visible content. An actor inherits a position relative to its parent, and can be moved relative to this point. UI components can be built by combining multiple actors.</p>
<p>Stage is a top-level node of the scene graph used for displaying a tree of actors. To display an actor, add it to the stage.</p>

<h3>Signal and Slot</h3>

<p><a href="http://doc.qt.io/qt-5/signalsandslots.html" target="_blank">Signals and slots</a> are used in the QT GUI library for communication between objects. Objects can send signals containing event information, which can be received by other objects using special functions known as slots. The DALi event system follows the signal and slot mechanism.</p>

<p>Signal events are emitted when a certain action or event occurs. The application can connect using these signals. Standard C-style functions can be used to connect to these signals if no local data needs to be accessed, otherwise a class method can also be connected.</p>
<p>Applications can manually disconnect from signals when required. However, DALi also provides safe signal disconnection. This means that when the connecting object is deleted, the signal is automatically disconnected.</p>

<h3>DALi Internal Structure</h3>

<p>DALi consists of the following modules:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">dali-core</span>
<p>This module provides scene graph -based rendering, animation, and event handling. It is a base module and forms the biggest part of 
DALi.</p>
</li>
<li><span style="font-family: Courier New,Courier,monospace;">dali-toolkit</span>
<p>This module provides UI components and various effects on top of the dali-core.</p></li>
<li><span style="font-family: Courier New,Courier,monospace;">dali-adaptor</span>
<p><span style="font-family: Courier New,Courier,monospace;">dali-adaptor</span> is a platform adaptation layer. It initializes and sets up DALi appropriately. The module provides many platform-related services with its internal module, platform abstraction. Several signals can be connected to it to keep you informed when certain platform-related activities occur.</p></li>
</ul>
<p class="figure">Figure: DALi internal structure</p>
<p align="center"><img alt="DALi internal structure" src="../../images/dali_component.png" /></p>

<h2 id="create" name="create">Creating a DALi Application</h2>

<p>To create a &#39;Hello World&#39; application with Dali:</p>
<ol>
<li><a href="#create">Create a DALi project</a></li>
<li><a href="#initial">Initialize the DALi application</a></li>
<li><a href="#actor">Create an actor and add it to a stage</a></li>
<li><a href="#build">Build your DALi application</a></li>
<li><a href="#run">Run your DALi application</a></li>
</ol>

<h3 id="create" name="create">Create a DALi project</h3>

<ol>
<li>Launch the <strong>Tizen IDE</strong>.</li>
<li>Choose File &gt; New &gt; Tizen Native Project.
<p>Press Finish button, then your project is created at the default location. If you want to change the location, uncheck 'Use default location' and set the new location.
Please see <a href="../../../../org.tizen.gettingstarted/html/native/process/app_dev_process_n.htm#creating">Creating the Application Project</a> for more information.</p>
</li>

<p class="figure">Figure: Create a DALi project</p>
<p align="center"><img alt="Create a DALi project" src="../../images/tizen_project_dali.png" width="600"/></p>

<li>The new project is shown in the Project Explorer view of the IDE. If you open src/basicdaliapplication.cpp, you can see the source code of basic DALi application as follows:
<pre class="prettyprint">
#include &lt;dali-toolkit/dali-toolkit.h&gt;

using namespace Dali;
using Dali::Toolkit::TextLabel;

// This example shows how to create and display Hello World using a simple TextLabel
//
class HelloWorldController : public ConnectionTracker
{
public:

  HelloWorldController( Application& application )
  : mApplication( application )
  {
    // Connect to the Application's Init signal
    mApplication.InitSignal().Connect( this, &HelloWorldController::Create );
  }

  ~HelloWorldController()
  {
    // Nothing to do here
  }

  // The Init signal is received once (only) during the Application lifetime
  void Create( Application& application )
  {
    // Get a handle to the stage
    Stage stage = Stage::GetCurrent();
    stage.SetBackgroundColor( Color::WHITE );

    TextLabel textLabel = TextLabel::New( "Hello World" );
    textLabel.SetAnchorPoint( AnchorPoint::TOP_LEFT );
    textLabel.SetName( "hello-world-label" );
    stage.Add( textLabel );

    // Respond to a click anywhere on the stage
    stage.GetRootLayer().TouchedSignal().Connect( this, &HelloWorldController::OnTouch );
  }

  bool OnTouch( Actor actor, const TouchEvent& touch )
  {
    // quit the application
    mApplication.Quit();
    return true;
  }

private:
  Application&  mApplication;
};

// Entry point for Tizen applications
//
int main( int argc, char **argv )
{
  Application application = Application::New( &argc, &argv );
  HelloWorldController test( application );
  application.MainLoop();
  return 0;
}
</pre>
</li>
</ol>

<h3 id="initial" name="initial">Initialize the DALi Application</h3>

<p>To use DALi APIs, include the <span style="font-family: Courier New,Courier,monospace;">dali-toolkit.h</span> header file. It includes the <span style="font-family: Courier New,Courier,monospace;">dali-core</span> and <span style="font-family: Courier New,Courier,monospace;">dali-adaptor</span> modules.</p>

<pre class="prettyprint">#include &lt;dali-toolkit/dali-toolkit.h&gt;</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Application.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Application.html">wearable</a> applications) initializes and sets up DALi.</p>
<p>Several signals can be connected to keep you informed when certain platform related activities occur and ensure that, upon system events, DALi is called in a thread-safe manner.</p>

<p>Create a <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> instance:</p>

<pre class="prettyprint">
Application application = Application::New(&amp;argc, &amp;argv);</pre>
  
<p>After getting the initialized signal from the <span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> instance, you can the DALi APIs for building the scene graph. Connect the <span style="font-family: Courier New,Courier,monospace;">HelloWorldController::Create</span> callback to <span style="font-family: Courier New,Courier,monospace;">DALi::Application InitSignal()</span> function:</p>

<pre class="prettyprint">
mApplication.InitSignal().Connect(this, &amp;HelloWorldController::Create);</pre>

<p>To run the application, start its main loop. This ensures that images are displayed and events as well as signals are dispatched and captured.</p>
<pre class="prettyprint">
application.MainLoop();</pre>
  
<h3 id="actor" name="actor">Create an Actor and Add It to a Stage</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">TextLabel</span> UI component renders a short text string. To display the <span style="font-family: Courier New,Courier,monospace;">TextLabel</span> component, add it to a stage. The <span style="font-family: Courier New,Courier,monospace;">stage</span> instance is a singleton object (the only instance of its class during the lifetime of the program), so you can get it using a static function:</p>

<pre class="prettyprint">
Stage stage = Stage::GetCurrent();
stage.SetBackgroundColor( Color::WHITE );

TextLabel textLabel = TextLabel::New( "Hello World" );
textLabel.SetAnchorPoint( AnchorPoint::TOP_LEFT );
textLabel.SetName( "hello-world-label" );
stage.Add( textLabel );
</pre>

<p>This code additionally sets the background color of the <span style="font-family: Courier New,Courier,monospace;">stage</span> and the anchor point, a point defining a position of a child actor from its parent, of the <span style="font-family: Courier New,Courier,monospace;">textLabel</span>. The application stores actor and resource handles. DALi objects are reference-counted, which makes sure they exist only as long as they are needed. Even if the <span style="font-family: Courier New,Courier,monospace;">TextLabel</span> component is removed from the stage, it remains alive through the reference.</p>


<h3 id="build" name="build">Build your DALi application</h3>

<p>To build your application, choose Project &gt; Build Project or press F10.</p>
<p>The Tizen IDE automatically packages the project after building. Please note that you need to register your certificate at the first time to build. Please see <a href="../../../../org.tizen.devtools/html/common_tools/certificate_registration.htm">Certificate Registration</a> and <a href="../../../../org.tizen.gettingstarted/html/native/process/building_app_n.htm">Building Applications</a> for more information.</p>


<h3 id="run" name="run">Run your DALi application</h3>

<p>To run your application, choose Run &gt; Run or press Ctrl+F11.</p>
<p>Please see <a href="../../../../org.tizen.gettingstarted/html/native/process/running_app_n.htm">Running Applications</a> for more information.</p>

<p class="figure">Figure: The first DALi application running on Tizen emulator</p>
<p align="center"><img alt="The first DALi application" src="../../images/hello_world_dali.png" /></p>
    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

