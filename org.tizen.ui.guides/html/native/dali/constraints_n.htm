<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Constraints</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#use">Using a Constraint</a></li>
			<li><a href="#source">Constraint Sources</a></li>
			<li><a href="#function">Constraint Function</a></li>
			<li><a href="#create">Creating a Constraint</a></li>
			<li><a href="#remove">Removing Constraints</a></li>
			<li><a href="#equal">Equal To Constraint</a></li>
			<li><a href="#relative">Relative To Constraint</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Constraint.html">DALi::Constraint API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Constraint.html">DALi::Constraint API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
<h1>Constraints</h1>

<p>Constraints are used to modify the property of an actor, based on other properties of the same actor; properties of the actor&#39;s parent; or properties of another actor altogether, when the modification needs to be at run-time. Custom functions or functors can be supplied, where the desired value of the property can be calculated. These functions (or functors) are called in every frame, therefore they must be fast and not too complex, otherwise they can affect performance.</p>
<p>Multiple constraints can be applied to the same actor at the same time. The order in which constraints are applied is important as this is the order in which they are processed in the update thread.</p>
<p>Constraints are applied after animations have been applied. This means that Constraints override the values set by Animations. Constraints are not applied to off-stage actors.</p>
<p>Not all properties can be used as a constraint input. For more details, see the <span style="font-family: Courier New,Courier,monospace;">IsPropertyAConstraintInput()</span> function in the <span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Handle.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Handle.html">wearable</a> applications).</p>

<h2 id="use" name="use">Using a Constraint</h2>

<p>Constraints are designed as a way of modifying properties that cannot be modified by any existing built-in functionality, such as animations, size negotiation, parent anchor, or origin settings. As they provide the ability for the application developer to execute their own code within the update thread, DALi can no longer guarantee the timeliness of this code, or how optimized it can be.</p>
<p>Generally, you must not use constraints with the <span style="font-family: Courier New,Courier,monospace;">size</span> property as constraining the size and size negotiation are mutually exclusive. Consider the following use cases as an example of when and when not to use a constraint:</p>

<table>
   <caption>
     Table: Examples of constraint use
   </caption>
   <tbody>
    <tr>
     <th>Requirement</th>
	 <th>Solution</th>
    </tr>
    <tr>
		<td>Need a child to be 50% the size of it&#39;s parent.</td>
		<td>Use size negotiation.</td>
	</tr>
	<tr>
		<td>Need to zoom an actor in to the screen using its scale property.</td>
		<td>Use an animation.</td>
	</tr>
	<tr>
		<td>Need an actor to appear centered around the bottom-right corner of its parent.</td>
		<td>Use ParentOrigin and AnchorPoint.</td>
	</tr>
	<tr>
		<td>Need to lay out a series of controls with various alignment requirements.</td>
		<td>Use either Anchor and origin settings, or a TableView.</td>
	</tr>
	<tr>
		<td>Need to automatically modify the position property of one actor based on the position property of another actor, that is neither a parent OR a child.</td>
		<td>Use a constraint.</td>
	</tr>
	<tr>
		<td>Need to position an actor relative to its parent actor in a NON-UNIFORM way, or a non-linear calculation needs to be performed that requires a functor.</td>
		<td>Use a constraint.</td>
	</tr>
	<tr>
		<td>Need to modify an actor&#39;s property in real time based on some calculations that require additional data to be stored in-between frames.</td>
		<td>Use a constraint. The constraint functor can hold any variables within it that need to be preserved frame-to-frame.</td>
	</tr>
   </tbody>
  </table>

<p>For most general cases, the position and size requirements of a child or parent actor (from its child or parent) can be calculated with size negotiation.</p>

<h2 id="source" name="source">Constraint Sources</h2>
<p>These properties are used as input sources to the constraint. The constraint takes these values, optionally performs a calculation on them (if using a custom functor) and writes the result to the specified property of the target actor. The source actor is specified as either the same actor, its parent, or another actor.</p>
<ul>
<li>Local source
<p>A local source is based on the local properties (such as size, position, scale, orientation, or color) of an actor. For example, the actor&#39;s orientation can be used as a constraint input source.</p>
<pre class="prettyprint">
Dali::ConstraintSource source(Dali::LocalSource(Dali::Actor::Property::ORIENTATION));
</pre>
</li>
<li>Parent Source
<p>A parent source is based on properties of the actor's parent. For example, a parent&#39;s position can be used as a constraint input source.</p>
<pre class="prettyprint">
Dali::ConstraintSource source(Dali::ParentSource(Dali::Actor::Property::POSITION));
</pre>
</li>
<li>Other Handle Source
<p>You can base your source on the properties of another handle altogether. For example, a sibling actor&#39;s color can be used as a constraint input source.</p>
<pre class="prettyprint">
Dali::ConstraintSource source(Dali::Source(anotherHandle, Dali::Actor::Property::COLOR));
</pre>
</li>
</ul>

<h2 id="function" name="function">Constraint Function</h2>

<p>The signature of the constraint function is:</p>

<pre class="prettyprint">
void Function(PropertyType &amp;current, const Dali::PropertyInputContainer &amp;inputs);
</pre>
<p>In this function the <span style="font-family: Courier New,Courier,monospace;">current</span> parameter is a reference to the target property type, such as float, Vector2, or Vector3. This is an in or out parameter. It represents the current value of the property and the expectation is that it is modified by the function to the desired value.</p>
<p>The <span style="font-family: Courier New,Courier,monospace;">inputs</span> parameter holds all the constraint input sources. Each element is a pointer to the property-input and can be accessed using the indexing operator [ ]. The order in which the sources are added is the order in which the property-inputs are sorted in the container. For example:</p>
<pre class="prettyprint">
constraint.AddSource(Dali::LocalSource(Dali::Actor::Property::POSITION));
constraint.AddSource(Dali::LocalSource(Dali::Actor::Property::SIZE));
constraint.AddSource(Dali::ParentSource(Dali::Actor::Property::POSITION));
constraint.AddSource(Dali::ParentSource(Dali::Actor::Property::SIZE));
</pre>
<p>In the constraint function this equals to:</p>
<pre class="prettyprint">
const Dali::Vector3&amp; position(inputs[0]-&gt;GetVector3());
const Dali::Vector3&amp; size(inputs[1]-&gt;GetVector3());
const Dali::Vector3&amp; parentPosition(inputs[2]-&gt;GetVector3());
const Dali::Vector3&amp; parentSize(inputs[3]-&gt;GetVector3());
</pre>


<h2 id="create" name="create">Creating a Constraint</h2>
<h3>Using C Functions</h3>
<p>If you do not have any data that is changed at runtime, C functions must be used. For example, the color of an actor can be changed based on its position along the x-axis to a preset distance of 100, beyond which it is transparent.</p>
<pre class="prettyprint">
Dali::Actor actor = Actor::New();

// Create a constraint that targets actor
Dali::Constraint constraint = Dali::Constraint::New&lt; Vector4 &gt;(actor, Dali::Actor::Property::COLOR, MyConstraintFunction); 

// Add the POSITION property as a constraint input
constraint.AddSource(Dali::LocalSource(Dali::Actor::Property::POSITION)); 

// Apply the constraint
constraint.Apply(); 
</pre>

<p>The following example shows the actual C function:</p>
<pre class="prettyprint">
void MyConstraintFunction(Dali::Vector4&amp; current, const Dali::PropertyInputContainer&amp; inputs)
{
&nbsp;&nbsp;&nbsp;const Dali::Vector3&amp; position(inputs[0]-&gt;GetVector3());

&nbsp;&nbsp;&nbsp;float distance = fabs(position.x);

&nbsp;&nbsp;&nbsp;// More than 100.0f away, opacity is 0.0f
&nbsp;&nbsp;&nbsp;if (distance &gt; 100.0f)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.a = 0.0f;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise it blends between fully opaque and transparent
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.a = (100.0f - distance) / 100.0f;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>For more information, see the <span style="font-family: Courier New,Courier,monospace;">New()</span> function in the <span style="font-family: Courier New,Courier,monospace;">Dali::Constraint</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Constraint.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Constraint.html">wearable</a> applications).</p>

<h3>Using Functors</h3>

<p>If you need to store some data in a struct or class, a functor can be used. Reusing the last example, the color of an actor is changed based on its position along the x-axis, but the distance when it is transparent is different for each applied constraint.</p>
<pre class="prettyprint">
Dali::Actor actor = Actor::New();

// Create a constraint that targets actor, and uses MyFunctor with a distance of 200
Dali::Constraint constraint = Dali::Constraint::New&lt; Vector4 &gt;(actor, Dali::Actor::Property::COLOR, MyFunctor(200)); 

// Add the POSITION property as a constraint input
constraint.AddSource(Dali::LocalSource(Dali::Actor::Property::POSITION)); 

// Apply the constraint
constraint.Apply(); 
</pre>
<p>The following example shows the structure:</p>
<pre class="prettyprint">
struct MyFunctor
{
&nbsp;&nbsp;&nbsp;// Constructor which takes the distance at which the actor is fully transparent
&nbsp;&nbsp;&nbsp;MyFunctor(float distance)
&nbsp;&nbsp;&nbsp;: mDistance(distance)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Functor
&nbsp;&nbsp;&nbsp;void operator()(Dali::Vector4 &amp;current, const Dali::PropertyInputContainer &amp;inputs)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const Dali::Vector3&amp; position(inputs[0]-&gt;GetVector3());

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float distance = fabs(position.x);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// More than mDistance away, opacity is 0.0f
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (distance &gt; mDistance)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.a = 0.0f;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise it blends between fully opaque and transparent
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.a = (100.0f - mDistance) / 100.0f;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Data
&nbsp;&nbsp;&nbsp;const float mDistance;
};
</pre>
<p><span style="font-family: Courier New,Courier,monospace;">MyFunctor()</span> can be used also with another constraint with a different distance.</p>
<p>Instead of using the default functor, another method can be declared in the class or struct and used as the constraint function.</p>
<p>For more information, see the <span style="font-family: Courier New,Courier,monospace;">New()</span> function in the <span style="font-family: Courier New,Courier,monospace;">Dali::Constraint</span> class (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Constraint.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Constraint.html">wearable</a> applications).</p>


<h2 id="remove" name="remove">Removing Constraints</h2>

<p>The actor&#39;s constraints can later be removed in several ways:</p>
<pre class="prettyprint">
mConstraint.Remove(); // mConstraint is a base-handle to a constraint
actor.RemoveConstraints(); // Removes ALL constraints applied to an actor
actor.RemoveConstraint(tag); // All constraints with the tag are removed from the actor (tag can be set using SetTag)
</pre> 


<h2 id="equal" name="equal">Equal To Constraint</h2>

<p>The built-in <span style="font-family: Courier New,Courier,monospace;">Dali::EqualToConstraint</span> function can be used if only setting a property equal to another property is required:</p>
<pre class="prettyprint">
Dali::Constraint constraint = Dali::Constraint::New&lt; Vector3 &gt;(actor, Dali::Actor::Property::POSITION, Dali::EqualToConstraint());
constraint.AddSource(Dali::Source(anotherActor, Dali::Actor::Property::POSITION));
constraint.Apply();
</pre>
<p>Here actor's position is set to equal the position of <span style="font-family: Courier New,Courier,monospace;">anotherActor</span>.</p>


<h2 id="relative" name="relative">Relative To Constraint</h2>

<p>The built in <span style="font-family: Courier New,Courier,monospace;">Dali::RelativeToConstraint</span> and <span style="font-family: Courier New,Courier,monospace;">Dali::RelativeToConstraintFloat</span> functions can be used if only setting a property relative to another property is required:</p>

<pre class="prettyprint">
Dali::Constraint constraint = Dali::Constraint::New&lt; Vector3 &gt;(actor, Dali::Actor::Property::POSITION, Dali::RelativeToConstraint(2.0f));
constraint.AddSource(Dali::Source(anotherActor, Dali::Actor::Property::POSITION));
constraint.Apply();
</pre>
<p>Here the actor&#39;s position is relative to the position of <span style="font-family: Courier New,Courier,monospace;">anotherActor</span>. If <span style="font-family: Courier New,Courier,monospace;">anotherActor</span> is at (10.0f, 20.0f, 30.0f), <span style="font-family: Courier New,Courier,monospace;">actor</span> is at (20.0f, 40.0f, 60.0f).</p>




<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

