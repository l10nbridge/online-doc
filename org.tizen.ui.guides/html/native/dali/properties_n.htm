<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Properties: Accessing to Properties of DALi Objects</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#access">Accessing to Property Values</a></li>
			<li><a href="#usage">Usages of Properties</a></li>
			<li><a href="#attributes">Attributes of Properties</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Handle.html">Dali::Handle API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Handle.html">Dali::Handle API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Handle.html">Dali::Property API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Handle.html">Dali::Property API for Wearable Native</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Properties: Accessing to Properties of DALi Objects</h1>

<p>A property is a value used by an object that can be modified or read via <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::GetProperty()</span> / <span style="font-family: Courier New,Courier,monospace;">SetProperty()</span> API.</p>

<p>The difference between properties and ordinary C++ member variables is that a property can be dynamically added to or removed from an existing object in runtime, which enables more flexible, script-like programming with DALi.</p>

<p><span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Layer.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Layer.html">wearable</a>) provides methods to manage properties, thus the DALi classes that inherit from <span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> (most of classes that users would use) have a number of predefined properties and can have any number of user-defined custom properties.
</p>

<h2 id="access" name="access">Accessing to Property Values</h2>

	<p>Property values of an object usually can be accessed via two ways: by its class member functions or by property getters/setters (<span style="font-family: Courier New,Courier,monospace;">Dali::Handle::GetProperty()</span> / <span style="font-family: Courier New,Courier,monospace;">SetProperty()</span>).</p>
	<p>For example, <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> has following predefined properties:</p>

	<table>
		<caption>
			Table: Properties of Dali::Actor
		</caption>
		<tbody>
		<tr>
			<th>Property Index (enumeration)</th>
			<th>Member Functions</th>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::POSITION</span></td>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::GetCurrentPosition()</span> / <span style="font-family: Courier New,Courier,monospace;">SetPosition()</span></td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::ORIENTATION</span></td>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::GetCurrentOrientation()</span> / <span style="font-family: Courier New,Courier,monospace;">SetOrientation()</span></td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::SIZE</span></td>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::GetCurrentSize()</span> / <span style="font-family: Courier New,Courier,monospace;">SetSize()</span></td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::COLOR</span></td>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::GetCurrentColor()</span> / <span style="font-family: Courier New,Courier,monospace;">SetColor()</span></td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::NAME</span></td>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::GetName()</span> / <span style="font-family: Courier New,Courier,monospace;">SetName()</span></td>
		</tr>
		<tr>
			<td>...</td>
			<td>...</td>
		</tr>
		</tbody>
	</table>

	You can access them in both ways:

	<pre class="prettyprint">
Actor actor = Actor::New();
actor.SetName("test actor");
std::cout &lt;&lt; actor.GetName() &lt;&lt; std::endl;  // "test actor"
</pre>

	<pre class="prettyprint">
Actor actor = Actor::New();
actor.SetProperty( Actor::Property::NAME, "test actor" );
std::cout &lt;&lt; actor.GetProperty( Actor::Property::NAME ) &lt;&lt; std::endl;  // "test actor"
std::cout &lt;&lt; actor.GetProperty&lt;std::string&gt;( Actor::Property::NAME ) &lt;&lt; std::endl;  // "test actor"
std::cout &lt;&lt; actor.GetProperty( Actor::Property::NAME ).Get&lt;std::string&gt;() &lt;&lt; std::endl;  // "test actor"
</pre>

<p>Please see API reference for <span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Layer.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Layer.html">wearable</a>) for more information.

<h2 id="usage" name="usage">Usages of Properties</h2>

<h3>Registering User-Defined Custom Properties to Objects</h3>

<p>Properties can be registered / unregistered in runtime, which enables script-like programming of DALi application, for example, adding custom member data to an instance of a DALi class without subclassing the class or maintaining another pool of custom data.</p>
<p>For example, you can set your own custom data to PushButton objects and use them later when the buttons are clicked like:</p>
<pre class="prettyprint">
void Create( Application&amp; application )
{
  for( int i=0; i&lt;5; ++i )
  {
    Toolkit::PushButton button = Toolkit::PushButton::New();
    button.SetSize( 100, 100 );
    button.SetPosition( 100*i+50, 50 );
    button.ClickedSignal().Connect( this, OnButtonClicked );

    // Register a custom property having button index.
    // Store the property index so you can look it up later.
    // Note: This is much faster than looking the property up by property name and should always be used if possible.
    // As all control types are the same (PushButtons) the indices to the unique custom property are all same.
    Property::Value data( i );
    mCustomDataIndex = button.RegisterProperty( "custom-data", data );

    Stage::GetCurrent().Add(button);
  }
}

bool OnButtonClicked(Toolkit::Button button)
{
  // Look up the custom property by the stored property index.
  // Note: If the property belongs to a control in another library, or we do not know the index, we can look the index up first with:
  // Property::Index index = button.GetPropertyIndex( "custom-data" );
  cout &lt;&lt; button.GetProperty( mCustomDataIndex ) &lt;&lt; endl;
  return true;
}
</pre>

<p>Please see API reference for <span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Layer.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Layer.html">wearable</a>) for more information.

<h3>Animating Objects</h3>

<p>DALi animation API is used to animate the properties of any number of objects.</p>

<p>For example, following code animates the value of the <strong>POSITION</strong> property of a radio button to (100.0, 200.0, 0.0) for 2 seconds:</p>

<pre class="prettyprint">
RadioButton actor = RadioButton::New();
Stage::GetCurrent().Add(actor);
Animation animation = Animation::New(2.0f); // duration 2 seconds
animation.AnimateTo(Property(actor, Actor::Property::POSITION), Vector3(100.0f, 200.0f, 0.0f));
animation.Play();
</pre>

<p>Please see <a href="basic_framework_n.htm">Animation Basics</a> for more information.</p>

<h3>Imposing Constraints on Objects</h3>

<p>DALi constraint API is used to modify the property of an object based on other properties of other objects.</p>

<p>For example, following code makes the value of the <strong>SIZE</strong> property of an actor same as the value of the <strong>SIZE</strong> property of its parent actor:</p>

<pre class="prettyprint">
Constraint constraint = Constraint::New<Vector3>( actor,
                                                  Actor::Property::SIZE,
                                                  EqualToConstraint() );
constraint.AddSource( ParentSource( Actor::Property::SIZE ) );
constraint.Apply();
</pre>

<p>Please see <a href="constraints_n.htm">Constraints</a> for more information.</p>

<h2 id="attributes" name="attributes">Attributes of Properties</h2>

<p>A property has following attributes:
<ul>
	<li>Index: An enumeration number indicating the property. Property index is usually used to access properties.</li>
	<li>Type: Type of the property. Retrieved by <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::GetPropertyType()</span>.</li>
	<li>Name: Name of the property. Retrieved by <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::GetPropertyName()</span>.</li>
	<li>Writable: If true, the property value can be written. Retrieved by <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::IsPropertyWritable()</span>.</li>
	<li>Animatable: If true, the property can be animated using <span style="font-family: Courier New,Courier,monospace;">Dali::Animation</span>. Retrieved by <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::IsPropertyAnimatable()</span>.</li>
	<li>Constraint-Input: If true, the property can be used as input of constraints. Retrieved by <span style="font-family: Courier New,Courier,monospace;">Dali::Handle::IsPropertyAConstraintInput()</span>.</li>
</ul>

<p>For example, predefined properties of <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> has following attributes:</p>

	<table>
		<caption>
			Table: Attributes of Properties of Dali::Actor
		</caption>
		<tbody>
		<tr>
			<th>Property Index (enumeration)</th>
			<th>Property Type</th>
			<th>Property Name</th>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::POSITION</span></td>
			<td>Vector3</td>
			<td>"position"</td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::ORIENTATION</span></td>
			<td>Quaternion</td>
			<td>"orientation"</td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::SIZE</span></td>
			<td>Vector3</td>
			<td>"size"</td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::COLOR</span></td>
			<td>Vector4</td>
			<td>"color"</td>
		</tr>
		<tr>
			<td><span style="font-family: Courier New,Courier,monospace;">Dali::Actor::NAME</span></td>
			<td>std::string</td>
			<td>"name"</td>
		</tr>
		<tr>
			<td>...</td>
			<td>...</td>
			<td>...</td>
		</tr>
		</tbody>
	</table>

<p>You can see these information at API reference for property of each class. For example for <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span>, please see <span style="font-family: Courier New,Courier,monospace;">Dali::Actor::Property</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1CameraActor.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1CameraActor.html">wearable</a>).</p>

<p>To check all kinds of supported property types, please see <span style="font-family: Courier New,Courier,monospace;">Dali::Property::Type</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1CameraActor.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1CameraActor.html">wearable</a>) and <span style="font-family: Courier New,Courier,monospace;">Dali::PropertyTypes</span> (in <a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1CameraActor.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1CameraActor.html">wearable</a>).</p>

    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

