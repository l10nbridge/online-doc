<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Buttons: Push, Check, Select!</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#PushButton">Push Button</a></li>
			<li><a href="#CheckBoxButton">CheckBox Button</a></li>
			<li><a href="#RadioButton">Radio Button</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Buttons: Push, Check, Select!</h1>

<p>Button is a small object on UI that you press in order to operate it. DALi provides button controls, such as <span style="font-family: Courier New,Courier,monospace;">PushButton</span> , <span style="font-family: Courier New,Courier,monospace;">CheckBoxButton</span> , and <span style="font-family: Courier New,Courier,monospace;">RadioButton</span> . The base class for button controls is <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span>. The <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> class provides the <span style="font-family: Courier New,Courier,monospace;">disabled</span> property and the <span style="font-family: Courier New,Courier,monospace;">clicked</span> signal. Basic signals provided by the <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> class are listed in the following table.</p>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signal</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">PressedSignal()</span></td>
		<td>Emitted when the button is pressed.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ReleasedSignal()</span></td>
		<td>Emitted when the button is released.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ClickedSignal()</span></td>
		<td>Emitted when the button is clicked.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">StateChangedSignal()</span></td>
		<td>Emitted when the button state is changed.
		</td>
	</tr>
   </tbody>
  </table>

<h2 id="PushButton" name="PushButton">Push Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">PushButton</span> class provides a button that can be pressed to operate it. A push button changes its appearance when is pressed and returns to its original when is released.</p>

<p class="figure">Figure: Push button</p>  
	<p align="center"><img alt="Push button" src="../../images/push_button.png"/></p> 

<p>A push button emits a <span style="font-family: Courier New,Courier,monospace;">Button::PressedSignal()</span> signal when the button is pressed, a <span style="font-family: Courier New,Courier,monospace;">Button::ClickedSignal()</span> signal when clicked, and a <span style="font-family: Courier New,Courier,monospace;">Button::ReleasedSignal()</span> signal when released, or of the touch point leaves the boundary of the button. A basic push button example is as follows:</p>

<pre class="prettyprint">
class ButtonController : public ConnectionTracker
{
public:
  ButtonController( Application& application ): mApplication( application )
  {
    mApplication.InitSignal().Connect( this, &ButtonController::Create );
  }
  void Create( Application& application )
  {
    PushButton button = PushButton::New();
    button.SetLabel( "Select" );
    button.SetParentOrigin( ParentOrigin::CENTER );
    button.ClickedSignal().Connect( this, &ButtonController::OnButtonClicked );
    Stage::GetCurrent().Add( button );
  }
  bool OnButtonClicked( Toolkit::Button button )
  {
    cout << "OnButtonClicked" << endl;
    return true;
  }
private:
  Application&  mApplication;
};

int main( int argc, char **argv )
{
  Application application = Application::New( &argc, &argv );
  ButtonController test( application );
  application.MainLoop();
  return 0;
}
</pre>

<h2 id="CheckBoxButton" name="CheckBoxButton">CheckBox Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">CheckBoxButton</span> class provides check box button which can be checked or unchecked.</p>

<p class="figure">Figure: Checkbox button</p>  
	<p align="center"><img alt="Checkbox button" src="../../images/checkbox_button.png"/></p> 

<p>A checkbox button emits all of four button input sinals, but usually you can just use <span style="font-family: Courier New,Courier,monospace;">Button::StateChangedSignal()</span> signal to check the button changes its state to selected or unselected. A basic checkbox button example is as follows:</p>

<pre class="prettyprint">
// ... same as the push button example
  void Create( Application& application )
  {
    CheckBoxButton button = CheckBoxButton::New();
    button.SetLabel( "Select" );
    button.SetSize( 100,40 );
    button.SetBackgroundColor( Vector4( 1,0,0,1 ) );
    button.SetParentOrigin( ParentOrigin::CENTER );
    button.StateChangedSignal().Connect( this, &ButtonController::OnButtonStateChanged );
    Stage::GetCurrent().Add( button );
  }
  bool OnButtonStateChanged( Toolkit::Button button )
  {
    cout << "OnButtonStateChanged " << button.IsSelected() << endl;
    return true;
  }
// ... same as the push button example
</pre>

<h2 id="RadioButton" name="RadioButton">Radio Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">RadioButton</span> class provides a radio button with 2 states: selected and unselected.</p>

<p class="figure">Figure: Radio button</p>  
	<p align="center"><img alt="Radio button" src="../../images/radio_button.png"/></p> 

<p>Usually, radio buttons are grouped. Two or more radio buttons are in the same group when they have the same parent. In each group, only 1 radio button can be selected at a given time. You can use <span style="font-family: Courier New,Courier,monospace;">Button::StateChangedSignal()</span> signal to check which radio button is selected. A basic radio button example is as follows:</p>

<pre class="prettyprint">
// ... same as the push button example
  void Create( Application& application )
  {
    Actor radioGroup = Actor::New();
    radioGroup.SetParentOrigin( ParentOrigin::CENTER );
    Stage::GetCurrent().Add(radioGroup);

    RadioButton button1 = RadioButton::New();
    button1.SetLabel( "button1" );
    button1.SetBackgroundColor( Vector4(1,0,0,1) );
    button1.SetPosition( 0, -40 );
    radioGroup.Add( button1 );

    RadioButton button2 = RadioButton::New();
    button2.SetLabel( "button2" );
    button2.SetBackgroundColor( Vector4(0,0,1,1) );
    button2.SetPosition( 0, 40 );
    radioGroup.Add( button2 );

    button1.StateChangedSignal().Connect( this, &ButtonController::OnButtonStateChanged );
    button2.StateChangedSignal().Connect( this, &ButtonController::OnButtonStateChanged );
  }
  bool OnButtonStateChanged( Toolkit::Button button )
  {
    cout << "OnButtonStateChanged " << button.GetLabel() << " " << button.IsSelected() << endl;
    return true;
  }
// ... same as the push button example
</pre>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

