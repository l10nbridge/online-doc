<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Buttons</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#PushButton">Push Button</a></li>
			<li><a href="#CheckBoxButton">CheckBox Button</a></li>
			<li><a href="#RadioButton">Radio Button</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1Button.html">Dali::Toolkit::Button API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1CheckBoxButton.html">Dali::Toolkit::CheckBoxButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1PushButton.html">Dali::Toolkit::PushButton API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1RadioButton.html">Dali::Toolkit::RadioButton API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Buttons</h1>

<p>Button is a small object on UI that you press in order to operate it. Dali provides button controls, such as <span style="font-family: Courier New,Courier,monospace;">PushButton</span> , <span style="font-family: Courier New,Courier,monospace;">CheckBoxButton</span> , and <span style="font-family: Courier New,Courier,monospace;">RadioButton</span> . The base class for button controls is <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span>. The <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> class provides the <span style="font-family: Courier New,Courier,monospace;">disabled</span> property and the <span style="font-family: Courier New,Courier,monospace;">clicked</span> signal. Basic signals provided by the <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> class are listed in the following table.</p>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Toolkit::Button</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signal</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">PressedSignal()</span></td>
		<td>Emitted when the button is pressed.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ReleasedSignal()</span></td>
		<td>Emitted when the button is released.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">ClickedSignal()</span></td>
		<td>Emitted when the button is clicked.
		</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">StateChangedSignal()</span></td>
		<td>Emitted when the button state is changed.
		</td>
	</tr>
   </tbody>
  </table>

<h2 id="PushButton" name="PushButton">Push Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">PushButton</span> class provides a button that can be pressed to operate it. A push button changes its appearance when is pressed and returns to its original when is released.</p>

<p class="figure">Figure: Push button</p>  
	<p align="center"><img alt="Push button" src="../../images/push_button.png"/></p> 

<p>By default, a push button emits a <span style="font-family: Courier New,Courier,monospace;">Button::PressedSignal()</span> signal when the button is pressed, a <span style="font-family: Courier New,Courier,monospace;">Button::ClickedSignal()</span> signal when clicked, and a <span style="font-family: Courier New,Courier,monospace;">Button::ReleasedSignal()</span> signal when released, or of the touch point leaves the boundary of the button. The following is a basic example of implementing a push button:</p>

<pre class="prettyprint">class ButtonsController: public ConnectionTracker
{
&nbsp;&nbsp;&nbsp;ButtonsController(Application&amp; application)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mApplication(application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.InitSignal().Connect(this, &amp;ButtonsController::Create);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;void Create(Application&amp; application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stage stage = Stage::GetCurrent();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PushButton button = PushButton::New();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetLabel(&quot;Select&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetResizePolicy(ResizePolicy::USE_NATURAL_SIZE, Dimension:;ALL_DIMENSIONS);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetSelectedImage(Dali::ResourceImage::New(&quot;pressedImage.png&quot;));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetDisabledImage(Dali::ResourceImage::New(&quot;disabledImage.png&quot;));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetButtonImage(Dali::ResourceImage::New(&quot;buttonImage.png&quot;));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.ClickedSignal().Connect(this, &amp;ButtonsController::OnButtonClicked);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.Add(button);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bool OnButtonClicked(Toolkit::Button button)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Application developer code
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Application&amp; mApplication;
}</pre>

<h2 id="CheckBoxButton" name="CheckBoxButton">CheckBox Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">CheckBoxButton</span> class provides check box button which can be checked or unchecked.</p>

<p class="figure">Figure: Checkbox button</p>  
	<p align="center"><img alt="Checkbox button" src="../../images/checkbox_button.png"/></p> 

<p>By default, a checkbox button emits a <span style="font-family: Courier New,Courier,monospace;">Button::ClickedSignal()</span> signal when the button changes its state to selected or unselected. The following is a basic example of implementing a checkbox button:</p>

<pre class="prettyprint">class ButtonsController: public ConnectionTracker
{
&nbsp;&nbsp;&nbsp;ButtonsController(Application&amp; application)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mApplication(application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.InitSignal().Connect(this, &amp;ButtonsController::Create);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;void Create(Application&amp; application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stage stage = Stage::GetCurrent();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actor checkBoxBackground = Actor::New();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.Add(checkBoxBackground);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBoxBackground.SetParentOrigin(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBoxBackground.SetAnchorPoint(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBoxBackground.SetPosition(0.0f, 0.0f);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBoxBackground.SetSize(400.0f, 400.0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dali::Image unselected = Dali::ResourceImage::New(&quot;UnSelectedImage.png&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dali::Image selected = Dali::ResourceImage::New(&quot;SelectedImage.png&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Toolkit::CheckBoxButton checkBox = Toolkit::CheckBoxButton::New();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; checkBox.SetName(&quot;checkbox1&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  checkBox.SetBackgroundImage(unselected);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  checkBox.SetSelectedImage(selected);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  checkBox.SetLabel(&quot;CheckBox1 is unselected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  checkBox.StateChangedSignal().Connect(this, &amp;ButtonsController::OnCheckBoxesSelected);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  checkBoxBackground.Add(checkBox);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  Toolkit::CheckBoxButton checkBox = Toolkit::CheckBoxButton::New();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.SetName(&quot;checkbox2&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.SetBackgroundImage(unselected);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.SetSelectedImage(selected);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.SetLabel(&quot;CheckBox2 is selected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.SetSelected(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBox.StateChangedSignal().Connect(this, &amp;ButtonsController::OnCheckBoxesSelected);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkBoxBackground.Add(checkBox);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bool OnCheckBoxesSelected(Toolkit::Button button)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(button.GetName() == &quot;checkbox1&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(button.IsSelected())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetLabel(&quot;CheckBox1 is selected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetLabel(&quot;CheckBox1 is unselected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(button.GetName() == &quot;checkbox2&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(button.IsSelected())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetLabel(&quot;CheckBox2 is selected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.SetLabel(&quot;CheckBox2 is unselected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Application&amp; mApplication;
}</pre>

<h2 id="RadioButton" name="RadioButton">Radio Button</h2>
 
<p>The <span style="font-family: Courier New,Courier,monospace;">RadioButton</span> class provides a radio button with 2 states: selected and unselected.</p>

<p class="figure">Figure: Radio button</p>  
	<p align="center"><img alt="Radio button" src="../../images/radio_button.png"/></p> 

<p>Radio buttons can be grouped. 2 or more radio buttons are in the same group when they have the same parent. In each group, only 1 radio button can be selected at a given time. The following is a basic example of implementing a radio button:</p>

<pre class="prettyprint">class ButtonsController: public ConnectionTracker
{
&nbsp;&nbsp;&nbsp;ButtonsController(Application&amp; application)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: mApplication(application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mApplication.InitSignal().Connect(this, &amp;ButtonsController::Create);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;void Create(Application&amp; application)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Stage stage = Stage::GetCurrent();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Actor radioGroup = Actor::New();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stage.Add(redioGroup);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.SetParentOrigin(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.SetAnchorPoint(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.SetPosition(0.0f, 0.0f);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.SetSize(400.0f, 400.0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioButton radioButton1 = RadioButton::New(&quot;label&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton1.SetParentOrigin(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton1.SetAnchorPoint(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton1.SetPosition(0.0f, 0.0f);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RadioButton radioButton2 = RadioButton::New(&quot;label&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton2.SetParentOrigin(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton2.SetAnchorPoint(ParentOrigin::TOP_LEFT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton2.SetPosition(0.0f, 40.0f);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioButton1.StateChangedSignal().Connect(this, &amp;ButtonsController::EnableSelectButton);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.Add(radioButton1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;radioGroup.Add(radioButton2);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Application&amp; mApplication;
}</pre>


<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

