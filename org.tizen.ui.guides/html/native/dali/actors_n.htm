<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Actors: Working with Basic DALi Components</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#actors">Actors and Stage</a></li>
			<li><a href="#coordinate">Coordinate System</a></li>
			<li><a href="#position">Positioning Actors</a></li>
			<li><a href="#event">Event Handling for Actors</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Actor.html">Dali::Actor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Stage.html">Dali::Stage API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Actor.html">Dali::Actor API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Stage.html">Dali::Stage API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Actors: Working with Basic DALi Components</h1>


<p>Actor is the basic component that composes the entire scene. It can have visible (for example, UI components, image actor) or invisible (for example, camera actor or layer) forms.</p>
<p>Actor is also the primary object with which DALi applications interact. Multiple types of event signals provided by actors can be handled in a application through user-defined callback functions.</p>

<h2 id="actors" name="actors">Actors and Stage</h2>

<p>Stage is a top-level object that represents the entire scene or screen. It is used for displaying a hierarchy of actors managed by the <a href="http://en.wikipedia.org/wiki/Scene_graph" target="_blank">scene graph</a> structure. An actor inherits a position relative to its parent, and can be moved in relation to this point.</p>

<p>To display the contents of an actor, it must be added to a stage. The following example shows how to connect a new actor to the stage:</p>

<pre class="prettyprint">Actor actor = Actor::New();
Stage::GetCurrent().Add(actor);
</pre>

<h2 id="coordinate" name="coordinate">Coordinate System</h2>

<p>The stage has a 2D size that matches the size of the application window. The default unit 1 is 1 pixel with default camera.</p>

<p>DALi uses a left-handed coordinate system with the origin at the top-left corner, with positive X to right, positive Y going downwards, and positive Z going outside the screen. This is convenient when creating 2D views.</p>

<p class="figure">Figure: DALi coordinate system</p>  
	<p align="center"><img alt="DALi coordinate system" src="../../images/actor_coordinates.png"/></p> 
	
	
<h2 id="position" name="position">Positioning Actors</h2>
<p>An actor inherits its parent&#39;s position. The relative position between the actor &amp; parent is determined by the following properties:</p>
<ul>
<li>Parent origin
<p>This Vector3 property defines a point within the parent actor&#39;s area.</p>

<p class="figure">Figure: Parent origin</p>  
	<p align="center"><img alt="Parent origin" src="../../images/parent_origin.png"/></p> 
 
<p>The default is top-left, which can be visualized in 2D as (0, 0), but is actually Vector3 (0, 0, 0.5) in the 3D DALi world. The actor position is relative to this point.</p></li>
<li>Anchor point
<p>This Vector3 property defines a point within the child actor area.</p>

<p class="figure">Figure: Anchor point</p>  
	<p align="center"><img alt="Anchor point" src="../../images/anchor_point.png"/></p> 
 
<p>The default is center, which can be visualized in 2D as (0.5, 0.5), but is actually Vector3 (0.5, 0.5, 0.5) in the 3D DALi world. The actor position is also relative to this point.</p></li>

<li>Position
<p>This is the position vector between the parent origin and anchor point.</p>

<p class="figure">Figure: Position</p>  
	<p align="center"><img alt="Position" src="../../images/actor_position.png"/></p> 
 
<p>By default, an actor&#39;s position is the distance between its center and the top-left corner of its parent.</p>

<p>An actor added directly to the stage with position (X = stageWidth*0.5, Y = stageHeight*0.5) appears in the center of the screen. Likewise, an actor with the position (X = actorWidth*0.5, Y = actorWidth*0.5) appears at the top-left corner of the screen.</p>

<p>Since DALi is a 3D toolkit, this behavior is the result of a default perspective camera setup.</p> 

</li>
</ul> 

<h2 id="event" name="event">Event Handling for Actors</h2>
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> class provides following event signals:</p> 

<table>
   <caption>
     Table: Event signals
   </caption>
   <tbody>
    <tr>
     <th>Event signal</th>
     <th>Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span></td>
     <td>This signal is emitted when a touch input is received.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace;">HoveredSignal()</span></td>
     <td>This signal is emitted when a hover input is received.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace;">WheelEventSignal()</span></td>
     <td>This signal is emitted when a wheel event is received.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace;">OnStageSignal()</span></td>
     <td>This signal is emitted after the actor has been connected to the stage.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace;">OffStageSignal()</span></td>
     <td>This signal is emitted after the actor has been disconnected from the stage.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace;">OnRelayoutSignal()</span></td>
     <td>This signal is emitted after the size has been set on the actor during relayout.</td>
    </tr>
   </tbody>
  </table>

<p>For example, a touch event can be handled as follows:</p> 
<pre class="prettyprint">bool OnTouch(Actor actor, const TouchEvent&amp; touch)
{
&nbsp;&nbsp;&nbsp;bool handled = false;

&nbsp;&nbsp;&nbsp;switch(touch.GetPointCount())
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1: // Single touch
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (touch.GetPoint(0).GetState == TouchPoint::Down)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do action when first touches the touch screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handled = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 2: // Multi-touch event

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return handled;&nbsp;&nbsp;&nbsp;// true if the operation was successful
}

// Elsewhere
Actor actor = Actor::New();
actor.TouchedSignal().Connect(&amp;OnTouch);</pre>

<p>For more information, see <a href="event_handling_n.htm">Event Handling</a>.</p> 

    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

