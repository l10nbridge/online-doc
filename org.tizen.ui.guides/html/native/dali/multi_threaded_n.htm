<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Multi-Threaded Architecture: The Secret of High-Performance of DALi</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#animations">Animations with Multi-Threading</a></li>
			<li><a href="#resource">Resource Loading with Multi-Threading</a></li>
		</ul>
		<!--
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Handle.html">Dali::Handle API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Handle.html">Dali::Handle API for Wearable Native</a></li>
-->
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Multi-Threaded Architecture: The Secret of High-Performance of DALi</h1>

<p>DALi uses a multithreaded architecture in order to provide the best performance and scalability.</p>
<ul>
	<li><strong>Event Thread:</strong> The main thread in which application code and event handling runs.</li>
	<li><strong>Update Thread:</strong> Updates the nodes on the scene as well as running animations and constraints.</li>
	<li><strong>Render Thread:</strong> OpenGL drawing, texture and geometry uploading etc.</li>
	<li><strong>Resource Thread:</strong> Loads images and decodes into bitmaps etc.</li>
</ul>

<p class="figure">Figure: DALi Thread Architecture</p>  
	<p align="center"><img alt="Thread Architecture" src="../../images/dali_threads.png"/></p> 


	<!-- dali todo GetCurrentPosition() -->


<h2 id="animations" name="animations">Animations with Multi-Threading</h3>

<h3 id="hierachy" name="hierachy">Multi-threaded Architecture</h3>

<p>DALi animations and rendering occur in a dedicated rendering thread. This allows animations to run smoothly, regardless of the time taken to process inputs events in the application code.</p>

<p>Internally, DALi contains the scene graph that mirrors the actor hierarchy. The scene graph objects perform the actual animation and rendering, while the actors provide thread-safe access. Actors and scene graph objects communicate through messaging.</p>

<p>The following figure shows an actor hierarchy, in which one of the actors is being animated. The green objects in are created by the application code, while the blue private objects are used in the dedicated rendering thread.</p>

<p class="figure">Figure: Actor hierarchy with an animation</p> 
	<p align="center"><img alt="Actor hierarchy with an animation" src="../../images/multi_threading2.png"/></p> 
 
<h3 id="read" name="read">Reading an Animated Value</h3>

<p>When a property is animatable, it can only be modified in the rendering thread. The value returned from a getter method is the value used when the previous frame was rendered.</p>

<p>For example, the <span style="font-family: Courier New,Courier,monospace;">GetCurrentPosition()</span> function returns the position in which the actor was last rendered. Since the <span style="font-family: Courier New,Courier,monospace;">SetPosition()</span> function is asynchronous, a call to <span style="font-family: Courier New,Courier,monospace;">GetCurrentPosition()</span> function does not immediately return the same value.</p>

<pre class="prettyprint">Actor actor = Actor::New();
Stage::GetCurrent().Add(actor); // Initial position is 0,0,0

actor.SetPosition(Vector3(10,10,10));

Vector3 current;
current = actor.GetCurrentPosition();
std::cout &lt;&lt; &quot;Current position: &quot; &lt;&lt; current.x &lt;&lt; &quot;, &quot; &lt;&lt; current.y &lt;&lt; &quot;, &quot; &lt;&lt; current.z &lt;&lt; std::endl;

std::cout &lt;&lt; &quot;...&quot; &lt;&lt; std::endl;

// Handling another event

current = actor.GetCurrentPosition();
std::cout &lt;&lt; &quot;Current position: &quot; &lt;&lt; current.x &lt;&lt; &quot;, &quot; &lt;&lt; current.y &lt;&lt; &quot;, &quot; &lt;&lt; current.z &lt;&lt; std::endl;
</pre>

<p>The above code is likely to output:</p>
<pre class="prettyprint">Actor actor = Actor::New();
&quot;Current position: 0,0,0&quot;
// Other positions
&quot;Current position: 10,10,10&quot;</pre>

<h3 id="set" name="set">Setting a Property during an Animation</h3>

<p>When a property is being animated, the animation overrides all values set with other functions, such as the <span style="font-family: Courier New,Courier,monospace;">SetPosition()</span> function.</p>

<p class="figure">Figure: Actor hierarchy with an animated property</p>  
	<p align="center"><img alt="Actor hierarchy with an animated property" src="../../images/multi_threading.png"/></p> 
 
<p>The order of execution in the render thread is:</p>
<ol>
<li>Process message and call the <span style="font-family: Courier New,Courier,monospace;">SetPosition()</span> function</li>
<li>Apply animation and call the <span style="font-family: Courier New,Courier,monospace;">SetPosition()</span> function</li>
<li>Render frame</li>
</ol>

<h2 id="resource" name="resource">Resource Loading with Multi-Threading</h2>

<p>DALi loads resources in seperate threads. Without using these resource threads, a large image file will cause block to process next operation in the main thread while reading data from file system or downloading from network.</p>

<p>Currently, DALi creates one thread for loading local resources and another for loading remote resources if required.</p>

    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

