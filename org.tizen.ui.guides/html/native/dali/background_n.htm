<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Background Knowledge: Using DALi More Effectively</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#handle">Handle/Body Pattern</a></li>
			<li><a href="#property">Properties</a></li>
			<li><a href="#thread">DALi Thread Model</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Actor.html">Dali::Actor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Stage.html">Dali::Stage API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Actor.html">Dali::Actor API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Stage.html">Dali::Stage API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Background Knowledge: Using DALi More Effectively</h1>

<p>This section describes useful background knowledge that enables you to use DALi more effectively.

<h2 id="handle" name="handle">Handle/Body Pattern</h2>

<p>DALi widely adopts the handle/body pattern (a.k.a. pimpl pattern) which seperates implementation details (the body class) from its interface (the handle class). In DALi, <span style="font-family: Courier New,Courier,monospace;">Dali::Handle</span> represents the interface part and hides internal implementation classes. It additionally provides smart-pointer semantics which manages internal objects with reference counts.
</p>

<p>This structure is benificial for both users and developers of DALi:</p>
<ul>
	<li><strong>Easier memory management</strong>
	<p>Each internal <span style="font-family: Courier New,Courier,monospace;">Dali::Object</span> class (the body class) contains a single reference count object which can be intitialized with the static "New" methods in the DALi public API. This means that C++ new/delete operators do not have to be used in the user code.</p>
	</li>
	<li><strong>Better encapsulation</strong>
	<p>The danger of API/ABI breaks is reduced since the implementation of a class can be changed without modifying the public API, thus without recompiling code using the public API. This also can reduce the build time.</p>
	</li>
</ul>

<h3 id="usage" name="usage">Guide for Handles</h2>

<ul>

<li> No need to call destructors
<pre class="prettyprint">
class HandleTest
{
  HandleTest()
  {
    mActor = Actor::New();
  }

  ~HandleTest() {} // Actor object is destroyed automatically

  Actor mActor;
};
</pre>
</li>

<li> Can be stored in STL containers
<pre class="prettyprint">
class HandleTest
{
  HandleTest()
  {
    mActors.push_back( Actor::New() );
    mActors.push_back( Actor::New() );
    ...
  }

  ~HandleTest() {} // Actors are destroyed automatically

  std::vector&lt;Actor&gt; mActors;
};
</pre>
</li>

<li> Passing by value is encouraged
<pre class="prettyprint">
void SomeFunction( Actor actor )
{
  if( actor )
  {
    actor.SomeMethod();
  }
}
</pre>
</li>

<li> Validity check
<pre class="prettyprint">
{
  ...
  Actor actor;  // Create a NULL object

  // At this stage we cannot call any of the Actor methods
  if( !actor )  // This test is will pass, since the actor is NULL
  {
    actor = Actor::New();
    ...
  }
  ...
}
</pre>
</li>

<li> Equality operators
<pre class="prettyprint">
{
  Actor handle1;
  Actor handle2;
  cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // "true", both handles are empty

  handle2 = Actor::New();
  cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // "false", one handle is empty

  handle1 = Actor::New();
  cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // "false", handles to different objects

  handle1 = handle2;
  cout &lt;&lt; handle1 == handle2 &lt;&lt; endl; // "true", handles to same object
}
</pre>
</li>

<li> Reference counting examples
<pre class="prettyprint">
class AnimationTest
{
...
private:
  Animation mAnimation; // animation handle
};
void AnimationTest::Initialize ()
{
  mAnimation = Animation::New( 10.0f ); // reference count will be 1, animation object stays alive when method returns
  ...
}
void AnimationTest::SetAnimation( Animation anim )
{
  mAnimation = anim; // reference count of original animation decreased, 'anim' is referenced instead
                     // if nobody else had a reference on the initial animation, the object is destroyed
}
</pre>

<pre class="prettyprint">
// At this point we own a Dali::Actor named "container"
// Enter a code block
{
  // Create an text label
  TextLabel actor = TextLabel::New("test");
  // Add the text label to a container
  container.Add(actor);
}
// Exit the code block
// At this stage the text label is still alive
// We don't keep the handle to the text label, but it can be retrieved from the container
</pre>

</ul>


    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

