<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Event Handling: Managing the Event Flow</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
		<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#touch">Example: Handling Touch Events</a></li>
			<li><a href="#key">Example: Handling Key Events</a></li>
			<li><a href="#input">Input Signals</a></li>
			<li><a href="#gesture">Gestures</a></li>
			<li><a href="#automatic">Automatic Connection Management</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Actor.html">Dali::Actor API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1LongPressGestureDetector.html">Dali::LongPressGestureDetector API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1PanGestureDetector.html">Dali::PanGestureDetector API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1PinchGestureDetector.html">Dali::PinchGestureDetector API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Signal.html">Dali::Signal API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Stage.html">Dali::Stage API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1TapGestureDetector.html">Dali::TapGestureDetector API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1Control.html">Dali::Toolkit::Control API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/classDali_1_1Toolkit_1_1KeyboardFocusManager.html">Dali::Toolkit::KeyboardFocusManager API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Actor.html">Dali::Actor API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1LongPressGestureDetector.html">Dali::LongPressGestureDetector API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1PanGestureDetector.html">Dali::PanGestureDetector API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1PinchGestureDetector.html">Dali::PinchGestureDetector API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Signal.html">Dali::Signal API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Stage.html">Dali::Stage API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1TapGestureDetector.html">Dali::TapGestureDetector API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1Control.html">Dali::Toolkit::Control API for Wearable Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/classDali_1_1Toolkit_1_1KeyboardFocusManager.html">Dali::Toolkit::KeyboardFocusManager API for Wearable Native</a></li>			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">

<h1>Event Handling: Managing the Event Flow</h1>

<p>DALi event handling system is composed of 2 major concepts:</p>

<ul>
<li>Signal
<p>Notifications containing event information emitted by GUI components. Also known as events or notifications.</p></li>
<li>Slot
<p>Special functions receiving signals. Also known as event handlers, observer, listener, or callbacks.</p></li>
</ul>
<p>DALi emits various types of signals to an application to inform it of user actions and the application can handle them through slots.</p>

<p>The concept of signal and slots were introduced by Qt for communication between objects. The event mechanism of DALi is inspired by Qt.</p>

<p class="figure">Figure: A schematic example of signal-slot connections: Signal 1 is connected to slot 1, signal 2 is connected to slot 1 and slot 3, and signal 3 is connected to slot 2.</p>  
	<p align="center"><img alt="Signal and slot event handling" src="../../images/signal_slot.png"/></p> 
 
<p>The signal and slot system has following advantages:</p>
<ul>
<li>Object-oriented: Support callbacks for C++ member functions</li>
<li>Type safe: Compiler is able to check for type safety</li>
<li>Non-coupling: No dependency between caller and callee</li>
<li>Non-type-intrusive: No modification to caller or callee types</li>
<li>Generic: Work for all types of callbacks</li>
<li>Many-to-many relationship: For example, 1 slot can connect to many signals and 1 signal can be connected to many slots</li>
</ul>

<h2 id="touch" name="touch">Example: Handling Touch Events</h2>
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> class provides the <span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span> function to inform the application that a user touches the actor. It is defined as follows:</p>

<pre class="prettyprint">typedef Signal&lt; bool (Actor, const TouchEvent&amp;)&gt; TouchSignalType;
TouchSignalType&amp;TouchedSignal();</pre>

<p>This means that a slot of the following type can be connected to the <span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span> function:</p>

<pre class="prettyprint">bool YourCallbackName(Actor actor, const TouchEvent&amp;event);</pre>

<p>The return value <span style="font-family: Courier New,Courier,monospace;">true</span> indicates that the touch event should be consumed. Otherwise, the signal is emitted on the next sensitive parent of the actor. This meaning is valid for the <span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span>, and other types of signals may not have a return value.</p>

<p>Each point on the screen being or having been touched is represented by the <span style="font-family: Courier New,Courier,monospace;">Dali::TouchPoint</span> object. This object stores information about the state of the touch point (such as down, up, or motion.) and the coordinates of the touch.</p>

<p>A collection of touch points at a specific moment in time is collated into the <span style="font-family: Courier New,Courier,monospace;">Dali::TouchEvent</span> object. When a multi-touch event occurs, each touch point represents the points that are currently being touched or the points where touch has stopped.</p>

<p>The following example shows how a connection to a touch event signal can be established:</p>

<pre class="prettyprint">
  // ... Assuming this code is in the HelloWorldController class
  void Create( Application& application )
  {
    Control actor = Control::New(); // Control is one of the simplest types of Actor that has visible form
    actor.SetParentOrigin( ParentOrigin::CENTER );
    actor.SetSize( 100.0f, 100.0f );
    actor.SetBackgroundColor( Vector4( 1.0f, 1.0f, 1.0f, 1.0f ) );
    actor.TouchedSignal().Connect( this, &HelloWorldController::OnTouch );
    Stage::GetCurrent().Add( actor );
  }

  bool OnTouch( Actor actor, const TouchEvent&touch )
  {
    bool handled = false;
    unsigned int pointCount = touch.GetPointCount();
    if( pointCount == 1)
    {
      // Do action when first touch on screen
      handled = true;
    }
    else if( pointCount > 1)
    {
      // Do action when multi-touch on screen
      handled = true;
    }
    return handled;   // true if we have handled the touch, false otherwise
  }
  // ...
</pre>

<p>The touch event is first emitted to the hit actor by the primary touch point, which is the first point that the user touches. If this hit actor does not handle the event, then the event is offered to the hit actor&#39;s parent. Again, if the parent does not handle this event, it is then offered to its parent and so on until the stage is reached or the event is consumed.</p>

<p>If a parent and child actor both connect to the touch signal, the touch event is first offered to the child. If it is consumed by the child, then is not informed to the parent.</p>

<h2 id="key" name="key">Example: Handling Key Events</h2>

<p>The following example show how to handle key events received by the stage:</p>

<pre class="prettyprint">
  // ... Assuming this code is in the HelloWorldController class
  void Create( Application& application )
  {
    Stage::GetCurrent().SetBackgroundColor( Vector4( 1.0f, 1.0f, 1.0f, 1.0f ) );
    Stage::GetCurrent().KeyEventSignal().Connect( this, &HelloWorldController::OnKeyEvent );

    PushButton button = PushButton::New();
    Stage::GetCurrent().Add( button );
  }

  void OnKeyEvent(const KeyEvent& event)
  {
    if(event.state == KeyEvent::Down)
    {
      if( IsKey( event, DALI_KEY_ESCAPE) || IsKey( event, DALI_KEY_BACK ) )
      {
        mApplication.Quit();
      }
    }
  }
  // ...
</pre>

<p>The stage is the top-most root object, so can receive application-wide key events.</p>

<p>DALi provides its own key codes for several special keys, such as <span style="font-family: Courier New,Courier,monospace;">DALI_KEY_ESCAPE</span> or <span style="font-family: Courier New,Courier,monospace;">DALI_KEY_BACK</span>, for your convinience.

<p>Available DALi key codes are listed as follows:</p>

<table>
	<caption>
		Table: DALi key codes
	</caption>
	<tbody>
	<tr>
		<th>Key Codes</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_INVALID</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_ESCAPE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_BACKSPACE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CURSOR_UP</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CURSOR_LEFT</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CURSOR_RIGHT</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CURSOR_DOWN</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_BACK</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CAMERA</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CONFIG</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_POWER</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_PAUSE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_CANCEL</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_PLAY_CD</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_STOP_CD</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_PAUSE_CD</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_NEXT_SONG</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_PREVIOUS_SONG</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_REWIND</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_FASTFORWARD</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_MEDIA</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_PLAY_PAUSE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_MUTE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_MENU</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_HOME</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_HOMEPAGE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_WEBPAGE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_MAIL</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_SCREENSAVER</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_BRIGHTNESS_UP</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_BRIGHTNESS_DOWN</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_SOFT_KBD</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_QUICK_PANEL</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_TASK_SWITCH</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_APPS</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_SEARCH</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_VOICE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_LANGUAGE</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_VOLUME_UP</span></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">DALI_KEY_VOLUME_DOWN</span></td>
	</tr>
	</tbody>
</table>

<h2 id="input" name="input">Input Signals</h2>

<p>Many DALi classes provide various signals to notify events to the application. Among them, the most basic type of signals would be input signals. This section briefly introduces these input signals in DALi.</p>

<p>The basic DALi input signals are as follows:</p>

<ul>
<li><strong>Touched signal</strong> notifies screen touch or mouse click</li>
<li><strong>Hovered signal</strong> notifies mouse hovering</li>
<li><strong>Wheel event signal</strong> notifies mouse wheel rolling</li>
<li><strong>Key event signal</strong> notifies keyboard input</li>
<li><strong>Key input focus signals</strong> notifies that a control is ready to receive key event signals</li>
<li><strong>Keyboard focus signals</strong> notifies moved focus by navigation keys (such as left or right)</li>
</ul>
<p>These signals are provided by the following classes:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signals</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span></td>
		<td>Emitted when touch input is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Actor actor, const TouchEvent&amp; event);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">HoveredSignal()</span></td>
		<td>Emitted when hover input is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Actor actor, const HoverEvent&amp; event);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">WheelEventSignal()</span></td>
		<td>Emitted when wheel event is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Actor actor, const WheelEvent&amp; event);</span></p></td>
	</tr>
   </tbody>
  </table>
  
  <p>The actor receiving events is passed to the callbacks.</p>
</li>

<li>
<span style="font-family: Courier New,Courier,monospace;">Dali::Stage</span>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Dali::Stage</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signals</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">TouchedSignal()</span></td>
		<td>Emitted when touch input is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(const TouchEvent&amp; event)</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">HoveredSignal()</span></td>
		<td>Emitted when hover input is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(const TouchEvent&amp; event);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">KeyEventSignal()</span></td>
		<td>Emitted when a key event is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(const KeyEvent&amp; event);</span></p></td>
	</tr>
   </tbody>
  </table>

<p>Only events are passed to the callbacks since only a single stage instance can exist in DALi application. The callback return types are <span style="font-family: Courier New,Courier,monospace;">void</span> because the stage has no parent to pass events to, even though it does not consume the events.</p>
</li>

<li>
<span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control</span>

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control</span> input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signals</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">KeyEventSignal()</span></td>
		<td>Emitted when a key event is received.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Control control, const KeyEvent& event);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">KeyInputFocusGainedSignal()</span></td>
		<td>Emitted when the control gets key input focus.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Control control);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">KeyInputFocusLostSignal()</span></td>
		<td>Emitted when the control loses key input focus which could be due to it being gained by another Control or Actor or just cleared from this control as no longer required.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">bool YourCallbackName(Control control);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">TouchedSignal(), HoveredSignal(), KeyEventSignal()</span></td>
		<td>Same as the ones supported by <span style="font-family: Courier New,Courier,monospace;">Actor</span>
		</td>
	</tr>
   </tbody>
  </table>

<p>The key event signal is provided by the <span style="font-family: Courier New,Courier,monospace;">Dali::Stage</span> and <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control</span> classes, not by the <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span>  class. The <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span>  class is not designed to get key events. To receive key events, an actor must be an instance of the <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control </span> class or one of its subclasses.</p>
<p>The <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control </span> class also can receive touch, hover, and wheel events as it inherits from the <span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span>  class.</p>
</li>

<li>
<span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::KeyboardFocusManager</span> 

<table>
   <caption>
     Table: <span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::KeyboardFocusManager</span>  input signals
   </caption>
   <tbody>
    <tr>
     <th>Input signals</th>
	 <th>Description</th>
    </tr>
    <tr>
		<td><span style="font-family: Courier New,Courier,monospace;">PreFocusChangeSignal()</span></td>
		<td>Emitted before the focus is going to be changed.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">Actor YourCallbackName(Actor currentFocusedActor, Actor proposedActorToFocus, Control::KeyboardFocus::Direction direction);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">FocusChangedSignal()</span></td>
		<td>Emitted after the current focused actor has been changed.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(Actor originalFocusedActor, Actor currentFocusedActor);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">FocusGroupChangedSignal()</span></td>
		<td>Emitted when the focus group has been changed.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(Actor currentFocusedActor, bool forward);</span></p></td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace;">FocusedActorEnterKeySignal()</span></td>
		<td>Emitted when the current focused actor has the enter key pressed on it.
		<p>Callback: <span style="font-family: Courier New,Courier,monospace;">void YourCallbackName(Actor enterPressedActor);</span></p></td>
		</td>
	</tr>
   </tbody>
  </table>

<p><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::KeyboardFocusManager</span> provides the functionality of handling keyboard navigation and maintaining the two dimensional keyboard focus chain. Disimilar to the key input focus, the keyboard focus is about the focus moving between actors, and that's why this signal is provided by the specific focus managing class.</p>

</li>
</ul>


The following DALi classes provide signals:
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Window</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Application</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Timer</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Actor</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Image</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::ResourceImage</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::LongPressGestureDetector</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::TapGestureDetector</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::PanGestureDetector</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::PinchGestureDetector</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::RenderTask</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Stage</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::ObjectRegistry</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::PropertyNotification</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Animation</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Button</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Control</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::TextField</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::View</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::GaussianBlurViewSignal</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::ScrollBar</span> </li> 
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::Scrollable</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::ScrollView</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::AccessibilityFocusManager</span> </li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::Toolkit::KeyboardFocusManager</span> </li>
</ul>
<p>For the signals of each class and their usage, see the API Reference.</p>

<h2 id="gesture" name="gesture">Gestures</h2>
<p>Gesture is a user-friendly high-level event produced from a stream of touch events. The <span style="font-family: Courier New,Courier,monospace;">Dali::GestureDetector </span> class analyzes a stream of touch events and attempts to determine the intention of the user. </p>
<p>If an actor is attached to a gesture detector and the detector recognizes a user intention (detects a predefined pattern in a stream of touch events), the actor emits a detected gesture signal to the application.</p>

<p>DALi currently supports following gesture detectors:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::LongPressGestureDetector</span> detects when the user does a long-press action.</li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::TapGestureDetector</span> detects when the user does a tap action.</li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::PinchGestureDetector</span> detects when the user moves two fingers towards or away from each other.</li>
<li><span style="font-family: Courier New,Courier,monospace;">Dali::PanGestureDetector</span> detects when the user moves one or more fingers in the same direction.</li>
</ul>

<p>The example below shows how an application can be notified of a pinch gesture:</p>

<pre class="prettyprint">
  // ... Assuming this code is in the HelloWorldController class
  void Create( Application& application )
  {
    PushButton actor = PushButton::New();  // Another type of Actor
    actor.SetParentOrigin( ParentOrigin::CENTER );
    actor.SetSize( 100.0f, 100.0f );
    Stage::GetCurrent().Add( actor );

    PinchGestureDetector detector = PinchGestureDetector::New();
    detector.Attach( actor );
    detector.DetectedSignal().Connect( this, &HelloWorldController::OnPinch );
  }

  void OnPinch( Actor actor, const PinchGesture& pinch )
  {
     // Scale your actor according to the pinch scale
     Vector3 newSize = actor.GetCurrentSize() * pinch.scale;
     actor.SetSize( newSize );
  }
  // ...
</pre>

<h2 id="automatic" name="automatic">Automatic Connection Management</h2>

<p>Let's say we have a pair of connected signal (for example, a button clicked signal) and slot (for example, a toolbar object having the callback for the signal).
If one of them (the button or the toolbar) is deleted without any notification, then the application will crash when the signal is emitted or the slot tries to disconnect the signal.</p>

<p>DALi provides the automatic connection management mechanism to prevent this kind of situation. The key is <span style="font-family: Courier New,Courier,monospace;">Dali::ConnectionTracker</span> class. It tracks connections between signals and slots, performs automatic disconnection when either the singal or slot is deleted.</p>

<p>That's why all the DALi sample codes start with a controller class derived from <span style="font-family: Courier New,Courier,monospace;">Dali::ConnectionTracker</span>. This is a safe and typical way of DALi application. Of course you can think of another structure using <span style="font-family: Courier New,Courier,monospace;">Dali::ConnectionTracker</span>.
    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

