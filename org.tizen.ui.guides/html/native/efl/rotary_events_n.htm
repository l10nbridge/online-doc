<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>
  <title>Managing Rotary Events</title> 
 </head> 
 <body onload="prettyPrint()" style="overflow: auto;">
 
 <div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/> <img alt="Wearable native" src="../../images/wn_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#handler">Rotary Event Handler</a></li>
			<li><a href="#callback">Rotary Object Event Callback</a></li>
			<li><a href="#rotary">Managing Rotary Events</a></li>
		</ul>
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__CAPI__EFL__EXTENSION__MODULE.html">Efl Extension API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.wearable.apireference/group__CAPI__EFL__EXTENSION__MODULE.html">Efl Extension API for Wearable Native</a></li>		
			</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Managing Rotary Events</h1>

  
<p>You can use various functions to work with the rotary events. The functions manage the rotary events, which are fired from the rotary device and delivered to a suitable target. To receive rotary events, you must define an event callback or a handler function, and register it using the EFL Extension functions. There are 2 ways to receive the rotary events: the rotary event handler and the rotary object event callback.</p>


<table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Rotary events are only supported in devices with a circular screen.</td> 
    </tr> 
   </tbody> 
  </table>  

<h2 id="handler">Rotary Event Handler</h2>

<p>The rotary event handler is suitable when you want to handle rotary events without taking care about an Evas Object or when the application is not implemented using an Evas Object. The handler works like the Ecore event in EFL:</p>

<ul><li><p>The application registers a rotary event handler with the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_event_handler_add()</span> function.</p>

<p>The rotary event handlers are treated &quot;first come first served&quot;. It means that the first registered handler is called first when rotary events happens. If the handler returns <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>, the next handler is called. Otherwise, EFL Extension stops delivering the rotary events.</p>
</li>
<li><p>To remove a rotary event handler, use the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_event_handler_del()</span> function.</p></li></ul>



<h2 id="callback">Rotary Object Event Callback</h2>

<p>The rotary object event callback is suitable when you want EFL Extension to handle the event delivery between objects. It means that EFL Extension manages a callback and an object list and decides which object&#39;s callback must be called when rotary events happen:</p> 

<ul><li><p>The application registers a callback using the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_object_event_callback_add()</span> function.</p>

<p>EFL Extension treats callbacks based on the callback priority. If the application registers callbacks for a same object, the callback with the lowest priority number is called first. If this callback returns <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>, the higher priority number is called. The above function registers the rotary event callback with a default priority number (value is 0). To register the rotary event callback with another priority number, use the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_object_event_callback_priority_add()</span> function.</p></li>
<li><p>To remove a registered callback from an object, use the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_object_event_callback_del()</span> function:</p></li></ul>

<p>The rotary events are only delivered to 1 object named the activated object. If there is no activated object, the rotary event is not delivered to any object. If the activated object has registered callbacks and the callbacks return <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>, the rotary events are delivered to the upper parents of the activated object until there is 1 callback that consumes the rotary event or it reaches the top parent object.</p>
<p>To set the object as the activated object, use the <span style="font-family: Courier New,Courier,monospace;">eext_rotary_object_event_activated_set()</span> function.</p>

<p>Providing the activated parameter with the <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span> value sets the object as the activated object. Providing the <span style="font-family: Courier New,Courier,monospace;">EINA_FALSE</span> value deactivates the object. Since there is only 1 object which is the activated object, if an object is set as the activated object, the previously activated object is deactivated and becomes a normal object. An activated signal named <span style="font-family: Courier New,Courier,monospace;">rotary,activated</span> is sent when an object is set as the activated object, and the <span style="font-family: Courier New,Courier,monospace;">rotary,deactivated</span> signal is sent when an object is deactivated.</p>

<p>You can register callbacks for activated or deactivated signals with the <span style="font-family: Courier New,Courier,monospace;">evas_object_smart_callback_add()</span> function.</p>

<p>For more information, see the Evas smart callback function (in <a href="../../../../org.tizen.native.mobile.apireference/group__Evas__Smart__Object__Group.html">mobile</a> and <a href="../../../../org.tizen.native.wearable.apireference/group__Evas__Smart__Object__Group.html">wearable</a> applications).</p>

<h2 id="rotary">Managing Rotary Events</h2>

<p>To manage rotary events:</p>
<ol>
<li>Create the rotary event handler:
<ol type="a">
<li>Create the window:
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
Evas_Object *win = NULL;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;win = elm_win_util_standard_add(NULL, &quot;extension circle sample&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Show the window after base gui is set up
&nbsp;&nbsp;&nbsp;evas_object_show(win);
}
</pre>
</li>

<li>Register the rotary event handler:
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Register the rotary event handler
&nbsp;&nbsp;&nbsp;eext_rotary_event_handler_add(_rotary_handler_cb, NULL);
}
</pre></li>
<li>Define the callback function:
<pre class="prettyprint">
Eina_Bool _rotary_handler_cb(void *data, Eext_Rotary_Event_Info *ev)
{
&nbsp;&nbsp;&nbsp;if (ev-&gt;direction == EEXT_ROTARY_DIRECTION_CLOCKWISE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOGD(&quot;Rotary device rotated in clockwise direction&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOGD(&quot;Rotary device rotated in counter clockwise direction&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}
</pre>
</li>

<li>Remove the rotary event handler and release all resources when you do not need it anymore.
<pre class="prettyprint">
static void
app_terminate(void *data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
&nbsp;&nbsp;&nbsp;eext_rotary_event_handler_del(_rotary_handler_cb);
}
</pre>
</li>
</ol>
</li>
<li>Create a rotary event callback for a normal Evas object. 
<p>When a rotary event occurs, the slider value is adjusted accordingly.</p>
<ol type="a">
<li>Create the objects.
<p>The window and the slider are created using the Elementary APIs.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *win = NULL, *slider = NULL;

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;win = elm_win_util_standard_add(NULL, &quot;extension sample&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Slider
&nbsp;&nbsp;&nbsp;slider = elm_slider_add(win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(slider, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_slider_min_max_set(slider, 0, 50);
&nbsp;&nbsp;&nbsp;elm_slider_step_set(slider, 1.0);
&nbsp;&nbsp;&nbsp;evas_object_show(slider);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(win, slider);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(win);
}
</pre>
</li>
<li>Register the rotary event callback.
<p>To receive the rotary event, register the rotary event callback and set the activated object as the slider object.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Register rotary event callback 
&nbsp;&nbsp;&nbsp;ext_rotary_object_event_callback_add(slider, _rotary_event_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_rotary_object_event_activated_set(slider, EINA_TRUE);
}
</pre>
<p>Define the rotary callback function:</p>
<pre class="prettyprint">
Eina_Bool _rotary_event_cb(void *data, Evas_Object *obj, Eext_Rotary_Event_Info *ev)
{
&nbsp;&nbsp;&nbsp;Evas_Object *slider = obj;
&nbsp;&nbsp;&nbsp;int val = elm_slider_value_get(slider);
&nbsp;&nbsp;&nbsp;if (ev-&gt;direction == EEXT_ROTARY_DIRECTION_CLOCKWISE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_slider_value_set(slider, val + 1);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_slider_value_set(slider, val - 1);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}
</pre>
</li>
</ol>
</li>
<li>Create a rotary event callback for an EFL Extension object. 
<p>When a rotary event occurs, the slider value is adjusted accordingly.</p>
<ol type="a">
<li>Create the objects:
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *win = NULL, *conform = NULL;
&nbsp;&nbsp;&nbsp;Eext_Circle_Surface *sur = NULL;

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;win = elm_win_util_standard_add(NULL, &quot;extension circle sample&quot;);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;conform = elm_conformant_add(win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(win, conform);
&nbsp;&nbsp;&nbsp;evas_object_show(conform);

&nbsp;&nbsp;&nbsp;// Surface 
&nbsp;&nbsp;&nbsp;sur = eext_circle_surface_conformant_add(conform);

&nbsp;&nbsp;&nbsp;// Slider
&nbsp;&nbsp;&nbsp;slider = eext_circle_object_slider_add(conform, sur);
&nbsp;&nbsp;&nbsp;eext_circle_object_value_min_max_set(slider, 0.0, 30.0);
&nbsp;&nbsp;&nbsp;eext_circle_object_value_set(slider, 0.0);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(win);
}
</pre>
</li>
<li>Set the activated object.
<p>Since the EFL Extension API is used to create the slider object, the created slider object already registers the rotary event callbacks internally. To receive a rotary event, you only need to set the activated object as the desired object (slider).</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Activate circle slider&#39;s rotary object event
&nbsp;&nbsp;&nbsp;// Its value increases/decreases its value by 1.0 to clockwise or 
&nbsp;&nbsp;&nbsp;// counter-clockwise rotary event
&nbsp;&nbsp;&nbsp;eext_rotary_object_event_activated_set(slider, EINA_TRUE);
&nbsp;&nbsp;&nbsp;eext_circle_object_slider_step_set(slider, 1.0);
}
</pre>
</li>
</ol>
</li>
</ol>  
  
    
<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>