<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../../css/snippet.css" />
	<script type="text/javascript" src="../../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../../scripts/search.js" charset="utf-8"></script>

	<title>Using Mobile UI Components</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile native" src="../../images/mn_icon.png"/></p>
	</div>
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Content</p>
		<ul class="toc">
			<li><a href="#background">Background</a></li>
			<li><a href="#button">Button</a></li>
			<li><a href="#check">Check</a></li>
			<li><a href="#colorselector">Colorselector</a></li>
			<li><a href="#ctxpopup">Ctxpopup</a></li>
			<li><a href="#datetime">Datetime</a></li>
			<li><a href="#entry">Entry</a></li>
			<li><a href="#flip">Flip</a></li>
			<li><a href="#gengrid">Gengrid</a></li>
			<li><a href="#genlist">Genlist</a></li>
			<li><a href="#glview">GLView</a></li>
			<li><a href="#icon">Icon</a></li>
			<li><a href="#image">Image</a></li>
			<li><a href="#index">Index</a></li>
			<li><a href="#label">Label</a></li>
			<li><a href="#list">List</a></li>
			<li><a href="#map">Map</a></li>
			<li><a href="#notify">Notify</a></li>
			<li><a href="#panel">Panel</a></li>
			<li><a href="#photo">Photo</a></li>
			<li><a href="#photocam">Photocam </a></li>
			<li><a href="#plug">Plug</a></li>
			<li><a href="#popup">Popup</a></li>
			<li><a href="#progressbar">Progressbar</a></li>
			<li><a href="#radio">Radio</a></li>
			<li><a href="#segmentcontrol">Segmentcontrol</a></li>
			<li><a href="#slider">Slider</a></li>
			<li><a href="#spinner">Spinner</a></li>
			<li><a href="#toolbar_component">Toolbar</a></li>
			<li><a href="#tooltip">Tooltip</a></li>
			<li><a href="#win">Win</a></li>
		</ul>
			<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Edje.html">Edje API for Mobile Native</a></li>
			<li><a href="../../../../org.tizen.native.mobile.apireference/group__Elementary.html">Elementary API for Mobile Native</a></li>	
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
<h1>Using Mobile UI Components</h1>

 <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">This feature is supported in mobile applications only.</td> 
    </tr> 
   </tbody> 
  </table>

				<h2 id="background" name="background">Background</h2>
				
<p class="figure">Figure: Red color background</p>
<p align="center"><img alt="Red color background" src="../../images/bg.png" /></p>

<p class="figure">Figure: Background hierarchy</p>
<p align="center"><img alt="Background hierarchy" src="../../images/bg_tree.png" /></p>

<p>The background component can be used to set a solid background decoration to a window or to a container object. It works like an image, but has some background specific properties, for example it can be set to a tiled, centered, scaled, or stretched mode. There are no specific signals relative to background object.</p>

<h3>Adding a Background Component</h3>

<p>A background is created with the <span style="font-family: Courier New,Courier,monospace">elm_bg_add()</span> function.</p>

<pre class="prettyprint">
Evas_Object *bg, *parent;

// Create a background
bg = elm_bg_add(parent);
</pre>

<h3>Changing the Color of the Background</h3>

<p>You can set the color of the background with the <span style="font-family: Courier New,Courier,monospace">elm_bg_color_set()</span> function. The following example sets the background color to red.</p>

<pre class="prettyprint">
Evas_Object *bg;

// Use red color for background
elm_bg_color_set(bg, 0xFF, 0x00, 0x00);
</pre>

<h3>Changing the Image of the Background</h3>

<p>It is also possible to set an image or an Edje group as a background using the <span style="font-family: Courier New,Courier,monospace">elm_bg_file_set()</span> function. The display mode of the image in the background can be chosen with <span style="font-family: Courier New,Courier,monospace">elm_bg_option_set()</span>, where the following modes are available:</p>

<ul>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_CENTER</span>: center the background image.</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_SCALE</span>: scale the background image, retaining aspect ratio.</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_STRETCH</span>: stretch the background image to fill the UI component&#39;s area.</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_BG_OPTION_TILE</span>: tile the background image at its original size.</li>
</ul>

<pre class="prettyprint">
Evas_Object *bg;

// Set a file on the disk as a background image
elm_bg_file_set(bg, &quot;/path/to/the/image&quot;, NULL);
// Set an Edje group as a background image
elm_bg_file_set(bg, &quot;/path/to/the/edje&quot;, &quot;edje_group&quot;);
elm_bg_option_set(bg, ELM_BG_OPTION_STRETCH)
</pre>

<h3>Using Overlay</h3>

<p>An overlay can be set using the <span style="font-family: Courier New,Courier,monospace">overlay</span> part name.</p>

<pre class="prettyprint">
elm_object_part_content_set(bg, &quot;overlay&quot;, over);
</pre>

<p>Here, the overlay is an Edje object that is displayed on top of the current background object.</p>

			
				<h2 id="button" name="button">Button</h2>

<p class="figure">Figure: Button component</p>
<p align="center"><img alt="Button component" src="../../images/button.png" /></p>

<p class="figure">Figure: Button hierarchy</p>
<p align="center"><img alt="Button hierarchy" src="../../images/button_tree.png" /></p>

<p>The Elementary button component is a simple push button. It is composed of a label icon and an icon object and has an autorepeat feature.</p>

<h3>Adding a Button Component</h3>

<p>Create a button.</p>
<pre class="prettyprint">
Evas_Object *button, *parent;

// Create a button
button = elm_button_add(parent);</pre>

<h3>Adding an Icon Inside a Button</h3>

<p>The icon can be updated with <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function with the <span style="font-family: Courier New,Courier,monospace">icon</span> part name.</p>

<pre class="prettyprint">
Evas_Object *ic;
ic = elm_icon_add(button);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(button, &quot;icon&quot;, ic);
</pre>

<h3>Adding Text Inside a Button</h3>

<p>The label can be modified using the <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function.</p>

<pre class="prettyprint">
elm_object_text_set(button, &quot;Click me!&quot;);
</pre>

<h3>Using Button Styles</h3>

<p>Various styles can be used on the button. Tizen supports the following styles:</p>

<ul>
    <li><span style="font-family: Courier New,Courier,monospace">icon_reorder</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">icon_expand_add</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">icon_expand_delete</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">default</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">circle</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">bottom</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">contacts</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">option</span></li>
</ul>

<p>You can see these themes in action on the following screenshot (in the above order).</p>

<p class="figure">Figure: Button component</p>
<p align="center"><img alt="Button component" src="../../images/button.png" /></p>

<p>To change the style of the button, call the <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function on the button object.</p>

<pre class="prettyprint">
elm_object_style_set(button,&quot;icon_expand_add&quot;);
</pre>

<h3>Using the Button Callbacks</h3>

<p>The button emits the following signals:</p>

<ul>
    <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user clicked the button (press/release).</li>
    <li><span style="font-family: Courier New,Courier,monospace">repeated</span>: The user pressed the button without releasing it.</li>
    <li><span style="font-family: Courier New,Courier,monospace">pressed</span>: The user pressed the button.</li>
    <li><span style="font-family: Courier New,Courier,monospace">unpressed</span>: The user released the button after pressing it.</li>
</ul>

<p>For all these signals the <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter returned in the callback is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>This is an example to register and define a callback function called by the clicked signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, clicked_cb, data);
}
// Callback function for the &quot;clicked&quot; signal
// This callback is called when the button is clicked by the user
void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Button clicked\n&quot;);
}
</pre>

<h3>Using the Autorepeat Feature</h3>

<p>The autorepeat feature is enabled by default. It consists of calling the <span style="font-family: Courier New,Courier,monospace">repeated</span> signal when the user keeps the button pressed. This feature can be disabled with the <span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_set()</span> function. The autorepeat is configured with the following functions:</p>
<ul>
    <li><span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_initial_timeout_set()</span>: to set the initial timeout before the autorepeat event is generated</li>
    <li><span style="font-family: Courier New,Courier,monospace">elm_button_autorepeat_gap_timeout_set()</span>: to set the interval between two autorepeat events</li>
</ul>

<p>Disable the autorepeat feature.</p>
<pre class="prettyprint">
elm_button_autorepeat_set(button, EINA_FALSE);
</pre>

<p>Enable the autorepeat feature.</p>
<pre class="prettyprint">
elm_button_autorepeat_set(button, EINA_TRUE);
</pre>

<p>Set the initial timeout to five seconds.</p>
<pre class="prettyprint">
elm_button_autorepeat_initial_timeout_set(button, 5.0);
</pre>

<p>Set the gap between two signals to 0.5 seconds.</p>
<pre class="prettyprint">
elm_button_autorepeat_gap_timeout_set(button, 0.5);
</pre>

		
				<h2 id="check" name="check">Check</h2>

<p class="figure">Figure: Check component</p> 
<p align="center"><img alt="Check component" src="../../images/check.png" /></p> 

<p class="figure">Figure: Check hierarchy</p> 
<p align="center"><img alt="Check hierarchy" src="../../images/check_tree.png" /></p> 

<p>The check component is similar to the radio component, except that it does not work as a group. It toggles the value of a boolean between true and false.</p>

<p>This UI component inherits from the layout component. All layout functions can be used on the check component.</p>

<h3 id="Adding" name="Adding">Adding a Check Component</h3>

<p>The following example shows how to create a check component.</p>

<pre class="prettyprint">
Evas_Object *check, *parent;
check = elm_check_add(parent);
</pre>

<h3 id="Modifying" name="Modifying">Modifying the Check Styles</h3>

<p>The check component style can be set with the <span style="font-family: Courier New,Courier,monospace;">elm_object_style_set()</span> function. The following styles are available:</p>
<ul>
    <li><span style="font-family: Courier New,Courier,monospace;">default</span></li>
    <li><span style="font-family: Courier New,Courier,monospace;">favorite</span></li>
    <li><span style="font-family: Courier New,Courier,monospace;">on</span> and <span style="font-family: Courier New,Courier,monospace;">off</span></li>
</ul>

<p>The following example sets the <span style="font-family: Courier New,Courier,monospace">favorite</span> style on our check object.</p>
<pre class="prettyprint">
elm_object_style_set(check, &quot;favorite&quot;);
</pre>

<p>To get the current style, use the <span style="font-family: Courier New,Courier,monospace;">elm_object_style_get()</span> function.</p>
<pre class="prettyprint">
char *style = elm_object_style_get(check);
</pre>

<h3 id="Using_Check" name="Using_Check">Using the Check Component</h3>

<p>After having created a check object, it is possible to set its boolean value to <span style="font-family: Courier New,Courier,monospace;">EINA_TRUE</span>.</p>
<pre class="prettyprint">
elm_check_state_set(check, EINA_TRUE);
</pre>

<p>You can also retrieve the current value of the check object.</p>
<pre class="prettyprint">
Eina_Bool value = elm_check_state_get(check);
</pre>

<p>As with a radio object, an icon and a label can be set.</p>
<pre class="prettyprint">
// Create a Home icon 
Evas_Object *icon;

icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;home&quot;);

// Set it to the check object 
elm_object_part_content_set(check, &quot;icon&quot;, icon);

// Set the check label 
elm_object_text_set(check, &quot;Check label&quot;);
</pre>

<p>You can also modify the <span style="font-family: Courier New,Courier,monospace">on</span> and <span style="font-family: Courier New,Courier,monospace">off</span> labels.</p>

<pre class="prettyprint">
elm_object_part_text_set(check, &quot;on&quot;, &quot;True&quot;);
elm_object_part_text_set(check, &quot;off&quot;, &quot;False&quot;);
</pre>

<p>The get functions of the elementary object API can be used to retrieve the content set to the check object.</p>

<pre class="prettyprint">
// Get the current set text of the check label 
char *text = elm_object_text_get(check);

// Get the content set in the icon part 
Evas_Object *icon = elm_object_part_content_get(check, &quot;icon&quot;);
</pre>

<h3 id="Using_Check_Callbacks" name="Using_Check_Callbacks">Using the Check Callbacks</h3>

<p>When the value is changed by the user, the changed signal is emitted. The <span style="font-family: Courier New,Courier,monospace;">event_info</span> parameter is <span style="font-family: Courier New,Courier,monospace;">NULL</span>.</p>

<p>The following example shows how to register a callback on this signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(check, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the check value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>

				<h2 id="colorselector" name="colorselector">Colorselector</h2>

    <p class="figure">Figure: Colorselector component</p> 
  <p align="center"><img alt="Colorselector component" src="../../images/colorsel.png" /></p> 
  
      <p class="figure">Figure: Colorselector hierarchy</p> 
  <p align="center"><img alt="Colorselector hierarchy" src="../../images/colorselector_tree.png" /></p>


<p>The colorselector component provides a color selection solution to the user. There are different modes available, each of them showing a different configuration of the colorselector component.</p>

<p>Currently only the Palette mode is available in Tizen.</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_COLORSELECTOR_PALETTE</span></li>
</ul>

<p>The Palette mode displays several color items that enable the user to choose a color in the items displayed. It is possible to add new items, or to update the color of the current item. The list of color items is called a palette, and it is associated with a unique identifier. This enables the developers to create new series of colors (a new palette) and save it under another identifier. By default, the color palette is using the <span style="font-family: Courier New,Courier,monospace">default</span> identifier.</p>

<p>This UI component inherits from the layout component, so all function concerning the layout component can also be used on the colorselector component.</p>

<h3>Adding a Colorselector Component</h3>

<p>The following example shows how to create a colorselector object.</p>

<pre class="prettyprint">
Evas_Object *colorsel, *parent;

colorsel = elm_colorselector_add(parent);
</pre>

<h3>Setting the Colorselector Modes</h3>

<p>The following example shows how to set the mode of the colorselector to the palette mode.</p>

<pre class="prettyprint">
elm_colorselector_mode_set(colorsel, ELM_COLORSELECTOR_PALETTE);
</pre>

<p>The following example shows how to create a new palette called <span style="font-family: Courier New,Courier,monospace">mypalette</span>. This new palette is saved by elementary config and you can to load it again later. You then add three colors in <span style="font-family: Courier New,Courier,monospace">mypalette</span>: red, green, and blue.</p>

<pre class="prettyprint">
elm_colorselector_palette_name_set(colorsel, &quot;mypalette&quot;);
elm_colorselector_palette_color_add(colorsel, 255, 0, 0, 255);
elm_colorselector_palette_color_add(colorsel, 0, 255, 0, 255);
elm_colorselector_palette_color_add(colorsel, 0, 0, 255, 255);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">default</span> palette already contains 14 colors.</p>

<pre class="prettyprint">
elm_colorselector_palette_name_set(colorsel, &quot;default&quot;);
</pre>

<p>When the user clicks on the color elements, the element changes the color that is set to the colorselector component. You can use the following function to retrieve the current selected color.</p>
<pre class="prettyprint">
int r, g, b, a;

elm_colorselector_color_get(colorsel, &amp;r, &amp;g, &amp;b, &amp;a);
</pre>

<h3>Using the Colorselector Callbacks</h3>

<p>You can register callbacks on the following signals:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">changed</span> - The color value changes on the selector. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">color,item,selected</span> - The user clicks on a color item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback is the selected color item.</li>
<li><span style="font-family: Courier New,Courier,monospace">color,item,longpressed</span> - The user long presses on a color item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback contains the selected color item.</li>
</ul>

<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">changed</span> signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(colorselector, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the colorselector value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The color has changed\n&quot;);
}
</pre> 

		
				<h2 id="ctxpopup" name="ctxpopup">Ctxpopup</h2>

    <p class="figure">Figure: Context popup component</p> 
  <p align="center"><img alt="Context popup component" src="../../images/ctxpopup1.png" /></p> 
  
      <p class="figure">Figure: Context popup hierarchy</p> 
  <p align="center"><img alt="Context popup hierarchy" src="../../images/ctxpopup_tree.png" /></p>


<p>Ctxpopup is a contextual popup that can show a list of items.</p>

<h3>Adding a Ctxpopup Component</h3>

<p>A ctxpopup can be created with the <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_add()</span> function, and when shown, it automatically chooses an area inside its parent object&#39;s view (set using <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_hover_parent_set()</span>) to optimally fit into it.</p>

<pre class="prettyprint">
Evas_Object *ctxpopup, *parent;

// Create a ctxpopup 
ctxpopup = elm_ctxpopup_add(parent);
</pre>

<h3>Modifying the Ctxpopup Style</h3>

<p>The following styles are available:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">dropdown/list</span></li>
<li><span style="font-family: Courier New,Courier,monospace">dropdown/label</span></li>
<li><span style="font-family: Courier New,Courier,monospace">more/default</span></li>
</ul>

    <p class="figure">Figure: Context popup more/default style</p> 
  <p align="center"><img alt="Context popup more/default style" src="../../images/ctxpopup1.png" /></p> 
  
      <p class="figure">Figure: Context popup dropdown/list</p> 
  <p align="center"><img alt="Context popup dropdown/list" src="../../images/ctxpopup2.png" /></p>

      <p class="figure">Figure: Context popup dropdown/label</p> 
  <p align="center"><img alt="Context popup dropdown/label" src="../../images/ctxpopup3.png" /></p>

<p>The following example shows how to set the <span style="font-family: Courier New,Courier,monospace">more/default</span> style.</p>

<pre class="prettyprint">
elm_object_style_set(ctxpopup, &quot;more/default&quot;);
</pre>

<h3>Configuring the Ctxpopup</h3>

<p>The context popup orientation can be set with <span style="font-family: Courier New,Courier,monospace">elm_ctxpopup_horizontal_set()</span>. Here it is set to horizontal.</p>
<pre class="prettyprint">
elm_ctxpopup_horizontal_set(ctxpopup, EINA_TRUE);
</pre>

<p>Auto hide is enabled by default. You can also disable auto hiding if you want the ctxpopup never to be hidden.</p>
<pre class="prettyprint">
elm_ctxpopup_auto_hide_disabled_set(ctxpopup, EINA_TRUE);
</pre>

<h3>Managing the Ctxpopup Items</h3>

<p>The ctxpopup can contain a small number of items. Each of them can have a label and an icon. The following example shows how to append an item with the <span style="font-family: Courier New,Courier,monospace">Test</span> label and no icon.</p>
<pre class="prettyprint">
Elm_Object_Item *it;

it = elm_ctxpopup_item_append(ctxpopup, &quot;test&quot;, NULL, _ctxpopup_item_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">_ctxpopup_item_cb()</span> callback is called when the item is clicked. The following example shows how to write the definition of this callback.</p>
<pre class="prettyprint">
static void
_ctxpopup_item_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;ctxpopup item selected\n&quot;);
}
</pre>

<p>After that the item label is set to <span style="font-family: Courier New,Courier,monospace">New label</span>.</p>

<pre class="prettyprint">elm_object_item_part_text_set(it, &quot;default&quot;, &quot;New label&quot;);
</pre>

<p>And its icon is modified to the standard <span style="font-family: Courier New,Courier,monospace">home</span> icon.</p>

<pre class="prettyprint">
Evas_Object *home_icon = elm_icon_add(ctxpopup);
elm_icon_standard_set(home_icon, &quot;home&quot;);

elm_object_item_part_content_set(it, &quot;icon&quot;, home_icon);
</pre>

<h3>Using the Ctxpopup Callbacks</h3>

<p>The context popup emits the <span style="font-family: Courier New,Courier,monospace">dismissed</span> signal when it is dismissed. You can register a callback to this signal. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ctxpopup, &quot;dismissed&quot;, dismissed_cb, data);
}

// Callback function for the &quot;dismissed&quot; signal
// This callback is called when the ctxpopup is dismissed
void dismissed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Ctxpopup dismissed\n&quot;);
}
</pre> 

				<h2 id="datetime" name="datetime">Datetime</h2>
  
<p class="figure">Figure: Datetime selection</p> 
<p align="center"> <img alt="Datetime selection" src="../../images/date2.png" /> </p> 
 
<p class="figure">Figure: Datetime hierarchy</p> 
<p align="center"> <img alt="Datetime hierarchy" src="../../images/datetime_tree.png" /> </p> 
 
<p>The datetime component displays and adds date and time values.</p>

<h3>Adding a Datetime Component</h3>

<p>The UI component is created with <span style="font-family: Courier New,Courier,monospace">elm_datetime_add()</span>. It is possible to select the visible fields with <span style="font-family: Courier New,Courier,monospace">elm_datetime_field_visible_set()</span>. The following fields can be controlled:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_YEAR</span>: the year field</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_MONTH</span>: the month field</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_DATE</span>: the date field</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_HOUR</span>: the hour field</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_MINUTE</span>: the minute field</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_DATETIME_AMPM</span>: the AM/PM field</li>
  </ul>

<p>The following example shows how to create a datetime component and set the <span style="font-family: Courier New,Courier,monospace">HOUR</span> and <span style="font-family: Courier New,Courier,monospace">MINUTE</span> fields visible.</p>

<pre class="prettyprint">
Evas_Object *datetime, *parent;

datetime = elm_datetime_add(parent);

elm_datetime_field_visible_set(datetime, ELM_DATETIME_HOUR, EINA_TRUE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_MINUTE, EINA_TRUE);

elm_datetime_field_visible_set(datetime, ELM_DATETIME_YEAR, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_MONTH, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_DATE, EINA_FALSE);
elm_datetime_field_visible_set(datetime, ELM_DATETIME_AMPM, EINA_FALSE);
</pre>

<h3>Using the Datetime Styles</h3>

<p>The following styles are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">date_layout</span></li>
   <li><span style="font-family: Courier New,Courier,monospace">time_layout</span></li>
   <li><span style="font-family: Courier New,Courier,monospace">time_layout_24h</span></li>
  </ul>

<p>The following example creates the <span style="font-family: Courier New,Courier,monospace">date_layout</span> style:</p>

<pre class="prettyprint">
elm_object_style_set(datetime, &quot;date_layout&quot;);
</pre>

<h3>Setting the Datetime Format</h3>

<p>The format of the date and time can be configured with <span style="font-family: Courier New,Courier,monospace">elm_datetime_format_set()</span> using a combination of allowed Libc date format specifiers. In the following example the format is set to HH : MM.</p>

<pre class="prettyprint">
elm_datetime_format_set(datetime, &quot;%H : %M&quot;);
</pre>

<p>Please refer to the API documentation for a complete list of all the options available.</p>

<h3>Using the Datetime Callbacks</h3>

<p>A callback can be registered on the <span style="font-family: Courier New,Courier,monospace">changed</span> signal to detect when the Datetime field values are changed. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(datetime, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the datetime fields change
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Datetime field changed. \n&quot;);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">language,changed</span> signal is emitted when the system locale changes.</p>
 

<h3>UX Issue in Tizen 2.3</h3>

<ul>
  <li><span style="font-family: Courier New,Courier,monospace">date_layout</span> (default): Year, Month, Day</li>
  <li><span style="font-family: Courier New,Courier,monospace">time_layout</span>: Hour, Minute, AM/PM button</li>
  <li><span style="font-family: Courier New,Courier,monospace">time_layout_24hr</span>: Hour, Minute</li>
</ul>
 
<p>Basically, the <span style="font-family: Courier New,Courier,monospace">elm_datetime</span> component needs a full-length format that includes the Year, Month, Day, Hour, Minute, and AM/PM. Each style then shows specific fields according their style, limited by the UX concept. If you call the <span style="font-family: Courier New,Courier,monospace">elm_datetime_field_visible_set()</span> function for a field that is not supported in the style, it does not work.</p>
 
		
				<h2 id="entry" name="entry">Entry</h2>
  
<p class="figure">Figure: Entry component</p> 
<p align="center"> <img alt="Entry component" src="../../images/entry.png" /> </p> 
 
<p class="figure">Figure: Entry component</p> 
<p align="center"> <img alt="Entry component" src="../../images/entry2.png" /> </p> 
 
<p class="figure">Figure: Entry hierarchy</p> 
<p align="center"> <img alt="Entry hierarchy" src="../../images/entry_tree.png" /> </p> 
 
<p>The entry component is a box where the user can enter text. It supports the following features:</p>
  <ul>
   <li>text wrapping</li>
   <li>multiline</li>
   <li>scrolling</li>
   <li>formatted markup text</li>
   <li>password mode</li>
   <li>filtering text</li>
   <li>read/write from a file</li>
   <li>theme style overrides</li>
  </ul>
   
<h3>Adding an Entry Component</h3>

<p>The entry component is created with the <span style="font-family: Courier New,Courier,monospace">elm_entry_add()</span> function, and the text inside the entry can be set with <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_set()</span>.</p>

<pre class="prettyprint">
Evas_Object *entry, *parent;

entry = elm_entry_add(parent);
elm_entry_entry_set(entry, &quot;A short text.&quot;);
</pre>

<h3>Using the Text Editor</h3>

<p>You can append text to the end of existing content.</p>

<pre class="prettyprint">
elm_entry_entry_append(entry, &quot;END&quot;);
</pre>

<p>You can also insert text at the current cursor position.</p>

<pre class="prettyprint">
elm_entry_entry_insert(entry, &quot;CURSOR&quot;);
Eina_Bool Empty = elm_entry_is_empty(entry);
</pre>

<p>Call <span style="font-family: Courier New,Courier,monospace">elm_entry_is_empty()</span> to see whether the entry is empty. Here, the boolean variable <span style="font-family: Courier New,Courier,monospace">Empty</span> returns <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>.</p>

<p>By default, the user can enter text in the entry component when it is in focus. It is possible to prevent the user from editing text if needed.</p>

<pre class="prettyprint">
elm_entry_editable_set(entry, EINA_FALSE);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">It is still possible to use the previous functions to modify the text of a non-editable entry.</td> 
    </tr> 
   </tbody> 
  </table>  
 
<h3>Setting the Password Mode</h3>

<p>When dealing with password content, the password mode activates to hide what the user is typing. In this mode, the display of any text is replaced by asterisks (*), and the entry is single line (there is no line wrap).</p>

<pre class="prettyprint">
elm_entry_password_set(entry, EINA_TRUE);
</pre>

<h3>Entry Line Modes And Wrapping</h3>

<p>The entry component has two line modes:</p>
  <ul>
   <li>single line mode</li>
   <li>multiline mode</li>
  </ul>

<p>First, set the entry in single line mode.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_TRUE);
</pre>

<p>In this mode, the text does not wrap when reaching the edge, but the entry grows horizontally instead. Pressing the Enter key in this mode generates an <span style="font-family: Courier New,Courier,monospace">activate</span> event instead of adding a new line.</p>

<p>When the entry is set to multiline mode (single line off), the text wraps at the end of the entry and pressing Enter creates a new line.</p>

<pre class="prettyprint">
elm_entry_single_line_set(entry, EINA_FALSE);
elm_entry_line_wrap_set(entry, ELM_WRAP_WORD);
</pre>

<p>In multiline entries, <span style="font-family: Courier New,Courier,monospace">elm_entry_line_wrap_set()</span> provides a way to cut the text implicitly into a new line when it reaches the far edge of the UI component. The following wrap modes are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_NONE</span>: No wrap</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_CHAR</span>: Wrap between characters</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_WORD</span>: Wrap in allowed wrapping points (as defined in the unicode standard)</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_WRAP_MIXED</span>: Word wrap, and if that fails, char wrap</li>
  </ul>

<h3>Selecting Text</h3>

<p>Text selections can be made with different functions:</p>
<ul>
<li>To select all the content of the entry component:
<pre class="prettyprint">
elm_entry_select_all(entry);
</pre>
</li>

<li>To deselect the current selection:
<pre class="prettyprint">
elm_entry_select_none(entry);
</pre>
</li>

<li>To select part of the text, use <span style="font-family: Courier New,Courier,monospace">elm_entry_select_region_set()</span>. The following code selects the first twenty characters of the entry content.
<pre class="prettyprint">
elm_entry_select_region_set(entry, 0, 20);
</pre>
</li>

<li>To retrieve the currently selected text in an entry:
<pre class="prettyprint">
const char *selection;

selection = elm_entry_selection_get(entry);
</pre>
</li>
</ul>

<p>If the entry text is empty, <span style="font-family: Courier New,Courier,monospace">elm_entry_selection_get()</span> returns <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>You can copy or cut the selection to the clipboard.</p>
<pre class="prettyprint">
elm_entry_selection_cut(entry);
</pre>

<p>The selection can be pasted in the same or a different entry.</p>
<pre class="prettyprint">
elm_entry_selection_paste(entry);
</pre>

<h3>Controlling the Cursor</h3>

<p>The cursor represents the current position in the entry, where the next action, for example, text insertion or deletion, is done. Usually, the cursor is represented as a blinking character, but its appearance depends on the theme configuration. The cursor position can be modified by using several functions.</p>
<ul>
<li>To move the cursor to the beginning of the entry:
<pre class="prettyprint">
elm_entry_cursor_begin_set(entry);
</pre>
</li>

<li>To move the cursor to the end of the entry:
<pre class="prettyprint">
elm_entry_cursor_end_set(entry);
</pre>
</li>

<li>To move the cursor one line down or up:
<pre class="prettyprint">
elm_entry_cursor_down(entry);
elm_entry_cursor_up(entry);
</pre>
</li>
<li>To move the cursor one character to the left or right:
<pre class="prettyprint">
elm_entry_cursor_prev(entry);
elm_entry_cursor_next(entry);
</pre>
</li>

<li>To set the cursor at a specific position (15th character, for example):
<pre class="prettyprint">
elm_entry_cursor_pos_set(entry, 15);
</pre>
</li>
</ul>

<p>It is possible to start a selection at the current cursor position, move five characters to the right and end the selection.</p>

<pre class="prettyprint">
elm_entry_cursor_selection_begin(entry);

for (i = 0; i &lt; 5; i++)
{
&nbsp;&nbsp;&nbsp;elm_entry_cursor_next(entry);
}

elm_entry_cursor_selection_end(entry);
</pre>

<h3>Formatting Text</h3>

<p>Text within an entry can be formatted by using markups tags that are defined in the theme. The following markups are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;br&gt;</span>: Inserts a line break.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;ps&gt;</span>: Inserts a paragraph separator. This is preferred over line breaks.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;tab&gt;</span>: Inserts a tab.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;em&gt;...&lt;/em&gt;</span>: Emphasis. Sets the oblique style for the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;b&gt;...&lt;/b&gt;</span>: Sets the bold style for the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;link&gt;...&lt;/link&gt;</span>: Underlines the enclosed text.</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;hilight&gt;...&lt;/hilight&gt;</span>: Highlights the enclosed text.</li>
  </ul>

<h3>Using Special Markups</h3>

<p>Special markups can be added within the text of the entry:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;a href = ..&gt;...&lt;/a&gt;</span>: Anchors</li>
   <li><span style="font-family: Courier New,Courier,monospace">&lt;item size = .. vsize = .. href = ..&gt;...&lt;/item&gt;</span>: Items</li>
  </ul>

<p>The anchors generate an <span style="font-family: Courier New,Courier,monospace">anchor,clicked</span> signal when the user clicks on them. The <span style="font-family: Courier New,Courier,monospace">href</span> attribute is used to identify the anchor. It also reacts to the <span style="font-family: Courier New,Courier,monospace">anchor,in</span> (mouse in), <span style="font-family: Courier New,Courier,monospace">anchor,out</span> (mouse out), <span style="font-family: Courier New,Courier,monospace">anchor,down</span> (mouse down), and <span style="font-family: Courier New,Courier,monospace">anchor,up</span> (mouse up) events.</p>

<p>The item markup provides a way to insert any <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> in the text. The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> name has to be specified in the <span style="font-family: Courier New,Courier,monospace">href</span> attribute.</p>

<h3>Overriding Style</h3>

<p>To tweak the style of the text within the entry component, it is possible to override parts of the theme style to the textblock object by using <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_push()</span>. This function pushes a new style on top of the user style stack that overrides the current style. Remove the style in the top of user style stack with <span style="font-family: Courier New,Courier,monospace">elm_entry_text_style_user_pop()</span>.</p>

<h3>Filtering Text</h3>

<p>Text within an entry can be filtered in size. The following example sets the maximum number of characters allowed in the entry to 8.</p>

<pre class="prettyprint">
static Elm_Entry_Filter_Limit_Size limit_size = 
{
&nbsp;&nbsp;&nbsp;.max_char_count = 8,
&nbsp;&nbsp;&nbsp;.max_byte_count = 0
};

// Append a new callback to the list, this function is called each time
// a text is inserted in the entry. Pass the limit_size struct previously
// created to set the maximum number of characters allowed to 8
 
elm_entry_markup_filter_append(entry, elm_entry_filter_limit_size, limit_size);
</pre>

<p>The content can be filtered by passing an <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Filter_Accept_Set</span> structure. This structure contains the accepted characters and rejected characters. The following example shows how to reject the &#39;+&#39;, &#39;-&#39;, &#39;*&#39;, and &#39;/&#39; characters.</p>
<pre class="prettyprint">
static Elm_Entry_Filter_Accept_Set accept_set = 
{
&nbsp;&nbsp;&nbsp;.accepted = NULL,
&nbsp;&nbsp;&nbsp;.rejected = &quot;+*-/&quot;
};

elm_entry_markup_filter_append(entry, elm_entry_filter_accept_set, accept_set);
</pre>

<h3>Loading and Saving Files</h3>

<p>The entry content can be saved to a file (<span style="font-family: Courier New,Courier,monospace">/tmp/test.txt</span>, for example).</p>

<pre class="prettyprint">
// Set the file in which the entry text is saved. This function
// implicitly loads the existing file content 
elm_entry_file_set(entry, &quot;/tmp/test.txt&quot;, ELM_TEXT_FORMAT_MARKUP_UTF8);
</pre>

<p>Autosave is activated by default and changes are written back to the file after a short delay. This feature can be deactivated and you can manually save the content when needed.</p>

<pre class="prettyprint">
// Disable autosaving 
elm_entry_autosave_set(entry, EINA_FALSE);

// Trigger saving when needed 
elm_entry_file_save(entry);
</pre>

<h3>Using Entry Theme Content</h3>

<p>Two content parts of the default theme are available: <span style="font-family: Courier New,Courier,monospace">icon</span> and <span style="font-family: Courier New,Courier,monospace">end</span>. The following example shows how to set an icon in the <span style="font-family: Courier New,Courier,monospace">end</span> content part.</p>
<pre class="prettyprint">
Evas_Object *icon;

ic = elm_icon_add(entry);
elm_image_file_set(ic, &quot;icon.png&quot;, NULL);
elm_object_part_content_set(entry, &quot;end&quot;, icon);
</pre>

<h3>Using Entry Theme Texts</h3>

<p>The default theme allows the use of the following text parts:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">default</span> - text of the entry</li>
   <li><span style="font-family: Courier New,Courier,monospace">guide</span> - placeholder of the entry</li>
  </ul>

<p>The following example shows how to set the placeholder text of the entry to <span style="font-family: Courier New,Courier,monospace">Hello World</span>.</p>

<pre class="prettyprint">
elm_object_part_text_set(entry, &quot;Hello World&quot;);
</pre>

<h3>Using Entry Callbacks</h3>

<p>The entry component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">aborted</span>: The escape key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The enter key is pressed on a single line entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,clicked</span>: An anchor is clicked. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,down</span>: Mouse button is pressed on an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,hover,opened</span>: The anchor is clicked. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,in</span>: Mouse cursor is moved into an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,out</span>: Mouse cursor is moved out of an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,up</span>: Mouse button is unpressed on an anchor. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Entry_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed</span>: The text within the entry is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed,user</span>: The text within the entry is changed because of user interaction. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Edje_Entry_Change_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The entry is clicked (mouse press and release).</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The entry is double clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,triple</span>: The entry is triple clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed</span>: The cursor position is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">cursor,changed,manual</span>: The cursor position is changed manually.</li>
   <li><span style="font-family: Courier New,Courier,monospace">focused</span>: The entry receives focus. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Focus_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">unfocused</span>: The entry loses focus.</li>
   <li><span style="font-family: Courier New,Courier,monospace">language,changed</span>: Program language is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: A mouse button is pressed and held for a couple of seconds.</li>
   <li><span style="font-family: Courier New,Courier,monospace">maxlength,reached</span>: A maximum length is reached.</li>
   <li><span style="font-family: Courier New,Courier,monospace">preedit,changed</span>: The preedit string is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">press</span>: A mouse button is pressed on the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">redo,request</span>: The request is redone.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,changed</span>: The current selection is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cleared</span>: The current selection is cleared.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,copy</span>: A copy of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,cut</span>: A cut of the selected text into the clipboard is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,paste</span>: A paste of the clipboard contents is requested.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selection,start</span>: A selection is begun and no previous selection exists.</li>
   <li><span style="font-family: Courier New,Courier,monospace">text,set,done</span>: The whole text is set to the entry.</li>
   <li><span style="font-family: Courier New,Courier,monospace">theme,changed</span>: The theme is changed.</li>
   <li><span style="font-family: Courier New,Courier,monospace">undo,request</span>: The request is undone.</li>
  </ul>

<p>For signals, where <span style="font-family: Courier New,Courier,monospace">event_info</span> has not been explicitly described, it is set to <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>The following example shows how to register a callback to the <span style="font-family: Courier New,Courier,monospace">focused</span> signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, focused_cb, data);
}

// Callback function for the &quot;focused&quot; signal
// This callback is called when the entry receive the focus
void focused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Entry focused\n&quot;);
} 
</pre>
  

				<h2 id="flip" name="flip">Flip</h2>
  
<p class="figure">Figure: Flip hierarchy</p> 
<p align="center"> <img alt="Flip hierarchy" src="../../images/flip_tree.png" /> </p> 
 
<p>The flip component can hold two <span style="font-family: Courier New,Courier,monospace">Evas_Objects</span> and allows the user flip between them using several pre-defined animations.</p>

<h3>Adding a Flip Component</h3>

<p>The following example shows how to create a flip component.</p>

<pre class="prettyprint">
Evas_Object *flip, *parent, *content1, *content2;
flip = elm_flip_add(parent);
</pre>

<p>You can add content to the flip component. <span style="font-family: Courier New,Courier,monospace">content1</span> is set to the <span style="font-family: Courier New,Courier,monospace">front</span> content and <span style="font-family: Courier New,Courier,monospace">content2</span> is set to the <span style="font-family: Courier New,Courier,monospace">back</span> mode.</p>

<pre class="prettyprint">
elm_object_part_content_set(flip, &quot;front&quot;, content1);
elm_object_part_content_set(flip, &quot;back&quot;, content2);
</pre>

<h3>Configuring Flip Animation</h3>

<p>Now you can run an flip animation.</p>
<pre class="prettyprint">
elm_flip_go(flip, ELM_FLIP_CUBE_UP);
</pre>

<p>This animation flips up the <span style="font-family: Courier New,Courier,monospace">front</span> content object as if it was on a side of a cube, letting the down facing side of the cube appear with the <span style="font-family: Courier New,Courier,monospace">back</span> content object. Several animations are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_ROTATE_X_CENTER_AXIS</span>: Rotate the content around a horizontal axis.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_ROTATE_Y_CENTER_AXIS</span>: Rotate the content around a vertical axis.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_ROTATE_XZ_CENTER_AXIS</span>: Rotate the content around a diagonal axis.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_ROTATE_YZ_CENTER_AXIS</span>: Rotate the content around a diagonal axis.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_CUBE_LEFT</span>: Rotate the content left as if it was on a side of a cube.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_CUBE_RIGHT</span>: Rotate the content right as if it was on a side of a cube.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_CUBE_UP</span>: Rotate the content up as if it was on a side of a cube.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_CUBE_DOWN</span>: Rotate the content down as if it was on a side of a cube.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_PAGE_LEFT</span>: Move the content to the left as if the flip was a book.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_PAGE_RIGHT</span>: Move the content to the right as if the flip was a book.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_PAGE_UP</span>: Move the content up as if the flip was a book.</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_PAGE_DOWN</span>: Move the content down as if the flip was a book.</li>
  </ul>

<h3>Interacting With the User</h3>

<p>By default, the user cannot interact with the flip. You can set the interaction to be possible, but you have to choose which animation appears on the interaction (rotation has been selected in the following example).</p>

<pre class="prettyprint">
elm_flip_interaction_set(flip, ELM_FLIP_INTERACTION_ROTATE);
</pre>

<p>The available modes of interaction are</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_INTERACTION_NONE</span>: No interaction is allowed</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_INTERACTION_ROTATE</span>: Interaction causes a rotating animation</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_INTERACTION_CUBE</span>: Interaction causes a cube animation</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_FLIP_INTERACTION_PAGE</span>: Interaction causes a page animation</li>
  </ul>

<p>You must also choose which interaction directions are enabled. Only right and left are enabled in the following example.</p>

<pre class="prettyprint">
elm_flip_interaction_direction_enabled_set(flip, ELM_FLIP_DIRECTION_LEFT, EINA_TRUE);
elm_flip_interaction_direction_enabled_set(flip, ELM_FLIP_DIRECTION_RIGHT, EINA_TRUE);
</pre>

<p>You can also set the amount of the flip that is sensitive to user interaction. In the following example, it is set to the entire flip (1) to make the flip easy to interact with.</p>

<pre class="prettyprint">
elm_flip_interaction_direction_hitsize_set(flip, ELM_FLIP_DIRECTION_LEFT, 1);
elm_flip_interaction_direction_hitsize_set(flip, ELM_FLIP_DIRECTION_RIGHT, 1);
</pre>

<h3>Using the Flip Callbacks</h3>

<p>Two signals are emitted by the flip: one when an animation starts and one when it ends. For these signals, <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<pre class="prettyprint">
&quot;animate,begin&quot; - A flip animation is started
&quot;animate,done&quot; - A flip animation is finished
</pre>

<p>You can register a callback on the &quot;animation,begin&quot; signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;animate,begin&quot;, anim_start_cb, data);
}

// Callback function for the &quot;animate,begin&quot; signal
// This callback is called when the flip animation starts
void anim_start_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Animation starts\n&quot;);
}</pre>

				<h2 id="gengrid" name="gengrid">Gengrid</h2>
  
<p class="figure">Figure: Gengrid component</p> 
<p align="center"> <img alt="Gengrid component" src="../../images/gengrid.png" /> </p> 
 
<p class="figure">Figure: Gengrid hierarchy</p> 
<p align="center"> <img alt="Gengrid hierarchy" src="../../images/gengrid_tree.png" /> </p> 
 
<p>Gengrid component is based on the same idea as the genlist. It aims at displaying objects on a grid layout and rendering only the visible ones. As for the genlist, callbacks are called at item creation or deletion.</p>

<p>This UI component inherits from the layout component and implements the scroller interface. Because of this, the scroller and layout functions can be used with this UI component.</p>

<p>A gengrid can display its items using a horizontal or vertical layout. In the first layout, the items are displayed in columns from top to bottom, starting a new column when the space for the current column is filled. In the second one, items are set in rows from left to right.</p>

<h3>Adding a Gengrid Component</h3>

<p>You can add a gengrid component with the following code.</p>
<pre class="prettyprint">
Evas_Object *gengrid, *parent;
gengrid = elm_gengrid_add(parent);
</pre>

<h3>Gengrid Items</h3>

<p>A gengrid item is composed of 0 or more texts, 0 or more contents and 0 or more boolean states. The number of the text and content depends on the theme used for gengrid items. In the default Tizen gengrid item theme, items can have two content parts that can be set with the <span style="font-family: Courier New,Courier,monospace">elm.swallow.icon</span> and <span style="font-family: Courier New,Courier,monospace">elm.swallow.end</span> part names.</p>

<h3>Creating and Deleting Items</h3>

<p>As with genlists, the items are allocated and deleted on the go, while the user is scrolling the gengrid. The following example shows how to declare a <span style="font-family: Courier New,Courier,monospace">Elm_Gengrid_Item_Class</span> structure to inform the gengrid how to manage items.</p>
<pre class="prettyprint">
static Elm_Gengrid_Item_Class *gic = elm_gengrid_item_class_new();
gic-&gt;item_style = &quot;default&quot;;
gic-&gt;func.text_get = _grid_label_get;
gic-&gt;func.content_get = _grid_content_get;
gic-&gt;func.state_get = _grid_state_get;
gic-&gt;func.del = _grid_del;
</pre>

<p>The parameters of this structure are not be detailed here, because they are very similar to that of the genlist. Please refer to the genlist component page for more detailed information.</p>

<h3>Managing Items</h3>

<p>As with genlists, items can be added with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_append()</span>, <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_prepend()</span>, <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_insert_before()</span>, and <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_insert_after()</span> functions. With the gengrid, there is no need to pass the <span style="font-family: Courier New,Courier,monospace">type</span> parameters. They can be cleared with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_clear()</span> function.</p>

<p>You can set the multiselection mode on.</p>
<pre class="prettyprint">
elm_gengrid_multi_select_set(gengrid, EINA_TRUE);
</pre>

<p>When the multiselection mode is on, the selected items are retrieved with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_selected_items_get()</span> function. The function returns a list of all the selected items.</p>

<p>When the content of an item changes, you can call <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_update()</span> to ask the gengrid to update this item&#39;s content.</p>

<p>It is also possible to select or disable some items manually with the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_selected_set()</span> and <span style="font-family: Courier New,Courier,monospace">elm_object_item_disabled_set()</span> functions.</p>

<h3>Using Gengrid Callbacks</h3>

<p>The gengrid component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The user has double-clicked or pressed (enter | return | spacebar) on an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is the gengrid item that is activated.</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user has double-clicked an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is the gengrid item that is double-clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The item is pressed for a certain amount of time. By default it is one second.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selected</span>: The user has selected an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is the gengrid item that is selected.</li>
   <li><span style="font-family: Courier New,Courier,monospace">unselected</span>: The user has unselected an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is the gengrid item that is unselected.</li>
   <li><span style="font-family: Courier New,Courier,monospace">realized</span>: The item in the gengrid has its implementing Evas object instantiated, de facto. <span style="font-family: Courier New,Courier,monospace">event_info</span> is the gengrid item that is created. The object can be deleted at any time, so it is strongly advisable not to use the object pointer returned from <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_object_get()</span>, because it can point to freed objects.</li>
   <li><span style="font-family: Courier New,Courier,monospace">unrealized</span>: The implementing Evas object for this item is deleted. <span style="font-family: Courier New,Courier,monospace">event_info</span> is the gengrid item that is deleted.</li>
   <li><span style="font-family: Courier New,Courier,monospace">changed</span>: An item is added, removed, resized or moved and the gengrid is resized or has <span style="font-family: Courier New,Courier,monospace">horizontal</span> property changes.</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,start</span>: Scrolling animation starts.</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span>: Scrolling animation stops.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,up</span>: The item in the gengrid is dragged (not scrolled) up.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,down</span>: The item in the gengrid has dragged (not scrolled) down.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,left</span>: The item in the gengrid is dragged (not scrolled) left.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,right</span>: The item in the gengrid is dragged (not scrolled) right.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag,stop</span>: The item in the gengrid stops being dragged.</li>
   <li><span style="font-family: Courier New,Courier,monospace">drag</span>: The item in the gengrid is dragged.</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll</span>: The content is scrolled (moved).</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,start</span>: Dragging the content starts.</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,stop</span>: Dragging the content stops.</li>
   <li><span style="font-family: Courier New,Courier,monospace">edge,top</span>: The gengrid is scrolled to the top edge.</li>
   <li><span style="font-family: Courier New,Courier,monospace">edge,bottom</span>: The gengrid is scrolled to the bottom edge.</li>
   <li><span style="font-family: Courier New,Courier,monospace">edge,left</span>: The gengrid is scrolled to the left edge.</li>
   <li><span style="font-family: Courier New,Courier,monospace">edge,right</span>: The gengrid is scrolled to the right edge.</li>
  </ul>

				<h2 id="genlist" name="genlist">Genlist</h2>
  
<p class="figure">Figure: Genlist component</p> 
<p align="center"> <img alt="Genlist component" src="../../images/genlist.png" /> </p> 

<p class="figure">Figure: Genlist hierarchy</p> 
<p align="center"> <img alt="Genlist hierarchy" src="../../images/genlist_htree.png" /> </p> 

<p>Genlist is a UI component that displays a scrollable list of items. It allows a lot of entries while being fast and has a low memory footprint, as only the visible items are allocated in the memory.</p>

<p>For more information, see <a href="genlist_tutorial_mn.htm">Creating Mobile Genlists</a>.</p>

<h3>Genlist Item Style</h3>

<p>An item can have 0 or more texts, 0 or more contents, and 0 or more boolean states. This is defined in the Edje item theme style. Genlist looks for data items named respectively <span style="font-family: Courier New,Courier,monospace">labels</span>, <span style="font-family: Courier New,Courier,monospace">contents</span>, and <span style="font-family: Courier New,Courier,monospace">states</span> in the Edje file. The <span style="font-family: Courier New,Courier,monospace">default</span> item style provides one text part (<span style="font-family: Courier New,Courier,monospace">elm.text</span>), two content parts (<span style="font-family: Courier New,Courier,monospace">elm.swallow.icon</span> and <span style="font-family: Courier New,Courier,monospace">elm.swallow.end</span>) and no state parts.</p>

<p>The following item styles are available:</p>
  <ul>
	<li><span style="font-family: Courier New,Courier,monospace">default</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">full</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">one_icon</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">end_icon</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">group_index</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">double_label</span></li>
  </ul>

<p>Here are some examples of the item styles.</p>

<p class="figure">Figure: Default item style</p> 
<p align="center"> <img alt="Default item style" src="../../images/gl-default.png" /> </p> 

<p class="figure">Figure: end_icon item style</p> 
<p align="center"> <img alt="end_icon item style" src="../../images/gl-end-icon.png" /> </p> 

<p class="figure">Figure: double_label item style</p> 
<p align="center"> <img alt="double_label item style" src="../../images/gl-double-label.png" /> </p> 

<p>For more information on creating a new genlist item style, see <a href="component_custom_n.htm">Customizing Components</a>.</p>

<h3>Adding a Genlist Component</h3>

<p>A genlist component is added with the <span style="font-family: Courier New,Courier,monospace">elm_genlist_add()</span> function.</p>
<pre class="prettyprint">
Evas_Object *genlist, *parent;
genlist = elm_genlist_add(parent);
</pre>

<h3>Creating And Deleting Items</h3>

<p>To save up memory, genlist allocates and deletes items on the go, while the user is scrolling the list. To enable that, the user creates and fills a <span style="font-family: Courier New,Courier,monospace">Elm_Genlist_Item_Class</span> structure that informs the genlist component which callbacks to call when an item is created or deleted.</p>

<pre class="prettyprint">
Elm_Genlist_Item_Class *itc = elm_genlist_item_class_new();

itc-&gt;item_style = &quot;default&quot;;
itc-&gt;decorate_item_style = NULL;
itc-&gt;decorate_all_item_style = NULL;
itc-&gt;func.text_get = _item_label_get;
itc-&gt;func.content_get = _item_content_get;
itc-&gt;func.state_get = _item_state_get;
itc-&gt;func.del = _item_del;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">item_style</span>, <span style="font-family: Courier New,Courier,monospace">decorate_item_style</span>, and <span style="font-family: Courier New,Courier,monospace">decorate_all_item_style</span> attributes define the names of the item style, the decorate mode item style and the decorate all item style.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">func</span> structure contains pointers to functions that are called when an item is going to be created or deleted. All of them receive a data parameter that points to the same data passed to the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> and related item creation functions, and an <span style="font-family: Courier New,Courier,monospace">obj</span> parameter that points to the genlist object itself.</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">text_get</span>
   <p>This function receives a <span style="font-family: Courier New,Courier,monospace">PART</span> parameter that is the name string of one of the existing text parts in the Edje group implementing the item&#39;s theme. It has to return a string (duplicated with the <span style="font-family: Courier New,Courier,monospace">strdup()</span> function) corresponding to the <span style="font-family: Courier New,Courier,monospace">PART</span> parameter. The caller is in charge of freeing the string when done.</p></li>

   <li><span style="font-family: Courier New,Courier,monospace">content_get</span>
   <p>The <span style="font-family: Courier New,Courier,monospace">PART</span> parameter is the name string of one of the existing swallow parts in the Edje group. When no content is desired, it must return <span style="font-family: Courier New,Courier,monospace">NULL</span>, or otherwise, a valid object handle. The object is deleted by the genlist on its deletion or when the item is <span style="font-family: Courier New,Courier,monospace">unrealized</span>.</p></li>

   <li><span style="font-family: Courier New,Courier,monospace">state_get</span>
   <p>The <span style="font-family: Courier New,Courier,monospace">PART</span> parameter is the name string of one of the state parts in the Edje group implementing the item&#39;s theme. It returns <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span> for false/off or <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> for true/on. The default is false. Genlists emit a signal to the <span style="font-family: Courier New,Courier,monospace">PART</span> parameter&#39;s theming Edje object with <span style="font-family: Courier New,Courier,monospace">elm,state,xxx,active</span> as <span style="font-family: Courier New,Courier,monospace">emission</span> and <span style="font-family: Courier New,Courier,monospace">elm</span> as <span style="font-family: Courier New,Courier,monospace">source</span> argument, when the state is true. xxx is the name of the (state) part.</p></li>

   <li><span style="font-family: Courier New,Courier,monospace">del</span>
   <p>This function is called when the genlist item is deleted. It deletes any data that is allocated at the item creation.</p></li>
</ul>

<h3>Managing Items</h3>

<p>To add an item, several functions can be used. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> adds an item to the end of the list, or if there is a parent list, to the end of all the child items of the parent list. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prepend()</span> is otherwise the same but adds to the beginning of the list or children lists. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_insert_before()</span> inserts an item before the indicated item and <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_insert_after()</span> inserts an item after the indicated item.</p>

<p>The previous functions take a <span style="font-family: Courier New,Courier,monospace">type</span> parameter that can be one of the following.</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_GENLIST_ITEM_NONE</span></li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_GENLIST_ITEM_TREE</span></li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_GENLIST_ITEM_GROUP</span></li>
  </ul>

<p>If <span style="font-family: Courier New,Courier,monospace">ELM_GENLIST_ITEM_TREE</span> is set, this item is displayed as being able to expand and have child items. If <span style="font-family: Courier New,Courier,monospace">ELM_GENLIST_ITEM_GROUP</span> is set, this item is a group index item that is displayed at the top until the next group appears.</p>

<p class="figure">Figure: Genlist tree</p> 
<p align="center"> <img alt="Genlist tree" src="../../images/genlist_tree.png" /> </p> 

<p>The application clears the list with <span style="font-family: Courier New,Courier,monospace">elm_genlist_clear()</span>, which deletes all the items in the list. <span style="font-family: Courier New,Courier,monospace">elm_object_item_del()</span> deletes a specific item. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_subitems_clear()</span> clears all items that are children of the indicated parent item.</p>

<p>To help inspect the list items, move to the item at the top of the list with <span style="font-family: Courier New,Courier,monospace">elm_genlist_first_item_get()</span>, which returns the item pointer. <span style="font-family: Courier New,Courier,monospace">elm_genlist_last_item_get()</span> moves to the item at the end of the list. <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_next_get()</span> and <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prev_get()</span> move to the next and previous items relative to the indicated item. Using these calls you can go through the entire item list or tree.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">As a tree, the items are flattened on the list, so <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_parent_get()</span> gives you the name of the parent item (even to skip them if needed).</td> 
    </tr> 
   </tbody> 
  </table>  

<p><span style="font-family: Courier New,Courier,monospace">elm_genlist_item_show()</span> scrolls the scroller to show the desired item as visible. </p>
<p><span style="font-family: Courier New,Courier,monospace">elm_object_item_data_get()</span> returns the data pointer set by the item creation functions.</p>

<p>If an item changes (state, boolean, text or content change), use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_update()</span> for the genlist to update the item. Genlist re-realizes the item and calls the functions in the <span style="font-family: Courier New,Courier,monospace">_Elm_Genlist_Item_Class</span> for it.</p>

<h3>Selection</h3>

<p>Items are manually selected or deselected with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_selected_set()</span> or disabled with <span style="font-family: Courier New,Courier,monospace">elm_object_item_disabled_set()</span>. In case there is a tree or a group item, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> function is used to expand or contract the item.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Calling this function does not show or hide any child of an item (if it is a parent). You must manually delete and create them on the callbacks of the <span style="font-family: Courier New,Courier,monospace">expanded</span> or <span style="font-family: Courier New,Courier,monospace">contracted</span> signals.</td> 
    </tr> 
   </tbody> 
  </table>  

<p>By default, the genlist is in single-selection mode: only one item can be selected at a time. You can use <span style="font-family: Courier New,Courier,monospace">elm_genlist_multi_select_set()</span> to select multiple items. In the single-selection mode, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_selected_item_get()</span> function can be called to retrieve the selected item. If several items are selected, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_selected_items_get()</span> returns a list of the current selected items.</p>

<p>In the following figure, there is a genlist in multi-selection mode with two items selected (#4 and #5) and one item disabled (#2).</p>

<p class="figure">Figure: Genlist component</p> 
<p align="center"> <img alt="Genlist component" src="../../images/genlist_multi.png"/> </p> 

<h3>Using Genlist Callbacks</h3>

<p>The genlist component emits the following signals:</p>
   <ul> 
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The user has double-clicked or pressed (enter | return | spacebar) on an item. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user has double-clicked an item. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">selected</span>: The user selects an item. event_info in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">unselected</span>: The user unselects an item. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">expanded</span>: The item is to be expanded with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span>. This callback fills in the child items. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">contracted</span>: The item is to be contracted with <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span>. This callback deletes the child items. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">expand,request</span>: The user wants to expand a tree branch item. The callback decides if the item can expand (if it has any children) and calls <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> to set the state. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">contract,request</span>: The user wants to contract a tree branch item. The callback decides if the item can contract (if it has any children) and calls <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_expanded_set()</span> to set the state. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">realized</span>: The item is created as a real evas object. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span>, that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">unrealized</span>: An item is going to be unrealized. Content objects provided are deleted and the item object is deleted or put into a floating cache. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,up</span>: The item in the list is dragged (not scrolled) up. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,down</span>: The item in the list is dragged (not scrolled) down. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,left</span>: The item in the list is dragged (not scrolled) left. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,start,right</span>: The item in the list is dragged (not scrolled) right. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,stop</span>: The item in the list has stopped being dragged. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag</span>: The item in the list is being dragged. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The item is pressed for a certain amount of time. The default specified time is one second. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,start</span>: The scrolling animation is started. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span>: The scrolling animation is stopped. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,start</span>: Dragging the content is started. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,stop</span>: Dragging the content is stopped. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,top</span>: The genlist is scrolled to the top edge. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,bottom</span>: The genlist is scrolled to the bottom edge. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,left</span>: The genlist is scrolled to the left edge. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,right</span>: The genlist is scrolled to the right edge. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">multi,swipe,left</span>: The genlist is multi-touch swiped left. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">multi,swipe,right</span>: The genlist is multi-touch swiped right. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">multi,swipe,up</span>: The genlist is multi-touch swiped up. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">multi,swipe,down</span>: The genlist is multi-touch swiped down. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">multi,pinch,out</span>: The genlist is multi-touch pinched out. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">multi,pinch,in</span>: The genlist is multi-touch pinched in. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">swipe</span>: The genlist is swiped. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">moved</span>: A genlist item is moved in the reorder mode. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">moved,after</span>: A genlist item is moved after another item in the reorder mode. To access the relative previous item, use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_prev_get()</span>. This signal is called along with the <span style="font-family: Courier New,Courier,monospace">moved</span> signal. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">moved,before</span>: A genlist item is moved before another item in the reorder mode. To access the relative previous item, use <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_next_get()</span>. This signal is called along with the <span style="font-family: Courier New,Courier,monospace">moved</span> signal. <span style="font-family: Courier New,Courier,monospace">event_info</span> in the callback function points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span> that contains the activated item.</li>
   <li><span style="font-family: Courier New,Courier,monospace">language,changed</span> The program&#39;s language is changed. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">tree,effect,finished</span>: A genlist tree effect is finished. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
  </ul>

		
				<h2 id="glview" name="glview">GLView</h2>

      <p class="figure">Figure: GLView gears example</p> 
  <p align="center"><img alt="GLView gears example" src="../../images/glview.png" /></p> 
  
      <p class="figure">Figure: GLView hierarchy</p> 
  <p align="center"><img alt="GLView hierarchy" src="../../images/glview_tree.png" /></p>


<p> The GLView component renders OpenGL in an elementary object, which hides Evas GL complexity. For more information, see <a href="../../../../org.tizen.guides/html/native/graphics/opengles_n.htm">OpenGL ES</a>.</p>

<h3>Adding a GLView Component</h3>

<p>Create a GLView component with the <span style="font-family: Courier New,Courier,monospace">elm_glview_add()</span> function.</p>
<pre class="prettyprint">
Evas_Object *glview, *parent;

glview = elm_glview_add(parent);
</pre>

<p>In this example, the size of the GLView is set to 200x200 pixels.</p>
<pre class="prettyprint">
elm_glview_size_set(glview, 200, 200);
</pre>

<h3>Using the GLView API</h3>

<p>You can configure the GLView rendering mode by activating the following rendering modes:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_ALPHA</span>: Alpha channel rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_DEPTH</span>: Depth buffer rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_STENCIL</span>: Stencil buffer rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_DIRECT</span>: Direct rendering mode</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_CLIENT_SIDE_ROTATION</span>: The client handles the GL view rotation if direct rendering is enabled</li>
</ul>

<p>In the following example, the alpha channel and depth buffer rendering mode are enabled.</p>
<pre class="prettyprint">
elm_glview_mode_set(glview, ELM_GLVIEW_ALPHA | ELM_GLVIEW_DEPTH);
</pre>

<p>The following example shows how to decide what to do with the GL surface when the GLView component is resized.</p>
<pre class="prettyprint">
elm_glview_resize_policy_set(glview, ELM_GLVIEW_RESIZE_POLICY_RECREATE);
</pre>

<p>The GL surface is destroyed and recreated to the new size (default function). The resize policy can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RESIZE_POLICY_SCALE</span>. In that case, only the image object is scaled, not the underlying GL surface.</p>

<p>The following example shows how to set the GLView rendering policy.</p>
<pre class="prettyprint">
elm_glview_render_policy_set(glview, ELM_GLVIEW_RENDER_POLICY_ALWAYS);
</pre>

<p>The GLView object is always redrawn during the rendering loop. It can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_GLVIEW_RENDER_POLICY_ON_DEMAND</span> (default function), where the GLView component is redrawn only when it is visible.</p>

<p>Register the callbacks:</p>

<pre class="prettyprint">elm_glview_init_func_set(glview, _init_gl_cb);
elm_glview_del_func_set(glview, _del_gl_cb);
elm_glview_resize_func_set(glview, _resize_gl_cb);
elm_glview_render_func_set(glview, _draw_gl_cb);
</pre>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">elm_glview_init_func_set()</span> registers an init callback that is called at the GLView object creation.</li>
<li><span style="font-family: Courier New,Courier,monospace">elm_glview_del_func_set()</span> registers a del function that is called when the GLView object is deleted.</li>
<li><span style="font-family: Courier New,Courier,monospace">elm_glview_resize_func_set()</span> registers the resize function that is called during the rendering loop when the GLView object is resized.</li>
<li><span style="font-family: Courier New,Courier,monospace">elm_glview_render_func_set()</span> registers the render function that is called when the GLView object must be redrawn.</li>
</ul>

<h3>Using GLView Callbacks</h3>

<p>The GLView component emits the following signals:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">focused</span>: The Glview component is focused. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter points at an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Focus_Info</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">unfocused</span>: The GLView object is unfocused.</li>
</ul>

<p>To register a callback:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(glview, &quot;focused&quot;, focused_cb, data);
}

// Callback function for the &quot;focused&quot; signal
// This callback is called when the GLView is focused
void focused_cb(void *data, Evas_Object *obj, void  *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Focus_Info *fi = event_info;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;GLView is focused\n&quot;);
}
</pre>

				<h2 id="icon" name="icon">Icon</h2>
  
<p class="figure">Figure: Icon component</p> 
<p align="center"> <img alt="Icon component" src="../../images/icon.png" /> </p> 
 
<p class="figure">Figure: Icon hierarchy</p> 
<p align="center"> <img alt="Icon hierarchy" src="../../images/icon_tree.png" /> </p> 
  
<p>The icon component inherits from the image component. It is used to display images in an icon context.</p>

<h3>Adding an Icon Component</h3>

<p>You can create an icon and set it as a freedesktop.org <span style="font-family: Courier New,Courier,monospace">Home</span> standard icon.</p>

<pre class="prettyprint">
Evas_Object *icon, *parent;
icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;Home&quot;);
</pre>

<h3>Changing Image File</h3>

<p>You can change the image by using an image in the filesystem (for example, <span style="font-family: Courier New,Courier,monospace">/tmp/Home.png</span>).</p>
<pre class="prettyprint">
elm_image_file_set(icon, &quot;/tmp/Home.png&quot;, NULL);
</pre>

<p>You can also use a group in an Edje file (for example, <span style="font-family: Courier New,Courier,monospace">/tmp/Home.edj</span>).</p>
<pre class="prettyprint">
elm_image_file_set(icon, &quot;/tmp/Home.edj&quot;, &quot;elm/icon/Home/default&quot;);
</pre>

<p>A thumbnail can be generated and cached for future use. For this, you need the Ethumb library support.</p>

<pre class="prettyprint">
elm_icon_thumb_set(icon, &quot;/tmp/Home.png&quot;, NULL);
</pre>

<p>This function sets the file in the icon and enables the use of a cached thumbnail if it already exists. Otherwise, it creates a new thumbnail and caches it for future use.</p>

<h3>Using Icon Callbacks</h3>

<p>The icon component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">thumb,done</span>: <span style="font-family: Courier New,Courier,monospace">elm_icon_thumb_set()</span> is completed with success.</li>
   <li><span style="font-family: Courier New,Courier,monospace">thumb,error</span>: <span style="font-family: Courier New,Courier,monospace">elm_icon_thumb_set()</span> fails.</li>
  </ul>

<p>In both cases, <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

		
				<h2 id="image" name="image">Image</h2>

<p class="figure">Figure: Image component</p> 
<p align="center"> <img alt="Image component" src="../../images/image.png" /> </p>   

<p class="figure">Figure: Image hierarchy</p> 
<p align="center"> <img alt="Image hierarchy" src="../../images/image_tree.png" /> </p>   

<p>The image component can load and display an image from a disk file or a memory region.</p>

<h3>Adding an Image Component</h3>

<p>This object is created with <span style="font-family: Courier New,Courier,monospace">elm_image_add()</span>.</p>

<pre class="prettyprint">
Evas_Object *image, *parent;
image = elm_image_add(parent);
</pre>

<h3>Configuring the Image Component</h3>

<p>Various properties of the image can be tuned. First, you can disable the elementary scaling so that the image does not scale but resizes on both directions.</p>
<pre class="prettyprint">
elm_image_no_scale_set(image, EINA_TRUE);
elm_image_resizable_set(image, EINA_TRUE, EINA_TRUE);
</pre>

<p>When scaling images, the smooth scaling algorithm can be used. It provides a better quality image but is slower than the default algorithm.</p>
<pre class="prettyprint">
elm_image_smooth_set(image, EINA_TRUE);
</pre>

<p>Preloading is used to load images without blocking the user interface. This preserves the reactivity of the user experience. The image is loaded in a thread. It can be disabled if desired.</p>
<pre class="prettyprint">
elm_image_preload_disabled_set(image, EINA_TRUE);
</pre>

<p>The image can be rotated or flipped. Here the image is rotated 180 degrees.</p>
<pre class="prettyprint">
elm_image_orient_set(image, ELM_IMAGE_ROTATE_180);
</pre>

<p>The following orientations are available:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_ORIENT_0</span>: No orientation change</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_ROTATE_90</span>: Rotate the image 90 degrees clockwise</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_ROTATE_180</span>: Rotate the image 180 degrees clockwise</li>   
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_ROTATE_270</span>: Rotate the image 90 degrees counter-clockwise</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_FLIP_HORIZONTAL</span>: Flip the image horizontally</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_FLIP_VERTICAL</span>: Flip the image vertically</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_FLIP_TRANSPOSE</span>: Flip the image along the bottom-left to top-right line</li>
   <li><span style="font-family: Courier New,Courier,monospace">ELM_IMAGE_FLIP_TRANSVERSE</span>: Flip the image along the top-left to bottom-right line</li>
  </ul>
  
<p>If you want to keep the original aspect ration when resizing the image, you must define how the image fits into the object&#39;s area.</p>
<pre class="prettyprint">
// Tell the image to keep original aspect ratio 
elm_image_aspect_fixed_set(image, EINA_TRUE);
// Then let the image fill the entire object 
elm_image_fill_outside_set(image, EINA_TRUE);
</pre>

<p>In this configuration, part of the image can go outside the object. If <span style="font-family: Courier New,Courier,monospace">elm_image_fill_outside_set</span> is set to <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>, the image stays inside the limits of the parent object.</p>

<h3>Using Image Callbacks</h3>

<p>The image component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">drop</span>: The user drops an image typed object onto the object in question - the event info argument is the path to that image file</li>
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user clicks the image. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
  </ul>

<p>To register a callback when a user clicks on the image:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(image, &quot;clicked&quot;, clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when the image is clicked
void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Image clicked\n&quot;);
}
</pre>  

				<h2 id="index" name="index">Index</h2>
  
<p class="figure">Figure: Index component</p> 
<p align="center"> <img alt="Index component" src="../../images/index.png" /> </p> 
 
<p class="figure">Figure: Index hierarchy</p> 
<p align="center"> <img alt="Index hierarchy" src="../../images/index_tree.png" /> </p> 
 
<p>An index component gives you an index for fast access to whichever group of other UI items you have. The index component is by default hidden, but it appears when the user clicks over its reserved area in the canvas. In the default theme, it is a one finger wide area on the right side of the index component&#39;s container. Generally, an index is used together with lists, generic lists, or generic grids.</p>

<h3>Adding an Index Component</h3>

<p>Call the <span style="font-family: Courier New,Courier,monospace">elm_index_add()</span> function to create a new index component.</p>
<pre class="prettyprint">
Evas_Object *index, *parent;
index = elm_index_add(parent);
</pre>

<h3>Adding Items</h3>

<p>The following example shows how to add the listitem object at the letter <span style="font-family: Courier New,Courier,monospace">A</span>, calling the smart callback <span style="font-family: Courier New,Courier,monospace">it_select_cb()</span> when this item is selected.</p>
<pre class="prettyprint">
Elm_Object_Item *list_item1, *list_item2;
elm_index_item_append(index, &quot;A&quot;, it_select_cb, list_item1);
</pre>

<p>The following example shows how to define the smart callback.</p>
<pre class="prettyprint">
// Callback function called when the list_item1 object
// is selected
void it_select_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Item1 selected\n&quot;);
}
</pre>

<p>In the previous case, the indexes are appended to the existing ones. It is also possible to prepend index items with <span style="font-family: Courier New,Courier,monospace">elm_index_item_prepend()</span>.</p>

<h3>Sorting Index Items</h3>

<p>You can insert index items using a sorting function. Indexes can be sorted, for example, by alphabetic order.</p>

<p>You must write a compare function that returns a positive <span style="font-family: Courier New,Courier,monospace">int</span>, 0 or a negative <span style="font-family: Courier New,Courier,monospace">int</span> when the <span style="font-family: Courier New,Courier,monospace">data2</span> item parameter is respectively greater than, equal to or lower than the <span style="font-family: Courier New,Courier,monospace">data1</span> parameter.</p>

<pre class="prettyprint">
static int
_index_icmp(const void *data1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *data2)
{
&nbsp;&nbsp;&nbsp;int result;

&nbsp;&nbsp;&nbsp;// Code that does the item comparison is written here

&nbsp;&nbsp;&nbsp;return result;
}
</pre>

<p>This example shows how to add a new item at the <span style="font-family: Courier New,Courier,monospace">B</span> index using the compare function to sort the indexes.</p>

<pre class="prettyprint">
elm_index_item_sorted_insert(index, &quot;B&quot;, NULL, list_item2, _index_icmp, NULL);
</pre>

<h3>Using Index Callbacks</h3>

<p>The index component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">changed</span>: The selected index item changes. <span style="font-family: Courier New,Courier,monospace">event_info</span> is the selected item&#39;s data pointer.</li>
   <li><span style="font-family: Courier New,Courier,monospace">delay,changed</span>: The selected index item changes, but after a small idling period. <span style="font-family: Courier New,Courier,monospace">event_info</span> is the selected item&#39;s data pointer.</li>
   <li><span style="font-family: Courier New,Courier,monospace">selected</span>: The user releases a mouse button and selects an item. <span style="font-family: Courier New,Courier,monospace">event_info</span> is the selected item&#39;s data pointer.</li>
   <li><span style="font-family: Courier New,Courier,monospace">level,up</span>: The user moves a finger from the first level to the second level.</li>
   <li><span style="font-family: Courier New,Courier,monospace">level,down</span>: The user moves a finger from the second level to the first level.</li>
  </ul>

<p>When the user selects an item in the index, the <span style="font-family: Courier New,Courier,monospace">selected</span> signal is emitted. The developer can then implement the associated callback to do the appropriate action (to show a given area or child object depending on the index item selected, for example). Here is an example of such a callback.</p>
<pre class="prettyprint">
static void
_index_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *lit = event_info;

&nbsp;&nbsp;&nbsp;// Code that does the desired action
}
</pre>

<p>After that, the callback to the <span style="font-family: Courier New,Courier,monospace">selected</span> signal is registered.</p>
<pre class="prettyprint">
evas_object_smart_callback_add(index, &quot;selected&quot;, _index_selected_cb, NULL);
</pre>

			
				<h2 id="label" name="label">Label</h2>
  
<p class="figure">Figure: Label component</p> 
<p align="center"> <img alt="Label component" src="../../images/label.png" /> </p> 
 
<p class="figure">Figure: Label hierarchy</p> 
<p align="center"> <img alt="Label hierarchy" src="../../images/label_tree.png" /> </p> 

<p>The label component displays text with simple html-like markup.</p>

<h3>Adding a Label Component</h3>

<p>To add a label and set the text in it, use the following functions.</p>

<pre class="prettyprint">
Evas_Object *label = elm_label_add(win);

elm_object_text_set(label, &quot;Some long text for our label, that is not so long&quot;);
</pre>

<h3>Using the Label Styles</h3>

<p>Label displays the text with several predefined styles.</p>
  <ul> 
   <li><span style="font-family: Courier New,Courier,monospace">default</span>: No animation</li> 
   <li><span style="font-family: Courier New,Courier,monospace">marker</span>: The text is centered and bolded.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">slide_long</span>: The text appears from the right of the screen and slides until it disappears in the left of the screen(reappearing on the right again).</li> 
   <li><span style="font-family: Courier New,Courier,monospace">slide_short</span>: The text appears in the left of the label and slides to the right to show the overflow. When all of the text has been shown the position is reset.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">slide_bounce</span>: The text appears in the left of the label and slides to the right to show the overflow. When all of the text has been shown, the animation reverses, moving the text to the left.</li>   
  </ul>

<p>Here the style is set to <span style="font-family: Courier New,Courier,monospace">slide_long</span>.</p>

<pre class="prettyprint">
elm_object_style_set(label, &quot;slide_long&quot;);
</pre>

<h3>Configuring the Label</h3>

<p>The duration of the animation and the slide mode can be set with the following functions.</p>
<pre class="prettyprint">
elm_label_slide_duration_set(label, 3);
elm_label_slide_mode_set(label, ELM_LABEL_SLIDE_MODE_ALWAYS);
</pre>

<p>Use the following function to modify the style.</p>
<pre class="prettyprint">
elm_object_style_set(label, &quot;slide_bounce&quot;);
</pre>

<h3>Using the Label Callbacks</h3>

<p>This UI component emits the following signals:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">language,changed</span>: The program&#39;s language changes.</li>
   <li><span style="font-family: Courier New,Courier,monospace">slide,end</span>: The slide reaches the end.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,clicked</span>: The anchor is clicked. <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Label_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,mouse,down</span> <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Label_Anchor_Info</span>.</li>
   <li><span style="font-family: Courier New,Courier,monospace">anchor,mouse,up</span> <span style="font-family: Courier New,Courier,monospace">event_info</span> points to an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Label_Anchor_Info</span>.</li>
  </ul>
  
<p>The following example registers a callback on the <span style="font-family: Courier New,Courier,monospace">slide,end</span> signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(label, &quot;slide,end&quot;, slide_end_cb, data);
}

// Callback function for the &quot;slide,end&quot; signal
// This callback is called when the label slide reaches the end
void slide_end_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Slide has reach the end.\n&quot;);
}
</pre>

	<h2 id="list" name="list">List</h2>
	
 <p class="figure">Figure: List component</p> 
<p align="center"> <img alt="List component" src="../../images/list.png" /> </p> 
  
  <p class="figure">Figure: List hierarchy</p> 
<p align="center"> <img alt="List hierarchy" src="../../images/list_tree.png" /> </p> 
 
  
 <p>This UI component is a very simple type of a list component. It is not to be used to manage a lot of items. For that, genlists are a better option. </p>

 <p>The list items can contain a text and two contents (<span style="font-family: Courier New,Courier,monospace">start</span> and <span style="font-family: Courier New,Courier,monospace">end</span>). These are set with the <span style="font-family: Courier New,Courier,monospace">elm_object_item_*()</span> functions. </p>

<h3>Adding a List Component</h3>

<pre class="prettyprint">
Evas_Object *list, *parent;

// Create a list 
list = elm_list_add(parent);
</pre>

<h3>Using the List</h3>

<p>This UI component implements the scrollable interface, so the scroller component functions can be used on it. For example, if you want to change the bounce property of the scroller or the scrolling policy:</p>

<pre class="prettyprint">
Evas_Object *list;

// Change the scroller policy to fix the scroll only vertically
elm_scroller_policy_set(list, ELM_SCROLLER_POLICY_ON, ELM_SCROLLER_POLICY_OFF);
// Enable bounce effect when the list reaches the upper and lower limits 
elm_scroller_bounce_set(list, EINA_TRUE, EINA_TRUE);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">elm_list_multi_select_set()</span> function can be called to enable multi-selection of items. Each time an item is clicked, the state changes to <span style="font-family: Courier New,Courier,monospace">selected</span>.</p>

<pre class="prettyprint">
Evas_Object *list;

// Activate multi selection 
elm_list_multi_select_set(list, EINA_TRUE);
</pre>

<h3>Adding Item to the List</h3>

 <p>Items are added with <span style="font-family: Courier New,Courier,monospace">elm_list_item_append()</span> or <span style="font-family: Courier New,Courier,monospace">elm_list_item_prepend()</span>. Here an example of adding ten items with text and one icon on the front: The last two arguments are the callback function when the created item is clicked and the data passed to the callback function.</p>

<pre class="prettyprint">
Evas_Object *list;
int i;

// This function is called when the list item is selected 
static void _selected_item_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *list_it = elm_list_selected_item_get(obj);
&nbsp;&nbsp;&nbsp;Eina_Bool selected = elm_list_item_selected_get(list_it);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;item is %s\n&quot;, selected? &quot;selected&quot;: &quot;unselected&quot;);
}

for (i = 0; i &lt; 10; i++)
{
&nbsp;&nbsp;&nbsp;Evas_Object *ic;
&nbsp;&nbsp;&nbsp;char tmp[8];
&nbsp;&nbsp;&nbsp;snprintf(tmp, sizeof(tmp), &quot;Item %02d&quot;, i);
&nbsp;&nbsp;&nbsp;// Create an icon 
&nbsp;&nbsp;&nbsp;ic = elm_icon_add(win);
&nbsp;&nbsp;&nbsp;// Set the file to the icon file 
&nbsp;&nbsp;&nbsp;elm_image_file_set(ic, &quot;path/to/file&quot;, NULL);
&nbsp;&nbsp;&nbsp;// Add item to the list 
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, tmp, ic, NULL, _selected_item_cb, NULL);
}

</pre>
 
<h3>Changing the Text or Icon of an Item</h3>

<p>If you want to change the state of an item, you can do it by using all the functions relative to <span style="font-family: Courier New,Courier,monospace">Elm_Object_Item</span>. Each item of the list contains two instances of an <span style="font-family: Courier New,Courier,monospace">evas_object</span>. Give those as the third and the fourth arguments when you append or prepend the item in the list. The <span style="font-family: Courier New,Courier,monospace">evas_object</span> instances are changed with <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_content_set</span>. The first object is referenced as the <span style="font-family: Courier New,Courier,monospace">start</span> object in the theme, whereas the second one is referenced as the <span style="font-family: Courier New,Courier,monospace">end</span> object. Give these names when you use the <span style="font-family: Courier New,Courier,monospace">elm_object_item_part_content_set</span>. The label of the item is changed by using <span style="font-family: Courier New,Courier,monospace">elm_object_item_text_set</span>.</p>

<pre class="prettyprint">
Evas_Object *list;
Eina_List *l;
Elm_Object_Item *it;

// Retrieve the current selected item 
it = elm_list_selected_item_get(list);
if (!it)
&nbsp;&nbsp;&nbsp;return;

ic = elm_icon_add(win);
// Set the file to the icon file 
elm_image_file_set(ic, &quot;path/to/file&quot;, NULL);
// Change the first icon 
elm_object_item_part_content_set(it, &quot;start&quot;, ic);
// Change the second icon 
elm_object_item_part_content_set(it, &quot;end&quot;, ic);
// Change the label 
elm_object_item_text_set(it, &quot;I&#39;ve been selected !&quot;);
</pre>
  
<h3>Retrieving Selected Items</h3>

 <p>The list of the currently selected items is retrieved with <span style="font-family: Courier New,Courier,monospace">elm_list_selected_items_get()</span>. If the multiselect mode is false, you can retrieve the only selected item with <span style="font-family: Courier New,Courier,monospace">elm_list_selected_item_get()</span>. For example, this is how to unselect all previously selected items.</p>

<pre class="prettyprint">
Evas_Object *list; Eina_List *l;
Eina_List *selected_items;
// List of Elm_Object_Item 
Elm_Object_Item *it;

selected_items = elm_list_selected_items_get(list);
EINA_LIST_FOREACH(selected_items, l, it)
&nbsp;&nbsp;&nbsp;elm_list_item_selected_set(it, EINA_FALSE);
</pre>

<h3>List Item Operations</h3>

 <p>To find out if an item is selected, call <span style="font-family: Courier New,Courier,monospace">elm_list_item_selected_get</span>. This function returns <span style="font-family: Courier New,Courier,monospace">EINA_TRUE</span> if the item is selected, otherwise <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>.</p>

 <p>Elementary list provides two functions for sliding a list to a specific item. <span style="font-family: Courier New,Courier,monospace">elm_list_item_show</span> shows the item passed as an argument, whereas <span style="font-family: Courier New,Courier,monospace">elm_list_item_bring_in</span> shows the item, but only after animating the slide.</p>

 <p>You can go to the item immediately preceding a specific item with the function <span style="font-family: Courier New,Courier,monospace">elm_list_item_prev</span>, or to the one immediately following a specific item with the function <span style="font-family: Courier New,Courier,monospace">elm_list_item_next</span>.</p>

 <p>The following example shows selecting the item immediately following the currently selected one, unselecting it, selecting the next one and bringing it to the screen. </p>

<pre class="prettyprint">
Evas_Object *list;
Elm_Object_Item *current, *next;
current = elm_list_selected_item_get(list);
elm_list_item_selected_set(current, EINA_FALSE);
next = elm_list_item_next(current);
elm_list_item_selected_set(next, EINA_TRUE);
elm_list_item_bring_in(next);
</pre>

<h3>Using List Callbacks</h3>

 <p>The list emits the following signals: </p> 
  <ul> 
   <li><span style="font-family: Courier New,Courier,monospace">activated</span>: The user double-clicks or presses (enter | return | spacebar) on an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user double-clicks an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">selected</span>: The user selects an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">unselected</span>: The user unselects an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The user long-presses an item. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,top</span>: The list is scrolled to the top edge.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,bottom</span>: The list is scrolled to the bottom edge.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,left</span>: The list is scrolled to the left edge.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">edge,right</span>: The list is scrolled to the right edge.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">highlighted</span>: The user highlights an item on the list. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">unhighlighted</span>: The user unhighlights an item in the list. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the callback function contains a pointer to the item activated.</li>  
  </ul>

<p>You can register to the <span style="font-family: Courier New,Courier,monospace">clicked,double</span> signal with the following code. Note that the currently double-clicked item can be retrieved using the <span style="font-family: Courier New,Courier,monospace">event_info</span> pointer. This code registers to the <span style="font-family: Courier New,Courier,monospace">double,clicked</span> signal and unselects the item that has been double-clicked.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;Evas_Object *list;

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(list, &quot;clicked,double&quot;, double_clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when the button is clicked by the user
void double_clicked_cb(void *data, Evas_Object *obj, void  *event_info)
{
&nbsp;&nbsp;&nbsp;elm_Object_Item *it = event_info;
&nbsp;&nbsp;&nbsp;elm_list_selected_item_set(it,  EINA_FALSE);
}
</pre>
	
<h2 id="map" name="map">Map</h2>
  
<p class="figure">Figure: Map hierarchy</p> 
<p align="center"> <img alt="Map hierarchy" src="../../images/map_tree.png" /> </p>   

<p>The map component displays a geographic map. The default map data are provided by the OpenStreetMap project <a href="http://www.openstreetmap.org/" target="_blank">(http://www.openstreetmap.org/)</a>. Custom providers can also be added.</p>

<p>This UI component supports:</p>
  <ul> 
   <li>Zooming</li> 
   <li>Scrolling</li> 
   <li>Markers with content to be displayed when the user clicks over them</li> 
   <li>Group of markers</li>   
   <li>Routes</li> 
  </ul>

<p>The map component implements the scroller interface so that all the functions that work with the scroller component also work with maps.</p>

<h3>Adding a Map Component</h3>

<p>Once created with the <span style="font-family: Courier New,Courier,monospace">elm_map_add()</span> function, zoom level x12 can be set.</p>

<pre class="prettyprint">
Evas_Object *map, *parent;

map = elm_map_add(parent);
elm_map_zoom_mode_set(map, ELM_MAP_ZOOM_MODE_MANUAL);
elm_map_zoom_set(map, 12);
</pre>

<p>Here the zoom mode is set to manual, but it can also be set to the <span style="font-family: Courier New,Courier,monospace">ELM_MAP_ZOOM_MODE_AUTO_FIT</span> mode and the <span style="font-family: Courier New,Courier,monospace">ELM_MAP_ZOOM_MODE_AUTO_FILL</span> mode. In that case however, the <span style="font-family: Courier New,Courier,monospace">elm_map_zoom_set()</span> function cannot be used.</p>

<h3>Playing with the Map</h3>

<p>If you have coordinates of a specific area (2 2 N, 48 8 E), it can be shown on the map.</p>
<pre class="prettyprint">
elm_map_region_show(map, 2.2, 48.8);
</pre>

<p>This shows the desired coordinates. The location can also be shown with a bring-in animation.</p>
<pre class="prettyprint">
elm_map_region_bring_in(map, 2.2, 48.8);
</pre>

<p>The map is rotated 90 degrees around the current position.</p>
<pre class="prettyprint">
elm_map_rotate_set(map, 90, 2.2, 48.8);
</pre>

<h3>Drawing Overlays</h3>

<p>Overlays are markers that can be placed anywhere on the map. They can represent any object you want to put on the map.</p>

<h4>Creating an Overlay Class</h4>

<p>Overlay classes can be created if several objects are of the same type. For example, you can create a forest overlay class to represent the forests visible on the map. To do this, set the minimum zoom level at which this class is visible. The forest class overlay is visible when the zoom level is superior to eight.</p>

<p>Set an icon (&quot;Home&quot; icon) to the forest class. This icon is displayed in place of the forest class on the map.</p>
<pre class="prettyprint">
Evas_Object *icon;
Elm_Map_Overlay *forest_class = elm_map_overlay_class_add(map);

// Set min zoom level at which class is displayed
elm_map_overlay_displayed_zoom_min_set(forest_class, 8);

// Create a Home icon object and set it to the forest class 
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;home&quot;);
elm_map_overlay_icon_set(forest_class, icon);
</pre>

<h4>Adding Overlays to a Class</h4>

<p>After creating a forest class, it is possible to add overlay objects to it. Here an overlay for the Meudon forest is created. The data is linked to the overlay with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_data_set()</span> function. Set the name of the forest in the data. The icon can be set to the overlay with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_icon_set()</span> function.</p>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">Do not use the same icon object for two different overlays. Create a new icon object each time you need one.</td> 
    </tr> 
   </tbody> 
  </table> 
  
<pre class="prettyprint">
Elm_Map_Overlay *ovl;
const char* data_meudon = &quot;Meudon forest&quot;;
const char* data_fausses = &quot;Fausse forest&quot;;

// Add an overlay
ovl = elm_map_overlay_add(map, 2.20718, 48.79759);
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;stop&quot;);
elm_map_overlay_icon_set(ovl, icon);
elm_map_overlay_data_set(ovl, &amp;data_meudon);

// Add the new ovl object to the forest class 
elm_map_overlay_class_append(forest_class, ovl);

// Add another overlay next to the first one 
ovl = elm_map_overlay_add(map, 2.1699, 48.8189);
icon = elm_icon_add(map);
elm_icon_standard_set(icon, &quot;stop&quot;);
elm_map_overlay_icon_set(ovl, icon);
elm_map_overlay_data_set(ovl, &amp;data_fausses);
elm_map_overlay_class_append(forest_class, ovl);
</pre>  

<p>If you add another overlay to the forest class, the two overlays can be grouped under the forest class icon on certain zoom level conditions. You can define on which zoom level items are grouped.</p>
<pre class="prettyprint">
elm_map_overlay_class_zoom_max_set(forest_class, 8);
</pre>

<p>In this case, overlay members of the forest class are grouped when the map is displayed at less than zoom level eight.</p>

<h4>Creating Bubbles Following Overlays</h4>

<p>The following example shows how to set a content in a bubble following an overlay.</p>

<pre class="prettyprint">
// Add an overlay bubble object 
Elm_Map_Overlay *bubble = elm_map_overlay_bubble_add(map);

// Set it to follow a specific overlay (the last created one here) 
elm_map_overlay_bubble_follow(bubble, ovl);
</pre>

<p>Once following an overlay, the bubble appears, moves or hides following the parent overlay&#39;s behavior.</p>

<p>Content is added to the bubble with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_bubble_content_append()</span> function.</p>

<h3>Adding Other Overlays</h3>

<p>You can draw a circle on the map with coordinates and a radius size.</p>
<pre class="prettyprint">
Elm_Map_Overlay *circle = elm_map_overlay_circle_add(map, 2.2, 48.8, 0.02);
</pre>

<p>You can also add a scale at the 200x0 coordinate (in pixels).</p>
<pre class="prettyprint">
Elm_Map_Overlay *scale = elm_map_overlay_scale_add(map, 200, 0);
</pre>

<p>You can also draw a line, a polygon, or a route. For a full description of these functions, see the <a href="../../../../org.tizen.native.mobile.apireference/group__Map.html">Map API</a>.</p>

<h3>Calculating Routes</h3>

<p>A route between a starting point and an ending point is calculated with the <span style="font-family: Courier New,Courier,monospace">elm_map_route_add()</span> call. The type of transport and the routing calculation method can be provided so as to have the desired result.</p>

<p>The following example shows how to get a route calculation between the first and the second overlay. It is configured to use the bicycle, and to find the fastest route possible.</p>

<pre class="prettyprint">
Elm_Map_Route *route = elm_map_route_add(map,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_MAP_ROUTE_TYPE_BICYCLE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_MAP_ROUTE_METHOD_FASTEST,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.20718, 48.79759,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2.1699, 48.8189,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL);

// Add a callback to when the route has been calculated and loaded 
evas_object_smart_callback_add(map, &quot;route,loaded&quot;, _route_loaded_cb, route);
</pre>

<p>Once the route is calculated, create a route overlay object and change its color. In this example, the <span style="font-family: Courier New,Courier,monospace">route,loaded</span> callback is used.</p>
<pre class="prettyprint">
static void
_route_loaded_cb(void *data, Evas_Object *obj, void *ev)
{
&nbsp;&nbsp;&nbsp;Elm_Map_Route *route = data;

&nbsp;&nbsp;&nbsp;Elm_Map_Overlay *route_ovl = elm_map_overlay_route_add(obj, route);
&nbsp;&nbsp;&nbsp;elm_map_overlay_color_set(route_ovl, 0, 255, 0, 255);
}
</pre>     

<h3>Using Map Callbacks</h3>

<p>The map component emits the following callbacks:</p>
<ul> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user has clicked the map without dragging around.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user has double-clicked the map.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">press</span>: The user has pressed down on the map.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The user has pressed down on the map for a long time without dragging around.</li>
   <li><span style="font-family: Courier New,Courier,monospace">scroll</span>: The content is scrolled (moved).</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,start</span>: Dragging the contents around starts.</li>  
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,stop</span>: Dragging the contents around stops.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,start</span>: Scrolling animation starts.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span>: Scrolling animation stops.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,start</span>: Zoom animation starts.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,stop</span>: Zoom animation stops.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,change</span>: The zoom is changed when using an auto zoom mode.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">tile,load</span>: A map tile image load begins.</li>
   <li><span style="font-family: Courier New,Courier,monospace">tile,loaded</span>: A map tile image load ends.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">tile,loaded,fail</span>: A map tile image load fails.</li>
   <li><span style="font-family: Courier New,Courier,monospace">route,load</span>: Route request begins.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">route,loaded</span>: Route request ends.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">route,loaded,fail</span>: Route request fails.</li>
   <li><span style="font-family: Courier New,Courier,monospace">name,load</span>: Name request begins.</li>   
   <li><span style="font-family: Courier New,Courier,monospace">name,loaded</span>: Name request ends.</li>   
   <li><span style="font-family: Courier New,Courier,monospace">name,loaded,fail</span>: Name request fails.</li>   
   <li><span style="font-family: Courier New,Courier,monospace">overlay,clicked</span>: An overlay is clicked.</li>
   <li><span style="font-family: Courier New,Courier,monospace">loaded</span>: The map is loaded.</li>
</ul>

		
				<h2 id="notify" name="notify">Notify</h2>
  
  <p class="figure">Figure: Notify hierarchy</p> 
<p align="center"> <img alt="Notify hierarchy" src="../../images/notify_tree.png" /> </p> 

  <p>The notify component displays a container in a particular region of the parent object. It can receive some content, and can be automatically hidden after a certain amount of time.</p>

<h3>Adding a Notify Component</h3> 
  
<p>The following example shows how to create a notify object.</p>

<pre class="prettyprint">
Evas_Object *notify, *parent;
notify = elm_notify_add(parent);
</pre>

<h3>Configuring the Notify Component</h3> 

<p>Create a label and add it to the notify object.</p>

<pre class="prettyprint">
Evas_Object *content;

// Create the label and set some text to it 
content = elm_label_add(parent);

elm_object_text_set(content, &quot;A label text&quot;);
evas_object_show(content);

// Add the label object to the notify component
elm_object_content_set(notify, content);
</pre>

<p>In the following example the notify object is shown on the bottom left corner of the parent object.</p>

<pre class="prettyprint">
elm_notify_align_set(notify, 1.0, 1.0);
evas_object_show(notify);
</pre>

<p>Set a timeout interval, after which the notify component is hidden. In the following example the timeout interval is five seconds.</p>

<pre class="prettyprint">
elm_notify_timeout_set(notify, 5.0);
</pre>

<h3>Using Notify Callbacks</h3> 

<p>The notify component emits the following signals:</p>
 <ul> 
   <li><span style="font-family: Courier New,Courier,monospace">timeout</span>: The timeout count ends and the notify component is hidden</li> 
   <li><span style="font-family: Courier New,Courier,monospace">block,clicked</span>: The user clicks outside of the notify component</li> 
  </ul>

<p>For both these signals <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">timeout</span> signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(notify, &quot;timeout&quot;, timeout_cb, data);
}

// Callback function for the &quot;timeout&quot; signal
// The timeout expires and the notify object is hidden
 
void timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Notify is hidden\n&quot;);
}
</pre>

		
				<h2 id="panel" name="panel">Panel</h2>
				
				
  <p class="figure">Figure: Panel hierarchy</p> 
<p align="center"> <img alt="Panel hierarchy" src="../../images/panel_tree.png" /> </p> 
   <p>The panel component is an animated object that can contain subobjects. It can be expanded or contracted by clicking on the button on its edge.</p>

   <p>Panel inherits from layout component, so the layout API can be used on this UI component.</p>

<h3 id="add_panel">Adding a Panel Component</h3>

<p>The following example shows how to add a panel and set its orientation to the left.</p>

<pre class="prettyprint">
Evas_Object *panel, *parent;

panel = elm_panel_add(parent);
elm_panel_orient_set(panel, ELM_PANEL_ORIENT_LEFT);
</pre>

<h3 id="use_panel">Using the Panel</h3>

<p>The panel can be manually hidden.</p>
<pre class="prettyprint">
elm_panel_hidden_set(pan, EINA_TRUE);
</pre>

<p>The panel can be toggled if you do not know the hidden state of the UI component.</p>
<pre class="prettyprint">
elm_panel_toggle(pan);
</pre>

<p>The panel can be set scrollable.</p>
<pre class="prettyprint">
elm_panel_scrollable_set(pan, EINA_TRUE);
</pre>

<h3 id="create_drawer">Creating a Drawer</h3>

<p>Tizen SDK has implemented a layout theme to add a drawer in the application. This example shows how to add a new Elementary layout object and set the theme of this layout to the drawer.</p>

<pre class="prettyprint">
Evas_Object *layout;

// Create a new layout object 
layout = elm_layout_add(parent);

// Set the &quot;drawer&quot; group theme and &quot;panel&quot; style to it 
elm_layout_theme_set(layout,&quot;layout&quot;, &quot;drawer&quot;, &quot;panel&quot;);

// Show the new layout
evas_object_show(layout);
</pre>

<p>Once the panel object is created, it can be swallowed in the new layout.</p>

<pre class="prettyprint">
elm_object_part_content_set(layout, &quot;elm.swallow.left&quot;, pan);
</pre>

<p>You can set content to the <span style="font-family: Courier New,Courier,monospace">elm.swallow.bg</span> and <span style="font-family: Courier New,Courier,monospace">elm.swallow.content</span> parts of the layout.</p>
<pre class="prettyprint">
// Panel Background (Dimmed Area) 
Evas_Object *bg = create_bg(layout);
elm_object_part_content_set(layout, &quot;elm.swallow.bg&quot;, bg);

// Add content to the drawer 
Evas_Object *content;
elm_object_part_content_set(layout, &quot;elm.swallow.content&quot;, content);
</pre>

<h3 id="panel_cb">Using Panel Callbacks</h3>

<p>You can register a callback on the <span style="font-family: Courier New,Courier,monospace">scroll</span> signal, when the user scrolls the panel. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is of the type <span style="font-family: Courier New,Courier,monospace">Elm_Panel_Scroll_Info</span>.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(pan, &quot;scroll&quot;, scroll_cb, data);
}
// Callback function for the &quot;scroll&quot; signal
// This callback is called when the user scrolls the panel
void scroll_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Panel_Scroll_Info *scrollinfo = event_info;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The panel was scrolled.\n&quot;);
}
</pre>

	
				<h2 id="photo" name="photo">Photo</h2>
  
  <p class="figure">Figure: Photo hierarchy</p> 
<p align="center"> <img alt="Photo hierarchy" src="../../images/photo_tree.png" /> </p> 
  
 <p>The photo component is used to display a photo, such as a contact image. If no photo is set on it, it displays a person icon to show that it is a photo placeholder.</p> 
  
<h3 id="add_photo">Adding a Photo Component</h3>  

 <p>The following example shows how to create a photo object.</p> 

 <pre class="prettyprint">
Evas_Object *photo, *parephotoslider = elm_photo_add(parent);
photo = elm_photo_add(parent);
</pre>

<h3 id="use_photo">Using a Photo Component</h3>  

 <p>A file can be set to the photo component. Here, <span style="font-family: Courier New,Courier,monospace">PHOTO_FILENAME</span> is a string corresponding to the photo file name on the system.</p> 
<pre class="prettyprint">
elm_photo_file_set(photo, PHOTO_FILENAME);</pre>

<p>The photo can be set as editable, and it can be copied, cut, or dragged in another region of the screen.</p> 
<pre class="prettyprint">
elm_photo_editable_set(photo, EINA_TRUE);</pre>

<p>The photo can also be completely visible on the screen.</p>

<pre class="prettyprint">
elm_photo_fill_inside_set(photo, EINA_TRUE);</pre>

<h3 id="use_photo_cb">Using Photo Callbacks</h3> 

 <p>The following callbacks are registered on the photo component.</p>
  <ul> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user has clicked the photo.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,start</span>: The user starts dragging the inner image out of the photo&#39;s frame.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">drag,end</span>: The user drops the dragged image.</li>    
  </ul>

<p><span style="font-family: Courier New,Courier,monospace">event_info</span> is always <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

		
				<h2 id="photocam" name="photocam">Photocam</h2>

  <p class="figure">Figure: Photocam hierarchy</p> 
<p align="center"> <img alt="Photocam hierarchy" src="../../images/photocam_tree.png" /> </p> 
  
  <p>The photocam component displays high resolution photos taken from digital cameras. It provides a way to zoom in the photo, load it fast, and fit it nicely on the screen. It is optimized for <span style="font-family: Courier New,Courier,monospace">.jpeg</span> images format and has a low memory footprint.</p>

  <p>This UI component implements the scroller interface, so all the functions concerning the scroller can be used with the photocam component.</p>

<h3 id="add_photocam">Adding a Photocam Component</h3>

<p>The following example shows how to create a photocam component and set an image file on it.</p>

<pre class="prettyprint">
Evas_Object *photocam;
photocam = elm_photocam_add(win);
elm_photocam_file_set(photocam, &quot;/tmp/photo.jpeg&quot;);
</pre>

<h3 id="use_zoom">Using Photocam Zoom</h3>

<p>You can choose between two automatic zoom modes and a manual zoom mode. In the following example the zoom mode is set to manual and a double zoom is requested.</p>
<pre class="prettyprint">
elm_photocam_zoom_mode_set(photocam, ELM_PHOTOCAM_ZOOM_MODE_MANUAL);
elm_photocam_zoom_set(photocam, 2.0);
</pre>

<p>The zoom mode can be set to <span style="font-family: Courier New,Courier,monospace">ELM_PHOTOCAM_ZOOM_MODE_AUTO_FIT</span>. In this case, the photo fits exactly inside the scroll frame with no pixels outside this region. The zoom mode can also be set to <span style="font-family: Courier New,Courier,monospace">ELM_PHOTOCAM_ZOOM_MODE_AUTO_FILL</span> to fill all the pixels of the photocam component.</p>

<p>Multi-touch zooming is activated by enabling gestures.</p>
<pre class="prettyprint">
elm_photocam_gesture_enabled_set(photocam, EINA_TRUE);
</pre>

<p>You can zoom in a specific region. The following example shows how to zoom in the region starting at the coordinates (200x200), with a width of 400px and a height of 300px.</p>

<pre class="prettyprint">
elm_photocam_image_region_bring_in(photocam, 200, 200, 400, 300);
</pre>

<h3 id="photocam_cb">Using Photocam Callbacks</h3>

<p>The photocam component emits the following signals:</p>
<ul> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user has clicked the photo without dragging around.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">press</span>: The user has pressed down on the photo.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The user has pressed down on the photo for a long time without dragging around.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user has double-clicked the photo.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">load</span>: The photo load begins.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">loaded</span>: The image file load is complete for the first view (a low resolution blurry version).</li> 
   <li><span style="font-family: Courier New,Courier,monospace">load,detail</span>: A photo detailed data load begins.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">loaded,detail</span>: The image file load is complete for the detailed image data (full resolution is needed).</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,start</span>: Zoom animation starts.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,stop</span>: Zoom animation stops.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">zoom,change</span>: The zoom is changed when using an auto zoom mode.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll</span>: The content is scrolled.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,start</span>: Scrolling animation starts.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span>: Scrolling animation stops.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,start</span>: Dragging the content around starts.</li> 
   <li><span style="font-family: Courier New,Courier,monospace">scroll,drag,stop</span>: Dragging the content around stops.</li> 
  </ul>

<p>For all these signals, <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>

<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">loaded</span> signal.</p>

<pre class="prettyprint">
void message_port_cb(int local_port_id, const char *remote_app_id, bundle *message)
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(photocam, &quot;loaded&quot;, loaded_cb, data);
}

// Callback function for the &quot;loaded&quot; signal
// The photocam has loaded the photo file in a low resolution
 
void loaded_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The photo has been loaded\n&quot;);
}
</pre>

				<h2 id="plug" name="plug">Plug</h2>
  
  <p class="figure">Figure: Plug hierarchy</p> 
<p align="center"> <img alt="Plug hierarchy" src="../../images/plug_tree.png" /> </p> 

<p>The plug component shows an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> created by an other process. It can be used anywhere the same way as any other elementary UI component.</p>

<h3 id="add_plug">Adding a Plug Component</h3>  

<p>The following example shows how to create a plug.</p>

<pre class="prettyprint">
Evas_Object *plug, *parent;
plug = elm_plug_add(parent);
</pre>

<h3 id="use_plug">Using the Plug</h3>

<p>The socket image provides the service where to connect the plug object with the <span style="font-family: Courier New,Courier,monospace">elm_plug_connect()</span> function. In this process, use the service name and number set by the socket you want to connect to.</p>

<p>As an example, connect to a service named <span style="font-family: Courier New,Courier,monospace">plug_test</span> on the number 0.</p>

<pre class="prettyprint">
elm_plug_connect(plug, &quot;plug_test&quot;, 0, EINA_FALSE);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> corresponding to the distant image is retrieved with the <span style="font-family: Courier New,Courier,monospace">elm_plug_image_object_get()</span> function.</p>

<pre class="prettyprint">
Evas_Object *plug_img = elm_plug_image_object_get(plug);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The socket to connect to must be started with the <span style="font-family: Courier New,Courier,monospace">elm_win_socket_listen()</span> function in the other process on the remote window object (it is called <span style="font-family: Courier New,Courier,monospace">remote_win</span> here).</td> 
    </tr> 
   </tbody> 
  </table>

<pre class="prettyprint">
// Create a remote window in the other process 
Elm_Win *remote_win = elm_win_add(NULL, &quot;Window Socket&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_WIN_SOCKET_IMAGE);
// Create a socket named &quot;plug_test&quot; and listen to it
elm_win_socket_listen(remote_win, &quot;plug_test&quot;, 0, EINA_FALSE);
</pre>

				<h2 id="popup" name="popup">Popup</h2>
  
<p class="figure">Figure: Popup component</p> 
<p align="center"><img alt="Popup component" src="../../images/popup.png" /></p>
      
<p class="figure">Figure: Popup hierarchy</p> 
<p align="center"><img alt="Popup hierarchy" src="../../images/popup_tree.png" /></p>
  

<p> The popup component shows a popup area that can contain:</p>
<ul>
<li>a title area (optional)</li>
<li>a content area</li>
<li>an action area (optional)</li>
</ul>

<p>The optional title area can contain an icon and text, the action area can contain up to three buttons.</p>

<h3>Adding a Popup Component</h3>

<p>The following example shows how to create a popup component.</p>
<pre class="prettyprint">
Evas_Object *popup, *parent;

// Create a popup 
popup = elm_popup_add(parent);
</pre>

<h3>Using Popup Styles</h3>

<p>The following item styles are available for the popup:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">popup</span></li>
<li><span style="font-family: Courier New,Courier,monospace">toast</span></li>
</ul>

<p>The following example sets the style of the popup to <span style="font-family: Courier New,Courier,monospace">toast</span>.</p>

<pre class="prettyprint">elm_object_style_set(popup, &quot;toast&quot;);</pre>

<h3>Setting the Popup Areas</h3>

<p>Configure the title area. Set the icon object using the part name <span style="font-family: Courier New,Courier,monospace">title,icon</span>. Set the title text to <span style="font-family: Courier New,Courier,monospace">Test popup</span> using the partname <span style="font-family: Courier New,Courier,monospace">title,text</span>.</p>

<pre class="prettyprint">
Evas_Object *icon;

// Add an icon to the title area 
elm_object_part_content_set(popup, &quot;title,icon&quot;, icon);

// Set the title text 
elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Test popup&quot;);
</pre>

<p>Set the content of the popup. The content can be simple text.</p>

<pre class="prettyprint">
elm_object_part_text_set(popup, &quot;default&quot;, &quot;Test popup&quot;);
</pre>

<p>The content can also be an Evas object.</p>

<pre class="prettyprint">
Evas_Object *content;

elm_object_content_set(popup, content);
</pre>

<p>Set the buttons of the action area by creating an <strong>OK</strong> button, a <strong>Cancel</strong> button, and a <strong>Help</strong> button.</p>

<pre class="prettyprint">
Evas_Object *button1, *button2, *button3;

// Create the 3 buttons 

button1 = elm_button_add(popup);
elm_object_text_set(button1, &quot;OK&quot;);

button2 = elm_button_add(popup);
elm_object_text_set(button2, &quot;Cancel&quot;);

button3 = elm_button_add(popup);
elm_object_text_set(button3, &quot;Help&quot;);

// Set the buttons to the action area 
elm_object_part_content_set(popup, &quot;button1&quot;, button1);
elm_object_part_content_set(popup, &quot;button2&quot;, button2);
elm_object_part_content_set(popup, &quot;button3&quot;, button3);
</pre>

<h3>Using Popup Callbacks</h3>
<p>The popup emits the following signals:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">timeout</span>: The popup is closed as a result of timeout.</li>
<li><span style="font-family: Courier New,Courier,monospace">block,clicked</span>: The user clicks on the Blocked Event area.</li>
</ul>

<p><span style="font-family: Courier New,Courier,monospace">elm_popup_timeout_set()</span> is used to hide the popup after a certain time. In this example, the timeout is set to five seconds.</p>

<pre class="prettyprint">
elm_popup_timeout_set(popup, 5.0);
</pre>

<p>When the timeout expires, the <span style="font-family: Courier New,Courier,monospace">timeout</span> signal is sent to the user.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(popup, &quot;timeout&quot;, _timeout_cb, data);
}

static void
_timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Timeout \n&quot;);
}
</pre>

<p>The visible region of the popup is surrounded by a translucent region called <strong>Blocked Event</strong> area. By clicking on this area, the signal <span style="font-family: Courier New,Courier,monospace">block,clicked</span> is sent to the application.</p>

			
				<h2 id="progressbar" name="progressbar">Progressbar</h2>
  
         <p class="figure">Figure: Progressbar component</p> 
  <p align="center"><img alt="Progressbar component" src="../../images/progressbar.png" /></p>
      
	  <p class="figure">Figure: Progressbar hierarchy</p> 
  <p align="center"><img alt="Progressbar hierarchy" src="../../images/progressbar_tree.png" /></p>
  

 <h3>Adding a Progressbar Component</h3>
 
<p>This UI component is used to display the progress status of a given job. It inherits from the layout component, so all function concerning the layout component is used on the progressbar component.</p> 
<p>The following example shows how to create a progressbar component.</p>

<pre class="prettyprint">
Evas_Object *pb = elm_progressbar_add(win);
</pre>

<h3>Using the Progressbar Styles</h3>

<p>The progressbar has several styles:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">default</span></li>
<li><span style="font-family: Courier New,Courier,monospace">pending_list</span></li>
<li><span style="font-family: Courier New,Courier,monospace">process_large</span></li>
<li><span style="font-family: Courier New,Courier,monospace">process_medium</span></li>
<li><span style="font-family: Courier New,Courier,monospace">process_small</span></li>
</ul>

<p>Set the style of the progressbar to <span style="font-family: Courier New,Courier,monospace">pending_list</span>.</p>

<pre class="prettyprint">elm_object_style_set(pb, &quot;pending_list&quot;);</pre>

<h3>Using the Progressbar</h3>

<p>By default, the progressbar does not show a label or an icon, and the unit label is set to <span style="font-family: Courier New,Courier,monospace">%.0f %%</span>.</p>

<p>The following example shows how to set a label. In this example it is named <span style="font-family: Courier New,Courier,monospace">Test label</span>.</p>

<pre class="prettyprint">
elm_object_text_set(pb, &quot;Test label&quot;);
</pre>

<p>An icon is set with <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> using the partname <span style="font-family: Courier New,Courier,monospace">icon</span>.</p>
<pre class="prettyprint">
elm_object_part_content_set(pb, &quot;icon&quot;, icon_object);
</pre>

<p>The unit label format string can be modified using a <span style="font-family: Courier New,Courier,monospace">printf</span> style format. Set it to be a float number with two decimals.</p>
<pre class="prettyprint">
elm_progressbar_unit_format_set(pb, &quot;%1.2f%%&quot;);
</pre>

<h3>Configuring the Progressbar</h3>

<p>The progressbar pulse mode is activated to make the progressbar loop infinitely between the start and end position.</p>
<pre class="prettyprint">
elm_progressbar_pulse_set(pb, EINA_TRUE);
elm_progressbar_pulse(pb, EINA_TRUE);
</pre>

<p>The progressbar can be inverted. In that mode, the values are inverted so that the high values are on the left and the low values on the right.</p>
<pre class="prettyprint">
elm_progressbar_inverted_set(pb, EINA_TRUE);
</pre>

<p>The progressbar emits the <span style="font-family: Courier New,Courier,monospace">changed</span> signal when the progress value changes. The value is changed with the <span style="font-family: Courier New,Courier,monospace">elm_progressbar_value_set()</span> function. Here the <span style="font-family: Courier New,Courier,monospace">pb</span> progress value is set to 20%.</p>
<pre class="prettyprint">
elm_progressbar_value_set(pb, 0.2);
</pre>

<p>The current value can be read.</p>
<pre class="prettyprint">
double value = elm_progressbar_value_get(pb);
</pre>

<p>You can set the orientation of the progressbar to vertical instead of the default horizontal orientation.</p>
<pre class="prettyprint">
elm_progressbar_horizontal_set(pb, EINA_FALSE);
</pre>

<h3>Using the Progressbar Callbacks</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">changed</span> signal is the only signal specifically emitted by the progressbar component.</p>

<p>The following example shows how to register a callback on this signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(pb, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the progressbar value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>

		
				<h2 id="radio" name="radio">Radio</h2>
				
<p class="figure">Figure: Radio component</p> 
<p align="center"><img alt="Radio component" src="../../images/radio.png" /></p>
      
<p class="figure">Figure: Radio hierarchy</p> 
<p align="center"><img alt="Radio hierarchy" src="../../images/radio_tree.png" /></p>
  
<p> This UI component displays one or more options, but the user can only select one of them. It is composed of an indicator (selected or unselected), an optional icon and an optional label. Even though it is usually grouped with two or more other radio objects, it can also be used alone.</p>
<p>The radio component inherits from the layout component. All the layout functions can be used with radio objects.</p>

<h3>Adding a Radio Component</h3>

<p>Create a radio component and set a label to it.</p>
<pre class="prettyprint">
Evas_Object *radio, *parent;

// Create a radio
radio = elm_radio_add(parent);

// Set a label to it
elm_object_text_set(radio, &quot;Radio component&quot;);
</pre>

<p>Set an icon to the radio object.</p>
<pre class="prettyprint">
// Create a Home icon 
Evas_Object *icon;

icon = elm_icon_add(parent);
elm_icon_standard_set(icon, &quot;home&quot;);

// Set it to the radio component 
elm_object_part_content_set(radio, &quot;icon&quot;, icon);
</pre>

<h3>Changing the Radio Value</h3>

<p>The user can select one of a set of values with the radio component. Each radio object from a group of radio objects represents an integer value. Here the value 1 is set to the new radio object.</p>
<pre class="prettyprint">
elm_radio_state_value_set(radio, 1);
</pre>

<h3>Managing the Radio Groups</h3>

<p>The following example shows how to create a group of radio objects with at least two radio components.</p>

<pre class="prettyprint">
// Create another radio object 
Evas_Object *radio2 = elm_radio_add(parent);
elm_radio_state_value_set(radio2, 2);

// Create a group composed of radio and radio2
Evas_Object *group = radio;
elm_radio_group_add(radio2, group);
</pre>

<p>Now that a group composed of two radio objects has been created, you can choose which one is selected. In this example radio2 is selected.</p>

<pre class="prettyprint">
elm_radio_value_set(group, 2);
</pre>

<p>You can use <span style="font-family: Courier New,Courier,monospace">elm_radio_value_get()</span> to see the currently selected radio of the group.</p>

<h3>Using the Radio Callbacks</h3>

<p>When the state of a radio is modified in a group of radio objects, the <span style="font-family: Courier New,Courier,monospace">changed</span> signal is emitted.</p>
<p>The following example shows how to register a callback on this signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(radio, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the radio value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The value has changed\n&quot;);
}
</pre>

			
				<h2 id="segmentcontrol" name="segmentcontrol">Segmentcontrol</h2>
 
<p class="figure">Figure: Segmentcontrol with text</p> 
<p align="center"><img alt="Segmentcontrol with text" src="../../images/segment_text.png" /></p>
      
<p class="figure">Figure: Segmentcontrol with icons</p> 
<p align="center"><img alt="Segmentcontrol with icons" src="../../images/segment.png" /></p>
  
<p class="figure">Figure: Segmentcontrol hierarchy</p> 
<p align="center"><img alt="Segmentcontrol hierarchy" src="../../images/segment_control_tree.png" /></p>
 
<p>This UI component consists of several segment items. A segment item is similar to a discrete two state button. Any time, only one segment item can be selected. A segment item is composed of a label (text) and an icon.</p>
<p>This UI component inherits from the layout component, so all the layout components API can be used on segmentcontrol objects.</p>

<h3>Adding a Segmentcontrol Component</h3>

<p>The following example shows how to add a segmentcontrol component.</p>

<pre class="prettyprint">
Evas_Object *segcontrol, *parent;

segcontrol = elm_segment_control_add(parent);
</pre>

<h3>Adding Items</h3>

<p>You can add items to the UI component. In the following example four items containing only text labels (no icons) are added.</p>
<pre class="prettyprint">
Elm_Object_Item *it;

elm_segment_control_item_add(segcontrol, NULL, &quot;item1&quot;);
elm_segment_control_item_add(segcontrol, NULL, &quot;item2&quot;);
elm_segment_control_item_add(segcontrol, NULL, &quot;item3&quot;);
it = elm_segment_control_item_add(segcontrol, NULL, &quot;item4&quot;);
</pre>

<p>You can also:</p>
<ul>
<li>Insert an item at a specific position starting at 0.
<pre class="prettyprint">
elm_segment_control_item_insert_at(segcontrol, NULL, &quot;item7&quot;, 2);
</pre></li>

<li>Delete an item.
<pre class="prettyprint">
elm_segment_control_item_del_at(segcontrol, 2);
</pre></li>

<li>Set the selected state of an item manually.
<pre class="prettyprint">
elm_segment_control_item_selected_set(it, EINA_TRUE);
</pre></li>
<li>Disable the whole segment control.
<pre class="prettyprint">elm_object_disabled_set(segcontrol, EINA_TRUE);</pre></li>
</ul>

<h3>Using the Segmentcontrol Callbacks</h3>

<p>This is how to register a callback on the <span style="font-family: Courier New,Courier,monospace">changed</span>signal. It is called when the user clicks on a segment item which is not previously selected. The <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter is the segment item pointer.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(segcontrol, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the segcontrol selected item changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Segment_Item *it = event_info;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The selected segment item has changed\n&quot;);
}
</pre>

		
				<h2 id="slider" name="slider">Slider</h2>

<p class="figure">Figure: Slider component</p> 
<p align="center"><img alt="Slider component" src="../../images/slider.png" /></p>
      
<p class="figure">Figure: Slider hierarchy</p> 
<p align="center"><img alt="Slider hierarchy" src="../../images/slider_tree.png" /></p>

<p> The slider component is a draggable bar that is used to select a value within a certain range.</p>

<h3>Adding a Slider Component</h3>

<p>The following example shows how to create a slider object.</p>
<pre class="prettyprint">
Evas_Object *slider, *parent;

slider = elm_slider_add(parent);
</pre>

<h3>Using the Slider Styles</h3>

<p>A slider has the following styles:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">default</span></li>
<li><span style="font-family: Courier New,Courier,monospace">center_point</span></li>
</ul>

<p>The following example sets the style to <span style="font-family: Courier New,Courier,monospace">center_point</span>.</p>
<pre class="prettyprint">
elm_object_style_set(slider, &quot;center_point&quot;);
</pre>

<p>With this style, the slider <span style="font-family: Courier New,Courier,monospace">0</span> point is in the middle of the UI component.</p>

<h3>Configuring the Slider</h3>

<p>The orientation is set with the <span style="font-family: Courier New,Courier,monospace">elm_slider_horizontal_set()</span> function, and it is inverted the same way as the progressbar component. In the following example it is set to vertical and inverted.</p>
<pre class="prettyprint">
elm_slider_horizontal_set(slider, EINA_FALSE);
elm_slider_inverted_set(slider, EINA_TRUE);
</pre>

<p>The slider can contain icons (<span style="font-family: Courier New,Courier,monospace">icon</span> and <span style="font-family: Courier New,Courier,monospace">end</span> partnames), a label, a unit label, and an indicator label.</p>
<pre class="prettyprint">
Evas_Object *icon1, *icon2;

// Set the icons 
elm_object_part_content_set(slider, &quot;icon&quot;, icon1);
elm_object_part_content_set(slider, &quot;end&quot;, icon2);

// Set the label 
elm_object_part_text_set(slider, &quot;default&quot;, &quot;slider label&quot;);

// Set the unit format 
elm_slider_unit_format_set(slider, &quot;%1.2f meters&quot;);
</pre>

<p>Before using the slider, its minimum and maximum values are set with <span style="font-family: Courier New,Courier,monospace">elm_slider_min_max_set()</span>. The current value is set with (<span style="font-family: Courier New,Courier,monospace">elm_slider_value_set()</span>). The following example sets the minimum value to 0, the maximum value to 100, and the current value to 50.</p>
<pre class="prettyprint">
elm_slider_min_max_set(slider, 0.0, 100.0);
elm_slider_value_set(slider, 50.0);
</pre>

<p>The span of the slider represents its length horizontally or vertically. It is set with <span style="font-family: Courier New,Courier,monospace">elm_slider_span_size_set()</span> and is scaled by the object or applications scaling factor.</p>
<p>You can retrieve the current value of the slider anytime.</p>
<pre class="prettyprint">
double value = elm_slider_value_get(slider);
</pre>

<p>By default, the slider indicator becomes bigger when the user drags it. This can be disabled if you want the slider indicator to keep its default size. The following example sets the state of the indicator enlargement and then inverts the behavior.</p>
<pre class="prettyprint">
// Get the current state of the indicator 
Eina_Bool enlarge = elm_slider_indicator_show_get(slider);

// Invert the behavior 
elm_slider_indicator_show_set(slider, !enlarge);
</pre>
 
<h3>Using the Slider Callbacks</h3>

<p>This UI component emits the following signals:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">changed</span>: The user changes the slider value.</li>
<li><span style="font-family: Courier New,Courier,monospace">slider,drag,start</span>: Dragging the slider indicator around starts.</li>
<li><span style="font-family: Courier New,Courier,monospace">slider,drag,stop</span>: Dragging the slider indicator around stops.</li>
<li><span style="font-family: Courier New,Courier,monospace">delay,changed</span>: A short time after the user changes the value. This is called only when the user stops dragging for a very short period or when releases the finger or mouse, so that it avoids possibly expensive reactions to the value change.</li>
</ul>

<p>For all these signals, <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>
<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">changed</span> signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(slider, &quot;changed&quot;, changed_cb, data);
}

// Callback function for the &quot;changed&quot; signal
// This callback is called when the slider value changes
void changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The slider has changed\n&quot;);
}
</pre>
 
				<h2 id="spinner" name="spinner">Spinner</h2>
				
				
<p class="figure">Figure: Spinner component</p> 
<p align="center"><img alt="Spinner component" src="../../images/spin.png" /></p>
      
<p class="figure">Figure: Spinner hierarchy</p> 
<p align="center"><img alt="Spinner hierarchy" src="../../images/spinner_tree.png" /></p>

<p> The spinner component increases or decreases a numeric value with the arrow buttons.</p>

<p>This UI component inherits from the layout component, so all functions concerning the layout component are used on the spinner component.</p>

<h3>Adding a Spinner Component</h3>
<p>The following example shows how to create a spinner object.</p>

<pre class="prettyprint">
Evas_Object *spin, *parent;

spin = elm_spinner_add(parent);
</pre>

<h3>Configuring the Spinner</h3>

<p>The label format is set to a different value:</p>
<pre class="prettyprint">
elm_spinner_label_format_set(spin, &quot;%1.2f meters&quot;);
</pre>

<p>You can determine the result of clicking the arrow buttons. In this example, a click on an arrow increases or decreases with 2.0 units:</p>
<pre class="prettyprint">
elm_spinner_step_set(spin, 2.0);
</pre>
<p>The wrapping mode is activated. In this mode, the spinner wraps when it reaches its minimum or maximum value.</p>
<pre class="prettyprint">
elm_spinner_wrap_set(spin, EINA_TRUE);
</pre>

<p>You can set the minimum and maximum values of the spinner.</p>
<pre class="prettyprint">
elm_spinner_min_max_set(spin, -25.0, 100.0);
</pre>

<p>The spinner object can be set vertical, and the change interval when the user presses the arrows long can be modified so that it changes faster.</p>
<pre class="prettyprint">
elm_object_style_set(spin, &quot;vertical&quot;);
elm_spinner_interval_set(spin, 0.1);
</pre>

<p>If the user has to select between text values instead of numerical values, it is possible to add our own text labels. Here spin2 object shows three numbers written in text characters.</p>
<pre class="prettyprint">Evas_Object *spin2 = elm_spinner_add(parent);
elm_spinner_min_max_set(spin2, 1, 3);
elm_spinner_special_value_add(spin2, 1, &quot;One&quot;);
elm_spinner_special_value_add(spin2, 2, &quot;Two&quot;);
elm_spinner_special_value_add(spin2, 3, &quot;Three&quot;);
</pre>

<h3>Using the Spinner Callbacks</h3>

<p>This UI component emits the following signals:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">changed</span>: The spinner value changes.</li>
<li><span style="font-family: Courier New,Courier,monospace">delay,changed</span>: A short time after the user changes the value. This is called only when the user stops dragging for a very short period or releases the finger or mouse, so that it avoids possibly expensive reactions to the value change.</li>
</ul>

<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">delay,changed</span> signal.</p>

<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(spin, &quot;delay,changed&quot;, delay_changed_cb, data);
}

// Callback function for the &quot;delay,changed&quot; signal
// This callback is called a short time after the spinner value changes
void delay_changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;The spinner value has changed\n&quot;);
}
</pre>
	
				<h2 id="toolbar_component" name="toolbar_component">Toolbar</h2>

    <p class="figure">Figure: Toolbar component</p> 
  <p align="center"><img alt="toolbar component" src="../../images/toolbar.png" /></p> 
  
      <p class="figure">Figure: Toolbar hierarchy</p> 
  <p align="center"><img alt="Toolbar hierarchy" src="../../images/toolbar_tree.png" /></p> 

  
<p> This UI component is a scrollable list of items and shows a menu when an item is selected. Only one item can be selected at a time.</p>

<h3>Adding and Configuring a Toolbar Component</h3>

<p>Use the following function to create a toolbar.</p>
<pre class="prettyprint">
Evas_Object *toolbar, *parent;

toolbar = elm_toolbar_add(parent);
</pre>

<h3>Using the Toolbar Styles</h3>
<p>The toolbar has the following styles:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">default</span></li>
<li><span style="font-family: Courier New,Courier,monospace">tabbar</span></li>
<li><span style="font-family: Courier New,Courier,monospace">tabbar_with_title</span></li>
<li><span style="font-family: Courier New,Courier,monospace">navigationbar</span></li>
</ul>
<p>The following example sets the style to <span style="font-family: Courier New,Courier,monospace">navigationbar</span>.</p>
<pre class="prettyprint">
elm_object_style_set(toolbar, &quot;navigationbar&quot;);
</pre>

<h3>Configuring the Toolbar</h3>
<p>The toolbar displays its items in one of the following options.</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_NONE</span>: The toolbar sets a minimum size to its items so that all of them fit without scrolling.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_HIDE</span>: The toolbar does not scroll or show the items that do not fit in.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_SCROLL</span>: The toolbar scrolls to show the items that do not fit in.</li>
<li><span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_MENU</span>: The toolbar creates a button to popup hidden items.</li>
</ul>

<p>Here the toolbar is set to <span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_NONE</span>.</p>
<pre class="prettyprint">
elm_toolbar_shrink_mode_set(toolbar, ELM_TOOLBAR_SHRINK_NONE);
</pre>
<p>By default, the toolbar displays items homogeneously. Items with long labels occupy a lot of space. To avoid that, you can disable the homogeneous mode.</p>
<pre class="prettyprint">
elm_toolbar_homogeneous_set(toolbar, EINA_FALSE);
</pre>

<h3>Adding Items to the Toolbar</h3>
<p>The following example shows how to add two items and choose the associated icon, label, and function to call when the item is clicked.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *home_it, *help_it;

&nbsp;&nbsp;&nbsp;home_it = elm_toolbar_item_append(toolbar, &quot;home&quot;, &quot;Home&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_home_item_pressed_cb, NULL);
&nbsp;&nbsp;&nbsp;help_it = elm_toolbar_item_append(toolbar, &quot;help&quot;, &quot;Help&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
}

static void
_home_item_pressed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Home item clicked \n&quot;);
}

static void
_help_item_pressed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Help item clicked \n&quot;);
}
</pre>

<p>An item can be disabled. This is how to disable the help item. The disabled item does not receive input and, if the theme supports it, is themed differently (usually greyed out) from its normal state.</p>
<pre class="prettyprint">
elm_object_item_disabled_set(help_it, EINA_TRUE);
</pre>

<h3>Adding Items with States</h3>
<p>Items have two or more states. Each state has its own icon, label, and function to call when an item is clicked. The following example shows how to create two states to the help item with the same icon but two different labels.</p>
<pre class="prettyprint">
elm_toolbar_item_state_add(help_it, &quot;help&quot;, &quot;Help state 1&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
elm_toolbar_item_state_add(help_it, &quot;help&quot;, &quot;Help state 2&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_help_item_pressed_cb, NULL);
</pre>
<p>It is possible to cycle through the states of the help item by using the following code.</p>
<pre class="prettyprint">
elm_toolbar_item_state_set(help_it, elm_toolbar_item_state_next(help_it));
</pre>

<h3>Using the Toolbar Callbacks</h3>
<p>This UI component emits the following signals:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">clicked</span>: The user clicks on a toolbar item, which is selected. <span style="font-family: Courier New,Courier,monospace">event_info</span> is an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar_Item</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">clicked,double</span>: The user double-clicks on a toolbar item. <span style="font-family: Courier New,Courier,monospace">event_info</span> is an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar_Item</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">longpressed</span>: The toolbar is pressed for a certain amount of time. <span style="font-family: Courier New,Courier,monospace">event_info</span> is an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar_Item</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">language,changed</span>: The program language changes.</li>
<li><span style="font-family: Courier New,Courier,monospace">item,focused</span>: The item is highlighted. <span style="font-family: Courier New,Courier,monospace">event_info</span> is an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar_Item</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">item,unfocused</span>: The highlight is removed from the item. <span style="font-family: Courier New,Courier,monospace">event_info</span> is an object of the type <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar_Item</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">scroll</span>: The toolbar scrolls. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">scroll,anim,start</span>: The toolbar scrolling animation starts. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span>: The toolbar scrolling animation stops. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">scroll,drag,start</span>: The user starts dragging the toolbar. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
<li><span style="font-family: Courier New,Courier,monospace">scroll,drag,stop</span>: The user stops dragging the toolbar. <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</li>
</ul>
<p>The following example shows how to register a callback on the <span style="font-family: Courier New,Courier,monospace">clicked</span> signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(toolbar, &quot;clicked&quot;, clicked_cb, data);
}

// Callback function for the &quot;clicked&quot; signal
// This callback is called when a toolbar item is clicked
void clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Elm_Toolbar_Item * item = event_info;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Item clicked\n&quot;);
}
</pre>

				<h2 id="tooltip" name="tooltip">Tooltip</h2>

<p>The tooltip component is a smart object that shows a content in a frame when mouse hovers a parent object. The UI component provides tips or information about the parent object.</p>

<h3>Adding a Tooltip</h3>
<p>The tooltip component cannot be created with the <span style="font-family: Courier New,Courier,monospace">elm_tooltip_add()</span> function. This component is already contained in a parent component when it is created. You can only activate or disable it.</p>

<h3>Activating the Tooltip</h3>
<p>To activate the tooltip on a parent object, you can set a tooltip text to the parent object.</p>
<pre class="prettyprint">
Evas_Object *parent;

elm_object_tooltip_text_set(parent, &quot;The tooltip text&quot;;
</pre>
<p>You can also set a content to the parent object.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;elm_object_tooltip_content_cb_set(parent, tooltip_content_cb, NULL, tooltip_content_del_cb);
}

Evas_Object*
tooltip_content_cb(void*data, Evas_Object *obj, Evas_Object *tooltip)
{
&nbsp;&nbsp;&nbsp;// Create the tooltip content 
}

void tooltip_content_del_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Destroy the tooltip content 
}
</pre>

<p>When passing content to the tooltip, the <span style="font-family: Courier New,Courier,monospace">tooltip_content_cb</span> function is called each time the tooltip is showed. The role of this function is to create the content to set in the tooltip. It returns a pointer to an <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>
<p>When the tooltip disappears, the <span style="font-family: Courier New,Courier,monospace">tooltip_content_del_cb</span> function is called. This function is in charge of deleting the previously allocated <span style="font-family: Courier New,Courier,monospace">Evas_Object</span>.</p>
<p>Once set, the tooltip can be manually hidden or shown.</p>

<pre class="prettyprint">
elm_object_tooltip_hide(parent);
elm_object_tooltip_show(parent);
</pre>

<p>The tooltip can be removed from the parent object when it is not needed.</p>
<pre class="prettyprint">
elm_object_tooltip_unset(parent);
</pre>

  <table class="note"> 
   <tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">When content is set into the tooltip object, unsetting it calls the callback provided as <span style="font-family: Courier New,Courier,monospace">del_cb</span> to notify that the tooltip cannot be used any longer.</td> 
    </tr> 
   </tbody> 
  </table> 

<p>A tooltip object is not a UI component, so it does not emit signals. There are no registered callbacks for it.</p>


				<h2 id="win" name="win">Win</h2>

    <p class="figure">Figure: Win hierarchy</p> 
  <p align="center"><img alt="Win hierarchy" src="../../images/win_tree.png" /></p>   
 

<p>The window component is the root UI component that is often used in an application. It allows the developer create content in it, and it is handled by the window manager.</p>
<p>The window component is created with the <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> or <span style="font-family: Courier New,Courier,monospace">elm_win_util_standard_add()</span> function. The content can be added in the window with <span style="font-family: Courier New,Courier,monospace">elm_win_resize_object_add()</span> so that a window resize also resizes the content inside.</p>

<h3>Adding a Window Component</h3>

<p>Create a new window and change the title.</p>
<pre class="prettyprint">
Evas_Object *window;

// Create a window 
window = elm_win_add(NULL, &quot;main&quot;, ELM_WIN_BASIC);

// Change the window title 
elm_win_title_set(window, &quot;Example Window&quot;);
</pre>

<p>The first element of <span style="font-family: Courier New,Courier,monospace">elm_win_add()</span> is the parent window. For example, for a dialog you want to have the main window as the parent. Here, it is <span style="font-family: Courier New,Courier,monospace">NULL</span>, meaning there is no parent. <span style="font-family: Courier New,Courier,monospace">main</span> is the name of the window used by the window manager for identifying the window uniquely amongst all the windows within this application (and all instances of the application). The type is a basic window (the final parameter).</p>

<p>Create a new window with a title and a background. This API is a shortcut of the previous one. It also creates a standard background to the window with <span style="font-family: Courier New,Courier,monospace">elm_bg_add()</span>. The window created is of the type <span style="font-family: Courier New,Courier,monospace">ELM_WIN_BASIC</span>.</p>

<pre class="prettyprint">
Evas_Object *window;

// Create a standard window 
window = elm_win_util_standard_add(&quot;main&quot;, &quot;Example Window&quot;);
</pre>

<h3>Closing a Window</h3>
<p>When the user closes the window outside of the program control, a <span style="font-family: Courier New,Courier,monospace">delete,request</span> signal is emitted to indicate that this event occurred. The developer can take any action, for example, destroy the window object.</p>
<p>When the autodel parameter is set, the window is automatically destroyed after the signal is emitted. If autodel is <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>, the window is not destroyed and the program does so when required. The default is <span style="font-family: Courier New,Courier,monospace">EINA_FALSE</span>, where the window is not destroyed automatically.</p>
<p>The autodel is set using the following call:</p>
<pre class="prettyprint">
elm_win_autodel_set(window, EINA_TRUE);
</pre>

<p>To close the window, use the <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> function. The window is destroyed and the signal <span style="font-family: Courier New,Courier,monospace">delete,request</span> is sent.</p>

<h3>Using the Window Callbacks</h3>
<p>The window component emits the following signals:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">focus,in</span>: The window received focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">focus,out</span>: The window lost focus.</li>
<li><span style="font-family: Courier New,Courier,monospace">moved</span>: The window that holds the canvas is moved.</li>
<li><span style="font-family: Courier New,Courier,monospace">withdrawn</span>: The window is managed normally but is removed from the view.</li>
<li><span style="font-family: Courier New,Courier,monospace">iconified</span>: The window is minimized (for example, into an icon or a taskbar).</li>
<li><span style="font-family: Courier New,Courier,monospace">normal</span>: The window is in the normal state (not withdrawn or iconified).</li>
<li><span style="font-family: Courier New,Courier,monospace">stick</span>: The window shows on all desktops.</li>
<li><span style="font-family: Courier New,Courier,monospace">unstick</span>: The window shows only on one desktop.</li>
<li><span style="font-family: Courier New,Courier,monospace">fullscreen</span>: The window is fullscreen.</li>
<li><span style="font-family: Courier New,Courier,monospace">unfullscreen</span>: The window stops being fullscreen.</li>
<li><span style="font-family: Courier New,Courier,monospace">maximized</span>: The window is maximized.</li>
<li><span style="font-family: Courier New,Courier,monospace">unmaximized</span>: The window is diminished.</li>
<li><span style="font-family: Courier New,Courier,monospace">wm,rotation,changed</span>: The rotation of the window is changed by the Windows Manager.</li>
<li><span style="font-family: Courier New,Courier,monospace">ioerr</span>: A low-level I/O error occurred in the display system.</li>
</ul>
<p>With all these signals, <span style="font-family: Courier New,Courier,monospace">event_info</span> is <span style="font-family: Courier New,Courier,monospace">NULL</span>.</p>
<p>The following example registers a callback function called on the <span style="font-family: Courier New,Courier,monospace">fullscreen</span> signal.</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(window, &quot;fullscreen&quot;, fullscreen_cb, data);
}

// Callback function for the &quot;fullscreen&quot; signal
// This callback is called when the window becomes fullscreen
void fullscreen_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Window fullscreen\n&quot;);
}
</pre>

<table class="note">
    <tbody>
        <tr>
            <th class="note">Note</th>
        </tr>
        <tr>
            <td class="note">Except as noted, this content is licensed under <a href="http://opensource.org/licenses/LGPL-2.1" target="_blank">LGPLv2.1+</a>.</td>
        </tr>
    </tbody>
</table>

<script type="text/javascript" src="../../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div> 

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

