<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>The (Circle) Sensors Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>(Circle) Sensors Sample Overview</h1>

<p>The (Circle) Sensors sample application demonstrates how you can handle the <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">Sensor</a> API and get data from the device sensors.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the (Circle) Sensors: main and settings screens.</p>

<p class="figure">Figure: (Circle) Sensors screens</p>
  <p align="center"><img alt="(Circle) Sensors views" src="../images/circlesensors_wn0.png" /> <img alt="(Circle) Sensors views" src="../images/circlesensors_wn1.png" /></p>

<p>Click the gear wheel button to enter the settings view. In the settings view, the user can select which device sensors they want to monitor. In this sample, at most 4 sensors can be monitored simultaneously.</p>

<p class="figure">Figure: (Circle) Sensors UI component structure</p>
  <p align="center"><img alt="(Circle) Sensors UI component structure" src="../images/circlesensors_wn2.png"/>
  </p>

<h2>Implementation</h2>

<p>The controller is the most essential module in the sample application. It initializes the sensors with the <span style="font-family: Courier New,Courier,monospace">device_sensors_init()</span>
function:</p>

<ol><li>
<p>The <span style="font-family: Courier New,Courier,monospace">device_sensors_init()</span>
function makes necessary setup of the module&#39;s static array: <span style="font-family: Courier New,Courier,monospace">available_sens_descr</span>. The <span style="font-family: Courier New,Courier,monospace">sens_descr</span> helper array contains <span style="font-family: Courier New,Courier,monospace">sensor_description_s</span> type objects defined in the application. Each object of this type consist of:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">sensor_type_e</span> API type enumeration - a unique sensor identifier</li>
<li>Full sensor name</li>
<li>Sensor name abbreviation</li>
<li>Sensor maximum and minimum value</li>
</ul>

<pre class="prettyprint">
const static 
sensor_description_s sens_descr[SENSOR_LAST] = 
{
&nbsp;&nbsp;&nbsp;{SENSOR_ACCELEROMETER, &quot;Accelerometer&quot;, &quot;ACC&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_GRAVITY, &quot;Gravity sensor&quot;, &quot;GRAV&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_LINEAR_ACCELERATION, &quot;Linear acceleration sensor&quot;, &quot;LINA&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_MAGNETIC, &quot;Magnetic sensor&quot;, &quot;MAG&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_ROTATION_VECTOR, &quot;Rotation Vector sensor&quot;, &quot;ROT&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_ORIENTATION, &quot;Orientation sensor&quot;, &quot;ORI&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_GYROSCOPE, &quot;Gyroscope sensor&quot;, &quot;GYRO&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_LIGHT, &quot;Light sensor&quot;, &quot;L&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_PROXIMITY, &quot;Proximity sensor&quot;, &quot;PROX&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_PRESSURE, &quot;Pressure sensor&quot;, &quot;PRES&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_ULTRAVIOLET, &quot;Ultraviolet sensor&quot;, &quot;UV&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_TEMPERATURE, &quot;Temperature sensor&quot;, &quot;TEMP&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_HUMIDITY, &quot;Humidity sensor&quot;, &quot;HUM&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_HRM, &quot;Heart Rate Monitor sensor&quot;, &quot;HRT&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_HRM_LED_GREEN, &quot;HRM (LED Green) sensor&quot;, &quot;HRTG&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_HRM_LED_IR, &quot;HRM (LED IR) sensor&quot;, &quot;HRTI&quot;, 0.0, 0.0},
&nbsp;&nbsp;&nbsp;{SENSOR_HRM_LED_RED, &quot;HRM (LED RED) sensor&quot;, &quot;HRTR&quot;, 0.0, 0.0}
};

static sensor_description_s *available_sens_descr[SENSOR_LAST + 1] = {NULL,};
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">device_sensors_init()</span> function iterates over all known sensor types and checks whether they are supported on the current device. If so, the sensor handle is obtained (<span style="font-family: Courier New,Courier,monospace">sensor_get_default_sensor()</span>) and a listener is created (<span style="font-family: Courier New,Courier,monospace">sensor_create_listener()</span>).</p>
<pre class="prettyprint">
bool 
device_sensors_init(sensor_event_cb cb)
{
&nbsp;&nbsp;&nbsp;// Variable declarations

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; SENSOR_LAST; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (SENSOR_ERROR_NONE == sensor_is_supported(sens_descr[i].type, &amp;supported) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;supported) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (SENSOR_ERROR_NONE != sensor_get_default_sensor(sens_descr[i].type, &amp;sensor)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (SENSOR_ERROR_NONE != sensor_create_listener(sensor, &amp;listener)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre></li>

<li><p>The sensor listener is bound with a callback function
(the sole parameter of the <span style="font-family: Courier New,Courier,monospace">device_sensors_init()</span> function), which is called each time sensor data is ready to be obtained.</p>
<p>You can pass a time interval value to the <span style="font-family: Courier New,Courier,monospace">sensor_listener_set_event_cb()</span> function. It defines an interval at which the listener object polls the bound sensor. You can set this value to anything between 10 and 1000 ms.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (SENSOR_ERROR_NONE != sensor_listener_set_event_cb(listener, POLL_INTERVAL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cb, (void *)sens_descr[i].type))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
</pre>
</li>
<li><p>With the <span style="font-family: Courier New,Courier,monospace">sensor_listener_set_option()</span> function, the sensor listener is set to be active even when the watch screen is off.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_listener_set_option(listener, SENSOR_OPTION_ON_IN_SCREEN_OFF);
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">sensor_get_min_range()</span> and
<span style="font-family: Courier New,Courier,monospace">sensor_get_max_range()</span> functions are used to get the expected sensor minimum and maximum reading values. These values are stored in the respective elements of the <span style="font-family: Courier New,Courier,monospace">sens_descr</span> array.</p>
<p>Once the loop is over, the <span style="font-family: Courier New,Courier,monospace">available_sens_descr</span> array contains pointers to the <span style="font-family: Courier New,Courier,monospace">sensor_description_s</span> structures which describe all available sensors.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_min_range(sensor, (float *)&amp;sens_descr[i].min_range);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_max_range(sensor, (float *)&amp;sens_descr[i].max_range);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;available_sens_descr[j++] = (sensor_description_s *)sens_descr + i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sens_listeners[sens_descr[i].type] = listener;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return initiated = true;
}
</pre></li></ol>

<p>To start or stop listening to sensor data, the client module calls the <span style="font-family: Courier New,Courier,monospace">device_sensors_start_listening()</span> or <span style="font-family: Courier New,Courier,monospace">device_sensors_stop_listening()</span> function
and passes a sensor identifier to it:</p>

<pre class="prettyprint">
bool 
device_sensors_start_listening(const sensor_type_e sensor)
{
&nbsp;&nbsp;&nbsp;if (sensor &lt; SENSOR_ACCELEROMETER || sensor &gt;= SENSOR_LAST)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;sensor_listener_start(sens_listeners[sensor]);

&nbsp;&nbsp;&nbsp;return true;
}

void 
device_sensors_stop_listening(const sensor_type_e sensor)
{
&nbsp;&nbsp;&nbsp;if (sensor &lt; SENSOR_ACCELEROMETER || sensor &gt;= SENSOR_LAST)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;sensor_listener_stop(sens_listeners[sensor]);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
