<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Rotary Timer Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>(Circle) Rotary Timer Sample Overview</h1> 
  
<p>The (Circle) Rotary Timer sample application demonstrates how you can implement a circular digital clock with a timer function in your application.</p>

<p>The following figure illustrates the main views of the (Circle) Rotary Timer sample application.</p>

<p class="figure">Figure: (Circle) Rotary Timer main views</p> 
  <p align="center"><img alt="(Circle) Rotary Timer main views" src="../images/rotary_timer.png" /> <img alt="(Circle) Rotary Timer main views" src="../images/rotary_timer_set.png" /></p>

<p>Click the hour, minute, and second values to set up the timer. To start the timer, click <strong>START</strong>.</p>  
<p>The timer is stops when the number in the digital clock is reduced to 0. To set another time, click <strong>RESET</strong>.</p>
  
<h2>Implementation</h2>
<p>To implement the circular rotary timer:</p>
<ol>
<li>Add the required header file and callbacks. 
<p>To use the rotary function, the application must include the <span style="font-family: Courier New,Courier,monospace">efl_extension.h</span> header file. To detect rotary events, add the necessary callback functions.</p>

<pre class="prettyprint">eext_rotary_object_event_activated_set(ad-&gt;layout, EINA_TRUE);
eext_rotary_object_event_callback_add(ad-&gt;layout, _rotary_cb, ad);</pre>

</li>

<li>Create the layout for the timer preview. 
<p>Use the <span style="font-family: Courier New,Courier,monospace">_layout_create()</span> function to create the main layout of the application, and add a digital clock to display the timer preview.</p>

<pre class="prettyprint">static Evas_Object *
_layout_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;_D(&quot;Layout create&quot;);
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;

&nbsp;&nbsp;&nbsp;retv_if(!ad, NULL);

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;retv_if(!layout, NULL);

&nbsp;&nbsp;&nbsp;main_get_resource_path(ad);

&nbsp;&nbsp;&nbsp;// ad-&gt;timer_edj_path == app_get_resource_path() + /edje/timer.edj
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ad-&gt;timer_edj_path, GRP_MAIN);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(layout, EEXT_CALLBACK_BACK, layout_back_cb, ad);

&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, layout);
&nbsp;&nbsp;&nbsp;ad-&gt;layout = layout;

&nbsp;&nbsp;&nbsp;_start_btn_create(ad);
&nbsp;&nbsp;&nbsp;retv_if(!ad-&gt;start_btn, NULL);

&nbsp;&nbsp;&nbsp;digital_create(ad);

&nbsp;&nbsp;&nbsp;rotary_init(ad);

&nbsp;&nbsp;&nbsp;evas_object_show(layout);

&nbsp;&nbsp;&nbsp;return layout;
}</pre>
</li>

<li>Initialize the application and set the timer. 
<p>Use the <span style="font-family: Courier New,Courier,monospace">digital_create()</span> function to create the digital clock and set the quantity of time for the timer.</p>

<pre class="prettyprint">void 
digital_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;_D(&quot;Digital create&quot;);
&nbsp;&nbsp;&nbsp;Evas_Object *left_col = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *right_col = NULL;

&nbsp;&nbsp;&nbsp;ad-&gt;hour_ly = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;hour_ly);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(ad-&gt;hour_ly, ad-&gt;timer_edj_path, &quot;hour&quot;);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;hour_ly, EVAS_CALLBACK_MOUSE_DOWN, _hour_selected_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;hour&quot;, ad-&gt;hour_ly);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;hour_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;hour_ly);

&nbsp;&nbsp;&nbsp;ad-&gt;minute_ly = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;minute_ly);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(ad-&gt;minute_ly, ad-&gt;timer_edj_path, &quot;minute&quot;);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;minute_ly, EVAS_CALLBACK_MOUSE_DOWN, _minute_selected_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;minute&quot;, ad-&gt;minute_ly);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;minute_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;minute_ly);

&nbsp;&nbsp;&nbsp;ad-&gt;second_ly = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;second_ly);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(ad-&gt;second_ly, ad-&gt;timer_edj_path, &quot;second&quot;);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;second_ly, EVAS_CALLBACK_MOUSE_DOWN, _second_selected_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;second&quot;, ad-&gt;second_ly);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;second_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;second_ly);

&nbsp;&nbsp;&nbsp;left_col = elm_image_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!left_col);
&nbsp;&nbsp;&nbsp;elm_image_file_set(left_col, ad-&gt;timer_control_dot_path, NULL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(left_col, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(left_col, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;left_colon&quot;, left_col);

&nbsp;&nbsp;&nbsp;right_col = elm_image_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!right_col);
&nbsp;&nbsp;&nbsp;elm_image_file_set(right_col, ad-&gt;timer_control_dot_path, NULL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(right_col, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(right_col, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;right_colon&quot;, right_col);
}</pre>

</li>

<li>Start the timer. 
<p>The <span style="font-family: Courier New,Courier,monospace">_start_clicked_cb()</span> callback starts the timer. When you click <strong>START</strong>, the application calculates the quantity of time using the <span style="font-family: Courier New,Courier,monospace">_calc_setting_time()</span> function and displays the total time. The <span style="font-family: Courier New,Courier,monospace">_timer_start_cb()</span> function is called every second to reduce the number in the digital clock.</p>

<pre class="prettyprint">static void 
_start_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;if (ad-&gt;timer) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_reset_clicked_cb(ad);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ad-&gt;setting_time = _calc_setting_time(ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;setting_time);

&nbsp;&nbsp;&nbsp;ad-&gt;img_num = 60; 

&nbsp;&nbsp;&nbsp;progress_count = (ad-&gt;setting_time/ad-&gt;img_num);
&nbsp;&nbsp;&nbsp;ad-&gt;selected = NULL;

&nbsp;&nbsp;&nbsp;// Make the digital clock unclickable
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;hour_ly, &quot;hour_deselected&quot;, &quot;hour&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;minute_ly, &quot;minute_deselected&quot;, &quot;minute&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;second_ly, &quot;second_deselected&quot;, &quot;second&quot;);

&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;start_btn_ly, &quot;timer_start&quot;, &quot;btn&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;layout, &quot;timer_start&quot;, &quot;bg&quot;);

&nbsp;&nbsp;&nbsp;// Reduce 1 second every second
&nbsp;&nbsp;&nbsp;ad-&gt;timer = ecore_timer_add(1.0f, _timer_start_cb, ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;timer);
&nbsp;&nbsp;&nbsp;ad-&gt;progress_timer = ecore_timer_add(progress_count, _progress_start_cb, ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;progress_timer);
&nbsp;&nbsp;&nbsp;_progress_start_cb(ad);
}

static Eina_Bool 
_timer_start_cb(void *data)
{
&nbsp;&nbsp;&nbsp;// Get the previous time
&nbsp;&nbsp;&nbsp;pre_second_time = elm_object_part_text_get(ad-&gt;second_ly, &quot;val&quot;);
&nbsp;&nbsp;&nbsp;post_second_time = atoi(pre_second_time);
&nbsp;&nbsp;&nbsp;pre_minute_time = elm_object_part_text_get(ad-&gt;minute_ly, &quot;val&quot;);
&nbsp;&nbsp;&nbsp;post_minute_time = atoi(pre_minute_time);
&nbsp;&nbsp;&nbsp;pre_hour_time = elm_object_part_text_get(ad-&gt;hour_ly, &quot;val&quot;);
&nbsp;&nbsp;&nbsp;post_hour_time = atoi(pre_hour_time);
&nbsp;&nbsp;&nbsp;// Reduce 1 second
&nbsp;&nbsp;&nbsp;if (post_second_time == 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (post_minute_time == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_second_time = 59;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_minute_time = 59;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_hour_time = post_hour_time - 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_second_time = 59;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_minute_time = post_minute_time - 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;post_second_time = post_second_time - 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Display the new time
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;hour_ly, &quot;val&quot;, hour_val);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;minute_ly, &quot;val&quot;, minute_val);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;second_ly, &quot;val&quot;, second_val);
		
&nbsp;&nbsp;&nbsp;ad-&gt;setting_time--;

&nbsp;&nbsp;&nbsp;free(hour_val);
&nbsp;&nbsp;&nbsp;free(minute_val);
&nbsp;&nbsp;&nbsp;free(second_val);

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}</pre>
</li>

<li>Reset the timer. 
<p>To set another time when the user clicks <strong>RESET</strong>, call the <span style="font-family: Courier New,Courier,monospace">_reset_clicked_cb()</span> callback function.</p>

<pre class="prettyprint">static void 
_reset_clicked_cb(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ad-&gt;setting_time = 0;

&nbsp;&nbsp;&nbsp;ecore_timer_del(ad-&gt;timer);
&nbsp;&nbsp;&nbsp;ad-&gt;timer = NULL;
&nbsp;&nbsp;&nbsp;ecore_timer_del(ad-&gt;progress_timer);
&nbsp;&nbsp;&nbsp;ad-&gt;progress_timer = NULL;

&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;hour_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;minute_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;second_ly, &quot;val&quot;, &quot;00&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;start_btn_ly, &quot;timer_end&quot;, &quot;btn&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;layout, &quot;timer_end&quot;, &quot;bg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;layout, &quot;timer_end&quot;, &quot;progress&quot;);
}</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>