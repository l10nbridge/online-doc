<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Alarm Widget Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	
<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	



<h1>(Circle) Alarm Widget Sample Overview</h1> 

<p>The (Circle) Alarm Widget sample application demonstrates how you can manage text objects and image objects to create a complete widget view. In addition, the widget application can launch another application for a more detailed operation, if required.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the (Circle) Alarm Widget.</p>
<p class="figure">Figure: (Circle) Alarm Widget screen</p>
<p align="center"><img src="../images/alarm_wearable_sd.png" alt="Alarm Widget screen" /></p>

<p>When the widget starts and no alarms exist, the main view (no alarm view) is shown, as in the left screen in the above figure. To add an alarm, click the button in the middle of the main view.</p>
<p>In the alarm view, you can switch the alarm on and off by clicking it, as in the middle and right screen in the above figure.</p> 

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
<caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">edje/images/</span></td>
		<td>This directory contains the image files used in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/main.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/image/</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and making data for the application.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/main.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, view control, and data.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>


<h2>Implementation</h2>

<h3>Application Layout</h3> 

<p>According to the widget instance life-cycle, the <span style="font-family: Courier New,Courier,monospace">widget_instance_create_cb()</span> callback is always called after the widget instance is created. Within the <span style="font-family: Courier New,Courier,monospace">widget_instance_create_cb()</span> callback:</p>

<ul>
<li>Call the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function to create the widget view.
<p>The window (<span style="font-family: Courier New,Courier,monospace">win</span>) and conformant (<span style="font-family: Courier New,Courier,monospace">conform</span>) components are essential in creating the application UI.</p></li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">widget_app_context_set_tag()</span> function to set the widget context.
<p>In the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function, you can get the <span style="font-family: Courier New,Courier,monospace">wid</span> data structure from the context using the <span style="font-family: Courier New,Courier,monospace">widget_app_context_get_tag()</span> function.</p></li>
</ul>

<pre class="prettyprint">
void 
view_create(widget_context_h context, int w, int h)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;

&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**) &amp;wid);

&nbsp;&nbsp;&nbsp;wid-&gt;win = view_create_widget_win(context, w, h);

&nbsp;&nbsp;&nbsp;wid-&gt;conform = view_create_conformant_without_indicator(wid-&gt;win);
&nbsp;&nbsp;&nbsp;if (wid-&gt;conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;wid-&gt;root_width = w;
&nbsp;&nbsp;&nbsp;wid-&gt;root_height = h;
}
</pre>


<h4>No Alarm View</h4>

<p>When the widget is started and no alarms exist, call the <span style="font-family: Courier New,Courier,monospace">view_alarm_widget_create()</span> function to create the main (no alarm) view:</p>

<ul>
<li><p>From the <span style="font-family: Courier New,Courier,monospace">data_get_resource_path()</span> function, you can get the EDJ file path to be used for the widget layout.</p></li>
<li><p>The <span style="font-family: Courier New,Courier,monospace">view_create_naviframe()</span> function creates the naviframe to manage multiple views. With the naviframe, the widget can change views more efficiently.</p></li>
<li><p>After you create a layout with the given EDJ file using the <span style="font-family: Courier New,Courier,monospace">view_alarm_create_layout_no_alarmlist()</span> function, push the layout to the naviframe.</p></li>
</ul>

<pre class="prettyprint">
data_get_resource_path(EDJ_PATH, edj_path, sizeof(edj_path));
view_alarm_widget_create(context, edj_path);

void 
view_alarm_widget_create(widget_context_h context, const char *file_path)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = NULL;

&nbsp;&nbsp;&nbsp;// Get the structure point from context
&nbsp;&nbsp;&nbsp;widget_app_context_get_tag(context, (void**) &amp;wid);

&nbsp;&nbsp;&nbsp;// Create a naviframe for managing multiple views
&nbsp;&nbsp;&nbsp;wid-&gt;nf = view_create_naviframe(wid-&gt;conform);
&nbsp;&nbsp;&nbsp;if (wid-&gt;nf == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a naviframe.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create an Eext circle surface for the circular genlist
&nbsp;&nbsp;&nbsp;// to make this app show a circular layout
&nbsp;&nbsp;&nbsp;wid-&gt;circle_surface = eext_circle_surface_naviframe_add(wid-&gt;nf);

&nbsp;&nbsp;&nbsp;// Create a layout for the no alarm view
&nbsp;&nbsp;&nbsp;wid-&gt;layout = view_alarm_create_layout_no_alarmlist(wid-&gt;nf, file_path, &quot;base_alarm&quot;, NULL);
&nbsp;&nbsp;&nbsp;if (wid-&gt;layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a layout of no alarm.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(wid-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Push to naviframe
&nbsp;&nbsp;&nbsp;view_push_item_to_naviframe(wid-&gt;nf, wid-&gt;layout, NULL, NULL);
}
</pre>

<p>The following figure shows the no alarm view frame created by the above code.</p>
<p class="figure">Figure: No alarm view frame</p>
<p align="center"><img src="../images/alarm_structure_wearable_sd.png" alt="No alarm view frame" /></p>

<p>To fill out each part in the view frame:</p>

<ul>
<li>Use the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function to fill out the <span style="font-family: Courier New,Courier,monospace">no_alam.title</span> part with the <strong>Alarm</strong> text.
<p>Fill out the <span style="font-family: Courier New,Courier,monospace">no_alam.text</span> part similarly.</p></li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function to fill out the <span style="font-family: Courier New,Courier,monospace">swallow.no_alarm.button</span> part with a button that has the <span style="font-family: Courier New,Courier,monospace">focus</span> style and the <span style="font-family: Courier New,Courier,monospace">_no_alarm_clicked_cb</span> callback. 
<p>The callback is triggered when the button is clicked. You can use the callback to launch any application to connect with the widget. In this sample, the alert popup and a virtual view of a connected alarm application are shown.</p></li>
</ul>

<pre class="prettyprint">
view_set_text(wid-&gt;layout, &quot;no_alarm.title&quot;, &quot;Alarm&quot;);
view_set_button(wid-&gt;layout, &quot;swallow.no_alarm.button&quot;, &quot;focus&quot;, NULL, NULL, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_no_alarm_down_cb, _no_alarm_up_cb, _no_alarm_clicked_cb, wid);
view_set_text(wid-&gt;layout, &quot;no_alarm.text&quot;, &quot;Add alarm&quot;);}
</pre>


<p>Define the position of the parts in the EDJ file. The <span style="font-family: Courier New,Courier,monospace">focus</span> style of the button is used for transparency, since the image and button are set in the same position:</p>
<pre class="prettyprint">
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;swallow.no_alarm.button&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;mouse_events: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 0.5 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;base&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 0.5 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;base&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 98 98;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 98 98;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 1;
&nbsp;&nbsp;&nbsp;}
}
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;no_alarm.img&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;mouse_events: 0;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.to: &quot;swallow.no_alarm.button&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.to: &quot;swallow.no_alarm.button&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;alarm_no_alarm_icon.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 98 98;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 98 98;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixed: 1 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>


<h4>Alert Popup</h4> 

<p>When the user clicks the button in the main view, the <span style="font-family: Courier New,Courier,monospace">_no_alarm_clicked_cb()</span> callback is triggered. The callback retrieves the text that you want to display, and calls the <span style="font-family: Courier New,Courier,monospace">view_create_text_popup()</span> function with the text to display an alert popup:</p>

<ul>
<li>The second parameter of the <span style="font-family: Courier New,Courier,monospace">view_create_text_popup()</span> function (<span style="font-family: Courier New,Courier,monospace">POPUP_DURATION</span>) determines how long the alert popup is displayed on the screen.</li>
<li>When the popup time is up and it is hidden, a <span style="font-family: Courier New,Courier,monospace">timeout</span> event occurs and triggers the <span style="font-family: Courier New,Courier,monospace">_timeout_cb</span> callback (registered by the <span style="font-family: Courier New,Courier,monospace">view_set_smart_callback()</span> function).</li>
</ul>

<pre class="prettyprint">
static void
_no_alarm_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = data;
&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;char *popup_text = NULL;

&nbsp;&nbsp;&nbsp;// Get the text to show on the popup
&nbsp;&nbsp;&nbsp;popup_text = data_get_popup_text();
&nbsp;&nbsp;&nbsp;// Create a circular popup with the given text and time
&nbsp;&nbsp;&nbsp;popup = view_create_text_popup(wid-&gt;layout, POPUP_DURATION, popup_text);
&nbsp;&nbsp;&nbsp;// Set the function to be called when the popup time is up 
&nbsp;&nbsp;&nbsp;view_set_smart_callback(popup, &quot;timeout&quot;, _timeout_cb, wid);
&nbsp;&nbsp;&nbsp;free(popup_text);
}
</pre>

<p class="figure">Figure: Alert popup view</p>
<p align="center"><img src="../images/alarm_popup_wearable_sd.png" alt="Alert popup view" /></p>

<h4>Alarm View</h4> 

<p>When the alert popup is hidden, the <span style="font-family: Courier New,Courier,monospace">_timeout_cb()</span> callback creates the alarm view:</p>

<ul>
<li>Get the EDJ file path to be used for the alarm view layout using the <span style="font-family: Courier New,Courier,monospace">data_get_resource_path()</span> function.</li>
<li>Call the <span style="font-family: Courier New,Courier,monospace">view_create_layout()</span> function with the EDJ file and the <span style="font-family: Courier New,Courier,monospace">alarm.view</span> group name that describes the alarm widget in the EDJ file.</li>
<li>Get the alarm time using the <span style="font-family: Courier New,Courier,monospace">data_get_saved_time_text()</span> function, and fill out the <span style="font-family: Courier New,Courier,monospace">widget.time</span> part using the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function with the alarm time.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">view_set_event_callback()</span> function registers the <span style="font-family: Courier New,Courier,monospace">_alarm_on_off_clicked_cb</span> callback to the <span style="font-family: Courier New,Courier,monospace">widget.event</span> part. The callback is triggered when the alarm view is clicked.</li></ul>

<pre class="prettyprint">
static void 
_timeout_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = data;

&nbsp;&nbsp;&nbsp;char *alarm_time = NULL;
&nbsp;&nbsp;&nbsp;char edj_path[PATH_MAX] = {0,};

&nbsp;&nbsp;&nbsp;// Get the EDJ file path
&nbsp;&nbsp;&nbsp;data_get_resource_path(EDJ_PATH, edj_path, sizeof(edj_path));

&nbsp;&nbsp;&nbsp;// Create alarm view with the alarm.view group in the EDJ file
&nbsp;&nbsp;&nbsp;wid-&gt;alarm_view = view_create_layout(wid-&gt;nf, edj_path, &quot;alarm.view&quot;, NULL, NULL);
&nbsp;&nbsp;&nbsp;// Get the saved time from the alarm application, if it is connected
&nbsp;&nbsp;&nbsp;alarm_time = data_get_saved_time_text(wid);
&nbsp;&nbsp;&nbsp;// Set the alarm_time text to the widget.time part
&nbsp;&nbsp;&nbsp;view_set_text(wid-&gt;alarm_view, &#39;widget.time&#39;, alarm_time);
&nbsp;&nbsp;&nbsp;// Set the function to be called when the widget is clicked
&nbsp;&nbsp;&nbsp;view_set_event_callback(wid-&gt;alarm_view, &quot;widget.event&quot;, WIDGET_EVENT_CLICKED, _alarm_on_off_clicked_cb, wid);

&nbsp;&nbsp;&nbsp;// Push the alarm view to the naviframe
&nbsp;&nbsp;&nbsp;view_push_item_to_naviframe(wid-&gt;nf, wid-&gt;alarm_view, NULL, NULL);

&nbsp;&nbsp;&nbsp;free(alarm_time);
}
</pre>

<p>The following figure shows the alarm view frame created by the above code.</p>
<p class="figure">Figure: Alarm view frame</p>
<p align="center"><img src="../images/alarm_view_wearable_sd.png" alt="Alarm view frame" /></p>

<p>The <span style="font-family: Courier New,Courier,monospace">widget.clock</span> part is filled with an image defined in the EDJ file. The part has 2 states, and the color of the image changes accordingly to the state.</p>
<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;widget.clock&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;mouse_events: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 180/360 268.5/360; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;widget.bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;relative: 180/360 268.5/360; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to: &quot;widget.bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 80 83;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;normal: &quot;Alarm_icon.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 127 191 15 200;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;off&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 250 250 250 51;
&nbsp;&nbsp;&nbsp;}
}
</pre>


<h3>Managing Alarms</h3>

<p>You can switch the alarm on and off by clicking the alarm view. The click triggers the <span style="font-family: Courier New,Courier,monospace">_alarm_on_off_clicked_cb()</span> callback:</p>

<ul>
<li>Check whether the alarm view is clicked, or just pressed for scrolling through multiple alarms. The <span style="font-family: Courier New,Courier,monospace">event_flag == EVAS_EVENT_FLAG_ON_HOLD</span> value means that the alarm view is scrolling, and no action are needed.</li>
<li>If the view is fully clicked, check the state of the <span style="font-family: Courier New,Courier,monospace">alarm_on</span> variable and send a signal to the EDJ file using the <span style="font-family: Courier New,Courier,monospace">view_send_signal_to_edje()</span> function with an <span style="font-family: Courier New,Courier,monospace">off</span> or <span style="font-family: Courier New,Courier,monospace">on</span> signal and the <span style="font-family: Courier New,Courier,monospace">alarm</span> source.</li>
</ul>

<pre class="prettyprint">
static void 
_alarm_on_off_clicked_cb(void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Event_Flags event_flag;
&nbsp;&nbsp;&nbsp;widget_instance_data_s *wid = user_data;

&nbsp;&nbsp;&nbsp;// Check whether this event is CLICK or MOUSE UP 
&nbsp;&nbsp;&nbsp;event_flag = evas_event_default_flags_get(evas_object_evas_get(wid-&gt;win));
&nbsp;&nbsp;&nbsp;// Click event on scroll is not dealt with 
&nbsp;&nbsp;&nbsp;if (event_flag == EVAS_EVENT_FLAG_ON_HOLD) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;clicked a widget&quot;);
&nbsp;&nbsp;&nbsp;// Check whether alarm is on or off
&nbsp;&nbsp;&nbsp;if (wid-&gt;alarm_on) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_send_signal_to_edje(wid-&gt;alarm_view, &quot;off&quot;, &quot;alarm&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;alarm_on = 0;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_send_signal_to_edje(wid-&gt;alarm_view, &quot;on&quot;, &quot;alarm&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wid-&gt;alarm_on = 1;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>You can customize the event signal passed to the EDJ file.</p>
<p>In the following example, if the <span style="font-family: Courier New,Courier,monospace">off</span> or <span style="font-family: Courier New,Courier,monospace">on</span> signal is sent to the EDJ file with the <span style="font-family: Courier New,Courier,monospace">alarm</span> source, the EDJ file finds the <span style="font-family: Courier New,Courier,monospace">widget.clock</span> target part and changes its state. Consequently, the alarm image is highlighted or returned to normal.</p>
<pre class="prettyprint">
programs 
{
&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;alarm.off&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;off&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;alarm&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;off&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;widget.clock&quot;;
&nbsp;&nbsp;&nbsp;}
}
programs 
{
&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;alarm.on&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;on&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;alarm&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;widget.clock&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p class="figure">Figure: Alarm on and off</p>
<p align="center"><img src="../images/alarm_on_off_wearable_sd.png" alt="Alarm on and off" /></p>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

