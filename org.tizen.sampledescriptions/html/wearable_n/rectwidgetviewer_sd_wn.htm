<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>The (Rectangle) Widget Viewer Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
<div id="profile">
	<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
</div>

<h1>(Rectangle) Widget Viewer Sample Overview</h1>

<p>The (Rectangle) Widget viewer sample application demonstrates how you can use widget service and viewer API.</p>

<p>The following figure illustrates two screens of the (Rectangle) Widget viewer sample application: widget and widgets list views.</p>

<p class="figure">Figure 1: (Rectangle) Widget viewer views</p>
  <p align="center"><img alt="(Rectangle) Widget viewer views" src="../images/rectwidget_viewer0.png" /> <img alt="(Rectangle) Widget viewer views" src="../images/rectwidget_viewer1.png" /></p>

<p>Click the button to enter list view of widgets installed in the system.</p>
<p>From there you can select which widget you want to view.</p>

<p class="figure">Figure 2: (Rectangle) Widget viewer UI structure</p>
  <p align="center"><img alt="(Rectangle) Widget viewer UI structure" src="../images/rectwidget_viewer2.png"/>
  </p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/widget.viewer</span> privilege
must be set. Also there should be some widget applications preinstalled in the system. You could use one of the sample widget applications delivered with SDK.
You can see it in figure 1. It's documentation can be found <a href="widget_animation_sd_wn.htm">here</a>.</p>

<h2>Implementation</h2>

<h3 id="mainview">Controller module</h3>

<p>There are two importatnt functions in this module:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">__refresh_avaialable_widgets()</span></li>
<li><span style="font-family: Courier New,Courier,monospace">__widget_list_cb()</span>.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">__refresh_avaialable_widgets()</span> function calls the
API <span style="font-family: Courier New,Courier,monospace">widget_service_get_widget_list()</span> function, which in turn calls
the <span style="font-family: Courier New,Courier,monospace">__widget_list_cb()</span> callback function synchronously for each installed widget found in the system.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">__widget_list_cb()</span> callback function takes the following arguments</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">pkgid</span> - the identifier of the widget's package;</li>
<li><span style="font-family: Courier New,Courier,monospace">widget_id</span> - the identifier of the widget, which may be the same as pkgid;</li>
<li><span style="font-family: Courier New,Courier,monospace">is_prime</span> - indicates whether the widget is the default one;</li>
<li><span style="font-family: Courier New,Courier,monospace">data</span> - user defined data. In this example we set the boolean flag to indicate that the old view content should be cleared only once.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">__widget_list_cb()</span> callback passes widget unique id and name to the view part of this application.
This is how the list of available widgets is created. The procedure repeats each time you enter widget list view.
List has to be refreshed because at any time widgets can be installed/uninstalled in the system.</p>

<pre class="prettyprint">
static bool __refresh_avaialable_widgets(void)
{
&nbsp;&nbsp;int res = TIZEN_ERROR_NONE;
&nbsp;&nbsp;bool clear_list = true;

&nbsp;&nbsp;res = widget_service_get_widget_list(__widget_list_cb, &clear_list);

&nbsp;&nbsp;if (res < 0)
&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, "Error obtaining widgets list or no widgets installed: %s", get_error_message(res));

&nbsp;&nbsp;return true;
}
</pre>

<pre class="prettyprint">
static int __widget_list_cb(const char *pkgid, const char *widget_id, int is_prime, void *data)
{
&nbsp;&nbsp;char *widget_name = NULL;

&nbsp;&nbsp;if (data && *(bool *)data) {
&nbsp;&nbsp;&nbsp;&nbsp;view_clear_widgets_options();
&nbsp;&nbsp;&nbsp;&nbsp;*(bool *)data = false;
&nbsp;&nbsp;}

&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "widget-package: %s widget-id: %s widget is prime: %d", pkgid, widget_id, is_prime);

&nbsp;&nbsp;if (!widget_service_get_nodisplay(widget_id)) {
&nbsp;&nbsp;&nbsp;&nbsp;widget_name = widget_service_get_name(widget_id, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;view_add_widget_to_options(strndup(widget_id, NAME_MAX), widget_name);
&nbsp;&nbsp;&nbsp;&nbsp;free(widget_name);
&nbsp;&nbsp;}

&nbsp;&nbsp;return WIDGET_ERROR_NONE;
}
</pre>

<h3 id="mainview">View module</h3>

<p>In order to use widget viewer API, it has to be initiated with the <span style="font-family: Courier New,Courier,monospace">widget_viewer_evas_init()</span> function.</p>
<p>Don't forget to use the <span style="font-family: Courier New,Courier,monospace">widget_viewer_evas_fini()</span> function at application exit.</p>

<pre class="prettyprint">
&#35;define WIDGET_CONTAINER_SIZE 100
&#35;define WIDGET_SIZES_COUNT 13
</pre>

<pre class="prettyprint">
bool view_create_gui(refresh_options_event_callback cb)
{
&nbsp;&nbsp;int result = TIZEN_ERROR_NONE;

&nbsp;&nbsp;vd.win = elm_win_util_standard_add(PACKAGE, PACKAGE);

	// Error handling...

&nbsp;&nbsp;if (!__create_widget_view())
&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;result = widget_viewer_evas_init(vd.widget_view);

	// Error handling...

&nbsp;&nbsp;vd.options_list = options_list_create(vd.win, __options_item_selection_changed);

	// Error handling and common initialization code...
}
</pre>
<pre class="prettyprint">
static bool __create_widget_view(void)
{
	// Variables declarations...

&nbsp;&nbsp;vd.widget_view = elm_layout_add(vd.win);

	// Error handling and common initialization code...

&nbsp;&nbsp;grid = elm_grid_add(vd.widget_view);

	// Error handling...

&nbsp;&nbsp;elm_grid_size_set(grid, WIDGET_CONTAINER_SIZE, WIDGET_CONTAINER_SIZE);
&nbsp;&nbsp;elm_layout_content_set(vd.widget_view, MAIN_LAYOUT_WIDGET_CONTAINER, grid);

&nbsp;&nbsp;elm_layout_signal_callback_add(vd.widget_view, OPTIONS_CLICKED_SIG, MAIN_LAYOUT_OPTIONS_LIST_BUTTON,
										__option_button_click_cb, NULL);
&nbsp;&nbsp;evas_object_show(vd.widget_view);

&nbsp;&nbsp;return true;
}
</pre>

<p>For displaying the widget, the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> with the <span style="font-family: Courier New,Courier,monospace">elm_grid</span>
are used as a container (see figure 2).</p>
<p>Each time the user selects a new widget to display (see figure 1, right), the following code is executed:</p>

<pre class="prettyprint">
static void __options_item_selection_changed(void)
{
	// Variables declarations...

&nbsp;&nbsp;const char *widget_id = options_list_get_selected_item_data(vd.options_list);

	// Error handling...

&nbsp;&nbsp;result = widget_service_get_supported_sizes(widget_id, &supported_sizes_count, &widths, &heights);

	// Error handling...

&nbsp;&nbsp;wgt = widget_viewer_evas_add_widget(vd.widget_view, widget_id, NULL, WIDGET_VIEWER_EVAS_DEFAULT_PERIOD);

	// Error handling...

&nbsp;&nbsp;widget_viewer_evas_set_permanent_delete(wgt, 1);
&nbsp;&nbsp;evas_object_smart_callback_add(wgt, WIDGET_SMART_SIGNAL_WIDGET_FAULTED, __widget_failure_evas_smart_cb, NULL);
&nbsp;&nbsp;evas_object_smart_callback_add(wgt, WIDGET_SMART_SIGNAL_WIDGET_DELETED, __widget_failure_evas_smart_cb, NULL);
&nbsp;&nbsp;evas_object_smart_callback_add(wgt, WIDGET_SMART_SIGNAL_PROVIDER_DISCONNECTED, __widget_failure_evas_smart_cb, NULL);
&nbsp;&nbsp;evas_object_show(wgt);

&nbsp;&nbsp;grid = elm_layout_content_get(vd.widget_view, MAIN_LAYOUT_WIDGET_CONTAINER);
&nbsp;&nbsp;elm_grid_clear(grid, EINA_TRUE);

&nbsp;&nbsp;elm_grid_pack(grid, wgt, 0, 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(int)((float)widths[0] / (float)vd.screen_w * (float)WIDGET_CONTAINER_SIZE),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(int)((float)heights[0] / (float)vd.screen_h * (float)WIDGET_CONTAINER_SIZE));

&nbsp;&nbsp;widget_size_type_e type = WIDGET_SIZE_TYPE_UNKNOWN;

&nbsp;&nbsp;result = widget_service_get_size_type(widths[0], heights[0], &type);

&nbsp;&nbsp;if (result == 0)
&nbsp;&nbsp;&nbsp;&nbsp;result = widget_service_get_need_of_frame(widget_id, type, &needs_frame);

	// Error handling...

&nbsp;&nbsp;if (needs_frame) {
&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(vd.widget_view, SHOW_FRAME_SIG, "");
&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(vd.widget_view, HIDE_FRAME_SIG, "");
&nbsp;&nbsp;}

	// Common code...
}
</pre>

<p>The firs step in <span style="font-family: Courier New,Courier,monospace">__options_item_selection_changed()</span>
function is to get the selected widget id to display. Next, to display widget properly, the widget supported sizes are obtained by a call to
<span style="font-family: Courier New,Courier,monospace">widget_service_get_supported_sizes()</span>.
Note that <span style="font-family: Courier New,Courier,monospace">supported_sizes_count</span> is in/out parameter.
Set it to any number to limit the length of resulting tables: <span style="font-family: Courier New,Courier,monospace">widths</span>
and <span style="font-family: Courier New,Courier,monospace">heights</span>. The <span style="font-family: Courier New,Courier,monospace">supported_sizes_count</span>
will contain length of these tables upon the function return.</p>
<p>If widget id is valid and it supports non zero sizes, it is the time to create widget
<span style="font-family: Courier New,Courier,monospace">Evas_Object</span> with the
<span style="font-family: Courier New,Courier,monospace">widget_viewer_evas_add_widget()</span> call.</p>

<p>At the beginning, the grid content is cleared (<span style="font-family: Courier New,Courier,monospace">elm_grid_clear()</span>)
and previous widget <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> is deleted.</p>
<p> Then the new widget <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> is packed into grid and scaled versus screen dimension.
To simplify the sample application, only the first supported size is chosen from the list
(<span style="font-family: Courier New,Courier,monospace">widths[0]</span> and
<span style="font-family: Courier New,Courier,monospace">heights[0]</span>).

<p>Some widgets need a frame (border) around them to be rendered. One can check this with
<span style="font-family: Courier New,Courier,monospace">widget_service_get_need_of_frame()</span> function call.
If a widget needs a surrounding frame, then it is decorated with red border by sending
<span style="font-family: Courier New,Courier,monospace">SHOW_FRAME_SIG</span> to the
<span style="font-family: Courier New,Courier,monospace">elm_layout</span>.
</p>

<p>Also note that the newly created widget supports the following callbacks:</p>
<ul>
<li>WIDGET_SMART_SIGNAL_WIDGET_FAULTED</li>
<li>WIDGET_SMART_SIGNAL_WIDGET_DELETED</li>
<li>WIDGET_SMART_SIGNAL_PROVIDER_DISCONNECTED</li>
</ul>

<p>These events may occur upon some error in widget application or it's deinstallation. In case any of these events occur, the
<span style="font-family: Courier New,Courier,monospace">__widget_failure_evas_smart_cb()</span> callback function is called and
grid content is cleared.
</p>

<pre class="prettyprint">
static void __widget_failure_evas_smart_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;Evas_Object *grid = NULL;
&nbsp;&nbsp;widget_evas_event_info_s *ev = (widget_evas_event_info_s *)event_info;

&nbsp;&nbsp;grid = elm_layout_content_get(vd.widget_view, MAIN_LAYOUT_WIDGET_CONTAINER);

&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Removing widget %s on event %d error %d", ev->widget_app_id, ev->event, ev->error);

&nbsp;&nbsp;elm_grid_clear(grid, EINA_TRUE);
&nbsp;&nbsp;elm_layout_signal_emit(vd.widget_view, HIDE_FRAME_SIG, "");
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
