<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Music Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">

<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	
</div>	


<h1>(Circle) Music Sample Overview</h1> 

<p>The Music sample appliction shows you how to create a music application. Especially, it demonstrates how to draw the UI for a music player.</p>
<p>The following figure illustrates the main screen of the Music sample application.</p>
<p class="figure">Figure: (Circle) Music main views</p>
<p align="center"><img src="../images/music_wearable_sd.png" alt="Music main view" /></p>

<p>This sample consists of the view and main operation parts.</p> 

<h2>View</h2> 

<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the widget view frame consisting of window, text parts, image parts, and so on.</p>
<pre class="prettyprint">
view_create(context, w, h);
</pre>
<p>The following figure illustrates the view frame.</p>
<p class="figure">Figure: Music view frame</p>
<p align="center"><img src="../images/music_structure_wearable_sd.png" alt="Music view frame" /></p>

<p>To create the parts:</p>

<ul>
<li>Text
<p>You can fill out text parts with the part name and the text using the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function.</p>
<p>Implement the <span style="font-family: Courier New,Courier,monospace">data_get_music_title()</span> function to create the text to use. Then, call the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function with the part name and text you obtained.</p>
<p>In this example, the text to use is <span style="font-family: Courier New,Courier,monospace">txt</span> and the part name to fill out is <span style="font-family: Courier New,Courier,monospace">txt.title</span>.</p>
<pre class="prettyprint">
txt = data_get_music_title(0);
view_set_text(wid, &quot;txt.title&quot;, txt);
</pre>
</li>
<li>Image
<p>You can create an image object using the <span style="font-family: Courier New,Courier,monospace">view_set_image()</span> function. Pass the part name which you want to draw and the name of image file including its directory path.</p>
<p>In this example, the part name is <span style="font-family: Courier New,Courier,monospace">sw.icon.device</span> and the icon contains the path of an image file in the <span style="font-family: Courier New,Courier,monospace">images</span> directory.</p>
<pre class="prettyprint">
icon = data_get_image(&quot;sw.icon.device&quot;);
view_set_image(ad-&gt;content, &quot;sw.icon.device&quot;, icon);
</pre>
</li>
<li>Button
<p>You can create buttons using the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function.</p>
<p>Call the function with the part name, image path, button text, callback function, and user data.</p>
<p>In this example, the part name is <span style="font-family: Courier New,Courier,monospace">sw.icon.next</span> and the icon contains the path of an image file in the <span style="font-family: Courier New,Courier,monospace">images</span> directory.</p>
<pre class="prettyprint">
view_set_button(ad-&gt;content, &quot;sw.icon.next&quot;, icon, NULL, _next_clicked_cb, ad);
</pre>
<p>The callback function registered is called when the button is clicked.</p>
</li>
<li>Progress bar
<p>You can create a progress bar using the <span style="font-family: Courier New,Courier,monospace">view_set_prgressbar()</span> function. Pass the part name as a parameter.</p>
<p>In this example, the part name is <span style="font-family: Courier New,Courier,monospace">sw.progressbar</span>.</p>
<pre class="prettyprint">
view_set_prgressbar(ad-&gt;content, &quot;sw.progressbar&quot;);
</pre> 

<p>You can change value of progressbar using the <span style="font-family: Courier New,Courier,monospace">view_set_progressbar_val()</span> function.</p>
<p>In this example, the part name is <span style="font-family: Courier New,Courier,monospace">sw.progressbar</span> and the value you want to set.</p>
<pre class="prettyprint">
view_set_progressbar_val(ad-&gt;content, &quot;sw.progressbar&quot;, 70);
</pre>
</li>
<li>More button
<p>You can create a more button using the <span style="font-family: Courier New,Courier,monospace">view_set_more_button()</span> function. Pass the part name as a parameter.</p>
<pre class="prettyprint">
view_set_more_button(ad-&gt;content, &quot;sw.more&quot;);
</pre>
<p>You can add add items to more button. In this example, the part name is <span style="font-family: Courier New,Courier,monospace">sw.more</span>, and <span style="font-family: Courier New,Courier,monospace">main_txt</span> and <span style="font-family: Courier New,Courier,monospace">sub_txt</span> are displayed when item is selected. The <span style="font-family: Courier New,Courier,monospace">img_path</span> contains the path of image file in the <span style="font-family: Courier New,Courier,monospace">images</span> directory.</p>
<p>You can also register a callback function and user data.</p>
<pre class="prettyprint">
view_add_more_button_item(ad-&gt;content, &quot;sw.more&quot;, main_txt, sub_txt, img_path, _item_clicked_cb, ad);
</pre>
</li>
</ul>

<h2>Main Operation</h2> 

<p>To create the music application:</p>
<ol>
<li>Create the music application UI.
<p>The application starts with the <span style="font-family: Courier New,Courier,monospace">main()</span> function, where the life-cycle callbacks are registered. The <span style="font-family: Courier New,Courier,monospace">app_create()</span> callback function is called first. After that, the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the base UI of the application.</p>
<pre class="prettyprint">
static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;// Hook to take necessary actions before main event loop starts
&nbsp;&nbsp;&nbsp;// Initialize UI resources and application data
&nbsp;&nbsp;&nbsp;// If this function returns true, the main loop of application starts
&nbsp;&nbsp;&nbsp;// If this function returns false, the application is terminated
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;char *bg = NULL;
&nbsp;&nbsp;&nbsp;char *icon = NULL;
&nbsp;&nbsp;&nbsp;char *txt = NULL;
&nbsp;&nbsp;&nbsp;int i = 0;

&nbsp;&nbsp;&nbsp;view_create(ad);

&nbsp;&nbsp;&nbsp;bg = data_get_image(&quot;sw.bg&quot;);
&nbsp;&nbsp;&nbsp;view_set_image(ad-&gt;content, &quot;sw.bg&quot;, bg);
&nbsp;&nbsp;&nbsp;free(bg);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.icon.vol&quot;);
&nbsp;&nbsp;&nbsp;view_set_button(ad-&gt;content, &quot;sw.icon.vol&quot;, icon, NULL, _clicked_cb, &quot;volume&quot;);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.icon.vol&quot;, 250, 250, 250, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.progressbar.bg&quot;);
&nbsp;&nbsp;&nbsp;view_set_image(ad-&gt;content, &quot;sw.progressbar.bg&quot;, icon);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.progressbar.bg&quot;, 0, 87, 107, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.icon.play&quot;);
&nbsp;&nbsp;&nbsp;view_set_button(ad-&gt;content, &quot;sw.icon.play&quot;, icon, NULL, _clicked_cb, &quot;play&quot;);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.icon.play&quot;, 250, 250, 250, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.icon.prev&quot;);
&nbsp;&nbsp;&nbsp;view_set_button(ad-&gt;content, &quot;sw.icon.prev&quot;, icon, NULL, _prev_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.icon.prev&quot;, 250, 250, 250, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.icon.next&quot;);
&nbsp;&nbsp;&nbsp;view_set_button(ad-&gt;content, &quot;sw.icon.next&quot;, icon, NULL, _next_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.icon.next&quot;, 250, 250, 250, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;icon = data_get_image(&quot;sw.icon.device&quot;);
&nbsp;&nbsp;&nbsp;view_set_image(ad-&gt;content, &quot;sw.icon.device&quot;, icon);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.icon.device&quot;, 250, 250, 250, 255);
&nbsp;&nbsp;&nbsp;free(icon);

&nbsp;&nbsp;&nbsp;txt = data_get_music_title(0);
&nbsp;&nbsp;&nbsp;view_set_text(ad-&gt;content, &quot;txt.title&quot;, txt);
&nbsp;&nbsp;&nbsp;free(txt);

&nbsp;&nbsp;&nbsp;txt = data_get_music_artist(0);
&nbsp;&nbsp;&nbsp;view_set_text(ad-&gt;content, &quot;txt.artist&quot;, txt);
&nbsp;&nbsp;&nbsp;free(txt);

&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;content, &quot;__ALBUM_ORDER__&quot;, (void *)0);

&nbsp;&nbsp;&nbsp;view_set_prgressbar(ad-&gt;content, &quot;sw.progressbar&quot;);
&nbsp;&nbsp;&nbsp;view_set_color(ad-&gt;content, &quot;sw.progressbar&quot;, 0, 192, 235, 255);
&nbsp;&nbsp;&nbsp;view_set_progressbar_val(ad-&gt;content, &quot;sw.progressbar&quot;, 70);

&nbsp;&nbsp;&nbsp;view_set_more_button(ad-&gt;content, &quot;sw.more&quot;);
&nbsp;&nbsp;&nbsp;for ( i = 0; i &lt; 6; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_add_more_button_item(ad-&gt;content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sw.more&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more_btn_item[i].main_txt,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more_btn_item[i].sub_txt,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;more_btn_item[i].img_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_more_btn_item_clicked_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates base UI that is composed of window, conformant, and layout components.</p>
<p>The wearable profile does not support the indicator function, so use a conformant that does not set the indicator mode.</p>
<pre class="prettyprint">
void 
view_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ad-&gt;win = view_create_win();
&nbsp;&nbsp;&nbsp;if (ad-&gt;win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;window is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ad-&gt;conform = view_create_conformant(ad-&gt;win);
&nbsp;&nbsp;&nbsp;if (ad-&gt;conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ad-&gt;content = view_create_layout_for_conformant(ad-&gt;win, ad-&gt;conform, EDJ_FILE, GRP_MAIN, ad);
&nbsp;&nbsp;&nbsp;if (ad-&gt;content == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(ad-&gt;win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a content.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>
<p>When it comes to layout, there are 2 methods to create a layout component. One of them involves creating an edc file that you can customize, and the other uses a premade edc file. This layout is created using a customized edc file.</p>

<pre class="prettyprint">
Evas_Object*
view_create_layout_for_conformant(Evas_Object *parent, Evas_Object *conformant, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *file_name, const char *group_name, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;

&nbsp;&nbsp;&nbsp;layout = view_create_layout(parent, file_name, group_name, user_data);
&nbsp;&nbsp;&nbsp;if (layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;parent is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_object_content_set(conformant, layout);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>
</li>
<li>Create a more button component with the <span style="font-family: Courier New,Courier,monospace">view_create_more_button()</span> function.
<pre class="prettyprint">
void 
view_set_more_button(Evas_Object *parent, const char *part)
{
&nbsp;&nbsp;&nbsp;Evas_Object *more_btn = NULL;

&nbsp;&nbsp;&nbsp;if (parent == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;parent is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;more_btn = eext_more_option_add(parent);
&nbsp;&nbsp;&nbsp;if (more_btn == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;more option is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Add the smart callbacks
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(more_btn, &quot;more,option,opened&quot;, _more_option_opened, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(more_btn, &quot;more,option,closed&quot;, _more_option_closed, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(more_btn, &quot;item,selected&quot;, _item_selected, NULL);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(parent, part, more_btn);
}
</pre>
<p>You can add items to the more button component using the <span style="font-family: Courier New,Courier,monospace">view_add_more_button_item()</span> function.</p>
<pre class="prettyprint">
void 
view_add_more_button_item(Evas_Object *parent, const char *part, const char *main_txt, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *sub_txt, const char *img_path, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void (clicked_cb)(void *data, Evas_Object *obj, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *event_info), void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *img = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *more_btn = NULL;
&nbsp;&nbsp;&nbsp;char full_path[PATH_MAX] = {0,};

&nbsp;&nbsp;&nbsp;more_btn = elm_object_part_content_get(parent, part);
&nbsp;&nbsp;&nbsp;if (more_btn == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create the new item
&nbsp;&nbsp;&nbsp;Eext_Object_Item *item  = eext_more_option_item_append(more_btn);

&nbsp;&nbsp;&nbsp;// Set the text in item text part
&nbsp;&nbsp;&nbsp;eext_more_option_item_part_text_set(item, &quot;selector,main_text&quot;, main_txt);
&nbsp;&nbsp;&nbsp;eext_more_option_item_part_text_set(item, &quot;selector,sub_text&quot;, sub_txt);

&nbsp;&nbsp;&nbsp;img = elm_image_add(more_btn);
&nbsp;&nbsp;&nbsp;_get_resource(img_path, full_path, sizeof(full_path));
&nbsp;&nbsp;&nbsp;elm_image_file_set(img, full_path, NULL);

&nbsp;&nbsp;&nbsp;// Set the content in item content part
&nbsp;&nbsp;&nbsp;eext_more_option_item_part_content_set(item, &quot;item,icon&quot;, img);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(more_btn, &quot;item,clicked&quot;, clicked_cb, user_data);
}
</pre>
</li>
<li>Click the next or previous button. 
<p>If you click the next or previous button, you can change the music information with the <span style="font-family: Courier New,Courier,monospace">_next_clicked_cb()</span> and <span style="font-family: Courier New,Courier,monospace">_prev_clicked_cb()</span> callbacks.</p>
<pre class="prettyprint">
static void 
_next_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;char *bg = NULL;
&nbsp;&nbsp;&nbsp;char *title = NULL;
&nbsp;&nbsp;&nbsp;char *artist = NULL;
&nbsp;&nbsp;&nbsp;int index = 0;

&nbsp;&nbsp;&nbsp;index = (int)evas_object_data_get(ad-&gt;content, &quot;__ALBUM_ORDER__&quot;);
&nbsp;&nbsp;&nbsp;index = (index + 1) % 2;
&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;content, &quot;__ALBUM_ORDER__&quot;, (void *)index);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;next button is clicked(%d)&quot;, index);

&nbsp;&nbsp;&nbsp;bg = data_get_music_album_art(index);
&nbsp;&nbsp;&nbsp;view_set_image(ad-&gt;content, &quot;sw.bg&quot;, bg);
&nbsp;&nbsp;&nbsp;free(bg);

&nbsp;&nbsp;&nbsp;title = data_get_music_title(index);
&nbsp;&nbsp;&nbsp;view_set_text(ad-&gt;content, &quot;txt.title&quot;, title);
&nbsp;&nbsp;&nbsp;free(title);

&nbsp;&nbsp;&nbsp;artist = data_get_music_artist(index);
&nbsp;&nbsp;&nbsp;view_set_text(ad-&gt;content, &quot;txt.artist&quot;, artist);
&nbsp;&nbsp;&nbsp;free(artist);
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

