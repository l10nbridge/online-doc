<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Bluetooth LE Service Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

<h1>Bluetooth LE Service Sample Overview</h1>

<p>
The Bluetooth LE Service sample application demonstrates how to implement a service that continuously broadcasts data using the Bluetooth Low Energy adapter. In order to achive the goal, the
<a href="https://developer.tizen.org/dev-guide/2.4.0/org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__ADAPTER__LE__MODULE.html">Bluetooth LE Adapter</a>
API is used. The continuous data broadcast using the mentioned method is called advertising. The service advertises small packets of data to identify a device within the Bluetooth network.
Once the advertisment is received by any other device, one can query the advertiser for detailed service data. The query process is called scanning. In a scan response the service data, identified by preassigned UUID,
is returned.
</p>

<p>
The general idea behind this sample application is to share the health information gathered from the Heart Rate sensor which is built into the wearable device. There are two types of advertized information:
	<ul>
		<li>Heart Rate Measurement - the number of heart beats per second (acquired directly from the Heart Rate sensor). This data is identified by the UUID = 0x2A37;</li>
		<li>Body Sensor Location - the point of measurement which is fixed for the entire lifecycle of the service. This data is identified by the UUID = 0x2A38.</li>
	</ul>
</p>

<h2>Prerequisites</h2>

<p>To ensure proper service execution, the following privileges must be set:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/bluetooth,</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/healthinfo.</span></li>
	</ul>
</p>

<h2>Implementation</h2>

<h3>Service initialization and termination</h3>

<h4>Initialization</h4>

<p>
Before the service starts its operation, the availability of relevant Bluetooth interfaces is checked by calling the following functions:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">bt_common_is_bluetooth_supported()</span> - General Bluetooth adapter;</li>
		<li><span style="font-family: Courier New,Courier,monospace">bt_common_is_bluetooth_le_supported()</span> - Low Energy Bluetooth adapter.</li>
	</ul>
If both of them are available, the Heart Rate sensor listener is created with <span style="font-family: Courier New,Courier,monospace">sensor_listener_create()</span> function. Finally, the Bluetooth
interface is initialized with the <span style="font-family: Courier New,Courier,monospace">__bt_init()</span> function.
</p>

<pre class="prettyprint">
static bool __bt_init(void)
{
&nbsp;&nbsp;&nbsp;bool is_enabled = false;

&nbsp;&nbsp;&nbsp;/* Access to the H/W Bluetooth adapter is initialized. */
&nbsp;&nbsp;&nbsp;if (bt_common_init()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* The __bt_device_state_changed_cb() callback function is registered to be invoked on Bluetooth adapter state change. */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_common_set_state_change_callback(__bt_device_state_changed_cb);

&nbsp;&nbsp;&nbsp;/* The current state of the Bluetooth adapter is obtained.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If it is enabled the the __bt_device_state_changed_cb() callback function is artificially invoked. */
&nbsp;&nbsp;&nbsp;bt_common_get_state(&is_enabled);
&nbsp;&nbsp;&nbsp;if (is_enabled)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_device_state_changed_cb(BT_ERROR_NONE, BT_ADAPTER_ENABLED, NULL);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return is_enabled;
}
</pre>

<p>
See the <a href="#ref">References</a> section for details of all undescribed functions.
</p>

<h4>Termination</h4>

<p>
In the service termination procedure, the Heart Rate sensor listener and data advertizer are destroyed, the assigned callback function is unset and, finally, the access to the Bluetooth adapter is deinitialized.
</p>

<pre class="prettyprint">
void controller_terminate(void)
{
&nbsp;&nbsp;&nbsp;sensor_listener_delete();

&nbsp;&nbsp;&nbsp;bt_advertiser_delete(&__ctrldata.adv_hrm_h);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, "Heart Rate Measurement advertiser stopped.");

&nbsp;&nbsp;&nbsp;bt_common_unset_state_change_callback();
&nbsp;&nbsp;&nbsp;bt_common_deinit();
}
</pre>

<p>
See the <a href="#ref">References</a> section for details of all undescribed functions.
</p>

<h3 id="adv-creation">Advertiser creation</h3>

<p>
Once the Bluetooth adapter state is changed to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_ENABLED</span> and the
<span style="font-family: Courier New,Courier,monospace">__bt_device_state_changed_cb()</span> callback function is invoked, the advertiser creation procedure takes place.
<br>
In case the <span style="font-family: Courier New,Courier,monospace">__bt_device_state_changed_cb()</span> callback function is invoked with the
<span style="font-family: Courier New,Courier,monospace">adapter_state</span> argument set to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_DISABLED</span>,
the currently running advertiser is deleted (<span style="font-family: Courier New,Courier,monospace">bt_advertiser_delete()</span>).
</p>

<pre class="prettyprint">
static void __bt_device_state_changed_cb(int result, bt_adapter_state_e adapter_state, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (adapter_state == BT_ADAPTER_ENABLED) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bt_advertiser_create(&__ctrldata.adv_hrm_h, APPEARANCE_GENERIC_HEART_RATE_SENSOR)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Heart Rate Measurement advertiser started.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, "Failed to start Heart Rate Measurement advertiser.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertiser_delete(&__ctrldata.adv_hrm_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, "Heart Rate Measurement advertiser stopped.");
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>
The <span style="font-family: Courier New,Courier,monospace">bt_advertiser_create()</span> function creates the advertiser handle, performs its initial configuration and starts advertising.
</p>

<pre class="prettyprint">
bool bt_advertiser_create(bt_advertiser_h *adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;if (!__create_advertizer(adv_h, appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_start_advertising(*adv_h, NULL)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__delete_advertizer(adv_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;__advertizer_appearance = appearance;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
The advertiser's handle's creation and initial configuration is performed by the <span style="font-family: Courier New,Courier,monospace">__create_advertizer()</span> function listed below.
Once the function succeeds, the advertising starts (<span style="font-family: Courier New,Courier,monospace">bt_common_start_advertising()</span>).
</p>

<pre class="prettyprint">
static bool __create_advertizer(bt_advertiser_h *adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;*adv_h = NULL;

&nbsp;&nbsp;&nbsp;if (!bt_common_create_advertizer(adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_set_advertising_mode(*adv_h, BT_ADAPTER_LE_ADVERTISING_MODE_LOW_LATENCY))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_set_connectable(*adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__set_advertizing_properties(*adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__set_scan_response_properties(*adv_h, appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
Within the <span style="font-family: Courier New,Courier,monospace">__create_advertizer()</span> function:
	<ul>
		<li>the advertiser's handle is created with <span style="font-family: Courier New,Courier,monospace">bt_common_create_advertizer()</span> function;</li>
		<li>the advertiser mode is set to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_ADVERTISING_MODE_LOW_LATENCY</span> which sets the lowest possible
		interval between subsequent packets sending with the cost of higher energy consumption (<span style="font-family: Courier New,Courier,monospace">bt_common_set_advertising_mode()</span>);</li>
		<li>the advertiser remains connectable by other peers (<span style="font-family: Courier New,Courier,monospace">bt_common_set_connectable()</span>);</li>
		<li>the advertiser's properties are defined and set:
			<ul>
				<li>for advertising mode (<span style="font-family: Courier New,Courier,monospace">__set_advertizing_properties()</span>);</li>
				<li>for scan response mode (<span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span>).</li>
			</ul>
		</li>
	</ul>
The advertiser's properties setting determines the amount and the category of information to be broadcasted over the Bluetooth LE adapter. It is assumed that:
	<ul>
		<li>
		an advertising packet (<span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_PACKET_ADVERTISING</span>) is a carrier of the following information:
			<ul>
				<li>device's name (obtained automatically by the internal implementation of the Bluetooth LE Adapter module);</li>
				<li>manufacturer's identifier: 0x0075 (complies with the <a href="https://www.bluetooth.com/specifications/assigned-numbers/Company-Identifiers">company identifiers</a>
				assigned by the Bluetooth SIG, Inc.). The assigned value identifies Samsung Electronics Co. Ltd. company.</li>
			</ul>
		The role of this type of packet is to introduce the device (advertise its existence) within the Bluetooth LE network. The one who receives such a packet can send a scan request to query detailed data
		carried by the device.
		</li>
		<li>
		a scan response packet (<span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_PACKET_SCAN_RESPONSE</span>) is a carrier of the following information:
			<ul>
				<li>device's name (obtained automatically by the internal implementation of the Bluetooth LE Adapter module);</li>
				<li>appearance: 832 (complies with the
				<a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.appearance.xml">external device's appearance</a>
				assigned by the Bluetooth SIG, Inc.). The assigned value identifies the device as a Generic Heart Rate Sensor.</li>
				<li>manufacturer's identifier (see the itemization above for details).</li>
			</ul>
		The role of this type of packet is to provide detailed data acquired during the service lifecycle (heart rate measuremet and body sensor location values). This packet is sent in response to a scan request.
		</li>
	</ul>
The <span style="font-family: Courier New,Courier,monospace">__set_advertizing_properties()</span> and the
<span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span> functions are only convenient wrappers and call the
<span style="font-family: Courier New,Courier,monospace">__set_properties()</span> function with appropriately adjusted arguments. For reference of properties' setting, see the code listing below.
</p>

<pre class="prettyprint">
static bool __set_properties(bt_advertiser_h adv_h, struct _adv_properties properties)
{
&nbsp;&nbsp;&nbsp;/* Sets whether the device's name is to be included in the packet. */
&nbsp;&nbsp;&nbsp;if (!bt_common_set_device_name(adv_h, properties.pkt_type, properties.name))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;/* Sets the device's appearance value if provided. */
&nbsp;&nbsp;&nbsp;if (properties.appearance > 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!bt_common_set_appearance(adv_h, properties.pkt_type, properties.appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;/* Sets the device's manufacturer identifier if provided. */
&nbsp;&nbsp;&nbsp;if (properties.manufacturer_id > 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!bt_common_set_manufacturer(adv_h,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;properties.pkt_type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;properties.manufacturer_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(const char *)&properties.manufacturer_data,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(struct _manufacturer_data)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;/* Sets whether the transmition power level is to be included in the packet. */
&nbsp;&nbsp;&nbsp;if (!bt_common_set_tx_power_level(adv_h, properties.pkt_type, properties.tx_power))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
See the <a href="#ref">References</a> section for details of all undescribed functions.
</p>

<h3 id="data-adv">Data advertising</h3>

<p>
Each time data is received from the Heart Rate sensor, the <span style="font-family: Courier New,Courier,monospace">__sensor_data_read_cb()</span> callback function is invoked.
Within this function, the Heart Rate measurement value is packed into the advertiser buffer and broadcasted over the Bluetooth network with the relevant UUID value. Together with the obtained measurement,
the body sensor location data package is created and handled similarly.
<br>
The structure of both types of data is implemented according to HDP (Health Device Profile) Bluetooth standard. For details, see the official characteristics defined by the
Bluetooth SIG, Inc.:
	<ul>
		<li><a href="https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.heart_rate.xml">Heart Rate</a> service specification.
		According to the standard, the Heart Rate Control Point is omitted as the Energy Expanded flag is set to disabled state in the Heart Rate Measurement service;</li>
		<li><a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml">Heart Rate
		Measurement</a> service specification;</li>
		<li><a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.body_sensor_location.xml">Body Sensor
		Location</a> service specification.</li>
	</ul>
</p>

<pre class="prettyprint">
static void __sensor_data_read_cb(float *data, int data_count)
{
&nbsp;&nbsp;&nbsp;int buffer_size = 0;
&nbsp;&nbsp;&nbsp;char *buffer = NULL;
&nbsp;&nbsp;&nbsp;const char *uuid = NULL;

&nbsp;&nbsp;&nbsp;if (!__ctrldata.adv_hrm_h)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (__pack_heart_rate_measurement_data(data[HEART_RATE_SENSOR_DATA_INDEX], &buffer, &buffer_size)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid = heart_rate_measurement_model_get_uuid();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertizer_set_data(&__ctrldata.adv_hrm_h, uuid, (const char *)buffer, buffer_size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (__pack_body_sensor_location_data(&buffer, &buffer_size)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid = body_sensor_location_model_get_uuid();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertizer_set_data(&__ctrldata.adv_hrm_h, uuid, (const char *)buffer, buffer_size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>
The data is packed into the buffers using the following functions:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">__pack_heart_rate_measurement_data()</span> - handles Heart Rate Measurement value obtained from the Heart Rate sensor;</li>
		<li><span style="font-family: Courier New,Courier,monospace">__pack_body_sensor_location_data()</span> - handles Body Sensor Location defined as a constant value respective to the
		device the software runs on.</li>
	</ul>
Once the data is packed into the internal buffer according to the adopted standard, it is added to the advertiser (together with the relevant UUID value) using the
<span style="font-family: Courier New,Courier,monospace">bt_advertizer_set_data()</span> function.
<br>
From now on, the data is advertised over the Bluetooth network as long as it is altered in subsequent calls of the <span style="font-family: Courier New,Courier,monospace">__sensor_data_read_cb()</span>
callback function.
<br>
The procedure of adding data to the advertiser is shown below.
</p>

<pre class="prettyprint">
bool bt_advertizer_set_data(bt_advertiser_h *adv_h, const char *uuid, const char *data, int data_size)
{
&nbsp;&nbsp;&nbsp;bt_common_stop_advertising(*adv_h);

&nbsp;&nbsp;&nbsp;if (bt_common_clear_advertizer(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__set_scan_response_properties(*adv_h, __advertizer_appearance);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bt_common_add_service_solicitation_uuid(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE, uuid))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_size > 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_common_set_service_data(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE, uuid, data, data_size);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bt_common_start_advertising(*adv_h, NULL);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
In order to add new data to the advertiser, it must first be stopped (<span style="font-family: Courier New,Courier,monospace">bt_common_stop_advertising()</span>) and internal data buffers responsible for
responding to scan requests have to be cleared (<span style="font-family: Courier New,Courier,monospace">bt_common_clear_advertizer()</span>). The initial properties of the advertiser's scan response buffer
must be configured again (<span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span>). Now it is ready to accept new data which will be provided to the requester
in a scan response message. The <span style="font-family: Courier New,Courier,monospace">bt_common_add_service_solicitation_uuid()</span> function creates a new service buffer for the relevant data
(identified by the provided UUID) added with the <span style="font-family: Courier New,Courier,monospace">bt_common_set_service_data()</span> function. At the end, the advertiser is started
(<span style="font-family: Courier New,Courier,monospace">bt_common_start_advertising()</span>).
</p>

<p>
See the <a href="#ref">References</a> section for details of all undescribed functions.
</p>

<h3 id="ref">References</h3>

<p>
For developer's convenience, the controller module contains a set of functions wrapping
<a href="https://developer.tizen.org/dev-guide/2.4.0/org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__ADAPTER__LE__MODULE.html">Bluetooth LE Adapter</a>
(<span style="font-family: Courier New,Courier,monospace">bt_common.c</span> source file) and <a href="https://developer.tizen.org/dev-guide/2.4.0/org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">Sensor API</a>
(<span style="font-family: Courier New,Courier,monospace">sensor_listener.c</span> source file).
These functions are not listed in this document due to their simplicity.
</p>

<p>
The <span style="font-family: Courier New,Courier,monospace">__pack_heart_rate_measurement_data()</span> and
<span style="font-family: Courier New,Courier,monospace">__pack_body_sensor_location_data()</span> functions are not listed here as they simply encode the provided values according to
adopted Bluetooth SIG standards.
</p>

<pre class="prettyprint">
void bt_advertiser_delete(bt_advertiser_h *adv_h)
{
&nbsp;&nbsp;&nbsp;/* Stops advertising and responding to scan requests. *.
&nbsp;&nbsp;&nbsp;bt_common_stop_advertising(*adv_h);
&nbsp;&nbsp;&nbsp;__delete_advertizer(adv_h);
}
</pre>

<pre class="prettyprint">
static void __delete_advertizer(bt_advertiser_h *adv_h)
{
&nbsp;&nbsp;&nbsp;/* Deletes the advertiser's handle. */
&nbsp;&nbsp;&nbsp;bt_common_delete_advertizer(*adv_h);
&nbsp;&nbsp;&nbsp;/* Variables clearing. */
&nbsp;&nbsp;&nbsp;*adv_h = NULL;
&nbsp;&nbsp;&nbsp;__advertizer_appearance = 0;
}
</pre>

<pre class="prettyprint">
bool __set_advertizing_properties(bt_advertiser_h adv_h)
{
&nbsp;&nbsp;&nbsp;struct _adv_properties properties = {0,};

&nbsp;&nbsp;&nbsp;/* Advertising message configuration. */
&nbsp;&nbsp;&nbsp;properties.pkt_type = BT_ADAPTER_LE_PACKET_ADVERTISING;
&nbsp;&nbsp;&nbsp;properties.name = true;
&nbsp;&nbsp;&nbsp;properties.tx_power = false;
&nbsp;&nbsp;&nbsp;properties.appearance = 0;
&nbsp;&nbsp;&nbsp;properties.manufacturer_id = MANUFACTURER_ID_SAMSUNG;
&nbsp;&nbsp;&nbsp;properties.manufacturer_data.id = MANUFACTURER_ID_SAMSUNG;

&nbsp;&nbsp;&nbsp;/* The configuration is applied to the advertiser. */
&nbsp;&nbsp;&nbsp;return __set_properties(adv_h, properties);
}
</pre>

<pre class="prettyprint">
bool __set_scan_response_properties(bt_advertiser_h adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;struct _adv_properties properties = {0,};

&nbsp;&nbsp;&nbsp;/* Scan response message configuration. */
&nbsp;&nbsp;&nbsp;properties.pkt_type = BT_ADAPTER_LE_PACKET_SCAN_RESPONSE;
&nbsp;&nbsp;&nbsp;properties.name = true;
&nbsp;&nbsp;&nbsp;properties.tx_power = false;
&nbsp;&nbsp;&nbsp;properties.appearance = appearance;
&nbsp;&nbsp;&nbsp;properties.manufacturer_id = MANUFACTURER_ID_SAMSUNG;
&nbsp;&nbsp;&nbsp;properties.manufacturer_data.id = MANUFACTURER_ID_SAMSUNG;

&nbsp;&nbsp;&nbsp;/* The configuration is applied to the advertiser. */
&nbsp;&nbsp;&nbsp;return __set_properties(adv_h, properties);
}
</pre>

<pre class="prettyprint">
const char *heart_rate_measurement_model_get_uuid(void)
{
&nbsp;&nbsp;&nbsp;/* HRM_UUID is defined as string constant: "2A37". */
&nbsp;&nbsp;&nbsp;return HRM_UUID;
}
</pre>

<pre class="prettyprint">
const char *body_sensor_location_model_get_uuid(void)
{
&nbsp;&nbsp;&nbsp;/* BSL_UUID is defined as string constant: "2A38". */
&nbsp;&nbsp;&nbsp;return BSL_UUID;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
