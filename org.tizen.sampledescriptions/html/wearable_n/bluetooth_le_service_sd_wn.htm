<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Bluetooth LE Service Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

<h1>Bluetooth LE Service Sample Overview</h1>

<p>
The Bluetooth LE Service sample application demonstrates how to implement a service that continuously broadcasts data using the Bluetooth Low Energy (LE) adapter and the <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__NETWORK__BLUETOOTH__ADAPTER__LE__MODULE.html">Bluetooth LE Adapter</a> API.</p>

<p>This kind of continuous data broadcast is called advertising. The service advertises small packets of data to identify a device within the Bluetooth network. Once the advertisement is received by any other device, they can query the advertiser for detailed service data. The query process is called scanning. The scan response returns the service data, identified by a preassigned UUID.</p>

<p>The purpose of this sample application is to share health information gathered from the heart rate sensor built into the wearable device. There are 2 types of advertised information:</p>
	<ul>
		<li>Heart rate measurement
<p>The number of heart beats per second, which is acquired directly from the heart rate sensor. This data is identified by <span style="font-family: Courier New,Courier,monospace">UUID = 0x2A37</span>.</p></li>
		<li>Body sensor location
<p>The point of the measurement, which is fixed for the entire life-cycle of the service. This data is identified by <span style="font-family: Courier New,Courier,monospace">UUID = 0x2A38</span>.</p></li>
	</ul>


<h2>Prerequisites</h2>

<p>To ensure proper application  execution, the following privileges must be set:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/bluetooth</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/healthinfo</span></li>
	</ul>

<h2>Implementation</h2>

<p>For the details of undescribed function within the following sections, see <a href="#ref">References</a>.</p>

<h3>Service Initialization and Termination</h3>

<p>The service application must be properly initialized and terminated:</p>

<ul>
<li>Initialization
<p>Before the service starts its operation, the availability of relevant Bluetooth interfaces is checked by calling the following functions:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">bt_common_is_bluetooth_supported()</span> (general Bluetooth adapter)</li>
		<li><span style="font-family: Courier New,Courier,monospace">bt_common_is_bluetooth_le_supported()</span> (LE Bluetooth adapter)</li>
	</ul>
<p>If both adapters are available, the heart rate sensor listener is created with the <span style="font-family: Courier New,Courier,monospace">sensor_listener_create()</span> function. Finally, the Bluetooth interface is initialized with the <span style="font-family: Courier New,Courier,monospace">__bt_init()</span> function.</p>


<pre class="prettyprint">
static bool 
__bt_init(void)
{
&nbsp;&nbsp;&nbsp;bool is_enabled = false;

&nbsp;&nbsp;&nbsp;// Initialize access to the hardware Bluetooth adapter
&nbsp;&nbsp;&nbsp;if (bt_common_init()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Register __bt_device_state_changed_cb() callback for Bluetooth adapter state changes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_common_set_state_change_callback(__bt_device_state_changed_cb);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Obtain the current state of the Bluetooth adapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If it is enabled, the __bt_device_state_changed_cb() callback is artificially invoked
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_common_get_state(&amp;is_enabled);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (is_enabled)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_device_state_changed_cb(BT_ERROR_NONE, BT_ADAPTER_ENABLED, NULL);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return is_enabled;
}
</pre></li>

<li>Termination

<p>In the service termination procedure, the heart rate sensor listener and data advertiser are destroyed, the assigned callback function is unset and, finally, the access to the Bluetooth adapter is deinitialized.</p>

<pre class="prettyprint">
void 
controller_terminate(void)
{
&nbsp;&nbsp;&nbsp;sensor_listener_delete();

&nbsp;&nbsp;&nbsp;bt_advertiser_delete(&amp;__ctrldata.adv_hrm_h);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, &quot;Heart Rate Measurement advertiser stopped.&quot;);

&nbsp;&nbsp;&nbsp;bt_common_unset_state_change_callback();
&nbsp;&nbsp;&nbsp;bt_common_deinit();
}
</pre>
</li></ul>

<h3 id="adv-creation">Creating the Advertiser</h3>

<p>To create the advertiser:</p>

<ol>
<li>
<p>When the Bluetooth adapter state changes to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_ENABLED</span> and the <span style="font-family: Courier New,Courier,monospace">__bt_device_state_changed_cb()</span> callback is invoked, the advertiser is created.</p>

<p>In case the <span style="font-family: Courier New,Courier,monospace">__bt_device_state_changed_cb()</span> callback is invoked with the <span style="font-family: Courier New,Courier,monospace">adapter_state</span> parameter set to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_DISABLED</span>, the currently running advertiser is deleted (<span style="font-family: Courier New,Courier,monospace">bt_advertiser_delete()</span>).</p>

<pre class="prettyprint">
static void 
__bt_device_state_changed_cb(int result, bt_adapter_state_e adapter_state, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (adapter_state == BT_ADAPTER_ENABLED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bt_advertiser_create(&amp;__ctrldata.adv_hrm_h, APPEARANCE_GENERIC_HEART_RATE_SENSOR)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Heart Rate Measurement advertiser started.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, &quot;Failed to start Heart Rate Measurement advertiser.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertiser_delete(&amp;__ctrldata.adv_hrm_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_WARN, LOG_TAG, &quot;Heart Rate Measurement advertiser stopped.&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace">bt_advertiser_create()</span> function creates the advertiser handle, performs its initial configuration, and starts advertising.</p>
<p>The creation of the advertiser handle and the initial configuration is performed by the <span style="font-family: Courier New,Courier,monospace">__create_advertizer()</span> function. Once the function succeeds, the advertising starts (<span style="font-family: Courier New,Courier,monospace">bt_common_start_advertising()</span>).</p>

<pre class="prettyprint">
bool 
bt_advertiser_create(bt_advertiser_h *adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;if (!__create_advertizer(adv_h, appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_start_advertising(*adv_h, NULL)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__delete_advertizer(adv_h);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;__advertizer_appearance = appearance;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>
<p>Within the <span style="font-family: Courier New,Courier,monospace">__create_advertizer()</span> function:</p>
	<ul>
		<li>The advertiser handle is created with the <span style="font-family: Courier New,Courier,monospace">bt_common_create_advertizer()</span> function.</li>
		<li>The advertiser mode is set to <span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_ADVERTISING_MODE_LOW_LATENCY</span>, which sets the lowest possible interval between subsequent packet sending with the cost of higher energy consumption (<span style="font-family: Courier New,Courier,monospace">bt_common_set_advertising_mode()</span>).</li>
		<li>The advertiser remains connectable by other peers (<span style="font-family: Courier New,Courier,monospace">bt_common_set_connectable()</span>).</li>
		<li>The advertiser properties are defined and set:
			<ul>
				<li>For the advertising mode (<span style="font-family: Courier New,Courier,monospace">__set_advertizing_properties()</span>)</li>
				<li>For the scan response mode (<span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span>)</li>
			</ul>
		</li>
	</ul>

<pre class="prettyprint">
static bool 
__create_advertizer(bt_advertiser_h *adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;*adv_h = NULL;

&nbsp;&nbsp;&nbsp;if (!bt_common_create_advertizer(adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_set_advertising_mode(*adv_h, BT_ADAPTER_LE_ADVERTISING_MODE_LOW_LATENCY))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!bt_common_set_connectable(*adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__set_advertizing_properties(*adv_h))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__set_scan_response_properties(*adv_h, appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>The advertiser properties determine the amount and category of information to be broadcast over the Bluetooth LE adapter. It is assumed that:</p>
	<ul>
		<li>An advertising packet (<span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_PACKET_ADVERTISING</span>) is a carrier of the following information:
			<ul>
				<li>Device name (obtained automatically by the internal implementation of the Bluetooth LE Adapter module)</li>
				<li>Manufacturer identifier: <span style="font-family: Courier New,Courier,monospace">0x0075</span> (complies with the <a href="https://www.bluetooth.com/specifications/assigned-numbers/Company-Identifiers" target="_blank">company identifiers</a> assigned by the Bluetooth SIG, Inc., so that the assigned value identifies the Samsung Electronics Co. Ltd. company)</li>
			</ul>
		<p>The role of this packet type is to introduce the device (advertise its existence) within the Bluetooth LE network. The devices that receive such a packet can send a scan request to query the detailed data carried by the device.</p>
		</li>
		<li>A scan response packet (<span style="font-family: Courier New,Courier,monospace">BT_ADAPTER_LE_PACKET_SCAN_RESPONSE</span>) is a carrier of the following information:
			<ul>
				<li>Device name (obtained automatically by the internal implementation of the Bluetooth LE Adapter module)</li>
				<li>Appearance: <span style="font-family: Courier New,Courier,monospace">832</span> (complies with the
				<a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.gap.appearance.xml" target="_blank">external device appearance</a> assigned by the Bluetooth SIG, Inc., so that the assigned value identifies the device as a generic heart rate sensor)</li>
				<li>Manufacturer identifier (same as in the advertising packet)</li>
			</ul>
		<p>The role of this packet type is to provide detailed data acquired during the service life-cycle (heart rate measurement and body sensor location values). This packet is sent in response to a scan request.</p>
		</li>
	</ul>
<p>The <span style="font-family: Courier New,Courier,monospace">__set_advertizing_properties()</span> and the <span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span> functions are only convenient wrappers and call the <span style="font-family: Courier New,Courier,monospace">__set_properties()</span> function with appropriately adjusted parameters.</p>

<pre class="prettyprint">
static bool 
__set_properties(bt_advertiser_h adv_h, struct _adv_properties properties)
{
&nbsp;&nbsp;&nbsp;// Set whether the device name is to be included in the packet
&nbsp;&nbsp;&nbsp;if (!bt_common_set_device_name(adv_h, properties.pkt_type, properties.name))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;// Set the device appearance value, if provided
&nbsp;&nbsp;&nbsp;if (properties.appearance &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!bt_common_set_appearance(adv_h, properties.pkt_type, properties.appearance))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;// Set the device manufacturer identifier, if provided
&nbsp;&nbsp;&nbsp;if (properties.manufacturer_id &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!bt_common_set_manufacturer(adv_h, properties.pkt_type, properties.manufacturer_id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(const char *)&amp;properties.manufacturer_data,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sizeof(struct _manufacturer_data)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;// Set whether the transmission power level is to be included in the packet
&nbsp;&nbsp;&nbsp;if (!bt_common_set_tx_power_level(adv_h, properties.pkt_type, properties.tx_power))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
</ol>

<h3 id="data-adv">Advertising Data</h3>

<p>Each time data is received from the heart rate sensor, the <span style="font-family: Courier New,Courier,monospace">__sensor_data_read_cb()</span> callback is invoked. Within the callback, the heart rate measurement value is packed into the advertiser buffer and broadcast over the Bluetooth network with the relevant UUID value. Together with the obtained measurement, the body sensor location data package is created and handled similarly.</p>

<p>The structure of both data types is implemented according to the HDP (Health Device Profile) Bluetooth standard. For details, see the official characteristics defined by the Bluetooth SIG, Inc.:</p>
	<ul>
		<li><a href="https://developer.bluetooth.org/gatt/services/Pages/ServiceViewer.aspx?u=org.bluetooth.service.heart_rate.xml" target="_blank">Heart Rate</a> service specification.
		<p>According to the standard, the Heart Rate Control Point is omitted as the Energy Expanded flag is set to the disabled state in the Heart Rate Measurement service.</p></li>
		<li><a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.heart_rate_measurement.xml" target="_blank">Heart Rate Measurement</a> service specification</li>
		<li><a href="https://developer.bluetooth.org/gatt/characteristics/Pages/CharacteristicViewer.aspx?u=org.bluetooth.characteristic.body_sensor_location.xml" target="_blank">Body Sensor Location</a> service specification</li>
	</ul>

<p>The data is packed into the buffers using the following functions:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">__pack_heart_rate_measurement_data()</span> handles the heart rate measurement value obtained from the heart rate sensor.</li>
		<li><span style="font-family: Courier New,Courier,monospace">__pack_body_sensor_location_data()</span> handles the body sensor location defined as a constant value respective to the device the software runs on.</li>
	</ul>	
	
<pre class="prettyprint">
static void 
__sensor_data_read_cb(float *data, int data_count)
{
&nbsp;&nbsp;&nbsp;int buffer_size = 0;
&nbsp;&nbsp;&nbsp;char *buffer = NULL;
&nbsp;&nbsp;&nbsp;const char *uuid = NULL;

&nbsp;&nbsp;&nbsp;if (!__ctrldata.adv_hrm_h)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;if (__pack_heart_rate_measurement_data(data[HEART_RATE_SENSOR_DATA_INDEX], &amp;buffer, &amp;buffer_size)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid = heart_rate_measurement_model_get_uuid();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertizer_set_data(&amp;__ctrldata.adv_hrm_h, uuid, (const char *)buffer, buffer_size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (__pack_body_sensor_location_data(&amp;buffer, &amp;buffer_size)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;uuid = body_sensor_location_model_get_uuid();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_advertizer_set_data(&amp;__ctrldata.adv_hrm_h, uuid, (const char *)buffer, buffer_size);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(buffer);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>Once the data is packed into the internal buffer according to the adopted standard, it is added to the advertiser (together with the relevant UUID value) using the <span style="font-family: Courier New,Courier,monospace">bt_advertizer_set_data()</span> function.</p>
<p>From now on, the data is advertised over the Bluetooth network as long as it is altered in subsequent calls of the <span style="font-family: Courier New,Courier,monospace">__sensor_data_read_cb()</span> callback.</p>
<p>To add data to the advertiser:</p>

<ol>
<li>Stop the advertiser (<span style="font-family: Courier New,Courier,monospace">bt_common_stop_advertising()</span>) and clear the internal data buffers responsible for responding to scan requests (<span style="font-family: Courier New,Courier,monospace">bt_common_clear_advertizer()</span>).</li>
<li>Configure the initial properties of the advertiser scan response buffer again (<span style="font-family: Courier New,Courier,monospace">__set_scan_response_properties()</span>) to make it ready to accept new data which is provided to the requester in a scan response message.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">bt_common_add_service_solicitation_uuid()</span> function creates a new service buffer for the relevant data (identified by the provided UUID) added with the <span style="font-family: Courier New,Courier,monospace">bt_common_set_service_data()</span> function.</li>
<li>Start the advertiser (<span style="font-family: Courier New,Courier,monospace">bt_common_start_advertising()</span>).</li>
</ol>

<pre class="prettyprint">
bool 
bt_advertizer_set_data(bt_advertiser_h *adv_h, const char *uuid, const char *data, int data_size)
{
&nbsp;&nbsp;&nbsp;bt_common_stop_advertising(*adv_h);

&nbsp;&nbsp;&nbsp;if (bt_common_clear_advertizer(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__set_scan_response_properties(*adv_h, __advertizer_appearance);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bt_common_add_service_solicitation_uuid(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE, uuid))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_size &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_common_set_service_data(*adv_h, BT_ADAPTER_LE_PACKET_SCAN_RESPONSE, uuid, data, data_size);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bt_common_start_advertising(*adv_h, NULL);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3 id="ref">References</h3>

<p>For your convenience, the controller module contains a set of functions wrapping the Bluetooth LE Adapter API (<span style="font-family: Courier New,Courier,monospace">bt_common.c</span> source file) and the <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__SYSTEM__SENSOR__MODULE.html">Sensor API</a> (<span style="font-family: Courier New,Courier,monospace">sensor_listener.c</span> source file). These functions are not listed in this topic due to their simplicity.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">__pack_heart_rate_measurement_data()</span> and <span style="font-family: Courier New,Courier,monospace">__pack_body_sensor_location_data()</span> functions are not listed here as they simply encode the provided values according to the adopted Bluetooth SIG standards.</p>

<p>The following functions are used in the above sections:</p>

<pre class="prettyprint">
void 
bt_advertiser_delete(bt_advertiser_h *adv_h)
{
&nbsp;&nbsp;&nbsp;// Stops advertising and responding to scan requests
&nbsp;&nbsp;&nbsp;bt_common_stop_advertising(*adv_h);
&nbsp;&nbsp;&nbsp;__delete_advertizer(adv_h);
}

static void 
__delete_advertizer(bt_advertiser_h *adv_h)
{
&nbsp;&nbsp;&nbsp;// Delete the advertiser handle
&nbsp;&nbsp;&nbsp;bt_common_delete_advertizer(*adv_h);
&nbsp;&nbsp;&nbsp;// Clear variables
&nbsp;&nbsp;&nbsp;*adv_h = NULL;
&nbsp;&nbsp;&nbsp;__advertizer_appearance = 0;
}

bool 
__set_advertizing_properties(bt_advertiser_h adv_h)
{
&nbsp;&nbsp;&nbsp;struct _adv_properties properties = {0,};

&nbsp;&nbsp;&nbsp;// Advertising message configuration
&nbsp;&nbsp;&nbsp;properties.pkt_type = BT_ADAPTER_LE_PACKET_ADVERTISING;
&nbsp;&nbsp;&nbsp;properties.name = true;
&nbsp;&nbsp;&nbsp;properties.tx_power = false;
&nbsp;&nbsp;&nbsp;properties.appearance = 0;
&nbsp;&nbsp;&nbsp;properties.manufacturer_id = MANUFACTURER_ID_SAMSUNG;
&nbsp;&nbsp;&nbsp;properties.manufacturer_data.id = MANUFACTURER_ID_SAMSUNG;

&nbsp;&nbsp;&nbsp;// Configuration is applied to the advertiser
&nbsp;&nbsp;&nbsp;return __set_properties(adv_h, properties);
}

bool 
__set_scan_response_properties(bt_advertiser_h adv_h, int appearance)
{
&nbsp;&nbsp;&nbsp;struct _adv_properties properties = {0,};

&nbsp;&nbsp;&nbsp;// Scan response message configuration
&nbsp;&nbsp;&nbsp;properties.pkt_type = BT_ADAPTER_LE_PACKET_SCAN_RESPONSE;
&nbsp;&nbsp;&nbsp;properties.name = true;
&nbsp;&nbsp;&nbsp;properties.tx_power = false;
&nbsp;&nbsp;&nbsp;properties.appearance = appearance;
&nbsp;&nbsp;&nbsp;properties.manufacturer_id = MANUFACTURER_ID_SAMSUNG;
&nbsp;&nbsp;&nbsp;properties.manufacturer_data.id = MANUFACTURER_ID_SAMSUNG;

&nbsp;&nbsp;&nbsp;// Configuration is applied to the advertiser
&nbsp;&nbsp;&nbsp;return __set_properties(adv_h, properties);
}

const char 
*heart_rate_measurement_model_get_uuid(void)
{
&nbsp;&nbsp;&nbsp;// HRM_UUID is defined as string constant: &quot;2A37&quot;
&nbsp;&nbsp;&nbsp;return HRM_UUID;
}

const char 
*body_sensor_location_model_get_uuid(void)
{
&nbsp;&nbsp;&nbsp;// BSL_UUID is defined as string constant: &quot;2A38&quot;
&nbsp;&nbsp;&nbsp;return BSL_UUID;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
