<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Wearable Native Sample Descriptions</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	
  <h1>Wearable Native Sample Descriptions</h1> 
 
   <p>To access general information about the native sample functionality and the content of the sample source files, click the sample name in the following tables.</p>   
   
   <table border="1"> 
   <caption>
     Table: Wearable native samples in the Tizen SDK
   </caption> 
   <colgroup> 
    <col /> 
    <col /> 
   </colgroup> 
   <tbody> 
    <tr> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Sample name</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr> 
	<tr> 
     <td><a href="circleuicomponents_sd_wn.htm">(Circle) UI Components</a></td> 
     <td>Demonstrates how you can implement UI components in a circular view.</td>
    </tr>	
	<tr> 
     <td><a href="rectuicomponents_sd_wn.htm">(Rectangle) UI Components</a></td> 
     <td>Demonstrates how you can implement UI components in a rectangular view.</td>
    </tr>
    <tr>
     <td><a href="circleambientanalogwatch_wn.htm">(Circle) Ambient Analog Watch</a></td>
     <td>Demonstrates how you can implement a simple watch application with ambient mode support.</td>
    </tr>
	<tr> 
     <td><a href="bluetoothchat_sd_wn.htm">(Circle) Bluetooth Chat</a></td> 
     <td>Demonstrates how you can send and receive data between 2 devices.</td>
    </tr>	
	<tr> 
     <td><a href="cairo_basic_sd_wn.htm">(Circle) Cairo Basic</a></td> 
     <td>Demonstrates how you can implement the Cairo image backend.</td>
    </tr>
	<tr> 
     <td><a href="cairo_evasgl_sd_wn.htm">(Circle) Cairo EvasGL</a></td> 
     <td>Demonstrates how you can implement the Cairo GL backend with the Evas_GL surface.</td>
    </tr>	
    <tr>
     <td><a href="circlecircular_camera_sd_wn.htm">(Circle) Circular Camera</a></td>
     <td>Demonstrates how you can handle camera features, such as start a camera preview and capture images.</td>
    </tr>
    <tr>
     <td><a href="circleemail_sd_wn.htm">(Circle) Email</a></td> 
     <td>Demonstrates how you can implement a complex circular email view using EFL UI components and containers.</td>
    </tr>
	<tr>
     <td><a href="circlerotarytimer_sd_wn.htm">(Circle) Rotary Timer</a></td> 
     <td>Demonstrates how you can implement a circular digital clock with a timer function.</td>
    </tr>	
    <tr>
     <td><a href="circlesensors_sd_wn.htm">(Circle) Sensors</a></td>
     <td>Demonstrates how you can implement an application utilizing the device sensors.</td>
    </tr>
	<tr> 
     <td><a href="circlesettingtime_sd_wn.htm">(Circle) Setting Time</a></td> 
     <td>Demonstrates how you can implement a complex circular time setting view using EFL UI components and containers.</td>
    </tr>
	<tr> 
     <td><a href="circlesettings_sd_wn.htm">(Circle) Settings</a></td> 
     <td>Demonstrates how you can implement a complex circular settings view using EFL UI components and containers.</td>
    </tr>
	<tr> 
     <td><a href="rectemail_sd_wn.htm">(Rectangle) Email</a></td> 
     <td>Demonstrates how you can implement a complex rectangular email view using EFL UI components and containers.</td>
    </tr>
	<tr> 
     <td><a href="rectnotificationmanager_sd_wn.htm">(Rectangle) NotificationManager</a></td> 
     <td>Demonstrates how you can implement and manage notifications.</td>
    </tr>
	<tr> 
     <td><a href="rectsettings_sd_wn.htm">(Rectangle) Settings</a></td> 
     <td>Demonstrates how you can implement a complex rectangular settings view using EFL UI components and containers.</td>
    </tr>
	<tr> 
     <td><a href="rectuidialer_sd_wn.htm">(Rectangle) UI Dialer</a></td> 
     <td>Demonstrates how you can implement a rectangular dialer view.</td>
    </tr>	
	<tr>
	 <td><a href="rectwidgetviewer_sd_wn.htm">(Rectangle) Widget Viewer</a></td>
	 <td>Demonstrates how you can use the widget service and viewer.</td>
	</tr>
	<tr> 
     <td><a href="analog_watch_sd_wn.htm">Analog Watch</a></td> 
     <td>Demonstrates how you can implement an analog watch application.</td>
    </tr>
	<tr> 
     <td><a href="digital_watch_sd_wn.htm">Digital-Watch</a></td> 
     <td>Demonstrates how you can implement a watch application.</td>
    </tr>	
	<tr> 
     <td><a href="evas_gl_sd_wn.htm">EvasGLCube</a></td> 
     <td>Demonstrates how you can implement a cube that can be rotated on the screen through Evas_GL.</td>
    </tr>	
	<tr> 
     <td><a href="glview11_cube_sd_wn.htm">GLView11Cube</a></td> 
     <td>Demonstrates how you can use ElmGLView to create a 3D cube on the screen.</td>
    </tr>
	<tr> 
     <td><a href="glview_cube_sd_wn.htm">GLViewCube</a></td> 
     <td>Demonstrates how you can implement a simple UI and draw a rotating cube using simple vertex and fragment shaders.</td>
    </tr>
	<tr> 
     <td><a href="glview_shader_sd_wn.htm">GLViewShader</a></td> 
     <td>Demonstrates how you can render more complex geometric shapes with OepnGL&reg; ES and use Elementary GLView helper macros to port existing code.</td>
    </tr>	
	<tr> 
     <td><a href="widget_animation_sd_wn.htm">Widget Animation</a></td> 
     <td>Demonstrates how you can implement an animation to a widget application.</td>
    </tr>	

   </tbody> 
  </table> 
 
 
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
