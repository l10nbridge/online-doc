<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Analog Watch Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>Analog Watch Sample Overview</h1> 
  
  <p>The Analog Watch sample demonstrates how you can create an analog watch application.</p>
<p>The following figure illustrates the main screen of the Analog Watch application and the UI component tree.</p>

    <p class="figure">Figure: Analog Watch screen</p> 
  <p align="center"><img alt="Analog Watch screen" src="../images/analog_watch_sd_wn.png" /></p>
  <p align="center"><img alt="Analog Watch screen" src="../images/analog_watch_tree_sd_wn.png" /></p>

<h2>Implementation</h2>

<p>To implement the analog watch:</p>
<ol>
<li>Initialize the application by creating the window and layout.
<p>The <span style="font-family: Courier New,Courier,monospace;">_create_analogwatch()</span> function creates the window and layout, which are the basis of the analog watch application. After creating the window and layout, the <span style="font-family: Courier New,Courier,monospace;">_create_clock()</span> function makes the detailed layout of the analog watch, and the <span style="font-family: Courier New,Courier,monospace;">_clock_set_info_time()</span> function sets the time by retrieving the current time with the <span style="font-family: Courier New,Courier,monospace;">watch_time_get_current_time()</span> function.</p>
<pre class="prettyprint">
static void 
_create_analogwatch(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = _create_win(ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;ad-&gt;layout = _create_layout(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;layout, ERROR);

&nbsp;&nbsp;&nbsp;// Clock
&nbsp;&nbsp;&nbsp;ad-&gt;clock = _create_clock(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;clock, ERROR);

&nbsp;&nbsp;&nbsp;ret = watch_time_get_current_time(&amp;watch_time);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;failed to get current time. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_clock_set_info_time(ad, watch_time);

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>

<li>Create the detailed layout of the analog watch.
<p>The <span style="font-family: Courier New,Courier,monospace;">_create_clock()</span> function creates the detailed layout of the analog watch application: it makes a rectangle which is the background of the analog watch, and sets the size of the rectangle to become a square. It also makes the hands of the analog watch.</p>

<pre class="prettyprint">
static Evas_Object *
_create_clock(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Clock base
&nbsp;&nbsp;&nbsp;clock = evas_object_rectangle_add(evas);
&nbsp;&nbsp;&nbsp;retv_if(!clock, NULL);

&nbsp;&nbsp;&nbsp;if (ad-&gt;w &lt; ad-&gt;h) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(clock, ad-&gt;w, ad-&gt;w);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(clock, ad-&gt;w, ad-&gt;w);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(clock, ad-&gt;h, ad-&gt;h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(clock, ad-&gt;h, ad-&gt;h);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_color_set(clock, 255, 255, 255, 255);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;clock&quot;, clock);
&nbsp;&nbsp;&nbsp;evas_object_show(clock);

&nbsp;&nbsp;&nbsp;// Hands of the clock
&nbsp;&nbsp;&nbsp;ad-&gt;hour_needle = evas_object_line_add(evas);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;hour_needle, 0, 0, 0, 255);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;hour_needle);

&nbsp;&nbsp;&nbsp;ad-&gt;min_needle = evas_object_line_add(evas);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;min_needle, 100, 100, 100, 255);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;min_needle);

&nbsp;&nbsp;&nbsp;ad-&gt;sec_needle = evas_object_line_add(evas);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;sec_needle, 255, 0, 0, 255);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;sec_needle);

&nbsp;&nbsp;&nbsp;return clock;
} 
</pre>
</li>
<li>Renew the time once per second. 
<p>The <span style="font-family: Courier New,Courier,monospace;">app_time_tick()</span> function is one of the <span style="font-family: Courier New,Courier,monospace;">watch_app_lifecycle_callback_s</span> structure variables, and is called at least once per second. Watch applications can get the current time from the <span style="font-family: Courier New,Courier,monospace;">watch_time</span> handle. Therefore, the <span style="font-family: Courier New,Courier,monospace;">_clock_set_info_time()</span> function is also called once per second.</p>

<pre class="prettyprint">
static void 
app_time_tick(watch_time_h watch_time, void* user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = user_data;

&nbsp;&nbsp;&nbsp;_clock_set_info_time(ad, watch_time);
}
</pre>
</li>

<li>Draw the hands of the analog watch to follow the course of time.
<p>The <span style="font-family: Courier New,Courier,monospace;">_clock_set_info_time()</span> function is called every second, and it gets the current time using the <span style="font-family: Courier New,Courier,monospace;">watch_time_get_hour24/minute/second()</span> functions. It also draws the hands of the analog watch based on the time information.</p>

<pre class="prettyprint">
static void 
_clock_set_info_time(void *data, watch_time_h watch_time)
{
&nbsp;&nbsp;&nbsp;watch_time_get_hour24(watch_time, &amp;hour24);
&nbsp;&nbsp;&nbsp;watch_time_get_minute(watch_time, &amp;minute);
&nbsp;&nbsp;&nbsp;watch_time_get_second(watch_time, &amp;second);

&nbsp;&nbsp;&nbsp;w = ad-&gt;w;
&nbsp;&nbsp;&nbsp;h = ad-&gt;h;

&nbsp;&nbsp;&nbsp;num = _get_radian((hour24%12) * HOUR_ANGLE);
&nbsp;&nbsp;&nbsp;_D(&quot;Hour : %d&quot;, hour24%12);
&nbsp;&nbsp;&nbsp;evas_object_line_xy_set(ad-&gt;hour_needle, (w/2), (h/2), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(w/2) + HOUR_NEEDLE_SIZE*(sin(num)), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(h/2) - HOUR_NEEDLE_SIZE*(cos(num)));

&nbsp;&nbsp;&nbsp;num = _get_radian(minute * MIN_ANGLE);
&nbsp;&nbsp;&nbsp;_D(&quot;Min : %d&quot;, minute);
&nbsp;&nbsp;&nbsp;evas_object_line_xy_set(ad-&gt;min_needle, (w/2), (h/2), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(w/2) + MIN_NEEDLE_SIZE*(sin(num)), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(h/2) - MIN_NEEDLE_SIZE*(cos(num)));

&nbsp;&nbsp;&nbsp;num = _get_radian(second * SEC_ANGLE);
&nbsp;&nbsp;&nbsp;_D(&quot;Sec: %d&quot;, second);
&nbsp;&nbsp;&nbsp;evas_object_line_xy_set(ad-&gt;sec_needle, (w/2), (h/2), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(w/2) + SEC_NEEDLE_SIZE*(sin(num)), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(h/2) - SEC_NEEDLE_SIZE*(cos(num)));
}
</pre>
</li>
</ol>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>