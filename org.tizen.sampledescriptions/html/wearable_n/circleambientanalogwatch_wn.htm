<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Ambient Analog Watch Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>(Circle) Ambient Analog Watch Sample Overview</h1>

<p>The (Circle) Ambient Analog Watch sample application demonstrates how to implement a simple watch application with ambient mode support.</p>

<p>The following figure illustrates the 3 screens of the (Circle) Ambient Analog Watch sample application: the normal mode watch view, the ambient mode watch view, and the cipher disc selection view.</p>

<p class="figure" id="views">Figure: (Circle) Ambient Analog Watch views</p>
  <p align="center">
	  <img alt="(Circle) Ambient Analog Watch views" src="../images/circleambientanalogwatch_wn0.png" />
	  <img alt="(Circle) Ambient Analog Watch views" src="../images/circleambientanalogwatch_wn6.png" />
	  <img alt="(Circle) Ambient Analog Watch views" src="../images/circleambientanalogwatch_wn1.png" />
  </p>

<p>The elements on the screen display the current time:</p>
 <ul>
  <li>Red dot indicates seconds</li>
  <li>Small blue dot indicates hours</li>
  <li>Large blue dot indicates minutes</li>
 </ul>
<p>The indicators for battery level and Wi-Fi RSSI are located above the current date.</p>
<p>To select the cipher disc style, click the gear wheel button and select the style in the cipher disc selection view.</p>

<p class="figure">Figure: (Circle) Ambient Analog Watch component structure</p>
<p align="center">
 <img alt="(Circle) Ambient Analog Watch component structure" src="../images/circleambientanalogwatch_wn2.png" />
</p>
<h2>Prerequisites</h2>
  <p>To ensure proper application execution, the following privilege must be set:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.get</span></li>
  </ul>

<h2>Implementation</h2>

<h3>Main Module</h3>

<p>In the <span style="font-family: Courier New,Courier,monospace">main()</span> function, the application loop starts when the <span style="font-family: Courier New,Courier,monospace">watch_app_main()</span> function is invoked. An object of the <span style="font-family: Courier New,Courier,monospace">watch_app_lifecycle_callback_s</span> type can be passed to it.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">watch_app_lifecycle_callback_s</span> type differs from the <span style="font-family: Courier New,Courier,monospace">ui_app_lifecycle_callback_s</span> type used in a standard UI application. The <span style="font-family: Courier New,Courier,monospace">watch_app_lifecycle_callback_s</span> structure introduces 3 new callback pointers to:
</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">watch_app_time_tick_cb</span>: Called every second when the application is in the normal mode, giving the application a chance to refresh the time indicator.</li>
 <li><span style="font-family: Courier New,Courier,monospace">watch_app_ambient_tick_cb</span>: Called every minute when the application is in the ambient mode, giving the application a chance to refresh the time indicator.</li>
 <li><span style="font-family: Courier New,Courier,monospace">watch_app_ambient_changed_cb</span>: Called whenever the application enters the normal or ambient mode.</li>
</ul>

<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.time_tick = app_time_tick;
&nbsp;&nbsp;&nbsp;event_callback.ambient_tick = app_ambient_tick;
&nbsp;&nbsp;&nbsp;event_callback.ambient_changed = app_ambient_changed;

&nbsp;&nbsp;&nbsp;ret = watch_app_main(argc, argv, &amp;event_callback, NULL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return ret;
}

static void 
app_time_tick(watch_time_h watch_time, void *data)
{
&nbsp;&nbsp;&nbsp;// Variable definitions and error handling
&nbsp;&nbsp;&nbsp;__get_date_from_watch_time(watch_time, &amp;year, &amp;month, &amp;day, &amp;day_of_week,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;hours, &amp;minutes, &amp;seconds);

&nbsp;&nbsp;&nbsp;controller_tick(hours, minutes, seconds, year, month, day, day_of_week);
}

static void
app_ambient_changed(bool ambient_mode, void *data)
{
&nbsp;&nbsp;&nbsp;controller_set_ambient_mode(ambient_mode);
}

static void 
__get_date_from_watch_time(const watch_time_h watch_time, int *year, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int *month, int *day, int *day_of_week,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int *hours, int *minutes, int *seconds)
{
&nbsp;&nbsp;&nbsp;watch_time_get_hour24(watch_time, hours);
&nbsp;&nbsp;&nbsp;watch_time_get_minute(watch_time, minutes);
&nbsp;&nbsp;&nbsp;watch_time_get_second(watch_time, seconds);
&nbsp;&nbsp;&nbsp;watch_time_get_year(watch_time, year);
&nbsp;&nbsp;&nbsp;watch_time_get_month(watch_time, month);
&nbsp;&nbsp;&nbsp;watch_time_get_day(watch_time, day);
&nbsp;&nbsp;&nbsp;watch_time_get_day_of_week(watch_time, day_of_week);
}
</pre>

<h3>Controller Module</h3>
<p>The controller module has 3 important functions:</p>
<ul>
<li>
<p><span style="font-family: Courier New,Courier,monospace">controller_start_application()</span> is called at the application startup. </p>
<p>It sets up the view and adds the <span style="font-family: Courier New,Courier,monospace">__wifi_rssi_level_changed_cb()</span> callback to monitor Wi-Fi signal strength changes. It also sets the current time on the watch view.</p>
<pre class="prettyprint">
bool 
controller_start_application(int width, int height, int hour, int min, int sec,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int year, int month, int day, int week_day)
{
&nbsp;&nbsp;&nbsp;if (!view_create_gui(width, height))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (wifi_monitor_init())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_monitor_start_measure(__wifi_rssi_level_changed_cb);

&nbsp;&nbsp;&nbsp;view_set_time(hour, min, sec, year, month, day, week_day);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>
<p><span style="font-family: Courier New,Courier,monospace">controller_set_ambient_mode()</span> function is called from the <span style="font-family: Courier New,Courier,monospace">app_ambient_changed()</span> callback.</p>
<p>It is defined in the main module, allowing the application to track whether it is in the ambient or normal mode. In the ambient mode, stop any power consuming operations; for example, you can change the display state to one that has most of its pixels dark.</p>
<pre class="prettyprint">
void 
controller_set_ambient_mode(bool ambient_mode)
{
&nbsp;&nbsp;&nbsp;cdata.ambient_mode = ambient_mode;
&nbsp;&nbsp;&nbsp;view_set_ambient(cdata.ambient_mode);
&nbsp;&nbsp;&nbsp;if (cdata.ambient_mode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_monitor_stop_measure();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wifi_monitor_start_measure(__wifi_rssi_level_changed_cb);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">controller_tick()</span> function is called with a 1-second interval when the application is in the normal mode and with a 1-minute interval when it is in the ambient mode.</p>
<p>The function updates the time and date indicators. In addition, in the ambient mode, it reads the battery level and sets up the battery display accordingly.</p>
<pre class="prettyprint">
void 
controller_tick(int hour, int min, int sec, int year, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int month, int day, int week_day)
{
&nbsp;&nbsp;&nbsp;int batt_percent = 0;
&nbsp;&nbsp;&nbsp;view_set_time(hour, min, sec, year, month, day, week_day);
&nbsp;&nbsp;&nbsp;if (!cdata.ambient_mode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device_battery_get_percent(&amp;batt_percent);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_batt(batt_percent);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>

<h3>Main View Module</h3>

<p>To implement the main view:</p>

<ol>
<li>Create the main screen elements:

<ol type="a">
<li><p>Use the <span style="font-family: Courier New,Courier,monospace">watch_app_get_elm_win()</span> function to obtain a special watch type window. This way the application can receive the mode switch events properly (from normal to ambient and back).</p></li>
<li><p>Create 2 circular indicators:</p>
<ul><li>Create an elementary component and associate it with the circular surface.
<p>Use the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component to obtain the <span style="font-family: Courier New,Courier,monospace">indicators_layout</span> pointer.</p>
</li>
<li>Call the <span style="font-family: Courier New,Courier,monospace">eext_circle_surface_layout_add()</span> function to obtain a pointer (<span style="font-family: Courier New,Courier,monospace">indicators_layout_surface</span>) to a <span style="font-family: Courier New,Courier,monospace">Eext_Circle_Surface</span> object associated with the layout.</li></ul>

<p>The 2 pointers can now be used to create circle objects, or the time indicators. The pointers are passed to the <span style="font-family: Courier New,Courier,monospace">__create_time_indicator()</span> function and from there to the <span style="font-family: Courier New,Courier,monospace">circle_indicator_create()</span> function from the circle indicator module.</p>

<p>Up to this point in the <span style="font-family: Courier New,Courier,monospace">view_create_gui()</span>
function, the application screen looks like the left view in the following figure.</p>
</li>
<li><p>Create the main layout. It consists, among others, of a circular black background with 2 transparent rings (shown on the right in the following figure).</p>
<p>When the main layout object is stacked above circular objects, the resulting effect is the final application screen (shown on the left in the <a href="#views">(Circle) Ambient Analog Watch views</a> figure).</p> </li>
<li><p>Create the ambient digital clock layout. It is hidden until the application enters the ambient mode.</p>
<p>The ambient layout is shown in the middle in the <a href="#views">(Circle) Ambient Analog Watch views</a> figure.</p></li></ol>
<p align="center">
 <img alt="Two circle indicators and the background" src="../images/circleambientanalogwatch_wn4.png" />
 <img alt="Two circle indicators and the background" src="../images/circleambientanalogwatch_wn5.png" />
</p>

<pre class="prettyprint">
bool 
view_create_gui(int width, int height)
{
&nbsp;&nbsp;&nbsp;Evas_Object *indicators_layout = NULL;
&nbsp;&nbsp;&nbsp;Eext_Circle_Surface *indicators_layout_surface = NULL;

&nbsp;&nbsp;&nbsp;watch_app_get_elm_win(&amp;vd.win);

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_resize(vd.win, width, height);

&nbsp;&nbsp;&nbsp;indicators_layout = elm_layout_add(vd.win);

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_resize(indicators_layout, width, height);
&nbsp;&nbsp;&nbsp;evas_object_show(indicators_layout);
&nbsp;&nbsp;&nbsp;indicators_layout_surface = eext_circle_surface_layout_add(indicators_layout);

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;__create_time_indicator(&amp;vd.hours_minutes_indicator, indicators_layout_surface, indicators_layout,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(HOURS_INDICATOR_REL_SIZE * (float)width/2.0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIME_INDICATOR_THICKNESS, TIME_INDICATOR_R_COLOR,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIME_INDICATOR_G_COLOR, TIME_INDICATOR_B_COLOR);

&nbsp;&nbsp;&nbsp;__create_time_indicator(&amp;vd.seconds_indicator, indicators_layout_surface, indicators_layout,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(MINUTES_INDICATOR_REL_SIZE * (float)width/2.0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIME_INDICATOR_THICKNESS, TIME_INDICATOR_R_COLOR,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIME_INDICATOR_G_COLOR, TIME_INDICATOR_B_COLOR);

&nbsp;&nbsp;&nbsp;vd.main_layout = __create_layout(MAIN_LAYOUT_EDJE_FILE, MAIN_GRP, width, height);
&nbsp;&nbsp;&nbsp;evas_object_show(vd.main_layout);

&nbsp;&nbsp;&nbsp;// Other UI elements creation code

&nbsp;&nbsp;&nbsp;vd.ambient_clock = ambient_clock_create(vd.main_layout);
&nbsp;&nbsp;&nbsp;elm_layout_content_set(vd.main_layout, AMBIENT_SWALLOW_PART, vd.ambient_clock);

&nbsp;&nbsp;&nbsp;// Common code
}

static const Circle_Indicator*
__create_time_indicator(const Circle_Indicator **indicator,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Eext_Circle_Surface *indicators_layout_surface,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *indicators_layout,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int radius, int thickness, int r, int g, int b)
{
&nbsp;&nbsp;&nbsp;*indicator = circle_indicator_create(indicators_layout, indicators_layout_surface);

&nbsp;&nbsp;&nbsp;if (!*indicator)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;

&nbsp;&nbsp;&nbsp;circle_indicator_set_radius(*indicator, radius);
&nbsp;&nbsp;&nbsp;circle_indicator_set_thickness(*indicator, thickness);
&nbsp;&nbsp;&nbsp;circle_indicator_set_color(*indicator, r, g, b, TIME_INDICATOR_R_COLOR_2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TIME_INDICATOR_G_COLOR_2, TIME_INDICATOR_B_COLOR_2);
&nbsp;&nbsp;&nbsp;circle_indicator_show(*indicator, true);

&nbsp;&nbsp;&nbsp;return *indicator;
}
</pre>
</li>
<li>
<p>Each time a time tick occurs, the controller module calls the <span style="font-family: Courier New,Courier,monospace">view_set_time()</span> function. One of its roles is to set the proper positions of the dot indicators. This is calculated when a message is sent to the main layout object using the <span style="font-family: Courier New,Courier,monospace">edje_object_message_send()</span> function.</p>
<pre class="prettyprint">
void 
view_set_time(int hours, int minutes, int seconds, int year, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int month, int day, int week_day)
{
&nbsp;&nbsp;&nbsp;// Other variable definitions

&nbsp;&nbsp;&nbsp;Edje_Message_Int_Set *msg = NULL;

&nbsp;&nbsp;&nbsp;if (!vd.ambient) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Calculations

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circle_indicator_set(vd.seconds_indicator, 0.0, ((float)seconds) / 60.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circle_indicator_set(vd.hours_minutes_indicator,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((float)hours_12) / 12.0 + ((float)minutes) / 60.0 / 12.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((float)minutes) / 60.0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Date string setting

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg = alloca(sizeof(Edje_Message_Int_Set) + 2 * sizeof(int));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg-&gt;count = 3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg-&gt;val[0] = hours_12;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg-&gt;val[1] = minutes;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg-&gt;val[2] = seconds;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edje_object_message_send(elm_layout_edje_get(vd.main_layout), EDJE_MESSAGE_INT_SET, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET_TIME_MSG_ID, msg);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ambient_clock_set_time(vd.ambient_clock, hours, minutes);
}
</pre>
</li>
<li>
<p>Once the message is received, it is processed by the edje layout object&#39;s script function:</p>
<pre class="prettyprint">
script
{
&nbsp;&nbsp;&nbsp;public bool: ambient_mode = false;

&nbsp;&nbsp;&nbsp;public message(Msg_Type:type, id, ...)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static Float: h = 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static Float: m = 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static Float: s = 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static Float: rx = 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static Float: ry = 0.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (type == MSG_INT_SET &amp;&amp; id == SET_TIME_MSG_ID)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h = getarg(2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m = getarg(3);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = getarg(4);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rx = sin(360.0 * (h / 12.0 + m / 60.0 / 12.0), DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ry = cos(360.0 * (h / 12.0 + m / 60.0 / 12.0), DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom_state(PART:HOURS_DOT_PART, &quot;default&quot;, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:HOURS_DOT_PART, STATE_REL1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + HOURS_MINS_DOT_RADIUS*rx - HOURS_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - HOURS_MINS_DOT_RADIUS*ry - HOURS_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:HOURS_DOT_PART, STATE_REL2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + HOURS_MINS_DOT_RADIUS*rx + HOURS_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - HOURS_MINS_DOT_RADIUS*ry + HOURS_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state(PART:HOURS_DOT_PART, &quot;custom&quot;, 0.0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rx = sin(360.0 * m / 60.0, DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ry = cos(360.0 * m / 60.0, DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom_state(PART:MINUTES_DOT_PART, &quot;default&quot;, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:MINUTES_DOT_PART, STATE_REL1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + HOURS_MINS_DOT_RADIUS*rx - MINUTES_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - HOURS_MINS_DOT_RADIUS*ry - MINUTES_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:MINUTES_DOT_PART, STATE_REL2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + HOURS_MINS_DOT_RADIUS*rx + MINUTES_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - HOURS_MINS_DOT_RADIUS*ry + MINUTES_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state(PART:MINUTES_DOT_PART, &quot;custom&quot;, 0.0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rx = sin(360.0 * s / 60.0, DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ry = cos(360.0 * s / 60.0, DEGREES);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;custom_state(PART:SECONDS_DOT_PART, &quot;default&quot;, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:SECONDS_DOT_PART, STATE_REL1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + SECONDS_DOT_RADIUS*rx - SECONDS_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - SECONDS_DOT_RADIUS*ry - SECONDS_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state_val(PART:SECONDS_DOT_PART, STATE_REL2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 + SECONDS_DOT_RADIUS*rx + SECONDS_DOT_SIZE / 2.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0.5 - SECONDS_DOT_RADIUS*ry + SECONDS_DOT_SIZE / 2.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_state(PART:SECONDS_DOT_PART, &quot;custom&quot;, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h3>Circle Indicator View Module</h3>

<p>The circle indicator is a complex object that holds pointers to 2 circle objects:</p>
<ul><li>One circle object displays an arc to indicate the current time value progress.</li>
<li>One circle object shows the arc of the progress yet to come.</li></ul>

<p>To create the circle indicator:</p>

<pre class="prettyprint">
const Circle_Indicator*
circle_indicator_create(Evas_Object *parent, Eext_Circle_Surface *indicators_layout_surface)
{
&nbsp;&nbsp;&nbsp;Circle_Indicator *indicator = NULL;

&nbsp;&nbsp;&nbsp;indicator = calloc(1, sizeof(Circle_Indicator));

&nbsp;&nbsp;&nbsp;if (!indicator)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;

&nbsp;&nbsp;&nbsp;indicator-&gt;indicating_indicator = eext_circle_object_add(parent, indicators_layout_surface);
&nbsp;&nbsp;&nbsp;eext_circle_object_angle_min_max_set(indicator-&gt;indicating_indicator, 0, 360);

&nbsp;&nbsp;&nbsp;indicator-&gt;bg_indicator = eext_circle_object_add(parent, indicators_layout_surface);
&nbsp;&nbsp;&nbsp;eext_circle_object_angle_min_max_set(indicator-&gt;bg_indicator, 0, 360);

&nbsp;&nbsp;&nbsp;evas_object_data_set(indicator-&gt;bg_indicator, CI_DATA_KEY, indicator);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(indicator-&gt;bg_indicator, EVAS_CALLBACK_DEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__evas_object_before_delete_cb, NULL);

&nbsp;&nbsp;&nbsp;return indicator;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
