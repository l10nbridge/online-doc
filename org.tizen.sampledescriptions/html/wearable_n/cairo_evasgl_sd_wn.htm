<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Cairo EvasGL Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>(Circle) Cairo EvasGL Sample Overview</h1> 

<p>The (Circle) Cairo EvasGL sample application demonstrates how to draw vector graphics using the Cairo GL backend with the Evas_GL surface using the Tizen SDK.</p> 
  <table class="note"> 
<tbody> 
    <tr> 
     <th class="note">Note</th> 
    </tr> 
    <tr> 
     <td class="note">The application presented in this overview is not a full Tizen application, since it does not use the Application Framework. The application simply starts and runs.</td> 
    </tr> 
   </tbody> 
  </table>

<p>The following figure illustrates the main screen of the (Circle) Cairo EvasGL.</p>
<p class="figure">Figure: (Circle) Cairo EvasGL screen</p>
<p align="center"><img alt="(Circle) Cairo EvasGL screen" src="../images/cairo_evasgl_circular.png" /></p>
  
 <h2>Implementation</h2>

<p>To create a basic application that provides a UI application skeleton which already makes available the window object that can contain a Cairo drawing:</p>
<ol>
<li>Build the environment. 
<p>For using the Cairo GL backend on the Evas_GL surface, include the following header files.</p>
<pre class="prettyprint">
#include &lt;cairo.h&gt;
#include &lt;Evas_GL.h&gt;
#include &lt;cairo-evas-gl.h&gt;
#include &lt;math.h&gt;
</pre>
<p>Define the <span style="font-family: Courier New,Courier,monospace">appdata</span> structure that contains all the pointers to objects to be manipulated:</p>
<pre class="prettyprint">
typedef struct appdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;	
&nbsp;&nbsp;&nbsp;Evas_Object *img;

&nbsp;&nbsp;&nbsp;cairo_surface_t *surface;
&nbsp;&nbsp;&nbsp;cairo_t *cairo;
&nbsp;&nbsp;&nbsp;cairo_device_t *cairo_device;
		
&nbsp;&nbsp;&nbsp;Evas_GL *evas_gl;
&nbsp;&nbsp;&nbsp;Evas_GL_Config *evas_gl_config;
&nbsp;&nbsp;&nbsp;Evas_GL_Surface *evas_gl_surface;
&nbsp;&nbsp;&nbsp;Evas_GL_Context *evas_gl_context;
} appdata_s;
</pre>
</li>
<li>Create the <span style="font-family: Courier New,Courier,monospace">Elm_window</span> for EvasGL. 
<p>For using the EvasGL backend, you have to add this before the window creation. This makes it possible for the Cairo drawings on EvasGL to be displayed on the screen.</p>
<pre class="prettyprint">
elm_config_accel_preference_set(&quot;opengl&quot;);
ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
if (elm_win_wm_rotation_supported_get(ad-&gt;win))
{
&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
}
evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);
evas_object_show(ad-&gt;win);
</pre>
</li>
<li>Create the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image:
<pre class="prettyprint">
ad-&gt;img = evas_object_image_filled_add(evas_object_evas_get(ad-&gt;win));
evas_object_show(ad-&gt;img);
</pre>
</li>

<li>Initialize the variables for EvasGL. 
<p>Before initializing EvasGL and creating the Evas_GL surface, get the window size.</p>
<pre class="prettyprint">
evas_object_geometry_get(ad-&gt;win, NULL, NULL, &amp;ad-&gt;width, &amp;ad-&gt;height);
</pre>
<p>Initialize the variables related to the Evas_GL within the <span style="font-family: Courier New,Courier,monospace">appdata</span> structure.</p> 
<p>For creating the EvasGL object, you can use the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image created before.</p>
<pre class="prettyprint">
Evas_Native_Surface ns;
ad-&gt;evas_gl = evas_gl_new(evas_object_evas_get(ad-&gt;img));
ad-&gt;evas_gl_config = evas_gl_config_new();
ad-&gt;evas_gl_config-&gt;color_format = EVAS_GL_RGBA_8888;
ad-&gt;evas_gl_config-&gt;stencil_bits = EVAS_GL_STANCIL_BIT_8;
ad-&gt;evas_gl_config-&gt;multisample_bits = EVAS_GL_MULTISAMPLE_MED;
ad-&gt;evas_gl_surface = evas_gl_surface_create(ad-&gt;evas_gl, ad-&gt;evas_gl_config, ad-&gt;width, ad-&gt;height);
ad-&gt;evas_gl_context = evas_gl_context_create(ad-&gt;evas_gl, NULL);
evas_gl_native_surface_get(ad-&gt;evas_gl, ad-&gt;evas_gl_surface, &amp;ns);
evas_object_image_native_surface_set(ad-&gt;img, &amp;ns);
evas_object_image_pixels_get_callback_set(ad-&gt;img, cairo_drawing, ad);
</pre>
</li>
<li>Link the Evas callback function to draw the Cairo image.
<pre class="prettyprint">
evas_object_image_pixels_get_callback_set(ad-&gt;img, cairo_drawing, NULL);
</pre>
</li>

<li>Create Cairo with EvasGL. 
<p>To create the Cairo surface by using Evas_GL, the Cairo device must be provided. Set the <span style="font-family: Courier New,Courier,monospace">CAIRO_GL_COMPOSITOR</span> as <span style="font-family: Courier New,Courier,monospace">msaa</span> for using full GPU acceleration. In addition, to prevent unnecessary context switches in the Cairo GL backend, use the <span style="font-family: Courier New,Courier,monospace">cairo_gl_device_set_thread_aware()</span> function.</p>
<pre class="prettyprint">
setenv(&quot;CAIRO_GL_COMPOSITOR&quot;, &quot;msaa&quot;, 1);
ad-&gt;cairo_device = (cairo_device_t *)cairo_evas_gl_device_create(ad-&gt;evas_gl, ad-&gt;evas_gl_context);
cairo_gl_device_set_thread_aware(ad-&gt;cairo_device, 0);
ad-&gt;surface = (cairo_surface_t *)cairo_gl_surface_create_for_evas_gl(ad-&gt;cairo_device, ad-&gt;evas_gl_surface, ad-&gt;evas_gl_config, ad-&gt;width, ad-&gt;height);
ad-&gt;cairo = cairo_create (ad-&gt;surface);
</pre>
</li>

<li>Draw random items (rectangles, circles, and triangles) with the <span style="font-family: Courier New,Courier,monospace">cairo_drawing()</span> function: 
<pre class="prettyprint">
void cairo_drawing(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;double r, g, b, a;

&nbsp;&nbsp;&nbsp;// Clear background as white
&nbsp;&nbsp;&nbsp;cairo_set_source_rgba(ad-&gt;cairo, 1, 1, 1, 1);
&nbsp;&nbsp;&nbsp;cairo_paint(ad-&gt;cairo);

&nbsp;&nbsp;&nbsp;cairo_set_operator(ad-&gt;cairo, CAIRO_OPERATOR_OVER);
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; 100; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int shape = drand48() *3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float width = drand48() * 50 + 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int line_cap = drand48() * 3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_line_cap_t line_cap_style = CAIRO_LINE_CAP_BUTT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (line_cap == 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_cap_style = CAIRO_LINE_CAP_ROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (line_cap == 2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_cap_style = CAIRO_LINE_CAP_SQUARE;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int line_join = drand48() * 3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_line_join_t line_join_style = CAIRO_LINE_JOIN_MITER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (line_join == 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_join_style = CAIRO_LINE_JOIN_ROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (line_join == 2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;line_join_style = CAIRO_LINE_JOIN_BEVEL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double dash[] = {0.0, 0.0};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dash[0] = drand48() * 50;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dash[1] = drand48() * 50;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_set_dash(ad-&gt;cairo, dash, 2, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_set_line_width(ad-&gt;cairo, width);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_set_line_join(ad-&gt;cairo, line_join_style);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_set_line_cap(ad-&gt;cairo, line_cap_style);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Random color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;r = drand48();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g = drand48();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = drand48();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a = drand48();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_set_source_rgba(ad-&gt;cairo, r, g, b, a);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Random position
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float x = drand48() * ad->width;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float y = drand48() * ad->height;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float side = drand48() * 300;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (shape == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Draw a square
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_rectangle(ad-&gt;cairo, x, y, side, side);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_fill(ad-&gt;cairo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (shape == 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Draw a circle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_arc(ad-&gt;cairo, x, y, side/2, 0.0, 2.0 * M_PI);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_stroke(ad-&gt;cairo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Draw a triangle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_move_to(ad-&gt;cairo, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_line_to(ad-&gt;cairo, x + side, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_line_to(ad-&gt;cairo, x, y + side);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_close_path(ad-&gt;cairo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cairo_stroke(ad-&gt;cairo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;cairo_surface_flush(ad-&gt;surface);
}
</pre>
</li>
<li>Add the animator function callback. 
<p>The following is an example of a default update refresh rate. You can add the animator after creating Cairo and EvasGL.</p>
<p>Add the animator function callback with the <span style="font-family: Courier New,Courier,monospace">ecore_animator_add()</span> function. The <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_dirty_set()</span> function updates the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image which is connected to EvasGL. After this, the <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> image updates with the <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_get_callback_set()</span> callback function calls whenever Evas renders.</p>
<pre class="prettyprint">
static Eina_Bool _animate_cb(void *data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj = (Evas_Object *)data;
&nbsp;&nbsp;&nbsp;evas_object_image_pixels_dirty_set(obj, EINA_TRUE);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
static bool app_create(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;cairo_evasgl_drawing(ad);

&nbsp;&nbsp;&nbsp;ecore_animator_frametime_set(0.016);
&nbsp;&nbsp;&nbsp;Ecore_Animator *animator = ecore_animator_add(_animate_cb, (void *)ad-&gt;img);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

</li>

<li>Delete Cairo and EvasGL. 
<p>The delete callback is triggered when the Window is destroyed from the main loop.</p>
<pre class="prettyprint">
static void win_delete_request_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;cairo_surface_destroy(ad-&gt;surface);
&nbsp;&nbsp;&nbsp;cairo_destroy(ad-&gt;cairo);
&nbsp;&nbsp;&nbsp;cairo_device_destroy(ad-&gt;cairo_device);
&nbsp;&nbsp;&nbsp;evas_gl_surface_destroy(ad-&gt;evas_gl, ad-&gt;evas_gl_surface);
&nbsp;&nbsp;&nbsp;evas_gl_context_destroy(ad-&gt;evas_gl, ad-&gt;evas_gl_context);
&nbsp;&nbsp;&nbsp;evas_gl_config_free(ad-&gt;evas_gl_config);
&nbsp;&nbsp;&nbsp;evas_gl_free(ad-&gt;evas_gl);
&nbsp;&nbsp;&nbsp;ui_app_exit();
}
</pre>
</li>
</ol>


 

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>