<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Alarm Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	
<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	



<h1>(Circle) Alarm Sample Overview</h1> 

<p>The (Circle) Alarm sample application demonstrates how you can create and manage several alarms, and save alarm data. The sample application introduces the flow of a common alarm application.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the (Circle) Alarm.</p>

<p class="figure">Figure: (Circle) Alarm screens</p>
<p align="center"><img src="../images/alarm_views_nw.png" alt="Alarm screens" /></p>

<p>The application opens with the base view (top left in the above figure), if no alarms exist. Otherwise, the alarm list is shown (bottom left in the above figure).</p>
<p>To set an alarm:</p>
<ol>
<li>Click <strong>Add</strong> in the alarm list, or the alarm clock button in the middle of the base view.</li>
<li>In the Set alarm view, turn the rotary on the device to set a specific time and click the check button at the bottom of the screen to save the alarm.
<p>The new alarm is shown in the alarm list.</p></li>
</ol>

<p>The user can scroll up and down the alarm list, and activate and cancel the alarms using the check box. When an activated alarm reaches its time and goes off, the ringing alarm view is shown. To stop the alarm, click <strong>Dismiss</strong>.</p>

<h2>Prerequisites</h2>

<p>To ensure proper application execution, the following privileges must be set:</p>

<ul><li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/alarm.set</span></li>
</ul>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
  <caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">edje/images/</span></td>
		<td>This file contains the image files used in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/alarm.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/image/</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>		
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and making data for the application.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/main.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, and view control.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>


<h2>Implementation</h2>

<h3>Application Layout</h3> 

<p>To create the basic application layout, use the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function. The window and conformant components are essential parts of the application layout.</p>
<pre class="prettyprint">
void 
view_create(void)
{
&nbsp;&nbsp;&nbsp;// Create window 
&nbsp;&nbsp;&nbsp;s_info.win = view_create_win(PACKAGE);
&nbsp;&nbsp;&nbsp;if (s_info.win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a window.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create conformant 
&nbsp;&nbsp;&nbsp;s_info.conform = view_create_conformant_without_indicator(s_info.win);
&nbsp;&nbsp;&nbsp;if (s_info.conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the main view is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.win);
}
</pre>

<p>To manage multiple views efficiently (change between views, access view resources, and show effects), you need a naviframe component. To create the naviframe and a circular layout, use the <span style="font-family: Courier New,Courier,monospace">view_alarm_create()</span> function:</p>

<pre class="prettyprint">
void 
view_alarm_create(void)
{
&nbsp;&nbsp;&nbsp;// Create the naviframe
&nbsp;&nbsp;&nbsp;s_info.nf = view_create_naviframe(s_info.conform);
&nbsp;&nbsp;&nbsp;if (s_info.nf == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a naviframe.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.win);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create Eext circle surface for a circular genlist and datetime objects to show a circular layout
&nbsp;&nbsp;&nbsp;s_info.circle_surface = eext_circle_surface_naviframe_add(s_info.nf);
}
</pre>

<h4>Base View</h4>

<p>The base view is shown when no alarms exist. To create the base view, use the <span style="font-family: Courier New,Courier,monospace">_create_layout_no_alarmlist()</span> function in the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function.</p>

<pre class="prettyprint">
layout = _create_layout_no_alarmlist(nf, edje_path, &quot;base_alarm&quot;);
</pre>

<p class="figure">Figure: Base view frame</p>
<p align="center"><img src="../images/alarm_base_view_frame_nw.png" alt="Base view frame" /></p>

<p>To fill out each part of the view, use the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> and <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> functions:</p>

<ul>
<li>
<p>To set the view title and additional text at the bottom of the screen, define the text in the third parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function.</p></li>

<li>
<p>Create the button with the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function.</p>

<p>The button is transparent, and located below the <span style="font-family: Courier New,Courier,monospace">no_alarm.img</span> object that is set by the EDJ file. The <span style="font-family: Courier New,Courier,monospace">focus</span> style makes the button transparent. If the button requires its own image, the fourth parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function can be used for that.</p>

<p>To change the appearance of the button when it is pressed or released, customize the <span style="font-family: Courier New,Courier,monospace">_no_alarm_down_cb()</span> and <span style="font-family: Courier New,Courier,monospace">_no_alarm_up_cb()</span> callbacks. In this sample, the <span style="font-family: Courier New,Courier,monospace">no_alarm.img</span> and <span style="font-family: Courier New,Courier,monospace">no_alarm.text</span> parts are dimmed when the button is pressed, and return to normal when the button is released.</p>

<p>To change the appearance of the button when it is clicked, customize the <span style="font-family: Courier New,Courier,monospace">_no_alarm_clicked_cb()</span> callback. In this sample, the Set alarm view is opened when the button is clicked.</p></li></ul>

<pre class="prettyprint">
view_set_text(layout, &quot;no_alarm.title&quot;, &quot;Alarm&quot;);
view_set_button(layout, &quot;swallow.no_alarm.button&quot;, &quot;focus&quot;, NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_no_alarm_down_cb, _no_alarm_up_cb, _no_alarm_clicked_cb, layout);
view_set_text(layout, &quot;no_alarm.text&quot;, &quot;Add alarm&quot;);
</pre>

<h4>Set Alarm View</h4> 

<p>When the button on the base view (<span style="font-family: Courier New,Courier,monospace">swallow.no_alarm.button</span> part) is clicked, the <span style="font-family: Courier New,Courier,monospace">_no_alarm_clicked_cb()</span> callback is triggered and the Set alarm view opens.</p>

<p class="figure">Figure: Set alarm view</p>
<p align="center"><img src="../images/set_alarm_view_nw.png" alt="Set alarm view" /></p>

<pre class="prettyprint">
static void 
_no_alarm_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *nf = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;

&nbsp;&nbsp;&nbsp;// Add a set time layout to the naviframe
&nbsp;&nbsp;&nbsp;nf = view_get_naviframe();

&nbsp;&nbsp;&nbsp;layout = _create_layout_set_time(nf);
&nbsp;&nbsp;&nbsp;if (layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a layout of setting time.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;view_push_item_to_naviframe(nf, layout, NULL, NULL);
}
</pre>

<p>To create the layout, use the <span style="font-family: Courier New,Courier,monospace">_create_layout_set_time()</span> function.</p>
<p>The Set alarm view layout uses a theme of the <span style="font-family: Courier New,Courier,monospace">datetime</span> style. When a layout uses a theme, it does not need an EDJ file, because it sets the edje group from the used elementary theme.</p>

<pre class="prettyprint">
static Evas_Object*
_create_layout_set_time(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;char image_path[BUF_LEN] = {0, };

&nbsp;&nbsp;&nbsp;if (!parent) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get parent.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a layout for setting time
&nbsp;&nbsp;&nbsp;layout = view_create_layout_by_theme(parent, &quot;layout&quot;, &quot;circle&quot;, &quot;datetime&quot;);

&nbsp;&nbsp;&nbsp;// Set the title of the layout
&nbsp;&nbsp;&nbsp;view_set_text(layout, &quot;elm.text&quot;, &quot;Set alarm&quot;);

&nbsp;&nbsp;&nbsp;// Create the check button to set the alarm 
&nbsp;&nbsp;&nbsp;data_get_resource_path(&quot;images/ic_popup_btn_check.png&quot;, image_path, sizeof(image_path));

&nbsp;&nbsp;&nbsp;view_set_button(layout, &quot;elm.swallow.btn&quot;, &quot;bottom&quot;, image_path, NULL, NULL, NULL, _set_clicked_cb, NULL);

&nbsp;&nbsp;&nbsp;// Create the date and time picker
&nbsp;&nbsp;&nbsp;view_create_datetime(layout, &quot;timepicker/circle&quot;);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>

<p>The following figure shows the view frame created by the above code.</p>

<p class="figure">Figure: Set alarm view frame</p>
<p align="center"><img src="../images/set_alarm_view_frame_nw.png" alt="Set alarm view frame" /></p>

<p>To fill out each part of the view:</p>
<ul>
<li>Use the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function to modify the <span style="font-family: Courier New,Courier,monospace">elm.text</span> part at the top of the layout.</li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function to modify the <span style="font-family: Courier New,Courier,monospace">elm.swallow.btn</span> part to set the button.
<p>When the button is clicked, the <span style="font-family: Courier New,Courier,monospace">_set_clicked_cb()</span> callback is triggered.</p></li></ul>

<h4>List View</h4> 

<p>After an alarm has been set, the list view with all the existing alarms is shown.</p>

<p class="figure">Figure: List view</p>
<p align="center"><img src="../images/alarm_list_view_nw.png" alt="List view" /></p>

<p>To create the list view, use the <span style="font-family: Courier New,Courier,monospace">_set_layout_exist_alarmlist()</span> function in the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function:</p>

<ul>
<li>As in the base view, you can create a circular list view. This view inherits from the base view layout created using the <span style="font-family: Courier New,Courier,monospace">_create_layout_no_alarmlist()</span> function.</li>

<li>To create a circular genlist, use the <span style="font-family: Courier New,Courier,monospace">view_create_circle_genlist()</span> function.
<p>The genlist component is meant for more expansive lists than the simple list in Elementary, with flexible items and more entries while still being fast and low on memory usage. If you want a simple list with icons and a single text, use the normal List component.</p></li>

<li>To create a title for the genlist, use the <span style="font-family: Courier New,Courier,monospace">view_append_item_to_genlist()</span> function with <span style="font-family: Courier New,Courier,monospace">title</span> as the second parameter.</li>

<li>You can also create a <span style="font-family: Courier New,Courier,monospace">padding</span> item to fine-tune the list item location on the screen. 
<p>Since the <span style="font-family: Courier New,Courier,monospace">padding</span> item is located at the end of the genlist, it ensures that the list items are located in the middle of the screen.</p></li>
</ul>

<pre class="prettyprint">
static void 
_set_layout_exist_alarmlist(Evas_Object *layout)
{
&nbsp;&nbsp;&nbsp;Evas_Object *genlist = NULL;

&nbsp;&nbsp;&nbsp;if (!layout) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get layout.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;genlist = view_create_circle_genlist(layout);
&nbsp;&nbsp;&nbsp;if (genlist == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a genlist of saving alarm.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Append a genlist item as a title
&nbsp;&nbsp;&nbsp;view_append_item_to_genlist(genlist, &quot;title&quot;, NULL, NULL, NULL);

&nbsp;&nbsp;&nbsp;// Create a genlist item for padding
&nbsp;&nbsp;&nbsp;s_info.padding_item = view_append_item_to_genlist(genlist, &quot;padding&quot;, NULL, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (s_info.padding_item == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create padding item of genlist.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;view_set_content_to_part(layout, &quot;swallow.genlist&quot;, genlist);

&nbsp;&nbsp;&nbsp;view_set_button(layout, &quot;swallow.genlist.button&quot;, &quot;bottom&quot;, NULL, &quot;Add&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, _add_clicked_cb, NULL);

&nbsp;&nbsp;&nbsp;view_set_genlist(genlist);
}
</pre>

<p>The following figure shows the view frame created by the above code.</p>

<p class="figure">Figure: List view frame</p>
<p align="center"><img src="../images/alarm_list_view_frame_nw.png" alt="List view frame" /></p>

<p>To fill out each part of the view:</p>

<ul>
<li>To set the genlist as content in the <span style="font-family: Courier New,Courier,monospace">swallow.genlist</span> part, use the <span style="font-family: Courier New,Courier,monospace">view_set_content_to_part()</span> function. After calling this function, the genlist is set at the predefined location determined by the <span style="font-family: Courier New,Courier,monospace">swallow.genlist</span> part in the EDJ file.</li>
<li>Make a <span style="font-family: Courier New,Courier,monospace">bottom</span> style button in the <span style="font-family: Courier New,Courier,monospace">swallow.genlist.button</span> part to allow the user to add more alarms.</li>
</ul>

<h4>Ringing Alarm View</h4>

<p>When a scheduled alarm goes off, the ringing alarm view appears.</p>


<p class="figure">Figure: Ringing alarm view</p>
<p align="center"><img src="../images/ringing_alarm_view_nw.png" alt="Ringing alarm view" /></p>

<p>To create the view, use the <span style="font-family: Courier New,Courier,monospace">_create_layout_ring_alarm()</span> function in the <span style="font-family: Courier New,Courier,monospace">app_control()</span> function.</p>

<pre class="prettyprint">static void 
_create_layout_ring_alarm(Evas_Object *parent, struct tm *saved_time)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;char buf[BUF_LEN] = {0, };
&nbsp;&nbsp;&nbsp;char file_path[BUF_LEN] = {0, };

&nbsp;&nbsp;&nbsp;if (parent == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to get parent.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a layout that shows when the alarm sounds
&nbsp;&nbsp;&nbsp;data_get_resource_path(&quot;edje/main.edj&quot;, file_path, sizeof(file_path));

&nbsp;&nbsp;&nbsp;layout = view_create_layout(parent, file_path, &quot;ringing_alarm&quot;, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a layout.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Set the scheduled time as text
&nbsp;&nbsp;&nbsp;if (saved_time) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strftime(buf, sizeof(buf) - 1, &quot;%l:%M %p&quot;, saved_time);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_text(layout, &quot;ringing_alarm.text&quot;, buf);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Set the bottom style button to dismiss the alarm
&nbsp;&nbsp;&nbsp;view_set_button(layout, &quot;swallow.button&quot;, &quot;bottom&quot;, NULL, &quot;Dismiss&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, _dismiss_clicked_cb, NULL);

&nbsp;&nbsp;&nbsp;view_push_item_to_naviframe(parent, layout, NULL, NULL);
}
</pre>

<p>The following figure shows the view frame created by the above code. The <span style="font-family: Courier New,Courier,monospace">ringing_alarm</span> is the name of the group in the EDJ file used to make the view.</p>

<p class="figure">Figure: Ringing alarm view frame</p>
<p align="center"><img src="../images/ringing_alarm_view_frame_nw.png" alt="Ringing alarm view frame" /></p>


<h3>Using an Application Control and Scheduling an Alarm</h3>

<p>To schedule an alarm at the specified time, you need an <span style="font-family: Courier New,Courier,monospace">app_control</span> handle. Create the handle with the <span style="font-family: Courier New,Courier,monospace">_create_app_control()</span> function at the application startup when all data initializes:</p>

<pre class="prettyprint">
s_info.app_control = _create_app_control(APP_CONTROL_OPERATION_ALARM_ONTIME, PACKAGE);
</pre>

<p>You can create the <span style="font-family: Courier New,Courier,monospace">app_control</span> handle with the <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__APP__CONTROL__MODULE.html">App Control</a> APIs:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">app_control</span> handle is created using the <span style="font-family: Courier New,Courier,monospace">app_control_create()</span> function.</li>
<li>The operation (information for the launch request to be performed) is set using the <span style="font-family: Courier New,Courier,monospace">app_control_set_operation()</span> function.</li></ul>

<pre class="prettyprint">
static app_control_h 
_create_app_control(const char *operation, const char *app_id)
{
&nbsp;&nbsp;&nbsp;app_control_h app_control;

&nbsp;&nbsp;&nbsp;app_control_create(&amp;app_control);
&nbsp;&nbsp;&nbsp;app_control_set_operation(app_control, operation);
&nbsp;&nbsp;&nbsp;// Package name is declared in the &quot;main.h&quot; file
&nbsp;&nbsp;&nbsp;app_control_set_app_id(app_control, app_id);

&nbsp;&nbsp;&nbsp;return app_control;
}
</pre>

<p>When you have your <span style="font-family: Courier New,Courier,monospace">app_control</span> handle, you can schedule alarms. When the user clicks the check button in the Set alarm view, call the <span style="font-family: Courier New,Courier,monospace">alarm_schedule_at_date()</span> function:</p>

<pre class="prettyprint">
alarm_schedule_at_date(app_control, saved_time, 0, &amp;alarm_id)
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">app_control</span> handle as the first parameter performs specific work when the alarm is triggered. The second parameter is the time that sounds the alarm for the first time. The third parameter is the amount of time between subsequent alarms. After scheduling an alarm, you can get the alarm ID that uniquely identifies the alarm.</p>

<h3>Canceling an Alarm</h3>

<p>When you want to cancel an alarm, use the <span style="font-family: Courier New,Courier,monospace">alarm_cancel()</span> function with the specific alarm ID:</p>

<pre class="prettyprint">
alarm_cancel(alarm_id);
</pre>

<p>In this example, to cancel the alarm, the user must click the check box next to the alarm in the alarm list.</p>

<p class="figure">Figure: Activating and canceling an alarm</p>
<p align="center"><img src="../images/alarm_check_box_nw.png" alt="Activating and canceling an alarm" /></p>

<h3>Creating a Bundle to Store Alarms</h3>

<p>This application uses a bundle to manage the alarm IDs.</p>

<p>When the application data is initialized, the bundle is created using the <span style="font-family: Courier New,Courier,monospace">data_create_bundle()</span> function, which calls the <span style="font-family: Courier New,Courier,monospace">bundle_create()</span> function.</p>

<pre class="prettyprint">s_info.b = data_create_bundle();</pre>

<p>To add an alarm ID (converted into a string type key-value) to the bundle, use the <span style="font-family: Courier New,Courier,monospace">data_add_bundle_by_str()</span> function to call the <span style="font-family: Courier New,Courier,monospace">bundle_add_str()</span> function and create the bundle object:</p>

<pre class="prettyprint">data_add_bundle_by_str(buf, buf);</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

