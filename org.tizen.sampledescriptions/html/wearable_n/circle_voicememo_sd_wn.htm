<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Voice Memo Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	
<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	

<h1>(Circle) Voice Memo Sample Overview</h1> 

<p>The (Circle) Voice Memo sample application demonstrates how you can manage several views using a naviframe, and add a <strong>More option</strong> (3 dots) button to a view. Using a genlist for several items gives you an insight on how to handle saved data and the life-cycle of data from saving to showing and deletion.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the (Circle) Voice Memo.</p>
<p class="figure">Figure: (Circle) Voice Memo screens</p>
<p align="center"><img src="../images/voicememo_wearable_sd.png" alt="(Circle) Voice Memo screens" /></p>

<p>The user can record voice by clicking the record button. To listen to the recorded voice memo, click the play button.</p>
<p>To listen to voice memos recorded earlier, click the <strong>More option</strong> button, select the list option, scroll to the wanted memo, and select it.</p>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
<caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">edje/images</span></td>
		<td>This directory contains the image files used in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/voicememo.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/image</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and making data for the application.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/main.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, and view control.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>

<h2>Implementation</h2>

<h3>Application Layout</h3> 

<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the view frame that consists of the window and conformant. These components are essential in creating the application UI.</p>
<pre class="prettyprint">
void 
view_create(void)
{
&nbsp;&nbsp;&nbsp;// Create a window
&nbsp;&nbsp;&nbsp;s_info.win = view_create_win(PACKAGE);
&nbsp;&nbsp;&nbsp;if (s_info.win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a window.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a conformant
&nbsp;&nbsp;&nbsp;s_info.conform = view_create_conformant_without_indicator(s_info.win);
&nbsp;&nbsp;&nbsp;if (s_info.conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the main view is set up
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.win);
}
</pre> 

<p>To manage multiple views efficiently (change between views, access view resources, and show effects), you need a naviframe component. To create the naviframe and a circular layout, use the <span style="font-family: Courier New,Courier,monospace">view_voice_memo_create()</span> function:</p>

<pre class="prettyprint">
void 
view_voice_memo_create(void)
{
&nbsp;&nbsp;&nbsp;// Create a circle surface to be able to show a circular layout
&nbsp;&nbsp;&nbsp;s_info.circle_surface = eext_circle_surface_conformant_add(s_info.conform);

&nbsp;&nbsp;&nbsp;// Create a circular layout to be able to use circular APIs
&nbsp;&nbsp;&nbsp;s_info.layout = view_create_layout_for_conformant_by_theme(s_info.conform, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;if (s_info.layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a base_layout.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a naviframe
&nbsp;&nbsp;&nbsp;view_create_naviframe(s_info.layout);
}
</pre>

<h4>Main View Layout</h4> 

<p>The following figure illustrates the main view layout.</p>

<p class="figure">Figure: Voice Memo main view</p>
<p align="center"><img src="../images/voicememo_main_wearable_sd.png" alt="Voice Memo main view" /></p>

<p>To create the main view:</p>

<ol>
<li>Create the main view frame with the <span style="font-family: Courier New,Courier,monospace">view_create_layout()</span> function in the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function:
<pre class="prettyprint">
main_view = view_create_layout(view_get_win(), edj_path, &quot;main.view&quot;, NULL, NULL);
</pre>

<p class="figure">Figure: Voice Memo main view frame</p>
<p align="center"><img src="../images/voicememo_main_frame_wearable_sd.png" alt="Voice Memo main view frame" /></p>
</li>
<li>Fill out the text and button parts:
<ul>
<li>If you change the third parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function, the title or time of the view changes.</li>
<li>The fourth parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function is the button icon image. In this sample, to use the background image under the icon, set the button to be transparent, and use the background image set with the EDJ file. The transparent button is set with the <span style="font-family: Courier New,Courier,monospace">focus</span> theme.</li> 
<li>To do something when the button is clicked, customize the <span style="font-family: Courier New,Courier,monospace">_main_clicked_cb()</span> callback.</li></ul>

<pre class="prettyprint">
view_set_text(main_view, &quot;main.view.title&quot;, &quot;Voice Memo&quot;);
view_set_text(main_view, &quot;main.view.time&quot;, &quot;00:00&quot;);
view_set_button(main_view, &quot;main.view.rec&quot;, &quot;focus&quot;, NULL, NULL, NULL, NULL, _main_clicked_cb, NULL);
</pre>
</li>
<li>To create the <strong>More option</strong> button, a certain theme must be set like in the following example. In this sample application, the theme is created with the <span style="font-family: Courier New,Courier,monospace">view_create_layout_for_conformant_by_theme()</span> function.
<pre class="prettyprint">
elm_layout_theme_set(layout, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
</pre>

<p>To make the sample application show the <strong>More option</strong> button, call the <span style="font-family: Courier New,Courier,monospace">view_set_more_button()</span> function with the <span style="font-family: Courier New,Courier,monospace">_main_more_item_clicked_cb()</span> callback to do something when the more option item is clicked in the selector view.</p>
<p>You can customize the number of more option items, and their name, sub text, and icon. The last parameter in the <span style="font-family: Courier New,Courier,monospace">view_create_more_item()</span> function is the path of the icon.</p>
<pre class="prettyprint">
main_more = view_set_more_button(main_view, &quot;main.view.more&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_main_more_item_clicked_cb, NULL);

for (i = 0; i &lt; MAIN_MORE_ITEM_MAX; ++i) 
{
&nbsp;&nbsp;&nbsp;data_get_resource(main_more_item[i].icon, full_path, sizeof(full_path));
&nbsp;&nbsp;&nbsp;view_create_more_item(main_more, i, main_more_item[i].name, main_more_item[i].sub_name, full_path);
}
</pre> 
<p class="figure">Figure: More option selector view</p>
<p align="center"><img src="../images/voicememo_moreoption_wearable_sd.png" alt="More option selector view" /></p>
</li>
<li>To manage the main view easily, push the main view into the naviframe:
<pre class="prettyprint">
s_info.main_view_item = view_push_item_to_naviframe(view_get_naviframe(), main_view, _naviframe_main_view_pop_cb, NULL);
</pre>
<p>You can customize the <span style="font-family: Courier New,Courier,monospace">_naviframe_main_view_pop_cb()</span> callback to do something when the main view is popped (a back key is pressed on the main view).</p>
</li></ol>

<h4>Record View Layout</h4>

<p>The following figure illustrates the record view when recording is in progress.</p>

<p class="figure">Figure: Record view</p>
<p align="center"><img src="../images/voicememo_record_wearable_sd.png" alt="Record view" /></p>

<p>When the record button (<span style="font-family: Courier New,Courier,monospace">main.view.rec</span> part) is clicked on the main view, the <span style="font-family: Courier New,Courier,monospace">_main_clicked_cb()</span> callback is triggered, the record view elements are created, and the record view is pushed to the naviframe to show it on the screen:</p>
<pre class="prettyprint">
static void 
_main_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;record_view = view_create_layout(view_get_win(), edj_path, &quot;record.view&quot;, NULL, NULL);
&nbsp;&nbsp;&nbsp;view_set_text(record_view, &quot;rec.view.title&quot;, file_title);
&nbsp;&nbsp;&nbsp;view_set_text(record_view, &quot;rec.view.time&quot;, &quot;00:00&quot;);

&nbsp;&nbsp;&nbsp;view_set_button(record_view, &quot;rec.view.btn&quot;, &quot;focus&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, NULL, NULL, _rec_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;view_set_button(record_view, &quot;rec.view.cancel&quot;, &quot;focus&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, NULL, NULL, _rec_cancel_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;view_set_button(record_view, &quot;rec.view.pause&quot;, &quot;focus&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL, NULL, NULL, _rec_pause_clicked_cb, record_view);

&nbsp;&nbsp;&nbsp;s_info.record_view_item = view_push_item_to_naviframe(view_get_naviframe(), record_view, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_naviframe_record_view_pop_cb, NULL);
}
</pre>

<p>The above code creates the following record view frame.</p>

<p class="figure">Figure: Record view frame</p>
<p align="center"><img src="../images/voicememo_record_frame_wearable_sd.png" alt="Record view frame" /></p>

<p>You can customize a callback to determine an action for a <span style="font-family: Courier New,Courier,monospace">clicked</span> event for each button (record, cancel, and pause) using the eighth parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function (<span style="font-family: Courier New,Courier,monospace">_rec_clicked_cb()</span>, <span style="font-family: Courier New,Courier,monospace">_rec_cancel_clicked_cb()</span>, and <span style="font-family: Courier New,Courier,monospace">_rec_pause_clicked_cb()</span> in the above code).</p>

<h4>List View Layout</h4> 

<p>When the list item (3 horizontal lines) in the more option selector view is clicked, the <span style="font-family: Courier New,Courier,monospace">view_create_voice_list_genlist()</span> function is called to create a list view. The list view shows the previously recorded memos.</p>

<p class="figure">Figure: More option selector and the list view</p>
<p align="center"><img src="../images/voicememo_list_wearable_sd.png" alt="More option selector and the list view" /></p>

<p>To create the list view:</p>

<ol>
<li>Create a circular genlist with the <span style="font-family: Courier New,Courier,monospace">view_create_circle_genlist()</span> function:
<pre class="prettyprint">
voice_list_genlist = view_create_circle_genlist(view_get_naviframe());
</pre>
</li>
<li>
<p>To create a list item, use the <span style="font-family: Courier New,Courier,monospace">view_append_item_to_genlist()</span> function. The <span style="font-family: Courier New,Courier,monospace">_set_genlist_item_class()</span> sets the list item&#39;s functions according to the style.</p>
<pre class="prettyprint">
// Get the list of the saved voice memos
Eina_List *voice_list = data_get_voice_list();
// Append the voice memo to the genlist 
EINA_LIST_FOREACH(voice_list, l, list_data) 
{
&nbsp;&nbsp;&nbsp;view_append_item_to_genlist(voice_list_genlist, list_data-&gt;style, list_data, _voice_list_item_clicked_cb, NULL);
}

void 
view_append_item_to_genlist(Evas_Object *genlist, const char *style, const void *data, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Smart_Cb _clicked_cb, const void *cb_data)
{
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *item_class = NULL;

&nbsp;&nbsp;&nbsp;if (genlist == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;genlist is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (style == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;item style is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;item_class = _set_genlist_item_class(style);

&nbsp;&nbsp;&nbsp;elm_genlist_item_append(genlist, item_class, data, NULL, ELM_GENLIST_ITEM_NONE, _clicked_cb, cb_data);

&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(item_class);
}
</pre>
<p>You can customize the <span style="font-family: Courier New,Courier,monospace">_clicked_cb()</span> callback passed from the <span style="font-family: Courier New,Courier,monospace">view_append_item_to_genlist()</span> function for the action to do when the listed item is clicked. In this sample, the detail view of the clicked item is shown when the listed item is clicked.</p>
</li>
<li>You can customize the function to be called when the list item is shown on the screen:
<ul>
<li>You can select the view of the list item shown in the genlist, such as <span style="font-family: Courier New,Courier,monospace">2text</span> or <span style="font-family: Courier New,Courier,monospace">1text.1icon</span>.</li>
<li>According to the style of the list item, you can set the function to each list item, such as <span style="font-family: Courier New,Courier,monospace">_get_menu_title_text()</span>. This means that at the moment when the item must be shown, to get the title of the item, the <span style="font-family: Courier New,Courier,monospace">_get_menu_title_text()</span> function is called.</li>
</ul>
<pre class="prettyprint">
if (!strcmp(style, &quot;menu.title&quot;)) 
{
&nbsp;&nbsp;&nbsp;item_class-&gt;item_style = &quot;title&quot;;
&nbsp;&nbsp;&nbsp;item_class-&gt;func.text_get = _get_menu_title_text;
} 
else if (!strcmp(style, &quot;1text.1icon.1&quot;)) 
{
&nbsp;&nbsp;&nbsp;item_class-&gt;item_style = &quot;1text.1icon&quot;;
} 
else if (!strcmp(style, &quot;2text&quot;)) 
{
&nbsp;&nbsp;&nbsp;item_class-&gt;item_style = &quot;2text&quot;;
} 
else if (!strcmp(style, &quot;3text&quot;)) 
{
&nbsp;&nbsp;&nbsp;item_class-&gt;item_style = &quot;3text&quot;;
&nbsp;&nbsp;&nbsp;item_class-&gt;func.text_get = _get_item_text;
} 
else if (!strcmp(style, &quot;padding&quot;))
{
&nbsp;&nbsp;&nbsp;// &quot;padding&quot; style does nothing but places the genlist item in the middle of the screen
}
</pre></li>
<li>After setting the view style and functions for getting the item, such as text or icon, push the item to the genlist:
<pre class="prettyprint">
elm_genlist_item_append(genlist, item_class, data, NULL, ELM_GENLIST_ITEM_NONE, _clicked_cb, cb_data);
</pre>
</li></ol>

<h4>Detail View Layout</h4>

<p>When the user clicks an item in the list view, the detail view with the voice memo information is shown.</p>

<p class="figure">Figure: Detail view</p>
<p align="center"><img src="../images/voicememo_detail_wearable_sd.png" alt="Detail view" /></p>

<p>To create the detail view layout:</p>

<ul>
<li>You can set the button style by passing <span style="font-family: Courier New,Courier,monospace">bottom</span> as a third parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function. This sets the button to the bottom and uses a circular style.</li>
<li>If you want to do something, like playing a voice memo, customize the <span style="font-family: Courier New,Courier,monospace">_detail_play_clicked_cb()</span> callback for the button click event.</li>
<li>To delete the voice memo, set the <span style="font-family: Courier New,Courier,monospace">detail.view.more</span> part as a <strong>More option</strong> button. 
<p>Create 1 more option item with the <span style="font-family: Courier New,Courier,monospace">view_create_more_item()</span> function. It is named <span style="font-family: Courier New,Courier,monospace">detail_more_item[i].name</span>, and its icon file path is the fifth parameter, <span style="font-family: Courier New,Courier,monospace">full_path</span>. Set the <span style="font-family: Courier New,Courier,monospace">_detail_more_item_clicked_cb()</span> callback to be called when the more option item is clicked. Delete the voice memo in the callback.</p>

<p class="figure">Figure: More option of the detail view</p>
<p align="center"><img src="../images/voicememo_remove_wearable_sd.png" alt="More option of the detail view" /></p>
</li>
</ul>

<pre class="prettyprint">
static void 
_voice_list_item_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;data_get_resource(EDJ_FILE, edj_path, sizeof(edj_path));
&nbsp;&nbsp;&nbsp;detail_view = view_create_layout(view_get_naviframe(), edj_path, &quot;detail.view&quot;, NULL, NULL);
&nbsp;&nbsp;&nbsp;view_set_text(detail_view, &quot;detail.view.title&quot;, item_info-&gt;title);
&nbsp;&nbsp;&nbsp;view_set_text(detail_view, &quot;detail.view.date&quot;, item_info-&gt;detail_date);
&nbsp;&nbsp;&nbsp;view_set_text(detail_view, &quot;detail.view.time&quot;, item_info-&gt;detail_time);
&nbsp;&nbsp;&nbsp;view_set_button(detail_view, &quot;detail.view.play&quot;, &quot;bottom&quot;, NULL, NULL, NULL, NULL, _detail_play_clicked_cb, NULL);

&nbsp;&nbsp;&nbsp;// Create a more option button
&nbsp;&nbsp;&nbsp;detail_more = view_set_more_button(detail_view, &quot;detail.view.more&quot;, _detail_more_item_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;// Create as many more option items as you need
&nbsp;&nbsp;&nbsp;// In this case, only one item to delete the memo is needed
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; DETAIL_MORE_ITEM_MAX; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_get_resource(detail_more_item[i].icon, full_path, sizeof(full_path));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_create_more_item(detail_more, i, detail_more_item[i].name, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;detail_more_item[i].sub_name, full_path);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;data_set_selected_item(item_info);

&nbsp;&nbsp;&nbsp;view_push_item_to_naviframe(view_get_naviframe(), detail_view, NULL, NULL);
};
</pre>
<p>The following figure shows the view frame created by the above code.</p>

<p class="figure">Figure: Detail view frame</p>
<p align="center"><img src="../images/voicememo_detail_frame_wearable_sd.png" alt="Detail view frame" /></p>


<h4>Empty List View Layout</h4> 

<p>If there are no voice memos in the database, when you call the <span style="font-family: Courier New,Courier,monospace">view_create_voice_list_genlist()</span> function to make a list view, an empty list view is created instead.</p>
<p>Unlike with the other views of this sample, it is not necessary to use an EDJ file to get a frame for the empty list view. Tizen supplies the theme for the empty list view, and you only have to call the <span style="font-family: Courier New,Courier,monospace">view_create_layout_no_content</span> function with a title, detail text, and image file.</p>
<pre class="prettyprint">
item_count = data_get_voice_list_item_count();

// If there are no voice memos, show the empty list view
if (item_count == 0) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *novoice_view = NULL;

&nbsp;&nbsp;&nbsp;novoice_view = view_create_layout_no_content(view_get_naviframe(), &quot;Recordings&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;No recordings&quot;, full_path);
} 
</pre>

<p>The above code creates a view that consists of a title, center image, and bottom detail text, as illustrated in the following figure.</p>

<p class="figure">Figure: Empty list view</p>
<p align="center"><img src="../images/voicememo_novoice_wearable_sd.png" alt="Empty list view" /></p>

<h3>Initializing and Preparing Voice Recording</h3>

<p>To use the recorder for a voice recording, you must initialize the recorder and create the recorder handle, encoder, and file format. All the necessary details are initialized in the <span style="font-family: Courier New,Courier,monospace">_voice_memo_initialize_recorder()</span> function. For more information on initializing the recorder, see the <a href="../../../org.tizen.tutorials/html/native/multimedia/recorder_tutorial_n.htm">Recorder Tutorial</a>.</p>

<p>After initializing, call the following function to prepare the recorder and set the recorder state to <span style="font-family: Courier New,Courier,monospace">READY</span>:</p>
<pre class="prettyprint">
_voice_memo_control_recorder(PREPARE);
</pre>

<h3>Managing Voice Recording</h3>

<p>To manage voice recording:</p>
<ul>
<li>Start recording
<p>When the recording button in the main view is clicked, the recorder sets the file name to be recorded
with the index of the recording file.</p>
<p>Recording is started with the <span style="font-family: Courier New,Courier,monospace">_voice_memo_control_recorder()</span> function, and the recorder state changes to <span style="font-family: Courier New,Courier,monospace">RECORDING</span>.</p>
<pre class="prettyprint">
char *file_name = data_get_filename_according_to_count();
_voice_memo_set_filename_to_recorder(file_name);

_voice_memo_control_recorder(START);
</pre>
</li>
<li>Cancel recording
<p>When the cancel button in the record view is clicked, the following function is called:</p>
<pre class="prettyprint">
_voice_memo_control_recorder(CANCEL);
</pre>
<p>This changes the recorder state to <span style="font-family: Courier New,Courier,monospace">READY</span>, and a file name must be set again.</p>
</li>
<li>Pause recording
<p>When the pause button in the record view is clicked, the following function is called:</p>
<pre class="prettyprint">
_voice_memo_control_recorder(PAUSE);
</pre>
<p>This changes the recorder state to <span style="font-family: Courier New,Courier,monospace">PAUSE</span>. Call the <span style="font-family: Courier New,Courier,monospace">_voice_memo_control_recorder()</span> function to resume recording.</p>
</li>
<li>Stop and save recording
<p>When the stop button in the record view is clicked, the recording is stopped and the recording file is saved.</p>
<pre class="prettyprint">
_voice_memo_control_recorder(SAVE);
</pre>
<p>This changes the recorder state to <span style="font-family: Courier New,Courier,monospace">READY</span>, and the recorded data is saved and named using the <span style="font-family: Courier New,Courier,monospace">data_set_filename_according_to_count()</span> function.</p>
</li>
</ul>

<h3>Managing the Recorded Files</h3>

<p>To manage the recorded files:</p>
<ul>
<li>Get the file
<p>To get the information of the recorded file, there are 2 functions:</p>
<ul>
<li>Right after saving the recorded file, you can use the following function to get the file name from the recorder handle:
<pre class="prettyprint">
char *file_path = _voice_memo_get_filepath_from_recorder();
</pre></li>
<li>Right after launching the application, you can use the following function to get the file name from the database using opendir:
<pre class="prettyprint">
data_create_voice_list_from_db();
</pre>
</li></ul>
</li>
<li>Convert to a structure
<p>In both of the 2 functions described above, the following function is called to retrieve the information of
the recorded file and convert to a structure that has members you want to use:</p>
<pre class="prettyprint">
record_info = data_get_recording_info_from_file_path(NULL, file_path);
</pre>
<p>This function uses <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__METADATA__EXTRACTOR__MODULE.html">Metadata Extractor</a> APIs to get the information of the recorded file and convert to the structure you want to use. For more information, see the <a href="../../../org.tizen.tutorials/html/native/multimedia/metadata_extractor_tutorial_n.htm">Metadata Extractor Tutorial</a>.</p>
</li>
<li>Remove a file
<p>When the remove button in the more option view is clicked, the recorded file must be removed not only from the list view but also from the database using the <span style="font-family: Courier New,Courier,monospace">data_remove_selected_item_from_list_and_db()</span> function. Use the <span style="font-family: Courier New,Courier,monospace">view_pop_item_from_naviframe()</span> function to pop the selected item&#39;s detail view from the naviframe.</p>
<pre class="prettyprint">
data_remove_selected_item_from_list_and_db();
view_pop_item_from_naviframe();
</pre>
</li>
</ul>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

