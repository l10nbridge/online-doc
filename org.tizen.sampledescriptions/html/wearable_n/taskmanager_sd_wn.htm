<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Task-manager Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">

<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	
</div>	


<h1>Task-manager Sample Overview</h1> 

<p>The Task-manager sample application demonstrates how you can see the recently used items and delete them. By controlling the scroller, box, list, and index, you can learn to manage several items and pages on Tizen.</p>
<p>The following figure illustrates the main screens of the Task-manager.</p>
<p class="figure">Figure: Task-manager views</p>
<p align="center"><img src="../images/taskmanager_wearable_sd.png" alt="Task-manager main view" /></p>

<p>This sample consists of the following:</p> 
<ul>
<li>View
<p class="figure">Figure: Task-manager view structure</p>
<p align="center"><img src="../images/taskmanager_view_wearable_sd.png" alt="Task-manager view structure" /></p>
</li>
<li>Main operation 
<ul>
<li>Delete item</li>
<li>Show the index according to the current page</li>
<li>Close all items</li>
</ul>
</li>
</ul>

<h2>View</h2> 

<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the window, conformant, and layout frame as illustrated in the following figure.</p>
<p class="figure">Figure: Task-manager frame structure</p>
<p align="center"><img src="../images/taskmanager_layout_wearable_sd.png" alt="Task-manager frame structure" /></p>

<p>To create the parts:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">task.item.list</span>
<p>This part is for items, and consists of scroller, box, and items.</p>
<ol>
<li>Create the components and the layout.
<p>To manage several items, the scroller and box components are required.</p>
<p>The scroller makes this application scrollable, and the box allows this application to show several items through packaging and arrangement.</p>
<p>The following example creates a horizontal scroller and a box which packs the items horizontally.</p>
<pre class="prettyprint">
ad-&gt;scroller = view_create_horizontal_scroller(ad);
ad-&gt;box = view_create_horizontal_box(ad);
</pre>

<p>The following figure illustrates the structure of the scroller and the box.</p>
<p class="figure">Figure: Scroller and box</p>
<p align="center"><img src="../images/taskmanager_scrollerbox_wearable_sd.png" alt="Scroller and box" /></p>
<p>The following function creates the layout frame for the item. It consists of text and image.</p>
<pre class="prettyprint">
item_layout = view_create_layout(ad-&gt;layout, edj_path, GRP_ITEM);
</pre>
<p>The following figure illustrates the item layout.</p>
<p class="figure">Figure: Item layout</p>
<p align="center"><img src="../images/taskmanager_item_layout_wearable_sd.png" alt="Item layout" /></p>
</li>
<li>Set the name and icon for the item.
<p>The following functions set the name and icon for the item. You can pass the item name and the image file as a second parameter.</p>
<pre class="prettyprint">
view_set_text(item_layout, &quot;recent.item.name&quot;, name);
view_set_image(item_layout, &quot;recent.item.image&quot;, image_file);
</pre>

<p>The part named <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> is attached as an IMAGE part. You can find this in the edj file and change the image file and the position.</p>
<p>After creating the item, put the item in the box using the following function.</p>
<pre class="prettyprint">
elm_box_pack_start(ad-&gt;box, item_layout);
</pre>
</li>
<li>Customize the position of the items using the following function:
<pre class="prettyprint">
elm_box_layout_set(box, _box_layout_cb, ad, NULL);
</pre>
<p>Whenever the size of box is changed because of deleting or adding an item, the <span style="font-family: Courier New,Courier,monospace">_box_layout_cb()</span> function is called. You can specify the location of the item wherever you want.</p>
</li>
</ol>
<p>You can create a scroller, a box, and an item at once by calling the following function.</p>
<pre class="prettyprint">
Evas_Object *view_create_1text_1image_delbutton_item(appdata_s *ad, char *name, char *image_file);
</pre>
<p>The following figure illustrates the scroller, box, and item together.</p>
<p class="figure">Figure: Scroller, box, and item</p>
<p align="center"><img src="../images/taskmanager_scrollerboxitem_wearable_sd.png" alt="Scroller, box, and item" /></p>
</li>
<li><span style="font-family: Courier New,Courier,monospace">no.apps.page</span>
<p>The <span style="font-family: Courier New,Courier,monospace">no.apps.page</span> is an empty page that is displayed when all items are deleted.</p>
<p>This part is made of 2 text parts and 1 image part.</p>
<p>The following figure illustrates the layout.</p>
<p class="figure">Figure: Empty page layout</p>
<p align="center"><img src="../images/taskmanager_noapps_wearable_sd.png" alt="Empty page layout" /></p>

<p>To fill out all these parts, call the following function.</p>
<pre class="prettyprint">
no_apps_page = view_create_layout_for_part(parent, edj_path, GRP_NOAPPS_PAGE, &quot;no.apps.page&quot;);
</pre>

<p>Because all the parts are attached as an image and a text in the edj file, only the edj file name is required.</p>
<p>In the edj file, you can find a group named <span style="font-family: Courier New,Courier,monospace">GRP_NOAPPS_PAGE</span>. To customize the shape, adjust the <span style="font-family: Courier New,Courier,monospace">GRP_NOAPPS_PAGE</span> in the edj file.</p>
</li>
<li><span style="font-family: Courier New,Courier,monospace">task.item.index</span>
<p>This part is the index. The circle index occupies the full screen area, but it is displayed only in the top area of the screen.</p>
<p>The following figure illustrates the index.</p>
<p class="figure">Figure: Index</p>
<p align="center"><img src="../images/taskmanager_index_wearable_sd.png" alt="Index" /></p>

<p>The following function creates the index.</p>
<pre class="prettyprint">
Evas_Object *view_create_circular_index(appdata_s *ad);
</pre>
<p>After creating the index, call the following function to show it.</p>
<pre class="prettyprint">
void view_add_circular_index(appdata_s *ad, int idx);
</pre>
</li>
<li><span style="font-family: Courier New,Courier,monospace">task.del.all.btn</span>
<p>This part creates a button that deletes all items at once.</p>
<p>The style of the button is provided, and you can customize the word displayed in the button.</p>
<p>The following figure illustrates the button.</p>
<p class="figure">Figure: Bottom button</p>
<p align="center"><img src="../images/taskmanager_bottom_btn_wearable_sd.png" alt="Bottom button" /></p>
<p>The following function creates the button.</p>
<pre class="prettyprint">
Evas_Object *view_create_bottom_button(appdata_s *ad);
</pre>
</li>
</ul>

<h2>Main Operation</h2>

<p>The Task-manager sample carries out several operations.</p>
<ul>
<li>Deleting items
<p>To delete an item, the application exhanges signals caused by a part in the edj file.</p>
<p>Set the program in the edj file to trigger a click event to delete the button named <span style="font-family: Courier New,Courier,monospace">delete.item.del</span>.</p>
 
<pre class="prettyprint">
part
{
&nbsp;&nbsp;&nbsp;name: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: (216-63)/216 0; to: &quot;recent.item.image&quot;;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 216/216 63/216; to: &quot;recent.item.image&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;b_recent_widget_del_icon.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 255;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;pressed&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 127;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;closeall&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 0;
&nbsp;&nbsp;&nbsp;}
}

programs
{
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;delete.clicked&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;delete_button,clicked&quot; &quot;clicked&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>If the <span style="font-family: Courier New,Courier,monospace">mouse,clicked</span> event is detected from the <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> part, send the <span style="font-family: Courier New,Courier,monospace">delete_button,clicked</span> signal with source named <span style="font-family: Courier New,Courier,monospace">clicked</span>.</p>
<p>To receive this signal, register a callback function to the item which is called when the signal is detected.</p>
<p>In this example, if the <span style="font-family: Courier New,Courier,monospace">delete_button,clicked</span> signal is detected with the <span style="font-family: Courier New,Courier,monospace">clicked</span> source, the <span style="font-family: Courier New,Courier,monospace">_delete_btn_clicked_cb()</span> callback is called.</p>
<pre class="prettyprint">
elm_object_signal_callback_add(item_layout, &quot;delete_button,clicked&quot; &quot;clicked&quot;, _delete_btn_clicked_cb, ad);
</pre>

</li>
<li>Showing the index according to the items and the current page
<p>In both situation that the items are deleted or added and the page is moved, the index must be changed according to the items and pages.</p>
<ol type="a">
<li>Delete the item.
<pre class="prettyprint">
static void
_delete_btn_clicked_cb(void *data, Evas_Object *obj, const char *emission, const char *source)
{
&nbsp;&nbsp;&nbsp;int cur_page = -1;
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Evas_Object *cur_item = NULL;

&nbsp;&nbsp;&nbsp;Eina_List *list = elm_box_children_get(ad-&gt;box);

&nbsp;&nbsp;&nbsp;elm_scroller_current_page_get(ad-&gt;scroller, &amp;cur_page, NULL);
&nbsp;&nbsp;&nbsp;cur_item = eina_list_nth(list, cur_page);

&nbsp;&nbsp;&nbsp;elm_box_unpack(ad-&gt;box, cur_item);
&nbsp;&nbsp;&nbsp;evas_object_del(cur_item);

&nbsp;&nbsp;&nbsp;update_index(ad);
}
</pre>

<p>The following functions are called:</p>
<pre class="prettyprint">
// Delete the index, and count the items that exist
void update_index(appdata_s *ad);
// Create an index according to the number of items 
void view_add_circular_index(appdata_s *ad, int idx);
// Check what number is the item showing and highlight the index of the same number
void view_sync_index_with_item(appdata_s *ad);
</pre>
</li>
<li>Move the page.
<p>By calling the following functions, the application is able to synchronize the index properly.</p>
<pre class="prettyprint">
static void
_scroller_scrolled_cb(void *data, Evas_Object *scroller, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;view_sync_index_with_item(ad);
}

void view_sync_index_with_item(appdata_s *ad); // Check what number is the item showing and highlight the index of the same number
</pre>
</li>
</ol>
</li>
<li>Closing all items.
<p>You can close all items by 1 click only using an edj signal.</p>
<p>The callback function registered on creation is called when the <span style="font-family: Courier New,Courier,monospace">bottom_button</span> is clicked.</p>
<pre class="prettyprint">
evas_object_smart_callback_add(del_all_btn, &quot;clicked&quot;, _del_all_btn_clicked_cb, ad-&gt;layout);
</pre>
<p>In the <span style="font-family: Courier New,Courier,monospace">_del_all_btn_clicked_cb()</span> callback, send a signal named <span style="font-family: Courier New,Courier,monospace">del.all.item</span> with source <span style="font-family: Courier New,Courier,monospace">item.list</span> and signal named <span style="font-family: Courier New,Courier,monospace">noapps</span> with source <span style="font-family: Courier New,Courier,monospace">show,noapps</span> to edj.</p> 
<pre class="prettyprint">
static void 
_del_all_btn_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = data 

&nbsp;&nbsp;&nbsp;elm_object_signal_elmit(layout, &quot;del.all.item&quot;, &quot;item.list&quot;);
&nbsp;&nbsp;&nbsp;bottom_button_disabled_set(layout, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(layout, &quot;noapps&quot;, &quot;show,noapps&quot;);
}
</pre>

<p>In the edj, you must register programs to receive these signals.</p>
<pre class="prettyprint">
programs
{
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;show,noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;show,noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;noapps&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;no.apps.page&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;task.item.index&quot;;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;hide.all.item&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;del.all.item&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;item.list&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;hide&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;task.item.list&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>This means that if these signals are detected with the sources, target changes their state to <span style="font-family: Courier New,Courier,monospace">noapps</span> and <span style="font-family: Courier New,Courier,monospace">hide</span>.</p>
<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;task.item.list&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;hide&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;no.apps.page&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;description: 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;noapps&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0; to &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1; 
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>To customise this application, see the functions in the <span style="font-family: Courier New,Courier,monospace">view.h</span> header file. This application is easy to customize with different variables and parameters.</p>
</li>
</ul>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

