<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Task-manager Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	
<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	



<h1>Task-manager Sample Overview</h1> 

<p>The Task-manager sample application demonstrates how you can see the recently used items and delete them. By using the scroller, box, list, and index components, you can manage multiple items and pages in Tizen.</p>
<p>The following figure illustrates the main screens of the Task-manager.</p>
<p class="figure">Figure: Task-manager views</p>
<p align="center"><img src="../images/taskmanager_wearable_sd.png" alt="Task-manager views" /></p>

<p>You can scroll through the items using the horizontal scroller. The index at the top of the screen shows where within the item list you are currently located.</p>
<p>You can delete an individual item or close all items.</p>

<h2>Implementation</h2>

<h3>View</h3> 

<p>The following figure illustrates the view structure: the recently used items are located in a box, and a scroller can be used to move between items.</p>

<p class="figure">Figure: Task-manager view structure</p>
<p align="center"><img src="../images/taskmanager_view_wearable_sd.png" alt="Task-manager view structure" /></p>


<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the view frame that consists of the window, conformant, and layout.</p>
<p class="figure">Figure: Task-manager frame structure</p>
<p align="center"><img src="../images/taskmanager_layout_wearable_sd.png" alt="Task-manager frame structure" /></p>

<p>To create the parts:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">task.item.list</span> part consists of the scroller, box, and items.
<ol>
<li>Create the components and the layout.
<p>To manage multiple items, you need the scroller and box components. The scroller makes the application scrollable, and the box allows the application to show multiple items through packaging and arrangement.</p>
<p>The following example creates a horizontal scroller and a box which packs the items horizontally.</p>
<pre class="prettyprint">
ad-&gt;scroller = view_create_horizontal_scroller(ad);
ad-&gt;box = view_create_horizontal_box(ad);
</pre>

<p>The following figure illustrates the structure of the scroller (pink) and the box (blue).</p>
<p class="figure">Figure: Scroller and box</p>
<p align="center"><img src="../images/taskmanager_scrollerbox_wearable_sd.png" alt="Scroller and box" /></p>

<p>Create the layout frame for each item, consisting of text and images:</p>
<pre class="prettyprint">
item_layout = view_create_layout(ad-&gt;layout, edj_path, GRP_ITEM);
</pre>
<p class="figure">Figure: Item layout</p>
<p align="center"><img src="../images/taskmanager_item_layout_wearable_sd.png" alt="Item layout" /></p>
</li>
<li>Set the name and icon for the item.
<p>You can pass the item name and image file as a second parameter.</p>
<pre class="prettyprint">
view_set_text(item_layout, &quot;recent.item.name&quot;, name);
view_set_image(item_layout, &quot;recent.item.image&quot;, image_file);
</pre>

<p>The part named <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> is attached as an IMAGE part. You can find this in the EDJ file and change the image file and the position.</p>
<p>After creating the item, put the item in the box:</p>
<pre class="prettyprint">
elm_box_pack_start(ad-&gt;box, item_layout);
</pre>
</li>
<li>Customize the position of the items:
<pre class="prettyprint">
elm_box_layout_set(box, _box_layout_cb, ad, NULL);
</pre>
<p>Whenever the box size is changed because of deleting or adding an item, the <span style="font-family: Courier New,Courier,monospace">_box_layout_cb()</span> function is called. You can specify the location of the item wherever you want.</p>
</li>
</ol>
<p>You can create a scroller, box, and item together by calling the following function:</p>
<pre class="prettyprint">
Evas_Object *view_create_1text_1image_delbutton_item(appdata_s *ad, char *name, char *image_file);
</pre>
<p>The following figure illustrates the scroller (pink), box (blue), and items (yellow) together.</p>
<p class="figure">Figure: Scroller, box, and item</p>
<p align="center"><img src="../images/taskmanager_scrollerboxitem_wearable_sd.png" alt="Scroller, box, and item" /></p>
</li>
<li><span style="font-family: Courier New,Courier,monospace">no.apps.page</span> part is an empty page that is displayed when all items are deleted.
<p>The part consists of 2 text parts and 1 image part.</p>
<p class="figure">Figure: Empty page layout</p>
<p align="center"><img src="../images/taskmanager_noapps_wearable_sd.png" alt="Empty page layout" /></p>

<p>To fill out all these parts:</p>
<pre class="prettyprint">
no_apps_page = view_create_layout_for_part(parent, edj_path, GRP_NOAPPS_PAGE, &quot;no.apps.page&quot;);
</pre>

<p>Because all the parts are attached as an image and a text in the EDJ file, only the EDJ file name is required.</p>
<p>In the EDJ file, you can find a group named <span style="font-family: Courier New,Courier,monospace">GRP_NOAPPS_PAGE</span>. To customize the shape, adjust the <span style="font-family: Courier New,Courier,monospace">GRP_NOAPPS_PAGE</span> group content in the EDJ file.</p>
</li>
<li><span style="font-family: Courier New,Courier,monospace">task.item.index</span> part is the index.
<p>The circle index occupies the full screen area, but it is displayed only in the top area of the screen.</p>
<p class="figure">Figure: Index</p>
<p align="center"><img src="../images/taskmanager_index_wearable_sd.png" alt="Index" /></p>

<p>To create and show the index:</p>
<pre class="prettyprint">
Evas_Object *view_create_circular_index(appdata_s *ad);

void view_add_circular_index(appdata_s *ad, int idx);
</pre>
</li>
<li><span style="font-family: Courier New,Courier,monospace">task.del.all.btn</span> part creates a button that closes all items at once.
<p>The style of the button is provided, and you can customize the text displayed on the button.</p>
<p class="figure">Figure: Bottom button</p>
<p align="center"><img src="../images/taskmanager_bottom_btn_wearable_sd.png" alt="Bottom button" /></p>
<p>To create the button:</p>
<pre class="prettyprint">
Evas_Object *view_create_bottom_button(appdata_s *ad);
</pre>
</li>
</ul>

<h3>Main Operation</h3>

<p>The Task-manager sample handles the following operations:</p>
<ul>
<li>Deleting items
<p>To delete an item, the application exchanges signals caused by a part in the EDJ file.</p>
<p>Set the program in the EDJ file to trigger a click event to delete the button named <span style="font-family: Courier New,Courier,monospace">delete.item.del</span>:</p>
 
<pre class="prettyprint">
part
{
&nbsp;&nbsp;&nbsp;name: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: (216-63)/216 0; to: &quot;recent.item.image&quot;;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 216/216 63/216; to: &quot;recent.item.image&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;b_recent_widget_del_icon.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 255;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;pressed&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 127;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;closeall&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 0;
&nbsp;&nbsp;&nbsp;}
}

programs
{
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;delete.clicked&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;delete_button,clicked&quot; &quot;clicked&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>If the <span style="font-family: Courier New,Courier,monospace">mouse,clicked</span> event is detected from the <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> part, the <span style="font-family: Courier New,Courier,monospace">delete_button,clicked</span> signal is sent with the source named <span style="font-family: Courier New,Courier,monospace">clicked</span>.</p>
<p>To receive this signal, register a callback function to the item which is called when the signal is detected.</p>
<p>In this example, if the <span style="font-family: Courier New,Courier,monospace">delete_button,clicked</span> signal is detected with the <span style="font-family: Courier New,Courier,monospace">clicked</span> source, the <span style="font-family: Courier New,Courier,monospace">_delete_btn_clicked_cb()</span> callback is called:</p>
<pre class="prettyprint">
elm_object_signal_callback_add(item_layout, &quot;delete_button,clicked&quot; &quot;clicked&quot;, _delete_btn_clicked_cb, ad);
</pre>

</li>
<li>Showing the index according to the current number of items and the current page
<p>Whenever items are deleted or added or the page is moved, the index must be changed accordingly.</p>
<ol type="a">
<li>When an item is deleted, handle the index changes in the delete button click callback:
<pre class="prettyprint">
static void
_delete_btn_clicked_cb(void *data, Evas_Object *obj, const char *emission, const char *source)
{
&nbsp;&nbsp;&nbsp;int cur_page = -1;
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Evas_Object *cur_item = NULL;

&nbsp;&nbsp;&nbsp;Eina_List *list = elm_box_children_get(ad-&gt;box);

&nbsp;&nbsp;&nbsp;elm_scroller_current_page_get(ad-&gt;scroller, &amp;cur_page, NULL);
&nbsp;&nbsp;&nbsp;cur_item = eina_list_nth(list, cur_page);

&nbsp;&nbsp;&nbsp;elm_box_unpack(ad-&gt;box, cur_item);
&nbsp;&nbsp;&nbsp;evas_object_del(cur_item);

&nbsp;&nbsp;&nbsp;// Delete the index, and count the items that exist
&nbsp;&nbsp;&nbsp;update_index(ad);
}
</pre>
<p>Call the <span style="font-family: Courier New,Courier,monospace">update_index()</span>, <span style="font-family: Courier New,Courier,monospace">view_add_circular_index()</span>, and <span style="font-family: Courier New,Courier,monospace">view_sync_index_with_item()</span> functions to delete the current index, count the existing items, create a new index based on the number of items, and check and highlight the number of the currently shown item.</p>

</li>
<li>When the page is moved, handle the index changes in the scroller callback:
<pre class="prettyprint">
static void
_scroller_scrolled_cb(void *data, Evas_Object *scroller, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;// Check which item number is showing and highlight the index of the same number
&nbsp;&nbsp;&nbsp;view_sync_index_with_item(ad);
}
</pre>
</li>
</ol>
</li>
<li>Closing all items
<p>You can close all items together using an EDJ signal.</p>
<p>The callback function registered when the bottom button was created is called when the <span style="font-family: Courier New,Courier,monospace">bottom_button</span> is clicked:</p>
<pre class="prettyprint">
evas_object_smart_callback_add(del_all_btn, &quot;clicked&quot;, _del_all_btn_clicked_cb, ad-&gt;layout);
</pre>
<p>In the callback, send a <span style="font-family: Courier New,Courier,monospace">del.all.item</span> signal with the <span style="font-family: Courier New,Courier,monospace">item.list</span> source and a <span style="font-family: Courier New,Courier,monospace">noapps</span> signal with the <span style="font-family: Courier New,Courier,monospace">show,noapps</span> source to EDJ:</p> 
<pre class="prettyprint">
static void 
_del_all_btn_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = data 

&nbsp;&nbsp;&nbsp;elm_object_signal_emit(layout, &quot;del.all.item&quot;, &quot;item.list&quot;);
&nbsp;&nbsp;&nbsp;bottom_button_disabled_set(layout, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(layout, &quot;noapps&quot;, &quot;show,noapps&quot;);
}
</pre>

<p>In the EDJ, register programs to receive these signals:</p>
<pre class="prettyprint">
programs
{
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;show,noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;show,noapps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;noapps&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;bg&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;no.apps.page&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;task.item.index&quot;;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;program
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;hide.all.item&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;del.all.item&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;item.list&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;hide&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: &quot;task.item.list&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>When these signals are detected with the sources, the above programs change the state of the targets to <span style="font-family: Courier New,Courier,monospace">noapps</span> and <span style="font-family: Courier New,Courier,monospace">hide</span>.</p>
<p>The target part descriptions define the part content in these states. The item list (<span style="font-family: Courier New,Courier,monospace">task.item.list</span>) is hidden, and the empty page (<span style="font-family: Courier New,Courier,monospace">no.apps.page</span>) is shown.</p>
<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;task.item.list&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;hide&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;}
}
part 
{
&nbsp;&nbsp;&nbsp;name: &quot;no.apps.page&quot;;
&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;description: 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;noapps&quot; 0.0; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.0; to: &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0; to &quot;bg&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1; 
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>To customize the application, see the functions in the <span style="font-family: Courier New,Courier,monospace">view.h</span> header file. You can easily customize the application using various variables and parameters.</p>
</li>
</ul>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

