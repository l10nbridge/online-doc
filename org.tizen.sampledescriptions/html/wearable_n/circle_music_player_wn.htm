<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Music Player Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
<div id="profile">
	<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
</div>

<h1>(Circle) Music Player Sample Overview</h1>

<p>The (Circle) Music Player sample application demonstrates how you can create a music player application, get media information, and play media files using APIs related to media control.</p> 

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screens of the Music Player.</p> 

<p class="figure">Figure: (Circle) Music Player screens</p>
<p align="center"><img src="../images/music_player_views_wn.png" alt="(Circle) Music Player screens" /></p>

<p>The user can control the playback with the buttons on the main screen. To access further options, click the more button (3 vertical dots) on the right side of the screen.</p>

<h2>Prerequisites</h2>

<p>To ensure proper application execution, the following privileges must be set:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediastorage</span></li>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/externalstorage</span></li>
<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/content.write</span></li></ul>

<h2>Source Files</h2>
 
<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
  <caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/musicplayer.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">musicplayer.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/images/</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and creating data for the application.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/musicplayer.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, and view control.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>
 
<h2>Implementation</h2>

<h3>Basic Layout</h3>

<p>To create the basic application layout, use the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function. The window and conformant components are essential parts of the application layout.</p> 

<pre class="prettyprint">
void 
view_create(void)
{
&nbsp;&nbsp;&nbsp;// Create a window 
&nbsp;&nbsp;&nbsp;s_info.win = view_create_win(PACKAGE);
&nbsp;&nbsp;&nbsp;if (s_info.win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a window.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a conformant 
&nbsp;&nbsp;&nbsp;s_info.conform = view_create_conformant_without_indicator(s_info.win);
&nbsp;&nbsp;&nbsp;if (s_info.conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the main view is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.win);
}</pre>

<p>Create a layout for the conformant using the <span style="font-family: Courier New,Courier,monospace">view_create_layout_for_conformant()</span> function:</p> 

<pre class="prettyprint">
conform = view_get_conformant();
content = view_create_layout_for_conformant(conform, full_path, GRP_MAIN, _content_back_cb, NULL);
if (content == NULL) 
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a content.&quot;);

&nbsp;&nbsp;&nbsp;return NULL;
}</pre>

<h3>Main View</h3>

<p>The main view shows the playback control buttons, and the details of the currently playing song.</p>

<p class="figure">Figure: Main view</p>
<p align="center"><img src="../images/music_player_main_view_wn.png" alt="Main view" /></p>

<p>To create the main view, use the <span style="font-family: Courier New,Courier,monospace">view_create_layout_for_conformant()</span> function in the <span style="font-family: Courier New,Courier,monospace">app_create()</span> function:</p> 

<pre class="prettyprint">content = view_create_layout_for_conformant(conform, full_path, GRP_MAIN, _content_back_cb, NULL);</pre>

<p>The following figure illustrates the created main view frame.</p> 

<p class="figure">Figure: Main view frame</p>
<p align="center"><img src="../images/music_player_main_frame_wn.png" alt="Main view frame" /></p>

<p>Fill out each part of the view:</p> 

<ul>
<li>The fourth parameter of the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function is used to define the button icon image. In this example, a background image under the button is used, so set the background image with the EDJ file and set the button to be transparent (with a <span style="font-family: Courier New,Courier,monospace">focus</span> theme).</li> 
<li>To indicate that a button is clicked, customize the <span style="font-family: Courier New,Courier,monospace">_&lt;button name&gt;_btn_clicked_cb()</span> callbacks.</li> 
<li>To add a more button to the music player, use the <span style="font-family: Courier New,Courier,monospace">view_set_more_button()</span> function. You can customize the number, names, sub texts, and icons of the options behind the more button. The last parameter is the path of the icon.</li>
</ul>

<pre class="prettyprint">
// Set default album art
data_get_resource_path(IMG_PATH_NO_ALBUM, default_img_path, sizeof(default_img_path));
view_music_set_album_art(content, &quot;sw.bg&quot;, &quot;NULL&quot;, default_img_path);

// Set the progress bar background image and color
icon_path = data_get_image(&quot;sw.progressbar.bg&quot;);
view_set_image(content, &quot;sw.progressbar.bg&quot;, icon_path);
view_set_color(content, &quot;sw.progressbar.bg&quot;, 0, 87, 107, 255);
free(icon_path);

// Set the Play button
icon_path = data_get_image(&quot;sw.icon.play&quot;);
view_set_button(content, &quot;sw.icon.play&quot;, &quot;focus&quot;, icon_path, NULL, _btn_down_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_btn_up_cb, _play_btn_clicked_cb, content);
view_set_color(content, &quot;sw.icon.play&quot;, 250, 250, 250, 255);
free(icon_path);

// Set the Prev button
icon_path = data_get_image(&quot;sw.icon.prev&quot;);
view_set_button(content, &quot;sw.icon.prev&quot;, &quot;focus&quot;, icon_path, NULL, _btn_down_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_btn_up_cb, _prev_btn_clicked_cb, content);
view_set_color(content, &quot;sw.icon.prev&quot;, 250, 250, 250, 255);
free(icon_path);

// Set the Next button
icon_path = data_get_image(&quot;sw.icon.next&quot;);
view_set_button(content, &quot;sw.icon.next&quot;, &quot;focus&quot;, icon_path, NULL, _btn_down_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_btn_up_cb, _next_btn_clicked_cb, content);
view_set_color(content, &quot;sw.icon.next&quot;, 250, 250, 250, 255);
free(icon_path);

// Set the progress bar used to display the play time
view_set_progressbar(content, &quot;sw.progressbar&quot;, 53, 5);
view_set_color_of_circle_object(content, &quot;sw.progressbar&quot;, 0, 192, 235, 255 * 0.5);
view_set_progressbar_val(content, &quot;sw.progressbar&quot;, 0);

// Set the more button
view_set_more_button(content, &quot;sw.more&quot;, NULL, NULL, NULL, NULL);
data_get_resource_path(data_get_more_button_image(0), full_path, sizeof(full_path));
view_add_more_button_item(content,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;sw.more&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_get_more_button_main_text(0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_get_more_button_sub_text(0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;full_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_more_btn_item_clicked_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content);</pre>

<p>When the user clicks the more button, a selector view opens showing the available options. If the user selects a more option item, the <span style="font-family: Courier New,Courier,monospace">_more_btn_item_clicked_cb()</span> callback is called.</p> 

<p class="figure">Figure: Option icon in the selector view</p>
<p align="center"><img src="../images/music_player_more_wn.png" alt="Option icon in the selector view" /></p>

<pre class="prettyprint">
static void
_more_btn_item_clicked_cb(void *user_data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *content = user_data;
&nbsp;&nbsp;&nbsp;Eext_Object_Item *item = (Eext_Object_Item *) event_info;
&nbsp;&nbsp;&nbsp;const char *sub_text;
&nbsp;&nbsp;&nbsp;char full_path[PATH_MAX] = {0,};
&nbsp;&nbsp;&nbsp;device_info_e device;

&nbsp;&nbsp;&nbsp;sub_text = eext_more_option_item_part_text_get(item, &quot;selector,sub_text&quot;);

&nbsp;&nbsp;&nbsp;if (!strcmp(sub_text, data_get_more_button_sub_text(DEVICE_INFO_GEAR))) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device = DEVICE_INFO_PHONE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_data_set(content, &quot;__DEVICE_INFO__&quot;, (void *) device);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_set_no_content_layout(content, &quot;BT disconnected&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device = DEVICE_INFO_GEAR;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_data_set(content, &quot;__DEVICE_INFO__&quot;, (void *) device);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_data_set(content, &quot;__CURRENT_ALBUM_INDEX__&quot;, (void *) 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_set_current_album(content, 0);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;data_get_resource_path(data_get_more_button_image(device), full_path, sizeof(full_path));
&nbsp;&nbsp;&nbsp;view_music_change_more_item(item, data_get_more_button_main_text(device), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_get_more_button_sub_text(device), full_path);

&nbsp;&nbsp;&nbsp;if (player_unprepare(s_info.player) != PLAYER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;unprepare error&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_change_play_button_image(content);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">_more_btn_item_clicked_cb()</span> callback changes the current album art and title based on the device type the user selected.</p> 

<p class="figure">Figure: Result of the device type change</p>
<p align="center"><img src="../images/music_player_option_wn.png" alt="Result of the device type change" /></p>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>