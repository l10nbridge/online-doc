<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Dialer Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
<div id="profile">
	<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
</div>

<h1>(Circle) Dialer Sample Overview</h1>

<p>The (Circle) Dialer sample application demonstrates how you can create a circular dialer and use the Entry UI component to show the digits entered by the user. It shows how to hijack upper layer touch events to determine, without a button, which digits the user has touched.</p>
<p>With this application, you can understand a simple circular dialer view and touch event control techniques. The application does not include call functions or companion mode operation.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screen of the (Circle) Dialer.</p>

<p class="figure">Figure: (Circle) Dialer screen</p>
<p align="center"><img src="../images/dialer_view_wn.png" alt="(Circle) Dialer screen" /></p>

<p>On the application screen, the user can dial a phone number by touching the digits at the edge of the screen.</p>

<h2>Source Files</h2>
 
<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
  <caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
		<tr>
		<td><span style="font-family: Courier New,Courier,monospace">edje/images/</span></td>
		<td>This file contains the image files used in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/dialer.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/images/</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and creating data for the application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/main.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, and view control.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>
 
<h2>Implementation</h2>

<h3>Application Layout</h3> 

<p>To create the basic application layout, use the <span style="font-family: Courier New,Courier,monospace">view_create()</span> function. The window and conformant components are essential parts of the application layout.</p> 

<pre class="prettyprint">
void 
view_create(void)
{
&nbsp;&nbsp;&nbsp;// Create a window 
&nbsp;&nbsp;&nbsp;s_info.win = view_create_win(PACKAGE);
&nbsp;&nbsp;&nbsp;if (s_info.win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a window.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a conformant 
&nbsp;&nbsp;&nbsp;s_info.conform = view_create_conformant_without_indicator(s_info.win);
&nbsp;&nbsp;&nbsp;if (s_info.conform == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the main view is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.win);
}</pre>

<p>To create a layout with the EDJ file, use the <span style="font-family: Courier New,Courier,monospace">view_dialer_create()</span> function:</p>

<pre class="prettyprint">
void 
view_dialer_create(const char *file_path)
{
&nbsp;&nbsp;&nbsp;s_info.layout = view_create_layout_for_conformant(s_info.conform, file_path, GRP_MAIN, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dialer_layout_cb, NULL);
&nbsp;&nbsp;&nbsp;if (s_info.layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a content.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}</pre>


<h4>Main View</h4>

<p>The main view contains digit buttons, function image buttons (<strong>Call</strong> and <strong>Delete</strong>), and a digit input field showing the selected digits.</p>

<p class="figure">Figure: Main view</p>
<p align="center"><img src="../images/dialer_view_wn.png" alt="Main view" /></p>

<p>The structure of the main view is very simple. The circular positioning text and digits are merged with a background image. The result is a screen where the user feels like they are touching a button at the edge of the dial, while, in the actual implementation, the button is just an image and text. For the details of this kind of trick button implementation, see <a href="#button">Making a Digit Button</a>.</p>

<p class="figure" id="main_structure">Figure: Main view structure</p>
<p align="center"><img src="../images/dialer_main_view_wn.png" alt="Main view structure" /></p>

<p>To implement the main view:</p>

<ul>
<li>Set the background image and the image buttons using the <span style="font-family: Courier New,Courier,monospace">view_set_image()</span> and <span style="font-family: Courier New,Courier,monospace">view_set_color()</span> functions:
<pre class="prettyprint">
// main.c
// Set the background image to the &quot;sw.button.bg&quot; part of EDC 
image = data_get_image_path(&quot;sw.button.bg&quot;);
view_set_image(view_dialer_get_layout_object(), &quot;sw.button.bg&quot;, image);
view_set_color(view_dialer_get_layout_object(), &quot;sw.button.bg&quot;, 8, 36, 61, 255);

image = data_get_image_path(&quot;sw.button.call&quot;);
view_set_image(view_dialer_get_layout_object(), &quot;sw.button.call&quot;, image);
view_set_color(view_dialer_get_layout_object(), &quot;sw.button.call&quot;, 0, 214, 46, 255);

image = data_get_image_path(&quot;sw.button.delete&quot;);
view_set_button(view_dialer_get_layout_object(), &quot;sw.button.delete&quot;, &quot;focus&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image, NULL, _btn_down_cb, _btn_up_cb, NULL, NULL);
view_set_color(view_dialer_get_layout_object(), &quot;sw.button.delete&quot;, 250, 250, 250, 255);
</pre>
</li>
<li>To do something when the button goes down or up, customize the <span style="font-family: Courier New,Courier,monospace">_btn_down_cb()</span> and <span style="font-family: Courier New,Courier,monospace">_btn_up_cb()</span> callbacks, or create another function for the action.

<p>In this example, the <span style="font-family: Courier New,Courier,monospace">_btn_down_cb()</span> and <span style="font-family: Courier New,Courier,monospace">_btn_up_cb()</span> callbacks handle the touch events of the <strong>Delete</strong> button. When the user touches the <strong>Delete</strong> button, the <span style="font-family: Courier New,Courier,monospace">_btn_down_cb()</span> callback changes the color of the button and removes a digit in the digit input field, while the <span style="font-family: Courier New,Courier,monospace">_btn_up_cb()</span> callback returns the button color to normal.</p>

<pre class="prettyprint">
static void 
_btn_down_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;button is pressed.&quot;);

&nbsp;&nbsp;&nbsp;// Delete an input character 
&nbsp;&nbsp;&nbsp;view_dialer_set_entry_text(ENTRY_TEXT_BACKSPACE, NULL);

&nbsp;&nbsp;&nbsp;// Change the button color 
&nbsp;&nbsp;&nbsp;evas_object_color_set(obj, 250, 250, 250, 102);
}

static void 
_btn_up_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;button is released.&quot;);

&nbsp;&nbsp;&nbsp;// Change the button color 
&nbsp;&nbsp;&nbsp;evas_object_color_set(obj, 250, 250, 250, 255);
}</pre>
</li>
<li>To implement the digit input field in the center of the screen, use the EFL Entry component. The EFL entry is a convenient UI component that shows a box in which the user can enter text.

<p>The <span style="font-family: Courier New,Courier,monospace">view_create_entry()</span> function creates an entry component and returns the component object. The object is needed to control the entry component, for example, to delete its text or change the text style.</p>

<pre class="prettyprint">
void 
view_dialer_set_entry(const char *part_name)
{

&nbsp;&nbsp;&nbsp;if (s_info.layout == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;parent layout is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (part_name == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;part name is NULL.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;s_info.entry = view_create_entry(s_info.layout, part_name, NULL, NULL);
}</pre>
</li></ul>


<h3 id="button">Making a Digit Button</h3>

<p>The trick digit button in the dialer is implemented touch event hijacking. The button is actually just images and texts as shown in the <a href="#main_structure">main view structure</a>. You can transform those images and text into a trick button by hijacking user touch events.</p>

<p class="figure">Figure: Transparent layer for touch event hijacking</p>
<p align="center"><img src="../images/dialer_transparent_layer_wn.png" alt="Transparent layer for touch event hijacking" /></p>

<p>To implement touch event hijacking:</p>

<ol>
<li>Create a transparent layer for touch event handling
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">evas_object_rectangle_add()</span> function creates a rectangle object on the canvas.</li>
<li>The <span style="font-family: Courier New,Courier,monospace"> evas_object_repeat_events_set()</span> function enables the touch events to be repeated on the lower layers. Event repetition is very important to correctly handle touch events for each layer.</li>
<li>Register callback functions using the <span style="font-family: Courier New,Courier,monospace">evas_object_event_callback_add()</span> function.</li></ul>

<pre class="prettyprint">
// Create a rectangle object to the target window for hijacking touch events
Evas_Object* 
view_dialer_create_rectangle()
{
&nbsp;&nbsp;&nbsp;Evas_Object *rect = NULL;

&nbsp;&nbsp;&nbsp;// Add the rectangle object to parent 
&nbsp;&nbsp;&nbsp;rect = evas_object_rectangle_add(evas_object_evas_get(s_info.layout));
&nbsp;&nbsp;&nbsp;if (rect == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to add a rectangle&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Set the color to transparent
&nbsp;&nbsp;&nbsp;// You can change the color for other purposes, such as a color filter layer 
&nbsp;&nbsp;&nbsp;evas_object_color_set(rect, 255, 255, 255, 0);

&nbsp;&nbsp;&nbsp;// Set the event repeat mode 
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(rect, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Set the size of the object 
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(rect, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(s_info.win, rect);

&nbsp;&nbsp;&nbsp;evas_object_show(rect);

&nbsp;&nbsp;&nbsp;// Set a callback for object events 
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(rect, EVAS_CALLBACK_MOUSE_DOWN, _rectangle_mouse_down_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(rect, EVAS_CALLBACK_MOUSE_UP, _rectangle_mouse_up_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(rect, EVAS_CALLBACK_MOUSE_MOVE, _rectangle_mouse_move_cb, NULL);

&nbsp;&nbsp;&nbsp;return rect;
}</pre>
</li>

<li>
<p>You must calculate the position of the touch events that the transparent layer catches on the canvas. Events are handled or discarded according to the position of the touch event. </p>

<p>In the calculation, check the radius and slope. The radius from the center of the screen to the position of the touch event must be longer than the distance from the center to the button image. If the radius is shorter than the threshold, the touch event is ignored and just repeated on the lower layers.</p>

<p>To determine the correct digit being touched, use the slope of the touch event position. For example, in the following figure, if the slope of some event position is higher than line 1&#39;s slope and lower than line 2&#39;s slope, you can determine that the digit 1 button is being touched.</p>

<p align="center"><img src="../images/dialer_position_wn.png" alt="Calculating digit positions" /></p>

<p>The <span style="font-family: Courier New,Courier,monospace">_rectangle_mouse_down_cb()</span> callback is called with the touch event information from the transparent layer. The <span style="font-family: Courier New,Courier,monospace">_get_btn_dial_number()</span> function is used to calculate the position of the digit by checking the radius and slope.</p>

<pre class="prettyprint">
static void 
_rectangle_mouse_down_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Event_Mouse_Down *ev = (Evas_Event_Mouse_Down*) event_info;
&nbsp;&nbsp;&nbsp;s_info.mouse_down_dial_num = _get_btn_dial_number(ev-&gt;output.x, ev-&gt;output.y);
}

// Get the dial number of the touch event position by calculating distance and slope
static int 
_get_btn_dial_number(int evt_x, int evt_y)
{
&nbsp;&nbsp;&nbsp;int result = -1;

&nbsp;&nbsp;&nbsp;// Calculate x and y from the CENTER_REF point 
&nbsp;&nbsp;&nbsp;int x = evt_x - CENTER_REF_X;
&nbsp;&nbsp;&nbsp;int y = CENTER_REF_Y - evt_y;

&nbsp;&nbsp;&nbsp;// Calculate the slope and radius from the CENTER_REF point 
&nbsp;&nbsp;&nbsp;float slope = (float)y / (float)x;
&nbsp;&nbsp;&nbsp;float radius = sqrt(x*x + y*y);

&nbsp;&nbsp;&nbsp;if (radius &gt; RADIUS_MIN) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt;= 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (y == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &gt;= 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 8;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (slope &gt; SLOPE_72_DEGREE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope &gt; SLOPE_36_DEGREE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 6;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope &gt; SLOPE_180_DEGREE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 7;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope &gt; SLOPE_144_DEGREE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 8;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (slope &gt; SLOPE_108_DEGREE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 9;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 4;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y &gt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Ignore touch event under min radius&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}</pre>
</li></ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>