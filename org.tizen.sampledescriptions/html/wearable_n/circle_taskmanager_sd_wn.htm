<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Task Manager Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	
<div id="container"><div id="contents"><div class="content">

	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>
	

<h1>(Circle) Task Manager Sample Overview</h1> 

<p>The (Circle) Task Manager sample application demonstrates how you can see the recently used items and delete them. By using the scroller, box, list, and index components, you can manage multiple items and pages in Tizen.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the (Circle) Task Manager.</p>
<p class="figure">Figure: (Circle) Task Manager screens</p>
<p align="center"><img src="../images/taskmanager_wearable_sd.png" alt="(Circle) Task Manager screens" /></p>

<p>The user can scroll through the items using the horizontal scroller. The index at the top of the screen shows where within the item list the user is currently located.</p>
<p>The user can delete an individual item or close all items.</p>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
<caption>Table: Source files</caption>
<tbody>
	<tr>
		<th>File name</th>
		<th>Description</th>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">edje/images</span></td>
		<td>This directory contains the image files used in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/data.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/taskmanager.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">inc/view.h</span></td>
		<td>This file contains information and definition of the variables and functions used in the C files, especially in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/edje/main.edc</span></td>
		<td>This file is for the UI and contains style, image, and position of the sample application.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">res/image</span></td>
		<td>This directory contains the image files used in the C files.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/data.c</span></td>
		<td>This file contains the functions for retrieving and making data for the application.</td>
	</tr>	
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/main.c</span></td>
		<td>This file contains the functions related to the application life-cycle, callback functions, view control, and data.</td>
	</tr>
	<tr>
		<td><span style="font-family: Courier New,Courier,monospace">src/view.c</span></td>
		<td>This file contains the functions for implementing the views and handling events.</td>
	</tr>
	</tbody>
</table>

<h2>Implementation</h2>

<h3>Application Layout</h3> 


<p>The <span style="font-family: Courier New,Courier,monospace">view_create()</span> function creates the view frame that consists of the window and conformant. These components are essential in creating the application UI.</p>
<pre class="prettyprint">
void 
view_create(void)
{
&nbsp;&nbsp;&nbsp;// Create the window
&nbsp;&nbsp;&nbsp;s_info.win = view_create_win(PACKAGE);
&nbsp;&nbsp;&nbsp;if (s_info.win == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a window.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create the conformant
&nbsp;&nbsp;&nbsp;s_info.conform = view_create_conformant_without_indicator(s_info.win);
&nbsp;&nbsp;&nbsp;if (s_info.conform == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to create a conformant&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Show the window after the main view is set up
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.win);
}
</pre>

<p>To create additional UI features, call the <span style="font-family: Courier New,Courier,monospace">view_task_manager_create()</span> function.</p>

<p>From the <span style="font-family: Courier New,Courier,monospace">data_get_resource_path()</span> function, you can get the EDJ file path that is used for the application layout. After creating the layout with the given EDJ file, create a scroller for scrolling, and a box for easily managing several items.</p>
<pre class="prettyprint">
data_get_resource_path(EDJ_FILE, edj_path, sizeof(edj_path));
view_task_manager_create(edj_path, GRP_MAIN, GRP_SCROLLER);

void 
view_task_manager_create(char *file_path, char *group_name, char *scroller_part)
{
&nbsp;&nbsp;&nbsp;s_info.layout = view_create_layout(s_info.conform, file_path, group_name, _layout_back_cb, NULL);

&nbsp;&nbsp;&nbsp;elm_object_content_set(s_info.conform, s_info.layout);

&nbsp;&nbsp;&nbsp;s_info.scroller = view_create_horizontal_scroller(s_info.layout, scroller_part, scrolled_cb, NULL);

&nbsp;&nbsp;&nbsp;s_info.box = view_create_horizontal_box(s_info.scroller, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(s_info.layout);
}
</pre>



<p>The following figure illustrates the application view frame structure.</p>
<p class="figure">Figure: Task Manager view frame structure</p>
<p align="center"><img src="../images/taskmanager_view_wearable_sd.png" alt="Task Manager view frame structure" /></p>

<p>The size of the box is relative to the number of items packed in the box. The scroller enables you to see all items through scrolling the screen left or right.</p>

<p>The following figure illustrates how the frame elements are defined in the EDJ file.</p>

<p class="figure">Figure: Frame elements in the EDJ file</p>
<p align="center"><img src="../images/taskmanager_layout_wearable_sd.png" alt="Frame elements in the EDJ file" /></p>

<h4>Item Layout</h4>

<p>The <span style="font-family: Courier New,Courier,monospace">task.item.list</span> part has a full screen size of 360 x 360 pixels.</p>

<p>Create a scroller to fill the area. In the <span style="font-family: Courier New,Courier,monospace">view_task_manager_create()</span> function, the <span style="font-family: Courier New,Courier,monospace">GRP_SCROLLER</span> parameter means that a scroller is put in this part, and the <span style="font-family: Courier New,Courier,monospace">GRP_SCROLLER</span> can be converted to the <span style="font-family: Courier New,Courier,monospace">task.item.list</span> part:</p>
<pre class="prettyprint">
view_task_manager_create(edj_path, GRP_MAIN, GRP_SCROLLER);
</pre>

<p>Because the <span style="font-family: Courier New,Courier,monospace">box</span> container is added to the <span style="font-family: Courier New,Courier,monospace">scroller</span>, make each item and pack it to the <span style="font-family: Courier New,Courier,monospace">box</span> container to show the item in the <span style="font-family: Courier New,Courier,monospace">task.item.list</span> part. You can create the item with as many frames as you want.</p>

<p>The following figure illustrates the item frame structure.</p>
<p class="figure">Figure: Item frame</p>
<p align="center"><img src="../images/taskmanager_item_layout_wearable_sd.png" alt="Item frame" /></p>

<p>To create the item and pack it to the box:</p>

<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">view_create_1text_1image_delbutton_item()</span> function makes the frame for the item, and through the <span style="font-family: Courier New,Courier,monospace">view_set_text()</span> function, it fills out the <span style="font-family: Courier New,Courier,monospace">recent.item.name</span> part, and using the <span style="font-family: Courier New,Courier,monospace">view_set_image()</span> function, it fills out the <span style="font-family: Courier New,Courier,monospace">recent.item.image</span> part for the icon.</li>
<li>To delete the item, register the <span style="font-family: Courier New,Courier,monospace">delete_btn_clicked_cb()</span> callback function. If the appointed <span style="font-family: Courier New,Courier,monospace">clicked</span> signal and the <span style="font-family: Courier New,Courier,monospace">delete_button</span> source are detected from the <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> part, the <span style="font-family: Courier New,Courier,monospace">delete_btn_clicked_cb()</span> callback is triggered.</li>
<li>After creating the item, use the <span style="font-family: Courier New,Courier,monospace">view_set_item_to_box()</span> function to pack it to the <span style="font-family: Courier New,Courier,monospace">box</span>.</li>
</ul>
<pre class="prettyprint">
for (i = 0; i &lt; data_get_screenshot_count(); i++) 
{
&nbsp;&nbsp;&nbsp;Evas_Object *item = NULL;

&nbsp;&nbsp;&nbsp;// Get appname to display the item 
&nbsp;&nbsp;&nbsp;if (data_get_appname(i, appname, sizeof(appname)) != 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Get image file path to display the item
&nbsp;&nbsp;&nbsp;if (data_get_screenshot(i, img_path, sizeof(img_path)) != 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create a view that consists of 1 title, 1 icon, and a delete button
&nbsp;&nbsp;&nbsp;item = view_create_1text_1image_delbutton_item(layout, edj_path, GRP_ITEM);
&nbsp;&nbsp;&nbsp;// Set the &#39;appname&#39; to the part named &#39;recent.item.name&#39; in the EDJ file 
&nbsp;&nbsp;&nbsp;view_set_text(item, &quot;recent.item.name&quot;, appname);
&nbsp;&nbsp;&nbsp;view_set_image(item, &quot;recent.item.image&quot;, img_path);
&nbsp;&nbsp;&nbsp;// Register a callback function to be called on the &quot;clicked&quot; event
&nbsp;&nbsp;&nbsp;view_set_customized_event_callback(item, &quot;clicked&quot;, &quot;delete_button&quot;, delete_btn_clicked_cb, box);
&nbsp;&nbsp;&nbsp;// Add an item to the box to manage it easily
&nbsp;&nbsp;&nbsp;view_set_item_to_box(box, item);
&nbsp;&nbsp;&nbsp;// Create a circular index to display the index of the items
&nbsp;&nbsp;&nbsp;view_add_circular_index(i, data_get_screenshot_count());
}
</pre>

<p>The following figure illustrates the scroller, box, and items.</p>

<p class="figure">Figure: Scroller and box on the left, and items in the box on the right</p>
<p align="center"><img src="../images/taskmanager_scrollerbox_wearable_sd.png" alt="Scroller and box" /> <img src="../images/taskmanager_scrollerboxitem_wearable_sd.png" alt="Scroller, box, and item" /></p>

<h4>Index Layout</h4>

<p>The index is located at the top of the screen, as illustrated in the following figure.</p>
<p class="figure">Figure: Index</p>
<p align="center"><img src="../images/taskmanager_index_wearable_sd.png" alt="Index" /></p>


<p>To display the index location of the current item, prepare the circular index:</p>

<ul>
<li>Set a full screen size for the <span style="font-family: Courier New,Courier,monospace">task.item.index</span> part.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">elm_object_style_set()</span> function calculates the position based on the full screen size and determines the proper position for the circular index.</li>
</ul>
<pre class="prettyprint">
view_create_circular_index(layout, &quot;task.item.index&quot;);

void 
view_create_circular_index(Evas_Object *parent, char *part_name)
{
&nbsp;&nbsp;&nbsp;s_info.index = elm_index_add(parent);
&nbsp;&nbsp;&nbsp;elm_object_style_set(s_info.index, &quot;circle&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.index, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.index, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_index_horizontal_set(s_info.index, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_index_autohide_disabled_set(s_info.index, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(parent, part_name, s_info.index);
}
</pre> 

<p>After preparing the index, add an index entry whenever a new item is created:</p>
<pre class="prettyprint">
view_add_circular_index(i, data_get_screenshot_count());
</pre>

<h4>Bottom Button Layout</h4> 

<p>The bottom button is located at the bottom of the screen, and used to close all items at once.</p>
<p>In this sample application, however, the <strong>CLOSE ALL</strong> button is clicked, the screen is overwritten with the empty page instead of removing all items.</p>
<p class="figure">Figure: CLOSE ALL button</p>
<p align="center"><img src="../images/taskmanager_bottom_btn_wearable_sd.png" alt="CLOSE ALL button" /></p>

<p>Create the button with the <span style="font-family: Courier New,Courier,monospace">view_set_button()</span> function. The parameters in the following example create the <span style="font-family: Courier New,Courier,monospace">bottom</span> button style, write the <span style="font-family: Courier New,Courier,monospace">CLOSE ALL</span> text on
the button, register the <span style="font-family: Courier New,Courier,monospace">clicked_cb()</span> callback to be called on a click event, and insert the button in the <span style="font-family: Courier New,Courier,monospace">task.del.all.btn</span> part:</p>
<pre class="prettyprint">
iew_set_button(layout, &quot;task.del.all.btn&quot;, &quot;bottom&quot;, NULL, &quot;CLOSE ALL&quot;, NULL, NULL, clicked_cb, layout);
</pre>

<h4>Empty Page Layout</h4>

<p>The <span style="font-family: Courier New,Courier,monospace">no_apps_page</span> part is an empty page that is displayed when no items exist.</p>

<p class="figure">Figure: Empty page</p>
<p align="center"><img src="../images/taskmanager_recent_apps_wearable_sd.png" alt="Empty page" /></p>

<p>The page layout consists of 2 text parts and 1 image part, as illustrated in the following figure.</p>
<p class="figure">Figure: View frame for the empty page</p>
<p align="center"><img src="../images/taskmanager_noapps_wearable_sd.png" alt="View frame for the empty page" /></p>

<p>To create the <span style="font-family: Courier New,Courier,monospace">no_apps_page</span> empty page, use the <span style="font-family: Courier New,Courier,monospace">GRP_NOAPPS</span> group in the <span style="font-family: Courier New,Courier,monospace">edj_path</span> file and create the layout in the <span style="font-family: Courier New,Courier,monospace">PART_NOAPPS</span> part:</p>
<pre class="prettyprint">
no_apps_page = view_create_layout_for_part(layout, edj_path, GRP_NOAPPS, PART_NOAPPS);
</pre>

<p>In this case, the <span style="font-family: Courier New,Courier,monospace">task.title.txt</span> and <span style="font-family: Courier New,Courier,monospace">task.noapps.txt</span> parts are not changed. When making the EDJ file, these texts are already written in each part.</p>

<pre class="prettyprint">
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;task.title.txt&quot;;
&nbsp;&nbsp;&nbsp;type: TEXTBLOCK;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1.relative: 64/360 51/360;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2.relative: 296/360 90/360;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.5 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style: style_recent_title;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 0 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text: &quot;Recent apps&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.5 0.5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 18 180 255 255;
&nbsp;&nbsp;&nbsp;}
}
</pre>


<h3>Deleting Items and Synchronizing the Index</h3> 

<p>When the delete button of an item is clicked, the <span style="font-family: Courier New,Courier,monospace">delete_btn_clicked_cb()</span> callback is triggered:</p>
<ol>
<li>From the <span style="font-family: Courier New,Courier,monospace">elm_box_children_get()</span> function, get the list of items in the <span style="font-family: Courier New,Courier,monospace">box</span>.</li>
<li>Search the list to find the clicked item.</li>
<li>If the item is found, unpack it from the box and delete it using the <span style="font-family: Courier New,Courier,monospace">elm_box_unpack()</span> and <span style="font-family: Courier New,Courier,monospace">evas_object_del()</span> functions in this order.</li>
</ol>
<pre class="prettyprint">
static void 
delete_btn_clicked_cb(void *data, Evas_Object *obj, const char *emission, const char *source)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box = data;
&nbsp;&nbsp;&nbsp;Eina_List *children;
&nbsp;&nbsp;&nbsp;Evas_Object *child;
&nbsp;&nbsp;&nbsp;int idx = -1;
&nbsp;&nbsp;&nbsp;int i = 0;
&nbsp;&nbsp;&nbsp;int num_item = 0;

&nbsp;&nbsp;&nbsp;children = elm_box_children_get(box);
&nbsp;&nbsp;&nbsp;num_item = eina_list_count(children) - 2;

&nbsp;&nbsp;&nbsp;EINA_LIST_FREE(children, child) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (child == obj) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idx = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i++;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_box_unpack(box, obj);
&nbsp;&nbsp;&nbsp;evas_object_del(obj);
</pre>

<p>Whenever an item is added or deleted, the index must be updated accordingly. This operation is conducted by 2 functions called in the <span style="font-family: Courier New,Courier,monospace">delete_btn_clicked_cb()</span> callback:</p>

<ul><li>The <span style="font-family: Courier New,Courier,monospace">view_update_index()</span> function deletes the index, and adds all the items in the box to the index.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">view_sync_index_with_item()</span> function highlights the index according to the current item.</li></ul>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;view_update_index(data_get_screenshot_count());

&nbsp;&nbsp;&nbsp;if (idx == num_item) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idx = idx - 2;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;idx = idx - 1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;view_sync_index_with_item(idx);
}
</pre>

<h3>Customizing Event Signals</h3>

<p>You can customize the event signal invoked by the EDJ file, as shown in the following example.</p>

<p>Set the program in the EDJ file to trigger a click event to the delete button named <span style="font-family: Courier New,Courier,monospace">delete.item.del</span>. This means, if the <span style="font-family: Courier New,Courier,monospace">mouse,clicked</span> event is detected from the <span style="font-family: Courier New,Courier,monospace">recent.item.del</span> part, the <span style="font-family: Courier New,Courier,monospace">clicked</span> signal is sent with the <span style="font-family: Courier New,Courier,monospace">delete_button</span> source.</p>

<pre class="prettyprint">
part 
{ 
&nbsp;&nbsp;&nbsp;name: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;type: IMAGE;
&nbsp;&nbsp;&nbsp;mouse_events: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: (216-63)/216 0; to: &quot;recent.item.image&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 216/216 63/216; to: &quot;recent.item.image&quot;;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.normal: &quot;b_recent_widget_del_icon.png&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 255;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;pressed&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 184 46 46 127;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;closeall&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max: 40 40;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 255 255 255 0;
&nbsp;&nbsp;&nbsp;}
}

programs 
{
&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;delete.clicked&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: &quot;mouse,clicked,1&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: &quot;recent.item.del&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;clicked&quot; &quot;delete_button&quot;;
&nbsp;&nbsp;&nbsp;}
}
</pre>


<p>To receive this signal, register a callback function to the item to be called when the signal is detected:</p>
<pre class="prettyprint">
view_set_customized_event_callback(item, &quot;clicked&quot;, &quot;delete_button&quot;, delete_btn_clicked_cb, box);
</pre>
<p>This means that if the <span style="font-family: Courier New,Courier,monospace">clicked</span> signal is detected with the <span style="font-family: Courier New,Courier,monospace">delete_button</span> source, the <span style="font-family: Courier New,Courier,monospace">_delete_btn_clicked_cb()</span> callback is triggered.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">clicked</span> signal and the <span style="font-family: Courier New,Courier,monospace">delete_button</span> source are an appointment between C file and EDJ file, and you can customize the signal and source freely.</p>



<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>

