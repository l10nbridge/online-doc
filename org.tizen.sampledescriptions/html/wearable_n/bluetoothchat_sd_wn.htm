<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>(Circle) Bluetooth Chat Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wearable_s_n.png"/></p>
	</div>

  <h1>(Circle) Bluetooth Chat Sample Overview</h1> 

<p>The (Circle) Bluetooth Chat sample application demonstrates how you can send and receive data between 2 devices.</p> 

<p>The following figure illustrates the main screens of the (Circle) Bluetooth Chat application.</p>
<p class="figure">Figure: (Circle) Bluetooth Chat screens</p>
<p align="center"><img alt="(Circle) Bluetooth Chat screens" src="../images/bluetoothchat_circle_sd.png" /></p>
  
<p>The main screen has 2 buttons for finding devices (<strong>Search friends</strong>) and creating a server (<strong>Wait a friend</strong>). The chat room screen is created with the <a href="../mobile_n/ui_message_bubble_sd_mn.htm">[UI Sample] MessageBubble</a> sample application.</p>  
  
 <h2>Implementation</h2>
 
<h3>Client</h3>
<p>To start the client application, click <strong>Search friends</strong>. The client draws its own layout (list of found devices) with the <span style="font-family: Courier New,Courier,monospace">_search_layout_create()</span> function.</p>

<p>While drawing the list, the application starts finding devices with the <span style="font-family: Courier New,Courier,monospace">_discovery_start()</span> function. Set the device discovery state changed callback, and the list updates whenever a new device is found.</p>

<pre class="prettyprint">
static void 
_search_layout_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ret_if(!ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;navi);

&nbsp;&nbsp;&nbsp;ad-&gt;role = BT_SOCKET_CLIENT;

&nbsp;&nbsp;&nbsp;s_info.list = elm_list_add(ad-&gt;navi);
&nbsp;&nbsp;&nbsp;ret_if(!s_info.list);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(s_info.list, EVAS_CALLBACK_DEL, _on_search_del_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.list, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.list, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_list_go(s_info.list);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(ad-&gt;navi, &quot;Search Friends&quot;, NULL, NULL, s_info.list, NULL);

&nbsp;&nbsp;&nbsp;ret = bt_socket_set_connection_state_changed_cb(_socket_conn_state_changed_cb, ad);
&nbsp;&nbsp;&nbsp;ret_if(ret != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;_discovery_start(ad);
}
</pre>

<p>If you click an item on the list, the application starts to bond with the target device, and requests to connect to the target server. When successfully connected with the target, the <span style="font-family: Courier New,Courier,monospace">_socket_conn_state_changed_cb()</span> function is called and the application moves to the chat room layout for chatting.</p>
<pre class="prettyprint">
static void 
_socket_conn_state_changed_cb(int result, bt_socket_connection_state_e connection_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_socket_connection_s *connection, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)user_data;
&nbsp;&nbsp;&nbsp;ret_if(!ad);

&nbsp;&nbsp;&nbsp;ret_if(result != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;if (connection_state == BT_SOCKET_CONNECTED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (connection != NULL) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_D(&quot;Connected %d %d&quot;, ad-&gt;socket_fd, connection-&gt;socket_fd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;role = connection-&gt;local_role;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;socket_fd = connection-&gt;socket_fd;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_chat_room_layout_create(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s_info.noti) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.noti);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.noti = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_D(&quot;No connection data&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;socket_fd = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_D(&quot;Disconnected&quot;);
&nbsp;&nbsp;&nbsp;}
}

static void 
_device_bond_created_cb(int result, bt_device_info_s *device_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;if (result != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Failed result: %d&quot;, result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto DEL_NOTI;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (device_info != NULL &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!strncmp(device_info-&gt;remote_address, s_info.info-&gt;remote_address, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strlen(device_info-&gt;remote_address))) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = bt_socket_connect_rfcomm(s_info.info-&gt;remote_address, BT_MGR_UUID);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;[bt_socket_listen_and_accept_rfcomm] Failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto DEL_NOTI;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_D(&quot;[bond create cb] Bonded with another device&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;goto DEL_NOTI;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;DEL_NOTI:

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s_info.noti) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.noti);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.noti = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
}
</pre>

<h3>Server</h3>
<p>To start the server application, click <strong>Wait a friend</strong>. The role of this application is to create a server for chatting, and wait for a client. Before drawing the proper layout, it checks whether the device is discoverable using the <span style="font-family: Courier New,Courier,monospace">_server_create()</span> function.</p>
<pre class="prettyprint">
static void 
_server_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;int server_socket_fd = -1;
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ret = bt_socket_create_rfcomm(BT_MGR_UUID, &amp;server_socket_fd);
&nbsp;&nbsp;&nbsp;ret_if(ret != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;ad-&gt;server_socket_fd = server_socket_fd;
&nbsp;&nbsp;&nbsp;_D(&quot;[bt_socket_create_rfcomm] socket %d&quot;, server_socket_fd);

&nbsp;&nbsp;&nbsp;ret = bt_socket_set_connection_state_changed_cb(_socket_conn_state_changed_cb, ad);
&nbsp;&nbsp;&nbsp;ret_if(ret != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;ret = bt_socket_listen_and_accept_rfcomm(server_socket_fd, MAX_NUM_PENDING);
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;[bt_socket_listen_and_accept_rfcomm] Failed&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The server application also registers a callback for detecting the state of the socket connection. The callback function is the same as that of the client. The application creates a server, and when the socket connection is established, it moves to the chat room layout.</p>
<pre class="prettyprint">
static void 
_server_layout_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *progress = NULL;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *navi_it = NULL;
&nbsp;&nbsp;&nbsp;char edj_path[PATH_MAX] = { 0, };

&nbsp;&nbsp;&nbsp;ad-&gt;role = BT_SOCKET_SERVER;

&nbsp;&nbsp;&nbsp;app_resource_get(CREATE_SERVER, edj_path, (int)PATH_MAX);
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;navi);
&nbsp;&nbsp;&nbsp;goto_if(!layout, ERROR);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, edj_path, &quot;create_server&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, EVAS_HINT_FILL, 0.5);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;progress = elm_progressbar_add(layout);
&nbsp;&nbsp;&nbsp;elm_object_style_set(progress, &quot;process/popup/small&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(progress, EVAS_HINT_FILL, 0.5);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(progress, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_progressbar_pulse(progress, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_show(progress);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;progress&quot;, progress);

&nbsp;&nbsp;&nbsp;navi_it = elm_naviframe_item_push(ad-&gt;navi, &quot;Wait a Friend&quot;, NULL, NULL, layout, NULL);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_title_enabled_set(navi_it, EINA_FALSE, EINA_FALSE);

&nbsp;&nbsp;&nbsp;_server_create(ad);

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Failed to create server layout&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (layout) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layout = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (progress) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
}
</pre>

<h3>Chat Room</h3>
<p>To implement the chat room layout and send a message:</p>
<ol>

<li>Draw the layout:
<pre class="prettyprint">
static Evas_Object *
_main_view_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *input_field = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *btn_send = NULL;
&nbsp;&nbsp;&nbsp;char edj_path[PATH_MAX] = { 0, };

&nbsp;&nbsp;&nbsp;retv_if(!ad, NULL);

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;navi);
&nbsp;&nbsp;&nbsp;goto_if(!layout, ERROR);
&nbsp;&nbsp;&nbsp;app_resource_get(EDJ_FILE, edj_path, (int)PATH_MAX);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, edj_path, &quot;chat_room&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(layout);

&nbsp;&nbsp;&nbsp;s_info.bubble_scroller = elm_scroller_add(layout);
&nbsp;&nbsp;&nbsp;goto_if(!s_info.bubble_scroller, ERROR);
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(s_info.bubble_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.bubble_scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.bubble_scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.bubble_scroller);

&nbsp;&nbsp;&nbsp;s_info.bubble_box = elm_box_add(s_info.bubble_scroller);
&nbsp;&nbsp;&nbsp;goto_if(!s_info.bubble_box, ERROR);
&nbsp;&nbsp;&nbsp;elm_box_align_set(s_info.bubble_box, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.bubble_box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.bubble_box, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.bubble_box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(s_info.bubble_box, ELM_SCALE_SIZE(10), ELM_SCALE_SIZE(15));
&nbsp;&nbsp;&nbsp;elm_object_content_set(s_info.bubble_scroller, s_info.bubble_box);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;sw.scroller&quot;, s_info.bubble_scroller);

&nbsp;&nbsp;&nbsp;s_info.input_field_entry = elm_entry_add(layout);
&nbsp;&nbsp;&nbsp;goto_if(!s_info.input_field_entry, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(s_info.input_field_entry, &quot;elm.guide&quot;, &quot;Enter Message&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.input_field_entry, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.input_field_entry, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.input_field_entry);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;sw.entry&quot;, s_info.input_field_entry);

&nbsp;&nbsp;&nbsp;btn_send = elm_button_add(layout);
&nbsp;&nbsp;&nbsp;goto_if(!btn_send, ERROR);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(btn_send, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(btn_send, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn_send, &quot;SEND&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn_send, &quot;clicked&quot;, _send_button_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_show(btn_send);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;sw.btn.send&quot;, btn_send);

&nbsp;&nbsp;&nbsp;return layout;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (layout) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;layout = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (input_field) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(input_field);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_field = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
}

static void 
_on_main_scroller_del_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;if (s_info.main_box) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.main_box);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.main_box = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (s_info.bubble_scroller) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.bubble_scroller);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.bubble_scroller = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (s_info.bubble_box) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.bubble_box);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.bubble_box = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (s_info.input_field_entry) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_info.input_field_entry);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.input_field_entry = NULL;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Manage the connection state changes:

<pre class="prettyprint">
static void 
_socket_conn_state_changed_cb(int result, bt_socket_connection_state_e connection_state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_socket_connection_s *connection, void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *noti = NULL;
&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;ad = (appdata_s *)user_data;
&nbsp;&nbsp;&nbsp;ret_if(!ad);
&nbsp;&nbsp;&nbsp;ret_if(result != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;_D(&quot;[_socket_conn_state_changed_cb] Changed&quot;);

&nbsp;&nbsp;&nbsp;if (connection_state == BT_SOCKET_DISCONNECTED) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_I(&quot;[_socket_conn_state_changed_cb] Disconnected&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;socket_fd = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noti = bt_noti_popup_create(ad-&gt;navi, &quot;Disconnected with the Friend&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!noti) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Failed to create popup noti&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Receive the data:
<pre class="prettyprint">
static void 
_socket_data_received_cb(bt_socket_received_data_s *data, void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bubble_table = NULL;
&nbsp;&nbsp;&nbsp;char *message = NULL;

&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;message = strndup(data-&gt;data, data-&gt;data_size);
&nbsp;&nbsp;&nbsp;goto_if(!message, ERROR);

&nbsp;&nbsp;&nbsp;bubble_table = _bubble_table_create(s_info.bubble_box, MESSAGE_BUBBLE_RECEIVE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message, _current_time_get());
&nbsp;&nbsp;&nbsp;goto_if(!bubble_table, ERROR);

&nbsp;&nbsp;&nbsp;evas_object_show(bubble_table);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(s_info.bubble_box, bubble_table);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(s_info.bubble_box, EVAS_CALLBACK_RESIZE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_bubble_box_resize_cb, NULL);

&nbsp;&nbsp;&nbsp;free(message);

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (bubble_table) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(bubble_table);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubble_table = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (message) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
<li>The chat room is created by calling the <span style="font-family: Courier New,Courier,monospace">bt_chat_room_layout_create()</span> function. The function draws the layout for chatting, and unsets and re-registers the callback for the connection state change. It also registers the data received callback. When the message is received from the target, the application makes a message bubble for the new message.
<pre class="prettyprint">
void 
bt_chat_room_layout_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *main_scroller = NULL;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *navi_it = NULL;
&nbsp;&nbsp;&nbsp;int ret = -1;

&nbsp;&nbsp;&nbsp;bt_socket_set_data_received_cb(_socket_data_received_cb, NULL);

&nbsp;&nbsp;&nbsp;ret = bt_socket_unset_connection_state_changed_cb();
&nbsp;&nbsp;&nbsp;ret_if(ret != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;ret = bt_socket_set_connection_state_changed_cb(_socket_conn_state_changed_cb, ad);
&nbsp;&nbsp;&nbsp;ret_if(ret != BT_ERROR_NONE);

&nbsp;&nbsp;&nbsp;main_scroller = _main_view_create(ad);
&nbsp;&nbsp;&nbsp;ret_if(!main_scroller);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(main_scroller, EVAS_CALLBACK_DEL, _on_main_scroller_del_cb, NULL);
&nbsp;&nbsp;&nbsp;navi_it = elm_naviframe_item_push(ad-&gt;navi, &quot;Chatting&quot;, NULL, NULL, main_scroller, NULL);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_title_enabled_set(navi_it, EINA_FALSE, EINA_FALSE);
}
</pre>
</li>

<li>Send a message:
<pre class="prettyprint">
static void 
_message_send(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bubble_table = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *noti = NULL;
&nbsp;&nbsp;&nbsp;const char *main_text = NULL;
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ret_if(!ad);
&nbsp;&nbsp;&nbsp;ret_if(!s_info.input_field_entry);

&nbsp;&nbsp;&nbsp;main_text = elm_entry_entry_get(s_info.input_field_entry);
&nbsp;&nbsp;&nbsp;ret_if(!main_text || (strlen(main_text) == 0));

&nbsp;&nbsp;&nbsp;ret = bt_socket_send_data(ad-&gt;socket_fd, main_text, strlen(main_text)+1);
&nbsp;&nbsp;&nbsp;if (ret == -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;[bt_socket_send_data] send to fail : %s&quot;, main_text);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;noti = bt_noti_popup_create(ad-&gt;navi, &quot;Send Failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!noti) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Failed to create popup noti&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubble_table = _bubble_table_create(s_info.bubble_box, MESSAGE_BUBBLE_SENT, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_entry_entry_get(s_info.input_field_entry), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_current_time_get());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret_if(!bubble_table);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(bubble_table);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_box_pack_end(s_info.bubble_box, bubble_table);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_entry_entry_set(s_info.input_field_entry, &quot;&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(s_info.bubble_box, EVAS_CALLBACK_RESIZE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_bubble_box_resize_cb, NULL);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>When the user clicks <strong>SEND</strong>, the message in the input area is sent to the target device. If the sending succeeds, the application makes a message bubble for the sent message.</p>
<pre class="prettyprint">
static void 
_send_button_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;
&nbsp;&nbsp;&nbsp;ret_if(!ad);

&nbsp;&nbsp;&nbsp;_message_send(ad);
}
</pre>
</li>
</ol>




<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>