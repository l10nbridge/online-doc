<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Digital-Watch Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Wearable native" src="../images/wn_icon.png"/></p>
	</div>

  <h1>Digital-Watch Sample Overview</h1> 
  
  <p>The Digital-Watch sample demonstrates how you can create a watch application using the <a href="../../../org.tizen.native.wearable.apireference/group__CAPI__WATCH__APP__MODULE.html">Watch Application</a> API.</p>
<p>The following figure illustrates the main screen of the Digital-Watch application.</p>

    <p class="figure">Figure: Digital-Watch screen</p> 
  <p align="center"><img alt="Digital-Watch screen" src="../images/digital_watch_sd_wn.png" /></p>

<p>If the Digital-Watch application is successfully installed, you can see your Digital-Watch UI in the watch setting&#39;s Clock menu.</p> 
  
<h2>Implementation</h2>

<p>To implement the watch application:</p>
<ol>
<li>Add the header file.
<p>The Watch Application API provides functions to manage the watch application life-cycle, represent the current date and time accurately, and get a watch application window. To use the functions and data types of the Watch Application API, include the <span style="font-family: Courier New,Courier,monospace;">watch_app.h</span> header file in your application:
</p>
<pre class="prettyprint">
#include &lt;watch_app.h&gt;
</pre>
</li>

<li>Add the <span style="font-family: Courier New,Courier,monospace;">watch-application</span> element to the manifest file:

<pre class="prettyprint">
&lt;watch-application appid=&quot;$(packageName)&quot; exec=&quot;$(appName)&quot; ambient-support=&quot;true&quot;&gt;
</pre>
</li>
<li>Create the main function for the watch application.
<p>An application starts with the <span style="font-family: Courier New,Courier,monospace;">main()</span> function. It initializes the watch application and starts it. The <span style="font-family: Courier New,Courier,monospace;">watch_app_main()</span> function is used to start the event loop. Before calling this function, set up the <span style="font-family: Courier New,Courier,monospace;">watch_app_lifecycle_callback_s</span> structure variable, which is passed to the function.</p>

<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;watch_app_lifecycle_callback_s event_callback = {0,};

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;

&nbsp;&nbsp;&nbsp;event_callback.time_tick = app_time_tick;
&nbsp;&nbsp;&nbsp;event_callback.ambient_tick = app_ambient_tick;
&nbsp;&nbsp;&nbsp;event_callback.ambient_changed = app_ambient_changed;

&nbsp;&nbsp;&nbsp;ret = watch_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;watch_app_main() is failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>

<li>Register life-cycle callbacks:

<pre class="prettyprint">
static bool 
app_create(int width, int height, void* user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = user_data;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};
&nbsp;&nbsp;&nbsp;watch_time_h watch_time = NULL;

&nbsp;&nbsp;&nbsp;// Register callbacks for each system event
&nbsp;&nbsp;&nbsp;if (watch_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APP_EVENT_LANGUAGE_CHANGED, lang_changed, NULL) != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;watch_app_add_event_handler () is failed&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_create_base_gui(ad);

&nbsp;&nbsp;&nbsp;_set_info_time_and_date(ad, watch_time);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Create the watch UI.
<p>After registering the event callback, you have to draw the watch UI. To do this, you need to get the window object of the idle screen and the current time handler. Using the current time handler, you can get specific time information which is displayed on the idle screen.</p>

<pre class="prettyprint">
static void 
_create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = _create_win(ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;ad-&gt;layout = _create_layout(ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;layout);

&nbsp;&nbsp;&nbsp;// Background image
&nbsp;&nbsp;&nbsp;ad-&gt;image = _create_background(ad);
}
</pre></li>

<li>Create the window.
<p>You can get the window object with the <span style="font-family: Courier New,Courier,monospace;">watch_app_get_elm_win()</span> function:</p>

<pre class="prettyprint">
static Evas_Object *
_create_win(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *win = NULL;
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ret = watch_app_get_elm_win(&amp;win);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;failed to get window. err = %d&quot;, ret);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_win_title_set(win, &quot;digital-watch&quot;);
&nbsp;&nbsp;&nbsp;elm_win_borderless_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_alpha_set(win, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(win, ELM_WIN_INDICATOR_HIDE);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(win, ELM_WIN_INDICATOR_BG_TRANSPARENT);
&nbsp;&nbsp;&nbsp;elm_win_prop_focus_skip_set(win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_role_set(win, &quot;no-effect&quot;);

&nbsp;&nbsp;&nbsp;evas_object_resize(win, ad-&gt;w, ad-&gt;h);
&nbsp;&nbsp;&nbsp;evas_object_show(win);
	
&nbsp;&nbsp;&nbsp;return win;
}
</pre></li>

<li>Create the layout using EDC:
<pre class="prettyprint">
static Evas_Object *
_create_layout(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, EDJ_FILE_PATH, &quot;layout_digital_watch&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;win, ad-&gt;layout);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(layout, ad-&gt;w, ad-&gt;h);
&nbsp;&nbsp;&nbsp;evas_object_resize(layout, ad-&gt;w, ad-&gt;h);
&nbsp;&nbsp;&nbsp;evas_object_show(layout);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre></li>

<li>Create a background image:
<pre class="prettyprint">
static Evas_Object *
_create_background(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;
&nbsp;&nbsp;&nbsp;Eina_Bool ret = EINA_TRUE;

&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;ret = elm_bg_file_set(bg, IMG_DIR&quot;bg.jpg&quot;, NULL);
&nbsp;&nbsp;&nbsp;retvm_if(!ret, NULL, &quot;Fail to set the background image&quot;);

&nbsp;&nbsp;&nbsp;elm_bg_option_set(bg, ELM_BG_OPTION_CENTER);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;bg_image&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);
	
&nbsp;&nbsp;&nbsp;return bg;
}
</pre></li>

<li>Set the time and date information.
<p>You can get the current time&#39;s <span style="font-family: Courier New,Courier,monospace;">watch_time_h</span> handle with the <span style="font-family: Courier New,Courier,monospace;">watch_time_get_current_time()</span> function:</p>

<pre class="prettyprint">
Eina_Bool 
_set_info_time_and_date(void *data, watch_time_h watch_time)
{
&nbsp;&nbsp;&nbsp;const char *DAY_OF_WEEK_STR[7] = {&quot;Sun&quot;, &quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thur&quot;, &quot;Fri&quot;, &quot;Sat&quot;};
&nbsp;&nbsp;&nbsp;const char *MONTH_STR[12] = {&quot;Jan&quot;, &quot;Feb&quot;, &quot;Mar&quot;, &quot;Apr&quot;, &quot;May&quot;, &quot;Jun&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Jul&quot;, &quot;Aug&quot;, &quot;Sept&quot;, &quot;Oct&quot;, &quot;Nov&quot;, &quot;Dec&quot;};

&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;char time_str[BUFFER_LENGTH] = {0};
&nbsp;&nbsp;&nbsp;char date_str[BUFFER_LENGTH] = {0};
&nbsp;&nbsp;&nbsp;char ampm_str[BUFFER_LENGTH] = {0};
&nbsp;&nbsp;&nbsp;char *time_str_p = NULL;
&nbsp;&nbsp;&nbsp;int hour24 = 0;
&nbsp;&nbsp;&nbsp;int minute = 0;
&nbsp;&nbsp;&nbsp;int day_of_week = 0;
&nbsp;&nbsp;&nbsp;int month = 0;
&nbsp;&nbsp;&nbsp;int day = 0 ;

&nbsp;&nbsp;&nbsp;retvm_if(!watch_time, EINA_FALSE, &quot;watch_time is NULL&quot;);
&nbsp;&nbsp;&nbsp;retvm_if(!ad, EINA_FALSE, &quot;appdata is NULL&quot;);

&nbsp;&nbsp;&nbsp;int ret = watch_time_get_current_time(&amp;watch_time);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;failed to get current time. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;watch_time_get_hour24(watch_time, &amp;hour24);
&nbsp;&nbsp;&nbsp;watch_time_get_minute(watch_time, &amp;minute);
&nbsp;&nbsp;&nbsp;watch_time_get_day_of_week(watch_time, &amp;day_of_week);
&nbsp;&nbsp;&nbsp;watch_time_get_month(watch_time, &amp;month);
&nbsp;&nbsp;&nbsp;watch_time_get_day(watch_time, &amp;day);

&nbsp;&nbsp;&nbsp;// Time
&nbsp;&nbsp;&nbsp;if (hour24 &gt;= 0 &amp;&amp; hour24 &lt; 12) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(ampm_str, sizeof(ampm_str), &quot;%s&quot;, &quot;AM&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(ampm_str, sizeof(ampm_str), &quot;%s&quot;, &quot;PM&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;sprintf(time_str, &quot;%d:%02d&quot;, hour24%12, minute);
&nbsp;&nbsp;&nbsp;time_str_p = g_strdup_printf(&quot;%s&lt;font_size=24&gt;&lt;font=Tizen:style=Bold&gt;%s&lt;/font&gt;&lt;/font_size&gt;&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_str, ampm_str);

&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;layout, &quot;textblock_time&quot;, time_str_p);

&nbsp;&nbsp;&nbsp;if (!time_str_p) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_free(time_str_p);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Date
&nbsp;&nbsp;&nbsp;sprintf(date_str, &quot;%s %d %s&quot;, DAY_OF_WEEK_STR[day_of_week-1], day, MONTH_STR[month-1]);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;layout, &quot;default_text_date&quot;, date_str);

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}
</pre></li>

<li>Add the time tick and ambient tick callbacks. 
<p>The time tick callback is called at least once per second. Watch applications can get the current time from the <span style="font-family: Courier New,Courier,monospace;">watch_time</span> handle and draw the normal watch UI. The ambient tick callback is called at least once per minute, or when the device enters the ambient mode.</p>

<pre class="prettyprint">
void 
app_time_tick(watch_time_h watch_time, void* user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = user_data;

&nbsp;&nbsp;&nbsp;_set_info_time_and_date(ad, watch_time);
}

void 
app_ambient_tick(watch_time_h watch_time, void* user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = user_data;

&nbsp;&nbsp;&nbsp;_set_info_time_and_date(ad, watch_time);
}
</pre>
</li>
</ol>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>