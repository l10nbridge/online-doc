<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/snippet.css" />
    <script type="text/javascript" src="../scripts/snippet.js"></script>
    <script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
    <title>FileManager Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Related Info</p>
        <ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/input_output/filesystem_w.htm">Filesystem Guide</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/filesystem.html">Filesystem API</a></li> 
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>FileManager Sample Overview</h1>

<p>The FileManager sample application demonstrates how you can read and modify the content of the device file system.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the FileManager.</p>
<p class="figure">Figure: FileManager screens</p>
<p align="center"><img alt="FileManager screens" src="../images/filemanager_ww.png" /></p>
<p>The application opens with the main screen that shows the available storages. You can select a storage to browse the storage content (folders and files).</p>

<p>On a files page, you can open the menu to perform various operations:</p>

<ul>
<li>Create new folders or files</li>
<li>Rename folders or files</li>
<li>Delete folders or files</li>
<li>Copy, cut, and paste files</li>
<li>Display information about a file</li>
<li>Open the breadcrumb navigation mode</li>
</ul>

<p>To open a file, select it from the screen.</p>

  <h2>Prerequisites</h2> 
  <p>To ensure proper application execution, the following privileges must be set:</p>
  <ul><li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/filesystem.write</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/filesystem.read</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/application.launch</span></li></ul>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<p>The application uses a simple MV (Model View) architecture, where the core part determines the architecture and the app part determines the application behavior. The <span style="font-family: Courier New,Courier,monospace">core.js</span> file implements a simple AMD (Asynchronous Module Definition) and specifies module defining.</p>

<table border="1">
    <tbody>
        <tr>
            <th>File name</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
            <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">css/</span></td>
            <td>This directory contains the CSS styling for the application UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
            <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/</span></td>
            <td>This directory contains the application code.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td>
            <td>This directory contains the application framework.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/helpers/</span></td>
            <td>This directory contains the helper functions for the DOM manipulation.</td>
        </tr>		
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/models/</span></td>
            <td>This directory contains the application model modules.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td>
            <td>This directory contains the files that implement the application views.</td>
        </tr>
    </tbody>
</table>


<h2>Implementation</h2>

<h3>Defining the Application Layout</h3>

<p>To define the application layout:</p>

<ol><li>
<p>The main page displays a list of storages found on the device. The layout consists of a header and a list, which displays the storages:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page ui-page-active&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Storages&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;

&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content content-padding&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul id=&quot;storages-list&quot; class=&quot;ui-listview&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>The storage list content is generated by the core/template module. This module generates HTML from the specified template file and an object that contains the data (in this case, the storage list). The storage list content is built from the <span style="font-family: Courier New,Courier,monospace">storages-list-content.tpl</span> template file:</p>

<pre class="prettyprint">
&lt;!--templates/storages-list-content.tpl--&gt;
&lt;li class=&quot;ui-listview-divider&quot;&gt;Internal&lt;/li&gt;
{{#internal}}
&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=&quot;#&quot; data-name=&quot;{{this.label}}&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;images/create-folder.png&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.label}}
&nbsp;&nbsp;&nbsp;&lt;/a&gt;&lt;/li&gt;
{{/internal}}
&lt;li class=&quot;ui-listview-divider&quot;&gt;External&lt;/li&gt;
{{#external}}
&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=&quot;#&quot; data-name=&quot;{{this.label}}&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;images/create-folder.png&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.label}}
&nbsp;&nbsp;&nbsp;&lt;/a&gt;&lt;/li&gt;
{{/external}}
</pre></li>


<li>
<p>The files page displays a list of files and folders located in the given folder. The page also contains a <a href="#menu">menu</a> that allows the user to perform actions on the files selected from the list (such as copying and renaming). The layout consists of a header displaying a name of the folder and a list displaying the folder and its content:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page&quot; id=&quot;files&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header ui-has-more&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Directory Name&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;button id=&quot;open-files-menu&quot; type=&quot;button&quot; class=&quot;ui-more ui-icon-overflow&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Menu
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/button&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;

&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content content-padding&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul id=&quot;file-list&quot; class=&quot;ui-listview ui-snap-listview&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;/* HERE MENU POPUPS */

&lt;/div&gt;
</pre>
<p>The file list content is built from the <span style="font-family: Courier New,Courier,monospace">file-list-content.tpl</span> template file:</p>

<pre class="prettyprint">
&lt;!--file-list-content.tpl--&gt;
{{#files}}
&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#&quot; data-directory=&quot;{{this.isDirectory}}&quot; data-name=&quot;{{this.name}}&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{?this.isDirectory}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;images/create-folder.png&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{/this.isDirectory}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{?this.isFile}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img src=&quot;images/create-file.png&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{/this.isFile}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{this.name}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;/li&gt;
{{/files}}
</pre>
<p>The layout of the page menu is designed in a different way for rectangular and circular screens. The rectangular menu is a list embedded in a popup, while the circular menu is a TAU selector component embedded in a popup:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;!--Rectangular screen menu--&gt;
&lt;div id=&quot;files-menu-square&quot; class=&quot;menu square ui-popup&quot; data-transition=&quot;slideup&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-header&quot;&gt;Menu&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-create-folder&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Create folder&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-create-file&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Create file&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-rename&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Rename&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-delete&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Delete&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-copy&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Copy&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-cut&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Cut&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-info&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Info&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a class=&quot;menu-breadcrumb&quot; href=&quot;#&quot; data-rel=&quot;back&quot;&gt;Breadcrumb&lt;/a&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
&lt;!--Circular screen menu--&gt;
&lt;div id=&quot;files-menu-circle&quot; class=&quot;menu circle ui-popup&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-selector&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-create-folder ui-item&quot; data-title=&quot;Create folder&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-create-file ui-item&quot; data-title=&quot;Create file&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-delete ui-item&quot; data-title=&quot;Delete&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-copy ui-item&quot; data-title=&quot;Copy&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-cut ui-item&quot; data-title=&quot;Cut&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-info ui-item&quot; data-title=&quot;Info&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;menu-breadcrumb ui-item&quot; data-title=&quot;Breadcrumb&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

</li>
<li>
<p>The file info page displays details about a file or folder. The layout consists of a header and a list of file properties:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page&quot; id=&quot;file-info&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header ui-header-small&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;File info&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;

&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider&quot;&gt;Name&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-name&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider&quot;&gt;Location&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-location&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider file-size&quot;&gt;Size&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-size&quot; class=&quot;file-size&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider&quot;&gt;Creation date&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-created&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider&quot;&gt;Last modification date&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-modified&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-listview-divider&quot;&gt;Read only&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li id=&quot;file-info-readonly&quot;&gt;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>
<p>The breadcrumb navigation page displays a list of parent folders of the specified file or folder:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page&quot; id=&quot;breadcrumb&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Breadcrumb navigation&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;

&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul id=&quot;navigation-list&quot; class=&quot;ui-listview&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
<p>The navigation list content is built from the <span style="font-family: Courier New,Courier,monospace">navigation-list-content.tpl</span> template file:</p>

<pre class="prettyprint">
&lt;!--navigation-list-content.tpl--&gt;
{{#items}}
&nbsp;&nbsp;&nbsp;&lt;li&gt;&lt;a href=&quot;#&quot; data-path=&quot;{{this.path}}&quot;&gt;{{this.name}}&lt;/a&gt;&lt;/li&gt;
{{/items}}
</pre></li></ol>

<h3 id="menu">Managing the Menu</h3>
<p>The user can open a menu from the files page to perform operations on the files and folders. Since a separate menu is available for rectangular and circular screens, a helpers/menu module is defined to allow both menus to be treated the same way. The module initializes the right type of menu and publishes methods to manage the menu operations.</p>

<p>To define the menu module:</p>

<ol>
<li>Define an empty module named helpers/menu and save it in the <span style="font-family: Courier New,Courier,monospace">js/helpers</span> folder.
<p>The module publishes the API consisting of the following methods:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">initializeMenu()</span>: Checks the screen type and initializes the suitable HTML menu element. This method gets the <span style="font-family: Courier New,Courier,monospace">menuHandlerId</span> parameter, which is an ID of the button that opens the popup menu.</li>
<li><span style="font-family: Courier New,Courier,monospace">bindMenuClickEventListener()</span>: Allows you to bind a callback to the specified menu item identified by the class name.</li>
<li><span style="font-family: Courier New,Courier,monospace">setItemHidden()</span>: Allows you to hide or unhide a menu item identified by its class name.</li></ul>

<pre class="prettyprint">
/* js/helpers/menu.js */
define(&#39;helpers/menu&#39;, function menu() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;function initializeMenu(page, menuHandlerId) {}

&nbsp;&nbsp;&nbsp;function bindMenuClickEventListener(className, listener) {}

&nbsp;&nbsp;&nbsp;function setItemHidden(className, isHidden) {}

&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initializeMenu: initializeMenu,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindMenuClickEventListener: bindMenuClickEventListener,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setItemHidden: setItemHidden
&nbsp;&nbsp;&nbsp;};
});
</pre>
</li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">initializeMenu()</span> method.
<p>The method retrieves the menu popup element from the DOM and registers the click event listener on the menu handler. If the button is clicked, the popup menu is opened.
For the circular screen devices, an additional initialization is made by the <span style="font-family: Courier New,Courier,monospace">initializeForCircularScreen()</span> method.</p>
<pre class="prettyprint">
/* js/helpers/menu.js */
function initializeMenu(page, menuHandlerId) 
{
&nbsp;&nbsp;&nbsp;var content = page.querySelector(&#39;.ui-content&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handlerButton = document.getElementById(menuHandlerId),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup = document.querySelector(&#39;.menu.&#39; + (tau.support.shape.circle ? &#39;circle&#39; : &#39;square&#39;));

&nbsp;&nbsp;&nbsp;handlerButton.addEventListener(&#39;click&#39;, function onClick() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.openPopup(popup);
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;if (tau.support.shape.circle) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initializeForCircularScreen(page, popup);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">initializeForCircularScreen()</span> method:
<ol type="a"><li>Define local variables:
<pre class="prettyprint">
function initializeForCircularScreen(page, popup) 
{
&nbsp;&nbsp;&nbsp;var selectorWidget = null, /* Reference to the selector component */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectorEl = popup.querySelector(&#39;.ui-selector&#39;), /* Reference to the selector in the selector component */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItems = popup.querySelectorAll(&#39;.ui-item&#39;), /* References to the menu items */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popupHideCallback = null; /* Callback executed when the menu popup is being closed */
</pre></li>
<li>Register event listeners for opening and hiding the page. When the page is opened, the selector component must be initialized. When the page is closed, the component must be destroyed.
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;page.addEventListener(&#39;pagebeforeshow&#39;, function onPageBeforeShow() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectorWidget = tau.widget.Selector(selectorEl, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemRadius: window.innerHeight / 2 * 0.8
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;page.addEventListener(&#39;pagebeforehide&#39;, function onPageBeforeHide() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectorWidget.destroy();
&nbsp;&nbsp;&nbsp;});
</pre></li>
<li>Register the event listener for the page show. 
<p>This listener is called only once, and it registers click event listeners on the menu items. When a menu item is clicked, it sets the suitable callback to be invoked. The collection of such callbacks is held in the <span style="font-family: Courier New,Courier,monospace">menuListeners</span> object, and the callbacks are added there by calling the <span style="font-family: Courier New,Courier,monospace">bindMenuClickEventListener()</span> method.</p>
<p>The menu item callback is not invoked immediately, but only under the following circumstances:</p>
<ul><li>Callback must exist (not <span style="font-family: Courier New,Courier,monospace">null</span>)</li>
<li>Item must be enabled (cannot have the hidden class)</li>
</ul>
<p>The popup is closed when the selector indicator from the selector component is clicked.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;page.addEventListener(&#39;pageshow&#39;, function onPageShow() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var indicator = popup.querySelector(&#39;.ui-selector-indicator&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indicator.addEventListener(&#39;click&#39;, function onClick() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var selectedItemId = parseInt(indicator.dataset.index, 10),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;selectedItemClassList = menuItems[selectedItemId].classList,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length = selectedItemClassList.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener = null; /* Callback that is invoked when the popup is closed */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listener = menuListeners[selectedItemClassList[i]];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeof listener === &#39;function&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!selectedItemClassList.contains(&#39;hidden&#39;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popupHideCallback = listener;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.closePopup(popup);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page.removeEventListener(&#39;pageshow&#39;, onPageShow);
&nbsp;&nbsp;&nbsp;});
</pre></li>
<li>Register the popup hide event listener:
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;popup.addEventListener(&#39;popuphide&#39;, function onPopupHide() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeof popupHideCallback === &#39;function&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popupHideCallback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popupHideCallback = null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}
</pre></li></ol></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">bindMenuClickEventListener()</span> method.
<p>First, define a map holding all click listeners on the menu items. The keys of the map are the class names of the items and values are the listener methods. This map is used in the circular screen devices. Finally, implement the method itself.</p>
<p>For the circular screen devices, the listener is added to the <span style="font-family: Courier New,Courier,monospace">menuListeners</span> map. For the rectangular screen devices, it is registered as a click event listener on the related menu item.</p>
<pre class="prettyprint">
/* js/helpers/menu.js */
var menuListeners = {};

function bindMenuClickEventListener(className, listener) 
{
&nbsp;&nbsp;&nbsp;if (tau.support.shape.circle) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuListeners[className] = listener;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector(&#39;#files-menu-square .&#39; + className).addEventListener(&#39;click&#39;, listener);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">setItemHidden()</span> method. It retrieves the menu item element from the DOM and adds or removes the hidden class from the element.
<pre class="prettyprint">
function setItemHidden(className, isHidden) 
{
&nbsp;&nbsp;&nbsp;var menuItem = null;

&nbsp;&nbsp;&nbsp;if (tau.support.shape.circle) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItem = document.getElementById(&#39;files-menu-circle&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getElementsByClassName(className)[0];
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItem = document.getElementById(&#39;files-menu-square&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getElementsByClassName(className)[0].parentNode;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!menuItem) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (isHidden) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItem.classList.add(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;menuItem.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>

<h3>Managing Storages</h3>

<p>The main page displays a list of storages. The list is refreshed and retrieved automatically when the storage list changes, for example, when an external storage is mounted:</p>

<ol>
<li>Retrieve the storage list:
<ol type="a">
<li>Storages are retrieved by calling the <span style="font-family: Courier New,Courier,monospace">tizen.filesystem.listStorages()</span> method, which uses the <span style="font-family: Courier New,Courier,monospace">getStorages()</span> method from the Core framework to return the storage list in the <span style="font-family: Courier New,Courier,monospace">Promise</span> object:

<pre class="prettyprint">
/* js/core/fs.js */
function getStorages(filter) 
{
&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.filesystem.listStorages(function getStorages(storages) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!filter) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(storages);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Filtering storages */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;});
}
</pre>
<p>All asynchronous filesystem operations in this sample are wrapped in <span style="font-family: Courier New,Courier,monospace">Promise</span> objects. For more information on <span style="font-family: Courier New,Courier,monospace">Promise</span> objects, see <a href="https://developer.mozilla.org/pl/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank">MDN Promise</a> and <a href="https://www.w3.org/2001/tag/doc/promises-guide" target="_blank">Writing Promise-Using Specifications</a>.</p>
</li>

<li>The <span style="font-family: Courier New,Courier,monospace">getStorages()</span> method is used in the models/filesystem module:
<pre class="prettyprint">
/* js/models/filesystem.js */
function getStorages() 
{
&nbsp;&nbsp;&nbsp;return fs.getStorages().then(filterStorages).then(categorizeStorages);
}
</pre>
</li>
<li>Storages are filtered and categorized after retrieval. The filtering excludes storages that are private, unmounted, or have an empty label:
<pre class="prettyprint">
/* js/models/filesystem.js */
var STORAGE_STATE_MOUNTED = &#39;MOUNTED&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;PRIVATE_STORAGES = 
&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;wgt-package&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;wgt-private&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;wgt-private-tmp&#39;
&nbsp;&nbsp;&nbsp;&nbsp;];

function filterStorages(storages) 
{
&nbsp;&nbsp;&nbsp;var result = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length = storages.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage = null;

&nbsp;&nbsp;&nbsp;for (; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage = storages[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (storage.label.length &gt; 0 &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage.state === STORAGE_STATE_MOUNTED &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PRIVATE_STORAGES.indexOf(storage.label) === -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(storage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre> 
<p>Storages are displayed on the main page in the form of 2 lists: internal and external storages. The categorization divides storages into these lists:</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
var STORAGE_TYPE_INTERNAL = &#39;INTERNAL&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;STORAGE_TYPE_EXTERNAL = &#39;EXTERNAL&#39;;

function categorizeStorages(storages) 
{
&nbsp;&nbsp;&nbsp;var external = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = storages.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage = null;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage = storages[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (storage.type === STORAGE_TYPE_INTERNAL) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal.push(storage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (storage.type === STORAGE_TYPE_EXTERNAL) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external.push(storage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;internal: internal,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;external: external
&nbsp;&nbsp;&nbsp;};
}
</pre>
</li>
</ol></li>
<li>Display the storage list on the main page:
<ol type="a">
<li>Call the <span style="font-family: Courier New,Courier,monospace">getStorages()</span> method defined above:
<pre class="prettyprint">
/* js/views/main.js */
filesystem.getStorages().then(onGetStorages, showErrorPopup);
</pre>
</li>
<li>Define the <span style="font-family: Courier New,Courier,monospace">onGetStorages()</span> callback, which was used above:
<pre class="prettyprint">
/* js/views/main.js */
function onGetStorages(storages) 
{
&nbsp;&nbsp;&nbsp;reloadStoragesList(storages);
}
</pre>
</li>
<li id="reload">Define the <span style="font-family: Courier New,Courier,monospace">reloadStoragesList()</span> method that creates HTML content of the storage list on the main page:
<pre class="prettyprint">
/* js/views/main.js */
function reloadStoragesList(storages) 
{
&nbsp;&nbsp;&nbsp;storages.foundInternals = storages.internal.length &gt; 0;
&nbsp;&nbsp;&nbsp;storages.foundExternals = storages.external.length &gt; 0; 
&nbsp;&nbsp;&nbsp;storagesList.innerHTML = template.get(&#39;storages-list-content&#39;, storages);
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">storagesList</span> variable is a reference to the storage list element on the page. This method prepares the parameter of the <span style="font-family: Courier New,Courier,monospace">storages-list-content.tpl</span> template and generates HTML content using this template. The generated content is attached to the list.</p>
</li>
</ol>
</li>
<li>Monitor storage state changes:
<ol type="a">
<li>The storages are refreshed on the page when their state changes. The storage change listener is registered in the initialization process:
<pre class="prettyprint">
/* js/models/filesystem.js */
function init() 
{
&nbsp;&nbsp;&nbsp;tizen.filesystem.addStorageStateChangeListener(onStorageStateChanged);
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace">onStorageStateChanged()</span> callback fires an event with the list of storages after change. The event is handled by the main view. 
<pre class="prettyprint">
/* js/models/filesystem.js */
var events = ...; /* Reference to the event module from the Core framework */

function onStorageStateChanged(storages) 
{
&nbsp;&nbsp;&nbsp;events.fire(&#39;storages.changed&#39;, {storages: storages});
}
</pre>
</li>
<li>To update the main page, define the listener method that handles the storage state change events. The <span style="font-family: Courier New,Courier,monospace">reloadStoragesList()</span> method was <a href="#reload">defined earlier</a>.
<pre class="prettyprint">
/* js/views/main.js  */
function onStoragesChanged(ev) 
{
&nbsp;&nbsp;&nbsp;reloadStoragesList(ev.detail);
}
</pre>
<p>The listener creates the storage list content by using the template and sets the content to the list.</p>
</li>
<li>Register the listener:
<pre class="prettyprint">
/* js/views/main.js */
events.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.filesystem.storages.changed&#39;: onStoragesChanged
});
</pre>
</li>
</ol>
</li></ol>

<h3>Navigating the File System</h3>

<p>Navigation over the file system tree is available in the files view. This view displays the content of a folder named the current folder. </p>
<p>When the user taps the folder element of the content, this folder becomes the current folder and the page is reloaded displaying its content. When the user fires the back event (by swiping the files screen from top to bottom), the files view displays the content of the parent of the current folder.</p>

<ol>
<li>Define the <span style="font-family: Courier New,Courier,monospace">js/models/state.js</span> module, which contains the application state. The application state is a set of application properties among which is the currently displayed folder path and information on whether the hidden files are supposed to be displayed.
<pre class="prettyprint">
/* js/models/state.js */
define(&#39;models/state&#39;, function state() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;var currentPath = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hiddenFilesVisible = false;

&nbsp;&nbsp;&nbsp;function setCurrentPath(path) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentPath = path;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function getCurrentPath() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return currentPath;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function setHiddenFilesVisible(visible) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hiddenFilesVisible = visible;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function getHiddenFilesVisible() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return hiddenFilesVisible;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCurrentPath: setCurrentPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getCurrentPath: getCurrentPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHiddenFilesVisible: setHiddenFilesVisible,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getHiddenFilesVisible: getHiddenFilesVisible
&nbsp;&nbsp;&nbsp;};
});
</pre>
</li>
<li>Get the list of files using the <span style="font-family: Courier New,Courier,monospace">getFiles()</span> method from the models/filesystem module:
<pre class="prettyprint">
/* js/models/filesystem.js */
function getFiles(path, includeHiddenFiles) 
{
&nbsp;&nbsp;&nbsp;return getDirectory(path).then(function onGetFileListHandler(dir) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return listFiles(dir, !!includeHiddenFiles);
&nbsp;&nbsp;&nbsp;});
}
</pre>
<p>The method gets as input parameters the path of the folder and the flag indicating whether hidden files are included.</p></li>
<li>The <span style="font-family: Courier New,Courier,monospace">getDirectory()</span> method is used to obtain the <span style="font-family: Courier New,Courier,monospace">File</span> instance of the folder containing the desired files. This method calls the <span style="font-family: Courier New,Courier,monospace">resolveFile()</span> method from the Core framework:
<pre class="prettyprint">
/* js/models/filesystem.js */
function getDirectory(path) 
{
&nbsp;&nbsp;&nbsp;return fs.resolveFile(path);
}

/* js/core/fs.js */
function resolveFile(path, openMode) 
{
&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.filesystem.resolve(path, resolve, reject, openMode || &#39;rw&#39;);
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li>
<li>When you have the <span style="font-family: Courier New,Courier,monospace">File</span> instance of the folder, the <span style="font-family: Courier New,Courier,monospace">getFiles()</span> method calls the <span style="font-family: Courier New,Courier,monospace">listFiles()</span> method that retrieves the files from this folder and filters them:
<pre class="prettyprint">
/* js/models/filesystem.js */
function listFiles(directory, includeHiddenFiles) 
{
&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directory.listFiles(resolve, reject);
&nbsp;&nbsp;&nbsp;}).then(function onGetFiles(files) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filterFiles(files, includeHiddenFiles);
&nbsp;&nbsp;&nbsp;});
}
</pre>

</li>
<li>Define the <span style="font-family: Courier New,Courier,monospace">filterFiles()</span> method that returns the specified filtered files array. The filtering consists of excluding files that have a name equal to an empty string and those that are hidden (their name starts with a dot), if the second input parameter of the method equals <span style="font-family: Courier New,Courier,monospace">false</span>.
<pre class="prettyprint">
/* js/models/filesystem.js */
function filterFiles(files, includeHiddenFiles) 
{
&nbsp;&nbsp;&nbsp;var result = [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length = files.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = null;

&nbsp;&nbsp;&nbsp;for (; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = files[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (file.name !== &#39;&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(includeHiddenFiles || file.name.charAt(0) !== &#39;.&#39;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
<p>Afterwards, pass the filter objects to the files view.</p>
</li>
<li>Display the files of a folder on the screen:
<ol type="a"><li>Define the <span style="font-family: Courier New,Courier,monospace">reloadPage()</span> method in the files view module. This method gets the files of the currently displayed folder (the path is held by the models/state module) and renders them in the file list.
<pre class="prettyprint">
/* js/views/files.js */
function reloadPage() 
{
&nbsp;&nbsp;&nbsp;filesystem
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getFiles(state.getCurrentPath(), state.getHiddenFilesVisible())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(onGetFilesSuccess, onGetFilesError);
}
</pre>
<p>In the above method, the <span style="font-family: Courier New,Courier,monospace">filesystem</span> variable is a reference to the models/filesystem module and the <span style="font-family: Courier New,Courier,monospace">state</span> variable is a reference to the models/state module.</p>
</li>
<li>Define the <span style="font-family: Courier New,Courier,monospace">onGetFilesSuccess()</span> callback that sorts the received files and calls the <span style="font-family: Courier New,Courier,monospace">reloadFileList()</span> method to render the files in the list:
<pre class="prettyprint">
/* js/views/files.js */
var files = [];

function onGetFilesSuccess(result) 
{
&nbsp;&nbsp;&nbsp;files = result.sort(compareFiles);

&nbsp;&nbsp;&nbsp;reloadFileList();
}

function reloadFileList() 
{
&nbsp;&nbsp;&nbsp;fileList.innerHTML = template.get(&#39;file-list-content&#39;, {files: files});
}
</pre></li></ol>
</li>
<li>Open a folder when the user clicks on it:
<ol type="a"><li>Add the click event listener on the file list:
<pre class="prettyprint">
/* js/views/files.js */
fileList.addEventListener(&#39;click&#39;, onFileListClick);

function onFileListClick(ev) 
{
&nbsp;&nbsp;&nbsp;onListElementClick(ev);
}
</pre></li>
<li>Implement a method that is called when the list item is clicked. This method checks whether the clicked item has the <span style="font-family: Courier New,Courier,monospace">data-directory</span> attribute set to <span style="font-family: Courier New,Courier,monospace">true</span>. If so, the folder referred by this item is opened by the <span style="font-family: Courier New,Courier,monospace">openDirectory()</span> method.
<pre class="prettyprint">
/* js/views/files.js */
function onListElementClick(ev) 
{
&nbsp;&nbsp;&nbsp;var anchor = dom.findClosestElementByTag(ev.target, &#39;A&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = null;

&nbsp;&nbsp;&nbsp;if (anchor) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = anchor.dataset.name;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (anchor.dataset.directory === &#39;true&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;openDirectory(name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{}
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">openDirectory()</span> method. This method sets the current folder path in the application state and reloads the page using the <span style="font-family: Courier New,Courier,monospace">reloadPage()</span> method described previously.
<pre class="prettyprint">
/* js/views/files.js */
function openDirectory(name) 
{
&nbsp;&nbsp;&nbsp;state.setCurrentPath(getNodePath(name));
&nbsp;&nbsp;&nbsp;reloadPage();
}
</pre></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">getNodePath()</span> helper method that obtains a file or folder name as an input parameter and returns the full path of this item by concatenating the current folder path with this name:
<pre class="prettyprint">
/* js/views/files.js */
function getNodePath(fileName) 
{
&nbsp;&nbsp;&nbsp;return state.getCurrentPath() + filesystem.SEPARATOR + fileName;
}
</pre>
</li></ol>

</li>
</ol>

<h3>Creating Files and Folders</h3>

<p>To create files and folders, use the <span style="font-family: Courier New,Courier,monospace">createFile()</span> and <span style="font-family: Courier New,Courier,monospace">createDirectory()</span> methods from the models/filesystem module:</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function createFile(path) 
{
&nbsp;&nbsp;&nbsp;var directory = fs.getDirectoryPath(path),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = fs.basename(path);

&nbsp;&nbsp;&nbsp;return getDirectory(directory).then(function onGetDirectoryHandler(directory) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return directory.createFile(filename);
&nbsp;&nbsp;&nbsp;});
}

function createDirectory(path) 
{
&nbsp;&nbsp;&nbsp;var directory = fs.getDirectoryPath(path),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = fs.basename(path);

&nbsp;&nbsp;&nbsp;return getDirectory(directory).then(function onGetDirectoryHandler(dir) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dir.createDirectory(name);
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>The above methods get a full path of the node that is to be created and return a <span style="font-family: Courier New,Courier,monospace">Promise</span> object that creates the node. To create a node, its parent folder is resolved by the <span style="font-family: Courier New,Courier,monospace">getDirectory()</span> method and the <span style="font-family: Courier New,Courier,monospace">createFile()</span> or <span style="font-family: Courier New,Courier,monospace">createDirectory()</span> method from the Filesystem API if called on the parent folder object.</p>

<p>For devices not supporting a virtual keyboard, the name of the created file or folder cannot be chosen by the user. In that case, the name is generated by the models/filesystem module. The generated name must be unique in the folder, where the file is placed. The generation is made by the <span style="font-family: Courier New,Courier,monospace">generateName()</span> method:</p>

<ol><li>The <span style="font-family: Courier New,Courier,monospace">generateName()</span> method gets as an input parameter a path of the file or folder that is supposed to be created. For the file creation, its name is initially &quot;File&quot; so the path must be <span style="font-family: Courier New,Courier,monospace">current/directory/path/File</span>. If such a file does not exist in the filesystem, the path is unique, and the method returns it.</li>
<li>If the generated path is not unique, the method generates a new name, which starts as the given name but ends with the &quot; (n)&quot; string, where n is the smallest integer that makes the name unique.
<p>For example, if the <span style="font-family: Courier New,Courier,monospace">current/directory/path/File</span> file exists in the filesystem and the <span style="font-family: Courier New,Courier,monospace">generateName()</span> method gets the <span style="font-family: Courier New,Courier,monospace">current/directory/path/File</span> string as an input parameter, it returns <span style="font-family: Courier New,Courier,monospace">current/directory/path/File (1)</span>.</p>
<p>When the given path ends with &quot; (n)&quot;, the method tries to increment n instead of creating another &quot; (n)&quot; suffix. For example, when the method gets the <span style="font-family: Courier New,Courier,monospace">current/directory/path/File (1)</span> string and such a file exists, the returned string is not <span style="font-family: Courier New,Courier,monospace">current/directory/path/File (1) (1)</span>, but <span style="font-family: Courier New,Courier,monospace">current/directory/path/File (2)</span>.</p></li></ol>

<p>The following code illustrates the implementation of the <span style="font-family: Courier New,Courier,monospace">generateName()</span> method. Firstly, a regular expression checks whether the given path ends with the &quot; (n)&quot; string. If so, the n is extracted to the <span style="font-family: Courier New,Courier,monospace">nr</span> variable. If not, the <span style="font-family: Courier New,Courier,monospace">nr</span> variable is equal to 0. Secondly, the <span style="font-family: Courier New,Courier,monospace">tryGenerateName()</span> method is called to generate a unique name.</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function generateName(path) 
{
&nbsp;&nbsp;&nbsp;var pathElements = path.split(SEPARATOR),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = pathElements.pop(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directoryPath = pathElements.join(SEPARATOR),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;regexResult = / \((\d+)\)$/.exec(fileName),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nr = 0;

&nbsp;&nbsp;&nbsp;if (regexResult) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = fileName.substring(0, fileName.length - regexResult[0].length);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nr = parseInt(regexResult[1], 10);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return tryGenerateName(directoryPath, fileName, nr);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">tryGenerateName()</span> method gets as input parameters the parent folder path, the file name, and the <span style="font-family: Courier New,Courier,monospace">nr</span> variable. These 3 parameters create a full path of generated name in the following way: <span style="font-family: Courier New,Courier,monospace">path/prefix (nr)</span>.</p>

<p>The method increments the <span style="font-family: Courier New,Courier,monospace">nr</span> as long as the generated name is not unique. Checking whether the generated path is unique is made by resolving it using the <span style="font-family: Courier New,Courier,monospace">fs.resolveFile()</span> method. If a <span style="font-family: Courier New,Courier,monospace">NotFoundError</span> exception is thrown, the file does not exist, and the generated path is unique. Otherwise, the <span style="font-family: Courier New,Courier,monospace">tryGenerateName()</span> method is called recursively with the <span style="font-family: Courier New,Courier,monospace">nr</span> parameter increased each time.</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function tryGenerateName(path, prefix, nr) 
{
&nbsp;&nbsp;&nbsp;var name = prefix + (nr === 0 ? &#39;&#39; : &#39; (&#39; + nr + &#39;)&#39;);

&nbsp;&nbsp;&nbsp;return fs.resolveFile(path + SEPARATOR + name).then(function onResolved() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tryGenerateName(path, prefix, nr + 1);
&nbsp;&nbsp;&nbsp;}).catch(function onError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.type === &#39;NotFoundError&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw e;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}
</pre>

<h3>Deleting Files and Folders</h3>

<p>Deleting files and folders is implemented in the models/filesystem module. Since the files view allows the user to select multiple files for deletion, the filesystem module provides a method to delete a list of files (or folders).</p>

<ol><li>Use the <span style="font-family: Courier New,Courier,monospace">deleteFiles()</span> method to removes nodes (files or folders) identified by the paths passed as an input parameter:
<pre class="prettyprint">
/* js/models/filesystem.js */
function deleteFiles(files) 
{
&nbsp;&nbsp;&nbsp;if (files.length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EMPTY_PROMISE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;var directoryPath = fs.getDirectoryPath(files[0]);

&nbsp;&nbsp;&nbsp;return getDirectory(directoryPath).then(function onGetDirectoryHandler(directory) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return deleteFileListInDirectory(files, directory);
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li>
<li>To delete a node, the <span style="font-family: Courier New,Courier,monospace">File</span> instance of its parent folder is needed. The method above retrieves such an instance and passes it to the <span style="font-family: Courier New,Courier,monospace">deleteFileListInDirectory()</span> method, which removes the nodes:
<pre class="prettyprint">
/* js/models/filesystem.js */
function deleteFileListInDirectory(files, directory) 
{
&nbsp;&nbsp;&nbsp;if (files.length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EMPTY_PROMISE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;var filePath = files.shift();

&nbsp;&nbsp;&nbsp;return getDirectory(filePath).then(function onGetDirectoryHandler(file) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (file.isDirectory) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return fs.deleteDirectory(directory, filePath, true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return fs.deleteFile(directory, filePath);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}).then(function onFileDeleted() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return deleteFileListInDirectory(files, directory);
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li>
<li>The removal is executed by the <span style="font-family: Courier New,Courier,monospace">fs.deleteDirectory()</span> and <span style="font-family: Courier New,Courier,monospace">fs.deleteFile()</span> methods of the fs module from the Core framework:
<pre class="prettyprint">
/* js/core/fs.js */
function deleteFile(directoryHandler, filePath) 
{
&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directoryHandler.deleteFile(filePath, resolve, reject);
&nbsp;&nbsp;&nbsp;});
}

function deleteDirectory(parentDirectoryHandler, directoryPath, recursive) 
{
&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parentDirectoryHandler.deleteDirectory(directoryPath, !!recursive, resolve, reject);
&nbsp;&nbsp;&nbsp;});
}
</pre>
</li></ol>

<h3>Copying and Moving Files</h3>

<p>Copying and moving is implemented in the models/filesystem module by the <span style="font-family: Courier New,Courier,monospace">copyFiles()</span> and <span style="font-family: Courier New,Courier,monospace">moveFiles()</span> methods.</p>

<p>This section illustrates the copy process. The move process is implemented in a similar way.</p>

<p>To copy files from specified locations (<span style="font-family: Courier New,Courier,monospace">originPaths</span> parameter) to the specified folder (<span style="font-family: Courier New,Courier,monospace">destinationPath</span> parameter), the <span style="font-family: Courier New,Courier,monospace">File</span> instance of the parent folder of the source path is needed. It is retrieved and passed to the <span style="font-family: Courier New,Courier,monospace">copyFileListFromDirectory()</span> method:</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function copyFiles(originPaths, destinationPath) 
{
&nbsp;&nbsp;&nbsp;if (originPaths.length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EMPTY_PROMISE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;var directoryPath = fs.getDirectoryPath(originPaths[0]);

&nbsp;&nbsp;&nbsp;return getDirectory(directoryPath).then(function onGetDirectoryHandler(directory) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copyFileListFromDirectory(directory, originPaths, destinationPath);
&nbsp;&nbsp;&nbsp;});
}

/* js/models/filesystem.js */
function copyFileListFromDirectory(directory, originPaths, destinationPath) 
{
&nbsp;&nbsp;&nbsp;if (originPaths.length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EMPTY_PROMISE;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;var originPath = originPaths.shift();

&nbsp;&nbsp;&nbsp;return copyTo(directory, originPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destinationPath + SEPARATOR + fs.basename(originPath))
&nbsp;&nbsp;&nbsp;.then(function onFileCopied() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copyFileListFromDirectory(directory, originPaths, destinationPath);
&nbsp;&nbsp;&nbsp;});
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">copyFileListFromDirectory()</span> method works recursively: it takes and removes the first element of the path list, makes a copy, and in a success callback calls itself with the reduced list. When the list is empty, the method stops the recursive loop.</p>

<p>The copy step of the method is implemented by the <span style="font-family: Courier New,Courier,monospace">copyTo()</span> method, which calls the <span style="font-family: Courier New,Courier,monospace">generateName()</span> method to ensure that the specified destination path is not occupied, and if so, generates a free one.</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function copyTo(directory, originPath, destinationPath) 
{
&nbsp;&nbsp;&nbsp;var destinationDirectoryPath = destinationPath.split(SEPARATOR).slice(0, -1).join(SEPARATOR);

&nbsp;&nbsp;&nbsp;return generateName(destinationPath).then(function onGetName(fileName) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;directory.copyTo(originPath,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destinationDirectoryPath + SEPARATOR + fileName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;false, resolve, reject);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;});
}
</pre>

<h3>Renaming a File or Folder</h3>
<p>To change the name of a file or folder, call the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method on the <span style="font-family: Courier New,Courier,monospace">File</span> instance referencing the parent folder of the renamed element:</p>
<pre class="prettyprint">
/* js/models/filesystem.js */
function rename(originPath, newName) 
{
&nbsp;&nbsp;&nbsp;var currentDirectory = fs.getDirectoryPath(originPath),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newDirectory = currentDirectory + SEPARATOR + newName;

&nbsp;&nbsp;&nbsp;return getDirectory(currentDirectory).then(function onGetDirectoryHandler(dir) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Promise(function promise(resolve, reject) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir.moveTo(originPath, newDirectory, false, resolve, reject);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;});
}
</pre>



<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>