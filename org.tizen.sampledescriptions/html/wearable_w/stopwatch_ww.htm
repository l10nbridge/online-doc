<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>StopWatch Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">		   
		   <li><a href="../../../org.tizen.guides/html/web/tizen/application/alarm_w.htm">Alarm Guide</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/alarm.html">Alarm API</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html">Application API</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/power.html">Power API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>StopWatch Sample Overview</h1> 
  <p>The StopWatch sample application demonstrates how you can operate a stopwatch and timer.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>   
  <p>The following figure illustrates the main screen of the StopWatch.</p> 
  <p class="figure">Figure: StopWatch screen</p> 
  <p align="center"><img alt="StopWatch screen" src="../images/stopwatch_sd.png" /> </p> 
  <p>The application opens on the <strong>StopWatch</strong> tab. To switch to the timer tab, click <strong>Timer</strong>.</p>
  
  <p>You can use the stopwatch to record how much time something takes with a millisecond precision. You can also track intermediate times (laps), for example, in sporting events and races. On the <strong>StopWatch</strong> tab:</p>
  <ul>
  <li>To start the stopwatch, click <strong>START</strong>.
<p>The timer starts running at the top of the screen.</p></li> 
  <li>To record a lap time, click <strong>LAP</strong>. 
  <p>The timer continues running.</p></li> 
   <li>To stop the stopwatch, click <strong>STOP</strong>. 
   <p>The timer stops running.</p></li> 
   <li>To reset the stopwatch, click <strong>RESET</strong>.
<p>The timer is set to <strong>00:00:00</strong>.</p></li> 
   <li>To restart the stopwatch, click <strong>RESTART</strong>. 
   <p>The timer continues running from the last recorded time.</p></li> 
  </ul> 
  
    <p>You can use a timer to count down a specific time period when an alarm is triggered. The alarm is triggered even if the application is closed. On the <strong>Timer</strong> tab:</p>
  <ul>
  <li>To start the timer, click the numbers to set the time period, and click <strong>START</strong>.</li> 
   <li>To stop the timer, click <strong>STOP</strong>.</li> 
   <li>To reset the timer, click <strong>RESET</strong>.
<p>The timer is set to <strong>00:01:00</strong>.</p></li> 
  </ul> 

  <h2 id="source" name="source">Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains the CSS styling for the application UI.</td>
  </tr>
    <tr>
    <td><span style="font-family: Courier New,Courier,monospace">img/</span></td>
    <td>This directory contains the images used to create the user interface.</td>
  </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file contains the application initializer.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td> 
     <td>This directory contains the application framework.</td> 
    </tr> 
     <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/page.js</span></td> 
     <td>This file contains the helpers for retrieving information about an opened page.</td> 
    </tr>   
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/timer.js</span></td> 
     <td>This file contains the definition of the <span style="font-family: Courier New,Courier,monospace">helper</span> class Timer transforming the milliseconds to the hh:MM:ss:ms format.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/models/</span></td> 
     <td>This directory contains the code related to the application model.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td> 
     <td>This directory contains the code related to application UI.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr> 
   </tbody> 
  </table> 
  
<h2>Implementation</h2>

<p>This section describes the implementation of the core functionality of the application. The code related to the user interface and functions not related to the Tizen APIs have been omitted to preserve simplicity.</p>

<h3>Stopwatch Implementation</h3>

<p>To implement the stopwatch functionality, define the <span style="font-family: Courier New,Courier,monospace">Timer</span> class.</p>
<pre class="prettyprint">
/* js/models/timer.js */
function Timer(delay, callbacks) 
{
&nbsp;&nbsp;&nbsp;this.reset();
&nbsp;&nbsp;&nbsp;this.callbacks = callbacks;
&nbsp;&nbsp;&nbsp;this.delay = delay;
&nbsp;&nbsp;&nbsp;this.id = setInterval(this.tick.bind(this), this.delay);
}

Timer.prototype = 
{
&nbsp;&nbsp;&nbsp;pause: function pause() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;reset: function reset() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;run: function run() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;stop: function stop() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;getTimeElapsed: function getTimeElapsed() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;lap: function lap() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;tick: function tick() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
};</pre>

<p>The above class consists of the following methods:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">reset()</span> – resets the stopwatch and clears the laps.</li>
<li><span style="font-family: Courier New,Courier,monospace">run()</span> – starts the stopwatch.</li>
<li><span style="font-family: Courier New,Courier,monospace">lap()</span> – adds a lap.</li>
<li><span style="font-family: Courier New,Courier,monospace">pause()</span> – pauses the stopwatch. It can be resumed later.</li>
<li><span style="font-family: Courier New,Courier,monospace">stop()</span> – stops the stopwatch permanently. It cannot be resumed anymore.</li>
<li><span style="font-family: Courier New,Courier,monospace">getElapsedTime()</span> – returns the elapsed time.</li>
<li><span style="font-family: Courier New,Courier,monospace">tick()</span> – a callback that is executed repeatedly when the stopwatch is not paused or stopped.</li></ul>

<p>The constructor of the class gets a <span style="font-family: Courier New,Courier,monospace">delay</span> value and a <span style="font-family: Courier New,Courier,monospace">callbacks</span> array on input. </p>
<p>First the constructor resets the timer instance by executing the <span style="font-family: Courier New,Courier,monospace">reset()</span> method, and then it starts executing the <span style="font-family: Courier New,Courier,monospace">tick()</span> method repeatedly after every delay.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">reset()</span> method initializes the internal variables.</p>
<pre class="prettyprint">
/* js/models/timer.js */
reset: function reset() 
{
&nbsp;&nbsp;&nbsp;this.status = &#39;ready&#39;;
&nbsp;&nbsp;&nbsp;this.startTime = null;
&nbsp;&nbsp;&nbsp;this.lapNo = 1;
&nbsp;&nbsp;&nbsp;this.lastLapTime = 0;
}</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">status</span> variable indicates the status of the stopwatch. It is set as &#39;ready&#39; to show that the stopwatch is initialized but not started yet. The <span style="font-family: Courier New,Courier,monospace">startTime</span> variable contains a timestamp where the stopwatch was started. The <span style="font-family: Courier New,Courier,monospace">lapNo</span> and <span style="font-family: Courier New,Courier,monospace">lastLapTime</span> are used in creating laps.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">tick()</span> method executes the callbacks if the timer is running.</p>
<pre class="prettyprint">
/* js/models/timer.js */
tick: function tick() 
{
&nbsp;&nbsp;&nbsp;var i;
&nbsp;&nbsp;&nbsp;if (this.status !== &#39;running&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;(...) /* Execute callbacks */

&nbsp;&nbsp;&nbsp;return this;
}</pre>

<p>To run a timer, call the <span style="font-family: Courier New,Courier,monospace">run()</span> method.</p>
<pre class="prettyprint">
/* js/models/timer.js */
run: function run() 
{
&nbsp;&nbsp;&nbsp;switch (this.status) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &#39;ready&#39;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.startTime === null) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startTime = Date.now();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &#39;paused&#39;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Adjust the startTime by the time passed since the pause */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* so that the time elapsed remains unchanged */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.startTime += Date.now() - this.timePaused;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &#39;running&#39;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Already running */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &#39;stopped&#39;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error(&#39;Can\&#39;t run a stopped timer again&#39;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.status = &#39;running&#39;;

&nbsp;&nbsp;&nbsp;return this;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">run()</span> method checks the status value. If the stopwatch is in the &#39;ready&#39; state, the <span style="font-family: Courier New,Courier,monospace">startTime</span> variable is set as the current timestamp. If the <span style="font-family: Courier New,Courier,monospace">status</span> variable has the &#39;paused&#39; value, the <span style="font-family: Courier New,Courier,monospace">startTime</span> variable is adjusted and the time elapsed remains unchanged. If the stopwatch is stopped, the function throws an exception as the stopping operation is not possible.</p>

<p>After checking the above, the <span style="font-family: Courier New,Courier,monospace">status</span> variable is set as the &#39;running&#39; value.</p>

<p>When the stopwatch is running, it can be paused by calling the <span style="font-family: Courier New,Courier,monospace">pause()</span> method.</p>
<pre class="prettyprint">
/* js/models/timer.js */
pause: function pause() 
{
&nbsp;&nbsp;&nbsp;if (this.status !== &#39;running&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error(&#39;Can pause only a running timer&#39;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.status = &#39;paused&#39;;
&nbsp;&nbsp;&nbsp;this.timePaused = Date.now();

&nbsp;&nbsp;&nbsp;return this;
}</pre>

<p>When the timer instance is no longer needed, it can be stopped permanently by calling the <span style="font-family: Courier New,Courier,monospace">stop</span> method.</p>
<pre class="prettyprint">
/* js/models/timer.js */
stop: function stop() 
{
&nbsp;&nbsp;&nbsp;clearInterval(this.id);
&nbsp;&nbsp;&nbsp;this.status = &#39;stopped&#39;;
&nbsp;&nbsp;&nbsp;this.timePaused = null;

&nbsp;&nbsp;&nbsp;return this;
}</pre>

<p>To record laps, use the <span style="font-family: Courier New,Courier,monospace">Lap()</span> method.</p>
<pre class="prettyprint">
/* js/models/timer.js */
function Lap(no, time) 
{
&nbsp;&nbsp;&nbsp;this.no = no;
&nbsp;&nbsp;&nbsp;this.time = time;
}</pre>
<p>An instance of the <span style="font-family: Courier New,Courier,monospace">Lap</span> class has two variables: <span style="font-family: Courier New,Courier,monospace">no</span> indicating the lap number and <span style="font-family: Courier New,Courier,monospace">time</span> indicating how much time passed from the last lap to now.</p>

<p>To implement a function registering a lap, the <span style="font-family: Courier New,Courier,monospace">getTimeElapsed()</span> function returns information on how much time has passed.</p>
<pre class="prettyprint">
/* js/models/timer.js */
getTimeElapsed: function getTimeElapsed() 
{
&nbsp;&nbsp;&nbsp;if (this.status === &#39;running&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Date.now() - this.startTime;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (this.status === &#39;paused&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.timePaused - this.startTime;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}</pre>

<p>The following function registers a lap.</p>
<pre class="prettyprint">
/* js/models/timer.js */
lap: function lap() 
{
&nbsp;&nbsp;&nbsp;var lapObj = new Lap(this.lapNo,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Lap time is total time minus previous lap time */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.getTimeElapsed() - this.lastLapTime);
&nbsp;&nbsp;&nbsp;this.lastLapTime = this.getTimeElapsed();
&nbsp;&nbsp;&nbsp;this.lapNo += 1;

&nbsp;&nbsp;&nbsp;return lapObj;
}</pre>


<h3>Timer Implementation</h3>

<p>The Timer is based on the <span style="font-family: Courier New,Courier,monospace">Timer</span> class implementation.</p> 

<p>When the user sets the time and taps the <strong>START</strong> button, the clock on top of the page starts counting down. When the clock reaches zero, the alarm rings and the alarm page is displayed.</p>
<p>The following function initializes the <span style="font-family: Courier New,Courier,monospace">timer</span> object and sets the alarm file path to the alarm module.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
var ALARM_SOUND_PATH = &#39;sounds/sounds_alarm.mp3&#39;;

function init() 
{
&nbsp;&nbsp;&nbsp;timer = new Timer(100, fireTick);
&nbsp;&nbsp;&nbsp;audio.setFile(ALARM_SOUND_PATH);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">audio.setFile(ALARM_SOUND_PATH)</span> command sets the audio path to the audio module of the application framework.</p>
<pre class="prettyprint">
/* js/core/core/audio.js */
var audio = new window.Audio();
function setFile(path) 
{
&nbsp;&nbsp;&nbsp;audio.src = path;
&nbsp;&nbsp;&nbsp;audio.autoplay = false;
&nbsp;&nbsp;&nbsp;audio.loop = false;
&nbsp;&nbsp;&nbsp;audio.load();
}</pre>

<p>The timer is initialized with the <span style="font-family: Courier New,Courier,monospace">fireTick</span> callback. This callback updates the UI and calls the following function.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function tick() 
{
&nbsp;&nbsp;&nbsp;var timeDiff = startTimeMilli - timer.getTimeElapsed(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = parseInt(sTimerKeyBase, 10);
&nbsp;&nbsp;&nbsp;if (timeDiff &lt; 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timeUp(time);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timer.reset();
&nbsp;&nbsp;&nbsp;}
}</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">tick()</span> function checks whether the time set by the user has already passed. If so, the timer is reset and the <span style="font-family: Courier New,Courier,monospace">timeUp()</span> function is called. The function uses the <span style="font-family: Courier New,Courier,monospace">sTimerKeyBase</span> variable containing the time (in seconds) chosen by the user.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">timeUp</span> function opens the alarm page by calling the <span style="font-family: Courier New,Courier,monospace">showAlarm</span> method and plays the alarm sound.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function timeUp() 
{
&nbsp;&nbsp;&nbsp;showAlarm();
&nbsp;&nbsp;&nbsp;audio.play({loop: true, file: ALARM_SOUND_PATH});
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">showAlarm</span> function opens the alarm page and turns on the screen.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function showAlarm() 
{
&nbsp;&nbsp;&nbsp;(...) /* Open the alarm page */
&nbsp;&nbsp;&nbsp;tizen.power.turnScreenOn();
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">audio.play({loop: true, file: ALARM_SOUND_PATH})</span> command executes the <span style="font-family: Courier New,Courier,monospace">play()</span> function from the application framework to repeatedly play the specified audio file.</p>
<pre class="prettyprint">
/* js/core/core/audio.js */
function play(options) 
{
&nbsp;&nbsp;&nbsp;options = options || {};

&nbsp;&nbsp;&nbsp;if (options.file !== undefined) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setFile(options.file);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (options.loop !== undefined) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;loop(options.loop);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;audio.play();

&nbsp;&nbsp;&nbsp;return true;
}

function loop(flag) 
{
&nbsp;&nbsp;&nbsp;audio.loop = flag;
}</pre>

<p>To start the timer, the user must tap the <strong>START</strong> button. It calls the <span style="font-family: Courier New,Courier,monospace">startCountdown()</span> function.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function startCountdown() 
{
&nbsp;&nbsp;&nbsp;timer.run();
&nbsp;&nbsp;&nbsp;power.awake();
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">startCountdown()</span> function starts the timer and awakes screen by calling the <span style="font-family: Courier New,Courier,monospace">power.awake</span> method on the Core application framework power module.</p>
<pre class="prettyprint">
/* js/core/core/power.js */ 
var power = tizen.power,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RESOURCE = &#39;SCREEN&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;STATE_NORMAL = &#39;SCREEN_NORMAL&#39;;
    
function awake() 
{
&nbsp;&nbsp;&nbsp;power.request(RESOURCE, STATE_NORMAL);
}</pre>

<p>To run the alarm when the application is closed, use the Alarm API. Handle the <span style="font-family: Courier New,Courier,monospace">visibilitychange</span> event to set a system alarm when the application is closed.</p>
<pre class="prettyprint">
/* js/app.js */
document.addEventListener(&#39;visibilitychange&#39;, onVisibilityChange);</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">onVisibilityChange</span> function invokes the following <span style="font-family: Courier New,Courier,monospace">visibilityChange</span> function.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function visibilityChange(ev) 
{
&nbsp;&nbsp;&nbsp;var state = document.visibilityState;
    
&nbsp;&nbsp;&nbsp;if (state !== &#39;visible&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (timer.status === &#39;running&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addAlarm((startTimeMilli - timer.getTimeElapsed()) / 1000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;}
}</pre>
<p>If the timer is running, add the system alarm by calling the <span style="font-family: Courier New,Courier,monospace">addAlarm</span> function.</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function addAlarm(time) 
{
&nbsp;&nbsp;&nbsp;var alarm = new tizen.AlarmRelative(time + 1),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appControl = new tizen.ApplicationControl(&#39;http://tizen.org/appcontrol/operation/alarm/&#39; + sTimerKeyBase);
&nbsp;&nbsp;&nbsp;tizen.alarm.add(alarm, tizen.application.getCurrentApplication().appInfo.id, appControl);
}</pre>
<p>The alarm is added by calling the <span style="font-family: Courier New,Courier,monospace">tizen.alarm.add</span> function. This function gets a <span style="font-family: Courier New,Courier,monospace">tizen.AlarmRelative</span> object, an application ID string, and a <span style="font-family: Courier New,Courier,monospace">tizen.ApplicationControl</span> object. The first parameter contains information on when the alarm must be invoked. The second parameter is the ID of the application. When the time passes, the system opens an application with this ID. The third parameter contains the operation name concatenated with the time set by user. When the application is opened by the system, this information can be used by it.</p>

<p>When the application is opened, the <span style="font-family: Courier New,Courier,monospace">init()</span> function is called. This is the right place to check whether the application is opened by the Alarm API.</p>
<pre class="prettyprint">
/* js/core/core/application.js */
app = tizen.application;

/* js/app.js */
var OPERATION_ALARM = &#39;http://tizen.org/appcontrol/operation/alarm&#39;;

function init() 
{
&nbsp;&nbsp;&nbsp;var appOperation = app.getCurrentApplication()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.getRequestedAppControl()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.appControl
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.operation;

&nbsp;&nbsp;&nbsp;if (appOperation.indexOf(OPERATION_ALARM) !== -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...) /* Open the alarm page */
&nbsp;&nbsp;&nbsp;}
}</pre>

<p>If the application was opened by the Alarm API then the init function above executes the following function:</p>
<pre class="prettyprint">
/* js/views/timerPage.js */
function timeAlarmFire(event) 
{
&nbsp;&nbsp;&nbsp;var event_time = parseInt(event.detail.time, 10),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = parseInt(sTimerKeyBase, 10);

&nbsp;&nbsp;&nbsp;if (time !== event_time) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time = event_time;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;timeUp(time);
}</pre>
<p>This function calls the <span style="font-family: Courier New,Courier,monospace">timeUp()</span> function, the alarm page is displayed, and alarm starts ringing.</p>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>