<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/snippet.css" />
    <script type="text/javascript" src="../scripts/snippet.js"></script>
    <script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
    <title>HeartRateMonitor Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../org.tizen.guides/html/web/tizen/system/sensor_w.htm">Sensor Guide</a></li>
            <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sensor.html">Sensor API</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>HeartRateMonitor Sample Overview</h1>

<p>The HeartRateMonitor sample application demonstrates how you can measure the user&#39;s current heart rate.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the HeartRateMonitor.</p>
<p class="figure">Figure: HeartRateMonitor screens</p>
<p align="center"><img alt="HeartRateMonitor screens" src="../images/heartratemonitor_screen_1_ww.png" /> <img alt="HeartRateMonitor screens" src="../images/heartratemonitor_screen_2_ww.png" /></p>
<p align="center"><img alt="HeartRateMonitor screens" src="../images/heartratemonitor_screen_3_ww.png" /> <img alt="HeartRateMonitor screens" src="../images/heartratemonitor_screen_4_ww.png" /></p>
<p>The application opens with the main screen that shows the heart rate being measured. After the measurement is complete,  the current heart rate is displayed.</p>
<p>The heart image in the background is animated to beat in sync with the measured heart rate. The application continues to measure the heart rate and update the heart rate value and animation accordingly. If the application cannot measure the heart rate, an information screen is shown after 10 seconds.</p>

<p>The user can set a limit for the heart rate:</p>
<ol><li>On the main screen, click <strong>Settings</strong>.</li>
<li>Use a slider to define a limit to the monitor, and click <strong>OK</strong>.
<p>The defined limit is shown in the top right corner of the main screen, under the header.</p></li></ol>

<p>If the measured heart rate exceeds the limit, the application background turns red and the device starts vibrating for 20 seconds. The vibration happens in 1-second bursts separated by 1-second pauses.</p>

<h2>Prerequisites</h2>

<ul>
	<li>Device must have a heart rate sensor, or you must use the Emulator.</li>
	<li>To ensure proper application execution, the following privileges must be set:
		<ul>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/healthinfo</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://developer.samsung.com/privilege/healthinfo</span></li>
		</ul>
	</li>
</ul>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<p>The application uses a simple Model View (MV) architecture. The core part determines the architecture, and the application part determines the application behavior. The <span style="font-family: Courier New,Courier,monospace">core.js</span> file implements a simple Asynchronous Module Definition (AMD) and specifies how modules are defined.</p>

<table border="1">
<caption>Table: Source files</caption>
    <tbody>
        <tr>
            <th>File name</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
            <td>This file contains the application configuration.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
            <td>This file contains the CSS styling for the application UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">images/</span></td>
            <td>This directory contains the images used to create the application UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
            <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td>
            <td>This file starts the application.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td>
            <td>This directory contains the application framework.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/core/core.js</span></td>
            <td>This file contains the functions for defining modules.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/helpers/vibration.js</span></td>
            <td>This file contains the helper functions for starting and stopping device vibration.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/models/heartRate.js</span></td>
            <td>This file contains the module for managing the heart rate sensor.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/init.js</span></td>
            <td>This file contains the functions responsible for the view of the application, and the back key and low battery handling.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/main.js</span></td>
            <td>This file contains the functions for handling the application behavior.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/page/init.js</span></td>
            <td>This file defines the application UI and handles the interaction with the user.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td>
            <td>This directory contains the TAU library files.</td>
        </tr>
    </tbody>
</table>


<h2>Implementation</h2>

<h3>Defining the Application Layout</h3>

<p>The application has 2 screens, whose content is defined in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file:</p>
<ul>
    <li><p>Main screen shows the current heart rate.</p>
<p>The screen layout consists of a header section with the application name, a content section with <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> elements for displaying the current heart rate, defined limit, measuring time, and the heart image, and a footer section with the <strong>Settings</strong> button. The screen also has a <span style="font-family: Courier New,Courier,monospace">setting-popup</span> popup element used to define the limit.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">views/main.js</span> file defines the screen behavior.</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&nbsp;&nbsp;&nbsp;&lt;head&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta charset=&quot;utf-8&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;description&quot; content=&quot;HeartRateMonitor&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Heart Rate Monitor&lt;/title&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; href=&quot;lib/tau/wearable/theme/default/tau.css&quot; /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; media=&quot;all and (-tizen-geometric-shape: circle)&quot; href=&quot;lib/tau/wearable/theme/default/tau.circle.min.css&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./css/style.css&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;/head&gt;
&nbsp;&nbsp;&nbsp;&lt;body&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-page ui-page-active&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Heart Rate Monitor&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;heart-rate-value&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;heart&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;heart-img&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;limit-info&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Heart rate limit: &lt;span id=&quot;limit-info-value&quot;&gt;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;measuring-info&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Measuring...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;footer class=&quot;ui-footer ui-bottom-button&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#settings-popup&quot; data-rel=&quot;popup&quot; class=&quot;ui-btn&quot;&gt;Settings&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/footer&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;settings-popup&quot; class=&quot;ui-popup&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Set heart rate limit.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;settings-heartrate&quot;&gt;&lt;input id=&quot;settings-heartrate-value&quot; type=&quot;text&quot; value=&quot;&quot; maxlength=&quot;3&quot; disabled/&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;settings-slider&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input id=&quot;slider&quot; type=&quot;range&quot; min=&quot;1&quot; max=&quot;220&quot; value=&quot;&quot; /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-footer ui-side-button ui-grid-col-2&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;cancel-popup-btn&quot; href=&quot;#&quot; class=&quot;ui-btn btn-icon-cancel&quot; data-rel=&quot;back&quot;&gt;Cancel&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;ok-popup-btn&quot; href=&quot;#&quot; class=&quot;ui-btn btn-icon-check&quot; data-rel=&quot;back&quot;&gt;OK&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src=&quot;./lib/tau/wearable/js/tau.js&quot;&gt;&lt;/script&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src=&quot;./js/core/core.js&quot; data-main=&quot;./js/app.js&quot;&gt;&lt;/script&gt;
&nbsp;&nbsp;&nbsp;&lt;/body&gt;
&lt;/html&gt;
</pre>
	</li>
    <li><p>Information screen shows an instruction if the application cannot measure the heart rate.</p>


<p>The screen layout consists of a header section with the screen title, a content section with instructions in case the heart rate cannot be measured, and a footer with the <strong>Back</strong> button:</p>	
	
	<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page&quot; id=&quot;info&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;HRM Info&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;info-text&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Try again. Clean the sensor, then attach Gear snugly to top or under side of wrist, not against the bone. Be still and quiet.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;footer class=&quot;ui-footer ui-bottom-button&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;info-back-btn&quot; class=&quot;ui-btn&quot;&gt;Back&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;/footer&gt;
&lt;/div&gt;
</pre>
	</li>
</ul>

<h3>Monitoring the Heart Rate</h3>

<p>To define a heart rate module that provides processed heart rate data from the Sensor API:</p>

<ol><li>
<p>Define an empty module:</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
define(
{
&nbsp;&nbsp;&nbsp;name: &#39;models/heartRate&#39;,
&nbsp;&nbsp;&nbsp;requires: 
&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core/event&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core/storage/idb&#39;
&nbsp;&nbsp;&nbsp;],
&nbsp;&nbsp;&nbsp;def: function modelsHeartRate(req)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Implementation */
&nbsp;&nbsp;&nbsp;}
});
</pre></li>

<li>
<p>Create the required variables:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">heartRateData</span> represents the heart rate monitor data. It contains a rate numeric field that contains the current heart rate value.</li>
<li><span style="font-family: Courier New,Courier,monospace">heartRate</span> is a reference to the heart rate sensor.</li></ul>

<pre class="prettyprint">
/* js/models/heartRate.js */
var heartRateData = {};
var heartRate = null;
</pre></li>

<li>
<p>Define the <span style="font-family: Courier New,Courier,monospace">resetData()</span> method, which cleans the <span style="font-family: Courier New,Courier,monospace">heartRateData</span> object:</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
function resetData() 
{
&nbsp;&nbsp;&nbsp;heartRateData = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rate: &#39;-&#39;
&nbsp;&nbsp;&nbsp;};
}
</pre>
</li>

<li>
<p>Define the <span style="font-family: Courier New,Courier,monospace">init()</span> method, which initializes the heart rate module:</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
function init()
{
&nbsp;&nbsp;&nbsp;resetData();
&nbsp;&nbsp;&nbsp;/* Initialize the heart rate limit */

&nbsp;&nbsp;&nbsp;heartRate = (tizen &amp;&amp; tizen.humanactivitymonitor) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(window.webapis &amp;&amp; window.webapis.motion) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null;
}
</pre></li>

<li>
<p>Define the <span style="font-family: Courier New,Courier,monospace">start()</span> method, which starts reading data from the sensor.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">init()</span> method from the main module calls the <span style="font-family: Courier New,Courier,monospace">start()</span> method during the main module initialization.</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
var CONTEXT_TYPE = &#39;HRM&#39;;

function start()
{
&nbsp;&nbsp;&nbsp;resetData();
&nbsp;&nbsp;&nbsp;heartRate.start(CONTEXT_TYPE, function onSuccess(heartRateInfo)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handleHeartRateInfo(heartRateInfo);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;function onError(error)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;error: &#39;, error.message);
&nbsp;&nbsp;&nbsp;});
}

/* js/views/main.js */   
function init() 
{
&nbsp;&nbsp;&nbsp;heartRate.start();
&nbsp;&nbsp;&nbsp;/* Other actions */
}
</pre></li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace">start()</span> method success callback calls the <span style="font-family: Courier New,Courier,monospace">handleHeartRateInfo()</span> method, which stores the received data in the <span style="font-family: Courier New,Courier,monospace">heartRateData</span> object and fires a change event using the event module from the Core framework:</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
function setHeartRateData(heartRateInfo) 
{
&nbsp;&nbsp;&nbsp;var pData = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rate: heartRateInfo.heartRate
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;heartRateData = pData;

&nbsp;&nbsp;&nbsp;return pData;
}

function getData()
{
&nbsp;&nbsp;&nbsp;return heartRateData;
}

function handleHeartRateInfo(heartRateInfo)
{
&nbsp;&nbsp;&nbsp;setHeartRateData(heartRateInfo);

&nbsp;&nbsp;&nbsp;ev.fire(&#39;change&#39;, getData());
}
</pre></li>

<li>
<p>When the application terminates (after the user presses the <strong>back</strong> key on the main screen), the back key event handler calls the <span style="font-family: Courier New,Courier,monospace">stop()</span> method in the heart rate module. The <span style="font-family: Courier New,Courier,monospace">stop()</span> method stops the sensor and unregisters the previously registered listener.</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
function stop()
{
&nbsp;&nbsp;&nbsp;heartRate.stop(CONTEXT_TYPE);
}

/* js/views/init.js */        
var hr = req.models.heartRate;

function onHardwareKeysTap(ev) 
{
&nbsp;&nbsp;&nbsp;/* Other actions */
&nbsp;&nbsp;&nbsp;hr.stop();
&nbsp;&nbsp;&nbsp;/* Other actions */
}
</pre></li>
</ol>

<h3>Setting and Storing the Heart Rate Limit</h3>

<p>The heart rate module exports methods for setting and getting the limit value from the storage.</p>

<p>To manage the heart rate limit value:</p>

<ol><li>When reading from or writing to the storage, the <span style="font-family: Courier New,Courier,monospace">core.storage.idb.write</span> and <span style="font-family: Courier New,Courier,monospace">core.storage.idb.read</span> events are triggered:

<pre class="prettyprint">
/* js/models/heartRate.js */
var st = req.core.storage.idb,
&nbsp;&nbsp;&nbsp;&nbsp;STORAGE_IDB_KEY = &#39;limit&#39;;

function getLimit()
{
&nbsp;&nbsp;&nbsp;st.get(STORAGE_IDB_KEY);
}

function setLimit(value)
{
&nbsp;&nbsp;&nbsp;st.set(STORAGE_IDB_KEY, value);
}

ev.on(
{
&nbsp;&nbsp;&nbsp;&#39;core.storage.idb.write&#39;: onWriteLimit,
&nbsp;&nbsp;&nbsp;&#39;core.storage.idb.read&#39;: onReadLimit
});
</pre></li>

<li>The storage writing and reading operations are asynchronous, and the event module from the Core framework calls callbacks when the operations are completed.
<p>The events are handled by the <span style="font-family: Courier New,Courier,monospace">onWriteLimit()</span> and <span style="font-family: Courier New,Courier,monospace">onReadLimit()</span> callback methods. These methods trigger the <span style="font-family: Courier New,Courier,monospace">models.heartRate.setLimit</span> and <span style="font-family: Courier New,Courier,monospace">models.heartRate.getLimit</span> events to notify the view that the operations are completed.</p>

<pre class="prettyprint">
/* js/models/heartRate.js */
function onWriteLimit()
{
&nbsp;&nbsp;&nbsp;ev.fire(&#39;setLimit&#39;);
}

function onReadLimit(e)
{
&nbsp;&nbsp;&nbsp;ev.fire(&#39;getLimit&#39;, e);
}
</pre></li>
</ol>

<h3>Monitoring the Heart Rate Limit</h3>

<p>When the heart rate exceeds the defined limit, the application background changes and the device vibrates.</p>

<p>To monitor the limit:</p>

<ol><li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">bindEvents()</span> method to register the event listeners for when the user sets a new limit.</p>
<p>The asynchronous <span style="font-family: Courier New,Courier,monospace">heartRate.setLimit()</span> method stores the new limit value and fires the <span style="font-family: Courier New,Courier,monospace">models.heartRate.setLimit()</span> event.</p>

<pre class="prettyprint">
/* js/views/main.js */
var HRLimit = null, /* Heart rate limit value */
&nbsp;&nbsp;&nbsp;&nbsp;heartRate = null, /* Reference to the heartRate module */
&nbsp;&nbsp;&nbsp;&nbsp;okPopupBtn = null; /* Reference to the popup button */

function onOkPopupBtnClick()
{
&nbsp;&nbsp;&nbsp;HRLimit = settingsHeartrateValue.value;
&nbsp;&nbsp;&nbsp;heartRate.setLimit(HRLimit);
}

function bindEvents()
{
&nbsp;&nbsp;&nbsp;okPopupBtn = document.getElementById(&#39;ok-popup-btn&#39;);
&nbsp;&nbsp;&nbsp;okPopupBtn.addEventListener(&#39;click&#39;, onOkPopupBtnClick);
}
</pre></li>

<li>Implement and register the <span style="font-family: Courier New,Courier,monospace">models.heartRate.setLimit</span> listener. The <span style="font-family: Courier New,Courier,monospace">OnSetLimit()</span> method calls the asynchronous <span style="font-family: Courier New,Courier,monospace">heartRate.getLimit()</span> method, which fires the <span style="font-family: Courier New,Courier,monospace">models.heartRategsetLimit</span> event.

<pre class="prettyprint">
/* js/views/main.js */
function onSetLimit() 
{
&nbsp;&nbsp;&nbsp;heartRate.getLimit();
}

ev.on(
{
&nbsp;&nbsp;&nbsp;&#39;models.heartRate.setLimit&#39;: onSetLimit
});
</pre></li>

<li>Implement and register the <span style="font-family: Courier New,Courier,monospace">models.heartRate.getLimit</span> listener to update the UI:

<pre class="prettyprint">
/* js/views/main.js */
var settingsHeartrateValue = null, /* Text input element for set heart rate limit value */
&nbsp;&nbsp;&nbsp;&nbsp;limitInfoValue = null, /* Text element showing the set heart rate limit value */
&nbsp;&nbsp;&nbsp;&nbsp;slider = null, /* Slider input element for changing heart rate limit value */
&nbsp;&nbsp;&nbsp;&nbsp;HRLimit = null; /* Heart rate limit */

function onGetLimit(e)
{
&nbsp;&nbsp;&nbsp;var limit = e.detail.value;

&nbsp;&nbsp;&nbsp;if (limit === undefined)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;limit = HRLimit;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;settingsHeartrateValue.value = limit;
&nbsp;&nbsp;&nbsp;limitInfoValue.innerHTML = limit;
&nbsp;&nbsp;&nbsp;slider.value = limit;
&nbsp;&nbsp;&nbsp;HRLimit = limit;

&nbsp;&nbsp;&nbsp;setLimitExceeded(currentRate &gt; HRLimit);
}

ev.on(
{
&nbsp;&nbsp;&nbsp;&#39;models.heartRate.getLimit&#39;: onGetLimit
});
</pre></li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace">setLimitExceeded()</span> method checks whether the current heart rate is higher than the set limit. If the limit is lower than the measured heart rate, the main screen gets a new CSS style class which changes its background color to red and the device starts to vibrate. Otherwise, the CSS style class is removed.</p>

<pre class="prettyprint">
/* js/views/main.js */
var page = null, /* Reference to the main screen element */
&nbsp;&nbsp;&nbsp;&nbsp;vibration = null; /* Reference to the vibration module */

function setLimitExceeded(exceeded)
{
&nbsp;&nbsp;&nbsp;if (exceeded)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page.classList.add(&#39;limit-exceeded&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vibration.start();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page.classList.remove(&#39;limit-exceeded&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vibration.stop();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>
<p>The application starts and stops the device vibration at 1-second intervals using the <span style="font-family: Courier New,Courier,monospace">helpers/vibration</span> module. To implement the vibration module:</p>

<ol type="a"><li>Define the vibration module:

<pre class="prettyprint">
/* js/helpers/vibration.js */
define(
{
&nbsp;&nbsp;&nbsp;name: &#39;helpers/vibration&#39;,
&nbsp;&nbsp;&nbsp;def: function vibrationModule()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Variables */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function vibrate() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Implement the vibration */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function start()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Start the vibration */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function stop()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Stop the vibration */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start: start,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stop: stop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
});
</pre></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace">vibrate()</span> method, which starts the device vibration and stops it when the time has passed:

<pre class="prettyprint">
/* js/helpers/vibration.js */
var launchTimestamp = 0, /* Vibration launch time */
&nbsp;&nbsp;&nbsp;&nbsp;/* Duration of the whole process */
&nbsp;&nbsp;&nbsp;&nbsp;/* After this time vibration is stopped even without stop method call */
&nbsp;&nbsp;&nbsp;&nbsp;PROCESS_DURATION = 20000, 
&nbsp;&nbsp;&nbsp;&nbsp;intervalId = 0, /* Vibration interval task ID */
&nbsp;&nbsp;&nbsp;&nbsp;VIBRATION_DURATION = 1000; /* Duration of vibration step */

function vibrate() 
{
&nbsp;&nbsp;&nbsp;var stopTime = launchTimestamp + PROCESS_DURATION, currentTime = new Date().getTime();

&nbsp;&nbsp;&nbsp;if (currentTime &gt; stopTime) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(intervalId);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;navigator.vibrate(VIBRATION_DURATION);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace">start()</span> method, which starts the vibration process:

<pre class="prettyprint">
/* js/helpers/vibration.js */
function start()
{
&nbsp;&nbsp;&nbsp;if (intervalId === 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intervalId = setInterval(vibrate, VIBRATION_DURATION + PAUSE_DURATION);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;launchTimestamp = new Date().getTime();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>Define the <span style="font-family: Courier New,Courier,monospace">stop()</span> method, which stops the vibration process:

<pre class="prettyprint">
/* js/helpers/vibration.js */
function stop()
{
&nbsp;&nbsp;&nbsp;if (intervalId !== 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(intervalId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;intervalId = 0;
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol></li></ol>

<h3>Calculating the Beat for the Heart Image</h3>

<p>The speed of the heart image animation depends on the current heart rate, and it is recalculated every time the heart rate value changes:</p>

<ol><li>
<p>The default duration of 1 animation of 2 heart beats lasts 1.5 seconds. When the heart rate changes, 120 is divided by the current heart rate and rounded to one digit after the decimal place to determine the new duration.</p>

<pre class="prettyprint">
/* js/views/main.js */
function onHeartRateDataChange(heartRateInfo) 
{
&nbsp;&nbsp;&nbsp;var rate = heartRateInfo.detail.rate,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activePage = document.getElementsByClassName('ui-page-active')[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activePageId = activePage ? activePage.id : '';

&nbsp;&nbsp;&nbsp;updateAnimationDuration(rate);
&nbsp;&nbsp;&nbsp;setLimitExceeded(rate &gt; HRLimit);
}

function updateAnimationDuration(rate) 
{
&nbsp;&nbsp;&nbsp;var animationDuration = &#39;1.5&#39;;

&nbsp;&nbsp;&nbsp;if (rate &lt; 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationDuration = 0;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animationDuration = (120 / rate).toFixed(1);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (animationDuration !== currentAnimationDuration) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;heartImg.style.webkitAnimationDuration = animationDuration + &#39;s&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentAnimationDuration = animationDuration;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p>The CSS style file shows how each animation contains 2 heart beats:</p>

<pre class="prettyprint">
/* css/style.css */
heart-img
{
&nbsp;&nbsp;&nbsp;margin: 5% auto;
&nbsp;&nbsp;&nbsp;background-image: url(&quot;../images/heart.png&quot;);
&nbsp;&nbsp;&nbsp;background-position: center;
&nbsp;&nbsp;&nbsp;background-size: cover;
&nbsp;&nbsp;&nbsp;width: 60%;
&nbsp;&nbsp;&nbsp;height: 60%;
}

.animate
{
&nbsp;&nbsp;&nbsp;-webkit-animation: heartMove 1.5s infinite;
}

@-webkit-keyframes heartMove
{
&nbsp;&nbsp;&nbsp;0%, 50%, 100%
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 45%;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 45%;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;25%, 75%
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width: 60%;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height: 60%;
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>