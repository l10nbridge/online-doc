<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Camera Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
		   <li><a href="../../../org.tizen.guides/html/web/w3c/supplement/camera_w.htm">Camera API (Tizen Extension) Guide</a></li> 
		   <li><a href="../../../org.tizen.tutorials/html/web/w3c/supplement/task_camera_w.htm">Camera API (Tizen Extension) Tutorial</a></li>
		   <li><a href="../../../org.tizen.web.apireference/html/w3c_api/camera_w.html">Camera API (Tizen Extension) API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content"> 
  <h1>Camera Sample Overview</h1> 

  <p>The Camera sample application demonstrates how you can handle the camera in the Tizen wearable device. You can take pictures, record videos, and preview photos and videos.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/w3c/supplement/task_camera_w.htm">Camera task</a>.</p>
  
 <p>The following figure illustrates the main screens of the Camera.</p> 
  <p class="figure">Figure: Camera screens</p> 
  <p align="center"><img alt="Camera screens" src="../images/camera_ww.png" /> </p>   
  
  <p>The application opens with the main screen, where it displays a preview from the Tizen wearable camera with 2 icons at the top of the screen.</p>
  
<p>The user can:</p>
<ul><li>Switch between photo and video modes.</li>
<li>Take pictures with a preview.</li>
<li>Record videos (limited to 10 seconds) with a preview.</li>
<li>Define custom settings for pictures (size and format) and recordings (format).</li></ul>

  
<p>To handle the camera:</p>
<ul>
<li><p>To set the mode, click the left icon.</p>
<p>Based on the mode the user selects, the icon shows a photo camera for taking pictures or a video camera for recording videos.</p> </li>
<li><p>To take a picture, set the photo mode and tap the free space on the screen.</p>
<p>The application auto-focuses the image, takes the photo, and displays a preview of the picture.</p></li> 
<li><p>To record a video, set the camera mode and tap the free space on the screen.</p>
<p>The application starts recording. To stop recording, tap the screen. The maximum recording time is 10 seconds.</p>
<p>The application saves the video and displays a preview image of the recorded video. To watch the video, click the preview image.</p> </li>
<li><p>To specify additional settings, click the right icon.</p>
<p>The application shows a list of settings specific to the selected mode.</p></li></ul> 

<h2>Source Files</h2>
<p>You can create and view the sample application project including the source files in the IDE.</p> 
<table>
<caption>Table: Source files</caption>
 <tbody>
  <tr>
    <th>File name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
    <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains the CSS styling for the application UI.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
    <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td>
    <td>This file contains code for the main application module used for initialization.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td>
    <td>This directory contains the core modules. They are used in other parts of the application code. <span style="font-family: Courier New,Courier,monospace">core.js</span> implements simple AMD (Asynchronous Module Definition) and specifies module defining. The application uses a simple MV (Model View) architecture.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">js/helpers/</span></td>
    <td>This directory contains helper functions for playing audio files and formatting date and strings.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">js/models/camera.js</span></td>
    <td>This file defines an abstract layer over the Camera API.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td>
    <td>This directory contains the code for handling the UI events for all pages.</td>
  </tr>
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td>
    <td>This directory contains the external libraries (TAU library).</td>
  </tr>  
  </tbody>
</table>
 
<h2>Implementation</h2>

<p>The application code is separated into modules. Each module specifies its dependent modules.</p>
<p>The entry point for the application is the <span style="font-family: Courier New,Courier,monospace">app</span> module. It is loaded first by the <span style="font-family: Courier New,Courier,monospace">Core</span> library with the <span style="font-family: Courier New,Courier,monospace">data-main</span> attribute help.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;

&lt;script src=&quot;./js/core/core.js&quot; data-main=&quot;./js/app.js&quot;&gt;&lt;/script&gt;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">app</span> module&#39;s responsibility is to load view initialization module â€“ <span style="font-family: Courier New,Courier,monospace">views/initPage</span> (by adding it as dependant module in <span style="font-family: Courier New,Courier,monospace">requires</span> array).</p> 
<pre class="prettyprint">
/* App module */

define(
{
&nbsp;&nbsp;&nbsp;name: &#39;app&#39;,
&nbsp;&nbsp;&nbsp;requires: [&#39;views/initPage&#39;],
&nbsp;&nbsp;&nbsp;def: function appInit() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Initiates the module */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function init() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;app::init&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: init
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
});</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">views/initPage</span> module loads the other view modules as dependencies to let them initialize. It also manages view navigation, handles Tizen hardware keys, checks the battery state, and notifies other modules about application state changes, such as background, foreground and exit.</p>
<pre class="prettyprint">
/* js/views/initPage.js */
/*Initializes the page module */

define({
&nbsp;&nbsp;&nbsp;name: &#39;views/initPage&#39;,
&nbsp;&nbsp;&nbsp;requires: [&#39;core/event&#39;, &#39;core/systeminfo&#39;, &#39;core/application&#39;, &#39;views/main&#39;, &#39;views/settings&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;views/preview&#39;, &#39;views/pictureSize&#39;, &#39;views/pictureFormat&#39;, &#39;views/recordingFormat&#39;],
&nbsp;&nbsp;&nbsp;def: function viewsInitPage(req) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var app = req.core.application,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo = req.core.systeminfo;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Handles the hardware keys tap event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param {event} ev
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onHardwareKeysTap(ev) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var keyName = ev.keyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page = document.getElementsByClassName(&#39;ui-page-active&#39;)[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageid = (page &amp;&amp; page.id) || &#39;&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pageid === &#39;main&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;application.exit&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.setTimeout(function appCloseTimeout() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (pageid === &#39;preview&#39; || pageid === &#39;settings&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;main.open&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (pageid === &#39;picture-size&#39; ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageid === &#39;picture-format&#39; ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageid === &#39;recording-format&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;settings.open&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;history.back();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Handles visibilitychange event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param {event} ev
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onVisibilityChange(ev) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;visibility.change&#39;, ev);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles the window unload event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onUnload() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;application.exit&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles the onLowBattery state */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onLowBattery() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles the window blur event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onBlur() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;application.state.background&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles window focus event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onFocus() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;application.state.foreground&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Registers the module event listeners */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function bindEvents() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;tizenhwkey&#39;, onHardwareKeysTap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;visibilitychange&#39;, onVisibilityChange);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;unload&#39;, onUnload);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;blur&#39;, onBlur);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;focus&#39;, onFocus);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo.listenBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Initiates the module */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function init() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Bind the events to page elements */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo.checkBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.listeners(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core.systeminfo.battery.low&#39;: onLowBattery
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: init
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
});</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">views/main</span> module handles most of the application UI interaction. It shows the camera preview and allows the user to take a picture and record a video. To handle this task, it processes the user actions and uses the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module to handle them.</p>
<p>When the application starts or goes foreground, it creates the camera preview and initializes the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module which uses the Camera API to create the <span style="font-family: Courier New,Courier,monospace">CameraControl</span> object.</p>
<pre class="prettyprint">
/* js/views/main.js */

/**
* Executes when preview stream is obtained
* @param {LocalMediaStream} stream
*/
function onPreviewStream(stream) 
{
&nbsp;&nbsp;&nbsp;var streamUrl = window.webkitURL.createObjectURL(stream);

&nbsp;&nbsp;&nbsp;previewInitAttemtps = 0;
&nbsp;&nbsp;&nbsp;cameraStream = stream;
&nbsp;&nbsp;&nbsp;cameraPreview.src = streamUrl;
&nbsp;&nbsp;&nbsp;camera.registerStream(cameraStream);
&nbsp;&nbsp;&nbsp;if (pageHelper.isPageActive(page)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraPreview.play();
&nbsp;&nbsp;&nbsp;}
}

/* Gets the media stream */
function getUserMedia(onUserMediaSuccess, onUserMediaError) 
{
&nbsp;&nbsp;&nbsp;navigator.webkitGetUserMedia(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video: true,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio: true
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onUserMediaSuccess,
&nbsp;&nbsp;&nbsp;onUserMediaError
&nbsp;&nbsp;&nbsp;);
}

/* Requests for the camera stream */
function requestForCameraStream() 
{
&nbsp;&nbsp;&nbsp;return getUserMedia(onPreviewStream, onPreviewStreamError);
}

/* Initializes the camera preview */
function initCameraPreview() 
{
&nbsp;&nbsp;&nbsp;if (previewInitInProgress) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;previewInitInProgress = true;
&nbsp;&nbsp;&nbsp;requestForCameraStream();
}

/* Initiates the module */
function init() 
{
&nbsp;&nbsp;&nbsp;initCameraPreview();
}

/* js/models/camera.js */

/* Initiates the camera settings */
function initCameraSettings() 
{
&nbsp;&nbsp;&nbsp;var pictureFormats = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureSizes = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recordingFormats = null;

&nbsp;&nbsp;&nbsp;cameraSettings = storage.get(STORAGE_SETTINGS_KEY);

&nbsp;&nbsp;&nbsp;if (!cameraSettings) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings = {};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureFormats = getAvailablePictureFormats();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings.pictureFormat = pictureFormats[0];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pictureSizes = getAvailablePictureSizes();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings.pictureSize = pictureSizes[0];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recordingFormats = getAvailableRecordingFormats();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraSettings.recordingFormat = recordingFormats[0];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;saveCameraSettings();
&nbsp;&nbsp;&nbsp;}
}

/**
* Executes when the camera control is created from the stream
* @param {CameraControl} control
*/
function onCameraControlCreated(control) 
{
&nbsp;&nbsp;&nbsp;cameraControl = control;
&nbsp;&nbsp;&nbsp;initCameraSettings();
&nbsp;&nbsp;&nbsp;e.fire(&#39;ready&#39;);
}

/**
* Executes on camera control creation error.
* @param {object} error
*/
function onCameraControlError(error) 
{
&nbsp;&nbsp;&nbsp;console.error(error);
&nbsp;&nbsp;&nbsp;e.fire(&#39;error&#39;, {error: error});
}

/**
* Registers stream that camera controls.
* @param {LocalMediaStream} mediaStream
*/
function registerStream(mediaStream) 
{
&nbsp;&nbsp;&nbsp;navigator.tizCamera.createCameraControl(mediaStream, onCameraControlCreated, onCameraControlError);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">models/camera</span> module encapsulates the Camera API and creates an event-driven interface for the view modules. </p>
<p>The main methods exposed by this module are:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">registerStream()</span>: Initializes the module and creates the <span style="font-family: Courier New,Courier,monospace">CameraControl</span> object. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.camera.ready</span>: The module is ready to use.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.error</span>: An error occurred during the initialization.</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">release()</span>: Releases the camera (<span style="font-family: Courier New,Courier,monospace">CameraControl</span>). Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.camera.release</span>: The camera was released.</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">takePicture()</span>: Takes a picture using the current settings. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.camera.autofocus.start</span>: The request is accepted, the autofocus process starts.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.autofocus.success</span>: The autofocus is done.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.autofocus.failure</span>: An error occurred during the autofocus process, it does not stop taking the picture.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.shutter</span>: The camera shutter event</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.picture.done</span>: A picture is successfully created (filename in the event details)</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.picture.error</span>: An error occurred during taking the picture</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.picture.canceled</span>: The picture taking was canceled (for example if the application goes background)</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">startRecording()</span>: Starts recording. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.camera.recording.start</span>: The request is accepted and the recording starts.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.recording.error</span>: An error occurred during the initialization of the recording.</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">stopRecording()</span>: Stops the recording. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.camera.recording.done</span>: A video file is successfully created (filename in the events details). This event is fired also when the time limit for the video recording is exceeded</li>
<li><span style="font-family: Courier New,Courier,monospace">models.camera.recording.error</span>: An error occurred during the ending of the recording</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">getRecordingTime()</span>: Returns the current recording time</li></ul>

<p>Other module&#39;s methods (not listed above) are used to manage the camera settings.</p>
<p>The view modules call the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module methods and listen to its events to update the UI.</p>

<p>The taking picture process starts when the user touches the device screen in the photo mode. The <span style="font-family: Courier New,Courier,monospace">views/main</span> module calls the <span style="font-family: Courier New,Courier,monospace">takePicture()</span> method of the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module when a click event is detected.</p>
<pre class="prettyprint">
/* js/views/main.js  */

/* Takes a photo */
function takePhoto() 
{
&nbsp;&nbsp;&nbsp;previewTapAllowed = false;
&nbsp;&nbsp;&nbsp;hideNavigationBtns();

&nbsp;&nbsp;&nbsp;/* Ensure the preview is visible to prevent webkit freeze */
&nbsp;&nbsp;&nbsp;cameraPreview.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;camera.takePicture();
}

/**
* Handles the camera preview click event
* @param {event} ev
*/
function onCameraPreviewClick(ev) 
{
&nbsp;&nbsp;&nbsp;ev.preventDefault();
&nbsp;&nbsp;&nbsp;ev.stopPropagation();

&nbsp;&nbsp;&nbsp;if (!previewTapAllowed) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (photoMode) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;takePhoto();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}

/* Registers the listeners for click events */
function bindCameraReadyEvents() 
{
&nbsp;&nbsp;&nbsp;cameraPreview.addEventListener(&#39;click&#39;, onCameraPreviewClick);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">models/camera</span> module starts processing the request. It triggers the autofocus (<span style="font-family: Courier New,Courier,monospace">CameraControl.autoFocus</span>) and notifies the other modules about the results. The <span style="font-family: Courier New,Courier,monospace">views/main</span> module listens to the autofocus events and updates the UI by creating proper animation and pausing the camera preview (freeze effect).</p>
<pre class="prettyprint">
/* js/models/camera.js */

/* Handles the autofocus success */
function onAutoFocusSuccess() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;autofocus.success&#39;);
&nbsp;&nbsp;&nbsp;if (!takingPictureCancelRequested) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(startTakingPicture, TAKE_PICTURE_DELAY);
&nbsp;&nbsp;&nbsp;}
}

/* Handles the autofocus error */
function onAutoFocusFailure() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;autofocus.failure&#39;);
&nbsp;&nbsp;&nbsp;if (!takingPictureCancelRequested) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(startTakingPicture, TAKE_PICTURE_DELAY);
&nbsp;&nbsp;&nbsp;}
}

/**
* Takes a picture.
* When autofocus starts, camera.autofocus event is fired.
* When autofocus succeeds, camera.autofocus.success event is fired.
* When autofocus fails, camera.autofocus.failure event is fired.
* When picture is ready camera.picture.done event is fired with picture
* path as a data. If error occurs, camera.picture.error event is fired.
* @return {boolean} If process starts true is returned,
* false otherwise (camera other operation is in progress).
*/
function takePicture() 
{
&nbsp;&nbsp;&nbsp;if (busy) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;busy = true;
&nbsp;&nbsp;&nbsp;takingPictureInProgress = true;
&nbsp;&nbsp;&nbsp;takingPictureCancelRequested = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;autofocus.start&#39;);
&nbsp;&nbsp;&nbsp;if (cameraControl.autoFocus()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(onAutoFocusSuccess, AUTOFOCUS_DELAY);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(onAutoFocusFailure, AUTOFOCUS_DELAY);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
/* js/views/main.js */

/* Shows the autofocus frame */
function showAutoFocus() 
{
&nbsp;&nbsp;&nbsp;focusContainer.classList.remove(&#39;hidden&#39;);
&nbsp;&nbsp;&nbsp;focusFrame.classList.add(&#39;autofocus-animation&#39;);
}

/* Handles the camera.autofocus.start event */
function onAutoFocusStart() 
{
&nbsp;&nbsp;&nbsp;showAutoFocus();
}

/* Handles the camera.autofocus.success event */
function onAutoFocusSuccess() 
{
&nbsp;&nbsp;&nbsp;pausePreview();
&nbsp;&nbsp;&nbsp;focusFrame.classList.add(&#39;autofocus-success&#39;);
}

/* Handles camera.autofocus.failure event */
function onAutoFocusFailure() 
{
&nbsp;&nbsp;&nbsp;pausePreview();
&nbsp;&nbsp;&nbsp;focusFrame.classList.add(&#39;autofocus-failure&#39;);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.camera.autofocus.start&#39;: onAutoFocusStart,
&nbsp;&nbsp;&nbsp;&#39;models.camera.autofocus.success&#39;: onAutoFocusSuccess,
&nbsp;&nbsp;&nbsp;&#39;models.camera.autofocus.failure&#39;: onAutoFocusFailure,
});
</pre>

<p>When the autofocusing is done, the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module can go a step forward towards taking the actual picture using the <span style="font-family: Courier New,Courier,monospace">CameraControl.image.takePicture()</span> method. Before that, the picture settings must be applied using the <span style="font-family: Courier New,Courier,monospace">CameraControl.image.applySettings()</span> method. There is also a registered shutter callback (<span style="font-family: Courier New,Courier,monospace">CameraControl.image.onshutter</span>) which fires the proper event for the view module to update the UI (&quot;Processing&quot; toast).</p>
<pre class="prettyprint">
/* js/models/camera.js */

/* Handles the camera onshutter event */
function onShutter() 
{
&nbsp;&nbsp;&nbsp;e.fire(&#39;shutter&#39;);
}

/* Executes when the image settings are applied */
function onImageSettingsApplied() 
{
&nbsp;&nbsp;&nbsp;if (!takingPictureCancelRequested) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cameraControl.image.takePicture(onPictureDone, onPictureError);
&nbsp;&nbsp;&nbsp;}
}

/**
* Executes when an error occurs during applying the image settings
* @param {object} error
*/
function onImageSettingsError(error) 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;takingPictureInProgress = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;picture.error&#39;, {error: error});
}

/* Starts taking the photo */
function startTakingPicture() 
{
&nbsp;&nbsp;&nbsp;var settings = {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = &#39;&#39;;

&nbsp;&nbsp;&nbsp;fileName = createPictureFileName();
&nbsp;&nbsp;&nbsp;picturePath = PICTURE_DESTINATION_DIRECTORY + &#39;/&#39; + fileName;

&nbsp;&nbsp;&nbsp;settings.fileName = fileName;
&nbsp;&nbsp;&nbsp;settings.pictureFormat = getPictureFormat();
&nbsp;&nbsp;&nbsp;settings.pictureSize = getPictureSize();

&nbsp;&nbsp;&nbsp;if (!cameraControl) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cancelTakingPicture();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;cameraControl.image.onshutter = onShutter;
&nbsp;&nbsp;&nbsp;cameraControl.image.applySettings(settings, onImageSettingsApplied, onImageSettingsError);
}

/* js/views/main.js */

/* Handles the camera.shutter event */
function onCameraShutter() 
{
&nbsp;&nbsp;&nbsp;hideAutoFocus();
&nbsp;&nbsp;&nbsp;showStatusMessage(&#39;Processing...&#39;);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.camera.shutter&#39;: onCameraShutter
});
</pre>

<p>Now, the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module waits for the <span style="font-family: Courier New,Courier,monospace">onPictureDone()</span> or <span style="font-family: Courier New,Courier,monospace">onPictureError()</span> method to get executed. When they do, it notifies the other modules about this fact with image file details and does some cleaning. The <span style="font-family: Courier New,Courier,monospace">view/main</span> module passes control to <span style="font-family: Courier New,Courier,monospace">views/preview</span> module, which loads the taken picture and shows it to the user.</p>
<pre class="prettyprint">
/* js/models/camera.js */


/* Executes when the picture is ready */
function onPictureDone() 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;takingPictureInProgress = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;picture.done&#39;, {path: picturePath});
}

/**
* Executes when an error occurs during taking picture
* @param {object} error
*/
function onPictureError(error) 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;takingPictureInProgress = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;picture.error&#39;, {error: error});
}

/* js/views/main.js */


/**
* Handles the camera.picture.done event
* @param {event} ev
*/
function onPictureDone(ev) 
{
&nbsp;&nbsp;&nbsp;var path = ev.detail.path;
&nbsp;&nbsp;&nbsp;hideAutoFocus();
&nbsp;&nbsp;&nbsp;e.fire(&#39;show.preview&#39;, {picture: path});
}

/**
* Handles the camera.picture.error event
* @param {object} error
*/
function onPictureError(error) 
{
&nbsp;&nbsp;&nbsp;console.error(&#39;picture error&#39;, error);
&nbsp;&nbsp;&nbsp;hideAutoFocus();
&nbsp;&nbsp;&nbsp;hideStatusMessage();
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.camera.picture.done&#39;: onPictureDone,
&nbsp;&nbsp;&nbsp;&#39;models.camera.picture.error&#39;: onPictureError,
});

/* js/views/preview.js */

/**
* Handles views.settings.show event
* @param {event} ev
*/
function show(ev) 
{
&nbsp;&nbsp;&nbsp;var detail = ev.detail;

&nbsp;&nbsp;&nbsp;if (detail.picture) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;previewPictureMode = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;picture.src = detail.picture;

&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (detail.video) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;tau.changePage(&#39;#preview&#39;);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;views.main.show.preview&#39;: show
});
</pre>

<p>Recording videos is implemented in a similar way. The <span style="font-family: Courier New,Courier,monospace">views/main</span> module calls the <span style="font-family: Courier New,Courier,monospace">startRecording()</span> method of the <span style="font-family: Courier New,Courier,monospace">models/camera</span> module and listens to its events in order to update the UI.</p>
 
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>