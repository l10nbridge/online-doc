<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Calculator Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
		   <li><a href="../../../org.tizen.guides/html/web/tizen/system/system_info_w.htm">System Information Guide</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/systeminfo.html">System Information API</a></li>
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html">Application API</a></li>   
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Calculator Sample Overview</h1> 
  <p>The Calculator sample application demonstrates how you can create a calculator with basic mathematical operations.</p> 
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p> 
 <p>The following figure illustrates the main screen of the Calculator.</p> 
  <p class="figure">Figure: Calculator screen</p> 
  <p align="center"><img alt="Calculator screen" src="../images/calculator_ww.png" /> </p> 
  <p>The application opens with the Calculator screen, where you can perform mathematical operations by clicking the applicable buttons.</p>

  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
	<tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains the CSS styling for the application UI.</td>
  </tr>
	<tr>
    <td><span style="font-family: Courier New,Courier,monospace">img/</span></td>
    <td>This directory contains the images used to create the user interface.</td>
  </tr>  
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file contains the code for the main application module used for initialization.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/model.js</span></td> 
     <td>This file contains the application model (handles mathematical operations).</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/systeminfo.js</span></td> 
     <td>This file contains the battery state handling code.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/ui.js</span></td> 
     <td>This file contains the implementation code for the user interface.</td> 
    </tr> 	
   </tbody> 
  </table> 
  
<h2>Implementation</h2>
<p>All JavaScript files are loaded directly from the <span style="font-family: Courier New,Courier,monospace">index.html</span> file. There is also initialization started by calling the <span style="font-family: Courier New,Courier,monospace">init()</span> method of the <span style="font-family: Courier New,Courier,monospace">app</span> module, which acts as an application controller.</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;script src=&quot;js/systeminfo.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/ui.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/model.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
&nbsp;&nbsp;&nbsp;app.init();
&lt;/script&gt;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">app</span> module initializes all other modules:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">systeminfo</span> is responsible for checking the battery level</li>
<li><span style="font-family: Courier New,Courier,monospace">model</span> encapsulates the calculator logic (equation state and mathematical operations)</li>
<li><span style="font-family: Courier New,Courier,monospace">ui</span> is responsible for managing the UI (updating and listening to events)</li></ul>
<p>Finally, the <span style="font-family: Courier New,Courier,monospace">app</span> module requests the <span style="font-family: Courier New,Courier,monospace">ui</span> module to update the equation field with a value obtained from the <span style="font-family: Courier New,Courier,monospace">model</span> module. Now, the application is ready for use.</p>

<pre class="prettyprint">
/* js/app.js */
init: function init() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;systeminfo.init();
&nbsp;&nbsp;&nbsp;model.init();
&nbsp;&nbsp;&nbsp;ui.init();
&nbsp;&nbsp;&nbsp;this.refreshEquation();
},

refreshEquation: function refreshEquation() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;ui.showEquation(model.equation);
}
</pre>
<p>The application layout is defined directly in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file. It is styled by the CSS file and managed by the <span style="font-family: Courier New,Courier,monospace">ui</span> module. The <span style="font-family: Courier New,Courier,monospace">ui</span> module listens to the touch events on the calculator buttons, updates their press state, and passes the control to the <span style="font-family: Courier New,Courier,monospace">app</span> module to run the proper action. It also exposes some methods which allow the controller module (<span style="font-family: Courier New,Courier,monospace">app</span>) to update the equation and its result. Formatting the fields is also its responsibility.</p> 
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;table id=&quot;screen&quot;&gt;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&lt;td id=&quot;display&quot; valign=&quot;middle&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;overflow_top&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;overflow_bottom&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;equation&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;result&quot; class=&quot;empty&quot;&gt;&lt;span id=&quot;resultvalue&quot;&gt;&lt;/span&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/td&gt;
&lt;/tr&gt;&lt;/table&gt;

&lt;div id=&quot;numpad&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_7&quot; class=&quot;key&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_8&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_9&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_c&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_del&quot; class=&quot;key long-tap-repeat&quot;&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_4&quot; class=&quot;key&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_5&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_6&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_div&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_mul&quot; class=&quot;key&quot;&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_1&quot; class=&quot;key&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_2&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_3&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_sub&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_add&quot; class=&quot;key&quot;&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_0&quot; class=&quot;key&quot; style=&quot;clear: both;&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_dec&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_sign&quot; class=&quot;key&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;key_eql&quot; class=&quot;longkey&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
<pre class="prettyprint">
/* js/ui.js */
showEquation: function showEquation(equation) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var e, element, elementText, span, equationElement, length;

&nbsp;&nbsp;&nbsp;equationElement = document.getElementById(&#39;equation&#39;);

&nbsp;&nbsp;&nbsp;equationElement.innerHTML = &#39;&#39;;

&nbsp;&nbsp;&nbsp;length = equation.length;
&nbsp;&nbsp;&nbsp;for (e = 0; e &lt; length; e += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = equation[e];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span = document.createElement(&#39;span&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = element;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Object.keys(this.operatorDisplays).indexOf(element) !== -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span.className = &#39;operator&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = this.operatorDisplays[element];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = app.addSeparators(elementText);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = elementText.replace(/-/g, &#39;&minus;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span.innerHTML = elementText;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;equationElement.appendChild(span);
&nbsp;&nbsp;&nbsp;}
},

/* Shows string in result element */
/* @param {string} result */
/* @private */
show: function show(result) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;if (result === &#39;&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.clear();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.equationElement.classList.add(&#39;top&#39;);
&nbsp;&nbsp;&nbsp;this.resultValueElement.innerHTML = result.replace(/-/g, &#39;&minus;&#39;);
}

/* Shows result in result element */
/* @param {string} result */
showResult: function showResult(result) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.show(result);
&nbsp;&nbsp;&nbsp;this.result = true;
}
</pre>
 
<p>The <span style="font-family: Courier New,Courier,monospace">model</span> module is responsible for the calculator logic. Its internal implementation of the equation is based on an array which stores each component (number, operator) as a separate string. The module exposes a set of functions to modify the equation and finally to compute its value. It also keeps the equation state valid by refusing to add the wrong component.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">model</span> module&#39;s public interface consists of following functions:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">addDigit()</span> adds a single digit to the equation</li>
<li><span style="font-family: Courier New,Courier,monospace">addOperator()</span> adds an operator (+, -, *, /) to the equation</li>
<li><span style="font-family: Courier New,Courier,monospace">addDecimal()</span> adds a decimal point to the equation</li>
<li><span style="font-family: Courier New,Courier,monospace">deleteLast()</span> deletes the last digit or operator</li>
<li><span style="font-family: Courier New,Courier,monospace">resetEquation()</span> clears the whole equation</li>
<li><span style="font-family: Courier New,Courier,monospace">changeSign()</span> changes the sign of the last equation component</li>
<li><span style="font-family: Courier New,Courier,monospace">isEmpty()</span> returns true if the equation is empty (does not contain any component)</li>
<li><span style="font-family: Courier New,Courier,monospace">calculate()</span> calculates the equation value</li></ul>

<p>When the user touches any button (in this case, the &quot;equal&quot; button flow is presented), the <span style="font-family: Courier New,Courier,monospace">ui</span> module notifies the controller module (<span style="font-family: Courier New,Courier,monospace">app</span>) by calling its <span style="font-family: Courier New,Courier,monospace">processKey()</span> method. The request is dispatched and finally the <span style="font-family: Courier New,Courier,monospace">calculate()</span> method of the <span style="font-family: Courier New,Courier,monospace">model</span> module is called. When the result is obtained, the controller module (<span style="font-family: Courier New,Courier,monospace">app</span>) requests the <span style="font-family: Courier New,Courier,monospace">ui</span> module to update the adequate field in the UI by calling the <span style="font-family: Courier New,Courier,monospace">showResult()</span> method.</p>    
 
<pre class="prettyprint">
/* js/app.js */
processKey: function processKey(key) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var keys = [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;];
&nbsp;&nbsp;&nbsp;if (ui.isResultVisible()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Object.keys(this.operatorKeys).indexOf(key) === -1 &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;del&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;eql&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;sign&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ui.clearResult();
&nbsp;&nbsp;&nbsp;if (keys.indexOf(key) !== -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.pushDigits(key);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (Object.keys(this.operatorKeys).indexOf(key) !== -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.addOperator(this.operatorKeys[key]);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;dec&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.addDecimal();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;del&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.deleteLast();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;c&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.resetEquation();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;sign&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.changeSign();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (key === &#39;eql&#39; &amp;&amp; !model.isEmpty()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.calculate();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.refreshEquation();
},

calculate: function calculate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var result = &#39;&#39;;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = model.calculate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = this.addSeparators(result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;=&nbsp;&#39; + result);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e instanceof EquationInvalidFormatError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;Wrong format&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e instanceof CalculationError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;Invalid operation&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e instanceof InfinityError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult((e.positive ? &#39;&#39; : &#39;&minus;&#39;) + &#39;&infin;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showError(&#39;Unknown error.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.warn(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre> 
 
<p>The <span style="font-family: Courier New,Courier,monospace">calculate()</span> method of the <span style="font-family: Courier New,Courier,monospace">model</span> module does some checks to ensure the equation correctness and finally mergers all its components into one string and runs it as a JavaScript expression through the <span style="font-family: Courier New,Courier,monospace">eval()</span> method to obtain its value. If no error occurs, the equation result is returned. </p>
 
<pre class="prettyprint">
/* js/model.js */

/* Calculates equation value */
/* @return {string} */
calculate: function calculate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var evaluation = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result,
&nbsp;&nbsp;&nbsp;/* Checks whether the matched number is zero */
&nbsp;&nbsp;&nbsp;/* @param {string} m Whole match including the division operator */
&nbsp;&nbsp;&nbsp;/* @param {string} p1 Whole number, including sign and parenthesis */
&nbsp;&nbsp;&nbsp;/* @param {string} number The matched number */
&nbsp;&nbsp;&nbsp;/* @return {string} */
&nbsp;&nbsp;&nbsp;checkDivisionByZero = function checkDivisionByZero(m, p1, number) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(number) === 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new DivisionByZeroError();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &#39;/ &#39; + number;
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLeftOperand(this.lastCalculationResult);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!this.isValidEquation()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new EquationInvalidFormatError();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.calculated = false;

&nbsp;&nbsp;&nbsp;/* Evaluate the equation */
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation = this.equation.join(&#39; &#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation = evaluation.replace(/\/ *(\(?\-?([0-9\.]+)\)?)/g, checkDivisionByZero);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = eval(&#39;(&#39; + evaluation + &#39;)&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(result) &lt; 1.0E-300) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new CalculationError();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (isNaN(result)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new CalculationError();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (result === Infinity || result === -Infinity) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InfinityError(result === Infinity);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.calculated = true;
&nbsp;&nbsp;&nbsp;/* Format the result value */
&nbsp;&nbsp;&nbsp;result = this.formatValue(result);
&nbsp;&nbsp;&nbsp;/* Save the calculated result */
&nbsp;&nbsp;&nbsp;this.lastCalculationResult = result;

&nbsp;&nbsp;&nbsp;return result;
}
</pre> 
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
