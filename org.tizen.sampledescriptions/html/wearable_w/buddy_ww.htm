<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Buddy Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.ui.practices/html/web/w3c/transform_w.htm">CSS Transforms Guide</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#transforms">CSS Transforms API</a></li>
			<li><a href="../../../org.tizen.gettingstarted/html/web/details/event_handling_w.htm#rotary">Rotary Events</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
  <h1>Buddy Sample Overview</h1>
  <p>The Buddy sample application demonstrates how you can design a list with animation for a Gear device to fit in the circular UI.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the Buddy.</p>
  <p class="figure">Figure: Buddy screens</p>
  <p align="center"><img alt="Buddy screens" src="../images/buddy_ww.png" /> </p>
  <p>When the application opens, a list of buddies is displayed in screen.</p>
  <p>To see more buddies, the user can rotate the bezel clockwise or counterclockwise. The list scrolls with animation to the direction the user rotates.</p>

  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p>
  <table border="1">
  <caption>Table: Source files</caption>
    <tbody>
      <tr>
        <th>File name</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
        <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
      </tr>
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">css/customIndicator.css</span></td>
        <td>This file contains the CSS styling for the custom list for the circular UI.</td>
      </tr>	  
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
        <td>This file contains the CSS styling for the application UI.</td>
      </tr>
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">images/</span></td>
        <td>This directory contains the images used to create the user interface.</td>
      </tr>
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
        <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
      </tr>	  
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td>
        <td>This file contains the buddies&#39; data and initializes the application.</td>
      </tr>
      <tr>
        <td><span style="font-family: Courier New,Courier,monospace">js/customIndicator.js</span></td>
        <td>This file initializes the custom list for the circular UI and provides its control.</td>
      </tr>
    </tbody>
  </table>

<h2>Implementation</h2>

<h3>Defining the Application Layout</h3>
<p>The <span style="font-family: Courier New,Courier,monospace">-webkit-mask</span> styles create the circular icon of a buddy&#39;s picture:</p>
<pre class="prettyprint">
&lt;!--js/customIndicator.css--&gt;
.list-thumbnail 
{
&nbsp;&nbsp;&nbsp;-webkit-mask-image: url(&quot;../images/wc_contact_bg.png&quot;);
&nbsp;&nbsp;&nbsp;-webkit-mask-size: contain;
&nbsp;&nbsp;&nbsp;-webkit-mask-repeat: no-repeat;
}
</pre>


<h3>Performing Basic Operations</h3>

<p>The entry point for the application is the <span style="font-family: Courier New,Courier,monospace">js/app.js</span> module. The custom indicator module is required to run the application, and you must include both <span style="font-family: Courier New,Courier,monospace">.js</span> files.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;script src=&quot;js/page.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/custom-indicator.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">js/app.js</span> module registers callbacks for user events, such as the back button or bezel rotation:</p>
<pre class="prettyprint">
/* js/app.js */
function init() 
{
&nbsp;&nbsp;&nbsp;listController.init(&quot;list-buddy&quot;);
&nbsp;&nbsp;&nbsp;/* Push all data to the list */
&nbsp;&nbsp;&nbsp;pushData();
&nbsp;&nbsp;&nbsp;/* Add a hardware key event listener */
&nbsp;&nbsp;&nbsp;window.addEventListener(&quot;tizenhwkey&quot;, keyEventHandler);
&nbsp;&nbsp;&nbsp;/* Add both pages to the page controller */
&nbsp;&nbsp;&nbsp;pageController.addPage(&quot;page-main&quot;);
&nbsp;&nbsp;&nbsp;pageController.addPage(&quot;page-contact&quot;);
&nbsp;&nbsp;&nbsp;/* Set callbacks for up and down scroll */
&nbsp;&nbsp;&nbsp;/* These functions animate the header if needed */
&nbsp;&nbsp;&nbsp;listController.setScrollUpCallback(scrollUpCallbackHeader);
&nbsp;&nbsp;&nbsp;listController.setScrollDownCallback(scrollDownCallbackHeader);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">js/app.js</span> module adds data to the circle list indicator:</p>
<pre class="prettyprint">
/* js/app.js */
(function pushData() 
{
&nbsp;&nbsp;&nbsp;var i;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; PERSON_DATA_NAME.length; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (PERSON_DATA_IMAGE[i]) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listController.addData(PERSON_DATA_NAME[i], PERSON_DATA_IMAGE[i], createPageChangeFunc(i));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listController.addData(PERSON_DATA_NAME[i], null, createPageChangeFunc(i));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}());
</pre>


<h3>Applying Animation Effects</h3>

<p>To apply the animation effects:</p>
<ol>
<li>
<p>The event callback activates the header scroll animation effect. The <span style="font-family: Courier New,Courier,monospace">HEADER_DATA</span> variable holds the style data of the effect.</p>
<p>The application uses the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method to implement the animation effect.</p>
<pre class="prettyprint">
/* js/app.js */
function setHeaderAnimation(start, end) 
{
&nbsp;&nbsp;&nbsp;if (animRequest) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.cancelAnimationFrame(animRequest);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;animRequest = window.requestAnimationFrame(drawAnimationFrame.bind(this, start, end));
}

function scrollDownCallbackHeader(focusPos) 
{
&nbsp;&nbsp;&nbsp;/* Header disappears */
&nbsp;&nbsp;&nbsp;switch (focusPos) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 0:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (diff === 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Full header -&gt; half header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;FULL&quot;, &quot;HALF&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Full header -&gt; no header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;FULL&quot;, &quot;NONE&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Half header -&gt; no header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;HALF&quot;, &quot;NONE&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}

function scrollUpCallbackHeader(focusPos) 
{
&nbsp;&nbsp;&nbsp;/* Header appears */
&nbsp;&nbsp;&nbsp;switch (focusPos) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 1:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Half header -&gt; full header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;HALF&quot;, &quot;FULL&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (focusPos + diff === 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* No header -&gt; half header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;NONE&quot;, &quot;HALF&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (focusPos + diff === 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* No header -&gt; full header */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setHeaderAnimation(&quot;NONE&quot;, &quot;FULL&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>Call the <span style="font-family: Courier New,Courier,monospace">setAnimationStyle()</span> method to render the frame. The method must set the new style for the frame.</p>
<p>The value of the style is calculated by the ratio of the current progress in the animation effect duration.</p>
<pre class="prettyprint">
/* js/app.js */
function setAnimationStyle(elm, origPos, destPos, ratio) 
{
&nbsp;&nbsp;&nbsp;var valOrigStyle,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valDestStyle,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valAnimStyle;

&nbsp;&nbsp;&nbsp;if (ratio &gt; 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ratio = 1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Object.keys(HEADER_DATA[origPos]).forEach(function(key) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (key) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;top&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valOrigStyle = parseFloat(HEADER_DATA[origPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valDestStyle = parseFloat(HEADER_DATA[destPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valAnimStyle = (valOrigStyle + (valDestStyle - valOrigStyle) * ratio) + &quot;px&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm.style[key] = valAnimStyle;
&nbsp;&nbsp;&nbsp;});
}

function drawAnimationFrame(animStart, animEnd, timestamp) 
{
&nbsp;&nbsp;&nbsp;var elmHeader = document.querySelector(&quot;.header&quot;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress;

&nbsp;&nbsp;&nbsp;if (!animStartTime) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animStartTime = timestamp;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;progress = timestamp - animStartTime;

&nbsp;&nbsp;&nbsp;setAnimationStyle(elmHeader, animStart, animEnd, progress / ANIM_DURATION);

&nbsp;&nbsp;&nbsp;if (progress &lt; ANIM_DURATION) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animRequest = window.requestAnimationFrame(drawAnimationFrame.bind(this, animStart, animEnd));
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animRequest = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animStartTime = 0;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">js/customIndicator.js</span> module provides a list with animation for the circular UI.</p>
<p>The code registers a rotary event listener to active the animation when a rotary event occurs.</p>
<p>The callback changes the label text after the <span style="font-family: Courier New,Courier,monospace">DELAY_TEXT_DURATION</span> event, and starts the animation effect.</p>
<pre class="prettyprint">
/* js/customIndicator.js */
listController.init = function init(listId) 
{
&nbsp;&nbsp;&nbsp;listElement = document.querySelector(&quot;#&quot; + listId);
&nbsp;&nbsp;&nbsp;labelElement = listElement.querySelector(&quot;.list-label&quot;);
&nbsp;&nbsp;&nbsp;labelElement.addEventListener(&quot;click&quot;, labelClickEventHandler);

&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;rotarydetent&#39;, rotaryEventHandler);
};

function rotaryEventHandler(ev) 
{
&nbsp;&nbsp;&nbsp;var direction = ev.detail.direction;

&nbsp;&nbsp;&nbsp;/* If the rotated direction is clockwise, scroll down the list */
&nbsp;&nbsp;&nbsp;/* If the rotated direction is counterclockwise, scroll up the list */
&nbsp;&nbsp;&nbsp;if (direction === &quot;CW&quot;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listController.scroll(1);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (direction === &quot;CCW&quot;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;listController.scroll(-1);
&nbsp;&nbsp;&nbsp;}
}

listController.scroll = function scroll(diff) 
{
&nbsp;&nbsp;&nbsp;if (diff &lt; 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scrollUpCallback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollUpCallback(focusPos, diff);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (diff &gt; 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (scrollDownCallback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scrollDownCallback(focusPos, diff);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if ((focusPos + diff &gt;= 0) &amp;&amp; (focusPos + diff &lt; listLength)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;focusPos += diff;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Set the animation state */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setAnimation(-1 * diff);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Label must be changed after the predefined duration */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setLabel(dataName[focusPos]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, DELAY_TEXT_DURATION);
&nbsp;&nbsp;&nbsp;}
};
</pre>
</li>
<li>
<p>Set the animation with the <span style="font-family: Courier New,Courier,monospace">setAnimation()</span> method. The application uses the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method to draw an animation frame.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">drawAnimationFrame()</span> method is called for each rendering of your rendering engine.</p>
<p>If a new animation request is set before the previous animation is finished, this application stops the previous and starts the new one.</p>
<pre class="prettyprint">
/* js/customIndicator.js */
function setAnimation(diff) 
{
&nbsp;&nbsp;&nbsp;animPosDiff = diff;

&nbsp;&nbsp;&nbsp;if (animRequest) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.cancelAnimationFrame(animRequest);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;animRequest = window.requestAnimationFrame(drawAnimationFrame);
}

function drawAnimationFrame(timestamp) 
{
&nbsp;&nbsp;&nbsp;var progress,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;

&nbsp;&nbsp;&nbsp;if (!animStartTime) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animStartTime = timestamp;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;progress = timestamp - animStartTime;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; listLength; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setAnimationStyle(containerElement[i], i - focusPos - animPosDiff, i - focusPos, progress / ANIM_SCROLL_DURATION);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (progress &lt; ANIM_SCROLL_DURATION) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animRequest = window.requestAnimationFrame(drawAnimationFrame);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animRequest = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animStartTime = 0;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>The main code of the <span style="font-family: Courier New,Courier,monospace">setAnimationStyle()</span> method calculates a style value of a specific frame in a transitional animation.</p>
<p>Apply the calculated style value to each element composing a list to implement the animation effect.</p>
<pre class="prettyprint">
/* js/customIndicator.js */
/* function setAnimationStyle(elm, origPos, destPos, ratio) */
Object.keys(CONTAINER_DATA[&quot;POS_&quot; + origPos]).forEach(function(key) 
{
&nbsp;&nbsp;&nbsp;switch (key) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;transform&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valOrigStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + origPos][key].substring(7));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valDestStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + destPos][key].substring(7));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valAnimStyle = &quot;rotate(&quot; + (valOrigStyle + (valDestStyle - valOrigStyle) * ratio) + &quot;deg)&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;margin-left&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;width&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;height&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;font-size&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;line-height&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valOrigStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + origPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valDestStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + destPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valAnimStyle = (valOrigStyle + (valDestStyle - valOrigStyle) * ratio) + &quot;px&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case &quot;opacity&quot;:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valOrigStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + origPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valDestStyle = parseFloat(CONTAINER_DATA[&quot;POS_&quot; + destPos][key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;valAnimStyle = (valOrigStyle + (valDestStyle - valOrigStyle) * ratio);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
