<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/snippet.css" />
    <script type="text/javascript" src="../scripts/snippet.js"></script>
    <script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
    <title>Sound Manager Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../org.tizen.guides/html/web/tizen/multimedia/sound_w.htm">Sound Guide</a></li>
            <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/sound.html">Sound API</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Sound Manager Sample Overview</h1>

<p>The Sound Manager sample application demonstrates how you can manage custom sound profiles. A sound profile is a structure consisting of a unique name and a list of volume values for all available sound types, such as ringtone, notification, and alarm.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the Sound Manager.</p>
<p class="figure">Figure: Sound Manager screens</p>
<p align="center"><img alt="Sound Manager screens" src="../images/soundmanager_screen_1_ww.png" /> <img alt="Sound Manager screens" src="../images/soundmanager_screen_2_ww.png" /></p>
<p>The application opens with the main screen, which shows a list of all sound profiles created by the user:</p>

<ul><li>To activate a sound profile, select the radio button next to the profile name.
<p>When a profile is activated, the system sound settings are set to its values.</p></li>
<li>To add a new profile, click <strong>Add</strong> and enters a name for the new profile.
<p>The new profile is initialized with the current system sound settings.</p></li>
<li>To modify the values of a sound profile, click the profile name.
<p>The details screen opens, showing the various sound type volumes set for that profile. Use the range inputs to change the volume values.</p>
<p>If the currently active profile is modified, the changes are applied directly to the system settings.</p>
<p>To restore the profile values to the state they were in when the details screen was opened, click <strong>Reset</strong>. To delete the profile, click <strong>Delete</strong>.</p></li></ul>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privilege must be set:</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/volume.set</span></li>
</ul>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<p>The application uses a simple Model View (MV) architecture. The core part determines the architecture, and the application part determines the application behavior. The <span style="font-family: Courier New,Courier,monospace">core.js</span> file implements a simple Asynchronous Module Definition (AMD) and specifies how modules are defined.</p>

<table border="1">
<caption>Table: Source files</caption>
    <tbody>
        <tr>
            <th>File name</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
            <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
        </tr>
		<tr>
            <td><span style="font-family: Courier New,Courier,monospace">css/</span></td>
            <td>This directory contains the CSS (Cascading Style Sheets) files used in the application.</td>
        </tr>		
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
            <td>This file contains the CSS styling for the application UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
            <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/</span></td>
            <td>This directory contains the application code.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td>
            <td>This directory contains the application framework.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/helpers/ui.js</span></td>
            <td>This file contains the UI helper methods.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/models/</span></td>
            <td>This directory contains the application model modules.</td>
        </tr>		
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/models/soundProfiles.js</span></td>
            <td>This file contains the methods related to sound profile data.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td>
            <td>This directory contains the files implementing the application views.</td>
        </tr>		
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/details.js</span></td>
            <td>This file contains the methods related to the details screen UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/views/main.js</span></td>
            <td>This file contains the methods related to the profiles screen UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">templates/</span></td>
            <td>This directory contains the templates for list items.</td>
        </tr>
    </tbody>
</table>


<h2>Implementation</h2>

<h3>Defining the Application Layout</h3>

<p>The application has 2 screens defined in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file:</p>

<ul><li>Main screen displays a list of sound profiles.

<p>The screen layout consists of a header, a list of profiles, and a footer with the <strong>Add</strong> button:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page ui-page-active&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Sound Manager&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot; id=&quot;profiles&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;footer class=&quot;ui-footer&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;addProfileButton&quot; class=&quot;ui-btn ui-btn-footer-icon btn-add&quot;&gt;Add&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;/footer&gt;
&lt;/div&gt;
</pre>

<p>The profile list rows are generated from the <span style="font-family: Courier New,Courier,monospace">templates/listItem.tpl</span> template file. The template uses as parameters the profile ID and name, and a Boolean flag indicating whether the profile is active.</p>

<pre class="prettyprint">
&lt;!--templates/listItem.tpl--&gt;
&lt;li class=&quot;li-has-radio&quot; data-profile-id=&quot;{{id}}&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;label&gt;{{title}}&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&lt;input data-profile-id=&quot;{{id}}&quot; type=&quot;radio&quot; name=&quot;profile-item&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{{?isActive}}checked=&quot;checked&quot;{{/isActive}}/&gt;
&lt;/li&gt;
</pre>
</li>

<li>Details screen displays the volumes of all sound types for the selected sound profile.

<p>The screen layout consists of a header with the profile title, a list of sound types, and a footer with the <strong>Reset</strong> and <strong>Delete</strong> buttons:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page&quot; id=&quot;details&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot; id=&quot;soundTypes&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;footer class=&quot;ui-footer ui-grid-col-2&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;reset&quot; class=&quot;ui-btn ui-btn-footer-icon btn-reset&quot;&gt;Reset&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;delete&quot; class=&quot;ui-btn ui-btn-footer-icon btn-trash&quot;&gt;Delete&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;/footer&gt;
&lt;/div&gt;
</pre>

<p>The sound type list rows are generated from the <span style="font-family: Courier New,Courier,monospace">templates/soundTypeItem.tpl</span> template file, which uses the sound type name as a parameter:</p>

<pre class="prettyprint">
&lt;!--templates/soundTypeItem.tpl--&gt;
&lt;li&gt;
&nbsp;&nbsp;&nbsp;&lt;label for=&quot;{{name}}&quot;&gt;{{name}}&lt;span&gt;&lt;/span&gt;&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&lt;input id=&quot;{{name}}&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;10&quot;&gt;
&lt;/li&gt;
</pre>
</li></ul>

<h3>Initializing the Application</h3>

<p>To initialize the application:</p>
<ol>
<li><p>Define variables for holding the values of the currently active profile, and all the user&#39;s sound profiles:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
var currentProfile = {},
&nbsp;&nbsp;&nbsp;&nbsp;profiles = [],
</pre></li>

<li><p>Define an array that holds the IDs of all sound types, and a variable for the active profile ID (<span style="font-family: Courier New,Courier,monospace">null</span>, if no profile is activated):</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;&nbsp;SOUND_TYPES = 
&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;SYSTEM&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;NOTIFICATION&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;ALARM&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;MEDIA&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;VOICE&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;RINGTONE&#39;
&nbsp;&nbsp;&nbsp;&nbsp;]
&nbsp;&nbsp;&nbsp;&nbsp;activeProfileId = null;
</pre>
</li>
<li><p>Fill the <span style="font-family: Courier New,Courier,monospace">currentProfile</span> object with the current values. You can obtain the system values of all sound types using the <span style="font-family: Courier New,Courier,monospace">getVolume()</span> method:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function init() 
{
&nbsp;&nbsp;&nbsp;var i = 0, soundType = null;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; SOUND_TYPES.length; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;soundType = SOUND_TYPES[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentProfile[soundType] = tizen.sound.getVolume(soundType);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (e)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(e.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
</pre></li>


<li><p>Register a volume change listener and define a callback to monitor and react to volume changes outside the application.</p>

<p>If the volume is changed from outside the application, the application must save the new volume value to the <span style="font-family: Courier New,Courier,monospace">currentProfile</span> object and deactivate the active profile, if any, by setting the <span style="font-family: Courier New,Courier,monospace">activeProfileId</span> variable to <span style="font-family: Courier New,Courier,monospace">null</span>.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.sound.setVolumeChangeListener(onVolumeChanged);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;catch (e)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(e.message);
&nbsp;&nbsp;&nbsp;}
}

function onVolumeChanged(soundType, volume)
{
&nbsp;&nbsp;&nbsp;if (currentProfile[soundType] !== volume)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentProfile[soundType] = volume;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (activeProfileId !== null)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activeProfileId = null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.fire(&#39;changed&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<p>The sound profile is represented by an object with the following fields:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">id</span>: Unique identifier of the profile</li>
<li><span style="font-family: Courier New,Courier,monospace">title</span>: Profile title</li>
<li><span style="font-family: Courier New,Courier,monospace">XXX</span> – Value of the XXX sound type, where XXX is one of the <span style="font-family: Courier New,Courier,monospace">SOUND_TYPES</span> array values</li></ul>

<p>For example:</p>
<pre class="prettyprint">
{
&nbsp;&nbsp;&nbsp;id: 1313,
&nbsp;&nbsp;&nbsp;title: &#39;Custom Profile&#39;,
&nbsp;&nbsp;&nbsp;SYSTEM: 0.1,
&nbsp;&nbsp;&nbsp;NOTIFICATION: 0.2,
&nbsp;&nbsp;&nbsp;ALARM: 0.3,
&nbsp;&nbsp;&nbsp;MEDIA: 0.5,
&nbsp;&nbsp;&nbsp;VOICE: 0,
&nbsp;&nbsp;&nbsp;RINGTONE: 1
}
</pre>

<h3>Adding a New Sound Profile</h3>

<p>A new sound profile is added with the current system values when the user clicks <strong>Add</strong> and enters the profile name.</p>
<p>The new profile is a copy of the <span style="font-family: Courier New,Courier,monospace">currentProfile</span> object with 2 additional fields:</p>
<ul>
<li><p><span style="font-family: Courier New,Courier,monospace">title</span>: Profile name</p></li>
<li><p><span style="font-family: Courier New,Courier,monospace">id</span>: Profile ID</p></li>
</ul>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function createProfile(title)
{
&nbsp;&nbsp;&nbsp;var currentProfileCopy = JSON.parse(JSON.stringify(currentProfile)),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id = profiles.length ? profiles[profiles.length - 1].id + 1 : 0;
&nbsp;&nbsp;&nbsp;currentProfileCopy.title = title;
&nbsp;&nbsp;&nbsp;currentProfileCopy.id = id;
&nbsp;&nbsp;&nbsp;profiles.push(currentProfileCopy);
&nbsp;&nbsp;&nbsp;/* Save the profiles array to local storage */
}
</pre>

<h3>Setting the Changed Volume</h3>

<p>The application sets the volume of the specified sound type when:</p>

<ul><li>The selected profile is activated:
<p>To activate a profile, the user clicks the radio button of the profile on the main screen. The application reads the profile values and updates system sound settings with these values.</p>
<ol>
<li><p>To retrieve a profile with the specified ID, use the <span style="font-family: Courier New,Courier,monospace">getProfile()</span> method:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function getProfile(id)
{
&nbsp;&nbsp;&nbsp;var i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profile = null;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; profiles.length; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profile = profiles[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (profile.id === id)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return profile;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return null;
}
</pre></li>
<li><p>In the <span style="font-family: Courier New,Courier,monospace">changeSystemSoundVolume()</span> method, set the specified volume value to the specified sound type using the <span style="font-family: Courier New,Courier,monospace">setVolume()</span> method:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function changeSystemSoundVolume(soundType, volume)
{
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentProfile[soundType] = volume;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.sound.setVolume(soundType, volume);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;catch (e)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Setting &#39; + soundType + &#39; error: &#39; + e.message);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li><p>To fill the system sound settings with the volume values from the specified profile, use the <span style="font-family: Courier New,Courier,monospace">changeSystemProfile()</span> method:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function changeSystemProfile(profile)
{
&nbsp;&nbsp;&nbsp;var i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;soundType = null;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; SOUND_TYPES.length; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;soundType = SOUND_TYPES[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeSystemSoundVolume(soundType, profile[soundType]);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li><p>To activate the profile with the specified ID, use the <span style="font-family: Courier New,Courier,monospace">setActive()</span> method:</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function setActive(id)
{
&nbsp;&nbsp;&nbsp;if (activeProfileId !== id)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeSystemProfile(getProfile(id));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activeProfileId = id;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
</ol>


</li>
<li>The sound type value of the active profile changes:

<p>If the user opens the active profile in the details screens and modifies its values, the change is applied to the system settings immediately. The <span style="font-family: Courier New,Courier,monospace">updateProfile()</span> method updates the specified sound type in the specified profile, provided it is the active profile. The method gets as parameters the ID of the profile, the name of the sound type, and the new value.</p>
<pre class="prettyprint">
/* js/models/soundProfile.js */
function updateProfile(profileId, soundType, volume)
{
&nbsp;&nbsp;&nbsp;var profile = getProfile(profileId);

&nbsp;&nbsp;&nbsp;if (profile)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profile[soundType] = volume;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (profile.id === activeProfileId)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeSystemSoundVolume(soundType, volume);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>



<h3>Deleting a Sound Profile</h3>

<p>To delete the profile with the specified ID:</p>

<pre class="prettyprint">
/* js/models/soundProfile.js */
function deleteProfile(id)
{
&nbsp;&nbsp;&nbsp;var index = getProfileIndex(id);
&nbsp;&nbsp;&nbsp;if (index !== -1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;profiles.splice(index, 1);
&nbsp;&nbsp;&nbsp;}
}

function getProfileIndex(profileId)
{
&nbsp;&nbsp;&nbsp;var i = 0;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; profiles.length; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (profiles[i].id === profileId)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return -1;
}
</pre>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>