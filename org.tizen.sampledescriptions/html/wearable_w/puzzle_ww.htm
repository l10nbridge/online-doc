<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=9" />
    <link rel="stylesheet" type="text/css" href="../css/styles.css" />
    <link rel="stylesheet" type="text/css" href="../css/snippet.css" />
    <script type="text/javascript" src="../scripts/snippet.js"></script>
    <script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
    <script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
    <title>Puzzle Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
    <div id="profile">
        <p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
    </div>
    <div id="toc_border"><div id="toc">
        <p class="toc-title">Related Info</p>
        <ul class="toc">
            <li><a href="../../../org.tizen.guides/html/web/tizen/system/system_info_w.htm">System Information Guide</a></li>
		 <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/systeminfo.html">System Information API</a></li>
          <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/application.html">Application API</a></li>
        </ul>
    </div></div>
</div>

<div id="container"><div id="contents"><div class="content">

<h1>Puzzle Sample Overview</h1>

<p>The Puzzle sample application demonstrates how you can create a puzzle game.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the Puzzle.</p>
<p class="figure">Figure: Puzzle screen</p>
<p align="center"><img alt="Puzzle screen" src="../images/puzzle_screen_1_ww.png" /> <img alt="Puzzle screen" src="../images/puzzle_screen_2_ww.png" /> <img alt="Puzzle screen" src="../images/puzzle_screen_3_ww.png" /></p> 
<p align="center"><img alt="Background" src="../images/puzzle_background_ww.png" /></p>
<p>The application opens with the main screen that shows a randomly selected image divided into 16 mixed-up pieces. Originally, the piece from the bottom right corner is removed to allow shifting the other pieces.</p>
<p>When the user taps a piece, it is moved to the location of the empty piece. The purpose of the game is to put all pieces in their right locations; when the game is solved, the full image is displayed.</p> 

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table border="1">
<caption>Table: Source files</caption>
    <tbody>
        <tr>
            <th>File name</th>
            <th>Description</th>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
            <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
            <td>This file contains the CSS styling for the application UI.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">img/</span></td>
            <td>This directory contains the application images used as the puzzle image and application icon.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
            <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td>
            <td>This file contains the code for the main application module used for initialization.</td>
        </tr>
        <tr>
            <td><span style="font-family: Courier New,Courier,monospace">js/systeminfo.js</span></td>
            <td>This file contains the battery state handling code.</td>
        </tr>
    </tbody>
</table>


<h2>Implementation</h2>

<h3>Defining the Application Layout</h3>

<p>To define the application layout and initialize the game screen:</p>

<ol><li>
<p>The application has only 1 page, and the static page structure is defined in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file. The selected image is placed in the <span style="font-family: Courier New,Courier,monospace">game</span> element. The element styles are specified in the <span style="font-family: Courier New,Courier,monospace">css/style.css</span> file. </p>

<pre class="prettyprint">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&nbsp;&nbsp;&nbsp;&lt;head&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta charset=&quot;utf-8&quot; /&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,height=device-height,user-scalable=no&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;Puzzle&lt;/title&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/style.css&quot;/&gt;
&nbsp;&nbsp;&nbsp;&lt;/head&gt;
&nbsp;&nbsp;&nbsp;&lt;body&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;transparent&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;game&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;background&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;pieces&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/systeminfo.js&quot;&gt;&lt;/script&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;script src=&quot;js/main.js&quot;&gt;&lt;/script&gt;
&nbsp;&nbsp;&nbsp;&lt;/body&gt;
&lt;/html&gt;
</pre></li>

<li>
<p>On a circular screen, a faded copy of selected image is also used as a background, as defined in the <span style="font-family: Courier New,Courier,monospace">css/style.css</span> file:</p>

<pre class="prettyprint">
#transparent
{
&nbsp;&nbsp;&nbsp;position: absolute;
&nbsp;&nbsp;&nbsp;left: 0;
&nbsp;&nbsp;&nbsp;right: 0;
&nbsp;&nbsp;&nbsp;top: 0;
&nbsp;&nbsp;&nbsp;bottom: 0;
&nbsp;&nbsp;&nbsp;opacity: .5;
}

#background
{
&nbsp;&nbsp;&nbsp;position: absolute;
&nbsp;&nbsp;&nbsp;left: 0;
&nbsp;&nbsp;&nbsp;top: 0;
&nbsp;&nbsp;&nbsp;display: none;
&nbsp;&nbsp;&nbsp;background-position: center center;
&nbsp;&nbsp;&nbsp;width: 100%;
&nbsp;&nbsp;&nbsp;height: 100%;
&nbsp;&nbsp;&nbsp;opacity: 0.1;
&nbsp;&nbsp;&nbsp;-webkit-filter: invert(100%);
}
</pre></li>

<li>The <span style="font-family: Courier New,Courier,monospace">main</span> module is responsible for the puzzle logic and for managing the UI. It updates the UI, listens to events, and initializes the systeminfo module responsible for checking the battery level. This module sets a random image to the puzzle and splits it to pieces, shuffles the pieces, and handles the tap event on puzzle pieces and animations.
<p>After initializing the main module, the application is ready for use and waits for user actions.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">init()</span> method initializes the game and binds events for the <strong>back</strong> key presses and tapping on a puzzle piece:</p>

<pre class="prettyprint">
/* js/main.js */
function init()
{
&nbsp;&nbsp;&nbsp;adjustGameElement();
&nbsp;&nbsp;&nbsp;holdRestart();

&nbsp;&nbsp;&nbsp;/* Add event listener for the back key */
&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;tizenhwkey&#39;, function onTizenhwkey(e)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39; &amp;&amp; !!systeminfo)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systeminfo.closeApplication();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;document.getElementById(&#39;pieces&#39;).addEventListener(&#39;click&#39;, function movePiece(event)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (event.target.classList.contains(&#39;piece&#39;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changePiecePosition(event.target);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">adjustGameElement()</span> method sets the piece size and position:</p>

<pre class="prettyprint">
/* js/main.js */
function adjustGameElement()
{
&nbsp;&nbsp;&nbsp;if (isScreenCircular)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjustGameElementForCircularScreen();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adjustGameElementForRectangularScreen();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>It is necessary to determine the screen type (circular or rectangle), and calculate the piece size and update game board element size accordingly. On a circular screen, the puzzle board is adjusted to be a square inscribed in a circle.</p>

<pre class="prettyprint">
/* js/main.js */
function adjustGameElementForRectangularScreen()
{
&nbsp;&nbsp;&nbsp;gameEl.style.height = window.innerHeight + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;pieceWidth = Math.floor(resolution.width / grid.x);
&nbsp;&nbsp;&nbsp;pieceHeight = Math.floor(resolution.height / grid.y);
}

function adjustGameElementForCircularScreen()
{
&nbsp;&nbsp;&nbsp;var sideLength = Math.floor(window.innerHeight / Math.sqrt(2));
&nbsp;&nbsp;&nbsp;gameElOffset = Math.floor((window.innerWidth - sideLength) / 2);

&nbsp;&nbsp;&nbsp;pieceWidth = Math.floor(sideLength / grid.x);
&nbsp;&nbsp;&nbsp;pieceHeight = Math.floor(sideLength / grid.y);

&nbsp;&nbsp;&nbsp;gameEl.style.width = pieceWidth * grid.x + 1 + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;gameEl.style.height = pieceHeight * grid.y + 1 + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;gameEl.style.marginLeft = gameElOffset + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;gameEl.style.marginTop = gameElOffset + &#39;px&#39;;
}
</pre></li>

<li>
<p>The user can restart the game by tapping on the game board and holding the tap for a time that is longer than the <span style="font-family: Courier New,Courier,monospace">HOLD_TIME</span> constant value:</p>

<pre class="prettyprint">
/* js/main.js */
function holdRestart()
{
&nbsp;&nbsp;&nbsp;gameEl.addEventListener(&#39;touchstart&#39;, onHoldStart);
}

function onHoldStart(event)
{
&nbsp;&nbsp;&nbsp;var startTime = new Date().getTime(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchEnd = function touchEnd()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gameEl.removeEventListener(&#39;touchend&#39;, touchEnd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onHoldEnd(startTime);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touches = event.touches.length;

&nbsp;&nbsp;&nbsp;/* Prevent reset during a single-touch hold */
&nbsp;&nbsp;&nbsp;singleTouch = touches &lt; 2;

&nbsp;&nbsp;&nbsp;gameEl.addEventListener(&#39;touchend&#39;, touchEnd);
}

function onHoldEnd(startTime)
{
&nbsp;&nbsp;&nbsp;var endTime = new Date().getTime();
&nbsp;&nbsp;&nbsp;if ((endTime - startTime) &gt; HOLD_TIME)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (interval !== null || singleTouch === true)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do not restart if shuffling in progress */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Single-touch hold must not cause restart (second condition) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>
<p>Start the game with the <span style="font-family: Courier New,Courier,monospace">start()</span> method:</p>

<pre class="prettyprint">
/* js/main.js */
function start(firstStart)
{
&nbsp;&nbsp;&nbsp;transparentEl.classList.remove(&#39;opaque&#39;);
&nbsp;&nbsp;&nbsp;clearGame();
&nbsp;&nbsp;&nbsp;setFile();
&nbsp;&nbsp;&nbsp;setBackground();
&nbsp;&nbsp;&nbsp;setFree(grid.x - 1, grid.y - 1);
&nbsp;&nbsp;&nbsp;createPieces();
&nbsp;&nbsp;&nbsp;shufflePieces();
&nbsp;&nbsp;&nbsp;if (firstStart === true)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systeminfo.init();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p>At the end, clear the game board (remove all pieces) with the <span style="font-family: Courier New,Courier,monospace">clearGame()</span> method:</p>

<pre class="prettyprint">
/* js/main.js */
function clearGame()
{
&nbsp;&nbsp;&nbsp;lock = false;
&nbsp;&nbsp;&nbsp;clearInterval(interval);
&nbsp;&nbsp;&nbsp;var pieces = document.getElementsByClassName(&#39;piece&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = pieces.length;

&nbsp;&nbsp;&nbsp;while (i)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i -= 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pieces[i].remove();
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>

<h3>Selecting the Puzzle Image</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">setFile()</span> method gets a random file from the <span style="font-family: Courier New,Courier,monospace">images/</span> folder and sets the file path to the <span style="font-family: Courier New,Courier,monospace">file</span> variable:</p>

<pre class="prettyprint">
/* js/main.js */
function setFile()
{
&nbsp;&nbsp;&nbsp;file = &#39;images/&#39; + resolution.width + &#39;x&#39; + resolution.height + &#39;/&#39; +
&nbsp;&nbsp;&nbsp;randomFile();
}

function randomFile()
{
&nbsp;&nbsp;&nbsp;var random = Math.floor(Math.random() * images.length);

&nbsp;&nbsp;&nbsp;if (images.length === 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return images[0];
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (random === lastRandom)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return randomFile();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;lastRandom = random;

&nbsp;&nbsp;&nbsp;return images[random];
}
</pre>

<p>The selected image is set as a background and its opacity is changed dynamically with the <span style="font-family: Courier New,Courier,monospace">animateElement()</span> method. The move of the puzzle piece is animated with the <span style="font-family: Courier New,Courier,monospace">requestAnimationFrame()</span> method.</p>

<pre class="prettyprint">
/* js/main.js */
function setBackground()
{
&nbsp;&nbsp;&nbsp;backgroundEl.style.backgroundImage = &#39;url(&#39; + file + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;backgroundEl.style.display = &#39;block&#39;;
&nbsp;&nbsp;&nbsp;backgroundEl.style.opacity = 1;
&nbsp;&nbsp;&nbsp;animateElement(backgroundEl, &#39;opacity&#39;, 0.4, &#39;&#39;);
&nbsp;&nbsp;&nbsp;backgroundEl.style.webkitFilter = &#39;invert(100%)&#39;;
&nbsp;&nbsp;&nbsp;transparentEl.style.backgroundImage = &#39;url(&#39; + file + &#39;)&#39;;
}

function animateElement(el, propertyName, targetValue, unit)
{
&nbsp;&nbsp;&nbsp;var animationStartTime = +new Date(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startValue = parseFloat(el.style[propertyName], 10),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;diff = targetValue - startValue,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tick;

&nbsp;&nbsp;&nbsp;el.style[propertyName] = startValue + unit;

&nbsp;&nbsp;&nbsp;tick = function tick()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var /* Time passed since the start (in milliseconds) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentAnimationTime = new Date() - animationStartTime,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Current progress (amount of animation which must be completed) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentProgress = currentAnimationTime / ANIMATION_TIME;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentProgress &gt;= 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el.style[propertyName] = targetValue + unit;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;el.style[propertyName] = (startValue + currentProgress * diff) + unit;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;requestAnimationFrame(tick);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;tick();
}
</pre>

<h3>Splitting the Image into Puzzle Pieces</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">setFree()</span> method defines which field is the empty one. During the game initialization process, the coordinates for the right bottom piece are passed to this method.</p>

<pre class="prettyprint">
/* js/main.js */
function setFree(x, y)
{
&nbsp;&nbsp;&nbsp;free.x = x;
&nbsp;&nbsp;&nbsp;free.y = y;
}
</pre>

<p>The other fields are filled with the shuffled image pieces:</p>

<pre class="prettyprint">
/* js/main.js */
function createPieces()
{
&nbsp;&nbsp;&nbsp;var i = 0, j = 0, piece, position;

&nbsp;&nbsp;&nbsp;for (i; i &lt; grid.y; i += 1)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j &lt; grid.x; j += 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i === (grid.y - 1) &amp;&amp; j === (grid.x - 1))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Leave the last piece empty */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece = document.createElement(&#39;div&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.className = &#39;piece match&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.x = j;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.y = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.startX = j;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.startY = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.number = i * grid.x + j;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.setAttribute(&#39;id&#39;, &#39;piece_&#39; + j + &#39;_&#39; + i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.step = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.width = (pieceWidth - 1) + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.height = (pieceHeight - 1) + &#39;px&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position = getPosition(piece.x, piece.y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.left = position.left + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.top = position.top + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.position = &#39;absolute&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.opacity = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.backgroundImage = &#39;url(&#39; + file + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.backgroundPosition = &#39;-&#39; + (gameElOffset + piece.x * (pieceWidth - 1) + j + 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+ &#39;px -&#39; + (gameElOffset + piece.y * (pieceHeight - 1) + i + 1) + &#39;px&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&#39;pieces&#39;).appendChild(piece);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3>Moving and Mixing Up the Puzzle Pieces</h3>

<p>After the board is ready, all puzzle pieces are randomly shuffled. A random piece moves into the free field.</p>

<p>When the user taps a piece, the following actions occur:</p>
<ol>
    <li><p>Piece position is updated to the empty field.</p></li>
    <li><p>Step counter value is incremented.</p></li>
    <li><p>Coordinates of the free field are updated.</p></li>
    <li><p>Application checks whether the user wins the game. If so, the final animation is started.</p></li>
</ol>
<pre class="prettyprint">
/* js/main.js */
function shufflePieces()
{
&nbsp;&nbsp;&nbsp;interval = setInterval(changePiecePosition, LONG_DELAY);
&nbsp;&nbsp;&nbsp;setTimeout(function stopChangingPiecePosition()
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(interval);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval = null;
&nbsp;&nbsp;&nbsp;}, grid.x * grid.y * SHUFFLE_TIME);
}

function changePiecePosition(piece)
{
&nbsp;&nbsp;&nbsp;var x = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position = null;

&nbsp;&nbsp;&nbsp;piece = piece || pickRandomNearest();
&nbsp;&nbsp;&nbsp;x = piece.x;
&nbsp;&nbsp;&nbsp;y = piece.y;
&nbsp;&nbsp;&nbsp;if (!lock &amp;&amp; canMove(x, y))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.classList.toggle(&#39;match&#39;, false);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position = getPosition(free.x, free.y);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Piece goes into the free field */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.x = free.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.y = free.y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animateElement(piece, &#39;left&#39;, position.left, &#39;px&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animateElement(piece, &#39;top&#39;, position.top, &#39;px&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onChangePiecePosition(piece, x, y);
&nbsp;&nbsp;&nbsp;}
}

function onChangePiecePosition(piece, left, top)
{
&nbsp;&nbsp;&nbsp;matchPosition(piece);
&nbsp;&nbsp;&nbsp;setStepCount(piece);
&nbsp;&nbsp;&nbsp;setFree(left, top);
&nbsp;&nbsp;&nbsp;checkWin();
&nbsp;&nbsp;&nbsp;lock = false;
}

function matchPosition(piece)
{
&nbsp;&nbsp;&nbsp;if (piece.x === piece.startX &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.y === piece.startY)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.classList.add(&#39;match&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function animate()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var position = getPosition(piece.x, piece.y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Do not blink if the piece was already moved away */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (position.left !== parseInt(piece.style.left, 10) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position.top !== parseInt(piece.style.top, 10))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piece.style.opacity = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animateElement(piece, &#39;opacity&#39;, 1, &#39;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, ANIMATION_TIME + 50); /* Wait for the animation to end */
&nbsp;&nbsp;&nbsp;}
}

function setStepCount(piece)
{
&nbsp;&nbsp;&nbsp;piece.step += 1;
}

function checkWin()
{
&nbsp;&nbsp;&nbsp;if (document.querySelectorAll(&#39;.piece:not(.match)&#39;).length === 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;finalAnimation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;backgroundEl.style.webkitFilter = &#39;none&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;animateElement(backgroundEl, &#39;opacity&#39;, 1, &#39;&#39;);
&nbsp;&nbsp;&nbsp;}
}

function finalAnimation()
{
&nbsp;&nbsp;&nbsp;var pieces = document.getElementsByClassName(&#39;piece&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piecesLen = pieces.length;

&nbsp;&nbsp;&nbsp;backgroundEl.style.display = &#39;none&#39;;
&nbsp;&nbsp;&nbsp;transparentEl.classList.add(&#39;opaque&#39;);

&nbsp;&nbsp;&nbsp;while (piecesLen)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piecesLen -= 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scheduleFinalPieceAnimation(pieces[piecesLen], piecesLen * SHORT_DELAY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;piecesLen === 0);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3>Managing the Battery State</h3>

<p>The application uses the systeminfo module to monitor the battery state:</p>

<pre class="prettyprint">
/* js/systeminfo.js */
init: function init()
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;if (typeof tizen === &#39;object&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeof tizen.systeminfo === &#39;object&#39;)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.systeminfo = tizen.systeminfo;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.checkBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.listenBatteryLowState();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.warn(&#39;tizen.systeminfo not available&#39;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If the battery state becomes low (less than 4%) and the charger is not connected, the application is notified and it closes:</p>

<pre class="prettyprint">
/* js/systeminfo.js */
closeApplication: function closeCurrentApplication()
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;catch (err)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;}
},

/* Add listener for battery change to low */
listenBatteryLowState: function listenBatteryLowState()
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.systeminfo.addPropertyValueChangeListener(&#39;BATTERY&#39;, function change(battery)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!battery.isCharging)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.closeApplication();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{lowThreshold: 0.04},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onError(err)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;catch (err)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;}
},

/* Check low battery state */
checkBatteryLowState: function checkBatteryLowState()
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;try
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.systeminfo.getPropertyValue(&#39;BATTERY&#39;, function onGetBatteryInfo(battery)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (battery.level &lt; 0.04 &amp;&amp; !battery.isCharging)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.closeApplication();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, null);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;catch (err)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error: &#39;, err.message);
&nbsp;&nbsp;&nbsp;}
},
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>

</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>