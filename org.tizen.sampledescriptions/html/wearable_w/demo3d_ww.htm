<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Demo3D Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
		   <li><a href="../../../org.tizen.guides/html/web/w3c/supplement/webgl_w.htm">WebGL - Khronos Guide</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#webgl">WebGL - Khronos API</a></li>		   
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Demo3D Sample Overview</h1> 
  <p>The Demo3D sample application demonstrates how you can present examples of 3D effects implemented through the WebGL API and the ThreeJS library.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p> 
 <p>The following figure illustrates the main screens of the Demo3D.</p> 
  <p class="figure">Figure: Demo3D screens</p> 
  <p align="center"><img alt="Demo3D screens" src="../images/demo3d_ww.png" /> </p> 

  
   <p>The application opens with a main menu, where you can select various scenes depicting 3D examples. The following scenes are available:</p>
  <ul>
  <li>Animated randomly colored cube</li>
<li>Animated textured cube</li>
<li>Box with a lighting bulb rotating around it</li>
<li>Moving camera</li>
<li>Two 3D models exported from files</li>
  </ul>


  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 

<p>The application uses a simple MV (Model View) architecture, where the core part determines the architecture and the app part determines the application behavior. The <span style="font-family: Courier New,Courier,monospace">core.js</span> file implements a simple AMD (Asynchronous Module Definition) and specifies module defining.</p>  
  
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
	<tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/</span></td>
    <td>This directory contains the CSS styling for the application UI.</td>
  </tr>  
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td> 
     <td>This directory contains the application code.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td> 
     <td>This directory contains the application framework.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/</span></td> 
     <td>This directory contains the helper functions used by the view and model modules.</td> 
    </tr>	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td> 
     <td>This directory contains the files implementing the application views.</td> 
    </tr>	
   </tbody> 
  </table> 
  
<h2>Implementation</h2>

<p>The application illustrates sample 3D scenes rendered by WebGL. In order to simplify the implementation and focus on the objects that must be rendered, the ThreeJS library is also used.</p>

<h3>Defining the Application Layout</h3>
<p>The Demo3D sample consists of 3D scene pages and the main page containing anchors to the 3D scene pages. All pages are defined in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file.</p> 
 
<p>The following HTML code illustrates definition of the main screen:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page ui-page-active&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Demo 3D&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul class=&quot;ui-listview&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;colored-cube-anchor&quot; href=&quot;#cube&quot;&gt;Colored mesh&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a id=&quot;textured-cube-anchor&quot; href=&quot;#cube&quot;&gt;Textured mesh&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#light&quot;&gt;Light &amp; shadow&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#camera&quot;&gt;Camera move&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#models-list&quot;&gt;3D models&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;   
</pre>
<p>All 3D scene pages are defined in the same way, presented by the following HTML code. The actual 3D scene is rendered in a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">ui-content</span> class.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;ui-page scene-3d-page&quot; id=&quot;light&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;header class=&quot;ui-header&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2 class=&quot;ui-title&quot;&gt;Light &amp; shadow&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/header&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-content&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<h3>Managing the Life-cycle</h3>

<p>All screens displaying 3D scenes have a common part, which is a mechanism of initializing the managing the 3D scene. When a page is displayed, a scene is rendered frame by frame, to make an animation. When the page is closed, the animation loop is stopped. This mechanism is the life-cycle of the 3D scene and it is defined as a module in the <span style="font-family: Courier New,Courier,monospace">js/helpers/lifecycle.js</span> file.</p>

<p>To create the scene life-cycle:</p>

<ol><li>Create the <span style="font-family: Courier New,Courier,monospace">initPage()</span> method that takes 3 parameters:
<ul><li><span style="font-family: Courier New,Courier,monospace">page</span>: HTML element referencing the page</li>
<li><span style="font-family: Courier New,Courier,monospace">initSceneFn</span>: Custom method initializing the scene (creating the scene and all elements in it)</li>
<li><span style="font-family: Courier New,Courier,monospace">renderSceneFn</span>: Custom method rendering the scene</li></ul>
<pre class="prettyprint">
/* js/helpers/lifecycle.js */
function initPage(page, initSceneFn, renderSceneFn) {}
</pre>
<p>This method detects whether the page is displayed or hidden. If it is displayed, the <span style="font-family: Courier New,Courier,monospace">renderSceneFn()</span> method is called in a loop to make the 3D animation. Otherwise, the loop is stopped.</p>
</li>
<li>Add page listeners in the <span style="font-family: Courier New,Courier,monospace">initPage()</span> method:
<pre class="prettyprint">
/* js/helpers/lifecycle.js */
page.addEventListener(&#39;pageshow&#39;, onPageShow, false);
page.addEventListener(&#39;pagehide&#39;, onPageHide, false);
</pre></li>
<li>Implement the <span style="font-family: Courier New,Courier,monospace">onPageShow()</span> and <span style="font-family: Courier New,Courier,monospace">onPageHide()</span> methods.
<p>The <span style="font-family: Courier New,Courier,monospace">onPageShow()</span> method checks whether the page was initialized and, if not, initializes it, and starts the animation loop by setting the <span style="font-family: Courier New,Courier,monospace">animationRunning</span> variable to <span style="font-family: Courier New,Courier,monospace">false</span>. The <span style="font-family: Courier New,Courier,monospace">onPageHide()</span> method stops the animation loop by setting the <span style="font-family: Courier New,Courier,monospace">animationRunning</span> variable to <span style="font-family: Courier New,Courier,monospace">true</span>.</p>
<pre class="prettyprint">
/* js/helpers/lifecycle.js */
var sceneInitialized = false,
&nbsp;&nbsp;&nbsp;&nbsp;animationRunning = false;

function onPageShow() 
{
&nbsp;&nbsp;&nbsp;if (!sceneInitialized) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initSceneFn();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sceneInitialized = true;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;animationRunning = true;
&nbsp;&nbsp;&nbsp;animate();
}

function onPageHide() 
{
&nbsp;&nbsp;&nbsp;animationRunning = false;
}
</pre>
</li>

<li><p>The animation loop is based on the <span style="font-family: Courier New,Courier,monospace">window.requestAnimationFrame()</span> method, which does not render the scene more often than defined by the <span style="font-family: Courier New,Courier,monospace">ANIMATION_FRAMES_DELAY</span> constant value delay.</p>

<p>The loop continues and executes the <span style="font-family: Courier New,Courier,monospace">renderSceneFn()</span> method as long as the <span style="font-family: Courier New,Courier,monospace">animationRunning</span> variable remains <span style="font-family: Courier New,Courier,monospace">true</span>.</p>

<pre class="prettyprint">
/* js/helpers/lifecycle.js */
var timestamp = 0, /* Timestamp of last scene rendering */
&nbsp;&nbsp;&nbsp;&nbsp;animationRunning = false, /* Indicates whether the animation is running */
&nbsp;&nbsp;&nbsp;&nbsp;renderSceneFn = null, /* Rendering method */
&nbsp;&nbsp;&nbsp;&nbsp;ANIMATION_FRAMES_DELAY = 15; /* Minimum delay between 2 animation frames */

function animate() 
{
&nbsp;&nbsp;&nbsp;var currentTimestamp = new Date().getTime();
&nbsp;&nbsp;&nbsp;if (animationRunning &amp;&amp; renderSceneFn) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.requestAnimationFrame(animate);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentTimestamp - timestamp &gt; ANIMATION_FRAMES_DELAY) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;renderSceneFn();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;timestamp = currentTimestamp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ol>

<h3>Creating a 3D Scene</h3>

<p>Each 3D scene created by the ThreeJS library must consist of at least the following elements:</p>
<ul><li>Scene
<p>To create the scene, which is a container for the 3D objects:</p>
<pre class="prettyprint">
/* js/views/cube.js */
var scene = null;

function createScene() 
{
&nbsp;&nbsp;&nbsp;scene = new THREE.Scene();
}
</pre></li>
<li>Camera
<p>To create the camera and set its initial position:</p>
<pre class="prettyprint">
/* js/views/cube.js */
var camera = null;

function createCamera() 
{
&nbsp;&nbsp;&nbsp;camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
&nbsp;&nbsp;&nbsp;camera.position.y = 150;
&nbsp;&nbsp;&nbsp;camera.position.z = 500; 
}
</pre>
</li>
<li>Renderer
<p>To create the renderer, which is an object that creates a canvas element and renders the scene in this canvas, and to configure it and add the canvas to the content element of the page:</p>
<pre class="prettyprint">
/* js/views/cube.js */
var content = null, /* Content of the page (HTML div) */
&nbsp;&nbsp;&nbsp;&nbsp;renderer = null;

function createRenderer() 
{
&nbsp;&nbsp;&nbsp;renderer = new THREE.WebGLRenderer({antialias: true});
&nbsp;&nbsp;&nbsp;renderer.setClearColor(0);
&nbsp;&nbsp;&nbsp;renderer.setPixelRatio(window.devicePixelRatio);
&nbsp;&nbsp;&nbsp;renderer.setSize(content.clientWidth, content.clientHeight);
&nbsp;&nbsp;&nbsp;renderer.domElement.classList.add(&#39;scene&#39;);
&nbsp;&nbsp;&nbsp;content.appendChild(renderer.domElement); /* Add canvas to the page content */
}
</pre>
<p>The renderer is initialized with the following parameters:</p>
<ul><li>Antialiasing is set to <span style="font-family: Courier New,Courier,monospace">true</span>, making the objects have smooth edges.</li>
<li>Clear color is set to 0, making the background black.</li>
<li>Pixel ratio and size are set to fit to the parent HTML element.</li></ul>
</li></ul>

<h3>Initializing the Page</h3>

<p>When the methods for creating the scene elements are defined, you can initialize the page by creating a  scene, camera, and renderer. The animation frames are created by rendering the scene by the renderer.</p>
<pre class="prettyprint">
/* js/views/cube.js */
var page = null; /* Reference to the page HTML element */

function initScene() 
{
&nbsp;&nbsp;&nbsp;createScene();
&nbsp;&nbsp;&nbsp;createCamera();

&nbsp;&nbsp;&nbsp;createRenderer();
}

function render() 
{
&nbsp;&nbsp;&nbsp;/* You can change scene parameters, element positions and so on */
&nbsp;&nbsp;&nbsp;renderer.render(scene, camera);
}

lifecycle = lifecycleHelper.initPage(page, initScene, render);
</pre>

<h3>Creating the Cube</h3>

<p>To create a 3D object, like a cube, you must create a geometry and material, and join them together to make the object:</p>

<ol><li>Create the cube geometry with a size defined by the <span style="font-family: Courier New,Courier,monospace">EDGE_LENGTH</span> constant.</li>
<li>Create the material using the <span style="font-family: Courier New,Courier,monospace">THREE.MeshBasicMaterial()</span> method. This is the simplest type of material, but it is enough for this example.</li>
<li>For each wall of the cube, set a random color.</li>
<li>Add the cube to the scene.</li></ol>

<pre class="prettyprint">
/* js/views/cube.js */
function createColoredCube() 
{
&nbsp;&nbsp;&nbsp;var EDGE_LENGTH = 200;    
&nbsp;&nbsp;&nbsp;var geometry = new THREE.BoxGeometry(EDGE_LENGTH, EDGE_LENGTH, EDGE_LENGTH),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;material = new THREE.MeshBasicMaterial({vertexColors: THREE.FaceColors,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;overdraw: 0.5}),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0, len = 0, hex = 0;

&nbsp;&nbsp;&nbsp;for (i = 0, len = geometry.faces.length; i &lt; len; i += 2) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hex = Math.random() * 0xffffff;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry.faces[i].color.setHex(hex);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geometry.faces[i + 1].color.setHex(hex);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return new THREE.Mesh(geometry, material);
}

function createCube() 
{
&nbsp;&nbsp;&nbsp;cube = createColoredCube();

&nbsp;&nbsp;&nbsp;scene.add(cube);
}
</pre>

<h3>Texturing</h3>

<p>To create a textured cube, you must create a different type of material using the <span style="font-family: Courier New,Courier,monospace">THREE.MeshFaceMaterial()</span> method. The following method creates a material of the cube built from 3 textures:</p>
<pre class="prettyprint">
/* js/views/cube.js */
var texturedMaterial; /* Here is textured material */

function initTexturedMaterial() 
{
&nbsp;&nbsp;&nbsp;var materials = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture(&#39;img/wall-1.jpg&#39;)}),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture(&#39;img/wall-2.jpg&#39;)}),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshBasicMaterial({map: THREE.ImageUtils.loadTexture(&#39;img/wall-3.jpg&#39;)})
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cubeWalls = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[1],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[1],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[2],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;materials[2]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;];

&nbsp;&nbsp;&nbsp;texturedMaterial = new THREE.MeshFaceMaterial(cubeWalls);
}
</pre>

<p>When you have the <span style="font-family: Courier New,Courier,monospace">texturedMaterial</span> object, you can create a textured cube in a similar way as the colored cube:</p>

<pre class="prettyprint">
/* js/views/cube.js */
function createTexturedCube() 
{
&nbsp;&nbsp;&nbsp;var geometry = new THREE.BoxGeometry(EDGE_LENGTH, EDGE_LENGTH, EDGE_LENGTH);

&nbsp;&nbsp;&nbsp;return new THREE.Mesh(geometry, texturedMaterial);
}
</pre>

<h3>Rotating a Cube</h3>

<p>To animate objects, you must change their properties in the <span style="font-family: Courier New,Courier,monospace">render()</span> method defined above. In the following version of this method, the <span style="font-family: Courier New,Courier,monospace">rotationStep()</span> method is called before rendering:</p>
<pre class="prettyprint">
function render() 
{
&nbsp;&nbsp;&nbsp;rotationStep();
&nbsp;&nbsp;&nbsp;renderer.render(scene, camera);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">rotationStep()</span> method calculates the rotation value of the cube and sets this value to the <span style="font-family: Courier New,Courier,monospace">rotation</span> property:</p>
<pre class="prettyprint">
function rotationStep() 
{
&nbsp;&nbsp;&nbsp;cube.rotation.y += (angleY - cube.rotation.y) * EASING_FRACTION;
&nbsp;&nbsp;&nbsp;cube.rotation.z += Z_VELOCITY;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">Z_VELOCITY</span> and <span style="font-family: Courier New,Courier,monospace">EASING_FRACTION</span> are constant values, and the <span style="font-family: Courier New,Courier,monospace">angleY</span> variable contains the desired angle of the Y axis. Multiplying the difference value by the <span style="font-family: Courier New,Courier,monospace">EASING_FRACTION</span> creates an easing effect.</p>

<h3>Creating Lights and Shadows</h3>

<p>If a scene is supposed to contain light, the scene objects must have light-absorbing materials, such as <span style="font-family: Courier New,Courier,monospace">THREE.MeshLambertMaterial()</span> or <span style="font-family: Courier New,Courier,monospace">THREE.MeshPhongMaterial()</span> (information about differences between them can be found in the ThreeJS documentation). When there is a light in the scene, objects can receive and cast shadows.</p>

<p>To create a scene that supports lights and shadows:</p>
<ol><li>Add lights to the scene.</li>
<li>Create 3D objects with materials that work with lights.</li>
<li>Change renderer properties.</li></ol>

<p>In this sample, a scene is created with 2 different light sources: ambient and directional. The scene has a plane (floor) and a box standing on the plane. The box casts a shadow at the floor.</p>

<p>To add lights to the scene:</p>

<ol><li>The floor object receives shadows, but does not cast them. The following method creates a plane with a light-absorbing material and adds it to the scene:
<pre class="prettyprint">
/* js/views/light.js */
var FLOOR_SIZE = 2000,
&nbsp;&nbsp;&nbsp;&nbsp;FLOOR_COLOR = 0x076100;

function createFloor() 
{
&nbsp;&nbsp;&nbsp;var geometry = new THREE.PlaneGeometry(FLOOR_SIZE, FLOOR_SIZE),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;material = new THREE.MeshLambertMaterial({color: FLOOR_COLOR}),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;floor = new THREE.Mesh(geometry, material);

&nbsp;&nbsp;&nbsp;floor.position.set(0, 0, 0);
&nbsp;&nbsp;&nbsp;floor.rotation.x = -Math.PI / 2;
&nbsp;&nbsp;&nbsp;floor.receiveShadow = true;
&nbsp;&nbsp;&nbsp;floor.castShadow = false;
&nbsp;&nbsp;&nbsp;scene.add(floor);
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">FLOOR_SIZE</span> and <span style="font-family: Courier New,Courier,monospace">FLOOR_COLOR</span> are constant values.</p></li>

<li>The box on the floor must have different properties. It must cast a shadow (on a floor), but not receive it. The following method illustrates how to create such a box:
<pre class="prettyprint">
/* js/views/light.js */
var CUBE_COLOR = 0xff0000,
&nbsp;&nbsp;&nbsp;&nbsp;CUBE_EDGE_LENGTH = 100;

function createCube() 
{
&nbsp;&nbsp;&nbsp;var cube = new THREE.Mesh(new THREE.CubeGeometry(CUBE_EDGE_LENGTH, CUBE_EDGE_LENGTH, CUBE_EDGE_LENGTH),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new THREE.MeshPhongMaterial({color: CUBE_COLOR}));
&nbsp;&nbsp;&nbsp;cube.castShadow = true;
&nbsp;&nbsp;&nbsp;cube.receiveShadow = false;
&nbsp;&nbsp;&nbsp;cube.position.y = 50;
&nbsp;&nbsp;&nbsp;scene.add(cube);
}
</pre></li>

<li>The scene has 2 different types of lightning:
<ul><li>The ambient light is a fixed-intensity and fixed-color light source that affects all objects in the scene equally.</li>
<li>The directional light is a light source that illuminates all objects equally from a given direction, like an area light of infinite size and infinite distance from the scene.</li></ul>

<p>The following method creates both the lights and adds them to the scene. The ambient light gets the color as a parameter. The directional light gets a color and intensity as input parameters. Also 3 other parameters are set to the directional light: shadow map width and height (in pixels) and shadow darkness (the darkness of shadow casted by this light, from 0 to 1).</p>
<pre class="prettyprint">
/* js/views/light.js */
var AMBIENT_LIGHT_COLOR = 0x5,
&nbsp;&nbsp;&nbsp;&nbsp;DIRECTIONAL_LIGHT_COLOR = 0xdfebff,
&nbsp;&nbsp;&nbsp;&nbsp;DIRECTIONAL_LIGHT_INTENSITY = 0.75,
&nbsp;&nbsp;&nbsp;&nbsp;SHADOW_MAP = 512,
&nbsp;&nbsp;&nbsp;&nbsp;SHADOW_DARKNESS = 0.7;

function createLights() 
{
&nbsp;&nbsp;&nbsp;scene.add(new THREE.AmbientLight(AMBIENT_LIGHT_COLOR));

&nbsp;&nbsp;&nbsp;directionalLight = new THREE.DirectionalLight(DIRECTIONAL_LIGHT_COLOR, DIRECTIONAL_LIGHT_INTENSITY);

&nbsp;&nbsp;&nbsp;directionalLight.shadowMapWidth = SHADOW_MAP;
&nbsp;&nbsp;&nbsp;directionalLight.shadowMapHeight = SHADOW_MAP;
&nbsp;&nbsp;&nbsp;directionalLight.shadowDarkness = SHADOW_DARKNESS;

&nbsp;&nbsp;&nbsp;scene.add(directionalLight);
}
</pre></li>

<li>To see the shadows on the scene, the renderer must be properly configured. The following method sets 3 parameters of the created renderer: the <span style="font-family: Courier New,Courier,monospace">shadowMapEnabled</span> enabling shadows, and the <span style="font-family: Courier New,Courier,monospace">shadowMapType</span> and <span style="font-family: Courier New,Courier,monospace">shadowMapSoft</span> that make the shadows smooth.
<pre class="prettyprint">
/* js/views/light.js */
function createRenderer() 
{
&nbsp;&nbsp;&nbsp;renderer = new THREE.WebGLRenderer({antialias: true});

&nbsp;&nbsp;&nbsp;renderer.shadowMapEnabled = true;
&nbsp;&nbsp;&nbsp;renderer.shadowMapType = THREE.PCFSoftShadowMap;
&nbsp;&nbsp;&nbsp;renderer.shadowMapSoft = true;
}
</pre></li></ol>

<h3>Moving the Camera</h3>

<p>To move the camera, you must change its parameters: position, rotate, or both. In the scene illustrating a moving camera, the camera is moving along a curve. Its position and angle are changed frame by frame. The following method recalculates the position of the camera and the point that the camera is looking at:</p>
<pre class="prettyprint">
/* js/views/camera.js */
var centerPoint = 
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x: 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y: 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z: 0
&nbsp;&nbsp;&nbsp;&nbsp;},  
&nbsp;&nbsp;&nbsp;&nbsp;yAngle = 0;

function recalculatePositions() 
{
&nbsp;&nbsp;&nbsp;var sin = Math.sin(yAngle),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cos = Math.cos(yAngle);

&nbsp;&nbsp;&nbsp;camera.position.x += VELOCITY * sin;
&nbsp;&nbsp;&nbsp;camera.position.z -= VELOCITY * cos;
&nbsp;&nbsp;&nbsp;centerPoint.x = camera.position.x + RADIUS * sin;
&nbsp;&nbsp;&nbsp;centerPoint.z = camera.position.z - RADIUS * cos;
&nbsp;&nbsp;&nbsp;camera.lookAt(centerPoint);
}
</pre>

<p>In the above code, the <span style="font-family: Courier New,Courier,monospace">yAngle</span> is the Y axis angle of the camera object. The camera moves along the arc of a radius defined by the <span style="font-family: Courier New,Courier,monospace">RADIUS</span> constant value, so its position is changed, but the point the camera looks at moves too.</p>

<p>Call the above method in the <span style="font-family: Courier New,Courier,monospace">render()</span> method:</p>
<pre class="prettyprint">
/* js/views/camera.js */
function render() 
{
&nbsp;&nbsp;&nbsp;recalculatePositions();

&nbsp;&nbsp;&nbsp;renderer.render(scene, camera);
}
</pre>

<h3>Loading Models</h3>

<p>ThreeJS allows you to load 3D models from external files. To do it, you must use the <span style="font-family: Courier New,Courier,monospace">Loader</span> object. There are many loaders for different types of models. This sample uses the JSONLoader to load a model defined in the JSON file.</p> 

<p>The following method loads a model from a file located under the specified path, scales it by the specified scale value, and adds it to the scene:</p>
<pre class="prettyprint">
/* js/views/camera.js */
function loadModel3D(path, scale) 
{
&nbsp;&nbsp;&nbsp;new THREE.JSONLoader().load(path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onLoaded(geometry, materials) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model3D = new THREE.Mesh(geometry, new THREE.MeshFaceMaterial(materials));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model3D.rotation.y = Math.PI / 4; /* Rotate a model */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model3D.scale.set(scale, scale, scale); /* Scale a model */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scene.add(model3D); /* Add a model to the scene */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
}
</pre>
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
