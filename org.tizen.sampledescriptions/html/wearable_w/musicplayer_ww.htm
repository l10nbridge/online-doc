<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>MusicPlayer Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
           <li><a href="../../../org.tizen.guides/html/web/tizen/content/content_w.htm">Content Guide</a></li> 
		   <li><a href="../../../org.tizen.ui.practices/html/web/tau/guides_tau_w.htm">UI Practices TAU Guide</a></li>		   
           <li><a href="../../../org.tizen.web.apireference/html/device_api/wearable/tizen/content.html">Content API</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/ui_fw_api/ui_fw_api_cover.htm">Tizen Advanced UI Framework</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>MusicPlayer Sample Overview</h1> 
  
 <p>The MusicPlayer sample application demonstrates how you can implement the Tizen official Music Player application with full functionality using the Tizen Content API and the moreoption winset of TAU.</p>
 <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Web Sample Applications</a>.</p>
 <p>The following figure illustrates the main screens of the MusicPlayer.</p>
 <p class="figure">Figure: MusicPlayer screens</p>
 <p align="center">
     <img alt="MusicPlayer screen" src="../images/musicplayer_ww1.png" />
     <img alt="MusicPlayer screen" src="../images/musicplayer_ww2.png" />
     <img alt="MusicPlayer screen" src="../images/musicplayer_ww3.png" />
 </p>
 <p>The application opens with the main screen that shows the control buttons and information of the current album:</p>
 
 <ul>
 <li>
 <p>When the next or previous button is touched, the screen changes to the next or previous track information. If there is no audio file, the <strong>No tracks</strong> text is displayed.</p></li>
 <li>
 <p>When the <strong>More options</strong> button (3 dots on the right edge) is touched, the moreoption winset is shown.</p>
 <p>Using the More options selector, the application can change its status between Gear or mobile.</p>
 </li>
 </ul>

    
 <h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be set:</p>
         <ul>
         <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/content.read</span></li>
         <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/content.write</span></li>
         </ul>


 <h2>Source Files</h2>
 <p>You can create and view the sample application project including the source files in the IDE.</p>
 <table border="1">
 <caption>Table: Source files</caption>
 <tbody>
 <tr>
 <th>File name</th>
 <th>Description</th>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
 <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
 <td>This file contains the CSS styling for the application UI.</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
 <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td>
 <td>This file starts the application and music controls.</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">js/getcontent.js</span></td>
 <td>This file gets audio information from the target or emulator audio files.</td>
 </tr>
 <tr>
 <td><span style="font-family: Courier New,Courier,monospace">js/moreoptions.js</span></td>
 <td>This file contains the moreoption winset of the TAU (Tizen Advanced UI) code.</td>
 </tr>
 </tbody>
 </table>
    
    
 <h2>Implementation</h2>


 <h3>Defining the Application Layout</h3>
    
<p>The application has 2 screens (main and More options popup), whose content is defined in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file:</p>

<ol>
 <li>
 <p>The main screen shows the audio information (or no album information).</p>
 <p>There are 3 buttons (play, next, and previous), 2 strings (title and artist) and the <strong>More options</strong> button.</p>
 <p>A header section must be added for the <strong>More options</strong> button using the TAU <span style="font-family: Courier New,Courier,monospace">ui-has-more</span> class.</p>
 <p>The other elements are defined in the content section.</p>
 <pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;!--Header of the main page for the More options button--&gt;
&lt;header id=&quot;music_player_header&quot; class=&quot;ui-header ui-has-more&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;button type=&quot;button&quot; class=&quot;ui-more ui-icon-overflow&quot;&gt;&lt;/button&gt;
&lt;/header&gt;

&lt;!--Main page content--&gt;
&lt;div id=&quot;music_player_content&quot; class=&quot;ui-content content-padding&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_background&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_now_playing&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_play&quot; class=&quot;play btn&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;audio id=&quot;myaudio&quot;&gt;&lt;/audio&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_prev&quot; class=&quot;btn&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_next&quot; class=&quot;btn&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_device&quot; class=&quot;gear&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_title&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;div_sub_title&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;</pre>
 </li>

 <li>
 <p>This sample does not use the header area. Change the height of the header to 0 pixels in the <span style="font-family: Courier New,Courier,monospace">style.css</span> file:</p>
 <pre class="prettyprint">
&lt;!--css/style.css--&gt;
#music_player_header 
{
&nbsp;&nbsp;&nbsp;height: 0px;
}</pre>
 </li>

 <li><p>When the <strong>More options</strong> button is clicked, a selector is opened as a popup. To set items as selector options, set the icons and data titles for them.</p>
 <pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;moreoptionsPopupCircle&quot; class=&quot;ui-popup&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;selector&quot; class=&quot;ui-selector&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item repeat-all&quot; data-title=&quot;Repeat All&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item device-gear&quot; data-title=&quot;Device Gear&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item favorite-icon&quot; data-title=&quot;Favorite&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item shuffle-on&quot; data-title=&quot;Shuffle On&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item bt-headset&quot; data-title=&quot;BT Headset&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-item delete-icon&quot; data-title=&quot;Delete Icon&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;</pre>
 </li>
    
 <li>
 <p>As an example, the following sample is made using the <span style="font-family: Courier New,Courier,monospace">&#39;device-gear&#39;</span> CSS class for the device gear selector.</p>
 <p>The class sets an icon image and it is used before the item is selected.</p>
 <pre class="prettyprint">
&lt;!--css/style.css--&gt;
.device-gear::before 
{
&nbsp;&nbsp;&nbsp;position: absolute;
&nbsp;&nbsp;&nbsp;content: &quot;&quot;;
&nbsp;&nbsp;&nbsp;top: 0;
&nbsp;&nbsp;&nbsp;left: 0;
&nbsp;&nbsp;&nbsp;width: 100%;
&nbsp;&nbsp;&nbsp;height: 100%;
&nbsp;&nbsp;&nbsp;-webkit-mask-image: url(../image/More_option/music_more_opt_select_device_gear.png);
&nbsp;&nbsp;&nbsp;-webkit-mask-size: 100% 100%;
&nbsp;&nbsp;&nbsp;background-color: rgb(89, 88, 91);
&nbsp;&nbsp;&nbsp;-webkit-mask-repeat: no-repeat;
&nbsp;&nbsp;&nbsp;display: block;
}</pre>
 </li>
     
 <li><p>After the item is selected, the following class is used, and the item&#39;s background color is changed.</p>
 <pre class="prettyprint">
&lt;!--css/style.css--&gt;
.ui-item.ui-item-active::before
{
&nbsp;&nbsp;&nbsp;background-color: #3261ba;
}</pre>
 </li>
</ol>


 <h3>Getting Media or Audio File Information</h3>

<p>This sample application shows audio file information in the target device. It gets the information using the Content API:</p>

<ol>
 <li>
 <p>To get information, use the <span style="font-family: Courier New,Courier,monospace">content.find()</span>  method with the following parameters to find content that satisfies the conditions set by a filter:</p>
  <ul>
   <li><span style="font-family: Courier New,Courier,monospace">successCallback()</span>: Callback method to be invoked when the content has been retrieved.</li>
   <li><span style="font-family: Courier New,Courier,monospace">errorCallback [optional] [nullable]</span>: Callback method to be invoked when an error has occurred.</li>
   <li><span style="font-family: Courier New,Courier,monospace">directoryId [optional] [nullable]</span>: Directory ID that is used to select the content to retrieve in a specified directory.</li>
   <li><span style="font-family: Courier New,Courier,monospace">filter [optional] [nullable]</span>: Filter that is used to select the content to retrieve.</li>
   <li><span style="font-family: Courier New,Courier,monospace">sortMode [optional] [nullable]</span>: Sort order that is used to determine the order in which the contents are returned.</li>
  </ul>
<pre class="prettyprint">
/* js/getcontent.js */
getcontent.refreshMusics = function refreshMusics() 
{
&nbsp;&nbsp;&nbsp;refreshed = false;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.content.find(contentFindSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contentFindError,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortMode);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&quot;Content Find ERROR: &quot;, error.message);
&nbsp;&nbsp;&nbsp;}
};</pre>
 </li>
    
 <li>
 <p>Define the filter and sort mode like in the following example to only find the audio type content and then sort it in the ascending order based on the title name:</p>
<pre class="prettyprint">
/* js/getcontent.js */
/* AttributeFilter(DOMString attributeName, optional FilterMatchFlag? matchFlag, optional any matchValue); */
filter = new tizen.AttributeFilter(&#39;type&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;EXACTLY&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;AUDIO&#39;),

/* SortMode(DOMString attributeName, optional SortModeOrder? order); */
sortMode = new tizen.SortMode(&#39;title&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;ASC&#39;
),</pre>
 </li>
    
 <li>
 <p>When the content is found, the <span style="font-family: Courier New,Courier,monospace">contentFindSuccess()</span> callback is called. It pushes the information to the <span style="font-family: Courier New,Courier,monospace">musicPlayList</span> array through a detailed classification.</p>
 <p>The content is classified based on the album name, artist name, title name, file name, audio play time, file path, and thumbnail path.</p>

<pre class="prettyprint">
/* js/getcontent.js */
function contentFindSuccess(items) 
{
&nbsp;&nbsp;&nbsp;var length = items.length, /* Item's length */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item = null;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Fill the musicPlayList array with the new audio file information */
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item = items[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Push this information to the musicPlayList array */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicPlayList.push(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;albumName&#39;: item.album, /* Album name */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;artistName&#39;: item.artists, /* Artist name */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;titleName&#39;: item.title, /* Title name */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;fileName&#39;: item.name, /* File name (except for the extension) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;duration&#39;: item.duration, /* Total play time */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;musicFilePath&#39;: item.contentURI, /* File path */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;thumbnailFilePath&#39;: item.thumbnailURIs[0] /* Thumbnail path */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;refreshed = true;
}</pre>
</li>
</ol>


 <h3>Displaying the Audio Information on the Screen</h3>

<p>The main page consists of 3 sections: the audio title, audio artist, and background image.</p>
<p>To display the audio information:</p>
<ol>
 <li>
 <p>Call the <span style="font-family: Courier New,Courier,monospace">refreshMusic()</span> and <span style="font-family: Courier New,Courier,monospace">initGetMusic()</span> methods to get the audio information:</p>
<pre class="prettyprint">
/* js/app.js */
function init() 
{
&nbsp;&nbsp;&nbsp;globalPage = &quot;main&quot;; /* Current page is the &quot;main&quot; page */
&nbsp;&nbsp;&nbsp;deviceStatus = &quot;Device Gear&quot;; /* At first, the device status is &quot;gear&quot; */
&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;getcontent.refreshMusics();
&nbsp;&nbsp;&nbsp;initGetMusic();
}

/* js/app.js */
function initGetMusic() 
{
&nbsp;&nbsp;&nbsp;var interval = setInterval(function() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (getcontent.getRefreshed()) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicPlayList = getcontent.getMusicPlayList();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(interval);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initControlPage();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}, 10);
}</pre>

 </li>
 <li>
 <p>The <span style="font-family: Courier New,Courier,monospace">initControlPage()</span> method displays the title, artist, and thumbnail of the audio file. If there is no audio file, it displays the pre-defined title and a background image.</p>
 <p>The <span style="font-family: Courier New,Courier,monospace">currentPlayNumber</span> variable is used for managing audio information. The <span style="font-family: Courier New,Courier,monospace">initControlPage()</span> method sets the <span style="font-family: Courier New,Courier,monospace">currentPlayNumber</span> to 0, because the method is called as the initial methods.</p>
<pre class="prettyprint">
/* js/app.js */
function initControlPage() 
{
&nbsp;&nbsp;&nbsp;/* There is no playlist */
&nbsp;&nbsp;&nbsp;if (musicPlayList.length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeHtmlString(&quot;div_title&quot;, TITLE_NO_TRACK);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeBackgroundImage(&quot;div_background&quot;, BACKGROUND_IMAGE_NO_ALBUM);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/* If there is a playlist, the information of the first track is displayed */
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentPlayNumber = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeHtmlString(&quot;div_title&quot;, musicPlayList[currentPlayNumber].titleName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeHtmlString(&quot;div_sub_title&quot;, musicPlayList[currentPlayNumber].artistName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeBackgroundImage(&quot;div_background&quot;, musicPlayList[currentPlayNumber].thumbnailFilePath);
&nbsp;&nbsp;&nbsp;}
}</pre>
 </li>
</ol>


 <h3>Controlling the Play and Pause Buttons</h3>

<p>An audio file is played or paused when the play or pause button is clicked.</p>

<ol>
 <li>
 <p>Bind the play button event in the <span style="font-family: Courier New,Courier,monospace">bindEvents()</span> method:</p>
<pre class="prettyprint">
/* js/app.js */
document.querySelector(&quot;#div_play&quot;).addEventListener(&#39;click&#39;, controlMusic);
</pre>
 </li>

 <li>
 <p>The <span style="font-family: Courier New,Courier,monospace">controlMusic()</span> method sets the audio source, and changes the play button to the pause button when music is playing, and vice versa when the music is paused.</p>
 <p>The <span style="font-family: Courier New,Courier,monospace">startMusic()</span> method is called to start playing music.</p>
<pre class="prettyprint">
/* js/app.js */
function controlMusic() 
{
&nbsp;&nbsp;&nbsp;var div_play = document.querySelector(&#39;#div_play&#39;);
&nbsp;&nbsp;&nbsp;/* Playlist exists with the gear status */
&nbsp;&nbsp;&nbsp;if (deviceStatus === &quot;Device Gear&quot; &amp;&amp; musicPlayList.length !== 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* When the sample initiates, there is no audio source information in the myaudio element */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add the first music file path (currentPlayNumber is 0) */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myaudio.src === &quot;&quot;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myaudio.src = musicPlayList[currentPlayNumber].musicFilePath;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicStatus = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;div_play.className = &#39;btn pause&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startMusic();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* In other cases, it controls play and pause */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If audio is paused, it plays audio, and change the pause button into the play button */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (myaudio.paused)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myaudio.play();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Check the current music time using setInterval */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval = setInterval(function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicTime++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* When the track is played to the end, move to the next track */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (musicTime &gt; (musicPlayList[currentPlayNumber].duration / 1000)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startMusic(&quot;next&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;div_play.className = &#39;btn pause&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicStatus = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If audio is playing, it pauses the audio and changes the play button into the pause button */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myaudio.pause();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(interval);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;div_play.className = &#39;btn play&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicStatus = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre>
 </li>
</ol>


 <h3>Controlling the Next and Previous Buttons</h3>

 <p>To control the next and previous buttons, bind the next and previous button events in the <span style="font-family: Courier New,Courier,monospace">bindEvents()</span> method. Pass the string parameter that presents the currently touched button information.</p>
<pre class="prettyprint">
/* js/app.js */
document.querySelector(&quot;#div_prev&quot;).addEventListener(&#39;click&#39;, function() 
{
&nbsp;&nbsp;&nbsp;startMusic(&quot;prev&quot;);
});

document.querySelector(&quot;#div_next&quot;).addEventListener(&#39;click&#39;, function() 
{
&nbsp;&nbsp;&nbsp;startMusic(&quot;next&quot;);
});</pre>



 <h3>Controlling Rotary Events</h3>


 <p>Bind the rotary event in the <span style="font-family: Courier New,Courier,monospace">bindEvents()</span> method:</p>
<pre class="prettyprint">
/* js/app.js */
document.addEventListener(&#39;rotarydetent&#39;, rotaryEventHandler);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">rotaryEventHandler()</span> method only executes on the main page, because it only manages the rotary event of the main page.</p>
<pre class="prettyprint">
/* js/app.js */
function rotaryEventHandler(event) 
{
&nbsp;&nbsp;&nbsp;var direction = event.detail.direction;
&nbsp;&nbsp;&nbsp;/* Call changeControlPage function in the main page */
&nbsp;&nbsp;&nbsp;if (globalPage === &quot;main&quot;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* changeControlPage(direction); */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startMusic(direction);
&nbsp;&nbsp;&nbsp;}
}</pre>



 <h3>Starting Music</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">startMusic()</span> method plays the audio file from the beginning, and changes the current track number on the main page according to the parameter. It moves to the next or previous track in the array.</p>
<p>It operates similarly as the <span style="font-family: Courier New,Courier,monospace">controlMusic()</span> method.</p>

<pre class="prettyprint">
/* js/app.js */
function startMusic(direction) 
{
&nbsp;&nbsp;&nbsp;/* Playlist must exist with the gear status */
&nbsp;&nbsp;&nbsp;if (deviceStatus === &quot;Device Gear&quot; &amp;&amp; musicPlayList.length !== 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changePlayNumber(direction);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changeControlPage();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myaudio.src = musicPlayList[currentPlayNumber].musicFilePath;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(interval);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicTime = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (musicStatus === true) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;myaudio.play();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Check the current music time using setInterval */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;interval = setInterval(function() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;musicTime++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* When a track is played to the end, move to the next track */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (musicTime &gt; (musicPlayList[currentPlayNumber].duration / 1000)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startMusic(&quot;next&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 1000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre>


 <h3>Using the More Options Popup Click Event Selector</h3>
    
<p>This sample uses the selector in the More options screen, and adds a click handler to the selector:</p>
<ol>
 <li>
 <p>Add an event listener for the selector:</p>
<pre class="prettyprint">
/* js/moreoption.js */
var elSelector = page.querySelector(&quot;#selector&quot;);
elSelector.addEventListener(&quot;click&quot;, clickSelector);</pre>
 </li>

 <li>
 <p>The <span style="font-family: Courier New,Courier,monospace">clickSelector()</span> event handler method gets the clicked target and its title. If the center circle is clicked, it returns to the main page in this sample.</p>
<pre class="prettyprint">
function clickSelector(event)
{
&nbsp;&nbsp;&nbsp;var target = event.target,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title;
&nbsp;&nbsp;&nbsp;/* If the class (device-gear, device-mobile) is clicked, call the setDeviceStatus method of app.js */
&nbsp;&nbsp;&nbsp;if (target.classList.contains(&quot;device-gear&quot;) || target.classList.contains(&quot;device-mobile&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title = target.getAttribute(&quot;data-title&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.setDeviceStatus(title, target);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (tau.support.shape.circle) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* &#39;ui-selector-indicator&#39; is the default indicator class name of the selector component */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (target.classList.contains(&quot;ui-selector-indicator&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.setGlobalPage(&quot;main&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.closePopup(popupCircle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre> 
 </li>
</ol>


 <h3>Handling Page Navigation</h3>
   
<p>This sample has 2 screens for the main page and the popup page, so simple page navigation is needed:</p>
    
<ol>
 <li>
 <p>Declare the global variable for page navigation in the <span style="font-family: Courier New,Courier,monospace">app.js</span> file:</p>
<pre class="prettyprint">
/* js/app.js */
var global_page;
</pre>
 </li>

 <li>
 <p>When the <span style="font-family: Courier New,Courier,monospace">app.js</span> file is loaded, set the <span style="font-family: Courier New,Courier,monospace">global_page</span> variable to <span style="font-family: Courier New,Courier,monospace">main</span> in the <span style="font-family: Courier New,Courier,monospace">init()</span> method:</p>
 <pre class="prettyprint">
/* js/app.js */
function init() 
{
&nbsp;&nbsp;&nbsp;globalPage = &quot;main&quot;; /* Current page is &quot;main&quot; page */
&nbsp;&nbsp;&nbsp;deviceStatus = &quot;Device Gear&quot;; /* At first, device status is &quot;gear&quot; status */
&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;getcontent.refreshMusics();
&nbsp;&nbsp;&nbsp;initGetMusic();
}</pre>
 </li>

 <li>
 <p>When the popup is loaded, set the <span style="font-family: Courier New,Courier,monospace">global_page</span> variable to <span style="font-family: Courier New,Courier,monospace">moreoption</span> in the <span style="font-family: Courier New,Courier,monospace">moreoptions.js</span> file:</p>
 <pre class="prettyprint">
/* js/moreoption.js */
function clickHandler(event) 
{
&nbsp;&nbsp;&nbsp;if (tau.support.shape.circle) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.openPopup(popupCircle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;global_page = &quot;moreoption&quot;;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.openPopup(popup);
&nbsp;&nbsp;&nbsp;}
};</pre>
 </li>

 <li>
 <p>The <span style="font-family: Courier New,Courier,monospace">backEventHandler()</span> method handles the hardware key back event.</p>
 <p>When the <span style="font-family: Courier New,Courier,monospace">global_page</span> variable is <span style="font-family: Courier New,Courier,monospace">main</span>, the back key event lets the application quit, and in the case of the popup, it closes the popup.</p>
 <pre class="prettyprint">
/* js/app.js */
function backEventHandler(e) 
{
&nbsp;&nbsp;&nbsp;var popupCircle = document.querySelector(&quot;#moreoptionsPopupCircle&quot;);

&nbsp;&nbsp;&nbsp;/* Hardware back key event occurs */
&nbsp;&nbsp;&nbsp;if (e.keyName === &quot;back&quot;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (globalPage === &quot;main&quot;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (ignore) {}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tau.closePopup(popupCircle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;globalPage = &quot;main&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}</pre>
 </li>
</ol>
    
    
 <h3>Managing the Button Effect</h3>
         
<p>This sample has many buttons in the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> elements in the <span style="font-family: Courier New,Courier,monospace">index.html</span> file.</p>
<p>These buttons have an active effect in the <span style="font-family: Courier New,Courier,monospace">.btn</span> CSS class, as shown in the following figure.</p>
    
<p class="figure">Figure: MusicPlayer button effect</p>
<p align="center">
     <img alt="MusicPlayer screen" src="../images/musicplayer_ww4.png" />
</p>
 <p>To manage the effect:</p> 
<ol>
 <li>
 <p>Add a <span style="font-family: Courier New,Courier,monospace">.btn</span> class in the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element to create a button:</p>
 <pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;div_play&quot; class=&quot;play btn&quot;&gt;
&lt;div id=&quot;div_prev&quot; class=&quot;btn&quot;&gt;
&lt;div id=&quot;div_next&quot; class=&quot;btn&quot;&gt;</pre>
 </li>

 <li>
 <p>Declare the <span style="font-family: Courier New,Courier,monospace">.btn</span> CSS class in the <span style="font-family: Courier New,Courier,monospace">style.css</span> file. Set the <span style="font-family: Courier New,Courier,monospace">.btn</span> class&#39;s <span style="font-family: Courier New,Courier,monospace">border-radius</span> attribute to 50% to create the effect of a circular button.</p>
 <pre class="prettyprint">
&lt;!--style/style.css--&gt;
.btn 
{
&nbsp;&nbsp;&nbsp;border-radius: 50%;
}</pre>
 </li>
    
 <li>
 <p>Declare the active <span style="font-family: Courier New,Courier,monospace">.btn</span> CSS class in the <span style="font-family: Courier New,Courier,monospace">style.css</span> file. The class changes the background color when the button is touched.</p>
 <pre class="prettyprint">
&lt;!--style/style.css--&gt;
.btn:active 
{
&nbsp;&nbsp;&nbsp;background-color: rgba(250,250,250,0.4);
&nbsp;&nbsp;&nbsp;transition: all 0.2s ease;
}</pre>
 </li>
</ol>
    

 
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
