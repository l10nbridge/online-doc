<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>VoiceRecorder Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/supplement/camera_w.htm">Camera API (Tizen Extension) Guide</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/camera_w.html">Camera API (Tizen Extension) API</a></li>  
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>VoiceRecorder Sample Overview</h1> 
  <p>The VoiceRecorder sample application demonstrates how you can record and play voice using a wearable device. The recording time is limited to 10 seconds.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>  


 
  <p>The following figure illustrates the main screens of the VoiceRecorder.</p> 
  <p class="figure">Figure: VoiceRecorder screens</p> 
  <p align="center"><img alt="VoiceRecorder screens" src="../images/voicerecorder_sd.png" /> </p> 
  
<p>When the application is opened, it displays the main page with record button at the bottom of the screen.</p>

<p>Tap on the record button at the bottom of the screen to make a voice recording. The application starts recording, and the record button is replaced by the stop button. The recording state is indicated the progress bar at the top of the screen.</p>

<p>Tap on the stop button to stop recording (recording stops automatically after 10 seconds). The application saves the recorded voice and displays a preview page. The stop button is replaced by a play button.</p>

<p>Tap on the play button to play the recorded voice. The application starts playback, and the play button is replaced by the pause button. The playback state is indicated by the progress bar at the top of the screen.</p>

<p>Tap on the pause button to stop playing the recorded voice. The application stops playing, and the pause button is replaced by the play button.</p>

<p>Perform swipe down gesture in order to move back to the main page.</p>


  <h2 id="source" name="source">Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
  <tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains the CSS styling for the application UI.</td>
  </tr>
    <tr>
    <td><span style="font-family: Courier New,Courier,monospace">images/</span></td>
    <td>This directory contains the images used to create the user interface.</td>
  </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file contains the code for the main application module used for initialization.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td> 
     <td>This directory contains the core modules. They are used in other parts of the application code. <span style="font-family: Courier New,Courier,monospace">Core.js</span> implements a simple AMD (Asynchronous Module Definition) and specifies module defining. The application uses a simple MV (Model View) architecture.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/</span></td> 
     <td>This directory contains files for implementing the helper functions.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/models/</span></td> 
     <td>This directory contains files that define an abstract layer over the Camera API.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td> 
     <td>This directory contains the code for handling the UI events for all pages.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr>	
   </tbody> 
  </table> 
  
<h2>Implementation</h2>

<p>The application code is separated into modules. Each module specifies its dependent modules.</p>
<p>The entry point for the application is the <span style="font-family: Courier New,Courier,monospace">js/app.js</span> module. It is loaded first by the <span style="font-family: Courier New,Courier,monospace">js/core/core.js</span> library with the <span style="font-family: Courier New,Courier,monospace">data-main</span> attribute help.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&nbsp;&nbsp;&nbsp;&lt;script src=&quot;./js/core/core.js&quot; data-main=&quot;./js/app.js&quot;&gt;&lt;/script&gt;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">js/app.js</span> module is responsible for the load view initialization module <span style="font-family: Courier New,Courier,monospace">views/init</span> by adding it as a dependent module in the required array.</p>
<pre class="prettyprint">
/* js/app.js */
define(
{
&nbsp;&nbsp;&nbsp;name: &#39;app&#39;,
&nbsp;&nbsp;&nbsp;requires:[&#39;views/init&#39;],
&nbsp;&nbsp;&nbsp;def: function appInit() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function init() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;app::init&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: init
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
});</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">views/init</span> module loads other view modules as dependencies to let them initialize. It handles the Tizen hardware keys, preloads the images used by application, and checks the battery state. It also notifies the other modules about the application visibility changes and application state changes on window blur event.</p>
<pre class="prettyprint">
/* js/views/init.js */
define(
{
&nbsp;&nbsp;&nbsp;name: &#39;views/init&#39;,
&nbsp;&nbsp;&nbsp;requires: 
&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core/event&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core/application&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core/systeminfo&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;views/main&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;views/preview&#39;
&nbsp;&nbsp;&nbsp;],
&nbsp;&nbsp;&nbsp;def: function viewsInit(req) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var e = req.core.event,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app = req.core.application,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo = req.core.systeminfo,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;imagesToPreload = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/button_off.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/button_on.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/pause_icon.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/play_icon.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/record_icon.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/stop_icon.png&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/microphone_full.jpg&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/speaker_full.jpg&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;images/speaker_animate.png&#39;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Handles the tizenhwkey event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param {event} ev
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onHardwareKeysTap(ev) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var keyName = ev.keyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page = document.getElementsByClassName(&#39;ui-page-active&#39;)[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pageid = (page &amp;&amp; page.id) || &#39;&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pageid === &#39;main&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;history.back();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Pre-loads the images */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function preloadImages() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var image = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length = imagesToPreload.length;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = new window.Image();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.src = imagesToPreload[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles the core.battery.low event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onLowBattery() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Handles the visibilitychange event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param {event} ev
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onVisibilityChange(ev) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;visibility.change&#39;, ev);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handles the window blur event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onBlur() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;application.state.background&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Registers the event listeners */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function bindEvents() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;tizenhwkey&#39;, onHardwareKeysTap);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;visibilitychange&#39;, onVisibilityChange);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;blur&#39;, onBlur);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo.listenBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Initializes the module */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function init() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preloadImages();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sysInfo.checkBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindEvents();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.listeners(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;core.systeminfo.battery.low&#39;: onLowBattery
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: init
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}
});</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">views/main</span> module handles most of the application UI interaction. It captures the audio stream and allows the user to record it. To handle this task, it processes the user actions and uses the <span style="font-family: Courier New,Courier,monospace">models/audio</span> module to handle them.</p>
<p>When the application starts or goes foreground, it obtains the audio stream with the <span style="font-family: Courier New,Courier,monospace">models/steam</span> module help, and initializes the <span style="font-family: Courier New,Courier,monospace">models/audio</span> module which uses Camera API to create the <span style="font-family: Courier New,Courier,monospace">CameraControl</span> object.</p>
<pre class="prettyprint">
/* js/views/main.js */

/**
* Handles the models.stream.ready event
* @param {event} ev
*/
function onStreamReady(ev) 
{
&nbsp;&nbsp;&nbsp;stream = ev.detail.stream;
&nbsp;&nbsp;&nbsp;a.registerStream(stream);
}

/* Initializes the stream */
function initStream() 
{
&nbsp;&nbsp;&nbsp;s.getStream();
}

/**
* Function called when the application visibility state changes
* (document.visibilityState changed to &#39;visible&#39; or &#39;hidden&#39;).
*/
function visibilityChange() 
{
&nbsp;&nbsp;&nbsp;if (document.visibilityState !== &#39;visible&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.isReady()) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.stopRecording();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a.release();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!a.isReady()) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initStream();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}

/* Initializes the module */
function init() 
{
&nbsp;&nbsp;&nbsp;initStream();
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.stream.ready&#39;: onStreamReady,
&nbsp;&nbsp;&nbsp;&#39;views.init.visibility.change&#39;: visibilityChange,
});

/* js/models/stream.js */

/**
* Fires the models.stream.ready event onGetUserMediaSuccess
* @param {LocalMediaStream} stream
*/
function onUserMediaSuccess(stream) 
{
&nbsp;&nbsp;&nbsp;initAttemtps = 0;
&nbsp;&nbsp;&nbsp;e.fire(&#39;ready&#39;, {stream: stream});
}

function getUserMedia(onUserMediaSuccess, onUserMediaError) 
{
&nbsp;&nbsp;&nbsp;navigator.webkitGetUserMedia(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;video: false,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio: true
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;onUserMediaSuccess,
&nbsp;&nbsp;&nbsp;onUserMediaError);
}

function getStream() 
{
&nbsp;&nbsp;&nbsp;return getUserMedia(onUserMediaSuccess, onUserMediaError);
}


/* js/models/audio.js */

/**
* Executes when audio control is created from the stream
* @param {audioControl} control
*/
function onAudioControlCreated(control) 
{
&nbsp;&nbsp;&nbsp;audioControl = control;
&nbsp;&nbsp;&nbsp;e.fire(&#39;ready&#39;);
}

/**
* Executes on audio control creation error
* @param {object} error
*/
function onAudioControlError(error) 
{
&nbsp;&nbsp;&nbsp;console.error(error);
&nbsp;&nbsp;&nbsp;e.fire(&#39;error&#39;, {error: error});
}

/**
* Registers the stream that the audio controls
* @param {LocalMediaStream} mediaStream
*/
function registerStream(mediaStream) 
{
&nbsp;&nbsp;&nbsp;navigator.tizCamera.createCameraControl(;mediaStream, onAudioControlCreated, onAudioControlError);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">models/audio</span> module encapsulates the Camera API and creates an event-driven interface for the view modules. </p>
<p>The main functions exposed by this module are:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">registerStream</span> – initializes the module and creates the <span style="font-family: Courier New,Courier,monospace">CameraControl</span> object. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.audio.ready</span> – the module is ready to use.</li>
<li><span style="font-family: Courier New,Courier,monospace">models.audio.error</span> – an error occurred during initialization.</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">release</span> – releases the CameraControl object. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.audio.release</span> – the camera was released</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">startRecording</span> – starts the recording. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.audio.recording.start</span> – the request is accepted, the recording starts</li>
<li><span style="font-family: Courier New,Courier,monospace">models.audio.recording.error</span> – an error occurred during initialization of recording</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">stopRecording</span> – stops the recording. Fires the following events:
<ul><li><span style="font-family: Courier New,Courier,monospace">models.audio.recording.done</span> – an audio file is successfully created (filename in events details). This event is fired also when the time limit for the video recording is exceeded</li>
<li><span style="font-family: Courier New,Courier,monospace">models.audio.recording.error</span> – an error occurred during ending the recording</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">getRecordingTime</span> – returns the current recording time</li></ul>

<p>The view modules call the <span style="font-family: Courier New,Courier,monospace">models/audio</span> module functions and listen to its events to update the UI.</p>

<p>The voice recording process starts when user touches the record button. The <span style="font-family: Courier New,Courier,monospace">views/main</span> module calls the <span style="font-family: Courier New,Courier,monospace">startRecording</span> function of the <span style="font-family: Courier New,Courier,monospace">models/audio</span> module when a click event is detected.</p>
<pre class="prettyprint">
/* js/views/main.js */

/* Starts the audio recording */
function startRecording() 
{
&nbsp;&nbsp;&nbsp;recordingLock = true;
&nbsp;&nbsp;&nbsp;a.startRecording();
&nbsp;&nbsp;&nbsp;resetRecordingProgress();
&nbsp;&nbsp;&nbsp;showRecordingView();
}

/* Stops the audio recording */
function stopRecording() 
{
&nbsp;&nbsp;&nbsp;recordingLock = true;
&nbsp;&nbsp;&nbsp;a.stopRecording();
}

/* Starts or stops the audio recording */
function setRecording() 
{
&nbsp;&nbsp;&nbsp;if (recording) 
{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startRecording();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopRecording();
&nbsp;&nbsp;&nbsp;}
}

/* Handles the click event on record button */
function onRecordBtnClick()
{
&nbsp;&nbsp;&nbsp;if (recordingLock || document.hidden) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;toggleRecording();
&nbsp;&nbsp;&nbsp;setRecording();
}

/* Registers the event listeners */
function bindEvents() 
{
&nbsp;&nbsp;&nbsp;recordBtnMap.addEventListener(&#39;click&#39;, onRecordBtnClick);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">models/audio</span> module starts processing the request. It applies the audio file settings (<span style="font-family: Courier New,Courier,monospace">CameraControl.recorder.applySettings</span>) and starts recording (<span style="font-family: Courier New,Courier,monospace">CameraControl.recorder.start</span>). If there is no error, it starts tracing the recording time and notifies the other modules about the finished operation (by <span style="font-family: Courier New,Courier,monospace">models.audio.recording.start</span> event).</p>
<pre class="prettyprint">
/* js/models/audio.js */

/* Executes when the recording starts successfully */
function onRecordingStartSuccess() 
{
&nbsp;&nbsp;&nbsp;startTracingAudioLength();
&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.start&#39;);
}

/**
* Executes when an error occurs during the recording start
* @param {object} error
*/
function onRecordingStartError(error) 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.error&#39;, {error: error});
}

/**
* Executes when an error occurs during the recording start
* @param {object} error
*/
function onRecordingStartError(error) 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.error&#39;, {error: error});
}

/* Executes when the audio settings are applied */
function onAudioSettingsApplied() 
{
&nbsp;&nbsp;&nbsp;if (!stopRequested) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioControl.recorder.start(onRecordingStartSuccess, onRecordingStartError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.cancel&#39;);
&nbsp;&nbsp;&nbsp;}
}

/**
* Starts the audio recording
* When recording is started successfully, audio.recording.start event
* is fired. If error occurs, audio.recording.error event is fired.
* @return {boolean} If process starts true is returned,
* false otherwise (audio other operation is in progress).
*/
function startRecording() 
{
&nbsp;&nbsp;&nbsp;var settings = {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileName = &#39;&#39;;

&nbsp;&nbsp;&nbsp;if (busy) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;stopRequested = false;
&nbsp;&nbsp;&nbsp;busy = true;
&nbsp;&nbsp;&nbsp;fileName = createAudioFileName();
&nbsp;&nbsp;&nbsp;audioPath = AUDIO_DESTINATION_DIRECTORY + &#39;/&#39; + fileName;

&nbsp;&nbsp;&nbsp;settings.fileName = fileName;
&nbsp;&nbsp;&nbsp;settings.recordingFormat = getRecordingFormat();

&nbsp;&nbsp;&nbsp;audioControl.recorder.applySettings(settings, onAudioSettingsApplied, onAudioSettingsError);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>


<p>When the user touches the stop button or when the audio file time limit is reached, the <span style="font-family: Courier New,Courier,monospace">stopRecording</span> function of the <span style="font-family: Courier New,Courier,monospace">models/audio</span> module is called. It requests the <span style="font-family: Courier New,Courier,monospace">CameraControl</span> object to stop the current recording and finally fires the <span style="font-family: Courier New,Courier,monospace">models.audio.recording.done</span> event with the audio filename as its details. The <span style="font-family: Courier New,Courier,monospace">views/main module</span> listens to this event and opens a separate view to allow the user to preview the recorded file.</p>
<pre class="prettyprint">
/* js/models/audio.js */

/* Executes when the audio recording stops successfully */
function onAudioRecordingStopSuccess() 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.done&#39;, {path: audioPath});
&nbsp;&nbsp;&nbsp;audioRecordingTime = 0;
}

/**
* Executes when the audio recording stop fails
* @param {object} error
*/
function onAudioRecordingStopError(error) 
{
&nbsp;&nbsp;&nbsp;busy = false;
&nbsp;&nbsp;&nbsp;e.fire(&#39;recording.error&#39;, {error: error});
&nbsp;&nbsp;&nbsp;audioRecordingTime = 0;
}

/**
* Stops the audio recording
* When recording is stopped, audio.recording.done event is fired
* with file path as a data.
* If error occurs audio.recording error is fired.
* Recording will stop also if MAX_RECORDING_TIME will be reached.
*/
function stopRecording() 
{
&nbsp;&nbsp;&nbsp;stopRequested = true;

&nbsp;&nbsp;&nbsp;if (isRecording()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopTracingAudioLength();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audioControl.recorder.stop(onAudioRecordingStopSuccess, onAudioRecordingStopError);
&nbsp;&nbsp;&nbsp;}
}

/**
* Checks whether the audio length is greater than the MAX_RECORDING_TIME
* If it does, recording will be stopped.
*/
function checkAudioLength() 
{
&nbsp;&nbsp;&nbsp;var currentTime = new Date();

&nbsp;&nbsp;&nbsp;audioRecordingTime = currentTime - audioRecordingStartTime;
&nbsp;&nbsp;&nbsp;if (audioRecordingTime > MAX_RECORDING_TIME) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopRecording();
&nbsp;&nbsp;&nbsp;}
}


/* js/views/main.js */

/**
* Handles the audio.recording.done event
* @param {event} ev
*/
function onRecordingDone(ev)
{
&nbsp;&nbsp;&nbsp;var path = ev.detail.path;

&nbsp;&nbsp;&nbsp;removeRecordingInterval();
&nbsp;&nbsp;&nbsp;toggleRecording(false);
&nbsp;&nbsp;&nbsp;updateRecordingProgress();
&nbsp;&nbsp;&nbsp;if (!exitInProgress) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;show.preview&#39;, {audio: path});
&nbsp;&nbsp;&nbsp;}
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.audio.recording.done&#39;: onRecordingDone
});


/* js/views/preview.js */

/**
* Shows preview page.
* @param {event} ev
*/
function showPreviewPage(ev) 
{
&nbsp;&nbsp;&nbsp;tau.changePage(&#39;#preview&#39;, {transition: &#39;none&#39;});
&nbsp;&nbsp;&nbsp;ev.target.removeEventListener(ev.type, showPreviewPage);
}

/**
* Handles the views.settings.show event
* @param {event} ev
*/
function show(ev) 
{
&nbsp;&nbsp;&nbsp;var detail = ev.detail;

&nbsp;&nbsp;&nbsp;prevProgressVal.style.width = &#39;0&#39;;
&nbsp;&nbsp;&nbsp;audioPlayState = false;
&nbsp;&nbsp;&nbsp;audio.src = detail.audio;
&nbsp;&nbsp;&nbsp;audio.addEventListener(&#39;loadeddata&#39;, showPreviewPage);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;views.main.show.preview&#39;: show

});
</pre>
  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>