<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>MoneyBook Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Wearable Web" src="../images/wearable_s_w.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/storage/indexdb_w.htm">Indexed Database Guide</a></li>			
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_w.html#database">Indexed Database API</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
  <h1>MoneyBook Sample Overview</h1>
  <p>The MoneyBook sample application demonstrates how you can save and load data in a database storage.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the MoneyBook.</p>
  <p class="figure">Figure: MoneyBook screens</p>
  <p align="center"><img alt="MoneyBook screens" src="../images/moneybook_ww.png" /></p>
  <p>The application opens with the result screen, which displays all added records.</p>

<p>To add a record:</p>
<ol><li>Go to the input screen by clicking <strong>Back</strong> on the result screen.</li>
<li><p>Enter the name and price of the item to the textbox, and click <strong>Submit</strong>.</p></li></ol>

<p>To remove a record, press the ID number (the first field) of the record you want to remove on the result screen. To remove all records, click <strong>Clear</strong>.</p>

  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p>
  <table border="1">
   <tbody>
    <tr>
     <th>File name</th>
     <th>Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
     <td>This file contains the CSS styling for the application UI.</td>
    </tr>	
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td>
     <td>This file contains the code for handling the main functionality of the application.</td>
    </tr>
   </tbody>
  </table>


  <h2>Implementation</h2>

  <p>When the application starts, it attempts to open the database using the Indexed Database API:</p>
  <pre class="prettyprint">
function openDB(successCb) 
{
&nbsp;&nbsp;&nbsp;if (window.indexedDB) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var request = indexedDB.open(DB_NAME, DB_VERSION);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.onerror = function(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(&quot;Please allow this application to use Indexed DB&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.onsuccess = function(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db = request.result;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: &quot;Indexed DB loading complete&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (successCb) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successCb(db);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;request.onupgradeneeded = function(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db = e.target.result;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: &quot;Indexed DB upgrade needed&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;createTable(db);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: &quot;Indexed DB is not supported&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>After the database is opened, the application creates a table to the database if none exists:</p>

  <pre class="prettyprint">
function createTable(db) 
{
&nbsp;&nbsp;&nbsp;if (db.objectStoreNames.contains(DB_TABLE_NAME)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;db.deleteObjectStore(DB_TABLE_NAME);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;idbObjectStore = db.createObjectStore(DB_TABLE_NAME, 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyPath: &quot;id&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;autoIncrement: true
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>To get data from the database, use the <a href="http://www.w3.org/TR/2013/WD-IndexedDB-20130516/#cursor" target="_blank">Cursor</a> object of the Indexed Database API:</p>
<pre class="prettyprint">
function loadDataView(db) 
{
&nbsp;&nbsp;&nbsp;var transaction = db.transaction(DB_TABLE_NAME, &quot;readonly&quot;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultBuffer = [];

&nbsp;&nbsp;&nbsp;idbObjectStore = transaction.objectStore(DB_TABLE_NAME);
&nbsp;&nbsp;&nbsp;idbObjectStore.openCursor().onsuccess = function(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var cursor = e.target.result;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cursor) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultBuffer.push(cursor.value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor.continue();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showDataView(resultBuffer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}
</pre>

<p>To insert and delete data, use the <span style="font-family: Courier New,Courier,monospace">put()</span> and <span style="font-family: Courier New,Courier,monospace">delete()</span> functions:</p>

<pre class="prettyprint">
/* Insert a data to the table */
function insertData(db, data) 
{
&nbsp;&nbsp;&nbsp;var transaction = db.transaction(DB_TABLE_NAME, &quot;readwrite&quot;);

&nbsp;&nbsp;&nbsp;idbObjectStore = transaction.objectStore(DB_TABLE_NAME);
&nbsp;&nbsp;&nbsp;idbObjectStore.put(data);
}

/* Delete a data from the table */
function deleteData(db, data) 
{
&nbsp;&nbsp;&nbsp;var transaction = db.transaction(DB_TABLE_NAME, &quot;readwrite&quot;);

&nbsp;&nbsp;&nbsp;idbObjectStore = transaction.objectStore(DB_TABLE_NAME);
&nbsp;&nbsp;&nbsp;idbObjectStore.delete(data.id);
}
</pre>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
