<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Sketch Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>Sketch Sample Overview</h1>

<p>The Sketch application demonstrates how you can implement an image view and change the color using raw image data of the standard EFL components.</p>
<p>The following figure illustrates the main screen of the Sketch.</p>

<p class="figure">Figure: Sketch main screen</p>
<p align="center"><img src="../images/sketch1.png" alt="Sketch main screen" /></p>


<p>This sample consist of implementing the layout, creating an image, adding the palette, pen, and eraser, saving the image, and using popup menus.</p>

<h2 id="implementation" name="implementation">Implementation</h2>

<h3>Layout</h3>
<p>The <span style="font-family: Courier New,Courier,monospace;">layout_create()</span> function makes the application frame, move buttons, icons, and some icons linked to each callback function.</p>
<pre class="prettyprint">
static int 
_layout_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Image
&nbsp;&nbsp;&nbsp;img = image_create(ad);
&nbsp;&nbsp;&nbsp;retv_if(!img, TIZEN_ERROR_OUT_OF_MEMORY);

&nbsp;&nbsp;&nbsp;// Clear button
&nbsp;&nbsp;&nbsp;btn = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;retv_if(!btn, TIZEN_ERROR_OUT_OF_MEMORY);
&nbsp;&nbsp;&nbsp;evas_object_image_file_set(btn, IMG_DIR&quot;clear.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;clear&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(btn, EVAS_CALLBACK_MOUSE_UP, eraser_clear_cb, ad);

&nbsp;&nbsp;&nbsp;// Palette
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; 4; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;temp_color[i] = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;save_color[i] = 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ad-&gt;color_pos = 13;
&nbsp;&nbsp;&nbsp;btn = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;retv_if(!btn, TIZEN_ERROR_OUT_OF_MEMORY);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;palette&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_image_file_set(btn, IMG_DIR&quot;color.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(btn, EVAS_CALLBACK_MOUSE_UP, palette_select_cb, ad);

&nbsp;&nbsp;&nbsp;// Eraser
&nbsp;&nbsp;&nbsp;ad-&gt;eraser = 0;
&nbsp;&nbsp;&nbsp;ad-&gt;eraser_size = 5;
&nbsp;&nbsp;&nbsp;btn = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;retv_if(!btn, TIZEN_ERROR_OUT_OF_MEMORY);
&nbsp;&nbsp;&nbsp;evas_object_image_file_set(btn, IMG_DIR&quot;eraser.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;eraser&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(btn, EVAS_CALLBACK_MOUSE_UP, eraser_select_cb, ad);

&nbsp;&nbsp;&nbsp;// Pen
&nbsp;&nbsp;&nbsp;ad-&gt;pen_size = 5;
&nbsp;&nbsp;&nbsp;ad-&gt;a = 255;
&nbsp;&nbsp;&nbsp;ad-&gt;r = 0;
&nbsp;&nbsp;&nbsp;ad-&gt;g = 0;
&nbsp;&nbsp;&nbsp;ad-&gt;b = 0;
&nbsp;&nbsp;&nbsp;btn = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;retv_if(!btn, TIZEN_ERROR_OUT_OF_MEMORY);
&nbsp;&nbsp;&nbsp;evas_object_image_file_set(btn, IMG_DIR&quot;pen.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;pen&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(btn, EVAS_CALLBACK_MOUSE_UP, pen_select_cb, ad);

&nbsp;&nbsp;&nbsp;// Save
&nbsp;&nbsp;&nbsp;btn = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;retv_if(!btn, TIZEN_ERROR_OUT_OF_MEMORY);
&nbsp;&nbsp;&nbsp;evas_object_image_file_set(btn, IMG_DIR&quot;save.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;save&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(btn, EVAS_CALLBACK_MOUSE_UP, save_select_cb, ad);

&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;layout);

&nbsp;&nbsp;&nbsp;return TIZEN_ERROR_NONE;
}
</pre>

<h3>Image</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">image_create()</span> function creates the white background image which consists of the arrays that each mean raw pixel data. To use the raw data as an <span style="font-family: Courier New,Courier,monospace;">evas_object_image</span>, the <span style="font-family: Courier New,Courier,monospace;">evas_object_image_data_set()</span> function is used.</p>
<pre class="prettyprint">
Evas_Object 
*image_create(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *img = NULL;
&nbsp;&nbsp;&nbsp;int pixel;
&nbsp;&nbsp;&nbsp;retv_if(!ad, NULL);

&nbsp;&nbsp;&nbsp;// Image
&nbsp;&nbsp;&nbsp;ad-&gt;canvas = malloc(4*(ad-&gt;img_w)*(ad-&gt;img_h));
&nbsp;&nbsp;&nbsp;pixel = 255&lt;&lt;24 | 255&lt;&lt;16 | 255&lt;&lt;8 | 255;
&nbsp;&nbsp;&nbsp;memset(ad-&gt;canvas, pixel, 4*(ad-&gt;img_w)*(ad-&gt;img_h));

&nbsp;&nbsp;&nbsp;img = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;if (!img) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Fail to filled image&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(ad-&gt;canvas);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_image_size_set(img, ad-&gt;img_w, ad-&gt;img_h);
&nbsp;&nbsp;&nbsp;evas_object_image_alpha_set(img, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_image_fill_set(img, 0, 0, ad-&gt;img_w, ad-&gt;img_h);
&nbsp;&nbsp;&nbsp;evas_object_image_data_set(img, ad-&gt;canvas);

&nbsp;&nbsp;&nbsp;evas_object_move(img, 5, (ad-&gt;img_h*0.3));
&nbsp;&nbsp;&nbsp;evas_object_resize(img, ad-&gt;img_w, ad-&gt;img_h);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(img, EVAS_CALLBACK_MOUSE_DOWN, _move_start_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(img, EVAS_CALLBACK_MOUSE_UP, _move_end_cb, ad);

&nbsp;&nbsp;&nbsp;evas_object_show(img);
&nbsp;&nbsp;&nbsp;ad-&gt;img = img;

&nbsp;&nbsp;&nbsp;return img;
}
</pre>

<p>When the move event callback in the image object is called, the color of the moved pixel is changed by the <span style="font-family: Courier New,Courier,monospace;">_draw_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">_move_cb()</span> functions.</p>
<ul>

<li>The <span style="font-family: Courier New,Courier,monospace;">_draw_cb()</span> function changes the color in the raw image data:
<pre class="prettyprint">
static void 
_draw_cb(int x, int y, void *data, Evas_Object* obj)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object* img = NULL;
&nbsp;&nbsp;&nbsp;unsigned int pixel;
&nbsp;&nbsp;&nbsp;int i, j, draw_size;

&nbsp;&nbsp;&nbsp;ad = data;
&nbsp;&nbsp;&nbsp;img = obj;
&nbsp;&nbsp;&nbsp;pixel =  ad-&gt;a&lt;&lt;24 | ad-&gt;r&lt;&lt;16 | ad-&gt;g&lt;&lt;8 | ad-&gt;b;

&nbsp;&nbsp;&nbsp;if (ad-&gt;eraser) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_size = ad-&gt;eraser_size;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;draw_size = ad-&gt;pen_size;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;for (i = draw_size* - 1; i &lt; draw_size + 1; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = draw_size* - 1; j &lt; draw_size + 1; j++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x - (ad-&gt;canvas_x) + i &gt;= ad-&gt;img_w || x - (ad-&gt;canvas_x) + i &lt;= 0 || y - (ad-&gt;canvas_y) + j &gt;= ad-&gt;img_h || y - (ad-&gt;canvas_y) + j &lt;=0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;canvas[ad-&gt;img_w * (y - (ad-&gt;canvas_y) + j) + (x - ad-&gt;canvas_x) + i] = pixel;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_image_data_update_add(img, 0, 0, ad-&gt;img_w, ad-&gt;img_h);
&nbsp;&nbsp;&nbsp;evas_object_show(img);
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace;">_move_cb()</span> function draws the line using Bresenham algorithms:
<pre class="prettyprint">
static void 
_move_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);
&nbsp;&nbsp;&nbsp;ret_if(!obj);

&nbsp;&nbsp;&nbsp;appdata_s* ad = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *img = NULL;
&nbsp;&nbsp;&nbsp;Evas_Event_Mouse_Move *mouse = NULL;

&nbsp;&nbsp;&nbsp;// Draw
&nbsp;&nbsp;&nbsp;int dx, dy;
&nbsp;&nbsp;&nbsp;int p_value;
&nbsp;&nbsp;&nbsp;int inc_2dy, inc_2dydx;
&nbsp;&nbsp;&nbsp;int inc_value;
&nbsp;&nbsp;&nbsp;int ndx;

&nbsp;&nbsp;&nbsp;ad = data;
&nbsp;&nbsp;&nbsp;img = obj;
&nbsp;&nbsp;&nbsp;mouse = event_info;

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(img, &amp;ad-&gt;canvas_x, &amp;ad-&gt;canvas_y, NULL, NULL);


&nbsp;&nbsp;&nbsp;if (0 == ad-&gt;prev_x) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x = mouse-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y = mouse-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ad-&gt;prev_x, ad-&gt;prev_y, ad, img);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_x = mouse-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_y = mouse-&gt;cur.canvas.y;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = abs(ad-&gt;cur_x - ad-&gt;prev_x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = abs(ad-&gt;cur_y - ad-&gt;prev_y);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 == ad-&gt;prev_x) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x = mouse-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y = mouse-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ad-&gt;prev_x, ad-&gt;prev_y, ad, img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_x = mouse-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_y = mouse-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dx = abs(ad-&gt;cur_x - ad-&gt;prev_x);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dy = abs(ad-&gt;cur_y - ad-&gt;prev_y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dy &lt;= dx) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_2dy = 2*dy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_2dydx = 2 *(dy - dx);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;cur_x &lt; ad-&gt;prev_x) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ndx = ad-&gt;prev_x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x = ad-&gt;cur_x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_x = ndx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ndx = ad-&gt;prev_y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y = ad-&gt;cur_y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_y = ndx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;prev_y &lt; ad-&gt;cur_y) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_value = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_value = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ad-&gt;prev_x, ad-&gt;prev_y, ad, img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value = 2 * dy - dx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (ndx = ad-&gt;prev_x; ndx &lt; ad-&gt;cur_x; ndx++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 &gt; p_value) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value += inc_2dy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value += inc_2dydx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y += inc_value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ndx, ad-&gt;prev_y, ad, img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_2dy = 2*dx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_2dydx = 2* (dx-dy);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;cur_y &lt; ad-&gt;prev_y) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ndx = ad-&gt;prev_y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y = ad-&gt;cur_y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_y = ndx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ndx = ad-&gt;prev_x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x = ad-&gt;cur_x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;cur_x = ndx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;prev_x &lt; ad-&gt;cur_x) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_value = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inc_value = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ad-&gt;prev_x, ad-&gt;prev_y, ad, img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value = 2 * dx -dy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (ndx = ad-&gt;prev_y; ndx &lt; ad-&gt;cur_y; ndx++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 &gt; p_value) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value += inc_2dy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p_value += inc_2dydx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x += inc_value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_draw_cb(ad-&gt;prev_x, ndx, ad, img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_x = mouse-&gt;cur.canvas.x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;prev_y = mouse-&gt;cur.canvas.y;
&nbsp;&nbsp;&nbsp;}
}
</pre> 
</li>
</ul>

<h3>Palette</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">create_colorselector()</span> function is called when the palette icon is clicked. This function controls the pen's and background's color using the colorselector component that is created with the <span style="font-family: Courier New,Courier,monospace;">elm_colorselector_add()</span> function.</p>

<p class="figure">Figure: Palette screen</p>
<p align="center"><img src="../images/sketch2.png" alt="Palette screen" /></p>

<pre class="prettyprint">
static Evas_Object 
*_create_colorselector(Evas_Object *parent, appdata_s *data)
{
&nbsp;&nbsp;&nbsp;retv_if(!data, NULL);

&nbsp;&nbsp;&nbsp;// Add a color palette component
&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;Evas_Object *colorselector = NULL;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *it = NULL;
&nbsp;&nbsp;&nbsp;Eina_List *color_list = NULL;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;colorselector = elm_colorselector_add(parent);
&nbsp;&nbsp;&nbsp;retv_if(!colorselector, NULL);
&nbsp;&nbsp;&nbsp;elm_colorselector_mode_set(colorselector, ELM_COLORSELECTOR_PALETTE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_fill_set(colorselector, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(colorselector, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;color_list = elm_colorselector_palette_items_get(colorselector);
&nbsp;&nbsp;&nbsp;it = eina_list_nth(color_list, ad-&gt;color_pos);

&nbsp;&nbsp;&nbsp;elm_object_item_signal_emit(it, &quot;elm,state,selected&quot;, &quot;elm&quot;);

&nbsp;&nbsp;&nbsp;return colorselector;
}

static Evas_Object 
*_create_colorselector_layout(Evas_Object *parent, appdata_s *data)
{
&nbsp;&nbsp;&nbsp;retv_if(!parent, NULL);
&nbsp;&nbsp;&nbsp;retv_if(!data, NULL);

&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *colorselector = NULL;

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(parent);
&nbsp;&nbsp;&nbsp;retv_if(!layout, NULL);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ELM_DEMO_EDJ, &quot;colorselector_popup_layout&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, 0, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_content_set(parent, layout);

&nbsp;&nbsp;&nbsp;evas_object_show(layout);

&nbsp;&nbsp;&nbsp;colorselector = _create_colorselector(layout, data);
&nbsp;&nbsp;&nbsp;if (!colorselector) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;fail to create colorselector&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;colorpalette&quot;, colorselector);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(colorselector, &quot;color,item,selected&quot;, _item_clicked_cb, data);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">_palette_button_cb()</span> function is called when <strong>OK</strong> button is clicked. This function changes the color. If the pen checkbox is checked, the pen&#39;s color changes to the clicked color.</p>
<pre class="prettyprint">
static void 
_palette_button_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;

&nbsp;&nbsp;&nbsp;int pixel;
&nbsp;&nbsp;&nbsp;int w, h;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;if (1 == elm_check_state_get(ad-&gt;check1)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pixel = 255&lt;&lt;24 | ad-&gt;temp_color[1]&lt;&lt;16 | ad-&gt;temp_color[2]&lt;&lt;8 | ad-&gt;temp_color[3];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (h = 0; h &lt; ad-&gt;img_h; h ++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (w = 0; w &lt; ad-&gt;img_w; w++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;canvas[ad-&gt;img_w*h + w] = pixel;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_data_update_add(ad-&gt;img, 0, 0, ad-&gt;img_w, ad-&gt;img_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;img);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (1 == elm_check_state_get(ad-&gt;check2)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;eraser) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;save_color[1] = ad-&gt;temp_color[1];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;save_color[2] = ad-&gt;temp_color[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;save_color[3] = ad-&gt;temp_color[3];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;r = ad-&gt;temp_color[1];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;g = ad-&gt;temp_color[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;b = ad-&gt;temp_color[3];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;popup = evas_object_data_del(ad-&gt;win,&quot;popup&quot;);
&nbsp;&nbsp;&nbsp;if (popup) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(popup);
&nbsp;&nbsp;&nbsp;}
}
</pre> 

<h3>Pen</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">pen_cb()</span> function is called when the pen icon is clicked. This function controls the pen size from 1 to 10 using the <span style="font-family: Courier New,Courier,monospace;">elm_slider_add()</span> function.</p> 

<p class="figure">Figure: Pen screen</p>
<p align="center"><img alt="Pen screen" src="../images/sketch3.png" /></p>

<pre class="prettyprint">
void 
pen_select_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *slider = NULL;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;// Popup
&nbsp;&nbsp;&nbsp;popup = popup_create(ad, &quot;Pen&quot;, _pen_button_cb);
&nbsp;&nbsp;&nbsp;ret_if(!popup);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(popup);
&nbsp;&nbsp;&nbsp;goto_if(!layout, ERROR);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ELM_DEMO_EDJ, &quot;popup_text_slider_view_layout&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(popup, layout);

&nbsp;&nbsp;&nbsp;// Slider
&nbsp;&nbsp;&nbsp;slider = elm_slider_add(layout);
&nbsp;&nbsp;&nbsp;goto_if(!slider, ERROR);
&nbsp;&nbsp;&nbsp;elm_slider_indicator_show_set(slider, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(slider, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(slider, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_slider_indicator_format_set(slider, &quot;%1.0f&quot;);
&nbsp;&nbsp;&nbsp;elm_slider_min_max_set(slider, 1, 10);
&nbsp;&nbsp;&nbsp;elm_slider_value_set(slider, ad-&gt;pen_size);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;slider&quot;, slider);
&nbsp;&nbsp;&nbsp;ad-&gt;pen_size= elm_slider_value_get(slider);

&nbsp;&nbsp;&nbsp;evas_object_data_set(popup, &quot;slider&quot;, slider);
&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;win, &quot;popup&quot;, popup);

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(slider);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup_destroy(popup);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
}
</pre>
<p>Clicking <strong>OK</strong> calls the <span style="font-family: Courier New,Courier,monospace;">pen_clicked_cb()</span> function and saves the selected value in the slider:</p>
<pre class="prettyprint">
static void 
_pen_button_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *slider = NULL;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;popup = evas_object_data_del(ad-&gt;win, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;slider = evas_object_data_del(popup, &quot;slider&quot;);

&nbsp;&nbsp;&nbsp;ad-&gt;pen_size= elm_slider_value_get(slider);
&nbsp;&nbsp;&nbsp;evas_object_del(popup);
}
</pre>


<h3>Eraser</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">eraser_cb()</span> function is called when the eraser icon is clicked. This function controls the eraser size from 1 to 10 using a slider component. The eraser functionality is maintained until the eraser icon is clicked again.</p>

<p class="figure">Figure: Eraser screens</p>
<p align="center"><img src="../images/sketch4.png" alt="Eraser screens" /> <img src="../images/sketch5.png" alt="Eraser screens" /></p>

<pre class="prettyprint">
static void 
_eraser_button_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *slider = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *eraser = NULL;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;popup = evas_object_data_del(ad-&gt;win, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;slider = evas_object_data_del(popup, &quot;slider&quot;);
&nbsp;&nbsp;&nbsp;eraser = evas_object_data_del(slider, &quot;eraser&quot;);

&nbsp;&nbsp;&nbsp;ad-&gt;eraser_size= elm_slider_value_get(slider);

&nbsp;&nbsp;&nbsp;ad-&gt;save_color[1] = ad-&gt;r;
&nbsp;&nbsp;&nbsp;ad-&gt;save_color[2] = ad-&gt;g;
&nbsp;&nbsp;&nbsp;ad-&gt;save_color[3] = ad-&gt;b;

&nbsp;&nbsp;&nbsp;ad-&gt;r = 255;
&nbsp;&nbsp;&nbsp;ad-&gt;g = 255;
&nbsp;&nbsp;&nbsp;ad-&gt;b = 255;
&nbsp;&nbsp;&nbsp;ad-&gt;a = 255;

&nbsp;&nbsp;&nbsp;evas_object_image_file_set(eraser, IMG_DIR&quot;eraser2.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;eraser&quot;, eraser);
&nbsp;&nbsp;&nbsp;evas_object_show(eraser);

&nbsp;&nbsp;&nbsp;ad-&gt;eraser = 1;

&nbsp;&nbsp;&nbsp;evas_object_del(popup);
}

void 
eraser_select_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *slider = NULL;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;if (ad-&gt;eraser) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;r = ad-&gt;save_color[1];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;g = ad-&gt;save_color[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;b = ad-&gt;save_color[3];

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_file_set(obj, IMG_DIR&quot;eraser.png&quot;, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;eraser&quot;, obj);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(obj);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;eraser = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Popup
&nbsp;&nbsp;&nbsp;popup = popup_create(ad, &quot;Eraser&quot;, _eraser_button_cb);
&nbsp;&nbsp;&nbsp;ret_if(!popup);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(popup);
&nbsp;&nbsp;&nbsp;goto_if(!layout, ERROR);

&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ELM_DEMO_EDJ, &quot;popup_text_slider_view_layout&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(layout, &quot;elm.text.description&quot;, &quot;Size&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(popup, layout);

&nbsp;&nbsp;&nbsp;// Slider
&nbsp;&nbsp;&nbsp;slider = elm_slider_add(layout);
&nbsp;&nbsp;&nbsp;goto_if(!slider, ERROR);
&nbsp;&nbsp;&nbsp;elm_slider_indicator_show_set(slider, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(slider, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(slider, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_slider_indicator_format_set(slider, &quot;%1.0f&quot;);
&nbsp;&nbsp;&nbsp;elm_slider_min_max_set(slider, 1, 10);
&nbsp;&nbsp;&nbsp;elm_slider_value_set(slider, ad-&gt;eraser_size);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;slider&quot;, slider);
&nbsp;&nbsp;&nbsp;ad-&gt;eraser_size= elm_slider_value_get(slider);

&nbsp;&nbsp;&nbsp;evas_object_data_set(slider, &quot;eraser&quot;, obj);
&nbsp;&nbsp;&nbsp;evas_object_data_set(popup, &quot;slider&quot;, slider);
&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;win, &quot;popup&quot;, popup);

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(slider);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup_destroy(popup);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
}
</pre> 

<h3>Save</h3>

<p>The <span style="font-family: Courier New,Courier,monospace;">save()</span> function is called when the save icon is clicked. This function saves the image in the <span style="font-family: Courier New,Courier,monospace;">/opt/usr/media/Images/sketch/</span> directory using the <span style="font-family: Courier New,Courier,monospace;">evas_object_image_save()</span> function. If a sketch directory does not exist, it is created by the <span style="font-family: Courier New,Courier,monospace;">mkdir()</span> function.</p>
<pre class="prettyprint">
void 
save_select_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *layout = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *btn = NULL;

&nbsp;&nbsp;&nbsp;char *buf = NULL;
&nbsp;&nbsp;&nbsp;char dir[256] = {0, };
&nbsp;&nbsp;&nbsp;int i=0;

&nbsp;&nbsp;&nbsp;ad = data;

&nbsp;&nbsp;&nbsp;// Popup
&nbsp;&nbsp;&nbsp;popup = elm_popup_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ret_if(!popup);
&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Save&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(popup);
&nbsp;&nbsp;&nbsp;goto_if(!layout, ERROR);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ELM_DEMO_EDJ, &quot;popup_text_view_layout&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(popup, layout);

&nbsp;&nbsp;&nbsp;// OK button
&nbsp;&nbsp;&nbsp;btn = elm_button_add(popup);
&nbsp;&nbsp;&nbsp;goto_if(!btn, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;OK&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(popup, &quot;button1&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, _cancel_clicked_cb, popup);

&nbsp;&nbsp;&nbsp;evas_object_show(popup);

&nbsp;&nbsp;&nbsp;storage_get_directory(i, STORAGE_DIRECTORY_IMAGES, &amp;buf);
&nbsp;&nbsp;&nbsp;snprintf(dir, sizeof(dir), &quot;%s%s&quot;, buf, &quot;/sketch&quot;);

&nbsp;&nbsp;&nbsp;if (mkdir(dir, DIR_MODE) &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_D(&quot;folder &#39;sketch&#39; is already exists&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_image_save(ad-&gt;img, &quot;/opt/usr/media/Images/sketch/save.jpg&quot;, NULL, &quot;quality=100 compress=0&quot;);

&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;ERROR:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(btn);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup_destroy(popup);
}
</pre>

<h3>Popup</h3> 

<p>All menus in the Sketch application use the popup component.</p>
<pre class="prettyprint">
Evas_Object 
*popup_create(void *data, char *title, void (*_func_cb)(void *, Evas_Object *, void *))
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;retv_if(!ad, NULL);

&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *btn = NULL;

&nbsp;&nbsp;&nbsp;popup = elm_popup_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;retv_if(!popup, NULL);

&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, _popup_destroy, popup);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(popup, &quot;title,text&quot;, title);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;// OK button
&nbsp;&nbsp;&nbsp;btn = elm_button_add(popup);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;OK&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(popup, &quot;button1&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, _func_cb, ad);


&nbsp;&nbsp;&nbsp;// Cancel button
&nbsp;&nbsp;&nbsp;btn = elm_button_add(popup);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Cancel&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(popup, &quot;button&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, _popup_destroy, popup);

&nbsp;&nbsp;&nbsp;evas_object_show(popup);

&nbsp;&nbsp;&nbsp;return popup;
}
</pre>




  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>