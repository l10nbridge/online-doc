<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Media-controller-client Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>Media-controller-client Sample Overview</h1>
<p>The media-controller-client sample application demonstrates how you can create a custom media controller client type application. This sample application is based on a simple lockscreen application.</p>
<p>The following figure illustrates the main view of the media-controller-client sample application.</p>

  <p class="figure">Figure: Media-controller-client main view</p>
  <p align="center">
    <img alt="Media-controller-client main view" src="../images/mediacontrol_client_sd.png" />
  </p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privilege must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediacontroller.client</span></li>
 </ul>

<h2>Implementation</h2>

<p>To use the media controller client:</p>
<ol>
<li>Create the media controller client handle in the <span style="font-family: Courier New,Courier,monospace">__create_player_client()</span> function. The function sets the callbacks to receive the update event from the media controller server.
<pre class="prettyprint">
static void 
__create_player_client(void)
{
&nbsp;&nbsp;&nbsp;int ret = mc_client_create(&amp;s_player_data.player_client);

&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Media controller client creation [%d]&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Callbacks on server events
&nbsp;&nbsp;&nbsp;mc_client_set_server_update_cb(s_player_data.player_client, __player_state_changed_cb, NULL);
&nbsp;&nbsp;&nbsp;mc_client_set_playback_update_cb(s_player_data.player_client, __playback_updated_cb, NULL);
&nbsp;&nbsp;&nbsp;mc_client_set_metadata_update_cb(s_player_data.player_client, __metadata_updated_cb, NULL);
&nbsp;&nbsp;&nbsp;mc_client_set_shuffle_mode_update_cb(s_player_data.player_client, __shuffle_mode_updated_cb, NULL);
&nbsp;&nbsp;&nbsp;mc_client_set_repeat_mode_update_cb(s_player_data.player_client, __repeat_mode_updated_cb, NULL);    

&nbsp;&nbsp;&nbsp;return;
} 
</pre>
</li>

<li>Initialize the media information with the latest server information in the <span style="font-family: Courier New,Courier,monospace">__create_player_client()</span> function. The function can also get the latest media information using the <span style="font-family: Courier New,Courier,monospace">mc_client_get_latest_server_info()</span> and <span style="font-family: Courier New,Courier,monospace">mc_client_get_server_xxx()</span> functions. The server name is necessary to use the  <span style="font-family: Courier New,Courier,monospace">mc_client_get_server_xxx()</span> functions. To get the server name, use the <span style="font-family: Courier New,Courier,monospace">mc_client_foreach_server()</span> or <span style="font-family: Courier New,Courier,monospace">mc_client_get_latest_server_info()</span> function.
<pre class="prettyprint">
static void 
__create_player_client(void)
{
&nbsp;&nbsp;&nbsp;int ret = mc_client_create(&amp;s_player_data.player_client);

&nbsp;&nbsp;&nbsp;ret = mc_client_foreach_server(s_player_data.player_client, __server_list_cb, NULL);

&nbsp;&nbsp;&nbsp;ret = mc_client_get_latest_server_info(s_player_data.player_client, &amp;server_name, &amp;server_state);

&nbsp;&nbsp;&nbsp;if (ret == MEDIA_CONTROLLER_ERROR_NONE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; server_name
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; !s_player_data.connected) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_player_data.app_name = strdup(server_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_client_get_server_playback_info(s_player_data.player_client, s_player_data.app_name, &amp;s_player_data.playback_info);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_client_get_server_metadata(s_player_data.player_client, s_player_data.app_name, &amp;s_player_data.metadata);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_client_get_server_shuffle_mode(s_player_data.player_client, s_player_data.app_name, &amp;shuffle_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_client_get_server_repeat_mode(s_player_data.player_client, s_player_data.app_name, &amp;repeat_mode);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Didn&#39;t get information about latest server&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
} 
</pre>
</li>

<li>Send the playback state command to the media controller server application with the <span style="font-family: Courier New,Courier,monospace">mc_client_send_playback_state_command()</span> function. This function can change the playback state of the media controller server.
<pre class="prettyprint">
static void 
__play_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;mc_client_send_playback_state_command(s_player_data.player_client, s_player_data.app_name, MC_PLAYBACK_STATE_PLAYING);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Send Play command to player app [%s]&quot;, s_player_data.app_name);
}

static void 
__prev_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;mc_client_send_playback_state_command(s_player_data.player_client, s_player_data.app_name, MC_PLAYBACK_STATE_PREV_FILE);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Send Previous track command to player app [%s]&quot;, s_player_data.app_name);
}

static void 
__next_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;mc_client_send_playback_state_command(s_player_data.player_client, s_player_data.app_name, MC_PLAYBACK_STATE_NEXT_FILE);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Send Next track command to player app [%s]&quot;, s_player_data.app_name);
}
</pre>
</li>

<li>Unset the callbacks with the <span style="font-family: Courier New,Courier,monospace">mc_client_unset_xxx_update_cb()</span> functions. The media controller client handle must be destroyed using the <span style="font-family: Courier New,Courier,monospace">mc_client_destroy()</span> function.
<pre class="prettyprint">
static void 
__destroy_player_client(void)
{
&nbsp;&nbsp;&nbsp;mc_client_unset_server_update_cb(s_player_data.player_client);
&nbsp;&nbsp;&nbsp;mc_client_unset_playback_update_cb(s_player_data.player_client);
&nbsp;&nbsp;&nbsp;mc_client_unset_metadata_update_cb(s_player_data.player_client);
&nbsp;&nbsp;&nbsp;mc_client_unset_shuffle_mode_update_cb(s_player_data.player_client);
&nbsp;&nbsp;&nbsp;mc_client_unset_repeat_mode_update_cb(s_player_data.player_client);

&nbsp;&nbsp;&nbsp;mc_client_destroy(s_player_data.player_client);
&nbsp;&nbsp;&nbsp;mc_client_destroy_playback(s_player_data.playback_info);
&nbsp;&nbsp;&nbsp;mc_client_destroy_metadata(s_player_data.metadata);

&nbsp;&nbsp;&nbsp;if (s_player_data.app_name) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(s_player_data.app_name);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
</ol>

  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>