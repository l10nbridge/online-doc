<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] InList Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] InList Sample Overview</h1> 
  
  <p>The InList sample demonstrates how to manage inline list using EFL InList functions. If you do not fully understand these functions, use regular lists instead.</p>
  
  <p>Inline list is a list with nodes inlined into user types. This means that the node pointers share the same memory with the data. Inline lists fragment the memory less and avoid node -&gt; data indirection, however, they have a higher cost for some common operations, like count and sort.</p>
  
  <p>The following log shows the result of the InList sample.</p>
  
<pre class="prettyprint">
I/inlist_tag( 3390): list=0xb85638e0
I/inlist_tag( 3390): 	a=3, b=30
I/inlist_tag( 3390): 	a=1, b=10
I/inlist_tag( 3390): 	a=2, b=20
I/inlist_tag( 3390): list after sort=0xb85151e0
I/inlist_tag( 3390): 	a=1, b=10
I/inlist_tag( 3390): 	a=2, b=20
I/inlist_tag( 3390): 	a=3, b=30
I/inlist_tag( 3390): 	a=4, b=40
</pre>


<h2>Implementation</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function utilizes InList to sort given numbers in variables a and b. Basically, a node of the list is created with data a and b with struct. The <span style="font-family: Courier New,Courier,monospace">eina_inlist_append()</span> function creates a head node and later appends and prepends other list nodes with different data using the <span style="font-family: Courier New,Courier,monospace">eina_inlist_append()</span> and <span style="font-family: Courier New,Courier,monospace">eina_inlist_prepend()</span> functions to the existing InList nodes. The <span style="font-family: Courier New,Courier,monospace">eina_inlist_append_relative()</span> and <span style="font-family: Courier New,Courier,monospace">eina_inlist_demote()</span> functions place an InList at the beginning and at the end of the existing ones. The <span style="font-family: Courier New,Courier,monospace">eina_inlist_sort</span> function sorts the data in order. The <span style="font-family: Courier New,Courier,monospace">dlog_print()</span> function of the Core API is used to print the sorted data by using the <span style="font-family: Courier New,Courier,monospace">dlogutil</span> command in the Tizen SDB.</p> 

<pre class="prettyprint">
struct my_struct 
{
&nbsp;&nbsp;&nbsp;EINA_INLIST;
&nbsp;&nbsp;&nbsp;int a, b;
};

int sort_cb(const void *d1, const void *d2)
{
&nbsp;&nbsp;&nbsp;const Eina_Inlist *l1, *l2;
&nbsp;&nbsp;&nbsp;const struct my_struct *x1, *x2;
&nbsp;&nbsp;&nbsp;l1 = d1;
&nbsp;&nbsp;&nbsp;l2 = d2;
&nbsp;&nbsp;&nbsp;x1 = EINA_INLIST_CONTAINER_GET(l1, struct my_struct);
&nbsp;&nbsp;&nbsp;x2 = EINA_INLIST_CONTAINER_GET(l2, struct my_struct);
&nbsp;&nbsp;&nbsp;return x1-&gt;a - x2-&gt;a;
}

static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// InList Code
&nbsp;&nbsp;&nbsp;struct my_struct *d, *cur;
&nbsp;&nbsp;&nbsp;Eina_Inlist *list, *itr, *tmp;
&nbsp;&nbsp;&nbsp;d = malloc(sizeof(*d));
&nbsp;&nbsp;&nbsp;d-&gt;a = 1;
&nbsp;&nbsp;&nbsp;d-&gt;b = 10;
&nbsp;&nbsp;&nbsp;list = eina_inlist_append(NULL, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;d = malloc(sizeof(*d));
&nbsp;&nbsp;&nbsp;d-&gt;a = 2;
&nbsp;&nbsp;&nbsp;d-&gt;b = 20;
&nbsp;&nbsp;&nbsp;list = eina_inlist_append(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;d = malloc(sizeof(*d));
&nbsp;&nbsp;&nbsp;d-&gt;a = 3;
&nbsp;&nbsp;&nbsp;d-&gt;b = 30;
&nbsp;&nbsp;&nbsp;list = eina_inlist_prepend(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;inlist_tag&quot;, &quot;list=%p\n&quot;, list);
&nbsp;&nbsp;&nbsp;EINA_INLIST_FOREACH(list, cur);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;inlist_tag&quot;,&quot;\ta=%d, b=%d\n&quot;, cur-&gt;a, cur-&gt;b);
&nbsp;&nbsp;&nbsp;list = eina_inlist_promote(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;d = malloc(sizeof(*d));
&nbsp;&nbsp;&nbsp;d-&gt;a = 4;
&nbsp;&nbsp;&nbsp;d-&gt;b = 40;
&nbsp;&nbsp;&nbsp;list = eina_inlist_append_relative(list, EINA_INLIST_GET(d), list);
&nbsp;&nbsp;&nbsp;list = eina_inlist_demote(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;list = eina_inlist_sort(list, sort_cb);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;inlist_tag&quot;,&quot;list after sort=%p\n&quot;, list);
&nbsp;&nbsp;&nbsp;EINA_INLIST_FOREACH(list, cur)
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;inlist_tag&quot;,&quot;\ta=%d, b=%d\n&quot;, cur-&gt;a, cur-&gt;b);
&nbsp;&nbsp;&nbsp;tmp = eina_inlist_find(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;if (tmp)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur = EINA_INLIST_CONTAINER_GET(tmp, struct my_struct);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur = NULL;
&nbsp;&nbsp;&nbsp;if (d != cur)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;inlist_tag&quot;,&quot;wrong node! cur=%p\n&quot;, cur);
&nbsp;&nbsp;&nbsp;list = eina_inlist_remove(list, EINA_INLIST_GET(d));
&nbsp;&nbsp;&nbsp;free(d);
&nbsp;&nbsp;&nbsp;printf(&quot;list=%p\n&quot;, list);
&nbsp;&nbsp;&nbsp;for (itr = list; itr != NULL; itr = itr-&gt;next)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cur = EINA_INLIST_CONTAINER_GET(itr, struct my_struct);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;\ta=%d, b=%d\n&quot;, cur-&gt;a, cur-&gt;b);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;while (list)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct my_struct *aux = EINA_INLIST_CONTAINER_GET(list,struct my_struct);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list = eina_inlist_remove(list, list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(aux);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Window UI can be ignored from this sample as dlog_print is used to show the result
&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_KEY_DOWN, keydown_cb, ad);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>