<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>EOM Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>EOM Sample Overview</h1>
<p>The EOM sample application demonstrates how you can use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__UI__EOM__MODULE.html">External Output Manager</a> API to manage the EOM modes.</p>

<p>The following figure illustrates the EOM modes. The default mode is mirror mode. If you connect an HDMI cable, the EOM server displays the main LCD image in an external output. If you want to display a different image, set the presentation mode.
</p>

<p class="figure">Figure: EOM modes</p> 
  <p align="center"><img alt="EOM modes" src="../images/eom_mode.png" /></p>

<h2>Implementation</h2> 

<p>To use the EOM features:</p>
<ol>
<li>Initialize the EOM.
<p>To use the External Output Manager API, include the <span style="font-family: Courier New,Courier,monospace">eom.h</span> header file and call the <span style="font-family: Courier New,Courier,monospace">eom_init()</span> function:</p>

<pre class="prettyprint">
#include &lt;eom.h&gt;

{
&nbsp;&nbsp;&nbsp;eom_init();
}
</pre>
</li>

<li>Get the output ID.
<p>To retrieve the output ID, use the <span style="font-family: Courier New,Courier,monospace">eom_get_eom_output_ids()</span> function. You need the ID to get information about the output device and to control the external window.</p>

<pre class="prettyprint">
int 
sample_get_output_id(const char *output_name)
{
&nbsp;&nbsp;&nbsp;eom_output_id *output_ids = NULL;
&nbsp;&nbsp;&nbsp;eom_output_id output_id = 0;
&nbsp;&nbsp;&nbsp;eom_output_type_e output_type = EOM_OUTPUT_TYPE_UNKNOWN;
&nbsp;&nbsp;&nbsp;int id_cnt = 0;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;output_ids = eom_get_eom_output_ids(&amp;id_cnt);
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; id_cnt; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_get_output_type(output_ids[i], &amp;output_type);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!strncmp(output_name, &quot;HDMI&quot;, 4)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (output_type == EOM_OUTPUT_TYPE_HDMIA || output_type == EOM_OUTPUT_TYPE_HDMIB) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output_id = output_ids[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (output_ids)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free (output_ids);
	  
&nbsp;&nbsp;&nbsp;return output_id;
}
</pre></li>

<li>Set the presentation mode.
<p>To connect to an external output device in the presentation mode, use the <span style="font-family: Courier New,Courier,monospace">eom_set_output_attribute()</span> function to set the presentation mode priority attribute. If the setting is successful, the External Output Manager module uses the presentation mode when the external output device is connected.
If the function returns <span style="font-family: Courier New,Courier,monospace">EOM_ERROR_NONE</span>, the application can use the external output device.</p>
<pre class="prettyprint">
int 
set_attribute()
{
&nbsp;&nbsp;&nbsp;eom_output_id output_id = 0;
&nbsp;&nbsp;&nbsp;int ret;

&nbsp;&nbsp;&nbsp;output_id = sample_get_output_id(&quot;HDMI&quot;);
&nbsp;&nbsp;&nbsp;ret = eom_set_output_attribute(output_id, EOM_OUTPUT_ATTRIBUTE_NORMAL);
&nbsp;&nbsp;&nbsp;if (ret != EOM_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Attribute setting failed, the external output device cannot be used
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Deinitializing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_deinit();
	  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre></li>

<li>Set the external window to display an image to the external output.
<p>To set an external window, use the <span style="font-family: Courier New,Courier,monospace">eom_set_output_window()</span> function. This function moves the window to the external output and automatically resizes it to the best resolution of the external output.</p>
<p>Before calling this function, you must receive a success return from the <span style="font-family: Courier New,Courier,monospace">eom_set_output_attribute()</span> function.</p>
<pre class="prettyprint">
int 
make_external_window()
{
&nbsp;&nbsp;&nbsp;Evas_Object *window;
&nbsp;&nbsp;&nbsp;window = elm_win_add(NULL, &quot;external_window&quot;, ELM_WIN_BASIC);
&nbsp;&nbsp;&nbsp;if (eom_set_output_window(output_id, window) == EOM_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
   
&nbsp;&nbsp;&nbsp;evas_object_del (window);

&nbsp;&nbsp;&nbsp;return -1;
}
</pre></li>

<li>Get the status of the external output device:
<ul><li>
<p>You can retrieve information about the external output device details with the following functions:</p>
<ul><li><span style="font-family: Courier New,Courier,monospace">eom_get_output_type()</span>: Get the connection type of the external output.</li>
<li><span style="font-family: Courier New,Courier,monospace">eom_get_output_mode()</span>: Get the external output mode.</li>
<li><span style="font-family: Courier New,Courier,monospace">eom_get_output_attribute()</span>: Get the presentation mode priority attribute information.</li>
<li><span style="font-family: Courier New,Courier,monospace">eom_get_output_attribute_state()</span>: Get the attribute state information:
<ul>
<li><span style="font-family: Courier New,Courier,monospace">ACTIVE</span>: The application can use the external output.</li>
<li><span style="font-family: Courier New,Courier,monospace">INACTIVE</span>: The application was disconnected from the external output.</li>
<li><span style="font-family: Courier New,Courier,monospace">LOST</span>: The application cannot use the external output because another application has set the attribute. The application can no longer receive the attribute state.</li></ul></li>
<li><span style="font-family: Courier New,Courier,monospace">eom_get_output_resolution()</span>: Get the best resolution of the external output device.</li>
<li><span style="font-family: Courier New,Courier,monospace">eom_get_output_physical_size()</span>: Get the physical size of the external output device.</li>
</ul></li>

<li>
<p>You can receive notifications about state changes of the external output device through callback functions:</p>

<ol type="a"><li>You can define 4 callbacks (add, remove, mode change, and attribute change):
<pre class="prettyprint">
typedef struct
{
&nbsp;&nbsp;&nbsp;Evas_Object *external_window;
&nbsp;&nbsp;&nbsp;int output_id;
} SampleInfo;

// Triggered when the external output is connected
static void
sample_notify_cb_output_add(eom_output_id output_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;SampleInfo *info = (SampleInfo*)user_data;
&nbsp;&nbsp;&nbsp;if (!info-&gt;external_window) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create the external window
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make_external_window(info-&gt;external_window);
&nbsp;&nbsp;&nbsp;}
}

// Triggered when the external output is disconnected
static void
sample_notify_cb_output_remove(eom_output_id output_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;SampleInfo *info = (SampleInfo*)user_data;
&nbsp;&nbsp;&nbsp;if (!info-&gt;external_window)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(info-&gt;external_window)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;info-&gt;external_window = NULL;
&nbsp;&nbsp;&nbsp;}
}

// Triggered when the state of the EOM output attribute changes
static void
sample_notify_cb_attribute_changed(eom_output_id output_id, void *user_data)
{
&nbsp;&nbsp;&nbsp;SampleInfo *info = (SampleInfo*)user_data;
&nbsp;&nbsp;&nbsp;eom_output_attribute_e attribute = EOM_OUTPUT_ATTRIBUTE_NONE;
&nbsp;&nbsp;&nbsp;eom_output_attribute_state_e state = EOM_OUTPUT_ATTRIBUTE_STATE_NONE;
   
&nbsp;&nbsp;&nbsp;eom_get_output_attribute(output_id, &amp;attribute);
&nbsp;&nbsp;&nbsp;eom_get_output_attribute_state(output_id, &amp;state);
   
&nbsp;&nbsp;&nbsp;if (state == EOM_OUTPUT_ATTRIBUTE_STATE_ACTIVE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Start displaying the image to the external output (info-&gt;external_window)
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (state == EOM_OUTPUT_ATTRIBUTE_STATE_INACTIVE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Stop displaying the image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Destroy the external_window
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (state == EOM_OUTPUT_ATTRIBUTE_STATE_LOST)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Stop displaying the image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Destroy the external_window
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Remove the callbacks
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>Register the callbacks:
<pre class="prettyprint">
int 
elm_main()
{
&nbsp;&nbsp;&nbsp;SampleInfo *info;
&nbsp;&nbsp;&nbsp;eom_output_mode_e output_mode = EOM_OUTPUT_MODE_NONE;
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;info = calloc(sizeof(SampleInfo));
   
&nbsp;&nbsp;&nbsp;eom_init();
&nbsp;&nbsp;&nbsp;info-&gt;output_id = sample_get_output_id (&quot;HDMI&quot;);
&nbsp;&nbsp;&nbsp;ret = eom_set_output_attribute(info-&gt;hdmi_output_id, EOM_OUTPUT_ATTRIBUTE_NORMAL);
&nbsp;&nbsp;&nbsp;if (ret != EOM_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Cannot use the external output device
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_deinit();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_get_output_mode(info-&gt;output_id, &amp;output_mode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (output_mode != EOM_OUTPUT_MODE_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Create the external window
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make_external_window(info-&gt;external_window);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Add the callbacks
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_set_output_added_cb(sample_notify_cb_output_add, info);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_set_output_removed_cb(sample_notify_cb_output_remove, info);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eom_set_attribute_changed_cb(sample_notify_cb_attribute_changed, info);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;elm_run();
}
</pre></li>

<li>When no longer needed, delete the callbacks and call the <span style="font-family: Courier New,Courier,monospace">eom_deinit()</span> function:
<pre class="prettyprint">
static void 
_destroy()
{
&nbsp;&nbsp;&nbsp;eom_unset_output_added_cb(sample_notify_cb_output_add);
&nbsp;&nbsp;&nbsp;eom_unset_output_removed_cb(sample_notify_cb_output_remove);
&nbsp;&nbsp;&nbsp;eom_unset_attribute_changed_cb(sample_notify_cb_attribute_changed);
&nbsp;&nbsp;&nbsp;eom_deinit();
}
</pre></li>
</ol></li></ul></li>
</ol>


  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>