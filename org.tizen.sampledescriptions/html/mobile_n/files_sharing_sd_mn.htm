<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Files Sharing Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Files Sharing Sample Overview</h1>

  <p>The Files Sharing sample application demonstrates how you can use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__OPP__MODULE.html">Bluetooth OPP</a> (Object Push Profile) API to send media data between 2 devices.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  
  <p>The following figure illustrates the main screen of the Files Sharing.</p>
  <p class="figure">Figure: Files Sharing screen</p>
  <p align="center"><img alt="Files Sharing screen" src="../images/files_sharing_main_view.png" />
  </p>

  <h2>Prerequisites</h2>
  <ul>
  <li>The Bluetooth adapter must be switched on.</li>
   <li>A connection with the paired device must be available.</li>
  
  <li>To ensure proper application execution, the following privileges must be set:
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediastorage</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/bluetooth</span></li>
  </ul>
  </li>
  <li>To ensure proper application execution, the following features must be enabled:
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth</span></li>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth.opp</span></li>
  </ul>
  </li>
   </ul>
   
   <h2>Source Files</h2>
   
   <p>You can create and view the sample application project including the source files in the IDE.</p>
   <p>The application uses a simple MVC (Model-View-Controller) architectural pattern. The application model consists of a media and Bluetooth module.</p>
   
      <table>
   <caption>
     Table: View and Bluetooth model source files
   </caption>
   <tbody>
    <tr>
	<th style="text-align:center;margin-left:auto;margin-right:auto;">Model</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">File name</th>
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th>
    </tr>
	<tr>
	<td rowspan="5">View</td>
	 <td><span style="font-family: Courier New,Courier,monospace">src/view/files_selector_item.c</span></td>
	 <td>This file implements the file selector item, which handles the view of each image placed in the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component.</td>
	</tr>
	<tr>
	 <td><span style="font-family: Courier New,Courier,monospace">src/view/view.c</span></td>
	 <td>This is the main view file. It creates a standard component set: a window, a conformant, and a layout, as well as subcomponents which are later inserted in the main layout.</td>
	</tr>
	<tr>
	 <td><span style="font-family: Courier New,Courier,monospace">src/view/view_devices_selector.c</span></td>
	 <td>This file implements the device selector that is used to select the destination device.</td>
	</tr>
	<tr>
	 <td><span style="font-family: Courier New,Courier,monospace">src/view/view_files_selector.c</span></td>
	 <td>This file implements the file selector, which is an <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component used to show the available images.</td>
	</tr>
	<tr>
	 <td><span style="font-family: Courier New,Courier,monospace">src/view/view_popup.c</span></td>
	 <td>This file implements the popup view that is responsible for displaying warnings and the file sending progress.</td>
	</tr>
	<tr>
	<td rowspan="3">Bluetooth</td>
	 <td><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_device.c</span></td>
	 <td>This file implements the handling for the <span style="font-family: Courier New,Courier,monospace">bt_device</span> data structure, which holds additional device information, such as the remote address.</td>
	</tr>
	<tr>
	 <td><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_devices_list.c</span></td>
	 <td>This file implements the <span style="font-family: Courier New,Courier,monospace">bt_devices_list</span>, which holds the list of all available devices obtained from the Bluetooth API. The file provides the API to find a device in the list.</td>
	</tr>
	<tr>
	<td><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_module.c</span></td>
	 <td>This is the main model file. It is responsible for the Bluetooth adapter initialization and obtaining the paired devices list.</td>
	</tr>
   </tbody>
  </table>

<h2>Implementation</h2>
<p>The following figure illustrates the application structure.</p>
<p class="figure">Figure: Application structure</p>
<p align="center"> <img alt="Application structure" src="../images/files_sharing_application_structure.png" /></p>


<h3>View</h3>
<p>The view alignment is managed by an EDJE layout. The view consists of 3 types of components:</p>
<ul>
<li>The paired device list is handled by an <span style="font-family: Courier New,Courier,monospace">elm_hoversel</span> component.</li>
<li>The file list is shown in an <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component.</li>
<li>To send the list of selected files, an <span style="font-family: Courier New,Courier,monospace">elm_button</span> is used.</li>
</ul>
<p>The following figure illustrates the main view structure.</p>
<p class="figure">Figure: Main view structure</p>
<p align="center"> <img alt="Main view structure" src="../images/files_sharing_view.png" /></p>



<h3>Model</h3>
<p>The model module deals directly with the application data. It is responsible for:</p>
<ul>
  <li>Preparing the data structures used in the sample application</li>
  <li>Creating the media file list (only image files are used in this application)
<p>The implementation of the media module responsible for acquiring the list of available image files is taken from the Media App sample application, and is not covered in this topic. For more information, see the <a href="../../../org.tizen.tutorials/html/native/content/media_content_tutorial_n.htm">Media Content</a> tutorial.</p>  
  </li>
  <li>Creating the paired device list</li>
</ul>
<p>To implement the Bluetooth device structure and device list:</p>
<ol>
<li>
<p>The Bluetooth device object structure consists of 2 fields, which store the device name and address:</p>
<pre class="prettyprint">
struct 
_bt_dev_t 
{
&nbsp;&nbsp;&nbsp;char *dev_name;
&nbsp;&nbsp;&nbsp;char *dev_remote_addr;
};
typedef struct _bt_dev_t bt_dev_t;
</pre>
</li>
<li>
<p>The Bluetooth Device API consists of 3 functions you can use to manage the devices:</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">bt_device_create()</span>: Creates a new <span style="font-family: Courier New,Courier,monospace">bt_dev_t</span> device object.</li>
  <li><span style="font-family: Courier New,Courier,monospace">bt_device_destroy()</span>: Releases the data connected to the device object.</li>
  <li><span style="font-family: Courier New,Courier,monospace">bt_device_get_remote_addr()</span>: Returns the remote address of the device.</li>
</ul>
</li>
<li>
<p>The device list implementation is based on an <span style="font-family: Courier New,Courier,monospace">Eina_List</span>. It holds all paired devices in a form of <span style="font-family: Courier New,Courier,monospace">bt_dev_t</span> objects. It provides the API for appending new devices into the list and finding a device using its name.</p>
<pre class="prettyprint">
bt_dev_t* 
bt_devices_list_get_device(const char *dev_name)
{
&nbsp;&nbsp;&nbsp;Eina_List *it = NULL;
&nbsp;&nbsp;&nbsp;bt_dev_t *device = NULL;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;if (!dev_name) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(bt_devices_list_info_s.devices_list, it, device) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!device)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Compare device name
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (device-&gt;dev_name &amp;&amp; (strlen(device-&gt;dev_name) == strlen(dev_name)) &amp;&amp; !strncmp(device-&gt;dev_name, dev_name, strlen(dev_name)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return device;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>
</li>
</ol>

<h4>Bluetooth Module</h4>
<p>The main tasks of the Bluetooth module are:</p>
<ul>
  <li>Initializing Bluetooth</li>
  <li>Reading the paired device list</li>
  <li>Sending files between devices</li>
  <li>Monitoring the status of the connection (file sending progress and any errors that occur during the process)</li>
</ul>

<p>To implement the Bluetooth module:</p>
<ol>
<li>
<p>Initialize the module in the <span style="font-family: Courier New,Courier,monospace">bt_module_init()</span> function:</p>
<pre class="prettyprint">
bool 
bt_module_init()
{
&nbsp;&nbsp;&nbsp;Eina_List *bt_devices_list = NULL;
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;ret = bt_initialize();
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Print detailed error description in the Tizen SDK log tool
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_module_check_err(&quot;bt_initialize&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_initialize();
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_module_check_err(&quot;bt_opp_client_initialize&quot;, ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If OPP client initialization fails, Bluetooth adapter must be freed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_deinitialize();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Find all paired devices
&nbsp;&nbsp;&nbsp;ret = bt_adapter_foreach_bonded_device(__bt_module_find_bonded_devices_cb, NULL);
&nbsp;&nbsp;&nbsp;bt_devices_list = bt_devices_list_get();

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Add devices into the list in the callback function invoked by the <span style="font-family: Courier New,Courier,monospace">bt_adapter_foreach_bonded_device()</span> function:</p>
<pre class="prettyprint">
static bool 
__bt_module_find_bonded_devices_cb(bt_device_info_s *device_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;bt_dev_t *bt_dev = NULL;
&nbsp;&nbsp;&nbsp;if (!device_info) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Print error message and return false
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Create the device handle based on the data obtained from the callback
&nbsp;&nbsp;&nbsp;bt_dev = bt_device_create(device_info-&gt;remote_name, device_info-&gt;remote_address);
&nbsp;&nbsp;&nbsp;if (!bt_dev) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If creation fails, an error message is printed and the function returns false
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!bt_devices_list_append_device((const bt_dev_t *) bt_dev)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If bt_devices_list API returns an error, the created device is removed here
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_device_destroy(bt_dev);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!controller_update_view(bt_dev)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If view update fails, an error message is printed and the function returns false
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

</li>
<li>Start file sharing.
<p>The file exchange starts when the user clicks <strong>Send</strong>. Then, the view passes the list of selected files and the device name to the controller module. The controller module uses an internal API to get the remote address for the specified device and uses the Bluetooth module to send the files. The <span style="font-family: Courier New,Courier,monospace">bt_module_send_files()</span> function uses the Bluetooth OPP API.</p>
<p>Callback functions are used to update the view and inform the user about the sending status. The sending progress is shown in a popup with a progress bar and a file name label.</p>
<pre class="prettyprint">
bool 
bt_module_send_files(Eina_List *files_list, const char *device_name)
{
&nbsp;&nbsp;&nbsp;Eina_List *it = NULL;
&nbsp;&nbsp;&nbsp;const char *path = NULL;
&nbsp;&nbsp;&nbsp;bt_dev_t *dev = NULL;
&nbsp;&nbsp;&nbsp;const char *remote_addr = NULL;
&nbsp;&nbsp;&nbsp;int ret = BT_ERROR_NONE;
&nbsp;&nbsp;&nbsp;// Find the device by name 
&nbsp;&nbsp;&nbsp;dev = bt_devices_list_get_device(device_name);
&nbsp;&nbsp;&nbsp;// Get the remote address of the device
&nbsp;&nbsp;&nbsp;remote_addr = bt_device_get_remote_addr(dev);
&nbsp;&nbsp;&nbsp;// Each selected file is added into the OPP client
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(files_list, it, path) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = bt_opp_client_add_file(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check the status; if an error occurs, release the used resources and return false
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Push added files, check the status, and set up callbacks invoked on events occurred in the Bluetooth module
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_push_files(remote_addr, __bt_module_responded_cb, __bt_module_progress_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_module_push_finished_cb, NULL);
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Print errors and release used resources
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The following figure illustrates the file sharing process.</p>
<p class="figure">Figure: File sharing process</p>
<p align="center"> <img alt="File sharing process" src="../images/files_sharing_sequence.png" /></p>

</li>
<li>
<p>To cancel the sending process, use the <span style="font-family: Courier New,Courier,monospace">bt_module_cancel_data_sending()</span> function.</p>
<p>This function clears the file list stored by the OPP client and invokes the <span style="font-family: Courier New,Courier,monospace">bt_opp_client_cancel_push()</span> function.</p>
<pre class="prettyprint">
void 
bt_module_cancel_data_sending(void)
{
&nbsp;&nbsp;&nbsp;int ret = BT_ERROR_NONE;
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_cancel_push();
&nbsp;&nbsp;&nbsp;__bt_module_check_err(&quot;bt_opp_client_cancel_push&quot;, ret);
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_clear_files();
&nbsp;&nbsp;&nbsp;__bt_module_check_err(&quot;bt_opp_client_clear_files&quot;, ret);
}
</pre>
</li>
<li>
<p>When the sample application is terminated, deinitialize the Bluetooth module in the <span style="font-family: Courier New,Courier,monospace">bt_module_deinit()</span> function:</p>

<pre class="prettyprint">
void 
bt_module_deinit(void)
{
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_deinitialize();
&nbsp;&nbsp;&nbsp;__bt_module_check_err(&quot;bt_opp_client_deinitialize&quot;, ret);
&nbsp;&nbsp;&nbsp;ret = bt_deinitialize();
&nbsp;&nbsp;&nbsp;bt_devices_list_destroy();
}
</pre>
</li>

</ol>

<h3>Controller</h3>
<p>The controller module connects the view and the model. It delivers the following functions:</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">controller_update_files_list()</span>: Connects the media module with the file list component. All images are obtained using the Media API.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_update_devices_list()</span>: Adds a new device to the view.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_send_files()</span>: Gets the list of selected files from the view and sends it using Bluetooth.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_change_sending_progress()</span>: Updates the sending progress in the view.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_cancel_data_sending()</span>: Cancels file pushing based on user actions.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_enable_popup()</span>: Enables the <strong>Done</strong> button in the sending popup.</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_block_view_with_warning()</span>: Displays the warning popup and blocks the view for a short amount of time.</li>
</ul>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
