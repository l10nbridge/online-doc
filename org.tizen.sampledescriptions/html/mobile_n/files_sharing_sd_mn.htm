<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Files-Sharing Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Files-Sharing Sample Overview</h1>

  <p>The Files-Sharing sample application demonstrates how you can use Bluetooth OPP (Object Push Profile) API to send media data between two devices.</p>
  <p>The following figure illustrates the application view:</p>
  <p class="figure">Figure: Main view</p>
  <p align="center"><img alt="Main view" src="../images/files-sharing-main_view.png" />
  </p>

  <h2>Prerequisites</h2>
  <p>To ensure proper application execution, the following privileges and features must be set:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediastorage</span>,</li>
	  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/bluetooth</span>,</li>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth</span>,</li>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth.opp</span>.</li>
  </ul>
  <p>Additional prerequisites:</p>
  <ul>
    <li>Bluetooth adapter should be switched on,</li>
    <li>connection with the paired device should be available.</li>
  </ul>

<h2>Implementation</h2>
<p>The following figure illustrates the application structure:</p>
<p class="figure">Figure: Main view</p>
<p align="center"> <img alt="Sample structure" src="../images/files_sharing_application_structure.png" /></p>
<p>The application uses a simple MVC (Model-View-Controller) architectural pattern. The application model consists of a media and Bluetooth module.</p>

<h3>View</h3>
<p>The view alignment is managed by an EDJE layout which is depicted in details below.</p>
<p class="figure">Figure: Main view structure</p>
<p align="center"> <img alt="Sample structure" src="../images/files_sharing_view.png" /></p>
<p>The view is very simple. It consists of three types of widgets. The paired devices list is handled by an <span style="font-family: Courier New,Courier,monospace">elm_hoversel</span> widget. The files list is shown in an <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> widget. To send the selected files list, an <span style="font-family: Courier New,Courier,monospace">elm_button</span> is used.</p>

<p>The view implementation is stored in the following files:</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">src/view/view.c</span>: The main view file. It creates a standard widgets set: a window, a conformant and a layout, as well as subwidgets shown in the figure above which are later inserted in the main layout.</li>
  <li><span style="font-family: Courier New,Courier,monospace">src/view/view_devices_selector.c</span>: The devices selector is used to choose the destination device.</li>
  <li><span style="font-family: Courier New,Courier,monospace">src/view/view_files_selector.c</span>: The files selector is an <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> widget used to show available pictures.</li>
  <li><span style="font-family: Courier New,Courier,monospace">src/view/files_selector_item.c</span>: The files selector item handles the view of each picture placed in the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> widget.</li>
  <li><span style="font-family: Courier New,Courier,monospace">src/view/view_popup.c</span>: The popup view is responsible for displaying warnings and the file sending progress.</li>
</ul>

<h3>Model</h3>
<p>The Model module deals directly with the application data. It is responsible for:</p>
<ul>
  <li>creating the media files list. In case of this sample application, only image files are used;</li>
  <li>creating the paired devices list;</li>
  <li>preparing the data structures used in the sample application.</li>
</ul>

<h4>Media module</h4>
<p>The implementation of the media module that is responsible for acquiring the list of available images was taken from the Media sample application and its description can be found in Tizen SDK as well as in the Media API tutorial (<a href="https://developer.tizen.org/development/tutorials/native-application/content">Media Content Tutorial</a>).</p>

<h4>Bluetooth module</h4>
<p>The main tasks of the Bluetooth module:</p>
<ul>
  <li>initializing Bluetooth,</li>
  <li>reading paired devices list,</li>
  <li>sending files between devices,</li>
  <li>monitoring the status of the connection (sending progress, errors that occured during the process).</li>
</ul>

<p>The Bluetooth module implementation is stored in the following files:</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_module.c</span>: The main file of the model. It is responsible for the Bluetooth adapter initialization and obtaining paired devices list.</li>
  <li><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_device.c</span>: It is responsible for bt_device data structure handling which holds additional device information such as the remote address. </li>
  <li><span style="font-family: Courier New,Courier,monospace">src/bt_module/bt_devices_list.c</span>: The bt_devices_list holds the list of all available devices obtained from the Bluetooth API. The file provides the API to find a device in that list. </li>
</ul>

<p>The module is initialized in the <span style="font-family: Courier New,Courier,monospace">bt_module_init()</span> function which is described below.</p>
<pre class="prettyprint">
bool bt_module_init()
{
&nbsp;&nbsp;&nbsp;Eina_List *bt_devices_list = NULL;
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;ret = bt_initialize();
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*Function below is used to print detailed error description in the Tizen SDK log tool.*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_module_check_err("bt_initialize", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_initialize();
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__bt_module_check_err("bt_opp_client_initialize", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*If opp client initialization fails, Bluetooth adapter must be freed.*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_deinitialize();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/*Function is used to find all paired devices.*/
&nbsp;&nbsp;&nbsp;ret = bt_adapter_foreach_bonded_device(__bt_module_find_bonded_devices_cb, NULL);
&nbsp;&nbsp;&nbsp;bt_devices_list = bt_devices_list_get();return true;
}
</pre>

<p>The devices are added into the list in the callback function invoked by <span style="font-family: Courier New,Courier,monospace">bt_adapter_foreach_bonded_device()</span> function.</p>

<pre class="prettyprint">
static bool __bt_module_find_bonded_devices_cb(bt_device_info_s *device_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;bt_dev_t *bt_dev = NULL;
&nbsp;&nbsp;&nbsp;if (!device_info) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*Print error message and return false.*/
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/*Create the device handle based on the data obtained from the callback.*/
&nbsp;&nbsp;&nbsp;bt_dev = bt_device_create(device_info->remote_name, device_info->remote_address);
&nbsp;&nbsp;&nbsp;if (!bt_dev) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*If creation fails, print error message and return false.*/
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!bt_devices_list_append_device((const bt_dev_t *) bt_dev)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*If bt_devices_list API returns error, created device will be removed here.*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_device_destroy(bt_dev);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!controller_update_view(bt_dev)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*If view update fails, error message will be printed and function returns false.*/
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The following figure illustrates the process of files sharing.</p>
<p class="figure">Figure: Files sharing</p>
<p align="center"> <img alt="Sample structure" src="../images/files_sharing_sequence.png" /></p>

<p>Files exchange starts when the user presses the send button. Then, the view passes the selected files list and the device name to the controller module. The controller module uses the internal API to get the remote address for the specified device and uses the Bluetooth module to send the files. The <span style="font-family: Courier New,Courier,monospace">bt_module_send_files()</span> function which uses Bluetooth OPP API is described below.</p>

<pre class="prettyprint">
bool bt_module_send_files(Eina_List *files_list, const char *device_name)
{
&nbsp;&nbsp;&nbsp;Eina_List *it = NULL;
&nbsp;&nbsp;&nbsp;const char *path = NULL;
&nbsp;&nbsp;&nbsp;bt_dev_t *dev = NULL;
&nbsp;&nbsp;&nbsp;const char *remote_addr = NULL;
&nbsp;&nbsp;&nbsp;int ret = BT_ERROR_NONE;
&nbsp;&nbsp;&nbsp;/*Find the device by name*/
&nbsp;&nbsp;&nbsp;dev = bt_devices_list_get_device(device_name);
&nbsp;&nbsp;&nbsp;/*Get the remote address of the device*/
&nbsp;&nbsp;&nbsp;remote_addr = bt_device_get_remote_addr(dev);
&nbsp;&nbsp;&nbsp;/*Each selected file is added into the OPP client.*/
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH (files_list, it, path) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = bt_opp_client_add_file(path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*Check the status. If error occurs function releases used resources and returns false.*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/*Push added files and check the status and setup callbacks invoked on events occurred in the Bluetooth module.*/
&nbsp;&nbsp;&nbsp;ret = bt_opp_client_push_files(remote_addr, __bt_module_responded_cb, __bt_module_progress_cb, __bt_module_push_finished_cb, NULL);
&nbsp;&nbsp;&nbsp;if (ret != BT_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;/*Print errors and release used resources.*/
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return true;
}
</pre>



<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
