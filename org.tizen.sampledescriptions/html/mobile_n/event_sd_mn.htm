<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Event Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
  </div>

  <h1>Event Sample Overview</h1>

  <p>
  The Tizen API's Event module provides a set of functions enabling listeners creation for specified system and custom events. In order to receive a custom event via created listener, one must be created
  and published. This sample application gives an example of custom events creation and publishing as well as the listening for both types of events.
  </p>
  <p>The figure below illustrates the view of the application.</p>
  <p id="app-screenshot" class="figure">Figure: Event application screens.</p>
  <p style="text-align:center;">
    <img alt="System events view" height="364" hspace="20" src="../images/event_system_events_view_sd_mn.png" />
	<img alt="Custom events view" height="364" hspace="20" src="../images/event_custom_events_view_sd_mn.png" />
	<img alt="Received custom event view" height="364" hspace="20" src="../images/event_custom_events_received_view_sd_mn.png" />
  </p>

  <p>The sample application provides a user interface for previewing available events and their status:
  <ul>
    <li>system events:
      <ul>
	    <li>battery level and charger status,</li>
	    <li>USB and earjack status,</li>
	    <li>display state and auto-rotation mode,</li>
	    <li>system boot and shutdown status,</li>
	    <li>memory status,</li>
	    <li>Wi-Fi, Bluetooth, mobile data and roaming state,</li>
		<li>location, GPS and NPS state,</li>
		<li>incoming message status,</li>
		<li>time, zone and hour format change,</li>
		<li>language and region format change,</li>
		<li>silent and vibration mode change,</li>
		<li>font change;</li>
      </ul>
	</li>
	<li>custom events:
	  <ul>
	    <li>custom events are received once they are registered and published by the user via "Custom events" tab.</li>
	  </ul>
	</li>
  </ul>
  The structure of the user interface is depicted below (EDJE layout scripts are used).
  </p>
  <p id="ui-main-struct" class="figure">Figure: Event main layout structure.</p>
  <p style="text-align:center;">
    <img alt="Event main layout structure" hspace="80" height="400" src="../images/event_ui_layout_1_sd_mn.png" />
  </p>
  <p>
  The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> swallow is used as a container for any of the below layouts.
  </p>
  <p id="ui-tabs-struct" class="figure">Figure: Event tabs layout structure.</p>
  <p style="text-align:center;">
    <img alt="Event tabs layout structure" hspace="80" height="400" src="../images/event_ui_layout_2_sd_mn.png" />
  </p>
  <p>
  The final application's view is created by embedding proper widgets into the layouts depicted above. The resulting UI views are shown below.
  </p>
  <p id="ui-view" class="figure">Figure: Event application's UI view.</p>
  <p style="text-align:center;">
    <img alt="Event application's UI view" hspace="80" height="450" src="../images/event_ui_tabs_view_sd_mn.png" />
  </p>
  <br>
  The application's workflow can be divided into three logical pipelines:
  <ul>
    <li>application startup,</li>
	<li>system events handling,</li>
	<li>custom event creation, publishing and receiving,</li>
  </ul>
  which can be described by the following figure:
  </p>
  <p id="workflow" class="figure">Figure: Event application workflow.</p>
  <p style="text-align:center;">
    <img alt="Application workflow" height="450" hspace="0" src="../images/event_workflow_sd_mn.png"/>
  </p>

  <h3>Prerequisites</h3>
  <p>
  To ensure proper application execution, the following privileges must be set:
    <ul>
      <li>http://tizen.org/privilege/network.get,</li>
      <li>http://tizen.org/privilege/message.read,</li>
      <li>http://tizen.org/privilege/display.</li>
	</ul>
  </p>

<h2>Implementation</h2>

<h3>Type definitions</h3>

<h3 id="app-init">Application initialization</h3>

<h3 id="app-finit">Application termination</h3>

<h3 id="ev-system">System events</h3>

<h3 id="ev-custom">Custom events</h3>

<h3 id="model">Model</h3>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>