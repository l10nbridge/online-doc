<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Scroller Index Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>Scroller Index Sample Overview</h1>

<p>The Scroller Index sample application demonstrates how to implement an animated current page indicator for the page scroller component. The sample shows how to rotate <span style="font-family: Courier New,Courier,monospace">Evas_Objects</span> using <span style="font-family: Courier New,Courier,monospace">Evas_Maps</span> and how to handle the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> smart callbacks.</p>
 <p>The following figure illustrates the application views.</p>
  <p class="figure">Figure: Scroller Index screens</p>
  <p align="center">
    <img alt="Scroller Index screen" src="../images/scroller_index_1.png" />
    <img alt="Scroller Index screen" src="../images/scroller_index_2.png" />
    <img alt="Scroller Index screen" src="../images/scroller_index_3.png" />
  </p>

<p>The application provides a user interface divided into 2 sections:</p>
<ul>
	<li>Page scroller: an <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> component at the top of the screen</li>
	<li>Index: a current page indicator at the bottom of the screen</li>
</ul>
<p>You can switch pages using the page scroller. The current page is indicated by the index under the scroller.</p>



<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
 <caption>Table: Source files</caption>
 <tbody>
 <tr>
 <th>Category</th>
 <th>File name</th>
 <th>Description</th>
</tr>
<tr>
 <td>General</td>
 <td><span style="font-family: Courier New,Courier,monospace">(app_name).c</span></td>
 <td>Provides an entry point in the application. Initializes the application main data and provides the implementation of the main callbacks.</td>
</tr>
<tr>
 <td rowspan="3">View</td>
 <td><span style="font-family: Courier New,Courier,monospace">view.c</span></td>
 <td>Creates the window, background, conformant, and main layout.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">page_scroller.c</span></td>
 <td>Provides functions to create the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> component. The file contains the code for creating the page scroller component and filling it with proper content.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">index.c</span></td>
 <td>Provides functions to create the index component. The file contains code for creating the <span style="font-family: Courier New,Courier,monospace">elm_box</span> component and the current page indices. It connects the scroller logic to the index animations.</td>
</tr>
</tbody>
</table>

<h2>Implementation</h2>

<h3>Page Scroller Implementation</h3>

<p>The page scroller is based on the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> component. It allows the user to drag the viewable region around, moving through a much larger object that is contained in the scroller. Typically, the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> component contains an <span style="font-family: Courier New,Courier,monospace">elm_box</span> as its content. The box component is larger than the scroller and holds the layouts of multiple pages. This approach allows you to implement interfaces for obtaining the page and its number as well as removing the page. It is a good practice to use an <span style="font-family: Courier New,Courier,monospace">elm_box</span> object as the content of the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span>.</p>

<p>To create the scroller:</p>

<pre class="prettyprint">
Evas_Object *page_scroller_create(Evas_Object *parent, int p_width, int p_height)
{
&nbsp;&nbsp;&nbsp;// Create the page scroller component and set its parent
&nbsp;&nbsp;&nbsp;Evas_Object *page_scroller = NULL;
&nbsp;&nbsp;&nbsp;page_scroller = elm_scroller_add(parent);

&nbsp;&nbsp;&nbsp;// Set the page size of the scroller. In this case, the page width is equal to the screen width
&nbsp;&nbsp;&nbsp;elm_scroller_page_size_set(page_scroller, p_width, p_height);

&nbsp;&nbsp;&nbsp;// Switch off limiting the scroller&#39;s minimum size to the minimum size of its content
&nbsp;&nbsp;&nbsp;elm_scroller_content_min_limit(page_scroller, EINA_FALSE, EINA_FALSE);

&nbsp;&nbsp;&nbsp;// Set the bouncing behavior. The bounce effect is shown when the scroller reaches the last page
&nbsp;&nbsp;&nbsp;// In this case, it must be switched off
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(page_scroller, EINA_FALSE, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Set the scroller visibility
&nbsp;&nbsp;&nbsp;elm_scroller_policy_set(page_scroller, ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_OFF);

&nbsp;&nbsp;&nbsp;// Disable the scroll bars
&nbsp;&nbsp;&nbsp;elm_scroller_page_scroll_limit_set(page_scroller, 1, 1);

&nbsp;&nbsp;&nbsp;// Enable scroller looping
&nbsp;&nbsp;&nbsp;elm_scroller_loop_set(page_scroller, EINA_TRUE, EINA_FALSE);

&nbsp;&nbsp;&nbsp;// Fill the scroller with the content
&nbsp;&nbsp;&nbsp;scroller_fill(page_scroller, p_width, p_height);

&nbsp;&nbsp;&nbsp;return page_scroller;
}
</pre>

<p>To fill the scroller with content using the <span style="font-family: Courier New,Courier,monospace">scroller_fill()</span> function:</p>

<pre class="prettyprint">
static void
scroller_fill(Evas_Object *page_scroller, int p_w, int p_h)
{
&nbsp;&nbsp;&nbsp;// Create the box object
&nbsp;&nbsp;&nbsp;Evas_Object *box = NULL;
&nbsp;&nbsp;&nbsp;box = scroller_box_create(page_scroller);

&nbsp;&nbsp;&nbsp;// Set the created box as a part of the elm_scroller component
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(page_scroller, &quot;default&quot;, box);

&nbsp;&nbsp;&nbsp;// Append new pages to the box
&nbsp;&nbsp;&nbsp;scroller_page_add(box, p_w, p_h, 255, 0, 0);
&nbsp;&nbsp;&nbsp;scroller_page_add(box, p_w, p_h, 0, 255, 0);
&nbsp;&nbsp;&nbsp;scroller_page_add(box, p_w, p_h, 0, 0, 255);
&nbsp;&nbsp;&nbsp;scroller_page_add(box, p_w, p_h, 0, 255, 255);
}
</pre>

<p>To create the <span style="font-family: Courier New,Courier,monospace">elm_box</span> component:</p>

<pre class="prettyprint">
static Evas_Object *scroller_box_create(Evas_Object *page_scroller)
{
&nbsp;&nbsp;&nbsp;// Create the box object and set its parent
&nbsp;&nbsp;&nbsp;Evas_Object *box = NULL;
&nbsp;&nbsp;&nbsp;box = elm_box_add(page_scroller);

&nbsp;&nbsp;&nbsp;// Set the horizontal parameter of the box component. It means that the new elements are added horizontally
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Set the center alignment of the box parameters
&nbsp;&nbsp;&nbsp;elm_box_align_set(box, 0.5, 0.5);

&nbsp;&nbsp;&nbsp;return box;
}
</pre>

<p>To create the scroller pages:</p>

<pre class="prettyprint">
static void scroller_page_add(Evas_Object *pages_container_box, int p_w, int p_h, int r, int g, int b)
{
&nbsp;&nbsp;&nbsp;Evas_Object *page = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *page_bg = NULL;
&nbsp;&nbsp;&nbsp;static int page_no = 0;

&nbsp;&nbsp;&nbsp;char edj_path[PATH_MAX] = {0,};
&nbsp;&nbsp;&nbsp;char page_name[PATH_MAX] = {0,};

&nbsp;&nbsp;&nbsp;// Create the Evas_Object rectangle. This is the background of each page
&nbsp;&nbsp;&nbsp;// It also sets the minimum size of the page (elm_layout object)
&nbsp;&nbsp;&nbsp;page_bg = evas_object_rectangle_add(evas_object_evas_get(pages_container_box));

&nbsp;&nbsp;&nbsp;// Set the color of the background
&nbsp;&nbsp;&nbsp;evas_object_color_set(page_bg, r, g, b, 255);

&nbsp;&nbsp;&nbsp;// Resize the page
&nbsp;&nbsp;&nbsp;evas_object_resize(page_bg, p_w, p_h);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(page_bg, p_w, p_h);

&nbsp;&nbsp;&nbsp;// Create the page (elm_layout component) and load the valid edje file
&nbsp;&nbsp;&nbsp;page = elm_layout_add(pages_container_box);
&nbsp;&nbsp;&nbsp;app_get_resource(EDJ_FILE, edj_path, (int)PATH_MAX);
&nbsp;&nbsp;&nbsp;if (!elm_layout_file_set(page, edj_path, GROUP_PAGE)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to set page!&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(page_bg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(page);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Set the page title
&nbsp;&nbsp;&nbsp;snprintf(page_name, sizeof(page_name), &quot;PAGE %d&quot;, page_no++);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(page, PART_TEXT_PAGE_NAME, page_name);

&nbsp;&nbsp;&nbsp;// Set the page background and append it to the box component
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(page, PART_SWALLOW_PAGE_BG, page_bg);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(pages_container_box, page);
&nbsp;&nbsp;&nbsp;evas_object_show(page);
}
</pre>

<h3>Index Implementation</h3>

<p>The index component is based on the <span style="font-family: Courier New,Courier,monospace">elm_box</span> object. The box automatically places each index on the screen. The following example shows how the implement the index:</p>

<ol><li>Add the index to the box:

<pre class="prettyprint">
Evas_Object *box = NULL;
cb_data_t *init_data = NULL;
int page_count = -1;
int i = 0;

// Obtain the number of page scroller pages
page_count = page_scroller_page_count_get(page_scroller);

// Create the elm_box component
box = box_create(page_scroller);

// Create and append the indexes to the box component
for (i = 0; i &lt; page_count; i++) 
{
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, indice_create(box));
}

// Connect the elm_scroller smart callbacks with valid functions which are used later for index animation
evas_object_smart_callback_add(page_scroller, &quot;scroll&quot;, page_area_changed_cb, init_data);
evas_object_smart_callback_add(page_scroller, &quot;scroll,drag,start&quot;, page_current_changed_start_cb, init_data);
evas_object_smart_callback_add(page_scroller, &quot;scroll,anim,stop&quot;, page_current_changed_stop_cb, init_data);

return box;
</pre></li>

<li>Create the box component:

<pre class="prettyprint">
static Evas_Object *box_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;// Create the elm_box component
&nbsp;&nbsp;&nbsp;Evas_Object *box = NULL;
&nbsp;&nbsp;&nbsp;box = elm_box_add(parent);

&nbsp;&nbsp;&nbsp;// Set the default box parameters. When the homogeneous parameter is set to EINA_TRUE, 
&nbsp;&nbsp;&nbsp;// every object in the elm_box has the same size
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_homogeneous_set(box, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_align_set(box, 0.5, 0.5);

&nbsp;&nbsp;&nbsp;return box;
}
</pre></li>

<li>Create the index:

<pre class="prettyprint">
static Evas_Object *indice_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;// Create index&#39;s elm_layout component
&nbsp;&nbsp;&nbsp;Evas_Object *indice = NULL;
&nbsp;&nbsp;&nbsp;char edje_path[PATH_MAX] = {0,};
&nbsp;&nbsp;&nbsp;indice = elm_layout_add(parent);

&nbsp;&nbsp;&nbsp;// Obtain the path to the edje file
&nbsp;&nbsp;&nbsp;app_get_resource(EDJ_FILE, edje_path, PATH_MAX);

&nbsp;&nbsp;&nbsp;// Set edje file for the layout object
&nbsp;&nbsp;&nbsp;if (!elm_layout_file_set(indice, edje_path, GROUP_INDICE)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;failed to set edje file&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(indice);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>After creating the index elements, set their initial position:

<pre class="prettyprint">
static Eina_Bool init_position_set_cb(void *data)
{
&nbsp;&nbsp;&nbsp;cb_data_t *init_data = (cb_data_t *) data;
&nbsp;&nbsp;&nbsp;Evas_Object *page_scroller = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *index = NULL;

&nbsp;&nbsp;&nbsp;int c_page = -1;
&nbsp;&nbsp;&nbsp;int i = 0;

&nbsp;&nbsp;&nbsp;// Obtain the pointer to the used objects
&nbsp;&nbsp;&nbsp;page_scroller = init_data-&gt;scroller;
&nbsp;&nbsp;&nbsp;index = init_data-&gt;box;

&nbsp;&nbsp;&nbsp;// Obtain active page in page scroller component
&nbsp;&nbsp;&nbsp;c_page = page_scroller_current_page_number_get(page_scroller);

&nbsp;&nbsp;&nbsp;// Set valid angles for the indices. The current page angle is equal to 90 degrees
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; SCROLLER_PAGES; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == c_page)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indice_rotate(index, i, CUR_ANGLE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;indice_rotate(index, i, DEF_ANGLE);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return EINA_FALSE;
}
</pre></li></ol>


<h3>Index Animations</h3>

<p>To animate the index position, <span style="font-family: Courier New,Courier,monospace">Evas_Map</span> is used. The Evas library allows different transformations to be applied to all kinds of <span style="font-family: Courier New,Courier,monospace">Evas_Objects</span>. With Evas mapping, you can map the source object&#39;s points to the target&#39;s 3D positioning. This allows for effects, such as rotating, scaling, and changing the perspective.</p>

<p>To implement index rotation:</p>

<pre class="prettyprint">
static void indice_rotate(Evas_Object *box, int n, double angle)
{
&nbsp;&nbsp;&nbsp;Evas_Object *indice = NULL;
&nbsp;&nbsp;&nbsp;Evas_Map *indice_map = NULL;
&nbsp;&nbsp;&nbsp;int x = -1;
&nbsp;&nbsp;&nbsp;int y = -1;
&nbsp;&nbsp;&nbsp;int w = -1;
&nbsp;&nbsp;&nbsp;int h = -1;

&nbsp;&nbsp;&nbsp;// Get the index from the index object
&nbsp;&nbsp;&nbsp;indice = indice_get(box, n);

&nbsp;&nbsp;&nbsp;// Get the geometry of the index. It is used later for setting the center of the animation
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(indice, &amp;x, &amp;y, &amp;w, &amp;h);

&nbsp;&nbsp;&nbsp;// Create a new Evas_Map object and set the number of transformation points
&nbsp;&nbsp;&nbsp;indice_map = evas_map_new(4);

&nbsp;&nbsp;&nbsp;// Get the transformation point map from the animated object
&nbsp;&nbsp;&nbsp;// In this case, each point corresponds to a corner of the index&#39;s Evas_Object
&nbsp;&nbsp;&nbsp;evas_map_util_points_populate_from_object(indice_map, indice);

&nbsp;&nbsp;&nbsp;// Rotate the object. The angle value is calculated in a callback function connected to &quot;scroll&quot; event
&nbsp;&nbsp;&nbsp;// cx and cy correspond to the center of the index
&nbsp;&nbsp;&nbsp;evas_map_util_rotate(indice_map, angle, x + w / 2, y + w / 2);

&nbsp;&nbsp;&nbsp;// Connect the transformation map to the object
&nbsp;&nbsp;&nbsp;evas_object_map_set(indice, indice_map);

&nbsp;&nbsp;&nbsp;// Apply the transformation effect on the index
&nbsp;&nbsp;&nbsp;evas_object_map_enable_set(indice, EINA_TRUE);
}
</pre>

<p>After this function is executed, the operation index is rotated.</p>

<p>The following callback handlers are used in the box constructor:</p>
<pre class="prettyprint">
// Invoked when a drag event starts
evas_object_smart_callback_add(page_scroller, &quot;scroll,drag,start&quot;, page_current_changed_start_cb, init_data);
// Invoked repeatedly during the drag event
evas_object_smart_callback_add(page_scroller, &quot;scroll&quot;, page_area_changed_cb, init_data);
// Invoked when the drag event stops
evas_object_smart_callback_add(page_scroller, &quot;scroll,anim,stop&quot;, page_current_changed_stop_cb, init_data);
</pre>

<ul><li>
<p>The <span style="font-family: Courier New,Courier,monospace">page_current_changed_start_cb()</span> callback is invoked when the user starts to drag the <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> component:</p>

<pre class="prettyprint">
static void page_current_changed_start_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;current_page = page_scroller_current_page_number_get(obj);
&nbsp;&nbsp;&nbsp;elm_scroller_region_get(obj, &amp;current_region, NULL, NULL, NULL);
}
</pre>

<p>The callback is only used to obtain the current page number and the current region in the horizontal position. The <span style="font-family: Courier New,Courier,monospace">current_region</span> global variable is used to calculate the progress and is depicted in the following figure.</p>
<p class="figure">Figure: Current region in the Scroller Index</p>
<p align="center">
    <img alt="Current region in the Scroller Index" src="../images/scroller_index_current_region.png"/>
</p></li>

<li><p>After the drag is started, the <span style="font-family: Courier New,Courier,monospace">page_area_changed_cb()</span> callback is invoked repeatedly. </p>
<pre class="prettyprint">
static void page_area_changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int x = 0;
&nbsp;&nbsp;&nbsp;int w = 0;
&nbsp;&nbsp;&nbsp;double angle = 0.0;
&nbsp;&nbsp;&nbsp;int next_page = -1;
&nbsp;&nbsp;&nbsp;cb_data_t *cb_data = (cb_data_t *) data;

&nbsp;&nbsp;&nbsp;// Get the actual region of the elm_scroller component
&nbsp;&nbsp;&nbsp;elm_scroller_region_get(obj, &amp;x, NULL, &amp;w, NULL);

&nbsp;&nbsp;&nbsp;// Calculate the angle. The current region is the initial position set in the drag start callback
&nbsp;&nbsp;&nbsp;// The difference between x and current_region is the progress of the scroll
&nbsp;&nbsp;&nbsp;// It is multiplied by 90.0 degrees (if progress equals 1.0, the rotation angle is equal to 90.0 degrees)
&nbsp;&nbsp;&nbsp;angle = (double) (x - current_region)/w * 90.0;

&nbsp;&nbsp;&nbsp;// Calculate the next page number. It is used to get the next index which is also animated
&nbsp;&nbsp;&nbsp;if (fabs(x - current_region) &lt;= w) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_page = x &gt; current_region ? (current_page + 1) % SCROLLER_PAGES : current_page - 1;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (x &gt; current_region) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_page = current_page - 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_page = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Because the loop property of the page scroller is enabled, 
&nbsp;&nbsp;&nbsp;// the user is able to scroll pages from first to last directly
&nbsp;&nbsp;&nbsp;// In that case, the next_page calculated before is lower than 0, but can be used to set its valid value
&nbsp;&nbsp;&nbsp;if (next_page &lt; 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;next_page = SCROLLER_MAX_IDX;

&nbsp;&nbsp;&nbsp;// Set the rotation angles of the indexes
&nbsp;&nbsp;&nbsp;// The next page rotation angle is increased by 360 degrees because the rotate 
&nbsp;&nbsp;&nbsp;// function does not work if the angle is lower than 0 and the scroller is moved from right to left
&nbsp;&nbsp;&nbsp;indice_rotate(cb_data-&gt;box, current_page, 90 + angle);
&nbsp;&nbsp;&nbsp;indice_rotate(cb_data-&gt;box, next_page, 360 + angle);
}
</pre></li></ul>



<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>