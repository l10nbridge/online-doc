<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] LayoutSample Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] LayoutSample Sample Overview</h1> 
  
<p>The [UI Sample] LayoutSample application demonstrates how you can make a common layout, such as an edit field, no content, or search bar. Since Tizen provides some common layouts, you do not need to make the layouts yourself.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screen of the LayoutSample and its wireframe structure.</p>
  <p class="figure">Figure: [UI Sample] LayoutSample screen</p> 
  <p align="center"><img alt="[UI Sample] LayoutSample screen" src="../images/ui_layout_samples_sd.png" /></p> 

  <p>The application opens with a list of layout components. Click an item on the list to see examples of its use.</p>
  
<h2>Implementation</h2>
  <h3>Edit Field</h3>

<p>In the edit field, understanding the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component is very important. Handle the state of the edit field layout in the callback functions of the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component. You need the <span style="font-family: Courier New,Courier,monospace">focused</span>, <span style="font-family: Courier New,Courier,monospace">unfocused</span>, <span style="font-family: Courier New,Courier,monospace">changed</span>, and <span style="font-family: Courier New,Courier,monospace">preedit,changed</span> smart callbacks.</p>

<p>The edit field is commonly used in preloaded applications, such as contacts and calendar. You can create the edit field with the <span style="font-family: Courier New,Courier,monospace">elm_layout</span>, <span style="font-family: Courier New,Courier,monospace">elm_entry</span>, and <span style="font-family: Courier New,Courier,monospace">elm_button</span> components. For controlling the state of the edit field layout, send signals in several callbacks for the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component. You must understand how to implement the proper timing for changing the layout state.</p>

  <p class="figure">Figure: Edit field</p> 
  <p align="center"><img alt="Edit field" src="../images/ui_layout_samples_sd_editfield.png" /></p> 


<p>The following code creates the main view for the Editfield view. It prepares the <span style="font-family: Courier New,Courier,monospace">elm_box</span> component for the edit field layouts.</p>

<pre class="prettyprint">
static Evas_Object*
create_editfield_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *main_scroller, *main_box, *editfield;

&nbsp;&nbsp;&nbsp;main_scroller = elm_scroller_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(main_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_scroller_origin_reverse_set(main_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(main_scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(main_scroller);

&nbsp;&nbsp;&nbsp;main_box = elm_box_add(main_scroller);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(main_box, EVAS_HINT_FILL, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_box, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_show(main_box);

&nbsp;&nbsp;&nbsp;editfield = create_multiline_editfield_layout(main_box);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, editfield);
&nbsp;&nbsp;&nbsp;evas_object_show(editfield);

&nbsp;&nbsp;&nbsp;editfield = create_singleline_editfield_layout(main_box);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, editfield);
&nbsp;&nbsp;&nbsp;evas_object_show(editfield);

&nbsp;&nbsp;&nbsp;editfield = create_password_editfield_layout(main_box);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, editfield);
&nbsp;&nbsp;&nbsp;evas_object_show(editfield);

&nbsp;&nbsp;&nbsp;elm_object_content_set(main_scroller, main_box);

&nbsp;&nbsp;&nbsp;return main_scroller;
}</pre>

<p>To create a multiline edit field, add the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component and change the theme to <span style="font-family: Courier New,Courier,monospace">elm/layout/editfield/multiline</span>. The layout looks like the edit field, with swallow parts for the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> and <span style="font-family: Courier New,Courier,monospace">elm_button</span> components. Afterwards, add the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component and set it to the edit field layout.</p>
<p>Additionally, you can add some callback functions to the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component. Through the callback functions, send signals to the layout to change the state of the edit field.</p> 
<pre class="prettyprint">
static Evas_Object*
create_multiline_editfield_layout(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *editfield, *entry;

&nbsp;&nbsp;&nbsp;editfield = elm_layout_add(parent);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(editfield, &quot;layout&quot;, &quot;editfield&quot;, &quot;multiline&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(editfield, EVAS_HINT_FILL, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(editfield, EVAS_HINT_EXPAND, 0.0);

&nbsp;&nbsp;&nbsp;entry = elm_entry_add(editfield);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(entry, &quot;elm.guide&quot;, &quot;Multiline Editfield&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, editfield_focused_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;unfocused&quot;, editfield_unfocused_cb, editfield);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(editfield, &quot;elm.swallow.content&quot;, entry);

&nbsp;&nbsp;&nbsp;return editfield;
}</pre>


<p>The following callback functions send signals. For example, the <span style="font-family: Courier New,Courier,monospace">editfield_focused_cb()</span> callback sends the <span style="font-family: Courier New,Courier,monospace">elm.state,focused</span> and <span style="font-family: Courier New,Courier,monospace">elm,action,show,button</span> signals, which change the color of the edit field underline and the visibility state of the button.</p>
<pre class="prettyprint">
static void
editfield_focused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *editfield = (Evas_Object *)data;
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(editfield, &quot;elm,state,focused&quot;, &quot;&quot;);

&nbsp;&nbsp;&nbsp;if (!elm_entry_is_empty(obj))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_signal_emit(editfield, &quot;elm,action,show,button&quot;, &quot;&quot;);
}

static void
editfield_unfocused_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *editfield = (Evas_Object *)data;
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(editfield, &quot;elm,state,unfocused&quot;, &quot;&quot;);
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(editfield, &quot;elm,action,hide,button&quot;, &quot;&quot;);
}</pre>


<p>The next layout is a single-line edit field. The code is almost the same with the multiline edit field, except for the <span style="font-family: Courier New,Courier,monospace">elm_entry_single_line_set()</span> and <span style="font-family: Courier New,Courier,monospace">elm_entry_scrollable_set()</span> functions. These functions are required for a single-line edit field.</p>

<p>A clear button is added to the layout to clear the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component text.</p>

<pre class="prettyprint">
static Evas_Object*
create_singleline_editfield_layout(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *editfield, *entry, *button;

&nbsp;&nbsp;&nbsp;editfield = elm_layout_add(parent);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(editfield, &quot;layout&quot;, &quot;editfield&quot;, &quot;singleline&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(editfield, EVAS_HINT_FILL, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(editfield, EVAS_HINT_EXPAND, 0.0);

&nbsp;&nbsp;&nbsp;entry = elm_entry_add(editfield);
&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_entry_scrollable_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(entry, &quot;elm.guide&quot;, &quot;Singleline Editfield&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, editfield_focused_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;unfocused&quot;, editfield_unfocused_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;changed&quot;, editfield_changed_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;preedit,changed&quot;, editfield_changed_cb, editfield);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(editfield, &quot;elm.swallow.content&quot;, entry);

&nbsp;&nbsp;&nbsp;button = elm_button_add(editfield);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;editfield_clear&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, editfield_clear_button_clicked_cb, entry);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(editfield, &quot;elm.swallow.button&quot;, button);

&nbsp;&nbsp;&nbsp;return editfield;
}</pre>


<p>To clear the entry, call the <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_set()</span> function with an empty text.</p>

<pre class="prettyprint">
static void
editfield_clear_button_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *entry = (Evas_Object *)data;

&nbsp;&nbsp;&nbsp;elm_entry_entry_set(entry, &quot;&quot;);
}</pre>

<p>The password edit field is exactly the same as the single-line edit field, except for the <span style="font-family: Courier New,Courier,monospace">elm_entry_password_set()</span> function.</p>
<p>If you call the <span style="font-family: Courier New,Courier,monospace">elm_entry_password_set()</span> function, the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component shows the text as asterisks (*). However, the edit field still has the original input and you can get it with the <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_get()</span> function.</p>
<pre class="prettyprint">
static Evas_Object*
create_password_editfield_layout(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *editfield, *entry, *button;

&nbsp;&nbsp;&nbsp;editfield = elm_layout_add(parent);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(editfield, &quot;layout&quot;, &quot;editfield&quot;, &quot;singleline&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(editfield, EVAS_HINT_FILL, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(editfield, EVAS_HINT_EXPAND, 0.0);

&nbsp;&nbsp;&nbsp;entry = elm_entry_add(editfield);
&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_entry_scrollable_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_entry_password_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(entry, &quot;elm.guide&quot;, &quot;Password Editfield&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;focused&quot;, editfield_focused_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;unfocused&quot;, editfield_unfocused_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;changed&quot;, editfield_changed_cb, editfield);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(entry, &quot;preedit,changed&quot;, editfield_changed_cb, editfield);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(editfield, &quot;elm.swallow.content&quot;, entry);

&nbsp;&nbsp;&nbsp;button = elm_button_add(editfield);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;editfield_clear&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, editfield_clear_button_clicked_cb, entry);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(editfield, &quot;elm.swallow.button&quot;, button);

&nbsp;&nbsp;&nbsp;return editfield;
}</pre>


<h3>No Content</h3>
<p>The no content layout is one of the simplest layouts. After adding the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component, change the theme to <span style="font-family: Courier New,Courier,monospace">elm/layout/nocontents/default</span>. It has a transparent image and you can put your text in the middle of the layout.</p>

<pre class="prettyprint">
// No content Layout
layout = elm_layout_add(scroller);
elm_layout_theme_set(layout, &quot;layout&quot;, &quot;nocontents&quot;, &quot;default&quot;);
evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(layout, EVAS_HINT_FILL, EVAS_HINT_FILL);
elm_object_part_text_set(layout, &quot;elm.text&quot;, &quot;No Contents&quot;);

elm_object_content_set(scroller, layout);
</pre>

  <p class="figure">Figure: No content</p> 
  <p align="center"><img alt="No content" src="../images/ui_layout_samples_sd_nocontent.png" /></p> 
 
<h3>Search Bar</h3>
<p>You can add a search bar just like a single-line edit field. Change the theme style to <span style="font-family: Courier New,Courier,monospace">elm/layout/searchfield/singleline</span>:</p>

<pre class="prettyprint">
searchfield = elm_layout_add(parent);
elm_layout_theme_set(searchfield, &quot;layout&quot;, &quot;searchfield&quot;, &quot;singleline&quot;);
evas_object_size_hint_align_set(searchfield, EVAS_HINT_FILL, 0.0);
evas_object_size_hint_weight_set(searchfield, EVAS_HINT_EXPAND, 0.0);</pre>

  <p class="figure">Figure: Search bar</p> 
  <p align="center"><img alt="Search bar" src="../images/ui_layout_samples_sd_searchbar.png" /></p> 

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>