<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Copy and Paste Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Copy and Paste Sample Overview</h1> 

  <p>The Copy and Paste sample application demonstrates how you can incorporate a copy/cut/paste mechanism into an EFL-based application. The sample operates on a predefined text block using the system clipboard to perform the operations.</p>
  <p>The following figure illustrates the application views.</p>
  <p class="figure">Figure: Copy and Paste screens</p>
  <p align="center"><img alt="Main view" src="../images/copy_and_paste_main_view_sd.png" /> <img alt="Drag operation" src="../images/copy_and_paste_drag_sd.png" /> <img alt="Text paste view" src="../images/copy_and_paste_pasted_sd.png" /></p>

  <p>The main screen consists of 2 components:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">elm_label</span> is the text source component.</li>
    <li><span style="font-family: Courier New,Courier,monospace">elm_entry</span> is the text sink component.</li>
  </ul>
  <p>The copy-paste operation is initiated by a long press on the source component, and performed through a drag and drop operation. You can:</p>
  <ul>
    <li>Long press on the source component
<p>The hover window is shown and the text is copied from the source component to the clipboard and pasted from the clipboard to the hover window.</p></li>
    <li>Drag the hover window
<p>The hover window follows the mouse pointer.</p></li>
	<li>Drop to the sink component
<p>The text is cut from the hover window to the clipboard and pasted from the clipboard to the sink component. The hover window is hidden.</p></li>
  </ul>

  <p class="figure">Figure: Component layout structure</p>
  <p align="center"><img alt="component layout structure" src="../images/copy_and_paste_widgets.png" /></p>

<h2>Implementation</h2>

<p>To implement the copy/cut/paste mechanism:</p>

<ol>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">controller_application_view_create()</span> function in the controller module is responsible for calling the view creation-specific routines. Also, it attaches all necessary touch (mouse) callbacks.</p>

<pre class="prettyprint">
bool
controller_application_view_create(void)
{
&nbsp;&nbsp;&nbsp;char full_path_source_extension[FILE_PATH_MAX_LEN] = {0,};
&nbsp;&nbsp;&nbsp;char full_path_sink_image[FILE_PATH_MAX_LEN] = {0,};

&nbsp;&nbsp;&nbsp;_resource_path_compile(SOURCE_THEME_EXTENSION, full_path_source_extension);
&nbsp;&nbsp;&nbsp;_resource_path_compile(SINK_IMAGE, full_path_sink_image);


&nbsp;&nbsp;&nbsp;if (!main_window_create())
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;View creation failed: on window handle&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!main_window_source_wgt_create(full_path_source_extension))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;View creation failed: on source component&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!main_window_sink_entry_wgt_create(full_path_sink_image))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;View creation failed: on sink component&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (!main_window_hover_create(full_path_source_extension))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;View creation failed: on hover&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_attach_callbacks();

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;View creation successful&quot;);

&nbsp;&nbsp;&nbsp;return true;
}

static void
_attach_callbacks(void)
{
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_BUTTON_DOWN, _press_cb, NULL);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_MOVE, _move_cb, NULL);
&nbsp;&nbsp;&nbsp;ecore_event_handler_add(ECORE_EVENT_MOUSE_BUTTON_UP, _unpress_cb, NULL);
}
</pre></li>
<li>
<p>Each time the user touches the screen, the <span style="font-family: Courier New,Courier,monospace">_press_cb()</span> callback is called with a hit test. If the hit is in the source region, a hover window is shown. It uses the <span style="font-family: Courier New,Courier,monospace">evas_object_show()</span> function internally.</p>

<pre class="prettyprint">
static Eina_Bool
_press_cb(void *data, int type, void *event)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Button *press = (Ecore_Event_Mouse_Button *)event;

&nbsp;&nbsp;&nbsp;// State test &amp;&amp; hit test
&nbsp;&nbsp;&nbsp;if (!(s_controller_data.state == CONTROLLER_STATE_NORMAL &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main_window_source_wgt_hit_test(press-&gt;root.x, press-&gt;root.y)))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EINA_TRUE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Paste text from clipboard to hover
&nbsp;&nbsp;&nbsp;main_window_hover_text_paste();

&nbsp;&nbsp;&nbsp;hover_window_coordinates_set(press-&gt;root.x, press-&gt;root.y);
&nbsp;&nbsp;&nbsp;hover_window_show();

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre></li>

<li>
<p>The hover window drag is implemented in the controller module <span style="font-family: Courier New,Courier,monospace">_move_cb()</span> function. It is responsible for changing the window position and uses the <span style="font-family: Courier New,Courier,monospace">evas_object_move()</span> function internally.</p>
<pre class="prettyprint">
static Eina_Bool
_move_cb(void *data, int type, void *event)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Move *move = (Ecore_Event_Mouse_Move *)event;

&nbsp;&nbsp;&nbsp;hover_window_coordinates_set(move-&gt;root.x, move-&gt;root.y);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre></li>

<li>
<p>The clipboard mechanism is used to copy the text from the source to the hover window:</p>

<pre class="prettyprint">
void
hover_window_text_paste(const char * text_to_paste)
{
&nbsp;&nbsp;&nbsp;// You can just use elm_object_text_set, but for example purpose use the cnp mechanism

&nbsp;&nbsp;&nbsp;// Use copy mechanism, fill copy buffer associated with the label
&nbsp;&nbsp;&nbsp;elm_cnp_selection_set(s_view_data.label, ELM_SEL_TYPE_PRIMARY, ELM_SEL_FORMAT_TEXT, text_to_paste, strlen(text_to_paste));

&nbsp;&nbsp;&nbsp;// Get the text from the clipboard and since
&nbsp;&nbsp;&nbsp;// you use the &#39;Label&#39; component type, you have to use a custom drop callback: _text_paste_cb
&nbsp;&nbsp;&nbsp;elm_cnp_selection_get(s_view_data.label, ELM_SEL_TYPE_PRIMARY, ELM_SEL_FORMAT_TEXT, _text_paste_cb, NULL);
}
</pre></li>
<li>
<p>When the user releases the mouse or touch, the <span style="font-family: Courier New,Courier,monospace">_unpress_cb()</span> callback is called with a hit test. It checks whether the finger or cursor is in the sink component area.</p>

<pre class="prettyprint">
static Eina_Bool
_unpress_cb(void *data, int type, void *event)
{
&nbsp;&nbsp;&nbsp;Ecore_Event_Mouse_Button *unpress = (Ecore_Event_Mouse_Button *)event;

&nbsp;&nbsp;&nbsp;hover_window_hide();

&nbsp;&nbsp;&nbsp;// State &amp;&amp; hit test
&nbsp;&nbsp;&nbsp;if (s_controller_data.state == CONTROLLER_STATE_DRAG &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main_window_sink_wgt_hit_test(unpress-&gt;root.x, unpress-&gt;root.y))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main_window_sink_wgt_text_paste();
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>After the hit test, the clipboard mechanism is used again to copy the text to the sink component:</p>

<pre class="prettyprint">
void
sink_wgt_text_paste(Evas_Object *wgt)
{
&nbsp;&nbsp;&nbsp;// Use paste mechanism:
&nbsp;&nbsp;&nbsp;// sink component is of the &#39;Entry&#39; type so callback can be NULL
&nbsp;&nbsp;&nbsp;elm_cnp_selection_get(wgt, ELM_SEL_TYPE_PRIMARY, ELM_SEL_FORMAT_TEXT, NULL, NULL);
}
</pre></li></ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>