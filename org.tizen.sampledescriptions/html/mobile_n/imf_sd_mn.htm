<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>IMF Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>IMF Sample Overview</h1> 

  <p>The IMF sample application demonstrates how you can implement the default keyboard layout change using the <a href="../../../org.tizen.native.mobile.apireference/group__Ecore__IMF__Lib__Group.html">Ecore_IMF</a> API from the EFL framework. This sample covers only a subset of the available keyboard layouts. Additionally, the text autosave feature is demonstrated.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the IMF.</p>
  <p class="figure">Figure: IMF screens</p>
  <p align="center"><img alt="Main view" src="../images/imf_main_view_sd.png" /> <img alt="Month view" src="../images/imf_month_kbd_sd.png" /> <img alt="Normal view" src="../images/imf_normal_kbd_sd.png" /></p>
  <p align="center"><img alt="Numeric view" src="../images/imf_numeric_kbd_sd.png" /> <img alt="Phone number view" src="../images/imf_phonenumber_kbd_sd.png" /></p>

  <p>The application interface consists of a toolbar with action buttons and an <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component for text input.</p>
  <p>The user can click:</p>
  <ul>
    <li><strong>Prev kbd</strong> to change the keyboard layout to the previous layout.</li>
    <li><strong>Next kbd</strong> to change the keyboard layout to the next layout.</li>
	<li><strong>Autosave</strong> to trigger the autosave feature. If enabled, the text provided in the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component is automatically saved to an external text file.</li>
	<li><strong>Bind file</strong> to upload the related autosave text file content (if not empty) to the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component.</li>
  </ul>
  <p>The keyboard with the appropriate layout is displayed as the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component gets the input focus. The following keyboard layouts are demonstrated:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_INPUT_PANEL_LAYOUT_NORMAL</span>: common layout for text and number input with a switchable set of characters</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_INPUT_PANEL_LAYOUT_NUMBERONLY</span>: layout consisting of digits only</li>
	<li><span style="font-family: Courier New,Courier,monospace">ELM_INPUT_PANEL_LAYOUT_PHONENUMBER</span>: common layout for phone number input and text messaging</li>
	<li><span style="font-family: Courier New,Courier,monospace">ELM_INPUT_PANEL_LAYOUT_MONTH</span>: layout consisting of month numbers</li>
  </ul>

  <p class="figure">Figure: UI component layout structure</p>
  <p align="center"><img alt="UI component layout structure" src="../images/imf_widgets.png" /></p>

<h2>Implementation</h2>

<p>To implement the IMF application:</p>

<ul><li>
<p>The <span style="font-family: Courier New,Courier,monospace">controller_application_view_create()</span> function in the controller module is responsible for calling the view creation-specific routines, callback attachment, and the &quot;bind file&quot; creation. If file does not exist, the <span style="font-family: Courier New,Courier,monospace">_bind_file_create()</span> function creates it and fills it with a default <span style="font-family: Courier New,Courier,monospace">&quot;Hello world !&quot;</span> string. Otherwise, it does nothing and the previous content is preserved. You can load the content to the entry component by clicking <strong>Bind file</strong>.</p>

<pre class="prettyprint">
bool
controller_application_view_create(void)
{
&nbsp;&nbsp;&nbsp;_bind_file_create();

&nbsp;&nbsp;&nbsp;if (!main_view_create())
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;View creation failed: on window handle&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;main_view_destroy();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_attach_callbacks();

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG,&quot;View creation successful&quot;);

&nbsp;&nbsp;&nbsp;return true;
}

static void
_bind_file_create(void)
{
&nbsp;&nbsp;&nbsp;FILE *fp = NULL;
&nbsp;&nbsp;&nbsp;char bind_file_full_path[FILE_PATH_MAX_LEN] = {0,};

&nbsp;&nbsp;&nbsp;data_path_compile(BIND_FILE, bind_file_full_path);

&nbsp;&nbsp;&nbsp;// Check whether the file does not exist
&nbsp;&nbsp;&nbsp;if (access(bind_file_full_path, F_OK))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fp = fopen(bind_file_full_path, &quot;w+&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;File %s does not exist - creating&quot;, bind_file_full_path);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!fp)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;Could not create file&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fwrite(bind_file_content, sizeof(char), sizeof(bind_file_content), fp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(fp);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>
<p>Another important module of in this sample is the top panel. It consists of 5 elementary UI components:</p>

<ul>
 <li>3 <span style="font-family: Courier New,Courier,monospace">elm_button</span> components to switch between the keyboard layouts and to bind the file to the entry component.</li>
 <li><span style="font-family: Courier New,Courier,monospace">elm_check</span> component to trigger the autosave mode.</li>
 <li><span style="font-family: Courier New,Courier,monospace">elm_layout</span> component, which contains all the above. The layout component uses the <span style="font-family: Courier New,Courier,monospace">main_window.edc</span> layout file to display the UI components in specified positions and with a defined appearance. Note that there are 2 groups in the mentioned file. The top panel uses the <span style="font-family: Courier New,Courier,monospace">TOP_PANEL_GROUP</span> group.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">top_panel_create()</span> function creates 3 buttons and 1 checkbox and puts them in the layout container:</p>

<pre class="prettyprint">
Evas_Object*
top_panel_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;char layout_file_full_path[FILE_PATH_MAX_LEN] = {0,};

&nbsp;&nbsp;&nbsp;if (s_view_data.top_panel_container)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;resource_path_compile(WIN_LAYOUT_CONTAINER_EDJ, layout_file_full_path);

&nbsp;&nbsp;&nbsp;// Create the container
&nbsp;&nbsp;&nbsp;s_view_data.top_panel_container = elm_layout_add(parent);

&nbsp;&nbsp;&nbsp;if (!s_view_data.top_panel_container)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: top panel container&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!elm_layout_file_set(s_view_data.top_panel_container, layout_file_full_path, TOP_PANEL_GROUP))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Could not set layout file on top panel container&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Create buttons inside the container
&nbsp;&nbsp;&nbsp;_button_create(&amp;s_view_data.btn_layout_prev, s_view_data.top_panel_container, PREV_LAYOUT_BUTTON_PART);
&nbsp;&nbsp;&nbsp;if (!s_view_data.btn_layout_prev)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: previous layout button&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_button_create(&amp;s_view_data.btn_layout_next, s_view_data.top_panel_container, NEXT_LAYOUT_BUTTON_PART);
&nbsp;&nbsp;&nbsp;if (!s_view_data.btn_layout_next)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: next layout button&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_checkbox_create(&amp;s_view_data.check_autosave_toggle, s_view_data.top_panel_container, AUTOSAVE_ON_OFF_BUTTON_PART);
&nbsp;&nbsp;&nbsp;if (!s_view_data.check_autosave_toggle)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: save file button&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;_button_create(&amp;s_view_data.btn_bind_file, s_view_data.top_panel_container, BIND_FILE_BUTTON_PART);
&nbsp;&nbsp;&nbsp;if (!s_view_data.btn_bind_file)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: load file button&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(s_view_data.top_panel_container);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return s_view_data.top_panel_container;
}
</pre></li>

<li>
<p>The main view module contains the <span style="font-family: Courier New,Courier,monospace">main_view_create()</span> function. It is responsible for the main window, entry component, and top panel creation. Also, it attaches UI-related callbacks to the top panel (button clicks and checkbox check events).</p>

<pre class="prettyprint">
bool
main_view_create(void)
{
&nbsp;&nbsp;&nbsp;int screen_width = 0, screen_height = 0;
&nbsp;&nbsp;&nbsp;s_view_data.win = elm_win_util_standard_add(PACKAGE, PACKAGE);

&nbsp;&nbsp;&nbsp;if (!s_view_data.win)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failure allocating resource: main window&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_win_conformant_set(s_view_data.win, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(s_view_data.win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_screen_size_get(s_view_data.win, NULL, NULL, &amp;screen_width, &amp;screen_height);
&nbsp;&nbsp;&nbsp;evas_object_resize(s_view_data.win, screen_width, screen_height);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(s_view_data.win, &quot;delete,request&quot;, main_window_delete_cb, NULL);

&nbsp;&nbsp;&nbsp;if (!_entry_container_create() || !_entry_create() ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!(s_view_data.win_layout_top_panel = top_panel_create(s_view_data.win)))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Position top panel, and show it
&nbsp;&nbsp;&nbsp;evas_object_resize(s_view_data.win_layout_top_panel, screen_width, screen_height);
&nbsp;&nbsp;&nbsp;evas_object_move(s_view_data.win_layout_top_panel, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_show(s_view_data.win_layout_top_panel);

&nbsp;&nbsp;&nbsp;_callbacks_attach();

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(s_view_data.win);

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li>
<p>The main view module also defines the IMF keypad layouts which are used by this application. Each time the user clicks  <strong>Prev kbd</strong> or <strong>Next kbd</strong>, the <span style="font-family: Courier New,Courier,monospace">_keypad_layout_change_cb()</span> callback is called to set one of the defined keypad layouts:</p>

<pre class="prettyprint">
static Elm_Input_Panel_Layout 
available_layouts[] = 
{
&nbsp;&nbsp;&nbsp;ELM_INPUT_PANEL_LAYOUT_NORMAL,
&nbsp;&nbsp;&nbsp;ELM_INPUT_PANEL_LAYOUT_NUMBERONLY,
&nbsp;&nbsp;&nbsp;ELM_INPUT_PANEL_LAYOUT_PHONENUMBER,
&nbsp;&nbsp;&nbsp;ELM_INPUT_PANEL_LAYOUT_MONTH
};

static void
_keypad_layout_change_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;data == LAYOUT_PREV ? --s_view_data.kbd_current_layout : ++s_view_data.kbd_current_layout;

&nbsp;&nbsp;&nbsp;if (s_view_data.kbd_current_layout &lt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_view_data.kbd_current_layout = sizeof(available_layouts)/sizeof(Elm_Input_Panel_Layout) - 1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (s_view_data.kbd_current_layout &gt;= sizeof(available_layouts)/sizeof(Elm_Input_Panel_Layout))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_view_data.kbd_current_layout = 0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_entry_input_panel_hide(s_view_data.entry);
&nbsp;&nbsp;&nbsp;elm_entry_input_panel_layout_set(s_view_data.entry, available_layouts[s_view_data.kbd_current_layout]);
&nbsp;&nbsp;&nbsp;elm_entry_input_panel_show(s_view_data.entry);
&nbsp;&nbsp;&nbsp;elm_object_focus_allow_set(s_view_data.entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_focus_set(s_view_data.entry, EINA_TRUE);
}
</pre></li>

<li>
<p>The main view module implements public functions to be used by the controller to bind the file and activate and deactivate the autosave feature:</p>

<pre class="prettyprint">
void
main_view_bind_file_to_entry(const char *file_str)
{
&nbsp;&nbsp;&nbsp;if (!elm_entry_file_set(s_view_data.entry, file_str, ELM_TEXT_FORMAT_PLAIN_UTF8))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG,&quot;Failed to bind file %s . Bad file name ?&quot;, file_str);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;elm_entry_autosave_set(s_view_data.entry, EINA_TRUE);
}
</pre>

<p>The autosave feature works only when the file is bound to the entry component:</p>
<pre class="prettyprint">
void
main_view_entry_autosave_set(Eina_Bool on)
{
&nbsp;&nbsp;&nbsp;elm_entry_autosave_set(s_view_data.entry, on);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;AUTOSAVE: %d&quot;, elm_entry_autosave_get(s_view_data.entry));
}
</pre></li></ul>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>