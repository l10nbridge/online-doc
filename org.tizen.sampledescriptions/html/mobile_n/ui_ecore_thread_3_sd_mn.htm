<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Ecore Thread 3 Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>[UI Sample] Ecore Thread 3 Sample Overview</h1> 
<p>The Ecore Thread 3 sample demonstrates how you can design threads to work together with the Ecore main loop by considering asynchronization and mutual exclusion.</p>
<p>The sample uses the <span style="font-family: Courier New,Courier,monospace;">pthread</span> functions, such as <span style="font-family: Courier New,Courier,monospace;">pthread_create()</span> for creating a thread and <span style="font-family: Courier New,Courier,monospace;">pthread_exit()</span> for exiting the thread. It also uses the <span style="font-family: Courier New,Courier,monospace;">ecore_main_loop_thread_safe_call_async()</span> function for applying thread-safe. The thread moves a button (Evas object) by using the <span style="font-family: Courier New,Courier,monospace;">evas_object_move()</span> function.</p>
<p>The <span style="font-family: Courier New,Courier,monospace;">ecore_main_loop_thread_safe_call_async()</span> function call is returned immediately, like &quot;Fire and Forgot&quot;. The <span style="font-family: Courier New,Courier,monospace;">ecore_main_loop_thread_safe_call_async()</span> function has no thread blocking, since its callback is queued and performed asynchronously, whereas <span style="font-family: Courier New,Courier,monospace;">ecore_main_loop_thread_safe_call_sync()</span> does have blocking.</p>
<p>The following figure illustrates the main screen of the Ecore Thread 3 sample app.</p>

<p class="figure">Figure: Ecore Thread 3 screen</p> 
<p align="center"><img alt="Ecore Thread 3 screen" src="../images/ecore_thread_3.png" /></p> 


<h2 id="Implementation" name="Implementation">Implementation</h2>

<p>The <span style="font-family: Courier New,Courier,monospace;">create_base_gui()</span> function creates the window which consists of a button (Evas object). It also creates a thread by using the <span style="font-family: Courier New,Courier,monospace;">pthread_create()</span> function. </p>
<p>A parameter of the <span style="font-family: Courier New,Courier,monospace;">pthread_create()</span> function is the <span style="font-family: Courier New,Courier,monospace;">thread_run()</span> callback. In the <span style="font-family: Courier New,Courier,monospace;">thread_run()</span> callback, the <span style="font-family: Courier New,Courier,monospace;">ecore_main_loop_thread_safe_call_async()</span> function is used with the <span style="font-family: Courier New,Courier,monospace;">thread_safe_call_async_cb()</span> callback. The <span style="font-family: Courier New,Courier,monospace;">thread_safe_call_async_cb()</span> callback is in the critical section, to make threads safe for the main loop. 
</p>

<pre class="prettyprint">
#include &lt;pthread.h&gt;

static pthread_t thread_id;
static pthread_mutex_t lock;
static Eina_Bool thread_finish = EINA_FALSE;

typedef struct user_data 
{
&nbsp;&nbsp;&nbsp;Evas_Object *btn;
&nbsp;&nbsp;&nbsp;Evas_Coord x, y;
} user_data;

static void
thread_safe_call_async_cb(void *data)
{
&nbsp;&nbsp;&nbsp;// This function is in critical section

&nbsp;&nbsp;&nbsp;user_data *ud = data;
&nbsp;&nbsp;&nbsp;evas_object_move(ud-&gt;btn, ud-&gt;x, ud-&gt;y);
}

static void *
thread_run(void *arg)
{
&nbsp;&nbsp;&nbsp;Evas_Object *btn = arg;
&nbsp;&nbsp;&nbsp;double t = 0.0;
&nbsp;&nbsp;&nbsp;Evas_Coord x, y;

&nbsp;&nbsp;&nbsp;while (1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 150 + (150 * sin(t));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 200 + (150 * cos(t));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user_data data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.btn = btn;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.x = x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.y = y;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Now no need to wait for synchronizing main loop here
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_main_loop_thread_safe_call_async(thread_safe_call_async_cb, &amp;data);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usleep(1000);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t += 0.001;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Mutual exclusive for shared data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;lock);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (thread_finish)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread_finish = EINA_FALSE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;lock); // Unlock before break
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;lock);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;pthread_exit(NULL);

&nbsp;&nbsp;&nbsp;return NULL;
}

static void
win_del_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;void *thread_result;

&nbsp;&nbsp;&nbsp;// Mutual exclusive for shared data
&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;lock);
&nbsp;&nbsp;&nbsp;thread_finish = EINA_TRUE;
&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;lock);

&nbsp;&nbsp;&nbsp;pthread_join(thread_id, &amp;thread_result);
&nbsp;&nbsp;&nbsp;elm_exit();
}

static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// ecore_main_loop_thread_safe_call_async()
&nbsp;&nbsp;&nbsp;Evas_Object *btn;
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_del_cb, NULL);

&nbsp;&nbsp;&nbsp;// Create a button
&nbsp;&nbsp;&nbsp;btn = elm_button_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Thread&lt;br&gt;Safe&lt;br&gt;Async&quot;);
&nbsp;&nbsp;&nbsp;evas_object_resize(btn, 150, 200);
&nbsp;&nbsp;&nbsp;evas_object_show(btn);

&nbsp;&nbsp;&nbsp;// Create a thread
&nbsp;&nbsp;&nbsp;if (!pthread_create(&amp;thread_id, NULL, thread_run, btn))
&nbsp;&nbsp;&nbsp;perror(&quot;pthread_create!\n&quot;);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>