<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>System Info Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>System Info Sample Overview</h1>
<p>The System Info sample application demonstrates how you can get information about the system.</p>

<p>The following figure illustrates the main screen of the application.</p>

  <p class="figure">Figure: System Info screens</p>
  <p align="center">
    <img alt="System info screens" src="../images/system_info_1.png" /> <img alt="System info screens" src="../images/system_info_2.png" /> <img alt="System Info screens" src="../images/system_info_3.png" />
  </p>
  
<p>The application opens with the main screen of system information categories. To check the information, touch the list item.</p>

<h2>Implementation</h2>
<p>To implement the application:</p>
<ol>
<li>To use the device-specific information-related features of the System Information API, include the <span style="font-family: Courier New,Courier,monospace">&lt;system_info.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;system_info.h&gt;
</pre>
</li>

<li>Initialize the application using a common Tizen application structure:
<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {0,};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, ui_app_low_memory, &amp;d);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, ui_app_region_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_remove_event_handler(handlers[APP_EVENT_LOW_MEMORY]);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;ui_app_main() is failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The initialization is done with the <span style="font-family: Courier New,Courier,monospace">_create_base_gui()</span> function:</p>
<pre class="prettyprint">
static void 
_create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *list = NULL;

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;navi = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;navi, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;navi);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;navi);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;navi, EEXT_CALLBACK_BACK, layout_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Base layout
&nbsp;&nbsp;&nbsp;list = _create_main_list(ad);

&nbsp;&nbsp;&nbsp;// Push the main layout to the naviframe
&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(ad-&gt;navi, &quot;System Info&quot;, NULL, NULL, list, NULL);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>
</li>

<li>Create the main list menu.
<p>Each main menu list item has a callback function for getting the system information. If an item is clicked, the information about the category is illustrated in a genlist.</p>
<pre class="prettyprint">
Evas_Object 
*_create_main_list(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *list = NULL;

&nbsp;&nbsp;&nbsp;list = elm_list_add(ad-&gt;navi);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(list, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(list, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Camera&quot;, NULL, NULL, camera_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Keyboard&quot;, NULL, NULL, input_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Location&quot;, NULL, NULL, location_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Network&quot;, NULL, NULL, network_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;OpenGL&quot;, NULL, NULL, opengl_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Platform&quot;, NULL, NULL, platform_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Screen&quot;, NULL, NULL, screen_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Sensors&quot;, NULL, NULL, sensors_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Speech&quot;, NULL, NULL, speech_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Usb&quot;, NULL, NULL, usb_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Vision&quot;, NULL, NULL, vision_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;System&quot;, NULL, NULL, system_list_cb, ad);
&nbsp;&nbsp;&nbsp;elm_list_item_append(list, &quot;Others&quot;, NULL, NULL, others_list_cb, ad);

&nbsp;&nbsp;&nbsp;evas_object_show(list);

&nbsp;&nbsp;&nbsp;return list;
}
</pre>
</li>

<li>Create the function to call when the list item is clicked.
<p>The following code example is the callback function of the camera, which is a default double label list. The codes of others are similar.</p>
<pre class="prettyprint">
void 
camera_list_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;
&nbsp;&nbsp;&nbsp;Evas_Object *clist = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *navi = ad-&gt;navi;
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *itc = elm_genlist_item_class_new();

&nbsp;&nbsp;&nbsp;clist = elm_genlist_add(navi);

&nbsp;&nbsp;&nbsp;itc-&gt;item_style = &quot;double_label&quot;;
&nbsp;&nbsp;&nbsp;itc-&gt;func.content_get = NULL;
&nbsp;&nbsp;&nbsp;itc-&gt;func.text_get = _gl_text_get_cb;
&nbsp;&nbsp;&nbsp;itc-&gt;func.del = gc_gl_del_cb;

&nbsp;&nbsp;&nbsp;elm_genlist_block_count_set(clist, 14);
&nbsp;&nbsp;&nbsp;elm_genlist_mode_set(clist, ELM_LIST_COMPRESS);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(clist, &quot;selected&quot;, gc_gl_selected_cb, NULL);

&nbsp;&nbsp;&nbsp;for (i=0; i&lt;5; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item_data_s *id = malloc(sizeof(item_data_s));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;index = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item = elm_genlist_item_append(clist, itc, id, NULL, ELM_GENLIST_ITEM_NONE, NULL, id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;item = item;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(itc);

&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(navi, &quot;Camera&quot;, NULL, NULL, clist, NULL);
}
</pre>
<p>The following snippet shows the camera definitions. For more information, see the <a href="../../../org.tizen.guides/html/native/system/sysinfo_n.htm">System Information</a> guide.</p>
<pre class="prettyprint">
static struct 
camera_info 
{
&nbsp;&nbsp;&nbsp;char *description;
&nbsp;&nbsp;&nbsp;char *feature_key;
} s_camera_info[] = 
{
&nbsp;&nbsp;&nbsp;{&quot;Camera&quot;, &quot;http://tizen.org/feature/camera&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Back Camera&quot;, &quot;http://tizen.org/feature/camera.back&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Back Camera Flash&quot;, &quot;http://tizen.org/feature/camera.back.flash&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Front Camera&quot;, &quot;http://tizen.org/feature/camera.front&quot;},
&nbsp;&nbsp;&nbsp;{&quot;Front Camera Flash&quot;, &quot;http://tizen.org/feature/camera.front.flash&quot;}
};
</pre>

<p>This genlist makes the list with a style, <span style="font-family: Courier New,Courier,monospace">double_label</span>, to distinguish a title and a content. The items of the list are illustrated by the <span style="font-family: Courier New,Courier,monospace">_gl_text_get_cb()</span> function, which uses the header file, <span style="font-family: Courier New,Courier,monospace">system_info.h</span>. To get information about the system, you can get the boolean data with the <span style="font-family: Courier New,Courier,monospace">system_info_get_platform_bool()</span> function of the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__SYSTEM__INFO__MODULE.html">System Information</a> API.</p>
<pre class="prettyprint">
static char 
*_gl_text_get_cb(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;item_data_s *id = (item_data_s *)data;
&nbsp;&nbsp;&nbsp;char buf[MAX_STR] = {0,};
&nbsp;&nbsp;&nbsp;int ret = -1;
&nbsp;&nbsp;&nbsp;bool value = 0;

&nbsp;&nbsp;&nbsp;if (!strcmp(part, &quot;elm.text&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(s_camera_info[id-&gt;index].description);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (!strcmp(part, &quot;elm.text.sub&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = system_info_get_platform_bool(s_camera_info[id-&gt;index].feature_key, &amp;value);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != SYSTEM_INFO_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, MAX_STR, &quot;%s&quot;, value ? &quot;Supported&quot; : &quot;Not Supported&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buf);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>
</li>
</ol>
  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>