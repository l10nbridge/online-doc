<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>GPS Service Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>GPS Service Sample Overview</h1> 
 
  <p>The GPS Service sample demonstrates how to implement a Tizen service that provides geolocation data. The geolocation data is obtained using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__FRAMEWORK.html">Location</a> API and broadcasted to the consumer using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__MESSAGE__PORT__MODULE.html">Message Port</a> API.</p>
  <p>Using the GPS module, the following information is obtained and broadcasted:</p>
  <ul>
    <li>Longitude</li>
	<li>Latitude</li>
	<li>Satellite information (the number of satellites in view)</li>
  </ul>

  <p>There are 2 types of messages broadcasted through the message port:</p>
  <ul>
    <li>Position update contains the current longitude and latitude. This message is sent at 1-second intervals.</li>
	<li>Satellite update contains the number of satellites currently in view. This message is sent at 5-second intervals.</li>
  </ul>

  <p>No user interface is provided, as this is a service-like application that runs in the background.</p>

  <p>The current implementation requires precise knowledge about the message receiver application (its package name).</p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/location</span> privilege must be set and the following features must be enabled:
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/location</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/location.gps</span></li>
 </ul>
</p>

<h2>Implementation</h2>
<h3>Location Manager Module</h3>
<p>The application uses the location manager to retrieve the GPS and satellite data.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">location_manager_create()</span> function is used to initialize the location manager handle, which is later used to acquire geolocation data. The first parameter defines the method used to retrieve this information (the application uses the Global Positioning System (GPS) method). The second parameter is the newly created location manager handle, used by every other location manager function.</p>

<pre class="prettyprint">
// Create the location manager handle
if (location_manager_create(LOCATIONS_METHOD_GPS, &amp;s_geolocation_data.manager) != LOCATIONS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create location manager&quot;);
	
&nbsp;&nbsp;&nbsp;return false;
}
</pre>

<p>User-defined callback functions are registered to be invoked at defined intervals with the updated position information. The callbacks are defined for a position update with the <span style="font-family: Courier New,Courier,monospace">POSITION_UPDATE_INTERVAL</span> interval (1 second) and a satellite data update with the <span style="font-family: Courier New,Courier,monospace">SATELLITE_UPDATE_INTERVAL</span> interval (5 seconds).</p>
<pre class="prettyprint">
// Register callbacks for position and satellites data update
location_error_e pos_cb = location_manager_set_position_updated_cb(s_geolocation_data.manager, _geolocation_manager_position_updated_cb, POSITION_UPDATE_INTERVAL, NULL);
location_error_e sat_cb = gps_status_set_satellite_updated_cb(s_geolocation_data.manager, _geolocation_manager_satellite_updated_cb, SATELLITE_UPDATE_INTERVAL, NULL);

if (pos_cb != LOCATIONS_ERROR_NONE || sat_cb != LOCATIONS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to register callbacks for location manager&quot;);
&nbsp;&nbsp;&nbsp;geolocation_manager_service_destroy();

&nbsp;&nbsp;&nbsp;return false;
}
</pre>

<p>To manage the location service:</p>
<ol><li><p>To start the location service, the <span style="font-family: Courier New,Courier,monospace">location_manager_start()</span> function is invoked:</p>
<pre class="prettyprint">
location_manager_start(s_geolocation_data.manager);
</pre></li>
<li><p>To pause (stop) the location service, the <span style="font-family: Courier New,Courier,monospace">location_manager_stop()</span> function is invoked:</p>
<pre class="prettyprint">
location_manager_stop(s_geolocation_data.manager);
</pre></li>
<li><p>When the location service is no longer needed, it is destroyed. The callbacks for position and satellite data updates must be unset and the location manager must be stopped. After that, the <span style="font-family: Courier New,Courier,monospace">location_manager_destroy()</span> function must be used to release the location manager.</p>
<pre class="prettyprint">
location_manager_unset_position_updated_cb(s_geolocation_data.manager);
gps_status_unset_satellite_updated_cb(s_geolocation_data.manager);
location_manager_stop(s_geolocation_data.manager);
location_manager_destroy(s_geolocation_data.manager);
</pre></li></ol>


<p>Once location service is up and running, the application acquires initial position and satellite data.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">location_manager_get_last_position()</span> function is used to retrieve the location data. The data provided by the function is the last recorded coordinates. In addition to the position data (longitude, latitude, and altitude), the function also provides a timestamp that can be used to determine whether the acquired data is still valid.</p>
<pre class="prettyprint">
// Get last location information
if (location_manager_get_last_position(s_geolocation_data.manager, &amp;altitude, &amp;init_coords-&gt;latitude, &amp;init_coords-&gt;longitude, &amp;timestamp) != LOCATIONS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get last location&quot;);
	
&nbsp;&nbsp;&nbsp;return false;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">gps_status_get_satellite()</span> function is used to acquire the satellite data. The second and third parameters are the number of active satellites and the number of satellites in view, respectively. This function also provides a timestamp for determining the data validity.</p>
<p>Note that the satellite data is not supported on the Tizen Emulator. On the Emulator, this function always returns the <span style="font-family: Courier New,Courier,monospace">LOCATIONS_ERROR_NOT_SUPPORTED</span> error code. To ensure that the GPS service application works on the Emulator in case of the <span style="font-family: Courier New,Courier,monospace">gps_status_get_satellite()</span> failure, the satellite count is set to a fixed value (0).</p>
<pre class="prettyprint">
// Get initial count of satellites
location_error_e ret = gps_status_get_satellite(s_geolocation_data.manager, &amp;num_of_active, satellites_count, &amp;timestamp);
if (ret != LOCATIONS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get satellite data [%d]&quot;, ret);
&nbsp;&nbsp;&nbsp;// Satellite data is not supported on Tizen Emulator - satellite count remains at 0
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_position_updated_cb()</span> callback function is registered to be invoked at defined intervals with the updated position information. As parameters, this function gets the new latitude, longitude, and altitude, as well as a timestamp of the measurement and user-defined data.</p>
<p>To ensure a proper information flow, the position update message is sent only if the initial data has already been sent. To prevent the application from sending useless information, it sends the position update only if the measurement took place less than <span style="font-family: Courier New,Courier,monospace">MAX_TIME_DIFF</span> (15) seconds ago. If these conditions are met, the application invokes the <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_position_coords_send()</span> function to send new coordinates to the GPS consumer application.</p>
<pre class="prettyprint">
static void
_geolocation_manager_position_updated_cb(double latitude, double longitude, double altitude, time_t timestamp, void *data)
{
&nbsp;&nbsp;&nbsp;location_coords_s coords;

&nbsp;&nbsp;&nbsp;coords.latitude = latitude;
&nbsp;&nbsp;&nbsp;coords.longitude = longitude;

&nbsp;&nbsp;&nbsp;time_t curr_timestamp;

&nbsp;&nbsp;&nbsp;// Get current time to compare to the last position timestamp
&nbsp;&nbsp;&nbsp;time(&amp;curr_timestamp);


&nbsp;&nbsp;&nbsp;// Send updated position only if init data has been sent and position update
&nbsp;&nbsp;&nbsp;// was registered less than MAX_TIME_DIFF seconds ago
&nbsp;&nbsp;&nbsp;if (s_geolocation_data.init_data_sent &amp;&amp; curr_timestamp - timestamp &lt; MAX_TIME_DIFF)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Send position update through message port
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (_geolocation_manager_position_coords_send(coords))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Position updated to %f, %f&quot;, latitude, longitude);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to send position update&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_satellite_updated_cb()</span> callback function is registered to be invoked at defined intervals with the updated satellite information (number of active and in view satellites). Also, the timestamp of the measurement is provided. A proper information flow is ensured in the same way as in the position update callback described above.</p>
<p>If the initial data has been sent, new satellites in view count is sent to the GPS consumer application using the <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_satellites_count_send()</span> function.</p>
<pre class="prettyprint">
static void
_geolocation_manager_satellite_updated_cb(int num_of_active, int num_of_inview, time_t timestamp, void *data)
{
&nbsp;&nbsp;&nbsp;// Send update satellite count only if init data has been sent
&nbsp;&nbsp;&nbsp;if (s_geolocation_data.init_data_sent)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Send satellite count update through message port
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (_geolocation_manager_satellites_count_send(num_of_inview))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Satellite count updated: inview %d&quot;, num_of_inview);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to send satellite count update&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3>Message Port Module</h3>
<p>The message port module is used for communication between the GPS service and consumer applications. The GPS consumer application registers a local port that can be used by other applications to send data to, provided that they have its package and port name. For that reason, the port name and GPS consumer application name are fixed.</p>
<p>The GPS service application can check the state of the message port that the GPS consumer application has registered using the <span style="font-family: Courier New,Courier,monospace">message_port_check_remote_port()</span> function. This function takes the remote app ID and remote port name as parameters.</p>
<pre class="prettyprint">
// Check remote port state from GPS consumer
if (message_port_check_remote_port(REMOTE_APP_ID, REMOTE_PORT, &amp;exists) != MESSAGE_PORT_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to check remote port&quot;);
&nbsp;&nbsp;&nbsp;geolocation_manager_service_destroy();
	
&nbsp;&nbsp;&nbsp;return false;
}

if (!exists)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Remote port is not registered&quot;);
}
</pre>

<p>The initial data is sent using the <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_init_data_send()</span> function. If it fails (because the remote port is not registered or some internal error occurs), the service continues to try to send the data at <span style="font-family: Courier New,Courier,monospace">SEND_DATA_INTERVAL</span> (5-second) intervals.</p>
<pre class="prettyprint">
// Send initial data to GPS consumer port
if (!_geolocation_manager_init_data_send())
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to send init data - create timer to periodically try to send data&quot;);
&nbsp;&nbsp;&nbsp;ecore_timer_add(SEND_DATA_INTERVAL, _geolocation_manager_init_data_send_cb, NULL);
}
</pre>

<p>The position update message is created in the <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_position_coords_send()</span> function. It uses the <a href="../../../org.tizen.native.mobile.apireference/group__CORE__LIB__BUNDLE__MODULE.html">Bundle</a> API to form a message, which consists of 3 elements: message type, and the latitude and longitude value. After the message is formed, the <span style="font-family: Courier New,Courier,monospace">_send_message()</span> function is invoked to send it.</p>
<pre class="prettyprint">
static bool
_geolocation_manager_position_coords_send(location_coords_s coords)
{
&nbsp;&nbsp;&nbsp;bundle *b = bundle_create();
&nbsp;&nbsp;&nbsp;char latitude_str[CHAR_BUFF_SIZE], longitude_str[CHAR_BUFF_SIZE];

&nbsp;&nbsp;&nbsp;if (!b) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create bundle, the coords will not be sent&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;snprintf(latitude_str, CHAR_BUFF_SIZE, &quot;%f&quot;, coords.latitude);
&nbsp;&nbsp;&nbsp;snprintf(longitude_str, CHAR_BUFF_SIZE, &quot;%f&quot;, coords.longitude);

&nbsp;&nbsp;&nbsp;bundle_add_str(b, &quot;msg_type&quot;, MESSAGE_TYPE_POSITION_UPDATE);
&nbsp;&nbsp;&nbsp;bundle_add_str(b, &quot;latitude&quot;, latitude_str);
&nbsp;&nbsp;&nbsp;bundle_add_str(b, &quot;longitude&quot;, longitude_str);

&nbsp;&nbsp;&nbsp;bool ret = _send_message(b);

&nbsp;&nbsp;&nbsp;bundle_free(b);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The satellite update message is created in the <span style="font-family: Courier New,Courier,monospace">_geolocation_manager_satellites_count_send()</span> function, using the Bundle API. It consists of 2 strings: message type and satellite count. The created bundle is sent to the GPS consumer using the <span style="font-family: Courier New,Courier,monospace">_send_message()</span> function.</p>
<pre class="prettyprint">
static bool
_geolocation_manager_satellites_count_send(int s_count)
{
&nbsp;&nbsp;&nbsp;bundle *b = bundle_create();
&nbsp;&nbsp;&nbsp;char count_str[CHAR_BUFF_SIZE];

&nbsp;&nbsp;&nbsp;if (!b) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create bundle, the satellites will not be sent&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;snprintf(count_str, CHAR_BUFF_SIZE, &quot;%d&quot;, s_count);

&nbsp;&nbsp;&nbsp;bundle_add_str(b, &quot;msg_type&quot;, MESSAGE_TYPE_SATELLITES_UPDATE);
&nbsp;&nbsp;&nbsp;bundle_add_str(b, &quot;satellites_count&quot;, count_str);

&nbsp;&nbsp;&nbsp;bool ret = _send_message(b);

&nbsp;&nbsp;&nbsp;bundle_free(b);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">_send_message()</span> function is responsible for sending the message passed as the parameter to the message port of the remote application. To do that, the <span style="font-family: Courier New,Courier,monospace">message_port_send_message()</span> function must be invoked. The remote app ID and remote port name have defined fixed values.</p>
<pre class="prettyprint">
static bool
_send_message(bundle *b)
{
&nbsp;&nbsp;&nbsp;if (!b) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Cannot send message, the bundle is NULL&quot;);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Send message to specified remote port
&nbsp;&nbsp;&nbsp;int ret = message_port_send_message(REMOTE_APP_ID, REMOTE_PORT, b);

&nbsp;&nbsp;&nbsp;if (ret != MESSAGE_PORT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to send message: error %d&quot;, ret);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>