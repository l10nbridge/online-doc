<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Message Port Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Message Port Sample Overview</h1>

  <p>The Message Port sample demonstrates how to implement data exchange through a message port to enable custom bundled data exchange.</p>
  <p>The following figure illustrates the main screens of the application.</p>
  <p class="figure" id="app-screenshot">Figure: Message Port screens</p>
  <p align="center">
    <img alt="Data source view" src="../images/messageport_data_source_view_sd.png" />
	<img alt="Data sink view" src="../images/messageport_data_sink_view_sd.png" />
  </p>

  <p>You can:</p>
  <ul>
    <li>Input a text message: a user-defined text message is bundled and sent through a message port</li>
	<li>Trigger trusted communication: you can change between common and trusted message sending mode</li>
	<li>Send a text message: a bundled text message is sent through a message port following the trust level set by the user</li>
	<li>Receive a text message: a user-defined text message is received and displayed</li>
  </ul>
  
  <p>The following figures illustrate the structure of the user interface (EDJE layout scripts are used).</p>
  
  <p id="ui-source-layout" class="figure">Figure: UI layout structure of the Data source view</p>
  <p align="center" id="ui-data-source-struct">
    <img alt="UI layout structure of the data source" src="../images/messageport_edje_structure_data_source_sd.png" /> <img alt="UI component structure of the data source" src="../images/messageport_ui_structure_data_source_sd.png" />
  </p>

  <p id="ui-sink-layout" class="figure">Figure: UI layout structure of Data sink view</p>
  <p align="center" id="ui-data-sink-struct">
    <img alt="UI layout structure of the data sink" src="../images/messageport_edje_structure_data_sink_sd.png" /> <img alt="UI component structure of the data sink" src="../images/messageport_ui_structure_data_sink_sd.png" />
  </p>
  <p>The application workflow can be divided into the following logical pipelines, illustrated in the following figure.</p>
  <ul>
    <li>Application startup</li>
	<li>Bundled text message sending</li>
	<li>Bundled text message receiving</li>
  </ul>
 
  <p id="workflow" class="figure">Figure: Application workflow</p>
  <p align="center">
    <img alt="Startup" src="../images/messageport_workflow_startup_sd.png"/> <img alt="Message sending" src="../images/messageport_workflow_text_send_sd.png"/> <img alt="Message receiving" src="../images/messageport_workflow_text_receive_sd.png"/> <img alt="Message structure" src="../images/messageport_workflow_message_structure_sd.png"/>
  </p>

<h2>Implementation</h2>

<h3 id="type-defs">Type Definitions</h3>

<p>The main data structure is used as a placeholder for the model and view data:</p>
<pre class="prettyprint">
typedef struct 
__appdata 
{
&nbsp;&nbsp;&nbsp;viewdata_s view; // View module data
} appdata_s;
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">viewdata_s</span> structure contains references to all UI component objects created by the <a href="#view">View</a> module.</p>
<pre class="prettyprint">
typedef struct 
{
&nbsp;&nbsp;&nbsp;Evas_Object* win; // Main window object
&nbsp;&nbsp;&nbsp;Evas_Object* conform; // Conformant object
&nbsp;&nbsp;&nbsp;Evas_Object* layout_main_panel; // Main window&#39;s layout object (embedded into the conform component)
&nbsp;&nbsp;&nbsp;Evas_Object* main_toolbar; // Toolbar object (embedded into the PART_MAIN_TOOLBAR part of the layout_main_panel object)
&nbsp;&nbsp;&nbsp;Elm_Object_Item *main_toolbar_item_data_source; // &quot;Data source&quot; item of the main_toolbar component
&nbsp;&nbsp;&nbsp;Elm_Object_Item *main_toolbar_item_data_sink; // &quot;Data sink&quot; item of the main_toolbar component
&nbsp;&nbsp;&nbsp;Evas_Object* layout_data_source; // Data source view layout (embedded into the PART_MAIN_CONTENT part of the layout_main_panel object)
&nbsp;&nbsp;&nbsp;Evas_Object *data_source_check; // Checkbox component for toggling the trusted message port on and off (embedded into the PART_DATA_SOURCE_CHECK part of the layout_data_source object)
&nbsp;&nbsp;&nbsp;Evas_Object *data_source_entry; // Text entry component (embedded into the PART_DATA_SOURCE_ENTRY part of the layout_data_source object)
&nbsp;&nbsp;&nbsp;Evas_Object *data_source_button_send; // Button component for data sending (embedded into the PART_DATA_SOURCE_BUTTON part of the layout_data_source object)
&nbsp;&nbsp;&nbsp;Evas_Object* layout_data_sink; // Data sink view layout (embedded into the PART_MAIN_CONTENT part of the layout_main_panel object)
&nbsp;&nbsp;&nbsp;Evas_Object* sink_entry; // Message entry component (embedded into the PART_DATA_SINK_ENTRY part of the layout_data_sink object)
} viewdata_s;
</pre>

<h3 id="app-init">Application Initialization</h3>

<p>The entire application life-cycle is implemented in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file, using the common structure of the Tizen application:</p>
<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;// Variable declaration and initialization

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;// Event handler assignment

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
<p>The Message Port sample application is implemented using the MVC design pattern. Its initialization is done within the <span style="font-family: Courier New,Courier,monospace">__app_create()</span> callback function where the <span style="font-family: Courier New,Courier,monospace">controller_initialization()</span> function is responsible for the application initialization. When the application is terminated, the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function is called, and all the allocated resources are freed. For more information, see <a href="#controller">Controller</a>.</p>
<pre class="prettyprint">
static bool 
__create_app(void *data)
{
&nbsp;&nbsp;&nbsp;// Variable assignment

&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_initialization(&amp;ad-&gt;view);
}
</pre>
<pre class="prettyprint">
static void 
__terminate_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;controller_terminate(&amp;ad-&gt;view);
}
</pre>

<h3 id="view">View</h3>

<p>The entire application layout is implemented using EDJE scripts. All top level swallows are designed for EFL Elementary component embedding. The following EDJE swallow - EFL Elementary component relations and assigned functionalities are used:</p>

  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">PART_MAIN_TOOLBAR-elm_toolbar</span>: Switches the view between the Data source and Data sink.</li>
    <li><span style="font-family: Courier New,Courier,monospace">PART_DATA_SOURCE_CHECK-elm_check</span>: Toggles the trusted port mode on and off.</li>
	<li><span style="font-family: Courier New,Courier,monospace">PART_DATA_SOURCE_ENTRY-elm_entry</span>: Custom text message edit field.</li>
	<li><span style="font-family: Courier New,Courier,monospace">PART_DATA_SOURCE_BUTTON-elm_button</span>: Bundles the custom text message and sends it to the Data sink.</li>
	<li><span style="font-family: Courier New,Courier,monospace">PART_DATA_SINK_ENTRY-elm_entry</span>: Displays received data.</li>
  </ul>

<p> For more information, see also the <a href="#ui-source-layout">UI layout structure of the Data source view</a> and
<a href="#ui-sink-layout">UI layout structure of the Data sink view</a> figures.</p>
<p>The following code snippets create the application layout.</p>
<table>
   <caption>
     Table: UI layout code snippets and figures
   </caption> 
    <tr> 
     <th>Code snippet</th> 
     <th>Figure</th> 
    </tr> 
	<tr>
    <td colspan="2">
	<strong>The main layout is defined in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file.</strong>
	</td>
  </tr> 
  <tr>
    <td id="main-panel-layout">
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_MAIN;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Background part occupies the entire window
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Spacer occupies the entire area of PART_MAIN_BACKGROUND with a small margin all around
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_PANEL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SPACER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 6% of the PART_MAIN_PANEL height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the elm_toolbar component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_TOOLBAR;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 93% of the PART_MAIN_PANEL height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the data source/sink layout
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_CONTENT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
	</td>
	<td>
	  <p align="center">
        <img alt="EDJE main layout" src="../images/messageport_edje_layout_main_sd.png" />
      </p>
	</td>
  </tr>
	<tr>
    <td colspan="2">
	<strong>The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> swallow is used as a container for:</strong>
	  <ul>
        <li><strong><a href="#data-source-panel-layout">Data source layout</a> defined in the <span style="font-family: Courier New,Courier,monospace">data_source.edc</span> file</strong></li>
        <li><strong><a href="#data-sink-panel-layout">Data sink layout</a> defined in the <span style="font-family: Courier New,Courier,monospace">data_sink.edc</span> file</strong></li>
      </ul>
	  <p><strong>The data source/sink layouts are switched by the toolbar item selection.</strong></p>
	</td>
  </tr> 
  <tr>
    <td id="data-source-panel-layout">
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_DATA_SOURCE;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_CONTENT from the main.edc file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Rect plays a role of the background for the data source view and occupies
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the entire area of the PART_MAIN_CONTENT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SOURCE_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_DATA_SOURCE_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow part occupies 10% of the PART_DATA_SOURCE_BACKGROUND height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the elm_check component for trusted mode toggling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SOURCE_CHECK;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_DATA_SOURCE_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Rect part occupies 80% of the PART_DATA_SOURCE_BACKGROUND height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Background for the entry component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SOURCE_ENTRY_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_DATA_SOURCE_ENTRY_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow part occupies the entire area of the underlying part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the elm_entry component for text message input
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SOURCE_ENTRY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_DATA_SOURCE_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow part occupies 10% of the PART_DATA_SOURCE_BACKGROUND height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the elm_button component for data sending
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SOURCE_BUTTON;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
	</td>
	<td>
	  <p align="center">
        <img alt="EDJE data source layout" src="../images/messageport_edje_layout_data_source_sd.png" />
      </p>
	</td>
  </tr>
  <tr>
    <td id="data-sink-panel-layout">
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_DATA_SINK;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_CONTENT from the main.edc file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Rect plays a role of the background for the entry panel and occupies
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the entire area of the PART_MAIN_CONTENT
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SINK_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_DATA_SINK_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow part occupies the entire area of PART_DATA_SINK_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Designed to hold the elm_entry component for displaying received data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_DATA_SINK_ENTRY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
    </td>
	<td>
	  <p align="center">
        <img alt="EDJE data sink layout" src="../images/messageport_edje_layout_data_sink_sd.png" />
      </p>
	</td>
  </tr>
</table>

<p>Based on the layout defined with EDJE scripts, the application interface is created with the <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function, which takes a pointer to the structure containing view data as its parameter. The <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function is invoked in the <span style="font-family: Courier New,Courier,monospace">controller_initialization()</span> function called from the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function. For call stack details, see <a href="#controller">Controller</a> and <a href="#app-init">Application Initialization</a>. The following code snippet presents the general procedure of the user interface creation.</p>

<pre class="prettyprint">
bool 
view_create_base_gui(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;// Pointer to the viewdata_s structure is stored for future use
&nbsp;&nbsp;&nbsp;// Variable viewdata is declared globally in the scope of the view.c file
&nbsp;&nbsp;&nbsp;viewdata = vd;

&nbsp;&nbsp;&nbsp;// Main panel view creation (window, conformant, main layout, toolbar)
&nbsp;&nbsp;&nbsp;if (!__create_main_panel(vd)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Data source view creation
&nbsp;&nbsp;&nbsp;if (!__create_view_data_source(vd)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Data sink view creation
&nbsp;&nbsp;&nbsp;if (!__create_data_sink(vd)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Data source/sink layout objects are assigned to the data field of the respective toolbar&#39;s items
&nbsp;&nbsp;&nbsp;// These layout objects are used in __toolbar_item_selected_cb() callback function to switch between the layouts
&nbsp;&nbsp;&nbsp;// depending on the toolbar item selection
&nbsp;&nbsp;&nbsp;elm_object_item_data_set(vd-&gt;main_toolbar_item_data_source, (void *)vd-&gt;layout_data_source);
&nbsp;&nbsp;&nbsp;elm_object_item_data_set(vd-&gt;main_toolbar_item_data_sink, (void *)vd-&gt;layout_data_sink);

&nbsp;&nbsp;&nbsp;// Data source tab is marked as selected (the __toolbar_item_selected_cb() callback function is not called automatically)
&nbsp;&nbsp;&nbsp;elm_toolbar_item_selected_set(vd-&gt;main_toolbar_item_data_source, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Set the vd-&gt;layout_data_source as the content of the viewdata-&gt;layout_main_panel layout because the __toolbar_item_selected_cb()
&nbsp;&nbsp;&nbsp;// callback function is not called when elm_toolbar_item_selected_set() is invoked
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(viewdata-&gt;layout_main_panel, PART_MAIN_CONTENT, vd-&gt;layout_data_source);

&nbsp;&nbsp;&nbsp;evas_object_show(vd-&gt;win);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The entire application view creation is triggered by the <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function described above. The result of the succeeding subfunction invocations is depicted in the following table.</p>
<table>
<caption>
     Table: Base view creation code snippets and figures
   </caption> 
  <col width="25%"/>
  <col width="50%"/>
  <col width="25%"/>
      <tr> 
	  <th>Description</th> 
     <th>Code snippet</th> 
     <th>Figure</th> 
    </tr> 
  <tr>
    <td>
	  <p><span style="font-family: Courier New,Courier,monospace">__create_main_panel()</span>:</p>
<p>The main window and descendant conformant are created (<span style="font-family: Courier New,Courier,monospace">vd-&gt;win</span> and <span style="font-family: Courier New,Courier,monospace">vd-&gt;conform</span> respectively) and used as a placeholder for the main layout (<span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>).</p>
<p>The main layout is created with the <span style="font-family: Courier New,Courier,monospace">view_generic_create_set_layout()</span> function by loading the main group from the EDJE layout (<span style="font-family: Courier New,Courier,monospace">main.edj</span> file), and  it is then embedded into the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span> container. Finally, the <span style="font-family: Courier New,Courier,monospace">__layout_back_cb()</span> callback function is attached to the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span> for the hardware back button handling.</p>
<p>When the EDJE layout is loaded successfully, the <span style="font-family: Courier New,Courier,monospace">elm_toolbar</span> component can be created as a descendant of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span> main layout. At the very end, the following items are appended to the newly created <span style="font-family: Courier New,Courier,monospace">elm_toolbar</span> component with the <span style="font-family: Courier New,Courier,monospace">__toolbar_item_selected_cb()</span> callback function attached:</p>
		<ul>
		  <li><a href="#ui-data-source">Data source</a></li>
		  <li><a href="#ui-data-sink">Data sink</a></li>
		</ul>
<p>The <span style="font-family: Courier New,Courier,monospace">__toolbar_item_selected_cb()</span> callback function is responsible for switching between the layout objects embedded in the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> swallow of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>. Those layouts are defined in the <span style="font-family: Courier New,Courier,monospace">data_source.edc</span> and <span style="font-family: Courier New,Courier,monospace">data_sink.edc</span> files. </p>
	</td>
	<td>
<pre class="prettyprint">
static bool 
__create_main_panel(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;win = view_generic_create_window(__delete_win_request_cb);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;conform = view_generic_create_conformant(vd-&gt;win);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;layout_main_panel = view_generic_create_set_layout(vd-&gt;conform, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_MAIN_FILE_NAME, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROUP_MAIN, NULL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(vd-&gt;layout_main_panel, EEXT_CALLBACK_BACK, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__layout_back_cb, (void *)vd);

&nbsp;&nbsp;&nbsp;vd-&gt;main_toolbar = view_generic_create_toolbar(vd-&gt;layout_main_panel, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_MAIN_TOOLBAR);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;main_toolbar_item_data_source = elm_toolbar_item_append(vd-&gt;main_toolbar, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, &quot;Data source&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__toolbar_item_selected_cb, NULL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;main_toolbar_item_data_sink = elm_toolbar_item_append(vd-&gt;main_toolbar, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, &quot;Data sink&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__toolbar_item_selected_cb, NULL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
	</td>
	<td>
	  <p align="center">
        <img alt="UI main layout" height="410" src="../images/messageport_ui_layout_main_sd.png" />
      </p>
	</td>
  </tr>
  <tr>
    <td id="ui-data-source">
	  <p><span style="font-family: Courier New,Courier,monospace">__create_view_data_source()</span>:</p>
<p>The entire Data source view is created by the Data source layout loading from the <span style="font-family: Courier New,Courier,monospace">data_source.edj</span> file. The resulting layout is not inserted into the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span>, as this operation is performed later depending on toolbar item selection.</p>
<p>Next, the <span style="font-family: Courier New,Courier,monospace">elm_check</span>, <span style="font-family: Courier New,Courier,monospace">elm_entry</span>, and <span style="font-family: Courier New,Courier,monospace">elm_button</span> components are created and inserted into the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_data_source</span> layout. The newly created components are used for:</p>
	  <ul>
	    <li>Toggling the trusted mode on and off</li>
		<li>Text message input</li>
		<li>Sending the text message with respect to the trusted mode</li>
	  </ul>
<p>The relevant callback function (<span style="font-family: Courier New,Courier,monospace">__button_send_clicked_cb()</span>) is attached to the created button (<span style="font-family: Courier New,Courier,monospace">vd-&gt;data_source_button_send</span>) to handle the &quot;send&quot; event. For more information, see <a href="#user-interaction">User Interaction</a>.</p>
<p>The side image depicts the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_data_source</span> layout only.</p>
	</td>
	<td>
<pre class="prettyprint">
static bool 
__create_view_data_source(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;layout_data_source = view_generic_create_layout(vd-&gt;layout_main_panel, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_DATA_SOURCE_FILE_NAME, GROUP_DATA_SOURCE);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;data_source_check = view_generic_create_checkbox(vd-&gt;layout_data_source, PART_DATA_SOURCE_CHECK, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&lt;font color=#ffffff&gt;Use trusted message port&lt;/font&gt;&quot;);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;data_source_entry = view_generic_create_entry(vd-&gt;layout_data_source, PART_DATA_SOURCE_ENTRY);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(vd-&gt;data_source_entry, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_entry_line_wrap_set(vd-&gt;data_source_entry, ELM_WRAP_WORD);

&nbsp;&nbsp;&nbsp;vd-&gt;data_source_button_send = view_generic_create_button(vd-&gt;layout_data_source, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_DATA_SOURCE_BUTTON, &quot;Send&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__button_send_clicked_cb, (void *)vd);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
	</td>
	<td>
	  <p align="center">
        <img alt="UI data source layout" height="410" src="../images/messageport_ui_layout_data_source_sd.png" />
      </p>
	</td>
  </tr>
  <tr>
    <td id="ui-data-sink">
	  <p><span style="font-family: Courier New,Courier,monospace">__create_data_sink()</span>:</p>
<p>The <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_data_sink</span> layout is created based on the <span style="font-family: Courier New,Courier,monospace">data_sink.edc</span> file. The resulting layout is embedded into the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> part.</p>
<p>Next, the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component is created and inserted into the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_data_sink</span> layout. The <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component plays a role of a non-editable text panel for displaying the received messages.</p>
	</td>
	<td>
<pre class="prettyprint">
static bool 
__create_data_sink(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;layout_data_sink = view_generic_create_layout(vd-&gt;layout_main_panel, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_DATA_SINK_FILE_NAME, GROUP_DATA_SINK);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;sink_entry = view_generic_create_entry(vd-&gt;layout_data_sink, PART_DATA_SINK_ENTRY);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(vd-&gt;sink_entry, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_entry_editable_set(vd-&gt;sink_entry, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_entry_scrollable_set(vd-&gt;sink_entry, EINA_TRUE);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
	</td>
	<td>
	  <p align="center">
        <img alt="UI data sink layout" height="410" src="../images/messageport_ui_layout_data_sink_sd.png" />
      </p>
	</td>
  </tr>
</table>

<h3 id="user-interaction">User Interaction</h3>

  <p>The interaction between the user and the sample application must follow the scheme described below:</p>
    <ul>
		<li>Text message input</li>
		<li>Selecting whether the message is to be sent through a trusted message port</li>
		<li>Sending message to the data sink using the <strong>Send</strong> button</li>
    </ul>
  <p>After the message is successfully sent, the user can switch the view from the Data source to Data sink, where the received data is printed in a text form.</p>

  <p>The text message sending procedure is triggered by the <strong>Send</strong> button click and implemented in the <span style="font-family: Courier New,Courier,monospace">__button_send_clicked_cb()</span> callback function:</p>
  <ol>
  <li>The text message provided by the user is obtained from the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component available from the Data source view.</li>
<li>The state of the <span style="font-family: Courier New,Courier,monospace">elm_check</span> component is obtained, pointing to the trusted mode selection.</li>
<li>The text message is bundled and sent through the message port to the Data sink with respect to the trusted mode selection.</li></ol>

<pre class="prettyprint">
static void 
__button_send_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;// Variable declaration

&nbsp;&nbsp;&nbsp;// Obtaining the text message and trusted mode selection state
&nbsp;&nbsp;&nbsp;if (__get_input_data(vd, &amp;text, &amp;trusted_port))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text message bundling and sending through message port
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_data_source_send_message((const char *)text, trusted_port);

&nbsp;&nbsp;&nbsp;if (text)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(text);
}
</pre>

  <p>The <span style="font-family: Courier New,Courier,monospace">__get_input_data()</span> function is responsible for obtaining the user data, and its implementation boils down to the invocation of the <span style="font-family: Courier New,Courier,monospace">elm_entry_entry_get()</span> and <span style="font-family: Courier New,Courier,monospace">elm_check_state_get()</span> functions
  with the <span style="font-family: Courier New,Courier,monospace">vd-&gt;data_source_entry</span> and <span style="font-family: Courier New,Courier,monospace">vd-&gt;data_source_check</span> parameters.</p>

  <p>For more information on the implementation of the <span style="font-family: Courier New,Courier,monospace">controller_data_source_send_message()</span> function, see <a href="#controller-data-source">Data Source Controller</a>.</p>

<h3 id="controller">Controller</h3>
  <p>  The objective of the general Controller module is to handle the application initialization and termination procedures. For the function invocation contexts, see <a href="#app-init">Application Initialization</a>.</p>
  <p>The <span style="font-family: Courier New,Courier,monospace">controller_initialization()</span> function handles:</p>
  <ul>
    <li><a href="#view">User interface creation</a>: <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span></li>
       <li><a href="#controller-data-sink">Data sink creation and initialization</a>: <span style="font-family: Courier New,Courier,monospace">controller_data_sink_init()</span></li>
  </ul>
  <p>If any of the above functions fail, the <span style="font-family: Courier New,Courier,monospace">controller_initialization()</span> function returns a failure status which results in the application termination.</p>

<pre class="prettyprint">
bool 
controller_initialization(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;return (view_create_base_gui(vd) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_data_sink_init(__message_port_message_cb));
}
</pre>

  <p>When the application is terminated, the <span style="font-family: Courier New,Courier,monospace">controller_terminate()</span> function is called. It is responsible for deleting the user interface and releasing resources. For more information on the used functions, see <a href="#controller-data-sink">Data Sink Controller</a> and <a href="#view">View</a>.</p>

<pre class="prettyprint">
void 
controller_terminate(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;controller_data_sink_finit();
&nbsp;&nbsp;&nbsp;view_destroy_base_gui(vd);
}
</pre>


<h4 id="controller-data-source">Data Source Controller</h4>
  <p>The Data source controller module is responsible for data bundling and sending through the message port. For more information on the function triggering the entire process (<span style="font-family: Courier New,Courier,monospace">controller_data_source_send_message()</span>), see <a href="#user-interaction">User Interaction</a>.</p>
  
    <p>All user input data is passed as parameters to the <span style="font-family: Courier New,Courier,monospace">controller_data_source_send_message()</span> function:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">text</span>: Message text provided by the user</li>
       <li><span style="font-family: Courier New,Courier,monospace">trusted_port</span>: User selection of the message port trust mode</li>
  </ul>
  <p>The bundle object is created and filled with the user message text by the <span style="font-family: Courier New,Courier,monospace">__create_bundle()</span> function. At the beginning, an empty bundle object is created, and then the message text is added with the <span style="font-family: Courier New,Courier,monospace">text-message</span> key name assigned to the defined <span style="font-family: Courier New,Courier,monospace">BUNDLE_DATA_KEY</span> symbol. Once it is created, the bundle object is sent to the Data sink through a message port with the <span style="font-family: Courier New,Courier,monospace">__send_bundle()</span> function.</p>

<pre class="prettyprint">
bool 
controller_data_source_send_message(const char *text, bool trusted_port)
{
&nbsp;&nbsp;&nbsp;bundle *bundle_obj = NULL;

&nbsp;&nbsp;&nbsp;if (!__create_bundle(&amp;bundle_obj, text))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__send_bundle(bundle_obj, trusted_port)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_bundle_destroy(bundle_obj);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;model_bundle_destroy(bundle_obj);

&nbsp;&nbsp;&nbsp;return true;
}

static bool 
__create_bundle(bundle **bundle_obj, const char *text)
{
&nbsp;&nbsp;&nbsp;if (!model_bundle_create(bundle_obj))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!model_bundle_add_string(bundle_obj, BUNDLE_DATA_KEY, text)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_bundle_destroy(*bundle_obj);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>For more information on the model functions, see <a href="#model-bundle">Bundle Model</a>.</p>

  <p>The <span style="font-family: Courier New,Courier,monospace">__send_bundle()</span> function sends the created bundle to the Data sink:</p>

<pre class="prettyprint">
static bool 
__send_bundle(bundle *bundle_obj, bool trusted_port)
{
&nbsp;&nbsp;&nbsp;if (trusted_port) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model_message_port_send_trusted_message(bundle_obj);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return model_message_port_send_message(bundle_obj);
&nbsp;&nbsp;&nbsp;}
}
</pre>

  <p>Depending on the user selection regarding the trusted mode, the bundle is sent using:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">model_message_port_send_trusted_message()</span></li>
       <li><span style="font-family: Courier New,Courier,monospace">model_message_port_send_message()</span></li>
  </ul>
  <p>For the implementation of both functions, see <a href="#model-bundle">Bundle Model</a>.</p>


<h4 id="controller-data-sink">Data Sink Controller</h4>
  <p>The Data sink controller module is responsible for initializing and finalizing the communication channel through the message port and receiving messages. The Data sink initialization function (<span style="font-family: Courier New,Courier,monospace">controller_data_sink_init()</span>) is invoked from the <span style="font-family: Courier New,Courier,monospace">controller_initialization()</span> function contained in the general <a href="#controller">Controller</a> module. Similarly, the finalization function (<span style="font-family: Courier New,Courier,monospace">controller_data_sink_finit()</span>) is called from the <span style="font-family: Courier New,Courier,monospace">controller_terminate()</span> function contained in the same Controller module.</p>
  <p>In the message port initialization procedure, <a href="#model-message-port">2 new communication channels are created</a> using the <span style="font-family: Courier New,Courier,monospace">model_message_port_register_port()</span> and <span style="font-family: Courier New,Courier,monospace">model_message_port_register_trusted_port()</span> functions with the <span style="font-family: Courier New,Courier,monospace">__message_port_message_cb()</span> and <span style="font-family: Courier New,Courier,monospace">__message_port_trusted_message_cb()</span> callback functions attached.</p>
<p>When a new message arrives, one of the 2 attached callback functions is invoked with the received data passed as the callback function&#39;s argument. The <span style="font-family: Courier New,Courier,monospace">__message_port_message_cb()</span> callback function is invoked if the message is received through non-trusted message port. The second callback function (<span style="font-family: Courier New,Courier,monospace">__message_port_trusted_message_cb()</span>) is invoked if the message is received through a trusted message port channel.</p>
<p>Additionally, the <span style="font-family: Courier New,Courier,monospace">controller_data_sink_init()</span> function takes 1 parameter
  (<span style="font-family: Courier New,Courier,monospace">msg_rcv_cb</span>), which points to a callback function defined in the general <a href="#controller">Controller</a> module. This callback function is called whenever any message from a message port is received (trusted or non-trusted).</p>

<pre class="prettyprint">
bool 
controller_data_sink_init(message_received_cb msg_rcv_cb)
{
&nbsp;&nbsp;&nbsp;__message_received_cb = msg_rcv_cb;

&nbsp;&nbsp;&nbsp;if (!model_message_port_register_port(__message_port_message_cb, NULL))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!model_message_port_register_trusted_port(__message_port_trusted_message_cb, NULL))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}

void 
controller_data_sink_finit(void)
{
&nbsp;&nbsp;&nbsp;bool exists = false;

&nbsp;&nbsp;&nbsp;if (model_message_port_check_remote_port(&amp;exists)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exists)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_message_port_unregister_port();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;exists = false;

&nbsp;&nbsp;&nbsp;if (model_message_port_check_trusted_remote_port(&amp;exists)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exists)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_message_port_unregister_trusted_port();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The general approach of data extraction from a received bundle object is based on the knowledge about its structure (see the bundle object structure in the <a href="#workflow">Application workflow</a> image). Due to the simplicity of bundled data (message text), the procedure of message extraction is limited to obtaining a text value from the known key name of the bundle object:</p>

<pre class="prettyprint">
static void 
__message_port_message_process(int local_port_id, const char *remote_app_id, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *remote_port, bool trusted_port, bundle *message)
{
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;char *msg = NULL;
&nbsp;&nbsp;&nbsp;if (!model_bundle_get_string(message, BUNDLE_DATA_KEY, &amp;msg))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;__message_received_cb(local_port_id, remote_app_id, remote_port, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trusted_port, (const char *)msg);
}
</pre>

  <p>The <span style="font-family: Courier New,Courier,monospace">__message_port_message_process()</span> function is invoked by one of the receiving callback functions (<span style="font-family: Courier New,Courier,monospace">_message_port_message_cb()</span> and
  <span style="font-family: Courier New,Courier,monospace">__message_port_trusted_message_cb()</span>). At the end of the
  <span style="font-family: Courier New,Courier,monospace">__message_port_message_process()</span> function, the
  <span style="font-family: Courier New,Courier,monospace">__message_received_cb()</span> callback function is called. This callback function is assigned through the <span style="font-family: Courier New,Courier,monospace">msg_rcv_cb</span> parameter of the <span style="font-family: Courier New,Courier,monospace">controller_data_sink_init()</span> function.</p>
  
  <p>For more information on the implementation details of the following functions, see <a href="#model-bundle">Bundle Model</a> and <a href="#model-message-port">Message Port Model</a>:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">model_bundle_get_string()</span></li>
       <li><span style="font-family: Courier New,Courier,monospace">model_message_port_register_port()</span></li>
       <li><span style="font-family: Courier New,Courier,monospace">model_message_port_register_trusted_port()</span></li>
  </ul>


 <p>In case the <span style="font-family: Courier New,Courier,monospace">__message_received_cb()</span> callback function is called successfully, the message text is displayed in the <span style="font-family: Courier New,Courier,monospace">elm_entry</span> component in the Data sink view (for the text output structure, see the implementation of the
  <span style="font-family: Courier New,Courier,monospace">__message_port_message_cb()</span> callback function in the general Controller module). An example of the text output is depicted in the <a href="#app-screenshot">Message Port screens</a> figure.</p>


<h3 id="model-bundle">Bundle Model</h3>
  <p>The Bundle model module provides a set of wrapper functions for the Bundle API used by the <a href="#controller-data-source">Data source controller</a> and the <a href="#controller-data-sink">Data sink controller</a> modules for the bundle object management:</p>
  <ul>
    <li>Creating and removing the bundle object:
	<pre class="prettyprint">
bool 
model_bundle_create(bundle **bundle_obj)
{
&nbsp;&nbsp;&nbsp;// Bundle object is created
&nbsp;&nbsp;&nbsp;*bundle_obj = bundle_create();
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_bundle_destroy(bundle *bundle_obj)
{
&nbsp;&nbsp;&nbsp;// Bundle object is freed
&nbsp;&nbsp;&nbsp;int ret = bundle_free(bundle_obj);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
       <li>Adding a text string to the bundle object:
	   <pre class="prettyprint">
bool 
model_bundle_add_string(bundle **bundle_obj, const char *key, const char *value)
{
&nbsp;&nbsp;&nbsp;// String value assigned to the given key is added to the bundle
&nbsp;&nbsp;&nbsp;int ret = bundle_add_str(*bundle_obj, key, value);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
       <li>Extracting a text string from the bundle object:
	   <pre class="prettyprint">
bool 
model_bundle_get_string(bundle *bundle_obj, const char *key, char **value)
{
&nbsp;&nbsp;&nbsp;*value = NULL;

&nbsp;&nbsp;&nbsp;// String value assigned to the given key is acquired from the bundle
&nbsp;&nbsp;&nbsp;int ret = bundle_get_str(bundle_obj, key, value);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
  </ul>

<h3 id="model-message-port">Message Port Model</h3>
  <p>The Message port model module provides a set of wrapper functions for the Message Port API used by the <a href="#controller-data-sink">Data sink controller</a> and the <a href="#controller-data-source">Data source controller</a> modules:</p>
  <ul>
    <li>Creating and removing the message port:
	<pre class="prettyprint">
bool 
model_message_port_register_port(message_port_message_cb callback, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Local message port is registered with a callback function assigned
&nbsp;&nbsp;&nbsp;// Callback function is called whenever a message is received
&nbsp;&nbsp;&nbsp;// If the returned value is non-negative, the message port is created successfully
&nbsp;&nbsp;&nbsp;// Otherwise, the ret value points to the error code
&nbsp;&nbsp;&nbsp;int ret = message_port_register_local_port(MESSAGE_PORT_REMOTE_NAME, callback, user_data);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// Identifier of a message port is stored
&nbsp;&nbsp;&nbsp;_local_port_id = ret;

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_message_port_register_trusted_port(message_port_trusted_message_cb callback, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Trusted local message port is registered with a callback function assigned
&nbsp;&nbsp;&nbsp;// Callback function is called whenever a trusted message is received
&nbsp;&nbsp;&nbsp;// If the returned value is non-negative, the trusted message port is created successfully
&nbsp;&nbsp;&nbsp;// Otherwise, the ret value points to the error code
&nbsp;&nbsp;&nbsp;int ret = message_port_register_trusted_local_port(MESSAGE_PORT_TRUSTED_REMOTE_NAME, callback, user_data);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// Identifier of a trusted message port is stored
&nbsp;&nbsp;&nbsp;_local_trusted_port_id = ret;

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_message_port_unregister_port(void)
{
&nbsp;&nbsp;&nbsp;// Local message port is unregistered based on its identifier
&nbsp;&nbsp;&nbsp;int ret = message_port_unregister_local_port(_local_port_id);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_message_port_unregister_trusted_port(void)
{
&nbsp;&nbsp;&nbsp;// Trusted local message port is unregistered based on its identifier
&nbsp;&nbsp;&nbsp;int ret = message_port_unregister_trusted_local_port(_local_trusted_port_id);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

	</li>
       <li>Checking the message port existence:
	   <pre class="prettyprint">
bool 
model_message_port_check_remote_port(bool *exists)
{
&nbsp;&nbsp;&nbsp;*exists = false;

&nbsp;&nbsp;&nbsp;// Check whether the message port with given name (MESSAGE_PORT_REMOTE_NAME) exists
&nbsp;&nbsp;&nbsp;int ret = message_port_check_remote_port(PACKAGE, MESSAGE_PORT_REMOTE_NAME, exists);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_message_port_check_trusted_remote_port(bool *exists)
{
&nbsp;&nbsp;&nbsp;*exists = false;

&nbsp;&nbsp;&nbsp;// Check whether the trusted message port with given name (MESSAGE_PORT_TRUSTED_REMOTE_NAME) exists
&nbsp;&nbsp;&nbsp;int ret = message_port_check_trusted_remote_port(PACKAGE, MESSAGE_PORT_TRUSTED_REMOTE_NAME, exists);
&nbsp;&nbsp;&nbsp;// Error handling
 
&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
       <li>Sending the bundle object:
	   <pre class="prettyprint">
bool 
model_message_port_send_message(bundle *message)
{
&nbsp;&nbsp;&nbsp;// Bundled message is sent over the previously created message port
&nbsp;&nbsp;&nbsp;int ret = message_port_send_message(PACKAGE, MESSAGE_PORT_REMOTE_NAME, message);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_message_port_send_trusted_message(bundle *message)
{
&nbsp;&nbsp;&nbsp;// Bundled message is sent over the previously created trusted message port
&nbsp;&nbsp;&nbsp;int ret = message_port_send_trusted_message(PACKAGE, MESSAGE_PORT_TRUSTED_REMOTE_NAME, message);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
  </ul>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
