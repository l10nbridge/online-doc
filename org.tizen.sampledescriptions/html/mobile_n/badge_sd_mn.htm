<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Badge Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Badge Sample Overview</h1> 

  <p>The Badge sample application demonstrates how you can handle application badges using the <a href="../../../org.tizen.native.mobile.apireference/group__BADGE__MODULE.html">Badge</a> API. You can create, modify, and delete badges displayed by any of the applications installed on a platform.</p>
  <p>The following figure illustrates the application view.</p>
  <p class="figure">Figure: Badge screen</p>
  <p align="center"><img alt="Main view" src="../images/badge_main_view_default_sd.png" /> <img alt="Main view with the target application selected" src="../images/badge_main_view_app_selected_sd.png" /></p>

  <p>On the main screen, you can:</p>
  <ul>
    <li>Browse a list of target applications and select a specific application for badge management
<p>All applications that can have a badge attached are displayed.</p></li>
	<li>Manipulate badges
<p>You can create and remove badges, and update the badge counter of a selected application by altering the badge counter value.</p></li>
  </ul>
  
  <p>The following figure illustrates the structure of the application user interface and components. EDJE layout scripts are used.</p>
 
  <p class="figure" id="ui-struct">Figure: UI layout and component structure</p>
  <p align="center"><img alt="UI layout structure" src="../images/badge_ui_structure_1_sd.png" /> <img alt="UI component structure" src="../images/badge_ui_structure_2_sd.png" /></p>
  <p>The application workflow can be divided into 2 logical blocks: startup and application badge update. The following figure illustrates the workflow.</p>
  <p class="figure">Figure: Application workflow</p>
  <p align="center"><img alt="Application workflow - startup" src="../images/badge_workflow_startup_sd.png"/> <img alt="Application workflow - update" src="../images/badge_workflow_badge_update_sd.png"/></p>
  <h2>Prerequisites</h2>
  <p>To ensure proper application execution, the following privileges must be set:</p>
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/packagemanager.info</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/notification</span></li>
  </ul>
  

<h2>Implementation</h2>

<h3 id="type-defs">Type Definitions</h3> 
<p>The main data structure is used as a container for the <a href="#view">View</a> and <a href="#model">Model</a> data:</p>
<pre class="prettyprint">
typedef struct 
appdata
{
&nbsp;&nbsp;&nbsp;// View module data
&nbsp;&nbsp;&nbsp;viewdata_s viewdata; 
   
&nbsp;&nbsp;&nbsp;// Model module data
&nbsp;&nbsp;&nbsp;modeldata_s modeldata;  
} 
appdata_s;
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">viewdata_s</span> structure contains references to all the component objects created by the View module:</p>
<pre class="prettyprint">
typedef struct 
_viewdata 
{
&nbsp;&nbsp;&nbsp;// Main window component object
&nbsp;&nbsp;&nbsp;Evas_Object* win;

&nbsp;&nbsp;&nbsp;// Conformant component object                
&nbsp;&nbsp;&nbsp;Evas_Object* conform;

&nbsp;&nbsp;&nbsp;// Main window layout object (embedded into the conform component)
&nbsp;&nbsp;&nbsp;Evas_Object* layout_main_panel;                 

&nbsp;&nbsp;&nbsp;// Top panel layout object (embedded into the main_panel_badge_update_panel part of the layout_main_panel)
&nbsp;&nbsp;&nbsp;Evas_Object* layout_badge_update_panel;   

&nbsp;&nbsp;&nbsp;// Middle panel layout object (embedded into the main_panel_apps_list_panel part of the layout_main_panel)   
&nbsp;&nbsp;&nbsp;Evas_Object* layout_available_apps_panel;

&nbsp;&nbsp;&nbsp;// Bottom panel layout object (embedded into the main_panel_buttons_panel part of the layout_main_panel)
&nbsp;&nbsp;&nbsp;Evas_Object* layout_buttons_panel;     

&nbsp;&nbsp;&nbsp;// Spinner component object used for badge counter setting  
&nbsp;&nbsp;&nbsp;Evas_Object* badge_counter_spinner;  
           
&nbsp;&nbsp;&nbsp;// Genlist component object used for available applications listing
&nbsp;&nbsp;&nbsp;Evas_Object* available_apps_list;    
      
&nbsp;&nbsp;&nbsp;// Button component object used to confirm and apply the input data   
&nbsp;&nbsp;&nbsp;Evas_Object* update_button;                    
} 
viewdata_s;
</pre>
The <span style="font-family: Courier New,Courier,monospace">modeldata_s</span> contains a list of <span style="font-family: Courier New,Courier,monospace">pkginfo_s</span> items, where each <span style="font-family: Courier New,Courier,monospace">pkginfo_s</span> structure contains information about installed applications:
<pre class="prettyprint">
typedef struct 
_pkginfo 
{
&nbsp;&nbsp;&nbsp;// Name of the application package
&nbsp;&nbsp;&nbsp;char *pkg_name; 
&nbsp;&nbsp;&nbsp;// Application ID
&nbsp;&nbsp;&nbsp;char *app_id;   
} 
pkginfo_s;

typedef struct 
_modeldata 
{ 
&nbsp;&nbsp;&nbsp;// List of pkginfo_s structures
&nbsp;&nbsp;&nbsp;Eina_List *pkg_list;   
} 
modeldata_s;
</pre>

<h3 id="app-init">Application Initialization</h3>
<p>The entire application life-cycle is implemented in a <span style="font-family: Courier New,Courier,monospace">badge.c</span> file:</p>
<ul><li>The sample uses a common Tizen application structure:
<pre class="prettyprint">
int
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;// Declare and initialize variables

&nbsp;&nbsp;&nbsp;event_callback.create = app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = app_control;

&nbsp;&nbsp;&nbsp;// Assign event handlers 

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>
<li><p>The sample is implemented by using the MVC design pattern. Its initialization is done within the <span style="font-family: Courier New,Courier,monospace">app_create()</span> callback function.</p>
<p>Within the callback, the user interface creation is triggered using the <span style="font-family: Courier New,Courier,monospace">view_base_gui_create()</span> function call, and the application data is initialized with the <span style="font-family: Courier New,Courier,monospace">controller_application_init()</span> function. For more information, see <a href="#controller">Controller</a> and <a href="#view">View</a>.</p>
<pre class="prettyprint">
static bool
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;// Assign variables

&nbsp;&nbsp;&nbsp;if (!view_base_gui_create(&amp;ad-&gt;viewdata)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return controller_application_init(&amp;ad-&gt;modeldata);
}
</pre></li>

<li>
<p>When the application is terminated, the <span style="font-family: Courier New,Courier,monospace">app_terminate()</span> callback function frees all the allocated resources. For more information, see <a href="#controller">Controller</a>.</p>

<pre class="prettyprint">
static void
app_terminate(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s*)data;

&nbsp;&nbsp;&nbsp;if (ad-&gt;viewdata.win) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Delete the main window and all descendants
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(ad-&gt;viewdata.win);              
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Free all allocated data
&nbsp;&nbsp;&nbsp;controller_application_terminate(&amp;ad-&gt;modeldata);       
}
</pre></li></ul>

<h3 id="view">View</h3>

<p>The entire application layout is implemented using EDJE scripts. All top level swallows are designed for EFL Elementary component embedding. The following EDJE swallow - EFL Elementary component relations and assigned functionalities are used (for more information, see the <a href="#ui-struct">UI layout and component structure</a> figure):</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">badge_update_panel_badge_counter_edit</span> - <span style="font-family: Courier New,Courier,monospace">elm_spinner</span>: sets the new value of the badge counter for the selected application.</li>
	<li><span style="font-family: Courier New,Courier,monospace">apps_list_panel_list</span> - <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>: list of all installed and displayable applications, consisting of the application identifier and the badge counter.</li>
	<li><span style="font-family: Courier New,Courier,monospace">buttons_panel_button</span> - <span style="font-family: Courier New,Courier,monospace">elm_button</span>: applies all the changes.</li>
</ul>

<p>The following table defines the code snippets that create the UI layout.</p>
<table>
   <caption>
     Table: UI layout code snippets and figures
   </caption> 
    <tr> 
     <th>Code snippet</th> 
     <th>Figure</th> 
    </tr> 
<tr>
    <td colspan = "2">
      <strong>The main layout is defined in the <span style="font-family: Courier New,Courier,monospace">main.edc</span> file:</strong>
    </td>
  </tr>
  <tr>
    <td>
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_MAIN;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Background part occupies the entire window
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Spacer occupies the entire area of PART_MAIN_BACKGROUND 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// with a small margin all around
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_PANEL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SPACER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 30% of PART_MAIN_PANEL height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is designed to hold the layout_badge_update_panel elm_layout
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_PANEL_BADGE_UPDATE_PANEL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow has flexible height which depends on the height 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// of other swallows
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// At this configuration, the swallow occupies 55% of PART_MAIN_PANEL 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is designed to hold the layout_available_apps_panel elm_layout
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_PANEL_APPS_LIST_PANEL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 15% of PART_MAIN_PANEL height
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// It is designed to hold the layout_buttons_panel elm_layout
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_MAIN_PANEL_BUTTON_PANEL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
       </td>
	   <td>
      <p align="center"><img alt="The main view of the application" src="../images/badge_ui_structure_edje_main_sd.png" /></p>
    </td>
  </tr>
  <tr>
    <td colspan = "2">
         <p><strong>The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_BADGE_UPDATE_PANEL</span> swallow is used as a container for the update layout defined in the <span style="font-family: Courier New,Courier,monospace">badge-update-panel.edc</span> file:</strong></p>
    </td>
  </tr>
  <tr>
    <td>
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_BADGE_UPDATE_PANEL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_MAIN_PANEL_BADGE_UPDATE_PANEL 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// from badge.edc file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// rect plays a role of the background for the update panel and 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// occupies the entire area
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// of the PART_MAIN_PANEL_BADGE_UPDATE_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BADGE_UPDATE_PANEL_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text part occupies 50% height and 30% width of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This part is responsible for static text label display only (&quot;App name&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;badge_update_panel_app_name_caption&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text part occupies 50% height and 70% width of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This part is responsible for text display which content is triggered 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// by programs defined at the end of this file: &quot;selected_app_name_show&quot; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and &quot;selected_app_name_hide&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BADGE_UPDATE_PANEL_APP_NAME;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: STATE_BADGE_UPDATE_PANEL_APP_NAME_DEFAULT 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// State is triggered by the &quot;selected_app_name_show&quot; program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: STATE_BADGE_UPDATE_PANEL_APP_NAME_SELECTED 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// State is triggered by the &quot;selected_app_name_hide&quot; program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text part occupies 50% height and 40% width of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This part is responsible for static text label display only (&quot;Badge counter&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;badge_update_panel_badge_counter_caption&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to PART_BADGE_UPDATE_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// rect plays a role of a background for the elm_spinner component
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Its width is set to 60% of PART_BADGE_UPDATE_PANEL_BACKGROUND width
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Height is set to 38% of the PART_PREF_EDIT_PANEL_KEY_PANEL height 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and it is vertically centered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BADGE_UPDATE_PANEL_BADGE_COUNTER_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_BADGE_COUNTER_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies entire height of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_BADGE_COUNTER_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// part and 100% of its width
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BADGE_UPDATE_PANEL_BADGE_COUNTER_EDIT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Programs below are used to control the text content of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_APP_NAME part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;programs 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// &quot;selected_app_name_show&quot; program is triggered by 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// sending the SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_SHOW
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// signal to the elm_layout embedded into the layout_badge_update_panel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// As a result of the program execution, the text content of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BADGE_UPDATE_PANEL_APP_NAME is changed to the &quot;Select an application ...&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text is displayed in red color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;selected_app_name_show&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_SHOW;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part affected
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: PART_BADGE_UPDATE_PANEL_APP_NAME;          
  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part&#39;s state to be triggered          
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET STATE_BADGE_UPDATE_PANEL_APP_NAME_SELECTED 0.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part affected
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: PART_BADGE_UPDATE_PANEL_APP_NAME;                        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// &quot;selected_app_name_hide&quot; program is triggered by 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// sending the SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_HIDE
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// signal to the same elm_layout as above. As a result of the program 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// execution, the text content of the PART_BADGE_UPDATE_PANEL_APP_NAME 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// is changed to the currently selected application identifier
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text is displayed in green color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;program 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;selected_app_name_hide&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;signal: SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_HIDE;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part affected
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source: PART_BADGE_UPDATE_PANEL_APP_NAME;                     
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part&#39;s state to be triggered  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action: STATE_SET STATE_BADGE_UPDATE_PANEL_APP_NAME_UNSELECTED 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part affected
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target: PART_BADGE_UPDATE_PANEL_APP_NAME;                        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
       </td>
    <td>
      <p align="center"><img alt="The update part of the main view of the application" src="../images/badge_ui_structure_edje_update_sd.png" /></p>
    </td>
  </tr>
  <tr>
    <td colspan = "2">
         <p><strong>The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_APPS_LIST_PANEL</span> swallow is used as a container for the application list layout defined in the <span style="font-family: Courier New,Courier,monospace">apps-list-panel.edc</span> file:</strong></p>
    </td>
  </tr>
  <tr>
    <td>
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_APPS_LIST_PANEL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_MAIN_PANEL_APPS_LIST_PANEL from badge.edc file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// rect plays a role of the background for the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// applications list panel and occupies the entire area of 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the PART_MAIN_PANEL_APPS_LIST_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_APPS_LIST_PANEL_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_APPS_LIST_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text part occupies 10% height and the entire 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// width of the PART_APPS_LIST_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This part is responsible for static text label 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// display only (&quot;Available applications&quot;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;apps_list_panel_available_apps_caption&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_APPS_LIST_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 90% height of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_APPS_LIST_PANEL_BACKGROUND part and its entire width
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_APPS_LIST_PANEL_LIST;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
       </td>
    <td>
      <p align="center"><img alt="The list part of the main view of the application" src="../images/badge_ui_structure_edje_list_sd.png" /></p>
    </td>
  </tr>
  <tr>
    <td colspan = "2">
         <p><strong>The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_BUTTONS_PANEL</span> swallow is used as a container for the action button layout defined in the <span style="font-family: Courier New,Courier,monospace">buttons-panel.edc</span> file:</strong></p>
    </td>
  </tr>
  <tr>
    <td>
<pre class="prettyprint">
collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: GROUP_BUTTONS_PANEL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_MAIN_PANEL_BUTTONS_PANEL from badge.edc file
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// rect plays a role of the background for the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// buttons panel and occupies the entire area of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_MAIN_PANEL_BUTTONS_PANEL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BUTTONS_PANEL_BACKGROUND;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Part is positioned in relation to 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BUTTONS_PANEL_BACKGROUND
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow occupies 60% height and 60% width of the 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// PART_BUTTONS_PANEL_BACKGROUND part
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Swallow is horizontally and vertically centered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_BUTTONS_PANEL_BUTTON;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
       </td>
    <td>
      <p align="center"><img alt="The buttons part of the main view of the application" src="../images/badge_ui_structure_edje_buttons_sd.png" /></p>
    </td>
  </tr>
</table>
<p> Based on the layout defined with the EDJE scripts, the application interface is created with the <span style="font-family: Courier New,Courier,monospace">view_base_gui_create()</span> function (see <a href="#app-init">Application Initialization</a>), which takes one parameter - a pointer to the structure containing view data (<span style="font-family: Courier New,Courier,monospace">viewdata_s</span> - see <a href="#type-defs">Type Definitions</a>). In succeeding calls to the <span style="font-family: Courier New,Courier,monospace">view_*_panel_create()</span> functions, the user interface is created.
</p>
<pre class="prettyprint">
bool
view_base_gui_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;viewdata = vd;

&nbsp;&nbsp;&nbsp;if (!view_main_panel_create(vd) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!view_update_panel_create(vd) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!view_available_apps_panel_create(vd) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!view_buttons_panel_create(vd)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(vd-&gt;win);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}
 
&nbsp;&nbsp;&nbsp;evas_object_show(vd-&gt;win);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The following table defines the base view creation details.</p>
<table>
   <caption>
     Table: Base view creation code snippets and figures
   </caption> 
  <col width="25%"/>
  <col width="50%"/>
  <col width="25%"/>
      <tr> 
	  <th>Description</th> 
     <th>Code snippet</th> 
     <th>Figure</th> 
    </tr> 
  <tr>
    <td>
         <p><span style="font-family: Courier New,Courier,monospace">view_main_panel_create()</span>:</p>
		<p>The main window and descendant conformant are created (<span style="font-family: Courier New,Courier,monospace">vd-&gt;win</span> and <span style="font-family: Courier New,Courier,monospace">vd-&gt;conform</span> respectively) and used as a placeholder for the main layout (<span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>).</p>
		<p>The main layout is created with the <span style="font-family: Courier New,Courier,monospace">view_layout_create()</span> function by loading the main group from the EDJE layout (<span style="font-family: Courier New,Courier,monospace">badge.edj</span> file). It is embedded into the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span> container.</p>
		<p>Finally, the <span style="font-family: Courier New,Courier,monospace">view_layout_back_cb()</span> callback function is attached to the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span> layout for the back button handling.</p>
       </td>
       <td>
<pre class="prettyprint">
static bool
view_main_panel_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;win = view_window_create();
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;conform = view_conformant_create(vd-&gt;win);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;layout_main_panel = view_layout_create(vd-&gt;conform, EDJ_MAIN_FILE_NAME, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROUP_MAIN, NULL);
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(vd-&gt;layout_main_panel, EEXT_CALLBACK_BACK, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_layout_back_cb, void*)vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
       </td>
       <td>
         <p align="center"><img alt="The application's main view" src="../images/badge_ui_view_main_sd.png" /></p>
       </td>
  </tr>
  <tr>
    <td>
       <p><span style="font-family: Courier New,Courier,monospace">view_update_panel_create()</span>:</p>
		<p>The update subview is created by loading the <span style="font-family: Courier New,Courier,monospace">GROUP_BADGE_UPDATE_PANEL</span> group from the EDJE layout (the <span style="font-family: Courier New,Courier,monospace">badge-update-panel.edc</span> file). It is embedded in the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> container which is then inserted into the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_BADGE_UPDATE_PANEL</span> swallow of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>.</p>
		<p>Finally, the <span style="font-family: Courier New,Courier,monospace">elm_spinner</span> component is created for setting the badge counter value.</p>
       </td>
       <td>
<pre class="prettyprint">
static bool
view_update_panel_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;layout_badge_update_panel = view_layout_create(vd-&gt;layout_main_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_BADGE_UPDATE_PANEL_FILE_NAME,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROUP_BADGE_UPDATE_PANEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_MAIN_PANEL_BADGE_UPDATE_PANEL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;badge_counter_spinner = view_spinner_create(vd-&gt;layout_badge_update_panel);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
    </td>
       <td>
         <p align="center"><img alt="The application's main view with update panel" src="../images/badge_ui_view_main_update_panel_sd.png" /></p>
       </td>
  </tr>
  <tr>
    <td>
		<p><span style="font-family: Courier New,Courier,monospace">view_available_apps_panel_create()</span>:</p>
		<p>The available application subview is created by loading the <span style="font-family: Courier New,Courier,monospace">GROUP_APPS_LIST_PANEL</span> group from the EDJE layout (the <span style="font-family: Courier New,Courier,monospace">apps-list-panel.edc</span> file). It is embedded to the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> container which is then inserted into the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_APPS_LIST_PANEL</span> swallow of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>.</p>
		<p>Once the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_available_apps_panel</span> layout is ready, the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component is created (<span style="font-family: Courier New,Courier,monospace">vd-&gt;available_apps_list</span>) for the available application list display. 2 callback functions are assigned to the <span style="font-family: Courier New,Courier,monospace">vd-&gt;available_apps_list</span> component:</p>
		<ul>
			<li><span style="font-family: Courier New,Courier,monospace">view_available_apps_item_selected_cb()</span> for item selected action</li>
			<li><span style="font-family: Courier New,Courier,monospace">view_available_apps_item_unselected_cb()</span> for item unselected action</li>
		</ul>
       </td>
       <td>
<pre class="prettyprint">
static bool
view_available_apps_panel_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;layout_available_apps_panel = view_layout_create(vd-&gt;layout_main_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_APPS_LIST_PANEL_FILE_NAME,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROUP_APPS_LIST_PANEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_MAIN_PANEL_APPS_LIST_PANEL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;available_apps_list = view_genlist_create(vd-&gt;layout_available_apps_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_APPS_LIST_PANEL_LIST);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vas_object_smart_callback_add(vd-&gt;available_apps_list,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;selected&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_available_apps_item_selected_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void*)vd);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(vd-&gt;available_apps_list,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;unselected&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_available_apps_item_unselected_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void*)vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
    </td>
       <td>
         <p align="center"><img alt="The application's main view with application list panel" src="../images/badge_ui_view_main_apps_list_sd.png" /></p>
       </td>
  </tr>
  <tr>
    <td>
       <p><span style="font-family: Courier New,Courier,monospace">view_buttons_panel_create()</span>:</p>
	   <p>The action button subview is created by loading the <span style="font-family: Courier New,Courier,monospace">GROUP_BUTTONS_PANEL</span> group from the EDJE layout (the <span style="font-family: Courier New,Courier,monospace">buttons-panel.edc</span> file). It is embedded in the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> container which is then inserted into the <span style="font-family: Courier New,Courier,monospace">PART_MAIN_PANEL_APPS_LIST_PANEL</span> swallow of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_main_panel</span>.</p>
	   <p>Once the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_buttons_panel</span> layout is ready, the <span style="font-family: Courier New,Courier,monospace">elm_button</span> component is created (<span style="font-family: Courier New,Courier,monospace">vd-&gt;update_button</span>) for triggering the update action. A callback function which is responsible for introducing the changes to the application is connected to the <span style="font-family: Courier New,Courier,monospace">vd-&gt;update_button</span> component. </p>
      </td>
      <td>
<pre class="prettyprint">
static bool
view_buttons_panel_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd-&gt;layout_buttons_panel = view_layout_create(vd-&gt;layout_main_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EDJ_BUTTONS_PANEL_FILE_NAME,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GROUP_BUTTONS_PANEL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_MAIN_PANEL_BUTTON_PANEL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;vd-&gt;update_button = view_button_create(vd-&gt;layout_buttons_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_BUTTONS_PANEL_BUTTON,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Update&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_badge_update_button_click_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void*)vd);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
    </td>
       <td>
         <p align="center"><img alt="The complete application's main view" src="../images/badge_ui_view_main_buttons_panel_sd.png" /></p>
       </td>
  </tr>
</table>


<p>Items are added to the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component on <a href="#app-init">application initialization</a> using the <span style="font-family: Courier New,Courier,monospace">view_genlist_item_add()</span> function. This function takes only 1 parameter of the pointer to the <span style="font-family: Courier New,Courier,monospace">pkginfo_s</span> structure type (for type specification, see <a href="#type-defs">Type Definitions</a>). It contains the application identifier and the related package name, which is further passed to the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> function for display purposes. Finally, the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> item text content is acquired and displayed with the <span style="font-family: Courier New,Courier,monospace">view_genlist_item_label_get()</span> function.</p>
<pre class="prettyprint">
bool
view_genlist_item_add(pkginfo_s *pkginfo)
{
&nbsp;&nbsp;&nbsp;static Elm_Genlist_Item_Class *itc = NULL;

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (!itc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itc = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itc-&gt;item_style = &quot;double_label&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itc-&gt;func.text_get = view_genlist_item_label_get;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// NULL value assignment to unused itc fields
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Elm_Object_Item *item = elm_genlist_item_append(viewdata-&gt;available_apps_list, itc, (void*)pkginfo, NULL, ELM_GENLIST_ITEM_NONE, NULL, NULL);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// Data is assigned to the newly created genlist item
&nbsp;&nbsp;&nbsp;elm_object_item_data_set(item, (void*)pkginfo);

&nbsp;&nbsp;&nbsp;return true;
}

static char*
view_genlist_item_label_get(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;pkginfo_s *pkginfo = (pkginfo_s*)data;

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// 2 text buffers are populated (buff_main and buff_sub) with string content based on the pkginfo:
&nbsp;&nbsp;&nbsp;//    - buff_main - the application&#39;s package name
&nbsp;&nbsp;&nbsp;//    - buff_sub - the application&#39;s badge counter which is obtained with controller_badge_count_get() function

&nbsp;&nbsp;&nbsp;if (!strcmp(part, &quot;elm.text&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(pkginfo-&gt;pkg_name);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (!strcmp(part, &quot;elm.text.sub&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int badge_count = controller_badge_count_get(pkginfo-&gt;app_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char buff[255] = {0,};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buff, sizeof(buff), &quot;Badge count = %u&quot;, badge_count);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return strdup(buff);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>
<p>Each item added to the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component supports the selected and unselected actions, which are used to display the selected application package name in the EDJE text container of the <span style="font-family: Courier New,Courier,monospace">vd-&gt;layout_badge_update_panel</span> defined in the <span style="font-family: Courier New,Courier,monospace">badge-update-panel.edc</span> file:</p>
<ul><li><p>The selected action is handled by the <span style="font-family: Courier New,Courier,monospace">view_available_apps_item_selected_cb()</span> callback function:</p>
<pre class="prettyprint">
static void
view_available_apps_item_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s*)data;

&nbsp;&nbsp;&nbsp;// Get the selected item&#39;s reference
&nbsp;&nbsp;&nbsp;item_selected = (Elm_Object_Item*)event_info;
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;// Get the pkginfo_s data assigned to the selected item
&nbsp;&nbsp;&nbsp;pkginfo_s *pkginfo = (pkginfo_s*)elm_object_item_data_get(item_selected);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// Get the badge counter assigned to the selected application
&nbsp;&nbsp;&nbsp;unsigned int badge_count = controller_badge_count_get(pkginfo-&gt;app_id);
&nbsp;&nbsp;&nbsp;// Obtained badge counter value is set to the vd-&gt;badge_counter_spinner component
&nbsp;&nbsp;&nbsp;// for future manipulation
&nbsp;&nbsp;&nbsp;elm_spinner_value_set(vd-&gt;badge_counter_spinner, (double)badge_count);
&nbsp;&nbsp;&nbsp;// Selected item is updated
&nbsp;&nbsp;&nbsp;elm_genlist_item_update(item_selected);
&nbsp;&nbsp;&nbsp;// Send the SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_SHOW signal in order to display
&nbsp;&nbsp;&nbsp;// the selected application&#39;s package name in the PART_BADGE_UPDATE_PANEL_APP_NAME
&nbsp;&nbsp;&nbsp;// part of the vd-&gt;layout_badge_update_panel layout with predefined color
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(vd-&gt;layout_badge_update_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_SHOW,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_BADGE_UPDATE_PANEL_APP_NAME);
&nbsp;&nbsp;&nbsp;// Application&#39;s package name is assigned to the PART_BADGE_UPDATE_PANEL_APP_NAME
&nbsp;&nbsp;&nbsp;// part of the viewdata-&gt;layout_badge_update_panel layout
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(viewdata-&gt;layout_badge_update_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_BADGE_UPDATE_PANEL_APP_NAME,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pkginfo-&gt;app_id);
}
</pre></li>
<li><p>The unselected action is handled by the <span style="font-family: Courier New,Courier,monospace">view_available_apps_item_unselected_cb()</span> callback function:</p>
<pre class="prettyprint">
static void
view_available_apps_item_unselected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s*)data;

&nbsp;&nbsp;&nbsp;// Send the SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_HIDE signal in order to display
&nbsp;&nbsp;&nbsp;// the default text in the PART_BADGE_UPDATE_PANEL_APP_NAME part of the
&nbsp;&nbsp;&nbsp;// vd-&gt;layout_badge_update_panel layout with predefined color
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(vd-&gt;layout_badge_update_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SIGNAL_BADGE_UPDATE_PANEL_APP_NAME_HIDE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_BADGE_UPDATE_PANEL_APP_NAME);
&nbsp;&nbsp;&nbsp;// Default text is assigned to the PART_BADGE_UPDATE_PANEL_APP_NAME
&nbsp;&nbsp;&nbsp;// part of the viewdata-&gt;layout_badge_update_panel layout
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(viewdata-&gt;layout_badge_update_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PART_BADGE_UPDATE_PANEL_APP_NAME,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TEXT_LABEL_BADGE_UPDATE_PANEL_APP_NAME_DEFAULT);

&nbsp;&nbsp;&nbsp;// Current selection reference is cleared
&nbsp;&nbsp;&nbsp;item_selected = NULL;
}
</pre></li></ul>

<p>The badge implementation is triggered by the <strong>Update</strong> button click. The <span style="font-family: Courier New,Courier,monospace">view_badge_update_button_click_cb()</span> callback function, assigned to the <strong>Update</strong> button, is invoked:</p>
<pre class="prettyprint">
static void
view_badge_update_button_click_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s*)data;

&nbsp;&nbsp;&nbsp;// Check whether any item was selected. The item_selected variable is declared
&nbsp;&nbsp;&nbsp;// statically in global scope. The valid value of item_selected variable
&nbsp;&nbsp;&nbsp;// is assigned in view_available_apps_item_selected_cb() callback function.
&nbsp;&nbsp;&nbsp;if (!item_selected) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Get the pkginfo_s data assigned to the selected item
&nbsp;&nbsp;&nbsp; pkginfo_s *pkginfo = (pkginfo_s*)elm_object_item_data_get(item_selected);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// Get the badge counter assigned to the selected application
&nbsp;&nbsp;&nbsp;unsigned int curr_badge_count = controller_badge_count_get(pkginfo-&gt;app_id);
&nbsp;&nbsp;&nbsp;// Get the value of badge counter adjusted via the elm_spinner component
&nbsp;&nbsp;&nbsp;int new_badge_count = (int)elm_spinner_value_get(vd-&gt;badge_counter_spinner);

&nbsp;&nbsp;&nbsp;// If the adjusted badge counter value is equal to the badge counter value
&nbsp;&nbsp;&nbsp;// currently assigned to the selected application, nothing happens
&nbsp;&nbsp;&nbsp;if (curr_badge_count == new_badge_count) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;// If the adjusted badge counter value is not equal to the badge counter value
&nbsp;&nbsp;&nbsp;// currently assigned to the selected application, which is equal to zero,
&nbsp;&nbsp;&nbsp;// new badge for the selected application is created
&nbsp;&nbsp;&nbsp;if (curr_badge_count == 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_badge_new(pkginfo-&gt;app_id, new_badge_count);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;// If the adjusted badge counter value equals zero and the badge counter
&nbsp;&nbsp;&nbsp;// value currently assigned to the selected application is greater then zero,
&nbsp;&nbsp;&nbsp;// existing badge is removed
&nbsp;&nbsp;&nbsp;if (new_badge_count == 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_badge_remove(pkginfo-&gt;app_id);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Otherwise, the badge counter assigned to the selected application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// is updated
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_badge_update(pkginfo-&gt;app_id, new_badge_count);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Selected item is updated
&nbsp;&nbsp;&nbsp;elm_genlist_item_update(item_selected);
}
</pre>


<h3 id="controller">Controller</h3>
<p>The controller module controls the application processes:</p>

<ul><li>During the application initialization process, the controller provides the <span style="font-family: Courier New,Courier,monospace">controller_application_init()</span> function. The function acquires the application package list for the badge control using the <span style="font-family: Courier New,Courier,monospace">model_packages_list_get()</span> function, and adds the applications to the list view using the <span style="font-family: Courier New,Courier,monospace">view_genlist_item_add()</span> function. For more information, see <a href="#model">Model</a> and <a href="#view">View</a>.
<pre class="prettyprint">
bool
controller_application_init(modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;if (!model_packages_list_get(&amp;md-&gt;pkg_list)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Declare variables

&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(md-&gt;pkg_list, it, pkginfo) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_genlist_item_add(pkginfo);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>

<li><p>While the application is running, the controller provides functions for controlling the badge management process. Each of the following functions requires the application ID to be provided as an input parameter to identify the target application whose badge is to be handled. Additionally, for the badge creation and update functions, the new badge counter value is required.</p>
<ul>
  <li><span style="font-family: Courier New,Courier,monospace">controller_badge_count_get()</span> 
  <p>Obtains the badge number currently pinned to the selected application.</p>
<pre class="prettyprint">
unsigned int
controller_badge_count_get(const char *app_id)
{
&nbsp;&nbsp;&nbsp;// Variable declaration

&nbsp;&nbsp;&nbsp;if (!model_badge_count_get(app_id, &amp;badge_count)) 
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Query the badge counter value

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Log message

&nbsp;&nbsp;&nbsp;return badge_count;
}
</pre>
  </li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_badge_new()</span>
<p>Creates a new badge for the selected application.</p>
<pre class="prettyprint">
bool
controller_badge_new(const char *app_id, unsigned int badge_count)
{
&nbsp;&nbsp;&nbsp;if (!model_badge_add(app_id)) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!model_badge_display_set(app_id, 1)) 
&nbsp;&nbsp;&nbsp;{      
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Request badge visibility

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Request the badge counter initialization with provided badge_counter value
&nbsp;&nbsp;&nbsp;return model_badge_count_set(app_id, badge_count);	
}
</pre>  
  </li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_badge_remove()</span>
<p>Removes the badge which is already pinned to the selected application.</p>
<pre class="prettyprint">
bool
controller_badge_remove(const char *app_id)
{
&nbsp;&nbsp;&nbsp;if (!model_badge_count_set(app_id, 0)) 
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Request to clear the badge counter

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!model_badge_display_set(app_id, 0)) 
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Request the badge invisibility

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Request badge deletion
&nbsp;&nbsp;&nbsp;return model_badge_remove(app_id);
}  
</pre> 
</li>
  <li><span style="font-family: Courier New,Courier,monospace">controller_badge_update()</span>
<p>Updates the badge counter pinned to the selected application.</p>
  <pre class="prettyprint">
bool
controller_badge_update(const char *app_id, unsigned int badge_count)
{
&nbsp;&nbsp;&nbsp;bool display = false;

&nbsp;&nbsp;&nbsp;if (!model_badge_display_get(app_id, &amp;display)) 
&nbsp;&nbsp;&nbsp;{	
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Query the visibility state of the badge

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!display) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Only the visible badges are updated

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Request badge counter update
&nbsp;&nbsp;&nbsp;return model_badge_count_set(app_id, badge_count);	
}
</pre></li>
</ul></li>


<li><p>During the application termination process, the controller provides the <span style="font-family: Courier New,Courier,monospace">controller_application_terminate()</span> function. The function releases all the previously allocated memory (list of <span style="font-family: Courier New,Courier,monospace">pkginfo_s</span> structures). For more information, see <a href="#app-init">Application Initialization</a> and <a href="#model">Model</a>.</p>

<pre class="prettyprint">
void
controller_application_terminate(modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;model_packages_list_free(md-&gt;pkg_list);
}
</pre></li>
</ul>

<h3 id="model">Model</h3>

<p>The model module deals directly with the application data. It is responsible for:</p>

<ul>
  <li>Package names and related application identifier acquisition</li>
  <li>Badge creation, counter alteration, and badge removal</li>
</ul>

<p>To perform the above operations, the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APPLICATION__MANAGER__MODULE.html">Application Manager</a> and Badge API are used:</p>

<ul><li><p>During the application initialization, the <span style="font-family: Courier New,Courier,monospace">model_packages_list_get()</span> function is used to obtain the list of valid application identifiers and related package names (for more information, see <a href="#app-init">Application Initialization</a> and <a href="#controller">Controller</a>). The function invokes the <span style="font-family: Courier New,Courier,monospace">app_manager_foreach_app_info()</span> function with the <span style="font-family: Courier New,Courier,monospace">model_app_info_cb()</span> callback passed as a parameter in order to retrieve information about the installed applications. The application and package information is obtained with subsequent calls to the callback function.</p>

<pre class="prettyprint">
bool
model_packages_list_get(Eina_List **list)
{
&nbsp;&nbsp;&nbsp;*list = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_manager_foreach_app_info(model_app_info_cb, (void*)list);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

static bool
model_app_info_cb(app_info_h app_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;Eina_List **list = (Eina_List**)user_data;

&nbsp;&nbsp;&nbsp;char *pkg_name = NULL;
&nbsp;&nbsp;&nbsp;// Get the application package name
&nbsp;&nbsp;&nbsp;int ret = app_info_get_package(app_info, amp;pkg_name);    
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;bool nodisplay = true;
&nbsp;&nbsp;&nbsp;// Get the application display flag
&nbsp;&nbsp;&nbsp;ret = app_info_is_nodisplay(app_info, &amp;nodisplay);      
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (nodisplay)
&nbsp;&nbsp;&nbsp;// Return, if the application is non-displayable
&nbsp;&nbsp;&nbsp;{                                        
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(pkg_name);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;char *app_id = NULL;
&nbsp;&nbsp;&nbsp;// Get the application identifier
&nbsp;&nbsp;&nbsp;ret = app_info_get_app_id(app_info, &amp;app_id);           
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;// If the application is displayable and all the required information is retrieved successfully
&nbsp;&nbsp;&nbsp;// (the package name and the application identifier), the pkginfo_s structure is created
&nbsp;&nbsp;&nbsp;// and added to the list
&nbsp;&nbsp;&nbsp;pkginfo_s *pkginfo = NULL;
&nbsp;&nbsp;&nbsp;if (model_info_create(pkg_name, app_id, &amp;pkginfo)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*list = eina_list_append(*list, (void*)pkginfo);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;free(pkg_name);

&nbsp;&nbsp;&nbsp;// Continue the foreach loop to retrieve application information
&nbsp;&nbsp;&nbsp;return true;    
}
</pre></li>

<li>
<p>While the application is running, the model module provides a set of wrapper functions for the Badge API. The <a href="#controller">Controller</a> module calls these functions to:</p>

<ul>
  <li>Create and remove a badge.</li>
  <li>Get and set the badge display flag.</li>
  <li>Get and set the badge counter.</li>
  <li>Check whether the badge exists.</li>
</ul>

<p>Each of the following functions require the application ID to be provided as an input parameter. The ID is used to identify the target application whose badge is to be handled. All the functions (except those used for badge creation, removal, and existence check) require an additional parameter for setting or getting a value (display flag or badge counter).</p>

<pre class="prettyprint">
bool
model_badge_remove(const char *app_id)
{
&nbsp;&nbsp;&nbsp;int ret = badge_remove(app_id);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool
model_badge_display_get(const char *app_id, bool *display)
{
&nbsp;&nbsp;&nbsp;unsigned int is_display = 0;

&nbsp;&nbsp;&nbsp;// By default, the false value is returned
&nbsp;&nbsp;&nbsp;*display = (bool)is_display;    

&nbsp;&nbsp;&nbsp;int ret = badge_get_display(app_id, &amp;is_display);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;*display = (bool)is_display;

&nbsp;&nbsp;&nbsp;return true;
}

bool
model_badge_display_set(const char *app_id, bool display)
{
&nbsp;&nbsp;&nbsp;unsigned int display_val = 0;

&nbsp;&nbsp;&nbsp;if (display) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;display_val = 1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int ret = badge_set_display(app_id, display_val);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool
model_badge_count_get(const char *app_id, unsigned int *badge_count)
{
&nbsp;&nbsp;&nbsp;int ret = badge_get_count(app_id, badge_count);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}

bool
model_badge_count_set(const char *app_id, unsigned int badge_count)
{
&nbsp;&nbsp;&nbsp;int ret = badge_set_count(app_id, badge_count);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

</li>
<li><p>During the application termination, the <span style="font-family: Courier New,Courier,monospace">model_packages_list_free()</span> function is used to release the memory allocated in the <a href="#app-init">Application Initialization</a> step. For more information on the <span style="font-family: Courier New,Courier,monospace">controller_application_terminate()</span> function implementation, see <a href="#controller">Controller</a>.</p>

<pre class="prettyprint">
void
model_packages_list_free(Eina_List *list)
{
&nbsp;&nbsp;&nbsp;// Variable declaration

&nbsp;&nbsp;&nbsp;// List consists of pkginfo_s structures; the loop below results in
&nbsp;&nbsp;&nbsp;// pkginfo-&gt;pkg_name, pkginfo-&gt;app_id and pkginfo deallocation
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(list, it, pkginfo) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(pkginfo-&gt;pkg_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(pkginfo-&gt;app_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(pkginfo);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;list = eina_list_free(list);
}
</pre></li></ul>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>