<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Scheduler Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Scheduler Sample Overview</h1> 
<p>The Scheduler sample application demonstrates how you can schedule calendar events, change and configure their status, and set reminders. Additionally, the Scheduler sample shows daily and monthly calendar views and navigates between them to display lists of scheduled events. </p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the Scheduler.
</p>

<p class="figure">Figure: Scheduler screens</p> 
<p align="center"><img alt="Scheduler main views" src="../images/scheduler_main.png" /></p> 

<p>Each form contains appropriate UI components to enter required data, such as the event title, date and time, time zone, location, recurrence, priority, and sensitivity and buttons to create or save events.</p>

<h2>Implementation</h2>
<p>To manage events:</p>
<ol>
<li>Navigate between lists of events in a daily or monthly order, navigate between lists of events, display event details, and access editing options. When the application starts, it enumerates events and displays them in a selected order.

<pre class="prettyprint">
static void 
tabbar_daily_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;main_view_data *ad = (main_view_data *)data;
&nbsp;&nbsp;&nbsp;if (data &amp;&amp; ad-&gt;gl_allday)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;added_rec_pos = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_daily_events(data, ad-&gt;gl_allday, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;get_daily_events(data, ad-&gt;gl_events, EINA_TRUE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ad-&gt;current_view = DAILY;
}
</pre>

<p>The lists of events can be retrieved from the calendar database:</p>

<pre class="prettyprint">
static void 
get_daily_events(void *data, Evas_Object *gen_list, Eina_Bool no_all_day, Eina_Bool daily)
{
&nbsp;&nbsp;&nbsp;calendar_error_e error = CALENDAR_ERROR_NONE;

&nbsp;&nbsp;&nbsp;error = calendar_connect();
&nbsp;&nbsp;&nbsp;WARN_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_connect() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;// Remove all events from genlist
&nbsp;&nbsp;&nbsp;main_view_data *ad = (main_view_data *)data;
&nbsp;&nbsp;&nbsp;elm_genlist_clear(gen_list);

&nbsp;&nbsp;&nbsp;// Create a new genlist
&nbsp;&nbsp;&nbsp;if (!ad-&gt;itc)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc-&gt;item_style = &quot;default&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc-&gt;func.text_get = _item_label_get;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc-&gt;func.content_get = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc-&gt;func.state_get = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;itc-&gt;func.del = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Add new events
&nbsp;&nbsp;&nbsp;calendar_list_h list = NULL;
&nbsp;&nbsp;&nbsp;error = calendar_db_get_all_records(_calendar_event._uri, 0, 0, &amp;list);
&nbsp;&nbsp;&nbsp;WARN_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_db_get_all_records() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;int count = 0;
&nbsp;&nbsp;&nbsp;error = calendar_list_get_count(list, &amp;count);
&nbsp;&nbsp;&nbsp;WARN_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_list_get_count() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;calendar_record_h record = NULL;
&nbsp;&nbsp;&nbsp;int index = 0;
&nbsp;&nbsp;&nbsp;Eina_List *index_list = NULL;

&nbsp;&nbsp;&nbsp;if (ad-&gt;added_rec_pos == 0 &amp;&amp; ad-&gt;index_array)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(ad-&gt;index_array);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;index_array = calloc(count, sizeof(int));
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (!ad-&gt;index_array)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;index_array = calloc(count, sizeof(int));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ad-&gt;max_records = count;

&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; count; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//  Fill in list here 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;added_rec_pos++;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;eina_list_free(index_list);
&nbsp;&nbsp;&nbsp;calendar_list_destroy(list, true);

&nbsp;&nbsp;&nbsp;calendar_disconnect();
&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(ad-&gt;itc);
&nbsp;&nbsp;&nbsp;ad-&gt;itc = NULL;
}
</pre>
</li>

<li>View event details.
<p>When an event is clicked on the list, the <span style="font-family: Courier New,Courier,monospace;">_item_sel_cb</span> callback is called and the <span style="font-family: Courier New,Courier,monospace;">details_view_add()</span> function is executed:</p>

<pre class="prettyprint">
void 
details_view_add(window_obj *win, Evas_Object *parent, int index)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!win || !parent, &quot;Passed NULL input data&quot;);

&nbsp;&nbsp;&nbsp;details_view_data *data = calloc(1, sizeof(details_view_data));
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;Cannot allocate memory&quot;);

&nbsp;&nbsp;&nbsp;data-&gt;win = win;
&nbsp;&nbsp;&nbsp;data-&gt;navi = parent;
&nbsp;&nbsp;&nbsp;data-&gt;event_record_index = index;
&nbsp;&nbsp;&nbsp;calendar_connect();

&nbsp;&nbsp;&nbsp;if (CALENDAR_ERROR_NONE != calendar_db_get_record(_calendar_event._uri, index, &amp;data-&gt;event_record))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calendar_disconnect();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;calendar_db_get_record(_calendar_alarm._uri, index, &amp;data-&gt;alarm_record);

&nbsp;&nbsp;&nbsp;data-&gt;layout = ui_utils_layout_add(data-&gt;navi, details_view_destroy_cb, data);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(data-&gt;layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(data-&gt;layout, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(data-&gt;layout, GET_PATH(EDJ_CREATEVIEW), &quot;create_view_layout&quot;);

&nbsp;&nbsp;&nbsp;// Header for naviframe
&nbsp;&nbsp;&nbsp;data-&gt;navi_item = elm_naviframe_item_push(data-&gt;navi, &quot;Details&quot;, NULL, NULL, data-&gt;layout, NULL);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop_cb_set(data-&gt;navi_item, _details_view_navi_pop_cb, data);
&nbsp;&nbsp;&nbsp;evas_object_show(data-&gt;layout);

&nbsp;&nbsp;&nbsp;// Footer for naviframe
&nbsp;&nbsp;&nbsp;Evas_Object * toolbar = ui_utils_toolbar_add(data-&gt;navi, data-&gt;navi_item);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(toolbar, NULL, button_edit, edit_button_cb, data);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(toolbar, NULL, button_delete, _delete_button_cb, data);

&nbsp;&nbsp;&nbsp;// Create genlist for Events control
&nbsp;&nbsp;&nbsp;_genlist_add(data);

&nbsp;&nbsp;&nbsp;_genlist_items_append(data);
&nbsp;&nbsp;&nbsp;calendar_disconnect();
}
</pre>
</li>

<li>Create new events.
<p>When all the fields are filled, and the user has clicked the <strong>Save</strong> button, the <span style="font-family: Courier New,Courier,monospace;">_save_btn_clicked_cb</span> callback is called and the new event is created:</p>

<p class="figure">Figure: Adding events and modifying event details</p> 
<p align="center"><img alt="Adding events and modifying event details" src="../images/scheduler_add_event.png" /></p> 

<pre class="prettyprint">
static void 
save_btn_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;create_view_data *ad = (create_view_data *)data;
&nbsp;&nbsp;&nbsp;RETM_IF(!ad, &quot;Passed NULL input data&quot;);

&nbsp;&nbsp;&nbsp;const char *title = elm_entry_entry_get(ad-&gt;title_entry);
&nbsp;&nbsp;&nbsp;RETM_IF(!title, &quot;title string NULL&quot;);

&nbsp;&nbsp;&nbsp;if (strlen(title) == 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create_warning_popup(ad, WARNING_POPUP_TEXT);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;calendar_error_e error = CALENDAR_ERROR_NONE;

&nbsp;&nbsp;&nbsp;error = calendar_connect();
&nbsp;&nbsp;&nbsp;RETM_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_connect() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;calendar_record_h record = create_record_with_presets();

&nbsp;&nbsp;&nbsp;set_record_title(record, ad-&gt;record_title);

&nbsp;&nbsp;&nbsp;set_record_time(&amp;ad-&gt;stm, &amp;ad-&gt;etm, record, ad-&gt;is_all_day);

&nbsp;&nbsp;&nbsp;set_record_timezone_city(record);

&nbsp;&nbsp;&nbsp;set_record_location(record, ad-&gt;record_location, CALENDAR_RECORD_NO_COORDINATE, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_RECORD_NO_COORDINATE);

&nbsp;&nbsp;&nbsp;set_record_note(record, ad-&gt;record_description);

&nbsp;&nbsp;&nbsp;set_record_priority(record, ad-&gt;priority);

&nbsp;&nbsp;&nbsp;set_record_sensitivity(record, ad-&gt;sensitivity);

&nbsp;&nbsp;&nbsp;set_record_status(record, ad-&gt;status);

&nbsp;&nbsp;&nbsp;set_record_reminder(record, ad-&gt;reminder, ad-&gt;reminder_type);

&nbsp;&nbsp;&nbsp;set_record_recurrence(record, ad-&gt;recurrence_data.id);

&nbsp;&nbsp;&nbsp;if (ad-&gt;recurrence_data.id != REPEAT_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_record_repeat_count(record, ad-&gt;recurrence_data.count);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;set_record_repeat_until_time(record, &amp;ad-&gt;recurrence_data.tm);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int record_index = 0;
&nbsp;&nbsp;&nbsp;error = calendar_db_insert_record(record, &amp;record_index);
&nbsp;&nbsp;&nbsp;WARN_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_db_insert_record() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;if (record)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;calendar_record_destroy(record, EINA_FALSE);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;error = calendar_disconnect();
&nbsp;&nbsp;&nbsp;WARN_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_disconnect() failed (%x)&quot;, error);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop(ad-&gt;navi);
}
</pre>
</li>

<li>Modify the extended options of adding an event. 
<p>There is a series of popup windows with options to choose from.</p>

<pre class="prettyprint">
static void 
_show_btn_context_popup(void *data, Evas_Smart_Cb func, int n_labels, char **label, EVENT_PARAM_TYPE type)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;Passed NULL input data&quot;);
&nbsp;&nbsp;&nbsp;create_view_data *ad = (create_view_data *)data;

&nbsp;&nbsp;&nbsp;Evas_Object *popup = elm_ctxpopup_add(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;evas_object_data_set(popup, KEY_PRIORITY_DATA, ad);

&nbsp;&nbsp;&nbsp;Evas_Object *btn = NULL;

&nbsp;&nbsp;&nbsp;int param = 0;
&nbsp;&nbsp;&nbsp;switch (type)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PARAM_REMINDER:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = REMINDER_MINUTES;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn = ad-&gt;reminder_btn;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;reminder_ctxpopup = popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PARAM_PRIORITY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = PRIORITY_LOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn = ad-&gt;priority_btn;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;priority_ctxpopup = popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PARAM_SENSITIVITY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = SENSITIVITY_PUBLIC;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn = ad-&gt;sensitivity_btn;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;sensitivity_ctxpopup = popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case PARAM_STATUS:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;param = STATUS_NONE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn = ad-&gt;status_btn;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;status_ctxpopup = popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; n_labels; i++, param++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_ctxpopup_item_append(popup, label[i], NULL, func, (void *)param);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;int x = 0;
&nbsp;&nbsp;&nbsp;int y = 0;
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(btn, &amp;x, &amp;y, NULL, NULL);
&nbsp;&nbsp;&nbsp;evas_object_move(popup, x, y);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(popup, &quot;dismissed&quot;,  func, NULL);

&nbsp;&nbsp;&nbsp;evas_object_show(popup);
}
</pre>

<p class="figure">Figure: Customizing options</p> 
<p align="center"><img alt="Customizing options" src="../images/scheduler_customize.png" /></p> 

</li>

<li>Edit a previously created event. 
<p>When all the fields are filled or edited, and the <strong>Save</strong> button is pressed, the <span style="font-family: Courier New,Courier,monospace;">save_button_clicked_cb</span> callback is called:</p>

<p class="figure">Figure: Customizing editing and recurrence</p> 
<p align="center"><img alt="Customizing editing and recurrence" src="../images/scheduler_edit.png" /></p> 

<pre class="prettyprint">
void 
save_button_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;Passed NULL input data&quot;);
&nbsp;&nbsp;&nbsp;edit_view_data *view_data = (edit_view_data *)data;

&nbsp;&nbsp;&nbsp;int error = calendar_connect();
&nbsp;&nbsp;&nbsp;RETM_IF(error != CALENDAR_ERROR_NONE, &quot;calendar_connect() failed (%x)&quot;, error);

&nbsp;&nbsp;&nbsp;const char *title = elm_entry_entry_get(view_data-&gt;title_entry);
&nbsp;&nbsp;&nbsp;set_record_title(view_data-&gt;event_record, title);

&nbsp;&nbsp;&nbsp;struct tm *start_time = NULL;
&nbsp;&nbsp;&nbsp;elm_datetime_value_get(view_data-&gt;start_datetime, start_time);

&nbsp;&nbsp;&nbsp;struct tm *end_time = NULL;
&nbsp;&nbsp;&nbsp;elm_datetime_value_get(view_data-&gt;end_datetime, end_time);

&nbsp;&nbsp;&nbsp;bool is_all_day = elm_check_state_get(view_data-&gt;check_object);
&nbsp;&nbsp;&nbsp;set_record_time(start_time, end_time, view_data-&gt;event_record, is_all_day);

&nbsp;&nbsp;&nbsp;set_record_timezone_city(view_data-&gt;event_record);

&nbsp;&nbsp;&nbsp;const char *location = elm_entry_entry_get(view_data-&gt;location_entry);
&nbsp;&nbsp;&nbsp;set_record_location(view_data-&gt;event_record, location, CALENDAR_RECORD_NO_COORDINATE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALENDAR_RECORD_NO_COORDINATE);

&nbsp;&nbsp;&nbsp;const char *description = elm_entry_entry_get(view_data-&gt;description_entry);
&nbsp;&nbsp;&nbsp;set_record_note(view_data-&gt;event_record, description);

&nbsp;&nbsp;&nbsp;set_record_priority(view_data-&gt;event_record, view_data-&gt;priority);

&nbsp;&nbsp;&nbsp;set_record_sensitivity(view_data-&gt;event_record, view_data-&gt;sensitivity);

&nbsp;&nbsp;&nbsp;set_record_status(view_data-&gt;event_record, view_data-&gt;status);

&nbsp;&nbsp;&nbsp;set_record_recurrence(view_data-&gt;event_record, view_data-&gt;recurrence_data.id);

&nbsp;&nbsp;&nbsp;set_record_repeat_count(view_data-&gt;event_record, view_data-&gt;recurrence_data.count);

&nbsp;&nbsp;&nbsp;set_record_repeat_until_time(view_data-&gt;event_record, &amp;view_data-&gt;recurrence_data.tm);

&nbsp;&nbsp;&nbsp;calendar_db_update_record(view_data-&gt;event_record);

&nbsp;&nbsp;&nbsp;calendar_disconnect();

&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop(view_data-&gt;navi_frame);
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>