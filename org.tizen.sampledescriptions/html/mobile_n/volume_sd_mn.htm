<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Volume Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>
  <h1>Volume Sample Overview</h1>
<p>The Volume sample demonstrates how you can use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__MODULE.html">Sound Manager</a> API to acquire and set the device sound levels. The application window consists of a list of sliders that manage the levels of different volume types.</p>

<p>When the application is launched, it acquires the values of the volume types and sets the sliders accordingly. Apart from manually managing the volumes using sliders, the application also reacts to changes made outside it, for example, in the device settings or using hardware buttons.</p>
<p>The following figure illustrates the main screen of the application.</p>

  <p class="figure">Figure: Volume screen</p>
  <p align="center">
    <img alt="Volume screen" src="../images/volume_sample_screenshot.png" />
  </p>

<h2>Prerequisites</h2>
<p>The following privilege must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/volume.set</span></li>
 </ul>


<h2>Implementation</h2>

<p>The application uses the <span style="font-family: Courier New,Courier,monospace">volume_controller_type</span> enum to manage different volume types easily:</p>
<pre class="prettyprint">
typedef enum 
{
&nbsp;&nbsp;&nbsp;CONTROLLER_SYSTEM,
&nbsp;&nbsp;&nbsp;CONTROLLER_NOTIFICATION,
&nbsp;&nbsp;&nbsp;CONTROLLER_ALARM,
&nbsp;&nbsp;&nbsp;CONTROLLER_RINGTONE,
&nbsp;&nbsp;&nbsp;CONTROLLER_MEDIA,
&nbsp;&nbsp;&nbsp;CONTROLLER_CALL,
&nbsp;&nbsp;&nbsp;CONTROLLER_MAX
} volume_controller_type;
</pre>
<p>The enum is designed to be compliant with the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__SOUND__MANAGER__VOLUME__MODULE.html#gab0b52eeab59765b94c7a751097738a0b">sound_type_e</a> enum used by the Sound Manager API to avoid unnecessary types duplication.</p>
<pre class="prettyprint">
typedef enum
{
&nbsp;&nbsp;&nbsp;SOUND_TYPE_SYSTEM, // Sound type for system
&nbsp;&nbsp;&nbsp;SOUND_TYPE_NOTIFICATION, // Sound type for notifications
&nbsp;&nbsp;&nbsp;SOUND_TYPE_ALARM, // Sound type for alarm
&nbsp;&nbsp;&nbsp;SOUND_TYPE_RINGTONE, // Sound type for ringtones
&nbsp;&nbsp;&nbsp;SOUND_TYPE_MEDIA, // Sound type for media
&nbsp;&nbsp;&nbsp;SOUND_TYPE_CALL, // Sound type for call
&nbsp;&nbsp;&nbsp;SOUND_TYPE_VOIP, // Sound type for voip
&nbsp;&nbsp;&nbsp;SOUND_TYPE_VOICE, // Sound type for voice
} sound_type_e;
</pre>
<p>The 2 last sound types of the <span style="font-family: Courier New,Courier,monospace">sound_type_e</span> are not supported in this application.</p>

<h3>Volume Manager Module</h3>

<p>Before the volume level sliders are created, the maximum possible value must be known for each volume type. To retrieve this information, use the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_max_volume()</span> function. It takes the <span style="font-family: Courier New,Courier,monospace">sound_type_e</span> enum as an in parameter and <span style="font-family: Courier New,Courier,monospace">int</span> as an out parameter.</p>
<pre class="prettyprint">
if (sound_manager_get_max_volume((sound_type_e)type, &amp;max_volume) != SOUND_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">volume_manager_get_volume()</span> and
<span style="font-family: Courier New,Courier,monospace">volume_manager_set_volume()</span> functions manage the device sound levels. To get the volume level for each sound type, use the <span style="font-family: Courier New,Courier,monospace">sound_manager_get_volume()</span> function. Similarly, to set the volume level, use the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_volume()</span> function. Both the functions require a <span style="font-family: Courier New,Courier,monospace">sound_type_e</span> value to be passed.</p>
<pre class="prettyprint">
int
volume_manager_get_volume(volume_controller_type type)
{
&nbsp;&nbsp;&nbsp;int volume = -1;

&nbsp;&nbsp;&nbsp;if (sound_manager_get_volume((sound_type_e)type, &amp;volume) != SOUND_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return volume;
}

bool
volume_manager_set_volume(volume_controller_type type, int value)
{
&nbsp;&nbsp;&nbsp;if (sound_manager_set_volume((sound_type_e)type, value) != SOUND_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>To react to volume level changes made outside the application, set a callback function for the volume change event with the <span style="font-family: Courier New,Courier,monospace">sound_manager_set_volume_changed_cb()</span> function.</p>

<p>The callback in this sample application invokes the <span style="font-family: Courier New,Courier,monospace">view_set_volume_value()</span> function to update the UI. Both the <span style="font-family: Courier New,Courier,monospace">sound_type_e</span> enum and the new volume value are passed to the callback function as parameters to introduce the changes to the UI correctly.</p>
<pre class="prettyprint">
if (sound_manager_set_volume_changed_cb(__volume_changed_cb, NULL) != SOUND_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp; // Error handling
}

static void
__volume_changed_cb(sound_type_e type, unsigned int volume, void *user_data)
{
&nbsp;&nbsp;&nbsp;view_set_volume_value((volume_controller_type)type, (double)volume);
}
</pre>

<p>When the callback function is no longer needed, unset it using the <span style="font-family: Courier New,Courier,monospace">sound_manager_unset_volume_changed_cb()</span> function.</p>
<pre class="prettyprint">
if (sound_manager_unset_volume_changed_cb() != SOUND_MANAGER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;// Error handling
</pre>

<h3>View Manager Module</h3>

<p>A controller is created for each of the volume types. The controller consists of a volume type label, volume value label, and a slider for manually changing the value. Each controller has a custom EDJ layout.</p>

<pre class="prettyprint">
static Evas_Object *
__create_controller(volume_controller_type type)
{
&nbsp;&nbsp;&nbsp;// Variable declaration

&nbsp;&nbsp;&nbsp;__app_get_resource(EDJ_ITEM_FILE, edj_item_path, (int)PATH_MAX);

&nbsp;&nbsp;&nbsp;item_layout = elm_layout_add(s_viewdata.layout);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_layout_file_set(item_layout, edj_item_path, GRP_MAIN);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(item_layout, PART_ITEM_TYPE_TEXT, volume_item_title[type]);

&nbsp;&nbsp;&nbsp;slider = __create_slider(item_layout);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(slider, "changed", _slider_changed_cb, (void*)type);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(item_layout, PART_ITEM_SLIDER, slider);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(s_viewdata.layout, volume_item_part_name[type], item_layout);

&nbsp;&nbsp;&nbsp;return item_layout;
}
</pre>

<p>A callback function is set for the slider change event. When the user manually changes the slider value, the <span style="font-family: Courier New,Courier,monospace">_slider_changed_cb()</span> function is invoked, which in turn invokes the <span style="font-family: Courier New,Courier,monospace">volume_manager_set_volume()</span> function to change the proper sound level on the device.</p>

<pre class="prettyprint">
static void
_slider_changed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Variable declaration

&nbsp;&nbsp;&nbsp;type = (volume_controller_type)data;
&nbsp;&nbsp;&nbsp;value = elm_slider_value_get(obj);

&nbsp;&nbsp;&nbsp;__set_controller_value_label(s_viewdata.volume_controller[type], value);
&nbsp;&nbsp;&nbsp;volume_manager_set_volume(type, value);
}
</pre>

  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>