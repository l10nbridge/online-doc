<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>OAuth2 Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
	<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
</div>

<h1>OAuth2 Sample Overview</h1>

<p>The OAuth2 sample application demonstrates how to get access tokens from various resource owners that use the OAuth2 protocol RFC6749, such as Google, Facebook, and Twitter.</p>
<p>The following figure illustrates the main view of the OAuth2 application in its normal state.</p>

<p class="figure"> Figure: OAuth2 main view</p>
<p align="center"><img alt="OAuth2 main view" src="../images/oauth2_main.png"/></p>

<p>The application main screen has a list of various resource providers along with their authorization grant type.</p>

<h2>Prerequisites</h2>
<ul>
<li><p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.get</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/internet</span></li>
 </ul></li>
<li>
<p>The dummy client ID and dummy client secret in the <span style="font-family: Courier New,Courier,monospace">oauth2_provider_configs.h</span> file must be replaced with the respective App ID and App secret in the OAuth2 sample application.</p>
<p>Obtain the needed client IDs and secrets from the respective resource owners. For example, the Google client ID and secret can be obtained from the <strong>Developers Console</strong> as follows:</p>
<ol>
<li>Go to <a href="https://console.developers.google.com" target="_blank">Developers Console</a>, sign in to your Google account, and click <strong>Create an empty project</strong>.</li>
<li>In the <strong>New Project</strong> dialog box, enter a <strong>Project name</strong> and a <strong>project ID</strong> for the OAuth2 sample and click <strong>Create</strong>. An activity begins and is shown at the bottom of the view.</li>
<li>When the activity is completed, in the left sidebar, select <strong>API &amp; auth &gt; APIs &gt; Google+ API</strong>, and click <strong>Enable API</strong>.</li>
<li>In the left sidebar, select <strong>API &amp; auth &gt; Credentials</strong>, click <strong>OAuth consent screen</strong>, and set up <strong>Product name</strong>. Click <strong>Save</strong>.</li>
<li>Click <strong>Add credentials</strong> and select <strong>OAuth 2.0 client ID</strong>.</li>
<li>Select <strong>Other</strong>, enter the client name, such as <span style="font-family: Courier New,Courier,monospace">org.tizen.oauth2sample</span>, click <strong>Create</strong>.
<p>The client ID and secret are displayed in a popup window.</p></li>
</ol>
</li>
</ul>


<h2 id="implementation" name="implementation">Implementation</h2>

<p>The OAuth 2.0 specification is defined in <a href="http://tools.ietf.org/html/rfc6749" target="_blank">[RFC 6749]</a> and it builds on the OAuth 1.0 <a href="http://tools.ietf.org/html/rfc5849" target="_blank">[RFC 5849]</a> deployment experience, as well as additional use cases and extensibility requirements gathered from the wider IETF community. The OAuth 2.0 protocol is not backward-compatible with OAuth 1.0.</p>
<p>An authorization grant is a credential representing the resource owner&#39;s authorization (to access its protected resources) used by the client to obtain an access token. The specification defines 4 grant types, the authorization code, implicit, resource owner password credentials, and client credentials, as well as an extensibility mechanism for defining additional types.</p>
<p>The 4 authorization grant types are explained in the following examples.</p>

<h3 id="authorization_code" name="authorization_code">Authorization Code</h3>

<p>The authorization code is obtained by using an authorization server as an intermediary between the client and resource owner. Instead of requesting authorization directly from the resource owner, the client directs the resource owner to an authorization server, which in turn directs the resource owner back to the client with the authorization code.</p>

<p>The authorization code provides some important security benefits, such as the ability to authenticate the client, as well as the transmission of the access token directly to the client without passing it through the resource owner&#39;s user-agent and potentially exposing it to others, including the resource owner. The following example explains this with Google as the resource owner.</p>

<p class="figure">Figure: Google authorization </p>
<p align="center"><img src="../images/oauth2_google.png" alt="Sign in" /> <img src="../images/oauth2_google_permission.png" alt="Permission" /> <img src="../images/oauth2_google_response.png" alt="Response token" /></p>

<ol><li><p>After you click <strong>Google [Code]</strong> on the main screen, the sign-in screen appears (on the left in the above figure). Enter your Google account credentials to get the access token.</p></li>
<li><p>After you click <strong>Sign in</strong> and your account gets verified, the permission window appears (in the middle in the above figure). Click <strong>Allow</strong> to give the permission.</p></li>
<li><p>The response is visible on the home screen as a pop-up (on the right in the above figure).</p></li></ol>

<p>To cancel the operation, press the back key or click <strong>Deny</strong> for the permission.</p>

<pre class="prettyprint">
void
start_google_oauth_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;win_data = (Evas_Object *) data;

&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, GOOGLE_AUTH_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_token_end_point_url(request, GOOGLE_REQ_TOK_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, GOOGLE_REDIRECT_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, GOOGLE_CLIENT_ID);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, GOOGLE_CLIENT_SECRET);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_scope(request, GOOGLE_SCOPE);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_CODE);

&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, token_response_cb, NULL);
&nbsp;&nbsp;&nbsp;}
}

void
token_response_cb(oauth2_response_h response, void *user_data)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;token_response_cb&quot;);

&nbsp;&nbsp;&nbsp;char *acc_token = NULL;
&nbsp;&nbsp;&nbsp;oauth2_response_get_access_token(response, &amp;acc_token);

&nbsp;&nbsp;&nbsp;char *ref_token = NULL;
&nbsp;&nbsp;&nbsp;oauth2_response_get_refresh_token(response, &amp;ref_token);
&nbsp;&nbsp;&nbsp;google_refresh_token = ref_token;

&nbsp;&nbsp;&nbsp;long long int expires_in = 0;
&nbsp;&nbsp;&nbsp;oauth2_response_get_expires_in(response, &amp;expires_in);

&nbsp;&nbsp;&nbsp;char displayStr[1024] = {0,};
&nbsp;&nbsp;&nbsp;if (acc_token) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;displayStr[0] = &#39;\0&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(displayStr, &quot;access token= &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, acc_token);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_error_h e_handle =  NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_response_get_error(response, &amp;e_handle);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *error_val = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_error_get_custom_data(e_handle, &quot;error&quot;, &amp;error_val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_val)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(displayStr, error_val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int error_code = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int platform_error_code = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_error_get_code(e_handle, &amp;error_code, &amp;platform_error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (error_code != 0 || platform_error_code != 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(displayStr, &quot;Error=[%d][%d]&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code, platform_error_code);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcpy(displayStr, &quot;Unknown server error&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (ref_token) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, &quot;\r\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, &quot;refresh token = &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, ref_token);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (expires_in != 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, &quot;\r\n&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, &quot;expires in= &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char expires_str[128] = {0};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(expires_str, &quot;%lld&quot;, expires_in);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strcat(displayStr, expires_str);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;create_popup(displayStr , win_data);

&nbsp;&nbsp;&nbsp;return;
}
</pre>


<h3 id="implicit_code" name="implicit_code">Implicit Code</h3>

<p>In the implicit flow, the client is issued an access token directly (as a result of the resource owner authorization). The grant type is implicit, as no intermediate credentials (such as an authorization code) are issued.</p>

<p>Implicit grants improve the responsiveness and efficiency of some clients (such as a client implemented as an in-browser application), since it reduces the number of round trips required to obtain an access token. The following example explains this with Facebook as the resource owner.</p>

<p class="figure">Figure: Facebook authorization</p>

<p align="center"><img src="../images/oauth2_facebook.png" alt="Authorization" /> <img src="../images/oauth2_facebook_response.png" alt="Response token" /></p>

<ol><li><p>After you click <strong>Facebook [Implicit]</strong> on the main screen, the log-in screen appears (on the left in the above figure). Enter your Facebook account credentials to get the access token.</p></li>
<li><p>After you click <strong>Log In</strong> and your account gets verified, the response is visible on the home screen as a pop-up (on the right in the above figure).</p></li></ol>

<p>To cancel the operation, press the back key.</p>

<pre class="prettyprint">
void
start_fb_oauth_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;win_data = (Evas_Object *) data;

&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, FACEBOOK_AUTH_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, OAUTH2_REDIRECT_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, FACEBOOK_CLIENT_ID);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_scope(request, FACEBOOK_SCOPE);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_response_type(request, OAUTH2_RESPONSE_TYPE_TOKEN);

&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, token_response_cb, NULL);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3 id="client_credentials" name="client_credentials">Client Credentials</h3>

<p>Client credentials can be used as an authorization grant when the authorization scope is limited to the protected resources under the control of the client, or to protected resources previously arranged with the authorization server.</p>

<p>Client credentials are typically used as an authorization grant when the client is acting on its own behalf (the client is also the resource owner) or is requesting access to protected resources based on an authorization previously arranged with the authorization server. The following example explains this with Twitter as the resource owner.</p>

<p class="figure">Figure: Twitter authorization </p>

<p align="center"><img src="../images/oauth2_twitter_response.png" alt="Twitter authorization" />
</p>

<p>After you click <strong>Twitter [Client Credentials]</strong> on the main screen, the response is visible on the home screen as a pop-up (in the above figure).</p>

<pre class="prettyprint">
void
start_twitter_apponly_oauth_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;win_data = (Evas_Object *) data;

&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, TWITTER_AUTH_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_token_end_point_url(request, TWITTER_REQ_TOK_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, OAUTH2_REDIRECT_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, TWITTER_CONS_KEY);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, TWITTER_CONS_SEC);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_grant_type(request, OAUTH2_GRANT_TYPE_CLIENT_CREDENTIALS);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_authentication_type(request, OAUTH2_CLIENT_AUTHENTICATION_TYPE_BASIC);

&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, token_response_cb, NULL);
&nbsp;&nbsp;&nbsp;}
}
</pre>


<h3 id="resource_owner_password_credentials" name="resource_owner_password_credentials">Resource Owner Password Credentials</h3>

<p>The resource owner password credentials (such as username and password) can be used directly as an authorization grant to obtain an access token.</p>

<p>Even though this grant type requires direct client access to the resource owner credentials, the resource owner credentials are used for a single request and are exchanged for an access token. This grant type can eliminate the need for the client to store the resource owner credentials for future use, by exchanging the credentials with a long-lived access token or refresh token. The following example explains this with Salesforce as the resource owner.</p>

<p class="figure">Figure: Salesforce authorization </p>

<p align="center"><img src="../images/oauth2_salesforce_response.png" alt="Salesforce authorization" />
</p>

<p>After you click <strong>Salesforce [Password]</strong> on the main screen, the response is visible on the home screen as a pop-up (in the above figure).</p>

<pre class="prettyprint">
void
start_salesforce_oauth_code_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;oauth2_manager_h mgr = NULL;
&nbsp;&nbsp;&nbsp;int ret = oauth2_manager_create(&amp;mgr);

&nbsp;&nbsp;&nbsp;oauth2_request_h request = NULL;
&nbsp;&nbsp;&nbsp;ret = oauth2_request_create(&amp;request);

&nbsp;&nbsp;&nbsp;win_data = (Evas_Object *) data;

&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_auth_end_point_url(request, SALESFORCE_AUTH_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_token_end_point_url(request, SALESFORCE_REQ_TOK_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_redirection_url(request, OAUTH2_REDIRECT_URL);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_id(request, SALESFORCE_CLIENT_ID);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_client_secret(request, SALESFORCE_CLIENT_SECRET);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_grant_type(request, OAUTH2_GRANT_TYPE_PASSWORD);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_user_name(request, SALESFORCE_CLIENT_USER_NAME);
&nbsp;&nbsp;&nbsp;ret = oauth2_request_set_password(request, SALESFORCE_CLIENT_PASSWORD);

&nbsp;&nbsp;&nbsp;if (mgr &amp;&amp; request) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = oauth2_manager_request_token(mgr, request, token_response_cb, request);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3 id="clear_cache_and_cookies_data" name="clear_cache_and_cookies_data">Clearing Cache and Cookie Data</h3>

<p>To delete all data related to the stored credentials from all the resource owner Web site from the sample application, use the <span style="font-family: Courier New,Courier,monospace">clear_cache_and_cookies_cb()</span> function.</p>

<p class="figure">Figure: Clearing cache and cookie data</p>
<p align="center"><img src="../images/oauth2_clear_cache.png" alt="Clearing cache and cookie data" /></p>

<p>After you click <strong>Clear all cache and cookie data</strong> on the main screen and the data is successfully deleted, the response is visible on the home screen as a pop-up (in the above figure).</p>

<pre class="prettyprint">
void
clear_cache_and_cookies_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;win_data = (Evas_Object *) data;

&nbsp;&nbsp;&nbsp;if (mgr1 != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_clear_cache(mgr1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth2_manager_clear_cookies(mgr1);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mgr1 = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag = 1;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popStr = &quot;cache and cookie data cleared!!!&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;create_popup(popStr, win_data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

</body>
</html>
