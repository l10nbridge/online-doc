<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>GPS Consumer Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>GPS Consumer Sample Overview</h1> 

  <p>The GPS Consumer sample application demonstrates how you can implement a location-based application utilizing the geolocation data provided by a <a href="gps_service_sd_mn.htm">GPS service</a> and a geolocation boundary provided by the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__LOCATION__FRAMEWORK.html">Location</a> API.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screen of the GPS Consumer.</p>
  <p class="figure">Figure: GPS Consumer screen</p>
  <p align="center"><img alt="No service" src="../images/gps_consumer_no_service_sd.png" /> <img alt="Inside the boundary" src="../images/gps_consumer_inside_boundary_sd.png" /> <img alt="Outside the boundary" src="../images/gps_consumer_outside_boundary_sd.png" /></p>

  <p>The application is responsible for displaying geolocation and satellite information acquired from the GPS service through a message port. The coordinates (longitude and latitude) are acquired at 1-second intervals, whereas the satellites information is fetched every 5 seconds. These interval values are determined by the GPS service.</p>
  
  <p>The application main window consists of 3 areas:</p>
    <ul>
      <li>Information: displays the longitude, latitude, and number of visible satellites</li>
      <li>Message: displays textual information based on the geolocation data received from the GPS service and cross-boundary calculation
	    <ul>
		  <li><strong>Boundary area exceeded</strong>: if the current position is outside the defined boundary</li>
		  <li><strong>Inside boundary area</strong>: if the current position is inside the defined boundary</li>
		</ul>
	  </li>
	  <li>Map: displays the local area with the current position marked. At the initial position, the circular boundary is set with a radius equal to 30 m. The current position marker is updated according to the acquired geolocation data.</li>
    </ul>


<h2>Implementation</h2>
<h3>Message Port Module</h3>
<p>The message port module is used for communication between the GPS service and consumer applications. The GPS consumer application must register a local port with a specified name to receive data from the GPS service. To do that, the <span style="font-family: Courier New,Courier,monospace">message_port_register_local_port()</span> function is invoked. The function takes the local port name as the first parameter and a callback function to be called when a message is received as the second. If the port is created successfully, a local message port ID is returned; otherwise, the function returns a negative error value.</p>
<pre class="prettyprint">
int local_port_id = message_port_register_local_port(LOCAL_PORT_NAME, _msg_port_cb, NULL);
if (local_port_id &lt; 0)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to register port, error: %d&quot;, local_port_id);
	
&nbsp;&nbsp;&nbsp;return false;
}
</pre>

<p>When a message is received on the previously registered local port, the <span style="font-family: Courier New,Courier,monospace">_msg_port_cb()</span> function is invoked. The message in a form of a bundle is parsed here to check the message type and content. The <span style="font-family: Courier New,Courier,monospace">_bundle_str_error_check_get()</span> function is a simple helper that retrieves a string value associated with a given key and logs the appropriate message in case an error occurs. After the message content is acquired, it is passed to another function to be handled depending on the message type.</p>
<pre class="prettyprint">
static void
_msg_port_cb(int local_port_id, const char *remote_app_id, const char *remote_port, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool trusted, bundle *message, void *user_data)
{
&nbsp;&nbsp;&nbsp;char *msg_type = NULL;
&nbsp;&nbsp;&nbsp;char *latitude_str = NULL, *longitude_str = NULL;
&nbsp;&nbsp;&nbsp;char *satellites_count_str = NULL;

&nbsp;&nbsp;&nbsp;if (!_bundle_str_error_check_get(message, MESSAGE_TYPE_STR, &amp;msg_type))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!strncmp(msg_type, MESSAGE_TYPE_SATELLITES_UPDATE, strlen(msg_type)))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!_bundle_str_error_check_get(message, MESSAGE_SATELLITES_COUNT_STR, &amp;satellites_count_str))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Received message from %s: satellites_count %s&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remote_app_id, satellites_count_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_satellites_update(satellites_count_str);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (!strncmp(msg_type, MESSAGE_TYPE_POSITION_UPDATE, strlen(msg_type)))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!_bundle_str_error_check_get(message, MESSAGE_LATITUDE_STR, &amp;latitude_str) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!_bundle_str_error_check_get(message, MESSAGE_LONGITUDE_STR, &amp;longitude_str))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Received message from %s: position data: %s %s&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remote_app_id, latitude_str, longitude_str);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_position_update(latitude_str, longitude_str);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<pre class="prettyprint">
static bool
_bundle_str_error_check_get(bundle *message, char *msg_type, char **message_content)
{
&nbsp;&nbsp;&nbsp;if (bundle_get_str(message, msg_type, message_content) != BUNDLE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get message: %s&quot;, msg_type);
		
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>When the GPS consumer application receives a message with the initial coordinates, it uses the values to create a map
 with the circle boundary as a center point defined by the coordinates.</p>
<pre class="prettyprint">
static void
_circle_init(char *circle_latitude_str, char *circle_longitude_str)
{
&nbsp;&nbsp;&nbsp;double circle_latitude, circle_longitude;

&nbsp;&nbsp;&nbsp;if (!circle_latitude_str || !circle_longitude_str)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Invalid parameter&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;sscanf(circle_latitude_str, &quot;%lf&quot;, &amp;circle_latitude);
&nbsp;&nbsp;&nbsp;sscanf(circle_longitude_str, &quot;%lf&quot;, &amp;circle_longitude);

&nbsp;&nbsp;&nbsp;view_manager_map_with_circle_boundary_create(circle_longitude, circle_latitude);
}
</pre>

<p>When the first position update message is received, the coordinates are used to create a map with the circle boundary whose center point is defined by the coordinate values. After that, when the position update message is received, the coordinates are passed to the view manager to update the current location marker on the map as well as to check whether the current coordinates are inside the previously defined boundary.</p>

<pre class="prettyprint">
static void
_position_update(char *latitude_str, char *longitude_str)
{
&nbsp;&nbsp;&nbsp;double latitude, longitude;

&nbsp;&nbsp;&nbsp;if (!latitude_str || !longitude_str)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Invalid parameter&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;sscanf(latitude_str, &quot;%lf&quot;, &amp;latitude);
&nbsp;&nbsp;&nbsp;sscanf(longitude_str, &quot;%lf&quot;, &amp;longitude);

&nbsp;&nbsp;&nbsp;view_manager_map_position_update(longitude, latitude);
}
</pre>

<p>When the satellite update message is received, the satellite count is passed to the view manager to handle the displayed satellite value.</p>
<pre class="prettyprint">
static void
_satellites_update(char *satellites_count_str)
{
&nbsp;&nbsp;&nbsp;view_manager_satellites_count_update(satellites_count_str);
}
</pre>

<h3>View Manager Module</h3>
<p>The application UI consists of a window object with a standard setup with an EDJE-defined layout.</p>
<p>The map is created after the first position update message is received. The zoom level is set to <span style="font-family: Courier New,Courier,monospace">ZOOM_LEVEL</span> (18), which is currently the maximum supported value.</p>
<pre class="prettyprint">
static Evas_Object*
_map_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *map = elm_map_add(parent);
&nbsp;&nbsp;&nbsp;if (!map)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create map&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(map, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(map, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(map);

&nbsp;&nbsp;&nbsp;elm_map_zoom_set(map, ZOOM_LEVEL);

&nbsp;&nbsp;&nbsp;return map;
}
</pre>

<p>After the map has been created, a circle boundary is created with the center defined by the received coordinates and the radius equal to 30 m. The boundary consists of 2 elements:</p>
    <ul>
      <li>Map overlay, which is a graphic representation of the boundary. It is created directly on the map using the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_circle_add()</span> function. The map object, circle center longitude and latitude, as well as the pixel length of the radius are passed to this function. In this example, with the zoom level set to 18 and radius length equal to 30 meters, the pixel length of the radius is set to <span style="font-family: Courier New,Courier,monospace">BOUNDARY_CIRCLE_RADIUS_REL</span> (0.0002604).
	  <p>The minimum zoom level with which the overlay is displayed is set with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_displayed_zoom_min_set()</span> function.</p>
      <pre class="prettyprint">
// Create circle boundary
dlog_print(DLOG_INFO, LOG_TAG, &quot;Circle boundary overlay at %lf, %lf&quot;, circle_longitude, circle_latitude);

s_view_data.boundary_overlay = elm_map_overlay_circle_add(s_view_data.map, circle_longitude, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circle_latitude, BOUNDARY_CIRCLE_RADIUS_REL);
if (!s_view_data.boundary_overlay)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create boundary overlay&quot;);

&nbsp;&nbsp;&nbsp;return;
}

elm_map_overlay_displayed_zoom_min_set(s_view_data.boundary_overlay, ZOOM_LEVEL);
</pre></li>

      <li>Circle location bounds, which define a geographical boundary that can be used to track the device entering and leaving a specified region. The location center coordinates in a form of the <span style="font-family: Courier New,Courier,monospace">location_coords_s</span> structure and the radius (in meters) are passed to the <span style="font-family: Courier New,Courier,monospace">location_bounds_create_circle()</span> function to create the location bounds. The third function parameter is the newly created location bounds.
      <pre class="prettyprint">
// Create location bounds - BOUNDARY_CIRCLE_RADIUS [m] circle with center defined by initial coordinates
circle_coords.longitude = circle_longitude;
circle_coords.latitude = circle_latitude;

dlog_print(DLOG_INFO, LOG_TAG, &quot;center: %lf %lf, radius %lf&quot;, circle_coords.longitude, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;circle_coords.latitude, BOUNDARY_CIRCLE_RADIUS_M);
int ret = location_bounds_create_circle(circle_coords, BOUNDARY_CIRCLE_RADIUS_M, &amp;s_view_data.bounds);
if (ret != LOCATIONS_ERROR_NONE)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create circle bound: error %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return;
}
dlog_print(DLOG_INFO, LOG_TAG, &quot;Circle bounds created - %.1fm radius, center at %f, %f&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOUNDARY_CIRCLE_RADIUS_M, circle_coords.longitude, circle_coords.latitude);
</pre></li>
    </ul>


<p>When the position update message is received, the <span style="font-family: Courier New,Courier,monospace">view_manager_map_position_update()</span> function is invoked to apply the current position coordinate changes to the displayed map. Another map overlay is created indicating the device position on the map. The minimum zoom level with which the overlay is displayed is set with the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_displayed_zoom_min_set()</span> function.</p>
<p>If the overlay already exists, its position is changed to match the current coordinates using the <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_region_set()</span> function.</p>
<p>The region that is shown on the map is changed so that the current position marker is at the center of the map. It is done with the <span style="font-family: Courier New,Courier,monospace">elm_map_region_bring_in()</span> function, which takes the map object and new map center coordinates as parameters.</p>
<pre class="prettyprint">
// Set position overlay to new coordinates
if (!s_view_data.pos_overlay)
{
&nbsp;&nbsp;&nbsp;// Create position overlay
&nbsp;&nbsp;&nbsp;s_view_data.pos_overlay = elm_map_overlay_add(s_view_data.map, longitude, latitude);
&nbsp;&nbsp;&nbsp;if (!s_view_data.pos_overlay)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create position overlay&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_map_overlay_displayed_zoom_min_set(s_view_data.pos_overlay, ZOOM_LEVEL);
&nbsp;&nbsp;&nbsp;elm_map_overlay_show(s_view_data.pos_overlay);
}
else
{
&nbsp;&nbsp;&nbsp;// Move position overlay
&nbsp;&nbsp;&nbsp;elm_map_overlay_region_set(s_view_data.pos_overlay, longitude, latitude);
}

// Show current region
elm_map_region_bring_in(s_view_data.map, longitude, latitude);
</pre>

<p>To check whether the given coordinates are within the boundary circle, the <span style="font-family: Courier New,Courier,monospace">location_bounds_contains_coordinates()</span> function is invoked. It takes the location bounds object and the <span style="font-family: Courier New,Courier,monospace">location_coords_s</span> structure as parameters and returns a bool value (<span style="font-family: Courier New,Courier,monospace">true</span> if the bounds contain the specified coordinates, <span style="font-family: Courier New,Courier,monospace">false</span> otherwise).</p>
<p>Depending on the result, a message is set either to <span style="font-family: Courier New,Courier,monospace">MESSAGE_BOUNDARY_INSIDE</span> (<strong>Inside boundary area</strong>) or <span style="font-family: Courier New,Courier,monospace">MESSAGE_BOUNDARY_OUTSIDE</span> (<strong>Boundary area exceeded</strong>).</p>
<pre class="prettyprint">
coords.longitude = longitude;
coords.latitude = latitude;

contains = location_bounds_contains_coordinates(s_view_data.bounds, coords);

contains ? view_manager_message_update(MESSAGE_BOUNDARY_INSIDE) : view_manager_message_update(MESSAGE_BOUNDARY_OUTSIDE);
</pre>

<p>When the application is closed, the view resources must be released. The <span style="font-family: Courier New,Courier,monospace">elm_map_overlay_del()</span> function is used to delete the created map overlays. Also, the location bounds must be released using the <span style="font-family: Courier New,Courier,monospace">location_bounds_destroy()</span> function.</p>
<pre class="prettyprint">
elm_map_overlay_del(s_view_data.pos_overlay);
elm_map_overlay_del(s_view_data.boundary_overlay);

location_bounds_destroy(s_view_data.bounds);
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>