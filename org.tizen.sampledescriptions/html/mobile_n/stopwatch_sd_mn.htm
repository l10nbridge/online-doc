<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Stopwatch Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>Stopwatch Sample Overview</h1>

<p>The Stopwatch sample application demonstrates how you can implement a complex view using recursive composition of the standard EFL UI components and containers in a component hierarchy. It aims to explain how to use Ecore.</p>
<p>The sample uses UI components (such as <span style="font-family: Courier New,Courier,monospace;">elm_conformant</span>, <span style="font-family: Courier New,Courier,monospace;">elm_layout</span>, and <span style="font-family: Courier New,Courier,monospace;">elm_naviframe</span>) for the view management, containers (such as <span style="font-family: Courier New,Courier,monospace;">elm_grid</span> and <span style="font-family: Courier New,Courier,monospace;">elm_box</span>) for component management inside the view, UI components (such as <span style="font-family: Courier New,Courier,monospace;">elm_bg</span>, <span style="font-family: Courier New,Courier,monospace;">elm_button</span>, <span style="font-family: Courier New,Courier,monospace;">elm_list</span>, and <span style="font-family: Courier New,Courier,monospace;">elm_label</span>) for the content inside the view, and Ecore (such as <span style="font-family: Courier New,Courier,monospace;">ecore_thread</span>) for the operating main loop.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the Stopwatch, its wireframe structure, and the component tree.</p>

  <p class="figure">Figure: Stopwatch screen</p>
  <p align="center">
    <img alt="Stopwatch screen" src="../images/stopwatch_screenshot.png" /></p>
	<p align="center">
	<img alt="Stopwatch structure" src="../images/stopwatch_structure.png" /> <img alt="Stopwatch component tree" src="../images/stopwatch_structure2.png" />
  </p>
  
  <p>The user can start the stopwatch by clicking <strong>START</strong>:</p>
  <ul>
  <li>To stop the stopwatch, click <strong>STOP</strong>.</li>
<li>To take lap times, click <strong>LAP</strong>.
<p>The lap times are listed at the bottom of the screen.</p></li>
<li>To reset the stopwatch, click <strong>RESET</strong>.</li></ul>
  
<h2 id="implementation" name="implementation">Implementation</h2>

<p>To create the stopwatch:</p>
<ol>
<li>Initialize the user interface with the <span style="font-family: Courier New,Courier,monospace;">_create_stopwatch()</span> callback function:
<pre class="prettyprint">
static void 
_create_stopwatch(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *box1 = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *box2 = NULL;

&nbsp;&nbsp;&nbsp;ret_if(!ad);

&nbsp;&nbsp;&nbsp;_D(&quot;Create stopwatch&quot;);

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = _create_win(ad);
&nbsp;&nbsp;&nbsp;ret_if(!ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = _create_conform(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;conform, ERROR);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;_set_indicator_bg(ad);

&nbsp;&nbsp;&nbsp;// Naviframe 
&nbsp;&nbsp;&nbsp;ad-&gt;nf = _create_navi(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;nf, ERROR);

&nbsp;&nbsp;&nbsp;// Layout
&nbsp;&nbsp;&nbsp;ad-&gt;layout = _create_layout(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;layout, ERROR);

&nbsp;&nbsp;&nbsp;// 3 parts in the layout
&nbsp;&nbsp;&nbsp;box1 = view_create_stopwatch_display(ad);
&nbsp;&nbsp;&nbsp;goto_if(!box1, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;part_one&quot;, box1);
&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;layout, PRIVATE_DATA_KEY_STOPWATCH_BOX1, box1);

&nbsp;&nbsp;&nbsp;box2 = view_create_stopwatch_button(ad);
&nbsp;&nbsp;&nbsp;goto_if(!box2, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;part_two&quot;, box2);
&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;layout, PRIVATE_DATA_KEY_STOPWATCH_BOX2, box2);

&nbsp;&nbsp;&nbsp;ad-&gt;list = view_create_stopwatch_list(ad);
&nbsp;&nbsp;&nbsp;goto_if(!ad-&gt;list, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;part_three&quot;, ad-&gt;list);

&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;layout);

&nbsp;&nbsp;&nbsp;// Insert the layout to naviframe 
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;STOPWATCH&quot;, NULL, NULL, ad-&gt;layout, NULL);
&nbsp;&nbsp;&nbsp;goto_if(!nf_it, ERROR);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace;">view_create_stopwatch_display()</span>, <span style="font-family: Courier New,Courier,monospace;">view_create_stopwatch_button()</span>, and <span style="font-family: Courier New,Courier,monospace;">view_create_stopwatch_list()</span> functions create all the components and set them to the layout. To handle the button events, a smart clicked callback is registered with the <span style="font-family: Courier New,Courier,monospace;">evas_object_smart_callback_add()</span> function.
<p class="figure">Figure: Stopwatch main view layout</p>
    <p align="center">
    <img alt="Stopwatch main view layout" src="../images/stopwatch_structure4.png" />
  </p>

<pre class="prettyprint">
extern Evas_Object* 
view_create_stopwatch_display(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *grid = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *label = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;
&nbsp;&nbsp;&nbsp;viewdata_s *vd = NULL;

&nbsp;&nbsp;&nbsp;retv_if(!ad, NULL);

&nbsp;&nbsp;&nbsp;box = _create_box(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;retv_if(!box, NULL);
&nbsp;&nbsp;&nbsp;grid = _create_grid(box);
&nbsp;&nbsp;&nbsp;goto_if(!grid, ERROR);
&nbsp;&nbsp;&nbsp;bg = _create_bg(grid, 1);
&nbsp;&nbsp;&nbsp;goto_if(!bg, ERROR);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, bg, 0, 0, 100, 100);

&nbsp;&nbsp;&nbsp;// Memory allocate
&nbsp;&nbsp;&nbsp;vd = calloc(1, sizeof(viewdata_s));
&nbsp;&nbsp;&nbsp;goto_if(!vd, ERROR);
&nbsp;&nbsp;&nbsp;ad-&gt;vd = vd;

&nbsp;&nbsp;&nbsp;// Set the label
&nbsp;&nbsp;&nbsp;vd-&gt;time = elm_label_add(grid);
&nbsp;&nbsp;&nbsp;goto_if(!vd-&gt;time, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_text_set(vd-&gt;time, &quot;&lt;font_size=105&gt;&lt;color=#ffffff&gt;00:00:00&lt;/color&gt;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(vd-&gt;time);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, vd-&gt;time, 2, 10, 100, 100);

&nbsp;&nbsp;&nbsp;vd-&gt;msec = elm_label_add(grid);
&nbsp;&nbsp;&nbsp;goto_if(!vd-&gt;msec, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_text_set(vd-&gt;msec, &quot;&lt;font_size=50&gt;&lt;color=#ffffff&gt;.00&lt;/color&gt;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(vd-&gt;msec);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, vd-&gt;msec, 85, 38, 100, 100);

&nbsp;&nbsp;&nbsp;// Stop the flag
&nbsp;&nbsp;&nbsp;vd-&gt;stopped = EINA_FALSE;

&nbsp;&nbsp;&nbsp;label = elm_label_add(grid);
&nbsp;&nbsp;&nbsp;goto_if(!label, ERROR);
&nbsp;&nbsp;&nbsp;elm_object_text_set(label, &quot;&lt;b&gt;&lt;font_size=22&gt;&lt;color=#a6a6a6&gt;Hour&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;&nbsp;&nbsp;Min&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sec&lt;/color&gt;&lt;/font_size&gt;&lt;/b&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(label);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, label, 10, 70, 100, 100);

&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, grid);

&nbsp;&nbsp;&nbsp;return box;
} 
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace;">stopwatch_button_clicked()</span> function checks the text on the button and calls the following functions:
<ul>
<li><span style="font-family: Courier New,Courier,monospace;">_stopwatch_start_cb()</span> function starts changing the display using the <span style="font-family: Courier New,Courier,monospace;">ecore_thread_feedback_run()</span> function.</li>
<li><span style="font-family: Courier New,Courier,monospace;">_stopwatch_stop_cb()</span> function stops changing the display using the <span style="font-family: Courier New,Courier,monospace;">ecore_thread_cancel()</span> and <span style="font-family: Courier New,Courier,monospace;">ecore_thread_check()</span> functions.</li> 
<li><span style="font-family: Courier New,Courier,monospace;">_stopwatch_lap_cb()</span> function appends a lap time to an <span style="font-family: Courier New,Courier,monospace;">elm_list</span> using the <span style="font-family: Courier New,Courier,monospace;">elm_list_item_append()</span> function.</li>
<li><span style="font-family: Courier New,Courier,monospace;">_stopwatch_reset_cb()</span> function resets the main view to the initial state.</li>
</ul>
<pre class="prettyprint">
extern void 
stopwatch_button_clicked(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;const char *str = NULL;
&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;

&nbsp;&nbsp;&nbsp;ret_if(!data);
&nbsp;&nbsp;&nbsp;ret_if(!obj);

&nbsp;&nbsp;&nbsp;ad = data;
&nbsp;&nbsp;&nbsp;str = elm_object_text_get(obj);

&nbsp;&nbsp;&nbsp;tizen_error_e result = TIZEN_ERROR_UNKNOWN;

&nbsp;&nbsp;&nbsp;if (str &amp;&amp; !strcmp(str, &quot;START&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = _stopwatch_start_cb(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retm_if(TIZEN_ERROR_NONE != result, &quot;Failed to stopwatch start: %d&quot;, result);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (str &amp;&amp; !strcmp(str, &quot;STOP&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = stopwatch_stop_cb(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retm_if(TIZEN_ERROR_NONE != result, &quot;Failed to stopwatch stop: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (str &amp;&amp; !strcmp(str, &quot;LAP&quot;) &amp;&amp; ad-&gt;start) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = _stopwatch_lap_cb(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retm_if(TIZEN_ERROR_NONE != result, &quot;Failed to stopwatch lap: %d&quot;, result);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = _stopwatch_reset_cb(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retm_if(TIZEN_ERROR_NONE != result, &quot;Failed to stopwatch reset: %d&quot;, result);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>The <span style="font-family: Courier New,Courier,monospace;">thread_job()</span> function uses the <span style="font-family: Courier New,Courier,monospace;">ecore_thread_feedback()</span> function to call the GUI functions from the main thread. The function that is used to handle the feedback simply sets the text of a label.
<p>To cancel a running thread, the <span style="font-family: Courier New,Courier,monospace;">thread_job()</span> function also uses the <span style="font-family: Courier New,Courier,monospace;">ecore_thread_check()</span> function to check whether a thread is pending cancellation, because the <span style="font-family: Courier New,Courier,monospace;">ecore_thread_feedback_run()</span> function can be used from the main loop.</p>
<pre class="prettyprint">
extern void 
thread_job(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = NULL;
&nbsp;&nbsp;&nbsp;viewdata_s *vd = NULL;
&nbsp;&nbsp;&nbsp;int iteration = 0;

&nbsp;&nbsp;&nbsp;ret_if(!data);
&nbsp;&nbsp;&nbsp;ret_if(!thread);

&nbsp;&nbsp;&nbsp;ad = data;
&nbsp;&nbsp;&nbsp;vd = ad-&gt;vd;

&nbsp;&nbsp;&nbsp;for (iteration = 0; ; iteration++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vd-&gt;elapsedTime = ecore_time_get() - vd-&gt;startTime;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_thread_feedback(thread, (void*)(uintptr_t)iteration);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;usleep(10000); // You can have some real computation done
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ecore_thread_check(thread)) break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>