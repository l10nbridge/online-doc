<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] MessageBubble Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] MessageBubble Sample Overview</h1> 
  

  <p>The [UI Sample] MessageBubble sample application demonstrates how you can make a complex view by recursive composition of standard EFL UI components and containers in a UI component hierarchy.</p> 
  
<p>It uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conform</span> and <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_box</span> and <span style="font-family: Courier New,Courier,monospace">elm_table</span> for UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span> and <span style="font-family: Courier New,Courier,monospace">elm_entry</span> for the content inside view.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  
  <p>The following figure illustrates the main screen of the MessageBuuble, its wireframe structure, and the UI component tree.</p>
  
  <p class="figure">Figure: [UI Sample] MessageBubble screen</p> 
  <p align="center"><img alt="[UI Sample] MessageBubble screen" src="../images/ui_messagebubble_sd.png" /></p>
  <p align="center"><img alt="[UI Sample] MessageBubble screen" src="../images/ui_messagebubble_tree.png" /></p>
  
  <p>The application opens with a chat screen. The user can enter a message and click <strong>SEND</strong> to send it.</p>
  
  <h2>Implementation</h2>
  
  <h3>Application Layout</h3>

  <p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function is responsible for creating the application layout. It starts by creating a window, then adds <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> to it to decorate the window with an indicator. <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> is added to act as a view manager of the window and provide the window title functionality. The main view is created using the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function and added to the naviframe.</p>

 
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *main_scroller, *bg;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_app_base_scale_set(1.8);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;nf, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Main view
&nbsp;&nbsp;&nbsp;main_scroller = create_main_view(ad);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(ad-&gt;nf, &quot;Message Bubble&quot;, NULL, NULL, main_scroller, NULL);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<h3>Main View</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function creates the main view content, the main scroller and main box. The main box contains 2 objects, a bubble scroller and an input field table. The scroller can be scrolled from the left-top to the left-bottom part of the screen.</p>

<pre class="prettyprint">static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *main_scroller, *input_field_table;

&nbsp;&nbsp;&nbsp;main_scroller = elm_scroller_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(main_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_scroller_origin_reverse_set(main_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(main_scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(main_scroller);

&nbsp;&nbsp;&nbsp;ad-&gt;main_box = elm_box_add(main_scroller);
&nbsp;&nbsp;&nbsp;elm_box_align_set(ad-&gt;main_box, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;main_box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;main_box);
</pre>

<p>A scroller is added to the main view, and a box structure to the scroller. The box is used for making a list of bubbles.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;ad-&gt;bubble_scroller = elm_scroller_add(ad-&gt;main_box);
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(ad-&gt;bubble_scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;bubble_scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;bubble_scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;ad-&gt;bubble_box = elm_box_add(ad-&gt;bubble_scroller);
&nbsp;&nbsp;&nbsp;elm_box_align_set(ad-&gt;bubble_box, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;bubble_box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;bubble_box);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(ad-&gt;bubble_box, ELM_SCALE_SIZE(10), ELM_SCALE_SIZE(15));

&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;bubble_scroller, ad-&gt;bubble_box);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;bubble_scroller);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(ad-&gt;main_box, ad-&gt;bubble_scroller);

</pre>

<p>An input field table is added to the main view using the <span style="font-family: Courier New,Courier,monospace">create_input_field_table(ad)</span> function. The input field table is a UI component containing buttons for entering and sending messages. This table is separate from the scroller.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;input_field_table = create_input_field_table(ad);
&nbsp;&nbsp;&nbsp;evas_object_show(input_field_table);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(ad-&gt;main_box, input_field_table);
&nbsp;&nbsp;&nbsp;elm_object_content_set(main_scroller, ad-&gt;main_box);
</pre>

<p>After the main elements of the MessageBubble are created, the application is ready to load saved messages. The following sample example uses sample messages.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;load_messages(ad);

&nbsp;&nbsp;&nbsp;return main_scroller;
}
</pre>

<p>Message bubbles are added using the <span style="font-family: Courier New,Courier,monospace">create_bubble_table()</span> function. This function creates a table container that includes 2 labels with a bubble background. To show the latest message at the bottom of the screen, use the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_start()</span> function. To show the last message on top, use the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> function. You can see the latest messages, when the messages are loaded.</p>
<p>If there are several messages to be loaded, use the <span style="font-family: Courier New,Courier,monospace">idler</span> callback to load messages.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">create_input_field_table(ad)</span> function creates the content of the view by composing a scroller structure that contains the screen elements. The scroller contains a box layout with the images.</p>

<pre class="prettyprint">
static void
load_messages(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bubble_table;

&nbsp;&nbsp;&nbsp;ad-&gt;total_messages = NUM_OF_SAMPLE_MESSAGES;
&nbsp;&nbsp;&nbsp;ad-&gt;num_of_bubbles = 0;
&nbsp;&nbsp;&nbsp;int count = ad-&gt;total_messages - 1;

&nbsp;&nbsp;&nbsp;while (count &gt;= 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubble_table = create_bubble_table(ad-&gt;bubble_box, count % 2 + 1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubble_messages[count],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bubble_times[count]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(bubble_table);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_box_pack_start(ad-&gt;bubble_box, bubble_table);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;num_of_bubbles++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count--;
&nbsp;&nbsp;&nbsp;}
}</pre>

<p>Create the layout with a table and button components using the <span style="font-family: Courier New,Courier,monospace">create_bubble_table()</span> function. The background is created as an Evas rectangle object, and its color is set with a rectangle object.</p>

<pre class="prettyprint">
static Evas_Object*
create_bubble_table(Evas_Object *parent, Message_Bubble_Style style, const char *main_text, const char *sub_text)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bubble_table, *button, *bg, *main_label, *sub_label;
&nbsp;&nbsp;&nbsp;Eina_Strbuf *strbuf = NULL;
&nbsp;&nbsp;&nbsp;char *buf = NULL;

&nbsp;&nbsp;&nbsp;bubble_table = elm_table_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(bubble_table, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;elm_table_padding_set(bubble_table, ELM_SCALE_SIZE(5), ELM_SCALE_SIZE(5));
&nbsp;&nbsp;&nbsp;evas_object_show(bubble_table);

&nbsp;&nbsp;&nbsp;button = elm_button_add(bubble_table);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;transparent&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;bg = evas_object_rectangle_add(evas_object_evas_get(button));
&nbsp;&nbsp;&nbsp;elm_object_content_set(button, bg);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(button, EVAS_CALLBACK_MOUSE_DOWN, bubble_button_mouse_down_cb, bg);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(button, EVAS_CALLBACK_MOUSE_UP, bubble_button_mouse_up_cb, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
</pre>

<p>Add 2 label components: </p>
<ul><li>Main label for the message</li>
<li>Sub-label for showing a timestamp</li>
</ul>
<p>Create 2 bubble components for the sender and receiver. The bubbles differ by their alignment, color, and position in the table.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;main_label = elm_label_add(bubble_table);
&nbsp;&nbsp;&nbsp;elm_object_text_set(main_label, buf);
&nbsp;&nbsp;&nbsp;elm_label_wrap_width_set(main_label, ELM_SCALE_SIZE(BUBBLE_TEXT_WIDTH));
&nbsp;&nbsp;&nbsp;elm_label_line_wrap_set(main_label, ELM_WRAP_MIXED);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(main_label, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(main_label, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_show(main_label);

&nbsp;&nbsp;&nbsp;sub_label = elm_label_add(bubble_table);
&nbsp;&nbsp;&nbsp;elm_object_text_set(sub_label, buf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(sub_label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_repeat_events_set(sub_label, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_show(sub_label);

&nbsp;&nbsp;&nbsp;switch (style) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case MESSAGE_BUBBLE_SENT:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(bubble_table, 1.0, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(sub_label, 1.0, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(bg, 200, 170, 100, 255);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, button, 0, 0, 1, 2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, main_label, 0, 0, 1, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, sub_label, 0, 1, 1, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case MESSAGE_BUBBLE_RECEIVE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(bubble_table, 0.0, 0.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(sub_label, 0.0, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(bg, 100, 170, 200, 255);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, button, 0, 0, 1, 2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, main_label, 0, 0, 1, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(bubble_table, sub_label, 0, 1, 1, 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case MESSAGE_BUBBLE_NONE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case MESSAGE_BUBBLE_LAST:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return bubble_table;
}
</pre>

<p>Add the table component, button component, and the rectangle object in the layout using the <span style="font-family: Courier New,Courier,monospace">create_input_field_table()</span> function.</p>

<pre class="prettyprint">
static Evas_Object*
create_input_field_table(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *table, *button, *bg;

&nbsp;&nbsp;&nbsp;table = elm_table_add(ad-&gt;main_box);
&nbsp;&nbsp;&nbsp;elm_table_homogeneous_set(table, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(table, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(table, EVAS_HINT_FILL, 1.0);
&nbsp;&nbsp;&nbsp;evas_object_show(table);</pre>

<p>Add another button and rectangle to show the background color of the new entry. The entry is added on multiple lines with a guide text. Add callback functions to change the background color, when the entry focus state changes.</p>

<pre class="prettyprint">&nbsp;&nbsp;&nbsp;button = elm_button_add(table);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;transparent&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;bg = evas_object_rectangle_add(evas_object_evas_get(button));
&nbsp;&nbsp;&nbsp;elm_object_content_set(button, bg);
&nbsp;&nbsp;&nbsp;evas_object_color_set(bg, 120, 220, 220, 255);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, button, 0, 0, 3, 2);
&nbsp;&nbsp;&nbsp;button = elm_button_add(table);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;transparent&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;bg = evas_object_rectangle_add(evas_object_evas_get(button));
&nbsp;&nbsp;&nbsp;elm_object_content_set(button, bg);
&nbsp;&nbsp;&nbsp;evas_object_color_set(bg, 0, 0, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, button, 0, 0, 2, 2);

&nbsp;&nbsp;&nbsp;ad-&gt;input_field_entry = elm_entry_add(table);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;input_field_entry, &quot;elm.guide&quot;, &quot;Enter Message&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;input_field_entry, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;input_field_entry, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;input_field_entry, &quot;focused&quot;, entry_focused_cb, bg);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;input_field_entry, &quot;unfocused&quot;, entry_unfocused_cb, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;input_field_entry);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, ad-&gt;input_field_entry, 0, 0, 2, 2);
</pre>

<p>Clicking the <strong>Send</strong> button appends a new bubble to the message bubble box. The button handler includes a callback for detecting button clicks.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;button = elm_button_add(table);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, 1.0, 1.0);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;SEND&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, send_button_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, button, 2, 1, 1, 1);

&nbsp;&nbsp;&nbsp;return table;
}

</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">send_message()</span> function is called when the user clicks the <strong>Send</strong> button. It reads the text from the entry field and inserts it in a message bubble. The bubble is appended to the bottom of bubble box using the <span style="font-family: Courier New,Courier,monospace">elm_box_pack_end()</span> function.</p>
<p>Displaying the message bubble requires detecting the height of the bubble box. This is done using the <span style="font-family: Courier New,Courier,monospace">elm_scroller_child_size_get()</span> function. After this, the scroller is moved to the bottom of the screen using the <span style="font-family: Courier New,Courier,monospace">elm_scroller_region_show()</span> function.</p>

<pre class="prettyprint">
static void
send_message(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;Evas_Object *bubble_table;
&nbsp;&nbsp;&nbsp;const char *main_text = NULL;

&nbsp;&nbsp;&nbsp;if (!ad-&gt;input_field_entry)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;main_text = elm_entry_entry_get(ad-&gt;input_field_entry);
&nbsp;&nbsp;&nbsp;if (!main_text || (strlen(main_text) == 0))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;bubble_table = create_bubble_table(ad-&gt;bubble_box, MESSAGE_BUBBLE_SENT,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_entry_entry_get(ad-&gt;input_field_entry),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;00:00 AM&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(bubble_table);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(ad-&gt;bubble_box, bubble_table);
&nbsp;&nbsp;&nbsp;ad-&gt;num_of_bubbles++;
&nbsp;&nbsp;&nbsp;ad-&gt;total_messages++;
&nbsp;&nbsp;&nbsp;elm_entry_entry_set(ad-&gt;input_field_entry, &quot;&quot;);
&nbsp;&nbsp;&nbsp;elm_scroller_child_size_get(ad-&gt;bubble_scroller, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;elm_scroller_region_show(ad-&gt;bubble_scroller, 0, h, 0, 0);
}</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>