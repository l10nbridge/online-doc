<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Bluetooth LE Collector Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
  </div>

<h1>Bluetooth LE Collector Sample Overview</h1>

<p>
The Bluetooth LE Collector sample application demonstrates how to discover remote advertisers and consume the data they broadcast over the Bluetooth Low Energy network. In order to achieve the goal,
the <a href="https://developer.tizen.org/dev-guide/2.4.0/org.tizen.native.mobile.apireference/group__CAPI__NETWORK__BLUETOOTH__ADAPTER__LE__MODULE.html">Bluetooth LE Adapter</a> API is used.
This sample application is able to discover any device which advertises itself in the Bluetooth LE network, but only the data provided by the
<a href="https://developer.tizen.org/development/sample/2.4/sample-mobile-applications">Bluetooth LE Service</a> can be consumed.
<br>
The general idea behind this sample application is to gather and display the health information broadcasted by the wearable device through the
<a href="https://developer.tizen.org/development/sample/2.4/sample-mobile-applications">Bluetooth LE Service</a>. There are two types of advertized information:
	<ul>
		<li>Heart Rate Measurement - the number of heart beats per second;</li>
		<li>Body Sensor Location - the point of heart rate measurement.</li>
	</ul>
</p>

<p>
The following figures illustrate the view of the application:
</p>

<p id="app-screenshot" class="figure">Figure: Bluetooth LE Collector application screens.</p>
<p align="center">
	<img alt="Initial view of the application" src="../images/bluetooth_le_collector_main_view_1.png" />
	<img alt="Devices discovery view" src="../images/bluetooth_le_collector_main_view_2.png" />
	<img alt="Detailed view of the selected device" src="../images/bluetooth_le_collector_main_view_3.png" />
	<img alt="Available services view" src="../images/bluetooth_le_collector_main_view_4.png" />
	<img alt="Heart Rate service view" src="../images/bluetooth_le_collector_main_view_5.png" />
	<img alt="Body Sensor Location view" src="../images/bluetooth_le_collector_main_view_6.png" />
</p>

<p>
The application's workflow can be divided into five major pipelines:
	<ol>
		<li>application's initialization;</li>
		<li>devices discovery;</li>
		<li>discovered device's details acquisition and browsing;</li>
		<li>discovered device's service data acquisition and display;</li>
		<li>application's termination.</li>
	</ol>
The first 4 features are delivered to the user via the UI (<a href="#app-screenshot">Bluetooth LE Collector application screens</a>) and briefly described by the figure below.
</p>

<p id="app-screenshot" class="figure">Figure: Application's workflow.</p>
<p align="center">
	<img alt="Application's workflow" width="70%" src="../images/bluetooth_le_collector_workflow_sd.png" />
</p>

<h2>Prerequisites</h2>

<p>
To ensure proper service execution, <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/bluetooth</span> privilege must be set.
</p>

<h2>Implementation</h2>

<p>
The entire application's workflow is described in subsections below.
</p>

<h3 id="init-terminate">Application's initialization and termination</h3>

<p>
The application is initialized on application's startup with <span style="font-family: Courier New,Courier,monospace">controller_create()</span> function invoked from the
<span style="font-family: Courier New,Courier,monospace">create</span> callback assigned in the <span style="font-family: Courier New,Courier,monospace">main()</span> function.
</p>

<pre class="prettyprint">
bool controller_create(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;vd->scan_start_cb = __scan_start_request_cb;
&nbsp;&nbsp;&nbsp;vd->scan_cancel_cb = __scan_cancel_request_cb;
&nbsp;&nbsp;&nbsp;vd->peer_select_cb = __peer_select_request_cb;

&nbsp;&nbsp;&nbsp;if (!view_main_create(vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (__is_feature_supported(FEATURE_BLUETOOTH)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (__is_feature_supported(FEATURE_BLUETOOTH_LE)) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!__init()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__set_state(VS_DEACTIVE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_main_display_message("Bluetooth activation error.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_main_display_message("Bluetooth Low Energy is not supported.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_main_display_message("Bluetooth is not supported.");
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
At the beginning, the following callback functions responsible for handling requests from the UI are assigned:
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">__scan_start_request_cb()</span> - starts Bluetooth LE network scanning; is called on "Scan" button tap;</li>
		<li><span style="font-family: Courier New,Courier,monospace">__scan_cancel_request_cb()</span> - cancels Bluetooth LE network scanning; is called on "Cancel" button tap;</li>
		<li><span style="font-family: Courier New,Courier,monospace">__peer_select_request_cb()</span> - selects the advertiser's device for its detailed information acquisition;
			is called on remote device selection from the list of available advertisers.</li>
	</ul>
Next, the application's main view is created with <span style="font-family: Courier New,Courier,monospace">view_main_create()</span> function which is not described here as it is not the subject of this
document. Afterwards, the availability of Bluetooth and Bluetooth LE features is checked using <span style="font-family: Courier New,Courier,monospace">__is_feature_supported()</span> function with
<span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth</span> and
<span style="font-family: Courier New,Courier,monospace">http://tizen.org/feature/network.bluetooth.le</span> arguments, respectively. If the Bluetooth related features' verification is passed,
the Bluetooth adapter is initialized with the <span style="font-family: Courier New,Courier,monospace">__init()</span> function. Otherwise, an appropriate error message is displayed and the UI is updated
with <span style="font-family: Courier New,Courier,monospace">__set_state()</span> function.
</p>

<pre class="prettyprint">
static bool __init(void)
{
&nbsp;&nbsp;&nbsp;bool is_enabled = false;

&nbsp;&nbsp;&nbsp;if (bt_init()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_set_callbacks(__bt_device_state_changed_cb, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bt_get_state(&is_enabled);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (is_enabled)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__set_state(VS_ACTIVE);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>
The <span style="font-family: Courier New,Courier,monospace">__init()</span> function initializes the Bluetooth adapter and sets
<span style="font-family: Courier New,Courier,monospace">__bt_device_state_changed_cb()</span> callback function for its state change handling (updating the UI to reflect the current adapter's state).
Finally, the Bluetooth adapter's state is verified with <span style="font-family: Courier New,Courier,monospace">bt_get_state()</span> function to acknowledge its successful initialization.
At the end, the UI is updated with the <span style="font-family: Courier New,Courier,monospace">__set_state()</span> function.
</p>

<p>
At the end of the application's lifecycle, the <span style="font-family: Courier New,Courier,monospace">controller_terminate()</span> function is invoked from the
<span style="font-family: Courier New,Courier,monospace">terminate</span> callback assigned in the <span style="font-family: Courier New,Courier,monospace">main()</span> function.
</p>

<pre class="prettyprint">
void controller_terminate(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;bt_unset_callbacks();
&nbsp;&nbsp;&nbsp;bt_deinit();
&nbsp;&nbsp;&nbsp;view_main_destroy(vd);
&nbsp;&nbsp;&nbsp;model_free();
}
</pre>

<p>
The application's termination procedure is very simple and relies on Bluetooth adapter deinitialization (<span style="font-family: Courier New,Courier,monospace">bt_deinit()</span>), allocated
resources cleaning (<span style="font-family: Courier New,Courier,monospace">bt_unset_callbacks()</span>, <span style="font-family: Courier New,Courier,monospace">model_free()</span>)
and view destroying (<span style="font-family: Courier New,Courier,monospace">view_main_destroy()</span>).
</p>

<p>
For undescribed function's reference, see the <a href="#reference">Reference</a> section.
</p>


<!--
<h3 id="reference">Reference</h3>
__scan_start_request_cb
__scan_cancel_request_cb
__peer_select_request_cb

__is_feature_supported
__set_state
bt_init
bt_deinit
bt_set_callbacks
bt_unset_callbacks
bt_get_state
model_free
view_main_destroy
-->

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
