<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Power Manager Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Power Manager Sample Overview</h1>

<p>The Power Manager sample application demonstrates how you can monitor and change device settings, such as battery level, screen brightness, Wi-Fi, GPS, and Bluetooth, using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__FRAMEWORK.html">System</a> and <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APP__CONTROL__MODULE.html">App Control</a> APIs.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the Power Manager.</p>
<p class="figure">Figure: Power Manager screen</p>
	<p align="center"><img alt="Power Manager sample app main view" src="../images/power_manager_main_view.png" /> <img alt="Battery level dropped" src="../images/power_manager_battery_lower.png" /> <img alt="Power Saving mode on" src="../images/power_manager_power_mode_on.png" /></p>

	<p align="center"><img alt="Switch off settings" src="../images/power_manager_turn_off_settings.png" /> <img alt="Switch on settings" src="../images/power_manager_turn_on_settings.png" /> <img alt="Device is charging" src="../images/power_manager_device_charging.png" /></p>
<p>The application screen (top left in the above figure) is divided into 3 parts:</p>
	<ul>
		<li>Device status
			<p>At the top of the screen, a panel displays the battery percentage and level (empty/critical/low/high), whether the device is charging, and whether the Wi-Fi, Bluetooth, and GPS features are switched on.</p>
		</li>
		<li>Battery warning level
		<p>In the middle of the screen, the user can use a slider to set the battery warning level. When the battery level drops below it, a popup is displayed (top center in the above figure).</p>

		</li>
		<li>Power Saving mode
		<p>At the bottom of the screen, the user can enable or disable the Power Saving mode.</p>
		<p>When the user switches the Power Saving mode on (top right in the above figure), the following device settings are changed to reduce power consumption:</p>
		<ul>
			<li>Display brightness is changed to low (20%).</li>
			<li>Wi-Fi is automatically switched off.</li>
			<li>The user is advised to switch Bluetooth and GPS off. If the user agrees to do it, the Settings application is launched.</li>
		</ul>
		<p>When the user switches the Power Saving mode off, reverse actions take place: the display brightness is changed to full (100%), Wi-Fi is switched on, and the user is advised to switch Bluetooth and GPS on.</p>
		<p>The Power Saving mode change can cause 3 different popups to be displayed (bottom row in the above figure):</p>
		<ul>
			<li>When the user switches the Power Saving mode on, if Bluetooth or GPS is on, a popup offers to launch the Settings application to switch those power consuming features off.
			</li>
			<li>When the user switches the Power Saving mode off, if Bluetooth or GPS is off, a popup offers to launch the Settings application to switch those features on.
			</li>
			<li>If the device is charging and the user tries to enable the Power Saving mode, a popup explains that the mode is not available while charging.
			</li>
		</ul>		
		</li>
	</ul>


<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
 <li>To read the Wi-Fi status:
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.get</span></li>
  </ul>
  </li>
  <li>To set the Wi-Fi status:
  <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.set</span></li>
  </ul>
  </li>
  <li>To launch the Settings application:
  <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
  </ul>
  </li>
  <li>To change the display brightness:
  <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/display</span></li>
  </ul>
  </li>
  </ul>


<h2>Implementation</h2>

<h3>Acquiring Device Information</h3>

<p>You can acquire the following device information:</p>
<ul>
<li>Runtime information
<p>Use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__RUNTIME__INFO__MODULE.html">Runtime information</a> API to obtain the following runtime information:</p>
<ul>
	<li>Battery charging status (<span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BATTERY_IS_CHARGING</span>)</li>
	<li>Bluetooth status (<span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BLUETOOTH_ENABLED</span>)</li>
	<li>GPS status (<span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED</span>)</li>
</ul>

<p>In addition to this information, acquire the Wi-Fi status using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__NETWORK__WIFI__MODULE.html">Wi-Fi</a> API: initialize the Wi-Fi module with the <span style="font-family: Courier New,Courier,monospace">wifi_initialize()</span> function, and acquire the Wi-Fi status with the <span style="font-family: Courier New,Courier,monospace">wifi_is_activated()</span> function.</p>

<pre class="prettyprint">
bool 
dev_manager_get_runtime_info(bool *charging, bool *bluetooth_on, bool *wifi_on, bool *gps_on)
{
&nbsp;&nbsp;&nbsp;if (charging) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*charging = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runtime_info_get_value_bool(RUNTIME_INFO_KEY_BATTERY_IS_CHARGING, charging) != RUNTIME_INFO_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get runtime info: battery is charging&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_CHARGING] = *charging;

&nbsp;&nbsp;&nbsp;if (bluetooth_on) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*bluetooth_on = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runtime_info_get_value_bool(RUNTIME_INFO_KEY_BLUETOOTH_ENABLED, bluetooth_on) != RUNTIME_INFO_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get runtime info: bluetooth enabled&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_BLUETOOTH] = *bluetooth_on;

&nbsp;&nbsp;&nbsp;if (wifi_on) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*wifi_on = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wifi_initialize() != WIFI_ERROR_NONE || wifi_is_activated(wifi_on) != WIFI_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get runtime info: wifi enabled&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_WIFI] = *wifi_on;

&nbsp;&nbsp;&nbsp;if (gps_on) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*gps_on = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runtime_info_get_value_bool(RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED, gps_on) != RUNTIME_INFO_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get runtime info: gps enabled&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_GPS] = *gps_on;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Battery information
<p>Obtain the battery information using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__DEVICE__BATTERY__MODULE.html">Battery</a> API. Use the <span style="font-family: Courier New,Courier,monospace">device_battery_get_percent()</span> function to get the battery level in a form of a percentage and the <span style="font-family: Courier New,Courier,monospace">device_battery_get_level_status()</span> function to get the battery level status.</p>
<p>The API defines 5 battery levels:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">DEVICE_BATTERY_LEVEL_EMPTY</span> (&lt;2%)</li>
	<li><span style="font-family: Courier New,Courier,monospace">DEVICE_BATTERY_LEVEL_CRITICAL</span> (2-5%)</li>
	<li><span style="font-family: Courier New,Courier,monospace">DEVICE_BATTERY_LEVEL_LOW</span> (6-15%)</li>
	<li><span style="font-family: Courier New,Courier,monospace">DEVICE_BATTERY_LEVEL_HIGH</span> (16-95%)</li>
	<li><span style="font-family: Courier New,Courier,monospace">DEVICE_BATTERY_LEVEL_FULL</span> (&gt;95%)</li>
</ul>

<pre class="prettyprint">
int 
dev_manager_get_battery_percent(void)
{
&nbsp;&nbsp;&nbsp;int percent = -1;

&nbsp;&nbsp;&nbsp;if (device_battery_get_percent(&amp;percent) != DEVICE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get battery percentage&quot;);

&nbsp;&nbsp;&nbsp;return percent;
}

char *dev_manager_get_battery_level(void)
{
&nbsp;&nbsp;&nbsp;device_battery_level_e status = DEVICE_BATTERY_LEVEL_EMPTY;

&nbsp;&nbsp;&nbsp;if (device_battery_get_level_status(&amp;status) != DEVICE_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get battery level&quot;);

&nbsp;&nbsp;&nbsp;return __format_battery_level_string(status);
}
</pre>
</li>
</ul>

<h3>Setting Relevant Callbacks</h3>

<p>To monitor changes in the relevant device settings and battery state, set runtime information and device information callbacks:</p>

<ul>
<li>Runtime information callbacks

<p>To monitor relevant runtime information, the <span style="font-family: Courier New,Courier,monospace">runtime_info_set_changed_cb()</span> function is used.</p>
<p>The function registers a change event callback for a specific runtime information key. In this case, callbacks are set for the <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BLUETOOTH_ENABLED</span>, <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED</span>, and <span style="font-family: Courier New,Courier,monospace">RUNTIME_INFO_KEY_BATTERY_IS_CHARGING</span> keys.</p>

<pre class="prettyprint">
bool 
dev_manager_set_runtime_info_callbacks(changed_setting_cb changed_cb)
{
&nbsp;&nbsp;&nbsp;if (runtime_info_set_changed_cb(RUNTIME_INFO_KEY_BLUETOOTH_ENABLED, __runtime_cb, changed_cb) != RUNTIME_INFO_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_info_set_changed_cb(RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED, __runtime_cb, changed_cb) != RUNTIME_INFO_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_info_set_changed_cb(RUNTIME_INFO_KEY_BATTERY_IS_CHARGING, __runtime_cb, changed_cb) != RUNTIME_INFO_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to set runtime callbacks&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>When a change event is detected, the <span style="font-family: Courier New,Courier,monospace">__runtime_cb()</span> callback is invoked with the runtime information key type as a parameter. The new runtime information is used to update the application UI using the <span style="font-family: Courier New,Courier,monospace">changed_cb()</span> function, and the relevant setting value is stored internally.</p>

<pre class="prettyprint">
static void 
__runtime_cb(runtime_info_key_e key, void *user_data)
{
&nbsp;&nbsp;&nbsp;bool val = false;
&nbsp;&nbsp;&nbsp;changed_setting_cb changed_cb;

&nbsp;&nbsp;&nbsp;if (!user_data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get cb func&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;changed_cb = (changed_setting_cb)user_data;

&nbsp;&nbsp;&nbsp;switch (key) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_KEY_BLUETOOTH_ENABLED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_info_get_value_bool(RUNTIME_INFO_KEY_BLUETOOTH_ENABLED, &amp;val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_BLUETOOTH] = val;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed_cb(SETTINGS_BLUETOOTH, settings_on[SETTINGS_BLUETOOTH]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_info_get_value_bool(RUNTIME_INFO_KEY_LOCATION_SERVICE_ENABLED, &amp;val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_GPS] = val;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed_cb(SETTINGS_GPS, settings_on[SETTINGS_GPS]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case RUNTIME_INFO_KEY_BATTERY_IS_CHARGING:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runtime_info_get_value_bool(RUNTIME_INFO_KEY_BATTERY_IS_CHARGING, &amp;val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;settings_on[SETTINGS_CHARGING] = val;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;changed_cb(SETTINGS_CHARGING, settings_on[SETTINGS_CHARGING]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>Device information callbacks

<p>To be notified about battery state changes, the <span style="font-family: Courier New,Courier,monospace">device_add_callback()</span> function is invoked for the <span style="font-family: Courier New,Courier,monospace">DEVICE_CALLBACK_BATTERY_CAPACITY</span> (battery level percentage) and <span style="font-family: Courier New,Courier,monospace">DEVICE_CALLBACK_BATTERY_LEVEL</span> (battery level status) callback types.</p>

<pre class="prettyprint">
bool 
dev_manager_set_device_callbacks(changed_bat_percentage_cb percentage_cb, changed_bat_level_cb level_cb)
{
&nbsp;&nbsp;&nbsp;if (device_add_callback(DEVICE_CALLBACK_BATTERY_CAPACITY, __bat_changed_cb, percentage_cb) != DEVICE_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device_add_callback(DEVICE_CALLBACK_BATTERY_LEVEL, __bat_changed_cb, level_cb) != DEVICE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to set device callbacks&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">__bat_changed_cb()</span> callback gets the callback type (<span style="font-family: Courier New,Courier,monospace">device_callback_e</span>) as a parameter, and uses it to update the application UI accordingly.</p>

<pre class="prettyprint">
static void 
__bat_changed_cb(device_callback_e type, void *value, void *user_data)
{
&nbsp;&nbsp;&nbsp;changed_bat_percentage_cb percentage_cb;
&nbsp;&nbsp;&nbsp;changed_bat_level_cb level_cb;
&nbsp;&nbsp;&nbsp;int val = (int)value;

&nbsp;&nbsp;&nbsp;if (!user_data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get cb func&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;switch (type) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case DEVICE_CALLBACK_BATTERY_CAPACITY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;percentage_cb = (changed_bat_percentage_cb)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;percentage_cb(val);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case DEVICE_CALLBACK_BATTERY_LEVEL:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level_cb = (changed_bat_level_cb)user_data;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;level_cb(__format_battery_level_string((device_battery_level_e)val));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>
<h3>Setting Display Brightness</h3>

<p>When the Power Saving mode is enabled, the application changes the display brightness using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SYSTEM__DEVICE__DISPLAY__MODULE.html">Display</a> API:</p>

<pre class="prettyprint">
bool 
dev_manager_power_mode_set_brightness(Eina_Bool to_low)
{
&nbsp;&nbsp;&nbsp;int max = 0;
&nbsp;&nbsp;&nbsp;int percent = to_low ? BRIGHTNESS_LEVEL_LOW : BRIGHTNESS_LEVEL_FULL;

&nbsp;&nbsp;&nbsp;if (device_display_get_max_brightness(0, &amp;max) != DEVICE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to get max brightness&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (device_display_set_brightness(0, (int)percent*max/100) != DEVICE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to set brightness&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3>Switching Settings On and Off</h3>

<p>To reduce power consumption in the Power Saving mode, you can switch the most power consuming settings off. Wi-Fi deactivation is done automatically using the <span style="font-family: Courier New,Courier,monospace">wifi_deactivate()</span> function.</p>

<pre class="prettyprint">
bool 
dev_manager_power_mode_settings_off(Eina_Bool turn_off)
{
&nbsp;&nbsp;&nbsp;if (turn_off) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (settings_on[SETTINGS_WIFI] &amp;&amp; wifi_deactivate(NULL, NULL) != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to deactivate Wi-Fi&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (settings_on[SETTINGS_GPS])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_setting_location_app();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (settings_on[SETTINGS_BLUETOOTH])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_bluetooth_app();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (settings_on[SETTINGS_WIFI] &amp;&amp; wifi_activate(NULL, NULL) != WIFI_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to activate Wi-Fi&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!settings_on[SETTINGS_GPS])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_setting_location_app();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!settings_on[SETTINGS_BLUETOOTH])
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_bluetooth_app();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>Regular applications cannot change the state of GPS or Bluetooth directly. Instead, to allow the user to change the state manually, you must launch the relevant module of the Settings application using the App Control API with the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/edit</span> operation:</p>
<ul><li>In case of Bluetooth, set <span style="font-family: Courier New,Courier,monospace">application/x-bluetooth-on-off</span> explicitly as the MIME type of the data to be edited.</li>
<li>In case of GPS settings, set <span style="font-family: Courier New,Courier,monospace">org.tizen.setting-location</span> as the application ID.</li></ul>

<pre class="prettyprint">
static void 
__launch_bluetooth_app(void)
{
&nbsp;&nbsp;&nbsp;app_control_h service = NULL;

&nbsp;&nbsp;&nbsp;app_control_create(&amp;service);
&nbsp;&nbsp;&nbsp;if (!service) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create app control handle&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;app_control_set_operation(service, &quot;http://tizen.org/appcontrol/operation/edit&quot;);
&nbsp;&nbsp;&nbsp;app_control_set_mime(service, &quot;application/x-bluetooth-on-off&quot;);

&nbsp;&nbsp;&nbsp;if (app_control_send_launch_request(service, NULL, NULL) != APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to launch Bluetooth On/Off app&quot;);

&nbsp;&nbsp;&nbsp;app_control_destroy(service);
}

static void 
__launch_setting_location_app(void)
{
&nbsp;&nbsp;&nbsp;app_control_h service = NULL;

&nbsp;&nbsp;&nbsp;app_control_create(&amp;service);
&nbsp;&nbsp;&nbsp;if (!service) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to create app control handle&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;app_control_set_operation(service, &quot;http://tizen.org/appcontrol/operation/edit&quot;);
&nbsp;&nbsp;&nbsp;app_control_set_app_id(service, &quot;org.tizen.setting-location&quot;);

&nbsp;&nbsp;&nbsp;if (app_control_send_launch_request(service, NULL, NULL) != APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to launch Location Settings app&quot;);

&nbsp;&nbsp;&nbsp;app_control_destroy(service);
}
</pre>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>