<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Sync Adapter App Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
</div>

<h1>Sync Adapter App Sample Overview</h1>
<p>The Sync Adapter App sample demonstrates how you can add different sync requests to the sync manager to schedule data synchronization tasks.</p>
<p>The following figure illustrates the home screen of the application.</p>
	<p class="figure">Figure: Sync Adapter App home screen view</p>
	<p align="center"><img alt="Sync Adapter App home screen view" src="../images/syncadapterapp_mainscreen.png" />
</p>
<p>The application opens with the main screen, which displays a list of Sync Adapter App features:</p>
<ul>
	<li>To create an account, click <strong>Create an account</strong>.</li>
	<li>To set the sync in the accountless mode, click <strong>Set as accountless</strong>.</li>
	<li>To request all sync jobs with corresponding settings, click <strong>Start sync with settings</strong>.</li>
	<li>To get and remove all registered sync jobs, click <strong>Manage sync jobs</strong>.</li>
</ul>

<p>The application uses the <span style="font-family: Courier New,Courier,monospace">libaccounts-svc</span> module to work with the accounts database and the <span style="font-family: Courier New,Courier,monospace">elementary</span> module to support the UI requirements.</p>

<h2>Prerequisites</h2>
<ul>
<li>Sync Adapter App&#39;s app ID must be <span style="font-family: Courier New,Courier,monospace">org.tizen.syncadapterapp.ui</span>, because the Sync Adapter Service App uses this ID as a fixed value when it communicates with the Sync Adapter App UI application. Otherwise, the application control communication does not operate properly.
<p>In addition, the Sync Adapter App package name must be <span style="font-family: Courier New,Courier,monospace">org.tizen.syncadapterapp</span> (same as the Sync Adapter Service App).</p></li>
<li>The Sync Adapter App and Sync Adapter Service App packages must be coupled during the build process. To couple the packages:
<ol><li>On the Tizen IDE, right-click the Sync Adapter App project and select <strong>Properties</strong>.</li>
<li>Select <strong>Project References</strong> and find <strong>Sync Adapter Service App</strong>.</li>
<li>Select the <strong>Sync Adapter Service App</strong> check box and click <strong>OK</strong>.</li></ol>
<p>In the <strong>Project Explorer</strong> view, a <strong>with the Sync Adapter App</strong> message appears next to the Sync Adapter Service App project name showing that you have coupled it successfully.</p></li>
<li>
<p>To ensure proper application execution, the following privileges must be set:</p>
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/account.read</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/account.write</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/alarm.set</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/calendar.read</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.read</span></li>
</ul>
</li>
</ul>

<h2>Implementation</h2>

<h3>Application Initialization</h3>

<p>To initialize the application:</p>

<ol>
<li>Launch the Sync Adapter Service App, which acts as a sync adapter to this UI application. The service application must be built and included along with the Sync Adapter App UI application in the package.
<p>The <span style="font-family: Courier New,Courier,monospace">SYNC_ADAPTER_SERVICE_APP_ID</span> must be defined as the App ID of the service application which acts as a sync adapter. For more information, see <a href="syncadapterserviceapp_sd_mn.htm">Sync Adapter Service App Sample Overview</a>.</p>
<pre class="prettyprint">
#define SYNC_ADAPTER_SERVICE_APP_ID &quot;org.tizen.syncadapterapp.service&quot;

static void
create_sync_main_menu(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;app_control_h app_control;
&nbsp;&nbsp;&nbsp;int ret = app_control_create(&amp;app_control);
&nbsp;&nbsp;&nbsp;if (ret != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Creating app_control handle failed [%s]&quot;, get_error_message(ret));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = app_control_set_app_id(app_control, SYNC_ADAPTER_SERVICE_APP_ID);
&nbsp;&nbsp;&nbsp;if (ret != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Setting app id failed [%s]&quot;, get_error_message(ret));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = app_control_send_launch_request(app_control, NULL, NULL);
&nbsp;&nbsp;&nbsp;if (ret == APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Launching sync service app successfully [%s]&quot;, SYNC_ADAPTER_SERVICE_APP_ID);
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Launching sync service app failed [%s]&quot;, get_error_message(ret));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>If you click <strong>Start Sync</strong> on the Start sync with settings screen without selecting an account mode, the Sync Request API cannot deliver the request, and a popup text is shown at the bottom of the screen (on the left in the following figure).<p>You must first create an account or set up as accountless on the main screen. Afterwards, you can add sync jobs with the account mode you selected.</p>

<p align="center"><img alt="Select account" src="../images/syncadapterapp_choice_account.png"/> <img alt="Create account" src="../images/syncadapterapp_create_account.png"/> <img alt="Set as accountless" src="../images/syncadapterapp_set_accountless.png"/></p>

<ul><li>
<p>Click <strong>Create an account</strong> to create a dummy account and pass it to the Sync Manager API (the result is shown in the middle in the above figure). Enable sync support on the account.</p>
<pre class="prettyprint">
static void
create_account()
{
&nbsp;&nbsp;&nbsp;account_id = 10;

&nbsp;&nbsp;&nbsp;int ret = account_create(&amp;account);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_create = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_set_user_name(account, &quot;dummy_user&quot;);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_set_user_name = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_set_email_address(account, &quot;dummy_user@syncadapterapp.com&quot;);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_set_email_address = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_set_capability(account, ACCOUNT_SUPPORTS_CAPABILITY_CALENDAR, ACCOUNT_CAPABILITY_ENABLED);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_set_capability = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_set_capability(account, ACCOUNT_SUPPORTS_CAPABILITY_CONTACT, ACCOUNT_CAPABILITY_ENABLED);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_set_capability = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_set_sync_support(account, ACCOUNT_SYNC_STATUS_IDLE);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account_set_sync_support = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;ret = account_insert_to_db(account, &amp;account_id);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Account id is = %d&quot;, account_id);

&nbsp;&nbsp;&nbsp;is_accountless = false;
}</pre>
</li>

<li>Click <strong>Set as accountless</strong> to set up the sync manager without an account (the result is shown on the right in the above figure):
<pre class="prettyprint">
static void
set_accountless()
{
&nbsp;&nbsp;&nbsp;int ret = ACCOUNT_ERROR_NONE;

&nbsp;&nbsp;&nbsp;ret = account_delete_from_db_by_package_name(PKG_NAME);
&nbsp;&nbsp;&nbsp;if (ret == ACCOUNT_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account delete success&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (account) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = account_destroy(account);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret == ACCOUNT_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;account handle is removed successfully&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;account_id = -1;
&nbsp;&nbsp;&nbsp;is_accountless = true;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Dummy account is set again as = %d&quot;, account_id);
}
</pre>
</li></ul></li>

</ol>

<h3>On Demand Sync</h3>
<p>To request an on demand sync:</p>
<p class="figure">Figure: On Demand Sync</p>
<p align="center"><img alt="On Demand Sync" src="../images/syncadapterapp_ondemand.png"/> <img alt="On Demand Sync" src="../images/syncadapterapp_ondemand_sync.png"/></p>
 
<ol>
<li>To perform an on demand sync, select <strong>On Demand Sync</strong> as the <strong>Sync types</strong> on the Start sync with settings screen. Click <strong>Start Sync</strong> to trigger the corresponding sync manager functions:
<pre class="prettyprint">
static void
cb_add_on_demand_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s* viewData = pData;

&nbsp;&nbsp;&nbsp;bundle *sync_job_user_data = NULL;
&nbsp;&nbsp;&nbsp;sync_job_user_data = bundle_create();
&nbsp;&nbsp;&nbsp;bundle_add_str(sync_job_user_data, "option", displayed_option);

&nbsp;&nbsp;&nbsp;int ret = SYNC_ERROR_NONE;

&nbsp;&nbsp;&nbsp;if (is_accountless) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request accountless On Demand Sync&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_on_demand_sync_job(NULL, &quot;OnDemand&quot;, sync_option, sync_job_user_data, &amp;on_demand_sync_job_id);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request On Demand Sync with an account&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_user_name(query_account_cb, &quot;dummy_user&quot;, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_h account;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_create(&amp;account);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_account_id(account_id, &amp;account);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewData-&gt;account_id = account_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_on_demand_sync_job(account, &quot;OnDemand&quot;, sync_option, sync_job_user_data, &amp;on_demand_sync_job_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_destroy(account);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (ret != SYNC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync manager failed with error code %d&quot;, ret);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;sync manager added on demand sync id %d&quot;, on_demand_sync_job_id);
}</pre>
</li>

<li>When the sync manager schedules a sync job for this request, the sync callbacks in the Sync Adapter Service App are invoked.
<p>When the sync job is completed, the service application communicates the same information to the Sync Adapter App UI application using an application control. The UI application shows a popup to notify the user about the status.</p>

<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *operation;
&nbsp;&nbsp;&nbsp;int ret = app_control_get_operation(app_control, &amp;operation);
&nbsp;&nbsp;&nbsp;if (ret != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;failed to get operation&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;get operation: [%s]&quot;, operation);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Job completed by sync-service&quot;);

&nbsp;&nbsp;&nbsp;if (strcmp(operation, &quot;http://tizen.org/appcontrol/operation/default&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win = NF;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup = elm_popup_add(win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (operation &amp;&amp; !strcmp(operation, &quot;http://tizen.org/appcontrol/operation/on_demand_sync_complete&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;On Demand Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(popup, &quot;On Demand Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_timeout_set(popup, TIME_FOR_POPUP);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(popup);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
</ol>

<h3>Periodic Sync</h3>

<p>To request a periodic sync:</p>
<p class="figure">Figure: Periodic Sync</p>
<p align="center"> <img alt="Periodic Sync" src="../images/syncadapterapp_periodic.png"/> <img alt="Periodic Sync" src="../images/syncadapterapp_periodic_sync.png"/></p>

<ol>
<li>To perform a periodic sync, select <strong>Periodic Sync</strong> as the <strong>Sync types</strong> on the Start sync with settings screen. Click <strong>Start Sync</strong> to trigger the corresponding sync manager functions:

<pre class="prettyprint">
static void
cb_add_periodic_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s* viewData = pData;

&nbsp;&nbsp;&nbsp;bundle *sync_job_user_data = NULL;
&nbsp;&nbsp;&nbsp;sync_job_user_data = bundle_create();
&nbsp;&nbsp;&nbsp;bundle_add_str(sync_job_user_data, "interval", displayed_interval);

&nbsp;&nbsp;&nbsp;int ret = SYNC_ERROR_NONE;

&nbsp;&nbsp;&nbsp;if (is_accountless) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request accountless Periodic Sync&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_add_periodic_sync_job(NULL, &quot;Periodic&quot;, sync_interval, sync_option, sync_job_user_data, &amp;periodic_sync_job_id);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request Periodic Sync with an account&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_user_name(query_account_cb, &quot;dummy_user&quot;, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_h account;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_create(&amp;account);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_account_id(account_id, &amp;account);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewData-&gt;account_id = account_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_add_periodic_sync_job(account, &quot;Periodic&quot;, sync_interval, sync_option, sync_job_user_data, &amp;periodic_sync_job_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_destroy(account);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if ((sync_option == SYNC_OPTION_NONE) | (sync_option == SYNC_OPTION_NO_RETRY)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win = NF;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup = elm_popup_add(win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sync_interval == SYNC_PERIOD_INTERVAL_30MIN)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(popup, &quot;It is expected in 30mins&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_timeout_set(popup, TIME_FOR_POPUP);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(popup);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (ret != SYNC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync manager failed with error code %d&quot;, ret);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;sync manager added periodic sync id %d&quot;, periodic_sync_job_id);
}
</pre>
</li>


<li>When the sync manager schedules a sync job for this request, the sync callback functions in the Sync Adapter Service App are invoked periodically. When the job is completed, the service application communicates the same information to the Sync Adapter App UI application by using an application control. The UI application shows a popup to notify the user about the status.
<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *operation;
&nbsp;&nbsp;&nbsp;int ret = app_control_get_operation(app_control, &amp;operation);
&nbsp;&nbsp;&nbsp;if (ret != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;failed to get operation&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;get operation: [%s]&quot;, operation);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Job completed by sync-service&quot;);
 
&nbsp;&nbsp;&nbsp;if (strcmp(operation, &quot;http://tizen.org/appcontrol/operation/default&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win = NF;
 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup = elm_popup_add(win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (operation &amp;&amp; !strcmp(operation, &quot;http://tizen.org/appcontrol/operation/periodic_sync_complete&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Periodic Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(popup, &quot;Periodic Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_timeout_set(popup, TIME_FOR_POPUP);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(popup);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
</ol>

<h3>Data Change Sync</h3>

<p>To request a data change sync:</p>
<p class="figure">Figure: Data Change Sync</p>
<p align="center"><img alt="Data Change Sync" src="../images/syncadapterapp_datachange.png"/> <img alt="Data Change Sync" src="../images/syncadapterapp_datachange_sync.png"/> <img alt="Data Change Sync" src="../images/syncadapterapp_datachange_event.png"/></p>

<ol>
<li>To perform a data change sync, select <strong>Data Change Sync</strong> as the <strong>Sync types</strong> on the Start sync with settings screen. Click <strong>Start Sync</strong> to trigger the corresponding sync manager functions:
<pre class="prettyprint">
static void
cb_add_data_change_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
&nbsp;&nbsp;&nbsp;viewdata_s* viewData = pData;

&nbsp;&nbsp;&nbsp;int ret = SYNC_ERROR_NONE;
&nbsp;&nbsp;&nbsp;int idx = 0;

&nbsp;&nbsp;&nbsp;if (is_accountless) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request accountless Data Change Sync&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; NUM_OF_CAPABILITY; idx++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_change_id[idx] == -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_add_data_change_sync_job(NULL, sync_capability, sync_option, NULL, &amp;data_change_sync_job_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_change_id[idx] = data_change_sync_job_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;[accountless] restored data_change_id[%d] = %d&quot;, idx, data_change_id[idx]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idx == NUM_OF_CAPABILITY-1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;data_change_id[idx] is full&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Adapter App: request Data Change Sync with an account&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_user_name(query_account_cb, &quot;dummy_user&quot;, NULL);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_h account;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_create(&amp;account);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_query_account_by_account_id(account_id, &amp;account);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;viewData-&gt;account_id = account_id;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; NUM_OF_CAPABILITY; idx++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_change_id[idx] == -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = sync_manager_add_data_change_sync_job(account, sync_capability, sync_option, NULL, &amp;data_change_sync_job_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_change_id[idx] = data_change_sync_job_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;[account] restored data_change_id[%d] = %d&quot;, idx, data_change_id[idx]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (idx == NUM_OF_CAPABILITY-1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;data_change_id[idx] is full&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;account_destroy(account);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (ret != SYNC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync manager failed with error code %d&quot;, ret);
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_change_sync_job_id != -1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;sync manager added data change sync id %d&quot;, data_change_sync_job_id);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>The sync manager stores the data change sync request. Whenever there is a change in the corresponding database (selected through <strong>Capability types</strong>), the sync manager schedules a sync job for the data. Sync callback functions in Sync Adapter Service App are invoked accordingly. 
<p>When the upload of the sync job is completed, the service application communicates the same information to the Sync Adapter App UI application using an application control. The UI application shows a popup to notify the user about the status.</p>
<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *operation;
&nbsp;&nbsp;&nbsp;int ret = app_control_get_operation(app_control, &amp;operation);
&nbsp;&nbsp;&nbsp;if (ret != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;failed to get operation&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;get operation: [%s]&quot;, operation);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Sync Job completed by sync-service&quot;);

&nbsp;&nbsp;&nbsp;if (strcmp(operation, &quot;http://tizen.org/appcontrol/operation/default&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *popup;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Object *win = NF;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;popup = elm_popup_add(win);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (operation &amp;&amp; !strcmp(operation, &quot;http://tizen.org/appcontrol/operation/data_change_sync_complete&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Data Change Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(popup, &quot;Data Change Sync is completed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_popup_timeout_set(popup, TIME_FOR_POPUP);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(popup);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
</ol>


<h3>Getting All Sync Jobs</h3>

<p>To query all sync jobs requested by the Sync Adapter App, click <strong>Manage sync jobs</strong> in the main screen.</p>

<p class="figure">Figure: Get all sync jobs</p>
<p align="center"><img alt="Foreach Sync Jobs" src="../images/syncadapterapp_manage_sync_jobs.png"/></p>

<p>The corresponding sync manager functions are called:</p>
<pre class="prettyprint">
bool
sync_adapter_sample_foreach_sync_job_cb(account_h account, const char *sync_job_name, const char *sync_capability, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int sync_job_id, bundle* sync_job_user_data, void *user_data)
{
&nbsp;&nbsp;&nbsp;char sync_job_info[MAX_SIZE];
&nbsp;&nbsp;&nbsp;memset(sync_job_info, 0, sizeof(sync_job_info));

&nbsp;&nbsp;&nbsp;char* value = NULL;

&nbsp;&nbsp;&nbsp;if (sync_job_name) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!strcmp(sync_job_name, &quot;OnDemand&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_get_str(sync_job_user_data, "option", &amp;value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on_demand_sync_job_id = sync_job_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(sync_job_info, &quot;[%d] %s %s&quot;, sync_job_id, strdup(sync_job_name), strdup(value));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;[%d] %s %s&quot;, sync_job_id, sync_job_name, displayed_option);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (!strcmp(sync_job_name, &quot;Periodic&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_get_str(sync_job_user_data, "interval", &amp;value);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;periodic_sync_job_id = sync_job_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(sync_job_info, &quot;[%d] %s %s&quot;, sync_job_id, strdup(sync_job_name), strdup(value));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;[%d] %s %s&quot;, sync_job_id, sync_job_name, displayed_interval);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;on_demand_sync_job_id = -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (sync_capability) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!strcmp(sync_capability, SYNC_SUPPORTS_CAPABILITY_CALENDAR))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sprintf(sync_job_info, &quot;[%d] Data Change for %s&quot;, sync_job_id, strdup(&quot;Calendar&quot;));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;[%d] DataChange&quot;, sync_job_id);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (cnt_sync_jobs == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;

&nbsp;&nbsp;&nbsp;int idx, temp_idx = 0;

&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; MAX_NUM; idx++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (list_of_sync_jobs[idx][0] == &#39;\0&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove_sync_job[idx] = sync_job_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;temp_idx = idx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;strcpy(list_of_sync_jobs[temp_idx], sync_job_info);
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;copy to list_of_sync_jobs[%d]: %s&quot;, temp_idx, list_of_sync_jobs[temp_idx]);

&nbsp;&nbsp;&nbsp;cnt_sync_jobs++;

&nbsp;&nbsp;&nbsp;return true;
}

void
on_manage_sync_jobs_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int ret = sync_manager_foreach_sync_job(sync_adapter_sample_foreach_sync_job_cb, NULL);

&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; MAX_NUM; idx++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (list_of_sync_jobs[idx][0] != &#39;\0&#39;)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;after copying to list_of_sync_jobs[%d]: %s&quot;, idx, list_of_sync_jobs[idx]);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;itc = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;itc-&gt;item_style = &quot;type1&quot;;
&nbsp;&nbsp;&nbsp;itc-&gt;func.content_get = get_content_registered_sync_jobs;
&nbsp;&nbsp;&nbsp;itc-&gt;func.text_get = get_text_registered_sync_jobs;
&nbsp;&nbsp;&nbsp;itc-&gt;func.del = gl_del_cb;

&nbsp;&nbsp;&nbsp;n_items = cnt_sync_jobs;

&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; n_items; idx++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach_id = calloc(sizeof(list_item_data_s), 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach_id-&gt;type = 6;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach_id-&gt;index = idx;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it = elm_genlist_item_append(genlist, itc, foreach_id, NULL, ELM_GENLIST_ITEM_TREE, NULL, nf);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;foreach_id-&gt;item = it;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(genlist, &quot;selected&quot;, genlist_selected_cb, NULL);
&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(itc);

&nbsp;&nbsp;&nbsp;NF = nf;

&nbsp;&nbsp;&nbsp;if (ret == SYNC_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(genlist);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Error %d&quot;, ret);
}
</pre>

<h3>Removing All Sync Jobs</h3>

<p>To remove registered sync jobs requested by the Sync Adapter App, select the sync jobs to be removed on the Manage sync jobs screen and click <strong>Remove</strong>.</p> 

<p class="figure">Figure: Removing sync jobs</p>
<p align="center"><img alt="Removing sync jobs" src="../images/syncadapterapp_manage_sync_jobs_select.png"/></p>

<p>The corresponding sync manager functions are called:</p>

<pre class="prettyprint">
void
on_remove_selected_sync_jobs_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int idx, idx2;

&nbsp;&nbsp;&nbsp;for (idx = 0; idx &lt; cnt_sync_jobs; idx++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (list_of_remove_sync_job[idx]) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sync_manager_remove_sync_job(remove_sync_job[idx]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list_of_remove_sync_job[idx] = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (idx2 = 0; idx2 &lt; NUM_OF_CAPABILITY; idx2++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data_change_id[idx2] == remove_sync_job[idx]) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_change_id[idx2] = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;remove_sync_job[idx] = -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;on_demand_sync_job_id = -1;
&nbsp;&nbsp;&nbsp;periodic_sync_job_id = -1;

&nbsp;&nbsp;&nbsp;if (is_all_checked) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;memset(data_change_id, -1, sizeof(data_change_id));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Evas_Object *nf = data;
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop(nf);
&nbsp;&nbsp;&nbsp;on_manage_sync_jobs_cb(data, obj, event_info);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
