<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Sync Adapter App Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
</div>



<h1>Sync Adapter App Sample Overview</h1>
<p>The application opens with the <strong>Sync Adapter App</strong> screen, which displays a list of Sync Adapter App features.</p>
<p>The following figure illustrates the home screen of the application.</p>
	<p class="figure">Figure: Sync Adapter App home screen view</p>
	<p align="center"><img alt="sync adapter home screen view" src="../images/syncadapterapp_mainscreen.png" />
</p>
<ul>
	<li>To create an account, click <strong>Create an account</strong></li>
	<li>To set as accountless mode, click <strong>Set as accountless</strong></li>
	<li>To request all sync jobs with corresponding settings, click <strong>Start sync with settings</strong></li>
	<li>To get and remove all registered sync jobs, click <strong>Manage sync jobs</strong></li>
</ul>
<p>The application uses the <span style="font-family: Courier New,Courier,monospace">libaccounts-svc</span> module to work with the accounts database and the <span style="font-family: Courier New,Courier,monospace">elementary</span> module to support the UI requirements.</p>



<h2>Prerequisites</h2>
<ol>
<li>To ensure proper application execution, the following privileges must be set:
<ul>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/account.read</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/account.write</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/alarm.set</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/calendar.read</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.read</span></li>
</ul>
</li>
<li>Launch the Sync Adapter Service App which acts as a sync adapter to this UI application. The service application must be built and included along with Sync Adapter App into the package. SYNC_ADAPTER_SERVICE_APP_ID must be assigned as the app id of service application which acts as sync adapter.
<br>Please refer <a href="./syncadapterserviceapp_sd_mn.htm">Sync Adapter Service App</a> for reference.
<pre class="prettyprint">
#define SYNC_ADAPTER_SERVICE_APP_ID "org.tizen.syncadapterapp.service"

static void
create_sync_main_menu(appdata_s *ad)
{
	app_control_h app_control;
	int ret = app_control_create(&amp;app_control);
	if (ret != APP_CONTROL_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "Creating app_control handle is failed [%s]", get_error_message(ret));
		return;
	}

	ret = app_control_set_app_id(app_control, SYNC_ADAPTER_SERVICE_APP_ID);
	if (ret != APP_CONTROL_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "Setting app id is failed [%s]", get_error_message(ret));
		return;
	}

	ret = app_control_send_launch_request(app_control, NULL, NULL);
	if (ret == APP_CONTROL_ERROR_NONE)
		dlog_print(DLOG_INFO, LOG_TAG, "Launching sync service app successfully [%s]", SYNC_ADAPTER_SERVICE_APP_ID);
	else {
		dlog_print(DLOG_INFO, LOG_TAG, "Launching sync service app is failed [%s]", get_error_message(ret));
		return;
	}
	...
	...
}</pre>
</li>
<li>If starting any sync jobs without setting account mode, sync request API can not be delivered. So, first of all, create an account or set as accountless.
<p class="figure">Figure: Choice account mode</p>
<p align="center"><img alt="Choice Account" src="../images/syncadapterapp_choice_account.png"/> <img alt="Create Account" src="../images/syncadapterapp_create_account.png"/> <img alt="Set Accountless" src="../images/syncadapterapp_set_accountless.png"/></p>
<p>If you clicked "Create an account", you can create a dummy account for passing it to sync manager API. Enable sync support on the account.</p>
<pre class="prettyprint">
static void
create_account()
{
	account_id = 10;

	int ret = account_create(&amp;account);
	dlog_print(DLOG_INFO, LOG_TAG, "account_create = %d", ret);

	ret = account_set_user_name(account, "dummy_user");
	dlog_print(DLOG_INFO, LOG_TAG, "account_set_user_name = %d", ret);

	ret = account_set_email_address(account, "dummy_user@syncadapterapp.com");
	dlog_print(DLOG_INFO, LOG_TAG, "account_set_email_address = %d", ret);

	ret = account_set_capability(account, ACCOUNT_SUPPORTS_CAPABILITY_CALENDAR, ACCOUNT_CAPABILITY_ENABLED);
	dlog_print(DLOG_INFO, LOG_TAG, "account_set_capability = %d", ret);

	ret = account_set_capability(account, ACCOUNT_SUPPORTS_CAPABILITY_CONTACT, ACCOUNT_CAPABILITY_ENABLED);
	dlog_print(DLOG_INFO, LOG_TAG, "account_set_capability = %d", ret);

	ret = account_set_sync_support(account, ACCOUNT_SYNC_STATUS_IDLE);
	dlog_print(DLOG_INFO, LOG_TAG, "account_set_sync_support = %d", ret);

	ret = account_insert_to_db(account, &amp;account_id);
	dlog_print(DLOG_INFO, LOG_TAG, "Account id is = %d", account_id);

	is_accountless = false;
}</pre>
</li>
<li>If you clicked "Set as accountless", you can set as accountless without an account to sync manager API.
<pre class="prettyprint">
static void
set_accountless()
{
	int ret = ACCOUNT_ERROR_NONE;

	ret = account_delete_from_db_by_package_name(PKG_NAME);
	if (ret == ACCOUNT_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "account delete success");
		if (account) {
			ret = account_destroy(account);
			if (ret == ACCOUNT_ERROR_NONE)
			dlog_print(DLOG_INFO, LOG_TAG, "account handle is removed successfully");
		}
	}

	account_id = -1;
	is_accountless = true;

	dlog_print(DLOG_INFO, LOG_TAG, "Dummy account is set again as = %d", account_id);
}
</li>
</ol>



<h2>On Demand Sync</h2>
<p class="figure">Figure: On Demand Sync</p>
<p align="center"><img alt="On Demand" src="../images/syncadapterapp_ondemand.png"/> <img alt="On Demand Sync" src="../images/syncadapterapp_ondemand_sync.png"/></p>

<h3>Request On Demand Sync</h3>
<ol>
<li>To perform On Demand Sync, select <strong>On Demand Sync</strong> from <strong>Start sync with settings</strong>. Click on <strong>Start Sync</strong> button which will trigger corresponding sync manager API as shown below.
<pre class="prettyprint">
static void
cb_add_on_demand_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
	viewdata_s* viewData = pData;

	int ret = SYNC_ERROR_NONE;
	if (is_accountless) {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request accountless On Demand Sync");
		ret = sync_manager_on_demand_sync_job(NULL, "OnDemand", sync_option, NULL, &amp;on_demand_sync_job_id);
	} else {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request On Demand Sync with an account");
		account_query_account_by_user_name(query_account_cb, "dummy_user", NULL);

		account_h account;
		account_create(&amp;account);
		account_query_account_by_account_id(account_id, &amp;account);

		viewData-&gt;account_id = account_id;

		ret = sync_manager_on_demand_sync_job(account, "OnDemand", sync_option, NULL, &amp;on_demand_sync_job_id);

		account_destroy(account);
	}

	if (ret != SYNC_ERROR_NONE)
		dlog_print(DLOG_INFO, LOG_TAG, "Sync manager failed with error code %d", ret);
	else
		dlog_print(DLOG_INFO, LOG_TAG, "sync manager added on demand sync id %d", on_demand_sync_job_id);
}</pre>
</li>


<li>Once, the sync manager schedules a sync job for this request, sync callback functions in Sync Adapter Service App will be invoked. Upon completion of the sync job, the service application will communicate the same to Sync Adapter App by using app_control with its operation. Also, the Sync Adapter App will show a popup to notify the user about the status.
<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
	char *operation;
	int ret = app_control_get_operation(app_control, &amp;operation);
	if (ret != APP_CONTROL_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "failed to get operation");
		return;
	} else
		dlog_print(DLOG_INFO, LOG_TAG, "get operation: [%s]", operation);

	dlog_print(DLOG_INFO, LOG_TAG, "Sync Job completed by sync-service");

	if (strcmp(operation, "http://tizen.org/appcontrol/operation/default")) {
		Evas_Object *popup;
		Evas_Object *win = NF;

		popup = elm_popup_add(win);
		elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
		eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
		evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

		if (operation &amp;&amp; !strcmp(operation, "http://tizen.org/appcontrol/operation/on_demand_sync_complete")) {
			dlog_print(DLOG_INFO, LOG_TAG, "On Demand Sync is completed");
			elm_object_text_set(popup, "On Demand Sync is completed");
		}
		...
		...

		elm_popup_timeout_set(popup, TIME_FOR_POPUP);
		evas_object_show(popup);
	}

	return;
}</pre>
</li>
</ol>



<h2>Periodic Sync</h2>
<p class="figure">Figure: Periodic Sync</p>
<p align="center"><img alt="Periodic" src="../images/syncadapterapp_periodic.png"/> <img alt="Periodic Sync" src="../images/syncadapterapp_periodic_sync.png"/></p>

<h3>Request Periodic Sync</h3>
<ol>
<li>To perform Periodic Sync, select <strong>Periodic Sync</strong> from <strong>Start sync with settings</strong>. Click on <strong>Sync</strong> button which will trigger corresponding sync manager API as shown below.
<pre class="prettyprint">
static void
cb_add_periodic_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
	viewdata_s* viewData = pData;
	int ret = SYNC_ERROR_NONE;

	if (is_accountless) {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request accountless Periodic Sync");
		ret = sync_manager_add_periodic_sync_job(NULL, "Periodic", sync_interval, sync_option, NULL, &amp;periodic_sync_job_id);
	} else {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request Periodic Sync with an account");
		account_query_account_by_user_name(query_account_cb, "dummy_user", NULL);

		account_h account;
		account_create(&amp;account);
		account_query_account_by_account_id(account_id, &amp;account);

		viewData-&gt;account_id = account_id;

		ret = sync_manager_add_periodic_sync_job(account, "Periodic", sync_interval, sync_option, NULL, &amp;periodic_sync_job_id);

		account_destroy(account);
	}

	if ((sync_option == SYNC_OPTION_NONE) | (sync_option == SYNC_OPTION_NO_RETRY)) {
		Evas_Object *popup;
		Evas_Object *win = NF;

		popup = elm_popup_add(win);
		elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
		eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
		evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

		if (sync_interval == SYNC_PERIOD_INTERVAL_30MIN)
			elm_object_text_set(popup, "It is expected in 30mins");
		...
		...

		elm_popup_timeout_set(popup, TIME_FOR_POPUP);
		evas_object_show(popup);
	}

	if (ret != SYNC_ERROR_NONE)
		dlog_print(DLOG_INFO, LOG_TAG, "Sync manager failed with error code %d", ret);
	else
		dlog_print(DLOG_INFO, LOG_TAG, "sync manager added periodic sync id %d", periodic_sync_job_id);
}</pre>
</li>


<li>Once, the sync manager schedules a sync job for this request, sync callback functions in Sync Adapter Service App will be invoked periodically. Upon completion of the sync job, the service application will communicate the same to Sync Adapter App by using app_control with its operation. Also, the Sync Adapter App will show a popup to notify the user about the status.
<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
	char *operation;
	int ret = app_control_get_operation(app_control, &amp;operation);
	if (ret != APP_CONTROL_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "failed to get operation");
		return;
	} else
		dlog_print(DLOG_INFO, LOG_TAG, "get operation: [%s]", operation);

	dlog_print(DLOG_INFO, LOG_TAG, "Sync Job completed by sync-service");

	if (strcmp(operation, "http://tizen.org/appcontrol/operation/default")) {
		Evas_Object *popup;
		Evas_Object *win = NF;

		popup = elm_popup_add(win);
		elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
		eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
		evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

		...
		else if (operation &amp;&amp; !strcmp(operation, "http://tizen.org/appcontrol/operation/periodic_sync_complete")) {
			dlog_print(DLOG_INFO, LOG_TAG, "Periodic Sync is completed");
			elm_object_text_set(popup, "Periodic Sync is completed");
		}
		...

		elm_popup_timeout_set(popup, TIME_FOR_POPUP);
		evas_object_show(popup);
	}

	return;
}</pre>
</li>
</ol>



<h2>Data Change Sync</h2>
<p class="figure">Figure: Data Change Sync</p>
<p align="center"><img alt="Data Change" src="../images/syncadapterapp_datachange.png"/> <img alt="Data Change Sync" src="../images/syncadapterapp_datachange_sync.png"/> <img alt="Data Change Event" src="../images/syncadapterapp_datachange_event.png"/></p>

<h3>Request Data Change Sync</h3>
<ol>
<li>To perform Data Change Sync, select <strong>Data Change Sync</strong> from <strong>Start sync with settings</strong>. Click on <strong>ContactSync</strong> button which will trigger corresponding sync manager API as shown below.
<pre class="prettyprint">
static void
cb_add_data_change_sync(void* pData, Evas_Object* pObj, void* pEvent_info)
{
	viewdata_s* viewData = pData;
	int ret = SYNC_ERROR_NONE;
	int idx = 0;

	if (is_accountless) {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request accountless Data Change Sync");

		for (idx = 0; idx &lt; NUM_OF_CAPABILITY; idx++) {
			if (data_change_id[idx] == -1) {
				ret = sync_manager_add_data_change_sync_job(NULL, sync_capability, sync_option, NULL, &data_change_sync_job_id);
				data_change_id[idx] = data_change_sync_job_id;
				dlog_print(DLOG_INFO, LOG_TAG, "[accountless] restored data_change_id[%d] = %d", idx, data_change_id[idx]);
				break;
			} else {
				if (idx == NUM_OF_CAPABILITY-1) {
					dlog_print(DLOG_INFO, LOG_TAG, "data_change_id[idx] is full");
					break;
				}
				continue;
			}
		}
	} else {
		dlog_print(DLOG_INFO, LOG_TAG, "Sync Adapter App: request Data Change Sync with an account");
		account_query_account_by_user_name(query_account_cb, "dummy_user", NULL);

		account_h account;
		account_create(&amp;account);
		account_query_account_by_account_id(account_id, &amp;account);

		viewData-&gt;account_id = account_id;

		for (idx = 0; idx &lt; NUM_OF_CAPABILITY; idx++) {
			if (data_change_id[idx] == -1) {
				ret = sync_manager_add_data_change_sync_job(account, sync_capability, sync_option, NULL, &amp;data_change_sync_job_id);
				data_change_id[idx] = data_change_sync_job_id;
				dlog_print(DLOG_INFO, LOG_TAG, "[account] restored data_change_id[%d] = %d", idx, data_change_id[idx]);
				break;
			} else {
				if (idx == NUM_OF_CAPABILITY-1) {
					dlog_print(DLOG_INFO, LOG_TAG, "data_change_id[idx] is full");
					break;
				}
				continue;
			}
		}
		account_destroy(account);
	}

	if (ret != SYNC_ERROR_NONE)
		dlog_print(DLOG_INFO, LOG_TAG, "Sync manager failed with error code %d", ret);
	else {
		if (data_change_sync_job_id != -1)
			dlog_print(DLOG_INFO, LOG_TAG, "sync manager added data change sync id %d", data_change_sync_job_id);
	}
}</pre>
</li>


<li>The sync manager stores the data change sync request. Whenever there is a change in corresponding db which is selected through <strong>Capability types</strong>, sync manager schedules a sync job for the data. Sync callback functions in Sync Adapter Service App will be invoked accordingly. Upon completion of the upload sync job, the service application will communicate the same to Sync Adapter App by using app_control with its operation. Also, the Sync Adapter App will show a popup to notify the user about the status.
<pre class="prettyprint">
static void
app_control(app_control_h app_control, void *data)
{
	char *operation;
	int ret = app_control_get_operation(app_control, &amp;operation);
	if (ret != APP_CONTROL_ERROR_NONE) {
		dlog_print(DLOG_INFO, LOG_TAG, "failed to get operation");
		return;
	} else
		dlog_print(DLOG_INFO, LOG_TAG, "get operation: [%s]", operation);

	dlog_print(DLOG_INFO, LOG_TAG, "Sync Job completed by sync-service");

	if (strcmp(operation, "http://tizen.org/appcontrol/operation/default")) {
		Evas_Object *popup;
		Evas_Object *win = NF;

		popup = elm_popup_add(win);
		elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);
		eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
		evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

		...
		...
		else if (operation &amp;&amp; !strcmp(operation, "http://tizen.org/appcontrol/operation/data_change_sync_complete")) {
			dlog_print(DLOG_INFO, LOG_TAG, "Data Change Sync is completed");
			elm_object_text_set(popup, "Data Change Sync is completed");
		}

		elm_popup_timeout_set(popup, TIME_FOR_POPUP);
		evas_object_show(popup);
	}

	return;
}</pre>
</li>
</ol>



<h2>Foreach sync jobs</h2>
<p class="figure">Figure: Foreach sync jobs</p>
<p align="center"><img alt="Foreach Sync Jobs" src="../images/syncadapterapp_manage_sync_jobs.png"/></p>

<h3>Request to get all sync jobs</h3>
<li>To query the sync jobs requested by the Sync Adapter App, select <strong>Manage sync jobs</strong> from home screen view. The corresponding sync manager API will be called as shown below.
<pre class="prettyprint">
bool
sync_adapter_sample_foreach_sync_job_cb(account_h account, const char *sync_job_name, const char *sync_capability, int sync_job_id, bundle* sync_job_user_data, void *user_data)
{
	char sync_job_info[MAX_SIZE];
	memset(sync_job_info, 0, sizeof(sync_job_info));

	if (sync_job_name) {
		if (!strcmp(sync_job_name, "OnDemand")) {
			on_demand_sync_job_id = sync_job_id;
			sprintf(sync_job_info, "[%d] %s %s", sync_job_id, strdup(sync_job_name), strdup(displayed_option));
			dlog_print(DLOG_INFO, LOG_TAG, "[%d] %s %s", sync_job_id, sync_job_name, displayed_option);
		} else if (!strcmp(sync_job_name, "Periodic")) {
			periodic_sync_job_id = sync_job_id;
			sprintf(sync_job_info, "[%d] %s %s", sync_job_id, strdup(sync_job_name), strdup(displayed_interval));
			dlog_print(DLOG_INFO, LOG_TAG, "[%d] %s %s", sync_job_id, sync_job_name, displayed_interval);
		}
		on_demand_sync_job_id = -1;
	} else if (sync_capability) {
		if (!strcmp(sync_capability, SYNC_SUPPORTS_CAPABILITY_CALENDAR))
			sprintf(sync_job_info, "[%d] Data Change for %s", sync_job_id, strdup("Calendar"));
		...
		...
		dlog_print(DLOG_INFO, LOG_TAG, "[%d] DataChange", sync_job_id);
	} else if (cnt_sync_jobs == 0)
		return true;

	int idx, temp_idx = 0;

	for (idx = 0; idx &lt; MAX_NUM; idx++) {
		if (list_of_sync_jobs[idx][0] == '\0') {
			remove_sync_job[idx] = sync_job_id;
			temp_idx = idx;
			break;
		}
	}
	strcpy(list_of_sync_jobs[temp_idx], sync_job_info);
	dlog_print(DLOG_INFO, LOG_TAG, "copy to list_of_sync_jobs[%d] : %s", temp_idx, list_of_sync_jobs[temp_idx]);

	cnt_sync_jobs ++;

	return true;
}

...
...

void
on_manage_sync_jobs_cb(void *data, Evas_Object *obj, void *event_info)
{
	...
	...

	int ret = sync_manager_foreach_sync_job(sync_adapter_sample_foreach_sync_job_cb, NULL);

	for (idx = 0; idx &lt; MAX_NUM; idx++) {
		if (list_of_sync_jobs[idx][0] != '\0')
			dlog_print(DLOG_INFO, LOG_TAG, "after copying to list_of_sync_jobs[%d] : %s", idx, list_of_sync_jobs[idx]);
	}

	itc = elm_genlist_item_class_new();
	itc-&gt;item_style = "type1";
	itc-&gt;func.content_get = get_content_registered_sync_jobs;
	itc-&gt;func.text_get = get_text_registered_sync_jobs;
	itc-&gt;func.del = gl_del_cb;

	n_items = cnt_sync_jobs;

	for (idx = 0; idx &lt; n_items; idx++) {
		foreach_id = calloc(sizeof(list_item_data_s), 1);
		foreach_id-&gt;type = 6;
		foreach_id-&gt;index = idx;

		it = elm_genlist_item_append(genlist, itc, foreach_id, NULL, ELM_GENLIST_ITEM_TREE, NULL, nf);

		foreach_id-&gt;item = it;
	}

	evas_object_smart_callback_add(genlist, "selected", genlist_selected_cb, NULL);
	elm_genlist_item_class_free(itc);

	NF = nf;

	if (ret == SYNC_ERROR_NONE)
		evas_object_show(genlist);
	else
		dlog_print(DLOG_INFO, LOG_TAG, "Error %d", ret);

	...
	...
}</pre>
</li>



<h2>Remove sync jobs</h2>
<p class="figure">Figure: Remove sync jobs</p>
<p align="center"><img alt="Remove Sync Jobs" src="../images/syncadapterapp_manage_sync_jobs_select.png"/></p>

<h3>Request to remove sync jobs</h3>
<li>To remove registered sync jobs requested by the Sync Adapter App, select check of each sync job from <strong>Manage sync jobs</strong>. Once clicking <strong>Remove</strong> button, checked sync job will be removed. The corresponding sync manager API will be called as shown below.
<pre class="prettyprint">
void
on_remove_selected_sync_jobs_cb(void *data, Evas_Object *obj, void *event_info)
{
	int idx, idx2;

	for (idx = 0; idx &lt; cnt_sync_jobs; idx++) {
		if (list_of_remove_sync_job[idx]) {
			sync_manager_remove_sync_job(remove_sync_job[idx]);
			list_of_remove_sync_job[idx] = false;
			for (idx2 = 0; idx2 &lt; NUM_OF_CAPABILITY; idx2++) {
				if (data_change_id[idx2] == remove_sync_job[idx]) {
					data_change_id[idx2] = -1;
					break;
				}
			}
			remove_sync_job[idx] = -1;
		}
	}

	on_demand_sync_job_id = -1;
	periodic_sync_job_id = -1;

	if (is_all_checked) {
		memset(data_change_id, -1, sizeof(data_change_id));
	}

	Evas_Object *nf = data;
	elm_naviframe_item_pop(nf);
	on_manage_sync_jobs_cb(data, obj, event_info);
}</pre>
</li>
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
