<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>TTS Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>TTS Sample Overview</h1> 

<p>The TTS sample application demonstrates how you can use the TTS (Text-To-Speech) feature in your application or service.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screens of the TTS.</p>

<p class="figure">Figure: TTS screens</p> 
<p align="center"><img alt="TTS sample application view" src="../images/tts_sample_view.png" /></p> 

<p>In the application, the user can set the language and voice type of text, and add the text to be read aloud. Because the application stores the added text information, the user can view the number of added texts and a text list. To request play, pause or stop, use the applicable buttons.</p>

<h2>Implementation</h2>

<p>To implement the TTS application:</p>
<ol>
<li>Create the layout for the application.
<p>This sample application uses native UI components (including a genlist and entry), and the <span style="font-family: Courier New,Courier,monospace;">appdata_s</span> structure and some global values (including the <span style="font-family: Courier New,Courier,monospace;">GList *g_tts_text_list</span>) to manage the UI component implementation. However, this topic concentrates on how to use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__UIX__TTS__MODULE.html">TTS</a> API and not the UI components. For more information on UI component usage, see the <a href="ui_components_sd_mn.htm">UI Components</a> sample application.</p>
</li>

<li>Initialize TTS.
<p>At the application startup, the <span style="font-family: Courier New,Courier,monospace;">init_tts()</span> function creates the TTS handle and sets the callback functions for the state change and utterance completed events (for additional callbacks, see the TTS API). Then the application obtains the default TTS voice (language and voice type) and connects to the TTS service.</p>

<p>The <span style="font-family: Courier New,Courier,monospace;">__tts_utterance_completed_cb()</span> function is called when the reading for each added text is finished. At that point, the application removes the text from the added text list.</p>

<pre class="prettyprint">
static void 
__tts_state_changed_cb(tts_h tts, tts_state_e previous, tts_state_e current, void* user_data) {}

static void 
__tts_utterance_completed_cb(tts_h tts, int utt_id, void* user_data) {}

static int 
init_tts(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Create TTS handle
&nbsp;&nbsp;&nbsp;if (0 != tts_create(&amp;g_tts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Set state changed callback
&nbsp;&nbsp;&nbsp;if (0 != tts_set_state_changed_cb(g_tts, __tts_state_changed_cb, ad))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tts_destroy(g_tts);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Set utterance completed callback
&nbsp;&nbsp;&nbsp;if (0 != tts_set_utterance_completed_cb(g_tts, __tts_utterance_completed_cb, ad))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tts_destroy(g_tts);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Get default voice
&nbsp;&nbsp;&nbsp;char *language = NULL;
&nbsp;&nbsp;&nbsp;int voice_type;
&nbsp;&nbsp;&nbsp;if (0 != tts_get_default_voice(g_tts, &amp;language, &amp;voice_type))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tts_destroy(g_tts);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (NULL != language)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(language);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Connect to TTS service
&nbsp;&nbsp;&nbsp;if (0 != tts_prepare(g_tts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tts_destroy(g_tts);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>

<p>When the TTS feature is no longer needed, call the <span style="font-family: Courier New,Courier,monospace;">deinit_tts()</span> function to disconnect the service and destroy the handle.</p>
<p>If you want to only disconnect the service but not destroy the handle, use the <span style="font-family: Courier New,Courier,monospace;">tts_unprepare()</span> function.</p>

<pre class="prettyprint">
static voice 
deinit_tts(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Destroy TTS handle (service disconnect is included)
&nbsp;&nbsp;&nbsp;if (0 != tts_destroy(g_tts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Get the supported voice list.
<p>The application shows the supported TTS voice list when the <strong>Select Voice</strong> item is clicked. The <span style="font-family: Courier New,Courier,monospace;">__voice_item_selected_cb()</span> function is the callback for the click event, and the <span style="font-family: Courier New,Courier,monospace;">__show_voice_list()</span> function calls the <span style="font-family: Courier New,Courier,monospace;">tts_foreach_supported_voices()</span> function for get the supported voice list.</p>

<pre class="prettyprint">
static bool 
__tts_supported_voice_cb(const char* engine_id, const char* language, int voice_type, void* user_data)
{
&nbsp;&nbsp;&nbsp;// If you want to continue to get next supported voice
&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;// If you want to stop
&nbsp;&nbsp;&nbsp;return false;
}

static void 
__show_voice_list(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;if (0 != tts_foreach_supported_voices(g_tts, __tts_supported_voice_cb, ad))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;}
}

static void 
__voice_item_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;
&nbsp;&nbsp;&nbsp;__show_voice_list(ad);
}
</pre>
</li>

<li>Add the text with the current voice.
<p>When the user clicks <strong>Add text</strong>, the <span style="font-family: Courier New,Courier,monospace;">__add_text_item_selected_cb()</span> function is called. In this function, the <span style="font-family: Courier New,Courier,monospace;">tts_add_text()</span> function adds the text from the input entry with the current selected voice. In this application, the added text is stored with the <span style="font-family: Courier New,Courier,monospace;">GList</span> to show the list.</p>

<pre class="prettyprint">
__add_text_item_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;
&nbsp;&nbsp;&nbsp;char *text = elm_entry_entry_get(ad-&gt;entry);
&nbsp;&nbsp;&nbsp;if (NULL != text)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int utt_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != tts_add_text(g_tts, text, g_current_voice-&gt;language, g_current_voice-&gt;voice_type, TTS_SPEED_AUTO, &amp;utt_id))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Play or pause the reading.
<p>The <strong>Play</strong> button text changes according to the current TTS state (when the state is <span style="font-family: Courier New,Courier,monospace;">TTS_STATE_PLAYING</span>, the text changes to <strong>Play</strong>). The <span style="font-family: Courier New,Courier,monospace;">__play_pause_item_selected_cb()</span> callback is called when the button is clicked. Within the callback, the application calls the TTS API based on the state.</p>

<pre class="prettyprint">
static void 
__play_pause_item_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;if (TTS_STATE_READY == g_current_state || TTS_STATE_PAUSED == g_current_state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != tts_play(g_tts))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (TTS_STATE_PLAYING == g_current_state)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != tts_pause(g_tts))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Stop the reading.
<p>The <strong>Stop</strong> button invokes the <span style="font-family: Courier New,Courier,monospace;">__stop_item_selected_cb()</span> callback  and the <span style="font-family: Courier New,Courier,monospace;">tts_stop()</span> function is called inside the callback. The <span style="font-family: Courier New,Courier,monospace;">tts_stop()</span> function removes all the added text, so the application also removes the stored text list.</p> 

<pre class="prettyprint">
static void 
__stop_item_selected_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;if (0 != tts_stop(g_tts))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Do something
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>