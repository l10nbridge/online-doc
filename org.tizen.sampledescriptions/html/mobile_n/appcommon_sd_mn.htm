<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Application Common Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
  </div>

  <h1>Application Common Sample Overview</h1>

  <p>The Application Common sample application demonstrates how you can extract information from the calling application (name, paths). In addition, it shows how to obtain the details of the application events when they occur.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the Application Common.</p>
  <p id="app-screenshot" class="figure">Figure: Application Common screens</p>
  <p align="center">
    <img alt="Application view" src="../images/appcommon_application_view_sd_mn.png" />
	<img alt="Events view" src="../images/appcommon_events_view_sd_mn.png" />
	<img alt="Paths view" src="../images/appcommon_paths_view_sd_mn.png" />
	<img alt="Files view"  src="../images/appcommon_files_view_sd_mn.png" />
  </p>

  <p>The sample application provides a user interface for previewing the following application-related information:</p>
  <ul>
    <li>Application name, ID, version</li>
	<li>Events details (if occurred):
	  <ul>
	    <li>Low memory status</li>
		<li>Low battery status</li>
		<li>Changed language</li>
		<li>Changed regional formatting</li>
		<li>Device orientation</li>
		<li>Suspend state</li>
	  </ul>
	</li>
	<li>Path to the specific data included in the application package (such as data, cache, and resource) and file names stored in these locations.</li>
  </ul>
  <p>The following figure shows the structure of the user interface. EDJE layout scripts are used.</p>
  <p id="ui-main-struct" class="figure">Figure: Application Common main layout structure</p>
  <p align="center">
    <img alt="Application Common main layout structure" src="../images/appcommon_ui_layout_1_sd_mn.png" />
  </p>
  
  <p>The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> swallow is used as a container for the layouts of all the tabs.</p>
  <p id="ui-tabs-struct" class="figure">Figure: Application Common tab layout structure</p>
  <p align="center">
    <img alt="Application Common tab layout structure" src="../images/appcommon_ui_layout_2_sd_mn.png" />
  </p>
  
  <p>The following layout is embedded into the <span style="font-family: Courier New,Courier,monospace">default</span> part of the <span style="font-family: Courier New,Courier,monospace">elm_popup</span> component.</p>
  <p id="ui-popup-struct" class="figure">Figure: Application Common popup window layout structure</p>
  <p style="text-align:center;">
    <img alt="Application Common popup window layout structure"  src="../images/appcommon_ui_layout_3_sd_mn.png" />
  </p>
  <p>The final application view is created by embedding proper components into the layouts depicted above. The resulting UI views are shown in the following figure.</p>
  <p id="ui-view" class="figure">Figure: Application Common application UI view</p>
  <p align="center">
    <img alt="Application Common application UI view" src="../images/appcommon_ui_tabs_view_sd_mn.png" />
  </p>
  
 
 
  <p>The application workflow can be divided into 2 logical pipelines:</p>
  <ul>
    <li>Application startup</li>
	<li>Event handling</li>
  </ul>
  <p>The following figure describes the workflow.</p>

  <p id="workflow" class="figure">Figure: Application workflow</p>
  <p align="center">
    <img alt="Application workflow" src="../images/appcommon_workflow_sd_mn.png"/>
  </p>

<h2>Implementation</h2>

<h3>Type Definitions</h3>

<p>The following code shows the structures used as placeholders for various application data:</p>

<pre class="prettyprint">
struct 
__appdata 
{
&nbsp;&nbsp;&nbsp;viewdata_s view; // View-related data
&nbsp;&nbsp;&nbsp;modeldata_s model; // Model-related data
};

// All the Evas_Object objects represent UI components
struct 
__viewdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_app;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_events;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_app;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_events;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *paths_list;
&nbsp;&nbsp;&nbsp;Evas_Object *popup_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *popup_files_list;
&nbsp;&nbsp;&nbsp;// Callback function called when popup window is opened from &quot;Paths&quot; tab
&nbsp;&nbsp;&nbsp;paths_popup_opened_cb popup_opened_cb;
};

typedef void(*paths_popup_opened_cb)(const char *path);

// Handlers for common application events:
// APP_EVENT_LOW_BATTERY,
// APP_EVENT_LOW_MEMORY,
// APP_EVENT_DEVICE_ORIENTATION_CHANGED,
// APP_EVENT_LANGUAGE_CHANGED,
// APP_EVENT_REGION_FORMAT_CHANGED,
// APP_EVENT_SUSPENDED_STATE_CHANGED.

struct 
__modeldata 
{
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5];
}

// Data structure used to populate the elm_genlist component in &quot;Paths&quot; tab with relevant data
struct 
__path_list_item 
{
&nbsp;&nbsp;&nbsp;char *top_label; // Name of the file resources pointed by the path
&nbsp;&nbsp;&nbsp;char *bottom_label; // Path to the file resources
&nbsp;&nbsp;&nbsp;path_item_type type; // Type of the file resources
};

typedef enum 
{
&nbsp;&nbsp;&nbsp;PIT_DATA, // Data directory for private application data
&nbsp;&nbsp;&nbsp;PIT_CACHE, // Cache directory for temporary application data
&nbsp;&nbsp;&nbsp;PIT_RESOURCE, // Resource directory
&nbsp;&nbsp;&nbsp;PIT_SHARED_DATA, // Shared data directory used to share data with other applications
&nbsp;&nbsp;&nbsp;PIT_SHARED_RESOURCE, // Shared resource directory used to share resources with other applications
&nbsp;&nbsp;&nbsp;PIT_SHARED_TRUSTED, // Shared trusted directory used to share data with a family of trusted applications
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_DATA, // External data directory for application data
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_CACHE, // External cache directory for temporary application data
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_SHARED_DATA, // External shared data directory used to share data with other applications
&nbsp;&nbsp;&nbsp;PIT_TEP_RESOURCE // Tizen Expansion Package directory
} path_item_type;
</pre>

<h3 id="app-init">Application Initialization</h3>
<p>To create the application:</p>
<ol>
<li>Implement the entire application life-cycle in the main source file, using a common Tizen application structure:
<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function ui_app_main() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>Initialize the application in the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on application startup:
<pre class="prettyprint">
static bool 
__create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&amp;ad-&gt;view, &amp;ad-&gt;model);
}
</pre>
</li>
<li>Control the initialization process with the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function:
<pre class="prettyprint">
bool 
controller_init(viewdata_s *vd, modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;if (!model_init(md))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__add_event_handlers())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd, __paths_popup_opened_cb))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;__init_view_app();

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The following functions, listed in the code snippet above, are responsible for:</p>
  <ul>
<li>Storing model-related data for future use within the Model module:
<pre class="prettyprint">
bool 
model_init(modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;if (!md) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Invalid argument&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;__modeldata = md;

&nbsp;&nbsp;&nbsp;return (__modeldata != NULL);
}
</pre>
</li>
<li>Assigning events handlers:
<pre class="prettyprint">
static bool 
__add_event_handlers(void)
{
&nbsp;&nbsp;&nbsp;return(model_add_event_handler(APP_EVENT_LOW_BATTERY, __app_event_low_battery_cb) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_LOW_MEMORY, __app_event_low_memory_cb) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_DEVICE_ORIENTATION_CHANGED, __app_event_device_orientation_changed_cb) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_LANGUAGE_CHANGED, __app_event_language_changed_cb) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_REGION_FORMAT_CHANGED, __app_event_region_format_changed_cb) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_SUSPENDED_STATE_CHANGED, __app_event_suspended_state_changed_cb));
}
</pre>
<p>For the <span style="font-family: Courier New,Courier,monospace">model_add_event_handler()</span> function details, see <a href="#app-events">Application Events</a>.</p>
</li>
<li>Creating the entire UI. The source code for the <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function is not listed within this topic.</li>
<li>Setting the application common information, which is obtained using the functions implemented in the Model module displayed in the UI:
<pre class="prettyprint">
static void 
__init_view_app(void)
{
&nbsp;&nbsp;&nbsp;char *id = NULL;
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;char *version = NULL;

&nbsp;&nbsp;&nbsp;if (model_get_app_id(&amp;id) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_get_app_name(&amp;name) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_get_app_version(&amp;version))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_update_application_tab(id, name, version);

&nbsp;&nbsp;&nbsp;char *paths[PATHS_LIST_ITEMS_COUNT] = {NULL};

&nbsp;&nbsp;&nbsp;if (model_app_get_data_path(&amp;paths[PIT_DATA]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_cache_path(&amp;paths[PIT_CACHE]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_resource_path(&amp;paths[PIT_RESOURCE]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_data_path(&amp;paths[PIT_SHARED_DATA]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_resource_path(&amp;paths[PIT_SHARED_RESOURCE]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_trusted_path(&amp;paths[PIT_SHARED_TRUSTED]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_data_path(&amp;paths[PIT_EXTERNAL_DATA]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_cache_path(&amp;paths[PIT_EXTERNAL_CACHE]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_shared_data_path(&amp;paths[PIT_EXTERNAL_SHARED_DATA]) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_tep_resource_path(&amp;paths[PIT_TEP_RESOURCE])) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_update_paths_tab(paths);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; PATHS_LIST_ITEMS_COUNT; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(paths[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>
<p>If any of the above functions (except <span style="font-family: Courier New,Courier,monospace">__init_view_app()</span>) fails, the application is terminated and the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function is called. For details, see <a href="#app-finit">Application Termination</a>.</p>
</li>
</ol>

<h3 id="app-finit">Application Termination</h3>

<p>To terminate the application:</p>
<ol>
<li>When the application is terminated, call the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function:
<pre class="prettyprint">
static void 
__terminate_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;controller_finit(&amp;ad-&gt;view);
}
</pre>
</li>
<li>Release all previously allocated resources with the <span style="font-family: Courier New,Courier,monospace">controller_finit()</span> function, which is responsible for destroying the UI and detaching the event handlers:
<pre class="prettyprint">
void 
controller_finit(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;view_destroy_base_gui(vd);
&nbsp;&nbsp;&nbsp;__remove_event_handlers();
}
</pre>
</li>
<li>Detach the event handlers with the <span style="font-family: Courier New,Courier,monospace">model_remove_event_handler()</span> function for each attached event handler. For implementation details, see <a href="#app-events">Application Events</a>.
<p>As the UI is not a subject for this topic, the implementation of the <span style="font-family: Courier New,Courier,monospace">view_destroy_base_gui()</span> function is omitted.</p>
<pre class="prettyprint">
static void 
__remove_event_handlers(void)
{
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LOW_BATTERY);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LOW_MEMORY);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_DEVICE_ORIENTATION_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LANGUAGE_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_REGION_FORMAT_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_SUSPENDED_STATE_CHANGED);
}
</pre>
</li>
</ol>

<h3 id="app-res">Application Resources</h3>

<p>Once the application is created and its UI is displayed, you can browse through the information gathered during the <a href="#app-init">application initialization</a> procedure. This information consists of:</p>
    <ul>
      <li>Application name, ID, and version</li>
	  <li>Paths to the application resources, such as data and cache.</li>
    </ul>
<p>This information is obtained using the <span style="font-family: Courier New,Courier,monospace">model_get_app_id()</span>, <span style="font-family: Courier New,Courier,monospace">model_get_app_name()</span> and <span style="font-family: Courier New,Courier,monospace">model_get_app_version()</span> functions within the <span style="font-family: Courier New,Courier,monospace">__init_view_app()</span> function called during the application initialization procedure. The paths to the application resource directories are obtained using the <span style="font-family: Courier New,Courier,monospace">model_get_app_&lt;dir_type&gt;_path()</span> functions.</p>
<pre class="prettyprint">
bool 
model_get_app_id(char **id)
{
&nbsp;&nbsp;&nbsp;*id = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_get_id(id);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_get_id() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>The implementation of the <span style="font-family: Courier New,Courier,monospace">model_get_app_name()</span> and <span style="font-family: Courier New,Courier,monospace">model_get_app_version()</span> functions is exactly the same as the implementation of the <span style="font-family: Courier New,Courier,monospace">model_get_app_id()</span> function, but the <span style="font-family: Courier New,Courier,monospace">app_get_name()</span> and <span style="font-family: Courier New,Courier,monospace">app_get_version()</span> functions are used instead of the <span style="font-family: Courier New,Courier,monospace">app_get_id()</span> function.</p>
<pre class="prettyprint">
bool 
model_get_app_&lt;dir_type&gt;_path(char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;char *path_tmp = app_get_&lt;dir_type&gt;_path();
&nbsp;&nbsp;&nbsp;if (!path_tmp) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_get_&lt;dir_type&gt;_path() failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;*path = strdup(path_tmp);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3 id="app-events">Application Events</h3>

<p>To handle application events:</p>
<ol>
<li>
<p>Event handling is implemented together with the <a href="#app-res">application resources</a>. At the <a href="#app-init">application initialization</a> phase, the event handlers are attached for:</p>
    <ul>
	  <li>Low memory status</li>
	  <li>Low battery status</li>
	  <li>Language changed</li>
	  <li>Region format changed</li>
	  <li>Device orientation change</li>
	  <li>Suspended state occurrence</li>
	</ul>
<p>Each of the above events is handled by one of the callback functions attached using the <span style="font-family: Courier New,Courier,monospace">model_add_event_handler()</span> function within the <span style="font-family: Courier New,Courier,monospace">__add_event_handlers()</span> function. For the implementation reference, see <a href="#app-init">Application Initialization</a>.</p>
<pre class="prettyprint">
bool 
model_add_event_handler(app_event_type_e event_type, app_event_cb callback)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_add_event_handler(&amp;__modeldata-&gt;handlers[event_type], event_type, callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function ui_app_add_event_handler() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Once the event handler is attached and the event occurs, the assigned callback function is called. Regardless of the event type, the callback function structure is the same.</p>
<pre class="prettyprint">
static void 
__app_event_&lt;event_type&gt;_cb(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;&lt;event_status_type&gt; status;

&nbsp;&nbsp;&nbsp;if (!model_get_app_event_&lt;event_type&gt;(event_info, &amp;status))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;// The event is handled appropriately to its type and displayed on the application UI
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">model_get_app_event_&lt;event_type&gt;()</span> function is responsible for obtaining detailed information from the <span style="font-family: Courier New,Courier,monospace">event_info</span> parameter of the event callback function. Depending on the event type, the relevant event information is returned:</p>
<ul>
  <li>Low memory event: normal status, soft or hard warning</li>
  <li>Low battery event: the battery is under 1% or under 5%</li>
  <li>Language changed event: language code</li>
  <li>Region format changed event: region code</li>
  <li>Device orientation changed even: natural position, left-side up, up-side down, right-side up</li>
  <li>Suspended state occurrence event: enter or exit from the suspended state</li>
</ul>
<p>The implementation of the <span style="font-family: Courier New,Courier,monospace">model_get_app_event_&lt;event_type&gt;()</span> function is shown in the following example:</p>
<pre class="prettyprint">
bool 
model_get_app_event_&lt;event_type&gt;(app_event_info_h event_info, &lt;event_status_type&gt; *status)
{
&nbsp;&nbsp;&nbsp;int ret = app_event_get_&lt;event_type&gt;(event_info, status);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_event_get_&lt;event_type&gt;() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>
<p>On the <a href="#app-finit">application termination</a> phase, detach each attached event with the <span style="font-family: Courier New,Courier,monospace">model_remove_event_handler()</span> function:</p>
<pre class="prettyprint">
bool 
model_remove_event_handler(app_event_type_e event_type)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_remove_event_handler(__modeldata-&gt;handlers[event_type]);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function event_remove_event_handler() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<h3 id="model">Model</h3>

<p>The responsibility of the application Model module is to operate directly on the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APP__COMMON__MODULE.html">App Common</a> API and related data. The additional benefit of this module is the simplification of the API function calling, as error checking and message logging is performed here.</p>
<p>All functions implemented within the Model module have been briefly described in the <a href="#app-init">Application Initialization</a>, <a href="#app-finit">Application Termination</a>, <a href="#app-res">Application Resources</a> and <a href="#app-events">Application Events</a> sections. Their implementation is repeated here for clarity.</p>
<ol>
<li>
<p>Add an event handler by assigning a callback function to the <span style="font-family: Courier New,Courier,monospace">event_type</span> parameter:</p>
<pre class="prettyprint">
bool 
model_add_event_handler(app_event_type_e event_type, app_event_cb callback)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_add_event_handler(&amp;__modeldata-&gt;handlers[event_type], event_type, callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function ui_app_add_event_handler() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Remove a previously attached event handler assigned to the specific <span style="font-family: Courier New,Courier,monospace">event_type</span> parameter:</p>

<pre class="prettyprint">
bool 
model_remove_event_handler(app_event_type_e event_type)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_remove_event_handler(__modeldata-&gt;handlers[event_type]);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function event_remove_event_handler() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Get an application resource and a path to the application directory:</p>
<ul>
<li><p>&lt;res&gt;: <span style="font-family: Courier New,Courier,monospace">id</span> / <span style="font-family: Courier New,Courier,monospace">name</span> / <span style="font-family: Courier New,Courier,monospace">version</span></p></li>
<li><p>&lt;dir_type&gt;: <span style="font-family: Courier New,Courier,monospace">data</span> / <span style="font-family: Courier New,Courier,monospace">cache</span> / <span style="font-family: Courier New,Courier,monospace">resource</span> / <span style="font-family: Courier New,Courier,monospace">shared_data</span> / <span style="font-family: Courier New,Courier,monospace">shared_resource</span> / <span style="font-family: Courier New,Courier,monospace">shared_trusted</span> / <span style="font-family: Courier New,Courier,monospace">external_data</span> / <span style="font-family: Courier New,Courier,monospace">external_cache</span> / <span style="font-family: Courier New,Courier,monospace">external_shared_data</span> / <span style="font-family: Courier New,Courier,monospace">tep_resource</span></p></li>
</ul>
<pre class="prettyprint">
bool 
model_get_app_&lt;res&gt;(char **&lt;res&gt;)
{
&nbsp;&nbsp;&nbsp;*&lt;res&gt; = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_get_&lt;res&gt;(&lt;res&gt;);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_get_&lt;res&gt;() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}

bool 
model_get_app_&lt;dir_type&gt;_path(char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;char *path_tmp = app_get_&lt;dir_type&gt;_path();
&nbsp;&nbsp;&nbsp;if (!path_tmp) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_get_&lt;dir_type&gt;_path() failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;*path = strdup(path_tmp);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Extract the event details at the time of its occurrence in the event callback handler by invoking the <span style="font-family: Courier New,Courier,monospace">app_event_get_&lt;event_type&gt;()</span> function wrapped by the <span style="font-family: Courier New,Courier,monospace">model_get_app_event_&lt;event_type&gt;()</span> function.</p>
<ul>
<li>
<p>&lt;event_type&gt;: <span style="font-family: Courier New,Courier,monospace">low_battery_status</span> / <span style="font-family: Courier New,Courier,monospace">low_memory_status</span> / <span style="font-family: Courier New,Courier,monospace">language</span> / <span style="font-family: Courier New,Courier,monospace">region_format</span> / <span style="font-family: Courier New,Courier,monospace">device_orientation</span> / <span style="font-family: Courier New,Courier,monospace">suspended_state</span></p></li>
</ul>
<pre class="prettyprint">
bool 
model_get_app_event_&lt;event_type&gt;(app_event_info_h event_info, &lt;event_status_type&gt; *status)
{
&nbsp;&nbsp;&nbsp;int ret = app_event_get_&lt;event_type&gt;(event_info, status);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_event_get_&lt;event_type&gt;() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
