<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Application Common Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
  </div>

  <h1>Application Common Sample Overview</h1>

  <p>
  The Tizen API's App-common module provides a set of functions enabling information extraction from calling application (name, paths). Moreover, the sample application demonstrates how to obtain the details
  of the application's events when they occur.
  </p>
  <p>The figure below illustrates the view of the application.</p>
  <p id="app-screenshot" class="figure">Figure: App-common application screens.</p>
  <p style="text-align:center;">
    <img alt="Application view" height="364" hspace="20" src="../images/appcommon_application_view_sd_mn.png" />
	<img alt="Evants view" height="364" hspace="20" src="../images/appcommon_events_view_sd_mn.png" />
	<img alt="Paths view" height="364" hspace="20" src="../images/appcommon_paths_view_sd_mn.png" />
	<img alt="Files view" height="364" hspace="20" src="../images/appcommon_files_view_sd_mn.png" />
  </p>

  <p>The sample application provides a user interface for previewing application-related information:
  <ul>
    <li>application name, id, version;</li>
	<li>events details (if occured):
	  <ul>
	    <li>low memory status,</li>
		<li>low battery status,</li>
		<li>changed language,</li>
		<li>changed regional formatting,</li>
		<li>device orientation,</li>
		<li>suspend state;</li>
	  </ul>
	</li>
	<li>path to the specific data included in the application's package (data, cache, resource, etc.) and file names stored in these location;</li>
  </ul>
  The structure of the user interface is depicted below (EDJE layout scripts are used).
  </p>
  <p id="ui-main-struct" class="figure">Figure: App-common main layout structure.</p>
  <p style="text-align:center;">
    <img alt="App-common main layout structure" hspace="80" height="400" src="../images/appcommon_ui_layout_1_sd_mn.png" />
  </p>
  <p>
  The <span style="font-family: Courier New,Courier,monospace">PART_MAIN_CONTENT</span> swallow is used as a container for any of the below layouts.
  </p>
  <p id="ui-tabs-struct" class="figure">Figure: App-common tabs layout structure.</p>
  <p style="text-align:center;">
    <img alt="App-common tabs layout structure" hspace="80" height="400" src="../images/appcommon_ui_layout_2_sd_mn.png" />
  </p>
  <p>
  The layout shown below is embedded into the <span style="font-family: Courier New,Courier,monospace">default</span> part of the
  <span style="font-family: Courier New,Courier,monospace">elm_popup</span> widget.
  </p>
  <p id="ui-popup-struct" class="figure">Figure: App-common popup window layout structure.</p>
  <p style="text-align:center;">
    <img alt="App-common popup window layout structure" hspace="80" height="400" src="../images/appcommon_ui_layout_3_sd_mn.png" />
  </p>
  <p>
  The final application's view is created by embedding proper widgets into the layouts depicted above. The resulting UI views are shown below.
  </p>
  <p id="ui-view" class="figure">Figure: App-common application's UI view.</p>
  <p style="text-align:center;">
    <img alt="App-common application's UI view" hspace="80" height="450" src="../images/appcommon_ui_tabs_view_sd_mn.png" />
  </p>
  <br>
  The application's workflow can be divided into three logical pipelines:
  <ul>
    <li>App-common application startup,</li>
	<li>application's events handling,</li>
  </ul>
  which can be described by the following figure:
  </p>
  <p id="workflow" class="figure">Figure: App-common application workflow.</p>
  <p style="text-align:center;">
    <img alt="Application workflow" height="450" hspace="0" src="../images/appcommon_workflow_sd_mn.png"/>
  </p>

  <h3>Prerequisites</h3>
  <p>There are no requirements regarding application's privileges.
  </p>

<h2>Implementation</h2>

<h3>Type definitions</h3>

<pre class="prettyprint">
struct __appdata {
&nbsp;&nbsp;&nbsp;viewdata_s view;&nbsp;&nbsp;&nbsp;/* View related data. */
&nbsp;&nbsp;&nbsp;modeldata_s model;&nbsp;/* Model related data. */
};
</pre>

<pre class="prettyprint">
/* All the Evas_Object objects represent UI widgets. */
struct __viewdata {
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_app;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_events;
&nbsp;&nbsp;&nbsp;Evas_Object *main_toolbar_item_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_app;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_events;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *paths_list;
&nbsp;&nbsp;&nbsp;Evas_Object *popup_paths;
&nbsp;&nbsp;&nbsp;Evas_Object *popup_files_list;
&nbsp;&nbsp;&nbsp;/* Callback function called when popup window is opened from "Paths" tab of the main application's view. */
&nbsp;&nbsp;&nbsp;paths_popup_opened_cb popup_opened_cb;
};
</pre>

<pre class="prettyprint">
typedef void(*paths_popup_opened_cb)(const char *path);
</pre>

<pre class="prettyprint">
/* Handlers for common application events:
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_LOW_BATTERY,
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_LOW_MEMORY,
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_DEVICE_ORIENTATION_CHANGED,
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_LANGUAGE_CHANGED,
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_REGION_FORMAT_CHANGED,
&nbsp;*&nbsp;&nbsp;&nbsp;APP_EVENT_SUSPENDED_STATE_CHANGED.
&nbsp;*/
struct __modeldata {
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5];
}
</pre>

<pre class="prettyprint">
/* Data structure used to populate the elm_genlist widget in "Paths" tab with relevant data. */
struct __path_list_item {
&nbsp;&nbsp;&nbsp;char *top_label;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Name of the file resources pointed by the path. */
&nbsp;&nbsp;&nbsp;char *bottom_label;&nbsp;&nbsp;/* Path to the file resources. */
&nbsp;&nbsp;&nbsp;path_item_type type;&nbsp;/* Type of the file resources. */
};
</pre>

<pre class="prettyprint">
typedef enum {
&nbsp;&nbsp;&nbsp;PIT_DATA,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Data directory containing private data of the application. */
&nbsp;&nbsp;&nbsp;PIT_CACHE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Cache directory containing temporary data of the application. */
&nbsp;&nbsp;&nbsp;PIT_RESOURCE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Resource directory. */
&nbsp;&nbsp;&nbsp;PIT_SHARED_DATA,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Shared data directory which is used to share data with other applications. */
&nbsp;&nbsp;&nbsp;PIT_SHARED_RESOURCE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Shared resource directory which is used to share resources with other applications. */
&nbsp;&nbsp;&nbsp;PIT_SHARED_TRUSTED,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Shared trusted directory which is used to share data with a family of trusted applications. */
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_DATA,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* External data directory containing data of the application. */
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_CACHE,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* External cache directory containing temporary data of the application. */
&nbsp;&nbsp;&nbsp;PIT_EXTERNAL_SHARED_DATA,&nbsp;/* External shared data directory which is used to share the data with other applications. */
&nbsp;&nbsp;&nbsp;PIT_TEP_RESOURCE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Tizen Expansion Package directory. */
} path_item_type;
</pre>

<h3 id="app-init">Application initialization</h3>

  <p>
  The entire application life-cycle is implemented in the main source file, using a common Tizen application structure:
  </p>

<pre class="prettyprint">
int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &event_callback, &ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_main() failed with error = %d", ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

  <p>
  The application's initilization procedure is executed in <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on application's startup.
  </p>

<pre class="prettyprint">
static bool __create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&ad->view, &ad->model);
}
</pre>

  <p>
  Finally, the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function is invoked, which controls the entire initialization process
  (see the code snippet below for details).
  </p>

<pre class="prettyprint">
bool controller_init(viewdata_s *vd, modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;if (!model_init(md))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!__add_event_handlers())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd, __paths_popup_opened_cb))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;__init_view_app();

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The following functions, listed within the code snippet above, are responsible for:
  <ul>
    <li>
	<span style="font-family: Courier New,Courier,monospace">model_init()</span> - model-related data pointer storage for future use within the "Model" module;
<pre class="prettyprint">
bool model_init(modeldata_s *md)
{
&nbsp;&nbsp;&nbsp;if (!md) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Invalid argument");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;__modeldata = md;

&nbsp;&nbsp;&nbsp;return (__modeldata != NULL);
}
</pre>
	</li>
	<li>
	<span style="font-family: Courier New,Courier,monospace">__add_event_handlers()</span> - events handlers assignments;
<pre class="prettyprint">
static bool __add_event_handlers(void)
{
&nbsp;&nbsp;&nbsp;return (model_add_event_handler(APP_EVENT_LOW_BATTERY, __app_event_low_battery_cb) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_LOW_MEMORY, __app_event_low_memory_cb) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_DEVICE_ORIENTATION_CHANGED, __app_event_device_orientation_changed_cb) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_LANGUAGE_CHANGED, __app_event_language_changed_cb) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_REGION_FORMAT_CHANGED, __app_event_region_format_changed_cb) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_add_event_handler(APP_EVENT_SUSPENDED_STATE_CHANGED, __app_event_suspended_state_changed_cb));
}
</pre>
	See the <a href="#app-events">Application's events</a> section for <span style="font-family: Courier New,Courier,monospace">model_add_event_handler()</span> function reference.
	</li>
	<li>
	<span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> - the entire UI is created. The source code is not listed within this documentation, as it is not a subject
	of this document.
	</li>
	<li>
	<span style="font-family: Courier New,Courier,monospace">__init_view_app()</span> - the set of application's common information is obtaind via functions implemented in "Model" module, which
	is then displayed in the UI.
<pre class="prettyprint">
static void __init_view_app(void)
{
&nbsp;&nbsp;&nbsp;char *id = NULL;
&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;char *version = NULL;

&nbsp;&nbsp;&nbsp;if (model_get_app_id(&id) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_get_app_name(&name) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_get_app_version(&version))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_update_application_tab(id, name, version);

&nbsp;&nbsp;&nbsp;char *paths[PATHS_LIST_ITEMS_COUNT] = { NULL };

&nbsp;&nbsp;&nbsp;if (model_app_get_data_path(&paths[PIT_DATA]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_cache_path(&paths[PIT_CACHE]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_resource_path(&paths[PIT_RESOURCE]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_data_path(&paths[PIT_SHARED_DATA]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_resource_path(&paths[PIT_SHARED_RESOURCE]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_shared_trusted_path(&paths[PIT_SHARED_TRUSTED]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_data_path(&paths[PIT_EXTERNAL_DATA]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_cache_path(&paths[PIT_EXTERNAL_CACHE]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_external_shared_data_path(&paths[PIT_EXTERNAL_SHARED_DATA]) &&
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_app_get_tep_resource_path(&paths[PIT_TEP_RESOURCE])) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_update_paths_tab(paths);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i < PATHS_LIST_ITEMS_COUNT; i++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(paths[i]);
&nbsp;&nbsp;&nbsp;}
}
</pre>
	</li>
  </ul>
  If any of the above functions (except <span style="font-family: Courier New,Courier,monospace">__init_view_app()</span>) fails, then application is terminated and the
  <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function is called. For details, see the <a href="#app-finit">Application termination</a> section.
  </p>

<h3 id="app-finit">Application termination</h3>

  <p>
  When the application is terminated, then the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function is called (see the code snippet below).
  </p>

<pre class="prettyprint">
static void __terminate_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;controller_finit(&ad->view);
}
</pre>

  <p>
  All the resources, allocated previously, are released with <span style="font-family: Courier New,Courier,monospace">controller_finit()</span> function, which is responsible for destroying the UI
  and detaching events handlers.
  </p>

<pre class="prettyprint">
void controller_finit(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;view_destroy_base_gui(vd);
&nbsp;&nbsp;&nbsp;__remove_event_handlers();
}
</pre>

  <p>
  As the UI is not a subject for this documentation, the implementation of the <span style="font-family: Courier New,Courier,monospace">view_destroy_base_gui()</span> function is ommited.
  Detaching events handlers relies on <span style="font-family: Courier New,Courier,monospace">model_remove_event_handler()</span> function for each attached event handler. For implementation
  details see the <a href="#app-events">Application's events</a> section.
  </p>

<pre class="prettyprint">
static void __remove_event_handlers(void)
{
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LOW_BATTERY);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LOW_MEMORY);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_DEVICE_ORIENTATION_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_LANGUAGE_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_REGION_FORMAT_CHANGED);
&nbsp;&nbsp;&nbsp;model_remove_event_handler(APP_EVENT_SUSPENDED_STATE_CHANGED);
}
</pre>

<h3 id="app-res">Application's resources</h3>

  <p>
  Once the application is created and its UI is displayed, one can browse through the information gathered during the <a href="#app-init">Application initialization</a> procedure. This information consists of:
    <ul>
      <li>application's name, id, version;</li>
	  <li>paths to the application's resources like: data, cache, etc.</li>
    </ul>
  These information is obtained using <span style="font-family: Courier New,Courier,monospace">model_get_app_id()</span>,
  <span style="font-family: Courier New,Courier,monospace">model_get_app_name()</span> and <span style="font-family: Courier New,Courier,monospace">model_get_app_version()</span> functions
  within the <span style="font-family: Courier New,Courier,monospace">__init_view_app()</span> function called during the <a href="#app-init">Application initialization</a> procedure.
  The paths to the application's resources directories are obtained using the <span style="font-family: Courier New,Courier,monospace">model_get_app_<b>#dir_type#</b>_path()</span> functions.
  The implementation of the mentioned functions is listed below.
  </p>

<pre class="prettyprint">
bool model_get_app_id(char **id)
{
&nbsp;&nbsp;&nbsp;*id = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_get_id(id);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_get_id() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The implementation of the <span style="font-family: Courier New,Courier,monospace">model_get_app_name()</span> and
  <span style="font-family: Courier New,Courier,monospace">model_get_app_version()</span> functions is exactly the same as the implementation of the
  <span style="font-family: Courier New,Courier,monospace">model_get_app_id()</span> function, but the Tizen's API <span style="font-family: Courier New,Courier,monospace">app_get_name()</span>
  and <span style="font-family: Courier New,Courier,monospace">app_get_version()</span> functions are used instead of the
  <span style="font-family: Courier New,Courier,monospace">app_get_id()</span> function.
  </p>

<pre class="prettyprint">
bool model_get_app_<b>#dir_type#</b>_path(char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;char *path_tmp = app_get_<b>#dir_type#</b>_path();
&nbsp;&nbsp;&nbsp;if (!path_tmp) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_get_<b>#dir_type#</b>_path() failed");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;*path = strdup(path_tmp);
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3 id="app-events">Application's events</h3>

  <p>
  Together with the <a href="#app-res">Application's resources</a> the events handling is implemented. At the <a href="#app-init">Application initialization</a> phase the events handlers are attached for:
    <ul>
	  <li>low memory status;</li>
	  <li>low battery status;</li>
	  <li>language changed;</li>
	  <li>region format changed;</li>
	  <li>device orientation change;</li>
	  <li>suspended state occurance.</li>
	</ul>
	Each of the events above is handled by one of the callback functions attached using the <span style="font-family: Courier New,Courier,monospace">model_add_event_handler()</span> function
	(see below for implementation details) within the <span style="font-family: Courier New,Courier,monospace">__add_event_handlers()</span> function (see the
	<a href="#app-init">Application initialization</a> section for implementation reference).
  </p>

<pre class="prettyprint">
bool model_add_event_handler(app_event_type_e event_type, app_event_cb callback)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_add_event_handler(&__modeldata->handlers[event_type], event_type, callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_add_event_handler() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Once the event handler is attached and the event occurs, the assigned callback function is called. Regardless of the event type, the callback function structure is the same (see below for reference).
  </p>

<pre class="prettyprint">
static void __app_event_<b>#event_type#</b>_cb(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;<b>#event_status_type#</b> status;

&nbsp;&nbsp;&nbsp;if (!model_get_app_event_<b>#event_type#</b>(event_info, &status))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;/*
&nbsp;&nbsp;&nbsp;&nbsp;* The event is handled appropriately to its type and displayed on the application's UI.
&nbsp;&nbsp;&nbsp;&nbsp;*/
}
</pre>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">model_get_app_event_<b>#event_type#</b>()</span> function is responsible for detailed information obtaining from the
  <span style="font-family: Courier New,Courier,monospace">event_info</span> argument of the event's callback function. Depending on the event type, the event's relevant information is returned:
    <ul>
	  <li>low memory event - normal status, soft/hard warning;</li>
	  <li>low battery event - the battery is under 1% or under 5%;</li>
	  <li>language changed event - language code;</li>
	  <li>region format changed event - region code;</li>
	  <li>device orientation changed event - natural position, left-side up, up-side down, right-side up;</li>
	  <li>suspended state occurance event - will enter/did exit from suspended state.</li>
	</ul>
  The implementation of the <span style="font-family: Courier New,Courier,monospace">model_get_app_event_<b>#event_type#</b>()</span> function is listed below.
  </p>

<pre class="prettyprint">
bool model_get_app_event_<b>#event_type#</b>(app_event_info_h event_info, <b>#event_status_type#</b> *status)
{
&nbsp;&nbsp;&nbsp;int ret = app_event_get_<b>#event_type#</b>(event_info, status);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_event_get_<b>#event_type#</b>() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  On the <a href="#app-finit">Application termination</a> phase, each attached event is detached with <span style="font-family: Courier New,Courier,monospace">model_remove_event_handler()</span> function.
  </p>

<pre class="prettyprint">
bool model_remove_event_handler(app_event_type_e event_type)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_remove_event_handler(__modeldata->handlers[event_type]);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function event_remove_event_handler() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3 id="model">Model</h3>

  <p>
  The responsibility of the application's "Model" module is to operate directly on the App Common API and related data. The additional benefit of this module is the simplification of the API function calling:
  error checking and message logging is performed here.
  <br>
  All of the functions implemented within the "Model" module were briefly described in the following sections: <a href="#app-init">Application initialization</a>,
  <a href="#app-finit">Application termination</a>, <a href="#app-res">Application's resources</a> and <a href="#app-events">Application's events</a>. Their implementation is repeated here just for
  the document's consistency.
  </p>

  <p>
  Adding an event handler by assigning a <span style="font-family: Courier New,Courier,monospace">callback</span> function to the
  <span style="font-family: Courier New,Courier,monospace">event_type</span>.
  </p>

<pre class="prettyprint">
bool model_add_event_handler(app_event_type_e event_type, app_event_cb callback)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_add_event_handler(&__modeldata->handlers[event_type], event_type, callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_add_event_handler() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Removing previously attached event handler assigned to the specific <span style="font-family: Courier New,Courier,monospace">event_type</span>.
  </p>

<pre class="prettyprint">
bool model_remove_event_handler(app_event_type_e event_type)
{
&nbsp;&nbsp;&nbsp;int ret = ui_app_remove_event_handler(__modeldata->handlers[event_type]);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function event_remove_event_handler() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Getting an application's resource and/or path to the application's directory.
  <br>
  <b>#res#</b> - <span style="font-family: Courier New,Courier,monospace">id</span> /
  <span style="font-family: Courier New,Courier,monospace">name</span> / <span style="font-family: Courier New,Courier,monospace">version</span>;
  <br>
  <b>#dir_type#</b> - <span style="font-family: Courier New,Courier,monospace">data</span> / <span style="font-family: Courier New,Courier,monospace">cache</span> /
  <span style="font-family: Courier New,Courier,monospace">resource</span> / <span style="font-family: Courier New,Courier,monospace">shared_data</span> /
  <span style="font-family: Courier New,Courier,monospace">shared_resource</span> / <span style="font-family: Courier New,Courier,monospace">shared_trusted</span> /
  <span style="font-family: Courier New,Courier,monospace">external_data</span> / <span style="font-family: Courier New,Courier,monospace">external_cache</span> /
  <span style="font-family: Courier New,Courier,monospace">external_shared_data</span> / <span style="font-family: Courier New,Courier,monospace">tep_resource</span>.
  </p>

<pre class="prettyprint">
bool model_get_app_<b>#res#</b>(char **<b>#res#</b>)
{
&nbsp;&nbsp;&nbsp;*<b>#res#</b> = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_get_<b>#res#</b>(<b>#res#</b>);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_get_<b>#res#</b>() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<pre class="prettyprint">
bool model_get_app_<b>#dir_type#</b>_path(char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;char *path_tmp = app_get_<b>#dir_type#</b>_path();
&nbsp;&nbsp;&nbsp;if (!path_tmp) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_get_<b>#dir_type#</b>_path() failed");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;*path = strdup(path_tmp);
&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Extraction of the event's details on time of its occurance is performed in the event's callback handler by the invocation of the
  <span style="font-family: Courier New,Courier,monospace">app_event_get_<b>#event_type#</b>()</span> function wrapped by the
  <span style="font-family: Courier New,Courier,monospace">model_get_app_event_<b>#event_type#</b>()</span> function.
  <br>
  <b>#event_type#</b> - <span style="font-family: Courier New,Courier,monospace">low_battery_status</span> / <span style="font-family: Courier New,Courier,monospace">low_memory_status</span> /
  <span style="font-family: Courier New,Courier,monospace">language</span> / <span style="font-family: Courier New,Courier,monospace">region_format</span> /
  <span style="font-family: Courier New,Courier,monospace">device_orientation</span> / <span style="font-family: Courier New,Courier,monospace">suspended_state</span>.
  </p>

<pre class="prettyprint">
bool model_get_app_event_<b>#event_type#</b>(app_event_info_h event_info, <b>#event_status_type#</b> *status)
{
&nbsp;&nbsp;&nbsp;int ret = app_event_get_<b>#event_type#</b>(event_info, status);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_event_get_<b>#event_type#</b>() failed with error = %d", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
