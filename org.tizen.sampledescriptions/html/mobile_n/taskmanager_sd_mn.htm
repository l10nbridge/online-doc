<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Taskmanager Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Taskmanager Sample Overview</h1> 
<p>The Taskmanager sample  demonstrates how to retrieve installed application information using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APPLICATION__MANAGER__MODULE.html">Application Manager</a> API. You can filter the information, and resume or terminate applications running in the background. The Taskmanager displays all running applications (except itself) in a genlist. You can tap an item to resume the application, or swipe left or right to terminate it and remove it from the genlist.</p>

 <p class="figure">Figure: Taskmanager screen</p>
  <p align="center"><img alt="Taskmanager default screen" src="../images/taskmanager_default.png" /> <img alt="Taskmanager swipe screen" src="../images/taskmanager_swipe.png" /> <img alt="Taskmanager after swipe screen" src="../images/taskmanager_after_swipe.png" /></p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be specified:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/packagemanager.info</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.kill.bgapp</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
 </ul>

<h2>Implementation</h2>
<h3>Application Manager Module</h3>

<p>The application manager module allows you to iterate through all installed applications to retrieve their data. The Taskmanager, however, only needs information about applications that are both running and displayable. Instead of checking the <span style="font-family: Courier New,Courier,monospace">nodisplay</span> flag of each installed application, you can set up a filter that automatically retrieves applications of a specified type only:</p>

<ol><li>
<p>Create the filter using the <span style="font-family: Courier New,Courier,monospace">app_info_filter_create()</span> function.</p>
<p>To specify the filter, call the <span style="font-family: Courier New,Courier,monospace">app_info_filter_add_bool()</span> function to add a boolean filter property to a given filter handle. In this sample, the <span style="font-family: Courier New,Courier,monospace">PACKAGE_INFO_PROP_APP_NODISPLAY</span> property is set to <span style="font-family: Courier New,Courier,monospace">false</span>. It filters out all applications that have the <span style="font-family: Courier New,Courier,monospace">nodisplay</span> property set to <span style="font-family: Courier New,Courier,monospace">true</span> and leaves only those that are displayable.</p>

<pre class="prettyprint">
if (app_info_filter_create(&amp;appmgr_data.app_info_filter) != APP_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}

if (app_info_filter_add_bool(appmgr_data.app_info_filter, PACKAGE_INFO_PROP_APP_NODISPLAY, false) != APP_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>
<p>Use the filter to execute the supplied callback function (<span style="font-family: Courier New,Courier,monospace">__app_info_cb()</span>) for each application that satisfies the filter condition using the <span style="font-family: Courier New,Courier,monospace">app_info_filter_foreach_appinfo()</span> function. The function takes the filter handle, callback function, and user defined data as parameters.</p>

<pre class="prettyprint">
if (app_info_filter_foreach_appinfo(appmgr_data.app_info_filter, __app_info_cb, NULL) != APP_MANAGER_ERROR_NONE) 
{
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre></li>

<li>
<p>The callback function retrieves the application data. Its first parameter (<span style="font-family: Courier New,Courier,monospace">app_info</span>) is used to retrieve various information with the following functions:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">app_info_get_app_id()</span>: Get the application ID</li>
 <li><span style="font-family: Courier New,Courier,monospace">app_info_get_icon()</span>: Get the application icon path</li>
 <li><span style="font-family: Courier New,Courier,monospace">app_manager_is_running()</span>: Get the running state of the application (the Taskmanager only displays running applications)</li>
</ul>
<p>If the application is running and its ID does not match the Taskmanager ID, it is saved in the application list. The Taskmanager ID was retrieved earlier using the <span style="font-family: Courier New,Courier,monospace">app_get_id()</span> function from the Tizen <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APP__COMMON__MODULE.html">App Common</a> API.</p>

<pre class="prettyprint">
static bool
__app_info_cb(app_info_h app_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Variable declaration and initialization

&nbsp;&nbsp;&nbsp;if (app_info_get_app_id(app_info, &amp;app_id) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_info_get_icon(app_info, &amp;app_icon) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_manager_is_running(app_id, &amp;running) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (running &amp;&amp; __compare_strings(app_id, appmgr_data.taskmgr_id)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new_item = item_create(app_id, app_icon);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!new_item) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appmgr_data.apps_list = eina_list_append(appmgr_data.apps_list, new_item);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}

static int
__compare_strings(char *app_id1, char *app_id2)
{
&nbsp;&nbsp;&nbsp;int ret = strncmp(app_id1, app_id2, ITEM_APP_ID_STR_MAX_LENGTH);

&nbsp;&nbsp;&nbsp;if (strlen(app_id1) == strlen(app_id2) &amp;&amp; !ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ret &gt; 0 ? 1 : -1;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li><p>After all applications with the <span style="font-family: Courier New,Courier,monospace">nodisplay</span> flag set to <span style="font-family: Courier New,Courier,monospace">false</span> has been checked, the application list is sorted using the <span style="font-family: Courier New,Courier,monospace">eina_list_sort()</span> function:</p>

<p>The function takes the <span style="font-family: Courier New,Courier,monospace">Eina_List</span> component as the first parameter. The second parameter defines the maximum number of list elements to sort. If it is set to 0, all elements are sorted. The last parameter is a pointer to a function that handles list data comparisons. It compares <span style="font-family: Courier New,Courier,monospace">data1</span> and <span style="font-family: Courier New,Courier,monospace">data2</span>, and returns 0 if they are equal, -1 if the first data is smaller, and 1 if it is bigger.</p>

<pre class="prettyprint">
appmgr_data.apps_list = eina_list_sort(appmgr_data.apps_list, 0, __compare_items_cb);

static int
__compare_items_cb(const void *data1, const void *data2)
{
&nbsp;&nbsp;&nbsp;app_item_t *item1 = NULL;
&nbsp;&nbsp;&nbsp;app_item_t *item2 = NULL;

&nbsp;&nbsp;&nbsp;if (!data1 || !data2) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;item1 = (app_item_t *)data1;
&nbsp;&nbsp;&nbsp;item2 = (app_item_t *)data2;

&nbsp;&nbsp;&nbsp;return __compare_strings(item1-&gt;app_id, item2-&gt;app_id);
}
</pre>

<p>After all comparisons are done, the sorted list is returned to be handled by the view module.</p></li></ol>

<p>Apart from retrieving application data, the Taskmanager also enables the user to resume or terminate an application running in the background:</p>

<ol><li>Before the resume or terminate actions can be performed, the application context must be acquired using the <span style="font-family: Courier New,Courier,monospace">app_manager_get_app_context()</span> function with the application ID as a parameter. </li>
<li>Use the <span style="font-family: Courier New,Courier,monospace">app_manager_resume_app()</span> and <span style="font-family: Courier New,Courier,monospace">app_manager_request_terminate_bg_app()</span> functions cto resume or terminate the application.
<p>Both functions take the application context as a parameter.</p></li>
<li>After the context is no longer needed, destroy it using the <span style="font-family: Courier New,Courier,monospace">app_context_destroy()</span> function.</li></ol>

<p>The following example shows the <span style="font-family: Courier New,Courier,monospace">application_mgr_resume_app()</span> and <span style="font-family: Courier New,Courier,monospace">application_mgr_terminate_app()</span> functions:</p>

<pre class="prettyprint">
bool
application_mgr_resume_app(char *app_id)
{
&nbsp;&nbsp;&nbsp;app_context_h app_context = NULL;

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (app_manager_get_app_context(app_id, &amp;app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_manager_resume_app(app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_context_destroy(app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}

bool
application_mgr_terminate_app(char *app_id)
{
&nbsp;&nbsp;&nbsp;app_context_h app_context = NULL;

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (app_manager_get_app_context(app_id, &amp;app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_manager_request_terminate_bg_app(app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_context_destroy(app_context) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp; __remove_app_from_list(app_id);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>When all Taskmanager resources are released, use the <span style="font-family: Courier New,Courier,monospace">app_info_filter_destroy()</span> function to destroy the application manager filter created earlier. The application list as well as each list item also have to be released. The <span style="font-family: Courier New,Courier,monospace">application_mgr_destroy()</span> function is called when the Taskmanager application is terminated.</p>

<pre class="prettyprint">
bool
application_mgr_destroy(void)
{
&nbsp;&nbsp;&nbsp;if (app_info_filter_destroy(appmgr_data.app_info_filter) != APP_MANAGER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;appmgr_data.app_info_filter = NULL;

&nbsp;&nbsp;&nbsp;_clear_application_list();

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3>View Manager Module</h3>

<p>The base GUI is created from the Tizen IDE template for developing UI applications with EDC. It consists of a window, a conformant, and an EDC layout. The layout has 2 parts:</p> 
<ul>
<li><span style="font-family: Courier New,Courier,monospace">swallow</span>: Takes up all the layout space where the application genlist is inserted.</li>
<li><span style="font-family: Courier New,Courier,monospace">text</span>: Placed at the center where the &quot;No applications&quot; string is displayed if the application list is empty.</li>
</ul>

<p>To create the genlist:</p>
<ol><li>
<p>The genlist is created using the <span style="font-family: Courier New,Courier,monospace">elm_genlist_add()</span> function. For the genlist to be displayed properly, a genlist item class has to be created and defined with the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_class_new()</span> function. The following code snippet demonstrates how to set the item class properties. The <span style="font-family: Courier New,Courier,monospace">full</span> style means that the whole area of a genlist item is an icon (<span style="font-family: Courier New,Courier,monospace">elm.swallow.content</span>). A custom item layout is inserted as each item&#39;s content. Apart from the item style, a <span style="font-family: Courier New,Courier,monospace">content_get</span> callback function is also defined. It is called when an item is appended to the genlist and contains the item layout creation.</p>

<pre class="prettyprint">
Evas_Object *genlist = elm_genlist_add(viewdata.win);

// Error handling

viewdata.item_class = elm_genlist_item_class_new();

// Error handling

viewdata.item_class-&gt;item_style = &quot;full&quot;;
viewdata.item_class-&gt;func.text_get = NULL;
viewdata.item_class-&gt;func.content_get = __get_item_content;
viewdata.item_class-&gt;func.state_get = NULL;
viewdata.item_class-&gt;func.del = NULL;
</pre></li>

<li>
<p>The genlist is filled using the <span style="font-family: Courier New,Courier,monospace">view_display_application_list()</span> function. To append items to the genlist, the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> function is invoked for each <span style="font-family: Courier New,Courier,monospace">Eina_List</span> item.</p>

<pre class="prettyprint">
EINA_LIST_FOREACH(app_list, it, item)
&nbsp;&nbsp;&nbsp;elm_genlist_item_append(viewdata.genlist, viewdata.item_class, (void *)item, NULL, ELM_GENLIST_ITEM_NONE, NULL, NULL);
</pre></li>

<li>
<p>The application&#39;s <span style="font-family: Courier New,Courier,monospace">app_item_t</span> structure containing its ID and icon path is passed as the data argument to the appending function. It is later passed on to the previously defined callback function. The following example shows the <span style="font-family: Courier New,Courier,monospace">content_get</span> callback function. Application data is retrieved from the parameter and used to create the item layout.</p>
<pre class="prettyprint">
static Evas_Object *
__get_item_content(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;app_item_t *item = (app_item_t *)data;

&nbsp;&nbsp;&nbsp;return __create_item_layout(obj, item-&gt;app_id, item-&gt;icon_path);
}
</pre></li>

<li><p>The item layout consists of a background, an icon, and a text part. The application ID is copied to the text part and its icon path is used to create an icon. To enable swiping an item left or right to terminate the application, the <span style="font-family: Courier New,Courier,monospace">draggable</span> block is used, and the item can be dragged around the interface. The following example shows how to define the <span style="font-family: Courier New,Courier,monospace">draggable</span> block. Note that it only has to be included in the background description, as the other parts&#39; positions are relative to it and remain confined to it.</p>

<pre class="prettyprint">
part 
{
&nbsp;&nbsp;&nbsp;name: ITEM_PART_BASE;
&nbsp;&nbsp;&nbsp;type: RECT;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 0;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;draggable 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x: 1 1 2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y: 0 0 0;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>There are 2 lines in the <span style="font-family: Courier New,Courier,monospace">draggable</span> block: x and y, which define the movement in horizontal and vertical axes, respectively. The first argument in each line defines whether dragging along this axis is enabled (1 or -1) or disabled (0). In this example, dragging is possible only in the x axis. The second and third arguments define the step of the movement.</p></li></ol>

<p>To detect user interaction, a callback for the <span style="font-family: Courier New,Courier,monospace">mouse_up</span> event is set for each item layout. There are 3 actions to perform, and to distinguish which action is performed, the drag value is obtained using the <span style="font-family: Courier New,Courier,monospace">edje_object_part_drag_value_get()</span> function that defines how much the object has been dragged. It takes the object&#39;s edje object as a parameter, and it needs to be acquired from the layout first using the <span style="font-family: Courier New,Courier,monospace">elm_layout_edje_get()</span> function. You also need to pass as a parameter the name of the part whose drag you want to measure. The actions are:</p>
<ul>
 <li>Tap the item
 <p>A tap gesture is detected when the drag value equals 0. When it happens, the coordinates of the <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Up</span> event are used to retrieve the item using the <span style="font-family: Courier New,Courier,monospace">elm_genlist_at_xy_item_get()</span> function. The item data is acquired from it using the <span style="font-family: Courier New,Courier,monospace">elm_object_item_data_get()</span> function, after which the application ID is passed to the <span style="font-family: Courier New,Courier,monospace">application_mgr_resume_app()</span> function to resume the given application.</p></li>
 <li>Swipe it left or right to the edge of the screen
 <p>In this application, a swipe gesture occurs when the absolute value of the drag value is greater than <span style="font-family: Courier New,Courier,monospace">ITEM_DRAG_OUTSIDE_VAL</span>. When this happens, a signal is emitted to the item layout to hide its content. The genlist item at the <span style="font-family: Courier New,Courier,monospace">Evas_Event_Mouse_Up</span> event coordinates is retrieved using the <span style="font-family: Courier New,Courier,monospace">elm_genlist_at_xy_item_get()</span> function. The acquired pointer is used to delete the item with the <span style="font-family: Courier New,Courier,monospace">elm_object_item_del()</span> function. After it is deleted, the genlist item count is checked: if it equals 0, there are no running applications left, and the <span style="font-family: Courier New,Courier,monospace">view_display_no_applications()</span> function has to be called to update the view.</p></li>
 <li>Move the item left or right, but not far enough to indicate the swipe gesture</li>
</ul>

<pre class="prettyprint">
static void
__item_layout_mouse_up_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Variable declaration and initialization

&nbsp;&nbsp;&nbsp;edje = elm_layout_edje_get(obj);
&nbsp;&nbsp;&nbsp; edje_object_part_drag_value_get(edje, ITEM_PART_BASE, &amp;dx, NULL);

&nbsp;&nbsp;&nbsp;if (dx == 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Item was not dragged left/right - item was clicked, resume application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genlist_item = elm_genlist_at_xy_item_get(viewdata.genlist, mouse_up_ev-&gt;canvas.x, mouse_up_ev-&gt;canvas.y, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_item_t *item = (app_item_t *)elm_object_item_data_get(genlist_item);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application_mgr_resume_app(item-&gt;app_id);

&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (dx &lt; ITEM_DRAG_OUTSIDE_VAL &amp;&amp; dx &gt; -ITEM_DRAG_OUTSIDE_VAL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Item was dragged, but not far enough to terminate application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(obj, ITEM_PROGRAM_RESET_POSITION_SIGNAL, ITEM_PROGRAM_RESET_POSITION_SOURCE);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Item was dragged to left/right edge of the screen - terminate application
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(obj, ITEM_PROGRAM_HIDE_SIGNAL, ITEM_PROGRAM_HIDE_SOURCE);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;genlist_item = elm_genlist_at_xy_item_get(viewdata.genlist, mouse_up_ev-&gt;canvas.x, mouse_up_ev-&gt;canvas.y, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__delete_item(genlist_item);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (elm_genlist_items_count(viewdata.genlist) == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_display_no_applications();

&nbsp;&nbsp;&nbsp;}
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>