<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Mobile Native Sample Descriptions</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>
	
  <h1>Mobile Native Sample Descriptions</h1> 
 
   <p>To access general information about the native sample functionality and the content of the sample source files, click the sample name in the following tables.</p> 
   
   
   <table border="1"> 
   <caption>
     Table: Mobile native samples in the Tizen SDK
   </caption> 
   <colgroup> 
    <col /> 
    <col /> 
   </colgroup> 
   <tbody> 
    <tr> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Sample name</th> 
     <th style="text-align:center;margin-left:auto;margin-right:auto;">Description</th> 
    </tr> 
	<tr>
     <td><a href="appcommon_sd_mn.htm">Application Common</a></td>
     <td>Demonstrates how you can use Application Common module of the Tizen API for application related information extraction.</td>
    </tr>
	<tr>
     <td><a href="application_control_sd_mn.htm">Application Control</a></td>
     <td>Demonstrates how you can search for applications supporting specific classes of operations and run them using the operation contexts.</td>
	</tr>
	<tr>
     <td><a href="bluetoothchat_sd_mn.htm">Bluetooth Chat</a></td>
     <td>Demonstrates how you can send and receive data between 2 devices.</td>
	</tr>
    <tr>
     <td><a href="bundle_sd_mn.htm">Bundle</a></td>
     <td>Demonstrates how you can manipulate bundle objects.</td>
	</tr>
	<tr> 
     <td><a href="cairo_basic_sd_mn.htm">Cairo Basic</a></td> 
     <td>Demonstrates how you can implement the Cairo image backend.</td>
    </tr>
	<tr> 
     <td><a href="cairo_evasgl_sd_mn.htm">Cairo EvasGL</a></td> 
     <td>Demonstrates how you can implement the Cairo GL backend with the Evas_GL surface.</td>
    </tr>	
    <tr>
     <td><a href="calculator_sd_mn.htm">Calculator</a></td> 
     <td>Demonstrates how you can implement an advanced calculator application.</td>
    </tr>
	<tr> 
     <td><a href="contacts_sd_mn.htm">Contacts</a></td> 
     <td>Demonstrates how you can manage contacts.</td>
    </tr>
	<tr> 
     <td><a href="evas_gl_sd_mn.htm">EvasGLCube</a></td>
     <td>Demonstrates how you can implement a cube that can be rotated on the screen through Evas_GL.</td>
    </tr>
	<tr> 
     <td><a href="file_manager_sd_mn.htm">File Manager</a></td> 
     <td>Demonstrates how you can implement a complex view using EFL UI components and containers.</td>
    </tr>
	<tr> 
     <td><a href="glview11_cube_sd_mn.htm">GLView11Cube</a></td> 
     <td>Demonstrates how you can use ElmGLView to create a 3D cube on the screen.</td>
    </tr>
	<tr> 
     <td><a href="glview_cube_sd_mn.htm">GLViewCube</a></td> 
     <td>Demonstrates how you can implement a simple UI and draw a rotating cube using simple vertex and fragment shaders.</td>
    </tr>
	<tr> 
     <td><a href="glview_shader_sd_mn.htm">GLViewShader</a></td> 
     <td>Demonstrates how you can render more complex geometric shapes with OepnGL&reg; ES and use Elementary GLView helper macros to port existing code.</td>
    </tr>
    <tr>
     <td><a href="gps_consumer_sd_mn.htm">GPS Consumer</a></td>
     <td>Demonstrates how you can implement a location-based application using the geolocation data provided by an external service (<a href="gps_service_sd_mn.htm">GPS Service</a>).</td>
    </tr>
    <tr>
     <td><a href="gps_service_sd_mn.htm">GPS Service</a></td>
     <td>Demonstrates how you can implement a Tizen service providing geolocation data using the IPC mechanism from the Tizen API.</td>
    </tr>
	<tr> 
     <td><a href="hybridservice_sd_mn.htm">HybridServiceApp</a></td> 
     <td>Demonstrates how you can communicate with a Tizen Web application (<a href="../mobile_w/hybridwebapp_mw.htm">HybridWebApp</a>) to manage the timer for the Web application.</td>
    </tr>
	<tr> 
     <td><a href="lockscreen_sd_mn.htm">Lockscreen</a></td> 
     <td>Demonstrates how you can implement a screen locking mechanism.</td>
    </tr>
	<tr> 
     <td><a href="mediaapp_sd_mn.htm">Media App</a></td> 
     <td>Demonstrates how you can develop media handling applications with the ability to manage different media sources.</td>
    </tr>
	<tr> 
     <td><a href="notificationmanager_sd_mn.htm">Notification Manager</a></td> 
     <td>Demonstrates how you can present a notification to the user.</td>
    </tr>
    <tr>
     <td><a href="paint_sd_mn.htm">Paint</a></td>
     <td>Demonstrates how you can draw on an Evas canvas.</td>
    </tr>
    <tr>
     <td><a href="pedometer_sd_mn.htm">Pedometer</a></td>
     <td>Demonstrates how you can implement a simple pedometer.</td>
    </tr>	
	<tr> 
     <td><a href="piano_sd_mn.htm">Piano</a></td> 
     <td>Demonstrates how you can implement a complex view using EFL UI components with different EDC styles.</td>
    </tr>
	<tr>
     <td><a href="preference_sd_mn.htm">Preference</a></td>
     <td>Demonstrates how you can work with custom preferences.</td>
    </tr>
	<tr>
     <td><a href="puzzle_sd_mn.htm">Puzzle</a></td>
     <td>Demonstrates how you can implement a complex view using recursive composition of the standard EFL components.</td>
    </tr>
	<tr>
     <td><a href="quickpanel_sd_mn.htm">Quickpanel</a></td>
    <td>Demonstrates how you can create a custom quickpanel window and use volume, LED, and Wi-Fi APIs to acquire and set related device settings.</td>
    </tr>
	<tr> 
     <td><a href="scheduler_sd_mn.htm">Scheduler</a></td> 
     <td>Demonstrates how you can manage scheduling of calendar events and other calendar options.</td>
    </tr>
	<tr>
    <td><a href="scroller_index_sd_mn.htm">Scroller Index</a></td>
     <td>Demonstrates how you can implement an animated index connected with an Elm scroller component.</td>
    </tr>

	<tr> 
     <td><a href="selfcamera_sd_mn.htm">SelfCamera</a></td> 
     <td>Demonstrates how you can use the front camera in your application.</td>
    </tr>
	<tr> 
     <td><a href="sensorapp_sd_mn.htm">SensorApp</a></td> 
     <td>Demonstrates how you can retrieve data from various Tizen sensor types.</td>
    </tr>
    <tr>
     <td><a href="simple_home_sd_mn.htm">Simple Homescreen</a></td>
     <td>Demonstrates how you can implement a simple Homescreen-like application.</td>
    </tr>
	<tr>
     <td><a href="sketch_sd_mn.htm">Sketch</a></td>
     <td>Demonstrates how you can implement an image view and change the color using raw image data of the standard EFL components.</td>
    </tr>
	<tr>
     <td><a href="stopwatch_sd_mn.htm">Stopwatch</a></td>
     <td>Demonstrates how you can implement a complex view using recursive composition of the standard EFL UI components and containers in a component hierarchy.</td>
    </tr>
	<tr>
     <td><a href="systeminfo_sd_mn.htm">System Info</a></td>
     <td>Demonstrates how you how to get system information.</td>
    </tr>
	<tr>
     <td><a href="taskmanager_sd_mn.htm">Taskmanager</a></td>
     <td>Demonstrates how you can manage running applications as well as acquire information about them.</td>
    </tr>
	<tr> 
     <td><a href="ui_components_sd_mn.htm">UI Components</a></td>  
     <td>Demonstrates how you can implement an interactive application GUI with basic Elementary UI components.</td>
    </tr>	
	<tr>
     <td><a href="volume_sd_mn.htm">Volume</a></td>
     <td>Demonstrates how you can acquire and set the device sound levels.</td>
    </tr>
	<tr> 
     <td><a href="ui_alignment_sd_mn.htm">[UI Sample] Alignment</a></td> 
     <td>Demonstrates how you can place objects on the layout.</td>
    </tr>
	<tr> 
     <td><a href="ui_animation_sd_mn.htm">[UI Sample] Animation</a></td> 
     <td>Demonstrates how you can animate an object using EDC context.</td>
    </tr>
	<tr> 
     <td><a href="ui_animator_sd_mn.htm">[UI Sample] Animator</a></td> 
     <td>Demonstrates how you can display rectangles with an animation effect using EFL animator and timer functions.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_app_store_sd_mn.htm">[UI Sample] ApplicationStore</a></td> 
     <td>Demonstrates how you can implement an application store view with several boxes and buttons.</td>
    </tr>
	<tr> 
     <td><a href="ui_box_sd_mn.htm">[UI Sample] Box</a></td> 
     <td>Demonstrates how you can display a number of rectangles using the EFL smart object.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_calculator_sd_mn.htm">[UI Sample] Calculator</a></td> 
     <td>Demonstrates how you can implement a simple calculator application with complex views.</td>
    </tr>
	<tr> 
     <td><a href="ui_clock_sd_mn.htm">[UI Sample] Clock</a></td> 
     <td>Demonstrates how you can implement a clock application with different views.</td>
    </tr>
	<tr> 
     <td><a href="ui_ecore_thread_1_sd_mn.htm">[UI Sample] Ecore Thread 1</a></td> 
     <td>Demonstrates how you can move a button using EFL thread-related functions.</td>  
    </tr>
	<tr> 
     <td><a href="ui_ecore_thread_2_sd_mn.htm">[UI Sample] Ecore Thread 2</a></td> 
     <td>Demonstrates how you can design threads to work together with the Ecore main loop by considering synchronization and mutual exclusion.</td>  
    </tr>
	<tr> 
     <td><a href="ui_ecore_thread_3_sd_mn.htm">[UI Sample] Ecore Thread 3</a></td> 
     <td>Demonstrates how you can design threads to work together with the Ecore main loop by considering asynchronization and mutual exclusion. </td>  
    </tr>
	<tr> 
     <td><a href="ui_ecore_thread_4_sd_mn.htm">[UI Sample] Ecore Thread 4</a></td> 
     <td>Demonstrates how you can move a button using EFL thread feedback functions.</td>  
    </tr>
	<tr> 
     <td><a href="ui_ecore_thread_5_sd_mn.htm">[UI Sample] Ecore Thread 5</a></td> 
     <td>Demonstrates how you can use the multi-thread functionality by EAPI.</td>  
    </tr>
	<tr> 
     <td><a href="ui_ecoreevent_sd_mn.htm">[UI Sample] EcoreEvent</a></td> 
     <td>Demonstrates how you can create an event handler using EFL Ecore event functions.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_edc_map_sd_mn.htm">[UI Sample] EDC Map</a></td> 
     <td>Demonstrates how you can implement 3D effects using the EDC map.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_edc_format_sd_mn.htm">[UI Sample] EDCformat</a></td> 
     <td>Demonstrates how you can organize and use the EDC.</td>
    </tr>
	<tr> 
     <td><a href="ui_elmtransit_sd_mn.htm">[UI Sample] Elm Transit</a></td> 
     <td>Demonstrates how you can add the translation and rotation effect on the Evas object.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_email_sd_mn.htm">[UI Sample] Email</a></td> 
     <td>Demonstrates how you can implement a complex email application view.</td>
    </tr>
	<tr> 
     <td><a href="ui_evas_map_sd_mn.htm">[UI Sample] Evas Map</a></td> 
     <td>Demonstrates how you can display a rectangle and an image which are applied by the Evas map using EFL Evas map util functions.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_evas_map_mapping_sd_mn.htm">[UI Sample] Evas Map Mapping</a></td> 
     <td>Demonstrates how you can apply UV mapping to an Evas object (button) by using EFL Evas map util functions.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_evas_map_rotation_sd_mn.htm">[UI Sample] Evas Map Rotation</a></td> 
     <td>Demonstrates how you can rotate a button in 3D using EFL map functions.</td>  
    </tr>
	<tr> 
     <td><a href="ui_evasevent_sd_mn.htm">[UI Sample] Evas Event</a></td> 
     <td>Demonstrates how you can register a callback function on Evas or an Evas object for a specific event.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_gallery_sd_mn.htm">[UI Sample] Gallery</a></td> 
     <td>Demonstrates how you can implement a gallery view to display images.</td> 
    </tr>
	<tr> 
     <td><a href="ui_idler_sd_mn.htm">[UI Sample] Idler</a></td> 
     <td>Demonstrates how you can operate the idler functionality in Ecore.</td>  
    </tr>
	<tr> 
     <td><a href="ui_image_sd_mn.htm">[UI Sample] Image</a></td> 
     <td>Demonstrates how you can display an image on the canvas using EFL image object functions.</td>  
    </tr>
	<tr> 
     <td><a href="ui_inlist_sd_mn.htm">[UI Sample] InList</a></td> 
     <td>Demonstrates how you can manage inline lists using EFL InList functions.</td>  
    </tr>
	<tr> 
     <td><a href="ui_job_sd_mn.htm">[UI Sample] Job</a></td> 
     <td>Demonstrates how you can add and delete an <span style="font-family: Courier New,Courier,monospace">Ecore_Job</span>, and show how they always execute in the added order.</td> 
    </tr>	
	<tr> 
     <td><a href="ui_language_change_sd_mn.htm">[UI Sample] LanguageChange</a></td> 
     <td>Demonstrates how you can implement an application that supports multiple languages and language change at runtime.</td> 
    </tr>
	<tr> 
     <td><a href="ui_layout_samples_sd_mn.htm">[UI Sample] LayoutSample</a></td> 
     <td>Demonstrates how you can implement a common layout for your application.</td> 
    </tr>	
	<tr> 
     <td><a href="ui_layout_signal_sd_mn.htm">[UI Sample] LayoutSignal</a></td> 
     <td>Demonstrates how you can implement an instant messaging application through EFL UI components and containers.</td> 
    </tr>
	<tr> 
     <td><a href="ui_list_sd_mn.htm">[UI Sample] List</a></td> 
     <td>Demonstrates how you can use double-linked list data structure using EFL list functions.</td>  
    </tr>		
	<tr> 
     <td><a href="ui_message_bubble_sd_mn.htm">[UI Sample] MessageBubble</a></td> 
     <td>Demonstrates how you can manage communication between Edje code and C code through EFL UI components and containers.</td> 
    </tr>
		<tr> 
     <td><a href="ui_proxy_object_sd_mn.htm">[UI Sample] Proxy Object</a></td> 
     <td>Demonstrates how you can make a proxy object for an Evas object.</td>  
    </tr>
	<tr> 
     <td><a href="ui_rectangle_sd_mn.htm">[UI Sample] Rectangle</a></td> 
     <td>Demonstrates how you can display a rectangle on the canvas using EFL Evas object functions and how to move and resize the rectangle. </td>  
    </tr>
	<tr> 
     <td><a href="ui_relative_sd_mn.htm">[UI Sample] RelativePositioning</a></td> 
     <td>Demonstrates how you can place an object on the basis of another object.</td>
    </tr>
	<tr> 
     <td><a href="ui_sns_sd_mn.htm">[UI Sample] SNS</a></td> 
     <td>Demonstrates how you can implement a scrollable view with tables and buttons through EFL UI components and containers.</td>    
    </tr>	
	<tr> 
     <td><a href="ui_setting_sd_mn.htm">[UI Sample] Setting</a></td> 
     <td>Demonstrates how you can implement a Settings application with pop-up menus and different views through EFL UI components and containers. </td>  
    </tr>
	<tr> 
     <td><a href="ui_stringshare_sd_mn.htm">[UI Sample] StringShare</a></td> 
     <td>Demonstrates how you can store a string and use it in multiple places throughout a program.</td>  
    </tr>	
	<tr> 
     <td><a href="ui_theme_extension_sd_mn.htm">[UI Sample] ThemeExtension</a></td> 
     <td>Demonstrates how you can modify the look and feel of your application with custom themes and styles.</td>   
    </tr>
	<tr> 
     <td><a href="ui_timer_sd_mn.htm">[UI Sample] Timer</a></td> 
     <td>Demonstrates how you can use Ecore timer and adjust the specific timers in the timer list.</td>  
    </tr>	
   </tbody> 
  </table> 
 
 
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
