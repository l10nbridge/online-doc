<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Drag and Drop Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Drag and Drop Sample Overview</h1> 

  <p>The Drag and Drop sample application demonstrates how you can implement a drag-and-drop operation using a generic API from EFL. The sample provides a user interface in the form of an image gallery. The drag-and-drop operation is used to arrange images into the favorite section.</p>
  <p>The following figure illustrates the application views.</p>
  <p class="figure">Figure: Drag and Drop screens</p>
  <p align="center"><img alt="Main view" src="../images/drag_and_drop_main_view_sd.png" /> <img alt="Favorites" src="../images/drag_and_drop_favorites_sd.png" /> <img alt="Dragging" src="../images/drag_and_drop_dragging_sd.png" /> <img alt="Pop-up" src="../images/drag_and_drop_popup_sd.png" /></p>

  <p>The application user interface is split into 2 sections:</p>
  <ul>
    <li>Image browser is a preview of all available images arranged in a vertically scrollable list.</li>
    <li>Favorites is a preview of all images set as favorite. This section can contain up to 4 images.</li>
  </ul>
  
  <p>The user can:</p>
  <ul>
    <li>Set an image as favorite by dragging it from the image browser to the favorites section.</li>
    <li>Remove an image from favorites by dragging it away from the favorites section.</li>
  <li>Rearrange the favorites by dragging and dropping images within the favorites section.</li>
  </ul>

<h2>Implementation</h2>
<p>The application code is divided into 3 modules.</p>

<p class="figure">Figure: Drag and Drop application modules</p>
<p align="center"><img alt="Drag and Drop application modules" src="../images/drag_and_drop_modules.png" /></p>

<p>Each module provides a separate functionality:</p>
<ul>
  <li>The main module contains the code automatically generated by the Tizen SDK when you create a new native project with EDJE files. The module initializes the application instance and handles app control event callbacks.</li>
  <li>The view module is responsible for creating the image browser component (<span style="font-family: Courier New,Courier,monospace">elm_genlist</span>) and the favorites section at the bottom of the screen (<span style="font-family: Courier New,Courier,monospace">elm_gengrid</span>). It also handles drag and drop events and callbacks.</li>
  <li>The data module is responsible for reading information from the resources folder. It also updates the application&#39;s preference database when favorite content is changed.</li>
</ul>

<h3>Main Module</h3>
<p>The main application module implementation file is generated by the Tizen SDK. The following updates have been introduced to it:</p>

<ul><li><p>A static structure to handle the main window size and a public function to share it between modules, if necessary:</p>
<pre class="prettyprint">
static struct 
{
&nbsp;&nbsp;&nbsp;int win_width;
&nbsp;&nbsp;&nbsp;int win_height;
} s_info = 
{
&nbsp;&nbsp;&nbsp;.win_width = -1,
&nbsp;&nbsp;&nbsp;.win_height = -1,
};

int 
app_get_win_width(void)
{
&nbsp;&nbsp;&nbsp;return s_info.win_width;
}
</pre></li>

<li><p>The image browser and the favorites section are initialized in the <span style="font-family: Courier New,Courier,monospace">_create_base_gui()</span> function:</p>

<pre class="prettyprint">
static void 
_create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;img_browser = view_image_browser_create(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;fav_browser = view_favorites_browser_create(ad-&gt;layout);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, PART_IMG_BROWSER, img_browser);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, PART_FAV_BROWSER, fav_browser);
}
</pre>

<p>As shown above, after an object is created, it must be inserted into the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component. For this purpose, use the <span style="font-family: Courier New,Courier,monospace">elm_object_part_content_set()</span> function. In this sample application, the <span style="font-family: Courier New,Courier,monospace">conf.h</span> file is used to define all <span style="font-family: Courier New,Courier,monospace">public</span> parts declared in the EDJE file. This is a good approach to avoid typo errors.</p></li>

<li><p>For the definition of the main layout, only one EDJE script file is used. The following code snippet shows the structure of this file.</p>

<p>At the beginning, the <span style="font-family: Courier New,Courier,monospace">conf.h</span> file is included to access the preprocessor definitions and use them as valid part names. The EDJE script file defines 2 swallow parts, which are the placeholders for the image browser and the favorites component.</p>
<pre class="prettyprint">
#include &quot;../../inc/conf.h&quot;

collections 
{
&nbsp;&nbsp;&nbsp;group 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: &quot;main&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parts 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ============================ SWALLOW PART FOR GENLIST =======================
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_IMG_BROWSER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.2 0.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 0.8 0.7;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ============================ SWALLOW PART FOR GENGRID =======================
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;part 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: PART_FAV_BROWSER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: SWALLOW;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 {relative: 0.0 0.7;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 {relative: 1.0 1.0;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ul>

<p>The following figure illustrates the base UI layout structure.</p>
<p class="figure">Figure: Application layout structure</p>
<p align="center"><img alt="Application layout structure" src="../images/drag_and_drop_structure.png" /></p>

<h3>View Module</h3>
<p>The view module implementation is included in the <span style="font-family: Courier New,Courier,monospace">view.c</span> file, which is divided into 6 parts:</p>
<ul>
  <li>Static structure, used for storing the drag and drop data and other necessary information</li>
  <li>Local functions</li>
  <li>Genlist-related functions</li>
  <li>Gengrid-related functions</li>
  <li>Drag and drop-related functions</li>
  <li>Public functions&#39; implementation</li>
</ul>

<p>The implementation of the public functions is related to the creation of the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> and <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> components:</p>

<ul>
<li>
<p>To create <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component:</p>

<ol>
  <li>The UI component creation function is invoked from the main module. In this case, the <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component is the parent, so when the main window is removed, it also removes the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component.</li>
  <li><span style="font-family: Courier New,Courier,monospace">Elm_Genlist_Item_Class</span> is used when a new item is added into the genlist component. This step is related to the default configuration of the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> item class. This class is stored in a static structure so it needs to be done only once.</li>
  <li>Connect the <span style="font-family: Courier New,Courier,monospace">_item_longpressed_cb</span> function to the <span style="font-family: Courier New,Courier,monospace">longpressed</span> smart callback.</li>
  <li>Genlist must react to &quot;drop&quot; events. The <span style="font-family: Courier New,Courier,monospace">Elm_drop_target_add()</span> function sets the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component as a drop container, so when the user moves an icon over the genlist and drops it, the <span style="font-family: Courier New,Courier,monospace">_genlist_dnd_drop_cb()</span> callback is invoked.</li>
</ol>

<pre class="prettyprint">
Evas_Object 
*view_image_browser_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *genlist = NULL;

&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;genlist = elm_genlist_add(parent);

&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;if (!s_info.list_it_class)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class-&gt;item_style = &quot;default&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class-&gt;func.content_get = _genlist_content_get;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class-&gt;func.del = _genlist_content_del;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class-&gt;func.text_get = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.list_it_class-&gt;func.state_get = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// (3)
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(genlist, &quot;longpressed&quot;, _item_longpressed_cb, NULL);

&nbsp;&nbsp;&nbsp;// (4)
&nbsp;&nbsp;&nbsp;elm_drop_target_add(genlist, ELM_SEL_FORMAT_TARGETS,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_genlist_dnd_drop_cb, NULL);
}
</pre></li>

<li>
<p>The creation of the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component is similar:</p>
<ol>
  <li>In addition to the <span style="font-family: Courier New,Courier,monospace">longpressed</span> callback, the application registers the <span style="font-family: Courier New,Courier,monospace">realized</span> callback. The <span style="font-family: Courier New,Courier,monospace">_gengrid_items_realized_cb()</span> function is invoked every time an item in <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> is updated (such as is appended or changes content). The callback is used to obtain the updated content list.</li>
</ol>
<pre class="prettyprint">
Evas_Object 
*view_image_browser_create(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;gengrid = elm_gengrid_add(parent);

&nbsp;&nbsp;&nbsp;if (!s_info.grid_it_class)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class = elm_gengrid_item_class_new();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class-&gt;item_style = &quot;default&quot;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class-&gt;func.content_get = _gengrid_content_get;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class-&gt;func.del = _gengrid_content_del;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class-&gt;func.text_get = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.grid_it_class-&gt;func.state_get = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(gengrid, &quot;longpressed&quot;, _item_longpressed_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(gengrid, &quot;realized&quot;, _gengrid_items_realized_cb, NULL);

&nbsp;&nbsp;&nbsp;elm_drop_target_add(gengrid, ELM_SEL_FORMAT_TARGETS,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_gengrid_dnd_drop_cb, NULL);
}
</pre></li></ul>

<p>After the UI components are created, the application reads data from resources and inserts it in the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component:</p>

<ol>
  <li>To obtain the available images, an external function from the data module is used.</li>
  <li>In a for loop, new genlist items are added. The <span style="font-family: Courier New,Courier,monospace">elm_genlist_item_append()</span> function is used to append a new item into the genlist. This function invokes the callback connected to the genlist item class.</li>
</ol>

<pre class="prettyprint">
// (1)
l_img_paths = data_available_images_get();

c = eina_list_count(l_img_paths);

// (2)
for (i = 0 ; i &lt; c; i++)
{
&nbsp;&nbsp;&nbsp;elm_genlist_item_append(genlist, s_info.list_it_class, eina_list_nth(l_img_paths, i), 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, ELM_GENLIST_ITEM_NONE, NULL, NULL);
}

eina_list_free(l_img_paths);
</pre>

<ol>
  <li>The <span style="font-family: Courier New,Courier,monospace">data</span> variable is a pointer to a char passed to the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_append()</span> function.</li>
  <li>The <span style="font-family: Courier New,Courier,monospace">_genlist_item_content_get()</span> function is used for each part in the <span style="font-family: Courier New,Courier,monospace">elm_genlist_item()</span> function: The number and name of a part depends on the item style used for a specific item class. The application checks the name of the part and, if it is proper, returns an object which is inserted in the <span style="font-family: Courier New,Courier,monospace">elm_object_item</span>.</li>
</ol>

<pre class="prettyprint">
static Evas_Object 
*_genlist_content_get(void *data, Evas_Object *obj, const char *part)
{
&nbsp;&nbsp;&nbsp;Evas_Object *icon = NULL;

&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;if (!data)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;[INVALID_CB_DATA][data=NULL]&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;if (!strcmp(part, &quot;elm.swallow.icon&quot;))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;icon = _list_item_create(obj, (char*) data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return icon;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>

<p>To create a list item:</p>
<ol>
  <li>Create the <span style="font-family: Courier New,Courier,monospace">elm_box</span> component.</li>
  <li>Create the <span style="font-family: Courier New,Courier,monospace">elm_image</span> component and set a file as the image source.</li>
  <li>Add the image into the box. The <span style="font-family: Courier New,Courier,monospace">elm_box</span> component is used as an item because of the paddings in the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>. If a padding in the item is necessary, it is done in the following way:
  <ul>
    <li>Modify the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> style using the <span style="font-family: Courier New,Courier,monospace">elm_theme_extension_add()</span> function and a custom theme for the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component.</li>
    <li>Prepare an <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component and insert the item into this container.</li>
    <li>Use the box container. In this case, it is the simplest solution.</li>
  </ul></li>
  <li>Return the <span style="font-family: Courier New,Courier,monospace">elm_box</span> component. It is used later as an <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> item content.</li>
</ol>

<pre class="prettyprint">
static Evas_Object 
*_list_item_create(Evas_Object *parent, const char *file)
{
&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;box = elm_box_add(parent);

&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;image = elm_image_add(parent);

&nbsp;&nbsp;&nbsp;// (3)
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, image);

&nbsp;&nbsp;&nbsp;// (4)
&nbsp;&nbsp;&nbsp;return box;
}
</pre>

<p>A similar function is used for creating the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> item. The following image illustrates the structure of the container item.</p>
<p class="figure">Figure: Container item structure</p>
<p align="center"><img alt="Container item structure" src="../images/drag_and_drop_container_item.png" /></p>

<h4>Drap and Drop Operation</h4>

<p>To start the drag and drop operation, the <span style="font-family: Courier New,Courier,monospace">longpressed</span> smart callback is used on the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> and <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> components. This callback is invoked when the user moves the mouse pointer above the container item, presses the left mouse button, and holds it for 0.5 seconds.</p>

<ol>
  <li>Obtain the necessary data from the event info and a local function which is used in the drag and drop later.</li>
  <li>Use the <span style="font-family: Courier New,Courier,monospace">elm_drag_start()</span> function to inform the application that a drag and drop operation has started:
  <ul>
    <li>Image is set as the moved object.</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_SEL_FORMAT_TARGETS</span> is a selection format parameter, which defines the type of the dragged content.</li>
    <li>&quot;dnd&quot; text is used as the drag and drop data.</li>
    <li><span style="font-family: Courier New,Courier,monospace">ELM_XDND_ACTION_MOVE</span> defines the kind of action associated with the drop data.</li>
    <li>The <span style="font-family: Courier New,Courier,monospace">_dnd_drag_icon_create_cb()</span> callback function is invoked to create a new window with custom content.
	<p>The new window is necessary when the drag and drop mechanism is used between 2 different windows of separate applications.</p></li>
    <li>The <span style="font-family: Courier New,Courier,monospace">_dnd_drag_done_cb()</span> callback is invoked when the user releases the moved icon.</li>
  </ul></li>
</ol>


<pre class="prettyprint">
static void 
_item_longpressed_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;Elm_Object_Item *it = (Elm_Object_Item*) event_info;
&nbsp;&nbsp;&nbsp;Evas_Object *image = _container_item_content_get(it);

&nbsp;&nbsp;&nbsp;s_info.src_object = image;
&nbsp;&nbsp;&nbsp;s_info.src_container = obj;
&nbsp;&nbsp;&nbsp;s_info.src_item = it;
&nbsp;&nbsp;&nbsp;s_info.src_idx = elm_gengrid_item_index_get(it);
&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;elm_drag_start(image,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_SEL_FORMAT_TARGETS, &quot;dnd&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_XDND_ACTION_MOVE, _dnd_drag_icon_create_cb, image,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_dnd_drag_done_cb, obj);

&nbsp;&nbsp;&nbsp;elm_scroller_movement_block_set(obj, ELM_SCROLLER_MOVEMENT_BLOCK_VERTICAL);
}
</pre>

<ol>
  <li>The original icon is needed here to obtain its coordinates and source file. This callback invocation creates a new window with specific parameters indicated by a <span style="font-family: Courier New,Courier,monospace">win</span> pointer. For that reason, you cannot use the original icon and return it in this function. If you do not want to create a new icon, you can implement an <span style="font-family: Courier New,Courier,monospace">Elm_Drag_Pos</span> callback which is called whenever the mouse position is changed.</li>
  <li>Create a new icon. The parent of this object is the new <span style="font-family: Courier New,Courier,monospace">win</span> object, so the framework uses the canvas from this window to draw the new icon.</li>
  <li>Obtain information about the coordinates of the original icon. The <span style="font-family: Courier New,Courier,monospace">evas_pointer_canvas_xy_get()</span> function sets the coordinates of the mouse pointer. It is necessary for setting the X and Y offset of the moved icon.</li>
  <li>Set the initial position of the moved icon.</li>
  <li>Set the initial offset of the moved icon. The center of the moved icon is behind the mouse pointer during the drag and drop operation.</li>
</ol>

<pre class="prettyprint">
static Evas_Object 
*_dnd_drag_icon_create_cb(void *data, Evas_Object *win, Evas_Coord *xoff, Evas_Coord *yoff)
{
&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;Evas_Object *org_ic = (Evas_Object*) data;

&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;dragged_ic = elm_image_add(win);

&nbsp;&nbsp;&nbsp;// (3)
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(org_ic, &amp;x, &amp;y, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;evas_pointer_canvas_xy_get(evas_object_evas_get(org_ic), &amp;xo, &amp;yo);

&nbsp;&nbsp;&nbsp;// (4)
&nbsp;&nbsp;&nbsp;evas_object_resize(dragged_ic, w/2, h/2);
&nbsp;&nbsp;&nbsp;evas_object_move(dragged_ic, x - w/2, y - h/2);

&nbsp;&nbsp;&nbsp;// (5)
&nbsp;&nbsp;&nbsp;if (xoff) *xoff = xo - w/4;
&nbsp;&nbsp;&nbsp;if (yoff) *yoff = yo - h/4;
}
</pre>

<p>The most important callback function is invoked when the user performs the &quot;up&quot; action. To handle the use case from the sample application, the callback implementation must look like the following code snippet. If you want some custom behavior on your drop callback, change the logic of this function.</p>

<ol>
  <li>In this case, only 4 items can be inserted into the favorites section, so the function must have information about the number of items in the gengrid. The <span style="font-family: Courier New,Courier,monospace">obj</span> pointer is the gengrid component (the callback is connected to the gengrid in the <span style="font-family: Courier New,Courier,monospace">elm_drop_target_add()</span> function).</li>
  <li>The X and Yy coordinates are necessary for obtaining the valid item from the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component. This item indicates the position to which the moved image is dropped.</li>
  <li>The drag and drop application has only 2 containers. The <span style="font-family: Courier New,Courier,monospace">_gengrid_dnd_drop_cb()</span> function is always invoked for the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component. If <span style="font-family: Courier New,Courier,monospace">s_info.src_container != obj</span> is <span style="font-family: Courier New,Courier,monospace">true</span>, the source object is the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component. The application needs this information to decide what type of reposition has been started. If the <span style="font-family: Courier New,Courier,monospace">rel_it</span> pointer is <span style="font-family: Courier New,Courier,monospace">NULL</span>, the repositioned object is placed in the last position.</li>
  <li>If the relative item is not <span style="font-family: Courier New,Courier,monospace">NULL</span>, the application uses the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_insert_before()</span> function to insert the item in the valid position.</li>
  <li>The <span style="font-family: Courier New,Courier,monospace">else if</span> condition refers to the situation when the moved object was obtained from the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span>. It means that the user wants to change the position of items placed in the favorites section.</li>
  <li>Obtain the destination index from the relative item and delete the source item.</li>
  <li>If the destination index is higher than the source index, the application inserts the moved object after the relative item.</li>
  <li>If the destination index is lower than the source index, the application inserts the moved object before the relative item. The application removes the source item, so it must check whether the destination index is lower or higher than the source index. If the source item is removed, all items in favorites are moved left, so in that case you must add the item after the relative index.</li>
</ol>

<pre class="prettyprint">
static Eina_Bool 
_gengrid_dnd_drop_cb(void *data, Evas_Object *obj, Elm_Selection_Data *ev)
{
&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;count = elm_gengrid_items_count(obj);
&nbsp;&nbsp;&nbsp;if ((count == MAX_FAVORITE_ITEMS) &amp;&amp; (obj != s_info.src_container))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_popup_show(s_info.parent, POPUP_MAX_ITEMS);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EINA_FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;evas_pointer_output_xy_get(evas_object_evas_get(obj), &amp;x, &amp;y);
&nbsp;&nbsp;&nbsp;rel_it = elm_gengrid_at_xy_item_get(obj, x, y, &amp;xposret, &amp;yposret);

&nbsp;&nbsp;&nbsp;// (3)
&nbsp;&nbsp;&nbsp;if ((s_info.src_container != obj) &amp;&amp; !rel_it)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_gengrid_item_append(obj, s_info.grid_it_class, _grid_item_create(obj, file), NULL, NULL);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// (4)
&nbsp;&nbsp;&nbsp;else if ((s_info.src_container != obj) &amp;&amp; rel_it)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_gengrid_item_insert_before(obj, s_info.grid_it_class, _grid_item_create(obj, file), rel_it, NULL, NULL);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// (5)
&nbsp;&nbsp;&nbsp;else if ((s_info.src_container == obj &amp;&amp; rel_it))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dst_idx = elm_gengrid_item_index_get(rel_it);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_item_del(s_info.src_item);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (7)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (dst_idx &gt; s_info.src_idx)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_gengrid_item_insert_after(obj, s_info.grid_it_class, _grid_item_create(obj, file), rel_it, NULL, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// (8)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (dst_idx &lt; s_info.src_idx)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_gengrid_item_insert_before(obj, s_info.grid_it_class, _grid_item_create(obj, file), rel_it, NULL, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If the user drags an item from the <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> component and drops it above the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> component, the <span style="font-family: Courier New,Courier,monospace">_dnd_genlist_drop_cb()</span> callback is invoked and the item is removed from the favorites section:</p>

<pre class="prettyprint">
static Eina_Bool 
_genlist_dnd_drop_cb(void *data, Evas_Object *obj, Elm_Selection_Data *ev)
{
&nbsp;&nbsp;&nbsp;elm_object_item_del(s_info.src_item);
&nbsp;&nbsp;&nbsp;s_info.src_item = NULL;
}
</pre>


<h3>Data Module</h3>
<p>The data module implementation is included in the <span style="font-family: Courier New,Courier,monospace">data.c</span> file. There are 2 main functionalities in this module:</p>
<ul>
  <li>Obtain the images list.
  <p>The data module uses the <span style="font-family: Courier New,Courier,monospace">dirent.h</span> library to read the available images list.</p></li>
  <li>Store the information about favorite items.</li>
</ul>

<p>The following code snippets are responsible for the main tasks of the data module:</p>
<ol>
  <li>The <span style="font-family: Courier New,Courier,monospace">preference_get_string()</span> function takes 2 parameters: the name of the key to retrieve and the string value associated with the given key. In the drag and drop application, the preference keys are stored in the key table.</li>
  <li>The obtained data is saved in a list which is returned by the <span style="font-family: Courier New,Courier,monospace">data_favorite_images_get()</span> function.</li>
  <li>Remove all old values from the system preference database.</li>
  <li>Iterate through the file path list and set new values into valid keys.</li>
</ol>

<pre class="prettyprint">
Eina_List 
*data_favorite_images_get(void)
{
&nbsp;&nbsp;&nbsp;// (1)
&nbsp;&nbsp;&nbsp;preference_get_string(prefs[i], &amp;path);
&nbsp;&nbsp;&nbsp;// (2)
&nbsp;&nbsp;&nbsp;favs = eina_list_append(favs, strdup(path));
}

Eina_Bool 
data_favorites_update(Eina_List *paths)
{
&nbsp;&nbsp;&nbsp;// (3)
&nbsp;&nbsp;&nbsp;preference_remove_all();

&nbsp;&nbsp;&nbsp;// (4)
&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(paths, it, file_path)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;preference_set_string(prefs[i++], file_path);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>