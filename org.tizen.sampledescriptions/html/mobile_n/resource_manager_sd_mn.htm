<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Resource Manager Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
  </div>

  <h1>Resource Manager Sample Overview</h1>

  <p>
  The Tizen API's Resource Manager module provides a small set of functions enabling "objects" extraction from the application's prior created resources. The "objects" extraction process is based on the
  environment the application is running in: language and/or screen's DPI. Currently supported objects which may be handled by the Resource Manager are images and sounds (files). The Resource Manager's
  operational principle is to deliver an object relevant to the current application's environment.
  <br>
  This application demonstrates how to automatically pick an image matching:
    <ul>
	  <li>the language changed via Settings application;</li>
	  <li>the device's screen DPI.</li>
	</ul>
  </p>
  <p>The figures below illustrate the view of the application running in four different screen's DPI settings as well as different language settings.</p>
  <p id="app-screenshot" class="figure">Figure: Resource Manager application screens.</p>
  <p style="text-align:center;">
    <img alt="Main view of the application running with the DPI=240" height="364" hspace="20" src="../images/resource_manager_ldpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=300" height="364" hspace="20" src="../images/resource_manager_mdpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=380" height="364" hspace="20" src="../images/resource_manager_hdpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=480" height="364" hspace="20" src="../images/resource_manager_xhdpi_initial_view.png" />
	<br>
	<img alt="Main view of the application running with the DPI=240" height="364" hspace="20" src="../images/resource_manager_en_us_lang_view.png" />
	<img alt="Main view of the application running with the DPI=300" height="364" hspace="20" src="../images/resource_manager_ko_kr_lang_view.png" />
	<img alt="Main view of the application running with the DPI=380" height="364" hspace="20" src="../images/resource_manager_pl_pl_lang_view.png" />
	<img alt="Main view of the application running with the DPI=480" height="364" hspace="20" src="../images/resource_manager_fr_fr_lang_view.png" />
  </p>

  <p>The sample application provides a user interface for automatic changes previewing only. In order to influence the application, one have to change the environment settings:
  <ul>
    <li>by changing Display language in Settings application - Settings application &#10140; Language and input &#10140; Display language.</li>
	<li>
	  screen's DPI - by creating new mobile emulator image with default density value altered with the custom one, chosen from one of the following ranges:
	    <ul>
		  <li>0 to 240 - LDPI;</li>
		  <li>241 to 300 - MDPI;</li>
		  <li>301 to 380 - HDPI;</li>
		  <li>381 to 480 - XHDPI;</li>
		  <li>481 to 600 - XXHDPI.</li>
		</ul>
	</li>
  </ul>
  The structure of the user interface is depicted below (EDJE layout scripts are used).
  </p>
  <p id="ui-struct" class="figure">Figure: Resource Manager layout structure.</p>
  <p style="text-align:center;">
    <img alt="Resource Manager layout structure" hspace="80" height="450" src="../images/resource_manager_ui_layout_sd_mn.png" />
  </p>
  <p>
  The final application's view is created by embedding proper widgets into the layout depicted above. The resulting UI view is shown below.
  </p>
  <p id="ui-view" class="figure">Figure: Resource Manager application's UI view.</p>
  <p style="text-align:center;">
    <img alt="Resource Manager application's UI view" hspace="80" height="450" src="../images/resource_manager_ui_view_sd_mn.png" />
  </p>
  <br>
  The application's workflow can be divided into three logical pipelines:
  <ul>
    <li>application startup,</li>
	<li>image extraction relevant to the screen's DPI,</li>
	<li>image extraction relevant to the current language,</li>
  </ul>
  which can be described by the following figure:
  </p>
  <p id="workflow" class="figure">Figure: Resource Manager application workflow.</p>
  <p style="text-align:center;">
    <img alt="Application workflow" height="450" hspace="0" src="../images/resource_manager_workflow_sd_mn.png"/>
  </p>

  <h3>Prerequisites</h3>
  <p>
    <ul>
      <li>To ensure proper application execution, the resources must be created using Resource Explorer tool.</li>
      <li>No privilages are required.</li>
	</ul>
  </p>

<h2 id="res-man">Resource Explorer</h2>

  <p>
  Resource Explorer is a tool enabling the developer to create the resources structure assigned to an application. The tool is launched by opening Resource Explorer window from SDK's top menu:
  Window &#10140; Show View &#10140; Other... &#10140; Resource Explorer (Tizen tab). By pressing the
  <img alt="Resource Explorer settings button" hspace="0" src="../images/resource_manager_res_explorer_settings_sd_mn.png"/> button, the Resource Configuration Dialog appears, where
  one can define separate resource's directories for languages and/or resolution settings. The related directories names are created automatically and are not changeable. For this sample application,
  the resources structure are defined as shown at the image below.
  </p>

  <p style="text-align:center;">
    <img alt="Resource Configuration Dialog view" height="900" hspace="0" src="../images/resource_manager_res_conf_dlg_sd_mn.png"/>
  </p>

  <p>
  Once the resource directories structure is created, one can put relevant resource files in target directories. In case of this sample application, two types of images were uploaded:
    <ul>
	  <li>'tizen.png' - the Tizen's logo adapted to each resolution respectively;</li>
	  <li>'flag.png' - the national flag relevant to each supported language.</li>
	</ul>
  The name of each of the resolution related file is set to 'tizen.png' and to 'flag.png" for the each language related resource.
  </p>

  <p>
  During the application's packaging process, the 'res.xml' file is created and uploaded to the application's resource directory. This file is populated with a set of information acquired from Resource Explorer
  and can't be edited manually, as it is replaced by the Resource Explorer each time the application is rebuilt.
  </p>

  <p>
  In the application's source code, after the Resource Manager API is initialized, the relevant resource file's path is acquired using the
  <span style="font-family: Courier New,Courier,monospace">app_resource_manager_get(app_resource_e type, const char *id, char **path)</span> function, where
    <ul>
	  <li><span style="font-family: Courier New,Courier,monospace">type</span> - specifies the type of the resource (image, sound, layout and bin are currently supported);</li>
	  <li><span style="font-family: Courier New,Courier,monospace">id</span> - specifies the identifier of the resource (file name with extension);</li>
	  <li><span style="font-family: Courier New,Courier,monospace">path</span> - pointer to the path where the expected resource (file) is stored.</li>
	</ul>
  The Resource Manager will look for the file matching the <span style="font-family: Courier New,Courier,monospace">type</span> and
  <span style="font-family: Courier New,Courier,monospace">id</span> with respect to the current environment (resolution and language). As a result, the appropriate file path is returned.
  </p>

<h2>Implementation</h2>

<h3 id="type-defs">Type definitions</h3>

<pre class="prettyprint">
/* The general structure for application's data storage. */
struct __appdata {
&nbsp;&nbsp;&nbsp;viewdata_s view;
};
</pre>

<pre class="prettyprint">
/* All the Evas_Object objects represent UI widgets. */
struct __viewdata {
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *image_dpi;
&nbsp;&nbsp;&nbsp;Evas_Object *image_language;
};

typedef struct __viewdata viewdata_s;
</pre>

<h3 id="app-init">Application initialization</h3>

  <p>
  The entire application's life-cycle is implemented in the main source file, using a common Tizen application structure:
  </p>

<pre class="prettyprint">
int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, &ad);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &event_callback, &ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_main() failed with error = %d", ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

  <p>
  The application's initilization procedure is executed in <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on application's startup.
  </p>

<pre class="prettyprint">
static bool __create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&ad->view);
}
</pre>

  <p>
  Finally, the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function is invoked, which controls the entire initialization process
  (see the code snippet below for details). This function is responsible for:
    <ul>
	  <li>
	    Resource Manager engine initialization (<span style="font-family: Courier New,Courier,monospace">model_init()</span>);
	  </li>
	  <li>
	    User interface creation (<span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span>) and initialization
	    (<span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span>).
	  </li>
	</ul>
  </p>

<pre class="prettyprint">
bool controller_init(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;if (!model_init())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;__controller_init_dpi(vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  For reference of model related functions that are not listed here refer to the <a href="#model">Model</a> section.
  </p>

  <p>
  The view related source code is not listed here, as it is not a subject of this document.
  </p>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">model_init()</span> function simply invokes
  <span style="font-family: Courier New,Courier,monospace">app_resource_manager_init()</span> API function in order to get access to the Resource Manager engine (see the code snippet below for reference).
  </p>

<pre class="prettyprint">
bool model_init(void)
{
&nbsp;&nbsp;&nbsp;return __model_init_app_resource_manager();
}
</pre>

<pre class="prettyprint">
bool __model_init_app_resource_manager(void)
{
&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_init();
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_resource_manager_init() failed with error %d.", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span> function gets the 'tizen.png' image's file path from the Resource Manager and updates the view with the
  image relevant to the screen's DPI.
  </p>

<pre class="prettyprint">
static void __controller_init_dpi(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;if (!model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, "tizen.png", &file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;view_show_dpi_image(vd, file_path);
&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>

  <p>
  For reference of model related functions that are not listed here refer to the <a href="#model">Model</a> section.
  </p>

  <p>
  The view related source code is not listed here, as it is not a subject of this document.
  </p>

<h3 id="app-finit">Application termination</h3>

  <p>
  When the application is terminated, the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function is called (see the code snippet below).
  </p>

<pre class="prettyprint">
static void __terminate_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;controller_finit(&ad->view);
}
</pre>

  <p>
  All the resources, allocated previously, are released with <span style="font-family: Courier New,Courier,monospace">controller_finit()</span> function, which is responsible for
  closing the Resource Manager's API session and destroying the UI.
  </p>

<pre class="prettyprint">
void controller_finit(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;model_finit();
&nbsp;&nbsp;&nbsp;view_destroy_base_gui(vd);
}
</pre>

  <p>
  As the UI is not a subject for this documentation, the implementation of the <span style="font-family: Courier New,Courier,monospace">view_destroy_base_gui()</span> function is ommited.
  Closing the Resource Manager's API session is performed in the Model module within the <span style="font-family: Courier New,Courier,monospace">model_finit()</span> function, which calls an
  internal function <span style="font-family: Courier New,Courier,monospace">__model_release_app_resource_manager()</span>.
  </p>

<pre class="prettyprint">
bool model_finit(void)
{
&nbsp;&nbsp;&nbsp;return __model_release_app_resource_manager();
}
</pre>

<pre class="prettyprint">
bool __model_release_app_resource_manager(void)
{
&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_release();
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_resource_manager_release() failed with error %d.", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<h3>Resource files handling</h3>

  <p>
  Once the resources are defined using <a href="#res-man">Resource Explorer</a> and appropriate resource files are uploded to the destination folders, one can start using these files.
  For the demonstration purpose, two scenarions were chosen:
    <ul>
	  <li>displaying the image related to the current DPI setting;</li>
	  <li>displaying the image related to the current locale setting.</li>
	</ul>
  </p>

  <p>
  In the first case, there are 5 image files (each name is set to 'tizen.png') depicting the Tizen's logo with resolution label attached. Each of the images is stored in a different folder with respect to the
  DPI setting: 'res/contents/LDPI', 'res/contents/MDPI', 'res/contents/HDPI', 'res/contents/XHDPI', 'res/contents/XXHDPI'. On application's startup, during the initialization procedure
  (<a href="#app-init">Application initialization</a> section), the <span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span> function is called, which obtains
  the path to the relevant image based on the current screen's settings. The core function, performing described task is
  <span style="font-family: Courier New,Courier,monospace">model_get_app_resource()</span> (for reference, see the <a href="#model">Model</a> section).
  </p>

<pre class="prettyprint">
static void __controller_init_dpi(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;/* Obtains the path to the 'tizen.png' file with respect to the current screen's settings. */
&nbsp;&nbsp;&nbsp;if (!model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, "tizen.png", &file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;/* The obtained image file is displayed. */
&nbsp;&nbsp;&nbsp;view_show_dpi_image(vd, file_path);
&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>

  <p>
  In the second case, there are 48 image files (each name is set to 'flag.png') depicting the national flags related to all supported languages. Each of the images is stored in a different folder:
  'res/contents/az_AZ', 'res/contents/ca_ES', ... , 'res/contents/zh_TW'. Once the user changes the current language (Settings application &#10140; Language and input &#10140; Display language),
  the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function is invoked (see the <a href="#app-init">Application initialization</a> section).
  This callback function hooks <span style="font-family: Courier New,Courier,monospace">APP_EVENT_LANGUAGE_CHANGED</span> event. At the entry point of the
  <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> function, the current locale is obtained using
  <span style="font-family: Courier New,Courier,monospace">model_get_locale()</span> function in order to be later set as a current language for the application
  (<span style="font-family: Courier New,Courier,monospace">elm_language_set()</span>). Finally, the
  <span style="font-family: Courier New,Courier,monospace">controller_set_language()</span> function is invoked, which is responsible for obtaining and displaying the language relevant image.
  </p>

<pre class="prettyprint">
static void __ui_app_lang_changed(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)user_data;
&nbsp;&nbsp;&nbsp;char *locale = NULL;

&nbsp;&nbsp;&nbsp;/* Gets the current locale name. */
&nbsp;&nbsp;&nbsp;if (!model_get_locale(&locale))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;/* Sets the language for this application. */
&nbsp;&nbsp;&nbsp;elm_language_set(locale);

&nbsp;&nbsp;&nbsp;/* See the code snippet below. */
&nbsp;&nbsp;&nbsp;controller_set_language(&ad->view, locale);

&nbsp;&nbsp;&nbsp;free(locale);

&nbsp;&nbsp;&nbsp;return;
}
</pre>

<pre class="prettyprint">
void controller_set_language(viewdata_s *vd, char *locale)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;controller_log(DLOG_INFO, "Language set to: %s.", locale);

&nbsp;&nbsp;&nbsp;/* Obtains the path to the 'flag.png' file with respect to the current language's settings. */
&nbsp;&nbsp;&nbsp;if (!model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, "flag.png", &file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;/* The obtained image file is displayed. */
&nbsp;&nbsp;&nbsp;view_show_language_info(vd, locale, file_path);

&nbsp;&nbsp;&nbsp;if (file_path)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>

  <p>
  For all Model related functions, see the <a href="#model">Model</a> section.
  </p>

<h3 id="model">Model</h3>

  <p>
  The responsibility of the application's "Model" module is to operate directly on the Resource Manager API. The additional benefit of this module is that the simplification of the API function calling,
  error checking and message logging is performed here.
  <br>
  Some of the functions implemented within the "Model" module were briefly described in the <a href="#app-init">Application initialization</a> and <a href="#app-finit">Application termination</a> sections
  (<span style="font-family: Courier New,Courier,monospace">model_init()</span>, <span style="font-family: Courier New,Courier,monospace">model_finit()</span>,
  <span style="font-family: Courier New,Courier,monospace">__model_init_app_resource_manager()</span>,
  <span style="font-family: Courier New,Courier,monospace">__model_release_app_resource_manager()</span>. Other functions are briefly described here.
  </p>

  <p>
  The path to the resource file pointed by the <span style="font-family: Courier New,Courier,monospace">type</span> and <span style="font-family: Courier New,Courier,monospace">id</span>
  is obtained with the <span style="font-family: Courier New,Courier,monospace">model_get_app_resource()</span> function.
  </p>

<pre class="prettyprint">
bool model_get_app_resource(app_resource_e type, const char *id, char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_get(type, id, path);
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function app_resource_manager_get() failed with error %d.", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
