<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Contacts Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Contacts Sample Overview</h1> 

<p>The Contacts sample application demonstrates how you can manage contacts using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SOCIAL__CONTACTS__SVC__MODULE.html">Contacts API</a>. The source code shows how to use the contacts database for creating and deleting contacts, making contacts favorites, viewing and changing contact information, creating and deleting contacts categories, adding contacts to categories, and viewing the favorites list.</p>
<p>The following figure illustrates the main screens of the application.</p>
  <p class="figure">Figure: Contacts main views</p> 
  <p align="center"><img alt="Contacts main views" src="../images/contacts.png" /> </p> 

<p>The application opens with the <strong>Contacts</strong> screen, which displays a list of existing contacts. On the screen:</p>
<ul>
<li>To create a new contact, click <strong>Create</strong>, fill in the contact details, and click <strong>Save</strong>. To select the address book into which the new contact is added, click <strong>&gt;</strong>.</li>
<li>To view the details of a contact, click the contact in the list. The detail screen displays the contact details. On this screen:
<ul>
	<li>To edit an existing contact, click <strong>Edit</strong>.</li>
	<li>To delete the contact, click <strong>Delete</strong>.</li>
	<li>To change the favorite status of the contact, click <strong>Fav</strong> on the top-right corner.</li>
	</ul></li>
<li>To view the category list of the default address book, press the device menu key, and click <strong>Categories</strong>. On the <strong>Categories</strong> screen, you can view the members of the existing category by clicking the category, or add new categories by clicking <strong>Create</strong>. After clicking a category, the category member screen opens. On this screen:
	<ul>
	<li>To add a new member to the category, click <strong>Add Member</strong>.</li>
	<li>To remove a member from the category, click <strong>Remove Member</strong>.</li>
	<li>To delete the category, click <strong>Delete</strong>.</li>
	</ul>
	</li>
<li>To view the favorite persons list, press the device menu key, and click <strong>Favorites</strong>.</li>
</ul>

<p>The application uses the <span style="font-family: Courier New,Courier,monospace">contacts-svc</span> module to work with the contacts database and the <span style="font-family: Courier New,Courier,monospace">elementary</span> module to support the UI requirements.</p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.write</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.read</span></li>
 </ul>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>

<table>
<caption>Table: Source files</caption>
<tbody>
<tr>
 <th>Category</th>
 <th>File name</th>
 <th>Description</th>
</tr>
<tr>
 <td rowspan="2">General</td>
 <td><span style="font-family: Courier New,Courier,monospace">main.c</span></td>
 <td>Provides the entry point in the application. Initializes application main data.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">main-app.c</span></td>	
 <td>Provides the implementation for Tizen main callbacks. Launches the creation of the window and navigation bar.</td>
</tr>
<tr>
 <td rowspan="5">Model</td>
 <td><span style="font-family: Courier New,Courier,monospace">common.c</span></td>	
 <td>Provides common utilities for the application, such as work with strings or conversion of time.</td>
</tr> 
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">contact-details.c</span></td>	
 <td>Provides functions to toggle favorite flags or get the favorite status for a contact.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">create-group.c</span></td>	
 <td>Provides functions to simplify group creation.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">edit-contact.c</span></td>	
 <td>Provides functions to simplify the contact creation process: for construction and destruction of contact structures, getting values from the database, and saving the contact.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">group-edit-member.c</span></td>	
 <td>Provides functions for adding members to a group, to remove members from a group, to get contacts in a group.</td>
</tr>
<tr>
 <td rowspan="3">Model/Contacts-utils</td>
 <td><span style="font-family: Courier New,Courier,monospace">contacts-db-utils.c</span></td>
 <td>Provides functions to connect to the database, to disconnect from the database, and to check the connection status.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">contacts-list-utils.c</span></td>	
 <td>Provides useful functions to work with the contacts list, database queries, and filters. Hides the complexity of the work with the database.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">contact-record-utils.c</span></td>	
 <td>Provides functions to work with records. Hides the complexity of the work with the database.</td>
</tr>	
<tr>
 <td rowspan="2">Utils</td>
 <td><span style="font-family: Courier New,Courier,monospace">logger.c</span></td>	
 <td>Provides functions to log information through the application.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">ui-utils.c</span></td>	
 <td>Provides functions to create a navigation bar, layout, toolbar, and popup buttons.</td>
</tr>	
<tr>
 <td rowspan="9">View</td>
 <td><span style="font-family: Courier New,Courier,monospace">contact-details-view.c</span></td>	
 <td>Provides functions to create the <strong>Contact details</strong> view. The file contains code that retrieves the contact information and shows it in the genlist.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">create-group-view.c</span></td>	
 <td>Provides functions to create the <strong>Create group</strong> view. The file contains code that creates a new group in the database with a specific name.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">edit-contact-view.c</span></td>	
 <td>Provides functions to create the <strong>Edit contact</strong> view. The file contains code to retrieve contact information from the database, to show and edit the information, to delete or save the contact.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">favourites-view.c</span></td>	
 <td>Provides functions to create the <strong>Favorite contacts</strong> view. The file contains code that gets the favorite contacts and shows the information in a list.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">group-details-view.c</span></td>	
 <td>Provides functions to create the <strong>Group details</strong> view. The file contains code to get and show group details and to remove the group.</td>
</tr>
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">group-edit-member-view.c</span></td>	
 <td>Provides functions to create the <strong>Edit group member</strong> view. The file contains code to add members to the group and to remove members from the group.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">group-list-view.c</span></td>	
 <td>Provides functions to create the <strong>Groups list</strong> view. The file contains code to create a list of groups saved on the device, to set up the callback on click on group, to move to the <strong>Group details</strong> or <strong>Create group</strong> views.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">person-list-view.c</span></td>	
 <td>Provides functions to create the <strong>Contacts list</strong> view. The file contains code to create a list of contacts, to set up a callback on click on contact, to set up a callback for the menu key and to move to the <strong>Categories list</strong> or <strong>Favorites list</strong> views.</td>
</tr>	
<tr>
 <td><span style="font-family: Courier New,Courier,monospace">window.c</span></td>	
 <td>Provides functions to create or destroy the main application window and to set the host layout.</td>
</tr>
</tbody>
</table>	

<h2>Displaying and Retrieving Contacts</h2>


  <p class="figure">Figure: Contacts and favorites</p> 
  <p align="center"> <img alt="Contacts and favorites" src="../images/contacts_favorites.png" /> </p>
  
<p>To display contacts:</p>
<ol>
<li>Initialize the application by creating the window, naviframe and the <strong>Person list</strong> view.
<pre class="prettyprint">
static bool 
app_create_cb(void *user_data)
{
&nbsp;&nbsp;&nbsp;app_data *ad = user_data;
&nbsp;&nbsp;&nbsp;RETVM_IF(NULL == ad, false, &quot;ad is null&quot;);

&nbsp;&nbsp;&nbsp;ad-&gt;win = win_create();
&nbsp;&nbsp;&nbsp;RETVM_IF(NULL == ad-&gt;win, false, &quot;win is null&quot;);
&nbsp;&nbsp;&nbsp; 
&nbsp;&nbsp;&nbsp;ad-&gt;navi = _app_navi_add(ad);
&nbsp;&nbsp;&nbsp;RETVM_IF(NULL == ad-&gt;navi, false, &quot;navi is null&quot;);

&nbsp;&nbsp;&nbsp;sc_plist_view_add(ad-&gt;navi);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
 
<li>Display the contacts list.
<p>Contact retrieval is implemented in the <span style="font-family: Courier New,Courier,monospace">&lt;person-list-view.c&gt;</span> file. The <span style="font-family: Courier New,Courier,monospace">sc_plist_view_add()</span> function invokes the <span style="font-family: Courier New,Courier,monospace">_plist_view_fill()</span> function to retrieve the contact list from the database. These contacts fill the <span style="font-family: Courier New,Courier,monospace">elm_list</span>.</p>
<pre class="prettyprint">
static void 
_plist_view_fill(list_view_data *data)
{
&nbsp;&nbsp;&nbsp;RETM_IF(NULL == data, &quot;data is null&quot;);
&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;

&nbsp;&nbsp;&nbsp;contacts_list_h person_list = NULL;
&nbsp;&nbsp;&nbsp;if (sc_db_utils_is_success(contacts_db_get_all_records(_contacts_person._uri, 0, 0, &amp;person_list)))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CONTACTS_LIST_FOREACH(person_list, record)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int id = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sc_db_utils_is_success(contacts_record_get_str_p(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_person.display_name, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;name))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp; sc_db_utils_is_success(contacts_record_get_int(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_person.id, &amp;id)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(data-&gt;list, reduced_name, NULL, NULL, _plist_view_sel_cb, (void *)id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Display the favorites list.
<p>Favorites retrieval is implemented in the <span style="font-family: Courier New,Courier,monospace">&lt;favourites-view.c&gt;</span> file. The <span style="font-family: Courier New,Courier,monospace">sc_favourites_view_add()</span> function invokes the <span style="font-family: Courier New,Courier,monospace">_favourites_view_fill()</span> function to get the favorites list from the database, and these contacts fill the <span style="font-family: Courier New,Courier,monospace">elm_list</span>.</p>
<pre class="prettyprint">
static void 
_favourites_view_fill(favourites_view_data *data)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;data is null&quot;);
&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;

&nbsp;&nbsp;&nbsp;data-&gt;fav_list = sc_list_utils_get_records_list_bool_filter(_contacts_person._uri,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_person.is_favorite, true);
&nbsp;&nbsp;&nbsp;RETM_IF(!data-&gt;fav_list, &quot;Favourite list is not retrieved&quot;);

&nbsp;&nbsp;&nbsp;CONTACTS_LIST_FOREACH(data-&gt;fav_list, record)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sc_db_utils_is_success(contacts_record_get_str_p(record,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_contacts_person.display_name, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&amp;name)))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(data-&gt;list, name, NULL, NULL, _favourites_view_sel_cb, record);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<h2>Managing Contacts</h2>

    <p class="figure">Figure: Managing contacts</p> 
  <p align="center"> <img alt="Managing contacts" src="../images/contacts_edit.png" /> </p> 

  <p>To manage contacts:</p>
  <ol>
<li>Initialize contact details.
<p>When the user clicks on a contact in the contacts list, the contact details view opens using the <span style="font-family: Courier New,Courier,monospace">sc_cdetails_view_add()</span> function . Then it fills the contact details using the <span style="font-family: Courier New,Courier,monospace">_cdetails_view_fill()</span> function.</p>
 <pre class="prettyprint">
static void 
_cdetails_view_fill(contact_details_view_data *data)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;data is null&quot;);
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *itc = _cdetails_view_create_item_class();

&nbsp;&nbsp;&nbsp;evas_object_data_set(data-&gt;genlist, CT_DETAILS_VIEW_DATA, data);
&nbsp;&nbsp;&nbsp;for (sc_common_contact_fields i = CF_PHONE_NUMBER; i &lt; CF_MAX; ++i)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_genlist_item_append(data-&gt;genlist, itc, (void *)i, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, NULL, NULL);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(itc);
}
</pre>
</li>

<li>Initialize a new contact and edit the contact view.
<p>To create a contact, the user presses the <strong>Create</strong> button in the <strong>Contacts list</strong> view. To edit a contact, the user can click <strong>Edit</strong> in the contact details view. In both cases, the <span style="font-family: Courier New,Courier,monospace">sc_ec_view_add()</span> function is invoked. It creates the new contact or edits the current one.</p>
<pre class="prettyprint">
void 
sc_ec_view_add(Evas_Object *parent, int contact_id)
{
&nbsp;&nbsp;&nbsp;if (contact_id &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-&gt;contact_id = contact_id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-&gt;data = sc_ec_create_edit_contact(data-&gt;contact_id);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-&gt;contact_id = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-&gt;data = sc_ec_create_new_contact();
&nbsp;&nbsp;&nbsp;}
</pre>
</li>

<li>Edit the contact using the <span style="font-family: Courier New,Courier,monospace">sc_ec_create_edit_contact()</span> function in the <span style="font-family: Courier New,Courier,monospace">&lt;edit-contact.c&gt;</span> file, which creates the database handle for the current contact.
<pre class="prettyprint">
sc_ec_contact_edit *sc_ec_create_edit_contact(int contact_id)
{
&nbsp;&nbsp;&nbsp;bool is_ok = false;
&nbsp;&nbsp;&nbsp;sc_ec_contact_edit *edit_contact = malloc(sizeof(sc_ec_contact_edit));
&nbsp;&nbsp;&nbsp;if (edit_contact)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_ok = sc_db_utils_is_success(contacts_db_get_record(_contacts_contact._uri, contact_id, &amp;edit_contact-&gt;contact_record));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edit_contact-&gt;is_new_contact = false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!is_ok)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sc_ec_destruct_edit_contact(edit_contact);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return edit_contact;
}
</pre>
</li>

<li>Create a new contact using the <span style="font-family: Courier New,Courier,monospace">sc_ec_create_new_contact()</span> function in the <span style="font-family: Courier New,Courier,monospace">&lt;edit-contact.c&gt;</span> file, which creates the new database handle for the new contact.
<pre class="prettyprint">
sc_ec_contact_edit *sc_ec_create_new_contact()
{
&nbsp;&nbsp;&nbsp;bool is_ok = false;
&nbsp;&nbsp;&nbsp;sc_ec_contact_edit *edit_contact = malloc(sizeof(sc_ec_contact_edit));
&nbsp;&nbsp;&nbsp;if (edit_contact)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is_ok = sc_db_utils_is_success(contacts_record_create(_contacts_contact._uri, &amp;edit_contact-&gt;contact_record));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;edit_contact-&gt;is_new_contact = true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!is_ok)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sc_ec_destruct_edit_contact(edit_contact);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return edit_contact;
}
</pre>
</li>

<li>Fill a contact to the <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>.
<pre class="prettyprint">
static void 
_ec_view_fill(contact_edit_view_data *data)
{
&nbsp;&nbsp;&nbsp;for (sc_common_contact_fields i = CF_FIRST_NAME; i &lt; CF_MAX; ++i)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CF_BIRTHDAY == i)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_genlist_item_append(data-&gt;genlist, itc_birthday, (void *)i, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, NULL, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_genlist_item_append(data-&gt;genlist, itc_entry, (void *)i, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, NULL, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

 
<h2>Managing Categories</h2>

<p>To manage categories:</p>
<ol>
<li>Create categories.
<p>The category creation is implemented in the <span style="font-family: Courier New,Courier,monospace">&lt;create-group.c&gt;</span> file.</p>
<p>When the user clicks <strong>Create</strong> on the <strong>Categories</strong> screen, the <strong>Create Category</strong> view opens and the user can enter a category name. When the user clicks <strong>Save</strong>, the <span style="font-family: Courier New,Courier,monospace">_gcreate_view_create_group_cb()</span> smart callback is invoked. That callback calls the <span style="font-family: Courier New,Courier,monospace">sc_gcreate_db_create_group()</span> function to add the category to the specified address book.</p>
<pre class="prettyprint">
bool 
sc_gcreate_db_create_group(const char *group_name)
{
&nbsp;&nbsp;&nbsp;bool result = false;
&nbsp;&nbsp;&nbsp;contacts_record_h record = NULL;
&nbsp;&nbsp;&nbsp;result = sc_db_utils_is_success(contacts_record_create(_contacts_group._uri, &amp;record));
&nbsp;&nbsp;&nbsp;if (result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Result = sc_db_utils_is_success(contacts_record_set_str(record, _contacts_group.name, group_name));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (result)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = sc_db_utils_is_success(contacts_db_insert_record(record, NULL));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_record_destroy(record, true);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
</li>

<li>Edit category members.
<p>The category member addition and removal are implemented in the <span style="font-family: Courier New,Courier,monospace">&lt;group-edit-member-view.&gt;</span> file.</p>
<p>When the user clicks <strong>Add Member</strong> on a specific category screen, the <strong>Add Member</strong> screen opens and the user can select a contact to add to the category. When the user clicks <strong>Add Member</strong>, the <span style="font-family: Courier New,Courier,monospace">contacts_group_add_contact()</span> function adds the selected contact to the category.</p>
<p>When the user clicks <strong>Remove Member</strong> on a specific category screen, the <strong>Remove Member</strong> screen opens and the user can select a member to remove from the category. When the user clicks <strong>Remove</strong>, the <span style="font-family: Courier New,Courier,monospace">contacts_group_remove_contact()</span> function removes the selected member from the category.</p>
<pre class="prettyprint">
static void 
_gedit_member_view_edit_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;data is null&quot;);
&nbsp;&nbsp;&nbsp;group_edit_member_view_data *member_data = data;

&nbsp;&nbsp;&nbsp;if (member_data-&gt;type == EDIT_MEMBER_TYPE_ADD)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_group_add_contact(member_data-&gt;group_id, check_data-&gt;contact_id);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (member_data-&gt;type == EDIT_MEMBER_TYPE_REMOVE)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contacts_group_remove_contact(member_data-&gt;group_id, _data-&gt;contact_id);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>