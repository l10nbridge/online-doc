<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] SNS Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>

  <h1>[UI Sample] SNS Sample Overview</h1> 

 <p>The [UI Sample] SNS sample application demonstrates how to make a complex view by recursive composition of standard EFL UI components and containers in a UI component hierarchy.</p>
<p>The sample uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conform</span>, <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>, <span style="font-family: Courier New,Courier,monospace">elm_scroller</span>, <span style="font-family: Courier New,Courier,monospace">elm_toolbar</span>, and <span style="font-family: Courier New,Courier,monospace">elm_panel</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_table</span> and <span style="font-family: Courier New,Courier,monospace">elm_box</span> for the UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span>, <span style="font-family: Courier New,Courier,monospace">elm_label</span>, <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>, and <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> for the content inside the view.</p>
<p>The following figure illustrates the SNS view, its wireframe structure, and the UI component tree.</p>

  <p class="figure">Figure: SNS view</p> 
  <p align="center"><img alt="SNS view" src="../images/ui_sns_sd_view.png" /></p>   
 
  <p align="center"><img alt="SNS view UI component tree" src="../images/ui_sns_sd_widget_tree.png" /></p> 

<h2>Application Layout</h2>  

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates the window, conformant, and naviframe. It also creates the view layout and drawer (<span style="font-family: Courier New,Courier,monospace">elm_panel</span>). The drawer is inserted in the layout. The drawer button is inserted in the naviframe.</p>

<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *bg, *drawer, *btn;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;ad-&gt;conform = create_conform(ad-&gt;win);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);

&nbsp;&nbsp;&nbsp;layout = create_main_view(ad);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, _(&quot;News Feed&quot;), NULL, NULL, layout, &quot;basic&quot;);

&nbsp;&nbsp;&nbsp;// Drawer bg
&nbsp;&nbsp;&nbsp;bg = create_bg(layout);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.bg&quot;, bg);

&nbsp;&nbsp;&nbsp;// Drawer
&nbsp;&nbsp;&nbsp;drawer = create_panel(layout);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(drawer, EEXT_CALLBACK_BACK, drawer_back_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(drawer, &quot;scroll&quot;, panel_scroll_cb, bg);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.right&quot;, drawer);

&nbsp;&nbsp;&nbsp;// Drawers Button
&nbsp;&nbsp;&nbsp;btn = create_drawers_btn(ad-&gt;nf, btn_cb, drawer);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, btn);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;win, EVAS_CALLBACK_RESIZE, view_size_reset, ad);
}
</pre>

<h2>Main View</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function creates the main content. It consists of a single layout containing a box. The box contains the tab bar (<span style="font-family: Courier New,Courier,monospace">elm_toolbar</span>) and a scroller. The toolbar acts as the view changer and indicator. Its vertical weight is 0.12, which means that the toolbar occupies 12% of the box. The rest of the area contains the scroller, which includes another box. The box contains 4 views horizontally. Each view has a minimum size, which is the same as the screen width.</p>

<pre class="prettyprint">
static Evas_Object *
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *box, *box2, *table;
&nbsp;&nbsp;&nbsp;Evas_Object *first_view, *second_view, *third_view, *fourth_view;

&nbsp;&nbsp;&nbsp;// Layout for drawer
&nbsp;&nbsp;&nbsp;layout = create_drawer_layout(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;box = elm_box_add(layout);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.content&quot;, box);

&nbsp;&nbsp;&nbsp;// Tab bar
&nbsp;&nbsp;&nbsp;ad-&gt;tabbar = _create_tabbar(box, ad);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;tabbar, EVAS_HINT_EXPAND, 0.12);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;tabbar, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;tabbar);

&nbsp;&nbsp;&nbsp;// Scroller
&nbsp;&nbsp;&nbsp;ad-&gt;scroller = create_scroller(box, ad);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, ad-&gt;scroller);

&nbsp;&nbsp;&nbsp;// Box
&nbsp;&nbsp;&nbsp;box2 = elm_box_add(ad-&gt;scroller);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box2, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box2, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box2, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;scroller, box2);

&nbsp;&nbsp;&nbsp;// First view
&nbsp;&nbsp;&nbsp;first_view = create_first_view(box2, ad);
&nbsp;&nbsp;&nbsp;ad-&gt;first_view_rect = min_set(first_view, box2, 0, 0);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">min_set()</span> function is used for setting the minimum value of a UI component. Currently, the <span style="font-family: Courier New,Courier,monospace">evas_object_size_hint_min_set()</span> function does not work for an elementary UI component. Instead, this function uses the fact that a table contains a rectangle with a minimum value. The object expands to the minimum size of the rectangle.</p>
<pre class="prettyprint">
static Evas_Object *
min_set(Evas_Object *parent, Evas_Object *box, Evas_Coord w, Evas_Coord h)
{
&nbsp;&nbsp;&nbsp;Evas_Object *table, *rect;

&nbsp;&nbsp;&nbsp;table = elm_table_add(box);
&nbsp;&nbsp;&nbsp;evas_object_show(table);

&nbsp;&nbsp;&nbsp;rect = evas_object_rectangle_add(evas_object_evas_get(table));
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(rect, w, h);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(rect, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(rect, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, rect, 0, 0, 1, 1);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(obj, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(obj, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, obj, 0, 0, 1, 1);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(table, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(table, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, table);

&nbsp;&nbsp;&nbsp;return rect;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">create_tabbar()</span> function creates the tab bar using the <span style="font-family: Courier New,Courier,monospace">elm_toolbar()</span> function. The <span style="font-family: Courier New,Courier,monospace">ELM_TOOLBAR_SHRINK_EXPAND</span> parameter is set for items to occupy the same area in the toolbar area. The <span style="font-family: Courier New,Courier,monospace">elm_toolbar_transverse_expanded_set()</span> function expands the vertical size of the toolbar in the horizontal mode. Because the toolbar is used as a tab bar, at least 1 item should be selected. Set it using the <span style="font-family: Courier New,Courier,monospace">ELM_OBJECT_SELECT_MODE_ALWAYS</span> parameter.</p>
<pre class="prettyprint">
static Evas_Object *
create_tabbar(Evas_Object *parent, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *tabbar;

&nbsp;&nbsp;&nbsp;tabbar = elm_toolbar_add(parent);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(tabbar, ELM_TOOLBAR_SHRINK_EXPAND);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(tabbar, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_toolbar_select_mode_set(tabbar, ELM_OBJECT_SELECT_MODE_ALWAYS);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/00_controlbar_icon_playlist.png&quot;, NULL, tabbar_first_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/00_controlbar_icon_artists.png&quot;, NULL, tabbar_second_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/00_controlbar_icon_dialer.png&quot;, NULL, tabbar_third_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/00_controlbar_icon_more.png&quot;, NULL, tabbar_fourth_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_show(tabbar);

&nbsp;&nbsp;&nbsp;return tabbar;
}
</pre>
<p>When a toolbar item is clicked, the <span style="font-family: Courier New,Courier,monospace">tabbar_first_cb()</span> function is called. In the function, the naviframe title changes and sets the scroll page value to 0.</p>
<pre class="prettyprint">
static void
tabbar_first_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;elm_object_item_part_text_set(elm_naviframe_top_item_get(ad-&gt;nf), &quot;elm.text.title&quot;, &quot;News Feed&quot;);
&nbsp;&nbsp;&nbsp;elm_scroller_page_bring_in(ad-&gt;scroller, 0, 0);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_scroller()</span> function creates a scroller and sets options for the page view. To use this view, the scroller should use the <span style="font-family: Courier New,Courier,monospace">tabbar</span> style instead of the <span style="font-family: Courier New,Courier,monospace">default</span> style. It creates an indicated bar above the tab bar. Since the bar is a horizontal scrollbar of the scroller, it should be always visible. Thus, the second parameter of the <span style="font-family: Courier New,Courier,monospace">elm_scroller_policy_set()</span> function is <span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_POLICY_ON</span>.</p>

<p>The horizontal page is set to 480 and the page moves only 1 page at a time.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_SINGLE_DIRECTION_HARD</span> parameter is for scrolling in the scroller. The scroller has 4 pages and each page can have their own scroller. In this case, if you scroll, both scrollers are scrolled. If you want the outside scroller is scrolled only horizontally and the scroller in the page is scrolled only vertically, use the <span style="font-family: Courier New,Courier,monospace">elm_scroller_single_direction_set()</span> function with the <span style="font-family: Courier New,Courier,monospace">ELM_SCROLLER_SINGLE_DIRECTION_HARD</span> parameter.</p>
<p>To select a toolbar item at the end of a scroll animation, use the <span style="font-family: Courier New,Courier,monospace">scroll,anim,stop</span> smart callback.</p>
<pre class="prettyprint">
static Evas_Object *
create_scroller(Evas_Object *parent, appdata_s *ad)
{
Evas_Object *scroller;

&nbsp;&nbsp;&nbsp;scroller = elm_scroller_add(parent);
&nbsp;&nbsp;&nbsp;elm_object_style_set(scroller, &quot;tabbar&quot;);
&nbsp;&nbsp;&nbsp;elm_scroller_policy_set(scroller, ELM_SCROLLER_POLICY_ON, ELM_SCROLLER_POLICY_OFF);
&nbsp;&nbsp;&nbsp;elm_scroller_page_size_set(scroller, 480, 0);
&nbsp;&nbsp;&nbsp;elm_scroller_page_scroll_limit_set(scroller, 1, 0);
&nbsp;&nbsp;&nbsp;elm_scroller_single_direction_set(scroller, ELM_SCROLLER_SINGLE_DIRECTION_HARD);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(scroller, &quot;scroll,anim,stop&quot;, anim_stop_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_show(scroller);

&nbsp;&nbsp;&nbsp;return scroller;
}
</pre>

<h2>First View</h2>

<p>The following figure illustrates the first view, its wireframe structure, and the UI component tree.</p>

    <p class="figure">Figure: SNS first view</p> 
  <p align="center"><img alt="SNS first view" src="../images/ui_sns_sd_first_view.png" /></p>   
 
  <p align="center"><img alt="SNS first view" src="../images/ui_sns_sd_first_widget_tree.png" /></p>   

<p>The <span style="font-family: Courier New,Courier,monospace">create_first_view()</span> function creates the first view. It creates a scroller which contains a box and packs the content created by the <span style="font-family: Courier New,Courier,monospace">create_box_content()</span> function.</p>
<pre class="prettyprint">
static Evas_Object *
create_first_view(Evas_Object *parent, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *scroller, *box, *content, *table;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;scroller = elm_scroller_add(parent);
&nbsp;&nbsp;&nbsp;elm_scroller_policy_set(scroller, ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_AUTO);
&nbsp;&nbsp;&nbsp;elm_scroller_single_direction_set(scroller, ELM_SCROLLER_SINGLE_DIRECTION_HARD);

&nbsp;&nbsp;&nbsp;box = elm_box_add(scroller);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box, 0, 30);
&nbsp;&nbsp;&nbsp;elm_object_content_set(scroller, box);

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; 20; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content = create_box_content(box);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min_set(content, box, 0, 0);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_show(scroller);

&nbsp;&nbsp;&nbsp;return scroller;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">create_box_content()</span> function creates a box which contains a label and a box. The second box contains 3 buttons and occupies 30% of the content area.</p>
<pre class="prettyprint">
Evas_Object *create_box_content(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box, *box2, *label, *btn;

&nbsp;&nbsp;&nbsp;box = elm_box_add(parent);

&nbsp;&nbsp;&nbsp;label = elm_label_add(box);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(label, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(label, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_label_wrap_width_set(label, 30);
&nbsp;&nbsp;&nbsp;elm_label_line_wrap_set(label, ELM_WRAP_MIXED);
&nbsp;&nbsp;&nbsp;elm_object_text_set(label, &quot;EFL is a collection of libraries that are independent
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or may build on top of each-other to provide useful 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;features that complement an OS&#39;s existing environment, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rather than wrap and abstract it, trying to be their
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;own environment and OS in its entirety.&quot;);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, label);
&nbsp;&nbsp;&nbsp;evas_object_show(label);

&nbsp;&nbsp;&nbsp;box2 = elm_box_add(box);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box2, EVAS_HINT_EXPAND, 0.3);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box2, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box2, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(box2, 15, 0);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, box2);
&nbsp;&nbsp;&nbsp;evas_object_show(box2);

&nbsp;&nbsp;&nbsp;btn = elm_button_add(box2);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(btn, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(btn, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;I like it&quot;);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box2, btn);
&nbsp;&nbsp;&nbsp;evas_object_show(btn);
&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;return box;
}
</pre>
<p>The descriptions of the second, third, and fourth view are omitted.</p>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>