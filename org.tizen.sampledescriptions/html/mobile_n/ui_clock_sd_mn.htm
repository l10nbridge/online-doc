<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Clock Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] Clock Sample Overview</h1> 
  <p>The [UI Sample] Clock sample application demonstrates how to implement a complex view by recursive composition of standard EFL UI components and containers in a UI component hierarchy. The sample also shows how to view reconstruction in the landscape mode.</p> 
  
  <p>The sample uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> and <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_box</span>, <span style="font-family: Courier New,Courier,monospace">elm_grid</span>, and <span style="font-family: Courier New,Courier,monospace">elm_table</span> for UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span>, <span style="font-family: Courier New,Courier,monospace">elm_label</span>, <span style="font-family: Courier New,Courier,monospace">elm_image</span>, and <span style="font-family: Courier New,Courier,monospace">elm_genlist</span> for the content inside the view.</p>  

<h2>Alarm View</h2> 

  <p>The following figure illustrates the alarm view, its wireframe structure, and the UI component tree.</p>
  
    <p class="figure">Figure: Alarm view</p> 
  <p align="center"><img alt="Alarm view" src="../images/ui_clock_sd_alarm.png" /></p>
  <p align="center"><img alt="Alarm view" src="../images/ui_clock_sd_alarm_tree.png" /></p>
  
  <p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates the window, which contains an indicator (<span style="font-family: Courier New,Courier,monospace">elm_conformant</span>), a view manager (<span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>), and the content created using the <span style="font-family: Courier New,Courier,monospace">create_toolbar()</span> function.</p>
 
<pre class="prettyprint">static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it, *tabbar_it;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;wm,rotation,changed&quot;, rotation_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, NULL, NULL, NULL, NULL, &quot;tabbar/icon/notitle&quot;);

&nbsp;&nbsp;&nbsp;// Tabbar
&nbsp;&nbsp;&nbsp;ad-&gt;tabbar = create_toolbar(ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;tabbar&quot;, ad-&gt;tabbar);

&nbsp;&nbsp;&nbsp;// Set the first view
&nbsp;&nbsp;&nbsp;tabbar_it = elm_toolbar_first_item_get(ad-&gt;tabbar);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_selected_set(tabbar_it, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_toolbar()</span> function creates the main view content. It first pushes a naviframe view, and then creates a toolbar and sets the toolbar options. 3 items are added in the toolbar.</p>

<pre class="prettyprint">static Evas_Object*
create_toolbar(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *tabbar;

&nbsp;&nbsp;&nbsp;tabbar = elm_toolbar_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;elm_object_style_set(tabbar, &quot;tabbar&quot;);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(tabbar, ELM_TOOLBAR_SHRINK_NONE);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(tabbar, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/icon_alarm.png&quot;, &quot;Alarm&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/icon_worldclock.png&quot;, &quot;World Clock&quot;, tabbar_item_cb, ad);
&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(tabbar, ICON_DIR&quot;/icon_timer.png&quot;, &quot;Timer&quot;, tabbar_item_cb, ad);

&nbsp;&nbsp;&nbsp;return tabbar;
}
</pre>

<p>When a tab bar item is selected, the <span style="font-family: Courier New,Courier,monospace">tabbar_item_selected()</span> function is called.
If the Alarm tab is selected (and the device rotation degree is 0 or 180), the <span style="font-family: Courier New,Courier,monospace">create_alarm_view()</span> function is called.
</p>

<p>The <span style="font-family: Courier New,Courier,monospace">sub_view</span> value is set as the box object to take from the <span style="font-family: Courier New,Courier,monospace">create_alarm_view()</span> function. The box object is then posted to the naviframe.</p>

<pre class="prettyprint">static void
tabbar_item_selected(appdata_s *ad, Elm_Object_Item *it)
{
&nbsp;&nbsp;&nbsp;Evas_Object *sub_view;
&nbsp;&nbsp;&nbsp;const char *str = NULL;

&nbsp;&nbsp;&nbsp;str = elm_object_item_text_get(it);

&nbsp;&nbsp;&nbsp;if (str &amp;&amp; !strcmp(str, &quot;World Clock&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_view = create_worldclock_view(ad);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (str &amp;&amp; !strcmp(str, &quot;Timer&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;current_degree == 0 || ad-&gt;current_degree == 180)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_view = create_timer_view(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_view = create_landscape_timer_view(ad);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;current_degree == 0 || ad-&gt;current_degree == 180)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_view = create_alarm_view(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sub_view = create_landscape_alarm_view(ad);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;nf, sub_view);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_alarm_view()</span> function creates the content of the main view.
A box containing grid and button objects is created and added to the naviframe.</p>

<pre class="prettyprint">static Evas_Object *
create_alarm_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box, *grid1, *bg1, *label1, *label2, *grid2, *bg2, *img, *label3, *btn;

&nbsp;&nbsp;&nbsp;box = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, grid1);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, grid2);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, btn);

&nbsp;&nbsp;&nbsp;return box;
}
</pre>

<p>A grid containing <span style="font-family: Courier New,Courier,monospace">bg</span> and <span style="font-family: Courier New,Courier,monospace">label</span> objects is created and added to the box container. Each object in the grid has its own relative coordinates for positioning.</p>

<pre class="prettyprint">grid1 = elm_grid_add(box);
evas_object_size_hint_weight_set(grid1, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
evas_object_size_hint_align_set(grid1, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_show(grid1);

bg1 = create_bg(grid1, 1);
elm_grid_pack(grid1, bg1, 0, 0, 100, 100);

label1 = elm_label_add(grid1);
elm_object_text_set(label1, &quot;&lt;font_size=110&gt;&lt;color=#ffffff&gt;07:26&lt;/color&gt;&lt;/font_size&gt;&quot;);
evas_object_show(label1);
elm_grid_pack(grid1, label1, 22, 8, 100, 100);

label2 = elm_label_add(grid1);
elm_object_text_set(label2, &quot;&lt;font_size=22&gt;&lt;color=#a6a6a6&gt;wed, January 1&lt;/color&gt;&lt;/font_size&gt;&quot;);
evas_object_show(label2);
elm_grid_pack(grid1, label2, 35, 78, 100, 100);

grid2 = elm_grid_add(box);
evas_object_size_hint_weight_set(grid2, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(grid2, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_size_hint_min_set(grid2, -1, 430);
evas_object_show(grid2);

bg2 = create_bg(grid2, 2);
elm_grid_pack(grid2, bg2, 0, 0, 100, 100);

img = create_img(grid2, &quot;no_alarm.png&quot;);
elm_grid_pack(grid2, img, 32, 32, 36, 36);

label3 = elm_label_add(grid2);
elm_object_text_set(label3, &quot;&lt;b&gt;&lt;font_size=22&gt;&lt;color=#ffffff&gt;No alarms&lt;/color&gt;&lt;/font_size&gt;&lt;/b&gt;&quot;);
evas_object_show(label3);
elm_grid_pack(grid2, label3, 40, 68, 100, 100);

btn = create_btn(box, &quot;Create alarm&quot;);</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">bg</span>, <span style="font-family: Courier New,Courier,monospace">img</span>, and <span style="font-family: Courier New,Courier,monospace">btn</span> objects are created for reusability.</p>

<pre class="prettyprint">static Evas_Object*
create_bg(Evas_Object *parent, int type)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg;

&nbsp;&nbsp;&nbsp;bg = elm_bg_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(bg, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(bg, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;if (type == 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_bg_color_set(bg, 0, 0, 0);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_bg_color_set(bg, 0, 40, 40);

&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;return bg;
}

static Evas_Object*
create_img(Evas_Object *parent, char *filename)
{
&nbsp;&nbsp;&nbsp;Evas_Object *img;
&nbsp;&nbsp;&nbsp;char buf[PATH_MAX];

&nbsp;&nbsp;&nbsp;img = elm_image_add(parent);
&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s/%s&quot;, ICON_DIR, filename);
&nbsp;&nbsp;&nbsp;elm_image_file_set(img, buf, NULL);
&nbsp;&nbsp;&nbsp;evas_object_show(img);

&nbsp;&nbsp;&nbsp;return img;
}

static Evas_Object*
create_btn(Evas_Object *parent, char *text)
{
&nbsp;&nbsp;&nbsp;Evas_Object *btn;
&nbsp;&nbsp;&nbsp;char buf[PATH_MAX];

&nbsp;&nbsp;&nbsp;btn = elm_button_add(parent);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(btn, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(btn, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s&quot;, text);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, buf);
&nbsp;&nbsp;&nbsp;evas_object_show(btn);

&nbsp;&nbsp;&nbsp;return btn;
}
</pre>
  
  <h2>Landscape Alarm View</h2>
  
  <p>The following figure illustrates the landscape Alarm view, its wireframe structure, and the UI component tree.</p>

  <p class="figure">Figure: Landscape Alarm view</p> 
  <p align="center"><img alt="Landscape Alarm view" src="../images/ui_clock_sd_alarm_ls.png" /></p>
  <p align="center"><img alt="Landscape Alarm view" src="../images/ui_clock_sd_alarm_tree_ls.png" /></p>

<p>When the device is rotated, the application rearranges the UI component layout to match the view mode (portrait or landscape).</p>

<p>In this sample, a smart callback for device rotation in the main function is added by default.</p>

<pre class="prettyprint">evas_object_smart_callback_add(ad-&gt;win, &quot;wm,rotation,changed&quot;, rotation_cb, ad);</pre>

<p>The smart callback is called when the device is rotated.</p>

<p>The selected view is reconstructed according to the current device angle.</p>

<p>In the following snippet:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">data</span> is the data provided by the user during callback registration.</li>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the handle to the object on which the event occurred.</li>
<li><span style="font-family: Courier New,Courier,monospace">event_info</span> is the data the object wants to pass to the callback function.</li>
</ul>

<pre class="prettyprint">static void
rotation_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *it;
&nbsp;&nbsp;&nbsp;const char *str = NULL;
&nbsp;&nbsp;&nbsp;ad-&gt;current_degree = elm_win_rotation_get(obj);

&nbsp;&nbsp;&nbsp;it = elm_toolbar_selected_item_get(ad-&gt;tabbar);
&nbsp;&nbsp;&nbsp;str = elm_object_item_text_get(it);

&nbsp;&nbsp;&nbsp;if (ad-&gt;current_degree != 0 &amp;&amp; ad-&gt;current_degree != 180 &amp;&amp; !strcmp(str, &quot;World Clock&quot;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;vd-&gt;label1, 33, 16, 100, 100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;vd-&gt;label2, 40, 58, 100, 100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;vd-&gt;label3, 41, 69, 100, 100);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tabbar_item_selected(ad, it);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_landscape_alarm_view()</span> function creates the content of the main view.</p>
<p>A box containing box and button objects is created and added to the naviframe.</p>
<p>A box containing grid objects is created and added to the outer box container.</p>
<p>A grid containing label and image objects is created and added to the inner box container. Each object in the grid has its own relative coordinates for positioning.</p>
<p>A button is created and added to the outer box container.</p>

<pre class="prettyprint">static Evas_Object *
create_landscape_alarm_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *box1, *box2, *label1, *label2, *label3, *img, *bg1, *bg2, *grid1, *grid2, *btn;

&nbsp;&nbsp;&nbsp;box1 = elm_box_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(box1, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(box1, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box1, box2);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(box1, btn);

&nbsp;&nbsp;&nbsp;return box1;
}
</pre>
  
  <h2>World Clock View</h2>
  
  <p>The following figure illustrates the World clock view. The wireframe and UI component tree are similar to the normal view. In this case, no separate up function is needed for the landscape view.</p>

  <p class="figure">Figure: World clock view</p> 
  <p align="center"><img alt="World clock view" src="../images/ui_clock_sd_world_clock.png" /></p>
  <p align="center"><img alt="World clock view" src="../images/ui_clock_sd_world_clock_ls.png" /></p>
  <p align="center"><img alt="World clock view" src="../images/ui_clock_sd_world_clock_tree.png" /></p>
  
<p>The grid object minimum height value has been set. A scroller is automatically added in the list.</p>

<pre class="prettyprint">grid1 = elm_grid_add(box);
evas_object_size_hint_weight_set(grid1, EVAS_HINT_EXPAND, 0.0);
evas_object_size_hint_align_set(grid1, EVAS_HINT_FILL, EVAS_HINT_FILL);
evas_object_size_hint_min_set(grid1, -1, 265);
evas_object_show(grid1);
</pre>

<p>In the landscape view, the relative coordinate values of the grid items change.
To ensure that the view can be maintained, rearrange the items.
</p>

<pre class="prettyprint">if (ad-&gt;current_degree == 0 || ad-&gt;current_degree == 180) 
{
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label1, 22, 17, 100, 100);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label2, 35, 62, 100, 100);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label3, 36, 73, 100, 100);
}
else 
{
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label1, 33, 16, 100, 100);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label2, 40, 58, 100, 100);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid1, label3, 41, 69, 100, 100);
}
</pre>
  
  <h2>Timer View</h2>
  
   <p>The following figure illustrates the Timer view, its wireframe structure, and the UI component tree.</p>

  <p class="figure">Figure: Timer view</p> 
  <p align="center"><img alt="Timer view" src="../images/ui_clock_sd_timer.png" /></p>
  <p align="center"><img alt="Timer view" src="../images/ui_clock_sd_timer_tree.png" /></p>

<p>The <span style="font-family: Courier New,Courier,monospace">create_timer_view()</span> function creates the content of the main view.</p>
<p>A box containing grid and button objects is created and added to the naviframe.</p>
<p>A grid containing label and table objects is created and added to the inner box container. Each object in the grid has its own relative coordinates for positioning. A table is created and added to the grid container.</p>

<pre class="prettyprint">
table = elm_table_add(grid2);
evas_object_show(table);
elm_table_padding_set(table, 5, 5);
elm_table_homogeneous_set(table, EINA_TRUE);

index = 0;
for (i = 0; i &lt; 2; i++) 
{
&nbsp;&nbsp;&nbsp;for (j = 0; j &lt; 6; j++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index == 6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s&quot;, &quot;&lt;font_size=50&gt;Del&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (index == 11)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s&quot;, &quot;&lt;font_size=50&gt;0&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (index == 12)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s&quot;, &quot;&lt;font_size=40&gt;Start&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index &gt; 6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s%d%s&quot;, &quot;&lt;font_size=50&gt;&quot;, index -1, &quot;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s%d%s&quot;, &quot;&lt;font_size=50&gt;&quot;, index, &quot;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;btn = create_btn(grid2, buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_table_pack(table, btn, j, i, 1, 1);
&nbsp;&nbsp;&nbsp;}
}

elm_grid_pack(grid2, table, 0, 0, 100, 100);
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>