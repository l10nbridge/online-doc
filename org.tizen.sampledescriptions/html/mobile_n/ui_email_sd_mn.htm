<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Email Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>

  <h1>[UI Sample] Email Sample Overview</h1> 

<p>The [UI Sample] Email sample application demonstrates how to implement a complex view by a recursive composition of standard EFL UI components and containers in a UI component hierarchy.</p>
<p>The sample uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conformant</span>, <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> and <span style="font-family: Courier New,Courier,monospace">elm_layout</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_list</span>, <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>, and <span style="font-family: Courier New,Courier,monospace">elm_panel</span> for the UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span> and <span style="font-family: Courier New,Courier,monospace">elm_image</span> for the content inside view.</p>   

<h2>Main View</h2>

<p>The following figure illustrates the main view of the [UI Sample] Email sample application, its wireframe structure, and the UI component tree.</p>

    <p class="figure">Figure: [UI Sample] Email main view</p> 
  <p align="center"><img alt="[UI Sample] Email main view" src="../images/ui_email_sd_main_view.png" /></p>
  <p align="center"><img alt="[UI Sample] Email main view" src="../images/ui_email_sd_main_view_widget.png" /></p>  
  <p align="center"><img alt="[UI Sample] Email main view" src="../images/ui_email_sd_main_view_widget2.png" /></p> 
  
<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates the window which consists of an indicator (<span style="font-family: Courier New,Courier,monospace">elm_conformant</span>), view manager (<span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>), and the content created by using the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function. The drawer and compose button are inserted in the naviframe.</p>
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *btn1, *btn2, *bg;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_wm_desktop_layout_support_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform =  elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Main view
&nbsp;&nbsp;&nbsp;ad-&gt;base_ly = create_main_view(ad);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad&gt;conform, ad&gt;base_ly);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;base_ly);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad&gt;nf, EEXT_CALLBACK_BACK, eext_naviframe_back_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;base_ly, &quot;elm.swallow.content&quot;, ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Genlist
&nbsp;&nbsp;&nbsp;ad&gt;genlist = create_genlist(ad&gt;nf);

&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;In Box&quot;, NULL, NULL, ad-&gt;genlist, NULL);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop_cb_set(nf_it, nf_it_pop_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_text_set(nf_it, &quot;subtitle&quot;, user_email);

&nbsp;&nbsp;&nbsp;// Left panel toggle button
&nbsp;&nbsp;&nbsp;btn1 = create_button(ad-&gt;nf, &quot;naviframe/drawers&quot;, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn1, &quot;clicked&quot;, _left_panel_button_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_left_btn&quot;, btn1);

&nbsp;&nbsp;&nbsp;// Right compose button
&nbsp;&nbsp;&nbsp;btn2 = create_button(ad-&gt;nf, NULL, &quot;&lt;font_size=20&gt;New&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn2, &quot;clicked&quot;, _composer_button_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, btn2);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function creates the content of the view. First, the base layout is created. The drawer (panel) list and genlist are also created. The drawer and genlist are inserted in the layout. The drawer contains a list.</p>
<pre class="prettyprint">
static Evas_Object *
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout;

&nbsp;&nbsp;&nbsp;// Drawer layout
&nbsp;&nbsp;&nbsp;layout = create_base_layout(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Panel
&nbsp;&nbsp;&nbsp;ad-&gt;panel = create_panel(layout);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.left&quot;, ad-&gt;panel);

&nbsp;&nbsp;&nbsp;// Panel list
&nbsp;&nbsp;&nbsp;ad-&gt;panel_list = create_panel_list(ad-&gt;panel);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;panel_list, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;panel_list, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;panel_list, &quot;selected&quot;, _list_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;panel, ad-&gt;panel_list);

&nbsp;&nbsp;&nbsp;return layout;
}
</pre>

The <span style="font-family: Courier New,Courier,monospace">create_genlist()</span> function creates a genlist. The genlist has 2 item classes, group item and item. 
<pre class="prettyprint">
static Evas_Object *
create_genlist(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;// Create item class
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *gitc = elm_genlist_item_class_new();
&nbsp;&nbsp;&nbsp;Elm_Genlist_Item_Class *itc = elm_genlist_item_class_new();

&nbsp;&nbsp;&nbsp;gitc-&gt;item_style = &quot;groupindex&quot;;
&nbsp;&nbsp;&nbsp;gitc-&gt;func.text_get = gl_text_get_cb;
&nbsp;&nbsp;&nbsp;gitc-&gt;func.content_get = gl_content_get_cb;
&nbsp;&nbsp;&nbsp;gitc-&gt;func.del = gl_del_cb;

&nbsp;&nbsp;&nbsp;itc-&gt;item_style = &quot;2line.top.3&quot;;
&nbsp;&nbsp;&nbsp;itc-&gt;func.text_get = gl_text_get_cb;
&nbsp;&nbsp;&nbsp;itc-&gt;func.content_get = gl_content_get_cb;
&nbsp;&nbsp;&nbsp;itc-&gt;func.del = gl_del_cb;

&nbsp;&nbsp;&nbsp;genlist = elm_genlist_add(parent);

&nbsp;&nbsp;&nbsp;...

&nbsp;&nbsp;&nbsp;int group_count = 0;
&nbsp;&nbsp;&nbsp;for (index = 0; index &lt; n_items; index++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item_data_s *id = calloc(sizeof(item_data_s), 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;index = index;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index % 10 == 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;group_count++;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;index = group_count;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git = elm_genlist_item_append(genlist, // Genlist object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gitc, // Item class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id, // Item class user data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_GROUP, // Item type
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_selected_cb, // Select smart callback
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id); // Smart callback user data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;item = git;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it = elm_genlist_item_append(genlist, // Genlist object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itc, // Item class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id, // Item class user data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;git, // Parent item
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, // Item type
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl_selected_cb, // Select smart callback
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id); // Smart callback user data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;item = it;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(gitc);
&nbsp;&nbsp;&nbsp;elm_genlist_item_class_free(itc);
&nbsp;&nbsp;&nbsp;evas_object_show(genlist);

&nbsp;&nbsp;&nbsp;return genlist;
}
</pre>

<h2>Compose View</h2>

<p>The following figure illustrates the main screen of the Compose view, its wireframe structure, and the UI component tree.</p>

    <p class="figure">Figure: Compose view</p> 
  <p align="center"><img alt="Email compose view" src="../images/ui_email_sd_compose_view.png" /></p>  
  <p align="center"><img alt="Email compose UI component tree" src="../images/ui_email_sd_compose_widget_tree.png" /></p>  

<pre class="prettyprint">evas_object_smart_callback_add(btn, &quot;clicked&quot;, _composer_button_clicked_cb, ad);
</pre>

<p>In this sample, a smart callback for clicking the compose button is added by default.</p>

<p>The smart callback is called when the compose button is clicked. In this callback, the compose view is created. It consists of a scroller containing a box. The box contains 4 entries. The vertical weight of the box is 0.0, which means that the box resizes to the minimum size.</p>
<pre class="prettyprint">
static void
_composer_button_clicked_cb(void *data, Evas_Object * obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;cdata_s *cd = calloc(1, sizeof(cdata_s));
&nbsp;&nbsp;&nbsp;cd-&gt;ad = ad;
&nbsp;&nbsp;&nbsp;Evas_Object *btn, *scroller, *main_box, *myemail, *to, *subject, *content;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;

&nbsp;&nbsp;&nbsp;scroller = create_scroller(ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Append box
&nbsp;&nbsp;&nbsp;main_box = create_box(scroller);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_box, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(main_box, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(main_box, 0, 30);
&nbsp;&nbsp;&nbsp;elm_object_content_set(scroller, main_box);

&nbsp;&nbsp;&nbsp;// Use email
&nbsp;&nbsp;&nbsp;myemail = create_entry(main_box, user_email, NULL);
&nbsp;&nbsp;&nbsp;elm_entry_editable_set(myemail, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(myemail, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(myemail, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(myemail, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, myemail);

&nbsp;&nbsp;&nbsp;// To
&nbsp;&nbsp;&nbsp;to = create_entry(main_box, NULL, &quot;To&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(to, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(to, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, to);
&nbsp;&nbsp;&nbsp;cd-&gt;to = to;

&nbsp;&nbsp;&nbsp;// Subject
&nbsp;&nbsp;&nbsp;subject = create_entry(main_box, NULL, &quot;Subject&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(subject, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(subject, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, subject);
&nbsp;&nbsp;&nbsp;cd-&gt;subject = subject;

&nbsp;&nbsp;&nbsp;// Content
&nbsp;&nbsp;&nbsp;content = create_entry(main_box, NULL, &quot;Compose email&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(content, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(content, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_box, content);
&nbsp;&nbsp;&nbsp;cd-&gt;content = content;

&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;Compose&quot;, NULL, NULL, scroller, NULL);

&nbsp;&nbsp;&nbsp;// Back button
&nbsp;&nbsp;&nbsp;btn = create_button(ad-&gt;nf, &quot;naviframe/title_cancel&quot;, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, _back_button_clicked_cb, cd);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_left_btn&quot;, btn);

&nbsp;&nbsp;&nbsp;// Send button
&nbsp;&nbsp;&nbsp;btn = create_button(ad-&gt;nf, &quot;naviframe/title_done&quot;, NULL);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, _send_button_clicked_cb, cd);
&nbsp;&nbsp;&nbsp;elm_object_item_part_content_set(nf_it, &quot;title_right_btn&quot;, btn);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>