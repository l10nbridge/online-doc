<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>File Manager Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>File Manager Sample Overview</h1> 

<p>The File Manager sample application demonstrates how you can implement a complex view using EFL UI components and containers.</p>
<p>It uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conformant</span>, <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>, and <span style="font-family: Courier New,Courier,monospace">elm_layout</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_popup</span>, <span style="font-family: Courier New,Courier,monospace">elm_genlist</span>, and <span style="font-family: Courier New,Courier,monospace">elm_box</span> for UI component management inside the view. And UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span>, <span style="font-family: Courier New,Courier,monospace">elm_image</span>, and <span style="font-family: Courier New,Courier,monospace">elm_progress</span> for the content inside view.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screens of the File Manager sample application, its wireframe structure, and the UI component tree.</p>
 
  <p class="figure">Figure: File Manager screens</p> 
  <p align="center"><img alt="File Manager screens" src="../images/filemanager_main.png" /></p>
  <p align="center"><img alt="File Manager screens" src="../images/filemanager_tree.png" /></p>

  
  <p>The application opens with the root storage folder. The user can click the folder and navigate to the subfolders.</p>
<h2>Implementation</h2>

<p>To manage files:</p>
<ol>
<li>Create a window:
<ol type="a">
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">win_create()</span> function creates the window which consists of an indicator (<span style="font-family: Courier New,Courier,monospace">elm_conformant</span>), a view manager (<span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>), and a background (<span style="font-family: Courier New,Courier,monospace">elm_bg</span>).</p>
<pre class="prettyprint">
window_obj* 
win_create()
{
&nbsp;&nbsp;&nbsp;window_obj *obj = calloc(1, sizeof(window_obj));
&nbsp;&nbsp;&nbsp;RETVM_IF(!obj, NULL, &quot;Cannot allocate memory&quot;);

&nbsp;&nbsp;&nbsp;obj-&gt;win = elm_win_add(NULL, &quot;File Manager&quot;, ELM_WIN_BASIC);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(obj-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_show(obj-&gt;win);

&nbsp;&nbsp;&nbsp;obj-&gt;conform = elm_conformant_add(obj-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(obj-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(obj-&gt;win, obj-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(obj-&gt;conform);

&nbsp;&nbsp;&nbsp;obj-&gt;bg = elm_bg_add(obj-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(obj-&gt;bg, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(obj-&gt;bg);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(obj-&gt;conform, &quot;elm.swallow.bg&quot;, obj-&gt;bg);

&nbsp;&nbsp;&nbsp;return obj;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_app_add_naviframe()</span> function adds the view manager (<span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>) to the window. Naviframe is created using the <span style="font-family: Courier New,Courier,monospace"> ui_utils_navi_add()</span> function.</p>
<pre class="prettyprint">
static Evas_Object* 
_app_add_naviframe(app_data *app)
{
&nbsp;&nbsp;&nbsp;Evas_Object *naviframe = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *parent = win_get_host_layout(app-&gt;win);
&nbsp;&nbsp;&nbsp;if (parent)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;naviframe = ui_utils_navi_add(parent, _app_naviframe_backbutton_cb, app);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (naviframe)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;win_set_layout(app-&gt;win, naviframe);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return naviframe;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">ui_utils_navi_add()</span> function creates and adds the view manager (<span style="font-family: Courier New,Courier,monospace">elm_naviframe</span>) to the parent. In the following example, the parent is the window (<span style="font-family: Courier New,Courier,monospace">elm_win</span>).</p>
<pre class="prettyprint">
Evas_Object* 
ui_utils_navi_add(Evas_Object *parent, Eext_Event_Cb back_cb, void *cb_data)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!parent, NULL, &quot;Parent is NULL&quot;);

&nbsp;&nbsp;&nbsp;Evas_Object *navi = elm_naviframe_add(parent);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(navi, EEXT_CALLBACK_BACK, back_cb, cb_data);
&nbsp;&nbsp;&nbsp;elm_naviframe_prev_btn_auto_pushed_set(navi, EINA_FALSE);

&nbsp;&nbsp;&nbsp;evas_object_show(navi);

&nbsp;&nbsp;&nbsp;return navi;
}
</pre>
</li>
</ol>
</li>
<li>Create the main view:
<ol type="a">
<li>The <span style="font-family: Courier New,Courier,monospace">main_view_add()</span> function creates the main layout and UI components as genlist and control bar. Then layout inserts to naviframe.
<pre class="prettyprint">
int 
main_view_add(app_data *app, Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!app, RESULT_TYPE_INVALID_ARG, &quot;App object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!parent, RESULT_TYPE_INVALID_ARG, &quot;Parent object is NULL&quot;);

&nbsp;&nbsp;&nbsp;app-&gt;status.is_mainview = EINA_TRUE;

&nbsp;&nbsp;&nbsp;main_view_data *data = calloc(1, sizeof(main_view_data));
&nbsp;&nbsp;&nbsp;RETVM_IF(!data, RESULT_TYPE_FAIL_ALLOCATE_MEMORY, &quot;Failed to allocate memory&quot;);

&nbsp;&nbsp;&nbsp;data-&gt;view.app = app;
&nbsp;&nbsp;&nbsp;data-&gt;view.navi = parent;

&nbsp;&nbsp;&nbsp;data-&gt;storage_list = NULL;
&nbsp;&nbsp;&nbsp;data-&gt;view.is_root = EINA_FALSE;

&nbsp;&nbsp;&nbsp;data-&gt;view.navi_layout = ui_utils_layout_add(data-&gt;view.navi, _main_view_del_cb, data);
&nbsp;&nbsp;&nbsp;if (!data-&gt;view.navi_layout)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to create layout&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_main_view_destroy(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_FAIL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_layout_file_set(data-&gt;view.navi_layout, ui_utils_get_resource(FM_LAYOUT_EDJ), &quot;navi_layout&quot;);

&nbsp;&nbsp;&nbsp;int result = navigator_add_view(data-&gt;view.app-&gt;navigator, FM_MAIN_VIEW_TITLE, &amp;data-&gt;view);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to add view to naviframe&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = _main_view_create_widgets(data);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to create widgets&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = _main_view_fill(data);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to initialize main view&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_object_item_data_set(data-&gt;view.navi_item, data);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<p class="figure">Figure: File Manager main view layout</p> 
  <p align="center"> <img alt="File Manager main view layout" src="../images/filemanager_main_view.png" /></p>
<li>The <span style="font-family: Courier New,Courier,monospace">ui_utils_genlist_add()</span> function creates the genlist:
<pre class="prettyprint">
Evas_Object* 
ui_utils_genlist_add(Evas_Object *parent, Evas_Object_Event_Cb destroy_cb, void *cb_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *genlist = elm_genlist_add(parent);
&nbsp;&nbsp;&nbsp;RETVM_IF(!genlist, NULL, &quot;Genlist is NULL&quot;);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(genlist, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(genlist, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(genlist, EVAS_CALLBACK_FREE, destroy_cb, cb_data);

&nbsp;&nbsp;&nbsp;evas_object_show(genlist);

&nbsp;&nbsp;&nbsp;return genlist;
}
</pre>
</li>

<li>The <span style="font-family: Courier New,Courier,monospace">_main_view_fill()</span> function gets content using the <span style="font-family: Courier New,Courier,monospace">fs_manager_get_storage_list()</span> function and sets to the genlist using the <span style="font-family: Courier New,Courier,monospace">genlist_widget_content_set()</span> function.
<pre class="prettyprint">
static int 
_main_view_fill(main_view_data *data)
{
&nbsp;&nbsp;&nbsp;int res = fs_manager_get_storage_list(data-&gt;view.app-&gt;manager, &amp;data-&gt;storage_list);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to get storage list&quot;);

&nbsp;&nbsp;&nbsp;genlist_widget_content_set(data-&gt;genlist_widget, data-&gt;storage_list);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>

<li>The <span style="font-family: Courier New,Courier,monospace">genlist_widget_content_set()</span> function sets the content from the list to the genlist.
<pre class="prettyprint">
void 
genlist_widget_content_set(genlist_widget *widget, const Eina_List *file_list)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!widget, &quot;Widget is NULL&quot;);

&nbsp;&nbsp;&nbsp;const Eina_List *list = NULL;
&nbsp;&nbsp;&nbsp;void *item = NULL;

&nbsp;&nbsp;&nbsp;_genlist_widget_set_items_style(widget);

&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(file_list, list, item)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Object_Item *node_item = elm_genlist_item_append(widget-&gt;genlist, &amp;itc, item, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ELM_GENLIST_ITEM_NONE, _genlist_widget_item_sel_cb, widget);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_item_data_set(node_item, item);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>
</li>

<li>Create the storage view:

<ol type="a">
<li>The <span style="font-family: Courier New,Courier,monospace">list_view_add()</span> function creates and shows the storage view. It creates the layout and UI components as navigation path, genlist, and control bar. Then the layout is inserted to naviframe.
<pre class="prettyprint">
int 
list_view_add(app_data *app, Evas_Object *parent, const char *path, const char *dir_name)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!app, RESULT_TYPE_INVALID_ARG, &quot;App object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!parent, RESULT_TYPE_INVALID_ARG, &quot;Parent object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!path, RESULT_TYPE_INVALID_ARG, &quot;Path is NULL&quot;);

&nbsp;&nbsp;&nbsp;app-&gt;status.is_mainview = EINA_FALSE;

&nbsp;&nbsp;&nbsp;list_view_data *data = calloc(1, sizeof(list_view_data));
&nbsp;&nbsp;&nbsp;RETVM_IF(!data, RESULT_TYPE_FAIL_ALLOCATE_MEMORY, &quot;Failed to allocate memory&quot;);

&nbsp;&nbsp;&nbsp;data-&gt;list_view.app = app;
&nbsp;&nbsp;&nbsp;data-&gt;list_view.navi = parent;
&nbsp;&nbsp;&nbsp;data-&gt;list_view.curr_path = (dir_name) ? common_util_strconcat(path, &quot;/&quot;, dir_name, NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;: strdup(path);
&nbsp;&nbsp;&nbsp;data-&gt;list_view.is_root = model_utils_is_root_path(data-&gt;list_view.curr_path);

&nbsp;&nbsp;&nbsp;data-&gt;file_list = NULL;

&nbsp;&nbsp;&nbsp;data-&gt;list_view.navi_layout = ui_utils_layout_add(data-&gt;list_view.navi, _list_view_del_cb, data);
&nbsp;&nbsp;&nbsp;if (!data-&gt;list_view.navi_layout)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to create Layout&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_list_view_destroy(data);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_FAIL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_layout_file_set(data-&gt;list_view.navi_layout, ui_utils_get_resource(FM_LAYOUT_EDJ), &quot;navi_layout&quot;);

&nbsp;&nbsp;&nbsp;int result = fs_manager_get_file_list(data-&gt;list_view.app-&gt;manager, data-&gt;list_view.curr_path, &amp;data-&gt;file_list);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to get file list&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;list_view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;const char *title = ui_utils_title_get(data-&gt;list_view.curr_path);
&nbsp;&nbsp;&nbsp;result = navigator_add_view(data-&gt;list_view.app-&gt;navigator, title, &amp;data-&gt;list_view);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to add view to naviframe&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;list_view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = _list_view_create_widgets(data);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to create widgets&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(data-&gt;list_view.navi_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;Eina_List *path_list = NULL;
&nbsp;&nbsp;&nbsp;int res = navi_path_storage_get_path_list(app-&gt;path_storage, &amp;path_list);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to get folders list for navigation widget&quot;);
&nbsp;&nbsp;&nbsp;navi_path_widget_content_set(data-&gt;navi_path_wgt, path_list);

&nbsp;&nbsp;&nbsp;elm_object_item_data_set(data-&gt;list_view.navi_item, data);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>

<p class="figure">Figure: File Manager storage view layout</p> 
  <p align="center"> <img alt="File Manager storage view layout" src="../images/filemanager_storage_view.png" /></p>
</li>

<li>The <span style="font-family: Courier New,Courier,monospace">navi_path_widget_add()</span> function adds the navigation path component to the view. The UI component consists of the layout (<span style="font-family: Courier New,Courier,monospace">elm_layout</span>), table (<span style="font-family: Courier New,Courier,monospace">elm_table</span>), and scroller (<span style="font-family: Courier New,Courier,monospace">elm_scroller</span>).
<pre class="prettyprint">
navi_path_widget *navi_path_widget_add(view_data *view)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!view, NULL, &quot;View object is NULL&quot;);

&nbsp;&nbsp;&nbsp;navi_path_widget *widget = calloc(1, sizeof(navi_path_widget));
&nbsp;&nbsp;&nbsp;RETVM_IF(!widget, NULL, &quot;Failed to allocate memory&quot;);

&nbsp;&nbsp;&nbsp;widget-&gt;table_size = 0;
&nbsp;&nbsp;&nbsp;widget-&gt;view = view;

&nbsp;&nbsp;&nbsp;widget-&gt;navi_path_layout = ui_utils_genlist_add(widget-&gt;view-&gt;navi_layout, _navi_path_widget_delete_cb, widget);
&nbsp;&nbsp;&nbsp;if (!widget-&gt;navi_path_layout)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Layout is NULL&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_navi_path_widget_destroy(widget);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(widget-&gt;navi_path_layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(widget-&gt;navi_path_layout, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;elm_layout_file_set(widget-&gt;navi_path_layout, ui_utils_get_resource(FM_LAYOUT_EDJ), &quot;path_info&quot;);

&nbsp;&nbsp;&nbsp;evas_object_show(widget-&gt;navi_path_layout);

&nbsp;&nbsp;&nbsp;widget-&gt;navi_path_scroller = elm_scroller_add(widget-&gt;navi_path_layout);
&nbsp;&nbsp;&nbsp;if (!widget-&gt;navi_path_scroller)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Scroller is NULL&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(widget-&gt;navi_path_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(widget-&gt;navi_path_scroller, EINA_TRUE, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_scroller_policy_set(widget-&gt;navi_path_scroller, ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_OFF);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(widget-&gt;navi_path_scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(widget-&gt;navi_path_scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(widget-&gt;navi_path_scroller);

&nbsp;&nbsp;&nbsp;widget-&gt;navi_path_table = elm_table_add(widget-&gt;navi_path_layout);
&nbsp;&nbsp;&nbsp;if (!widget-&gt;navi_path_table)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Table is NULL&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_del(widget-&gt;navi_path_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(widget-&gt;navi_path_table, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(widget-&gt;navi_path_table, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(widget-&gt;navi_path_table);

&nbsp;&nbsp;&nbsp;elm_object_content_set(widget-&gt;navi_path_scroller, widget-&gt;navi_path_table);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(widget-&gt;navi_path_layout, &quot;info&quot;, widget-&gt;navi_path_scroller);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(widget-&gt;view-&gt;navi_layout, &quot;header_box&quot;, widget-&gt;navi_path_layout);

&nbsp;&nbsp;&nbsp;return widget;
}
</pre>
</li>
</ol>
</li>

<li>Edit files.
<p>The following figure illustrates the main functionalities of the File Manager.</p>

  <p class="figure">Figure: File Manager functionalities</p> 
  <p align="center"> <img alt="File Manager functionalities" src="../images/filemanager_functionalities.png" /> </p> 
<ol type="a">
<li>
<p>After clicking the <strong>Edit Mode</strong> button, the <span style="font-family: Courier New,Courier,monospace">genlist_widget_update()</span> and <span style="font-family: Courier New,Courier,monospace">ctrl_bar_widget_mode_update()</span> functions are called.</p>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">genlist_widget_update()</span> function updates the style of the genlist items. If it is in the edit mode, checkboxes and the <strong>Select All</strong> genlist is shown.</p>
<pre class="prettyprint">
int 
genlist_widget_update(genlist_widget *widget)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!widget-&gt;view, RESULT_TYPE_INVALID_ARG, &quot;View object is NULL&quot;);

&nbsp;&nbsp;&nbsp;app_data *app = widget-&gt;view-&gt;app;

&nbsp;&nbsp;&nbsp;_genlist_widget_set_items_style(widget);
&nbsp;&nbsp;&nbsp;_genlist_widget_reset_all_checkboxes(widget);

&nbsp;&nbsp;&nbsp;if (app-&gt;status.curr_mode == MODE_EDIT)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(widget-&gt;view-&gt;navi_layout, &quot;show_select_all&quot;, &quot;&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_signal_emit(widget-&gt;view-&gt;navi_layout, &quot;hide_select_all&quot;, &quot;&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">ctrl_bar_widget_mode_update()</span> function updates the buttons in the toolbar. In the edit mode, the toolbar shows the delete, copy, move, and exit functionalities.</p>
<pre class="prettyprint">
int 
ctrl_bar_widget_mode_update(ctrl_bar_widget *widget)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!widget, RESULT_TYPE_FAIL, &quot;Widget object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!widget-&gt;view, RESULT_TYPE_FAIL, &quot;View object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!widget-&gt;ctrl_bar, RESULT_TYPE_FAIL, &quot;Ctrl bar object is NULL&quot;);

&nbsp;&nbsp;&nbsp;_ctrl_bar_widget_add_update_buttons(widget);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}

static void 
_ctrl_bar_widget_add_update_buttons(ctrl_bar_widget *widget)
{
&nbsp;&nbsp;&nbsp;if (app-&gt;status.curr_mode == MODE_DEFAULT)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Elm_Object_Item *edit_item = elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_EDIT, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ctrl_bar_widget_edit_btn_cb, widget);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_MORE, _ctrl_bar_widget_more_btn_cb, widget);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_EXIT, _ctrl_bar_widget_exit_btn_cb, widget);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (list_view_items_count_get(widget-&gt;view) &lt; 1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_item_disabled_set(edit_item, EINA_TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (app-&gt;status.curr_mode == MODE_EDIT)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_DELETE, _ctrl_bar_widget_delete_btn_cb, widget);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_MOVE, _ctrl_bar_widget_move_btn_cb, widget);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_COPY, _ctrl_bar_widget_copy_btn_cb, widget);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_toolbar_item_append(widget-&gt;ctrl_bar, NULL, FM_TOOLBAR_TEXT_CANCEL, _ctrl_bar_widget_cancel_btn_cb, widget);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>
</li>

<li>Create a new folder:
<ol type="a">
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_popup_new_folder_type_create()</span> function creates a popup with an edit field and the <strong>OK</strong> and <strong>Cancel</strong> buttons. It sets the text and callback functions.</p>
<pre class="prettyprint">
static int 
_popup_new_folder_type_create(view_data *view)
{
&nbsp;&nbsp;&nbsp;Evas_Object *popup = _popup_new(view-&gt;navi, NULL, view);
&nbsp;&nbsp;&nbsp;RETVM_IF(!popup, RESULT_TYPE_INVALID_ARG, &quot;Failed to create popup&quot;);

&nbsp;&nbsp;&nbsp;elm_object_part_text_set(popup, &quot;title,text&quot;, POPUP_TEXT_TITLE_NEW_FOLDER);

&nbsp;&nbsp;&nbsp;int res = _popup_editfield_add(popup);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to add editfield&quot;);

&nbsp;&nbsp;&nbsp;res = _popup_buttons_add(popup, _popup_create_folder_ok_cb, _popup_cancel_cb);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to add buttons&quot;);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_popup_new()</span> function creates a popup (<span style="font-family: Courier New,Courier,monospace">elm_popup</span>) and sets its text and style.</p>
<pre class="prettyprint">
static Evas_Object* 
_popup_new(Evas_Object *parent, const char *text, const void *data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *popup = elm_popup_add(parent);
&nbsp;&nbsp;&nbsp;RETVM_IF(!popup, NULL, &quot;Failed to create popup&quot;);

&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, _popup_back_button_cb, NULL);

&nbsp;&nbsp;&nbsp;elm_object_style_set(popup, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;elm_object_text_set(popup, text);

&nbsp;&nbsp;&nbsp;evas_object_data_set(popup, &quot;view&quot;, data);
&nbsp;&nbsp;&nbsp;evas_object_show(popup);

&nbsp;&nbsp;&nbsp;return popup;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_popup_editfield_add()</span> creates the edit field from the entry (<span style="font-family: Courier New,Courier,monospace">elm_entry</span>), sets its theme and text.</p>
<pre class="prettyprint">
static int 
_popup_editfield_add(Evas_Object *popup)
{
&nbsp;&nbsp;&nbsp;Evas_Object *entry = elm_entry_add(popup);
&nbsp;&nbsp;&nbsp;RETVM_IF(!entry, RESULT_TYPE_INVALID_ARG, &quot;Failed to create entry&quot;);

&nbsp;&nbsp;&nbsp;elm_layout_theme_set(entry, &quot;entry&quot;, &quot;base-single&quot;, &quot;editfield&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(entry, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_entry_scrollable_set(entry, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_entry_single_line_set(entry, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_object_part_text_set(entry, &quot;elm.guide&quot;, POPUP_TEXT_EMPTY_EDIT_FIELD);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(entry, &quot;elm.text&quot;, POPUP_TEXT_NEW_FOLDER);
&nbsp;&nbsp;&nbsp;elm_object_content_set(popup, entry);

&nbsp;&nbsp;&nbsp;elm_entry_cursor_end_set(entry);
&nbsp;&nbsp;&nbsp;elm_object_focus_set(entry, EINA_TRUE);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
</ol></li>
<li>Copy operation:
<ol type="a">
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_ctrl_bar_widget_copy_btn_cb()</span> function is called when the <strong>Copy</strong> button is clicked. This function copies the selected items using the <span style="font-family: Courier New,Courier,monospace">list_view_copy_items()</span> function then updates the storage list using the <span style="font-family: Courier New,Courier,monospace">list_view_update()</span> function and shows the popup.</p>
<pre class="prettyprint">
static void 
_ctrl_bar_widget_copy_btn_cb(void *data, Evas_Object *obj, void *eventInfo)
{
&nbsp;&nbsp;&nbsp;RETM_IF(!data, &quot;Data is NULL&quot;);

&nbsp;&nbsp;&nbsp;ctrl_bar_widget *widget = data;
&nbsp;&nbsp;&nbsp;widget-&gt;view-&gt;app-&gt;status.curr_mode = MODE_DEFAULT;

&nbsp;&nbsp;&nbsp;int res = list_view_copy_items(widget-&gt;view);
&nbsp;&nbsp;&nbsp;RETM_IF(res != RESULT_TYPE_OK, &quot;Failed to copy file&quot;);

&nbsp;&nbsp;&nbsp;res = list_view_update(widget-&gt;view-&gt;navi_item, UPDATE_TYPE_GENLIST | UPDATE_TYPE_CTRL_BAR_MODE);
&nbsp;&nbsp;&nbsp;RETM_IF(res != RESULT_TYPE_OK, &quot;Failed to update view&quot;);

&nbsp;&nbsp;&nbsp;res = popup_create(widget-&gt;view, POPUP_TYPE_COPY_MOVE);
&nbsp;&nbsp;&nbsp;RETM_IF(res != RESULT_TYPE_OK, &quot;Failed to create popup&quot;);
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">list_view_copy_items()</span> function copies selected files to the clipboard using the <span style="font-family: Courier New,Courier,monospace">clipboard_add_data()</span> function and sets the operation type using the <span style="font-family: Courier New,Courier,monospace">clipboard_set_operation()</span> function.</p>
<pre class="prettyprint">
int 
list_view_copy_items(view_data *view)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!view, RESULT_TYPE_INVALID_ARG, &quot;View object is NULL&quot;);

&nbsp;&nbsp;&nbsp;list_view_data *list_data = (list_view_data *)view;
&nbsp;&nbsp;&nbsp;app_data *app = list_data-&gt;list_view.app;

&nbsp;&nbsp;&nbsp;int res = clipboard_add_data(app-&gt;clipboard, list_data-&gt;file_list);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to copy files&quot;);

&nbsp;&nbsp;&nbsp;res = clipboard_set_operation(app-&gt;clipboard, OPERATION_TYPE_COPY);
&nbsp;&nbsp;&nbsp;RETVM_IF(res != RESULT_TYPE_OK, res, &quot;Failed to set operation&quot;);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
</ol></li>
<li>Model functionality:
<ul>
<li>
<p>The main model part functionalities provided by the <span style="font-family: Courier New,Courier,monospace">fs_manager</span> and <span style="font-family: Courier New,Courier,monospace">fs_operation</span> methods.</p>
<p>The provided <span style="font-family: Courier New,Courier,monospace">fs_manager</span> API is used by the GUI elements to get data the for UI component: list of available storages, list of files and subfolder for specified folder; make copy, move, delete operations on files, and folders.</p>
<p>To get a list of available storages, use the <span style="font-family: Courier New,Courier,monospace">fs_manager_get_storage_list()</span> function.</p>
<pre class="prettyprint">
int 
fs_manager_get_storage_list(fs_manager *manager, Eina_List **storage_list)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!manager, RESULT_TYPE_INVALID_ARG, &quot;File manager is NULL&quot;);
&nbsp;&nbsp;&nbsp;if (manager-&gt;is_locked)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;File manager is busy&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_BUSY;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;bool is_supported = false;

&nbsp;&nbsp;&nbsp;int res = _fs_manager_is_mmc_supported(&amp;is_supported);
&nbsp;&nbsp;&nbsp;if (res != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return res;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (is_supported)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;storage_info *const pNode_internal = calloc(1, sizeof(node_info));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode_internal-&gt;root_name = strdup(FM_MEMORY_LABEL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode_internal-&gt;root_path = strdup(FM_MEMORY_FOLDER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode_internal-&gt;type = STORAGE_TYPE_MMC;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*storage_list = eina_list_append(*storage_list, pNode_internal);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;storage_info *const pNode_device = calloc(1, sizeof(node_info));
&nbsp;&nbsp;&nbsp;pNode_device-&gt;root_name = strdup(FM_PHONE_LABEL);
&nbsp;&nbsp;&nbsp;pNode_device-&gt;root_path = strdup(FM_PHONE_FOLDER);
&nbsp;&nbsp;&nbsp;pNode_device-&gt;type = STORAGE_TYPE_PHONE;

&nbsp;&nbsp;&nbsp;*storage_list = eina_list_append(*storage_list, pNode_device);
&nbsp;&nbsp;&nbsp;*storage_list = eina_list_sort(*storage_list, eina_list_count(*storage_list), _fs_manager_sort_by_name_cb);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>To check whether an SD card is mounted, the <span style="font-family: Courier New,Courier,monospace">_fs_manager_is_mmc_supported()</span> function is used where the <span style="font-family: Courier New,Courier,monospace">storage_get_external_memory_size()</span> function from the storage API is called. The total size of the external storage is counted. If the size is 0, no SD card is mounted.</p>
<p>For getting a list of the files and subfolders in the current folder, the <span style="font-family: Courier New,Courier,monospace">fs_manager_get_file_list()</span> function is called. Inside this, the <span style="font-family: Courier New,Courier,monospace">model_utils_read_dir()</span> function is called. It gets 2 Eina_List containers with the current folder&#39;s subfolders and files. Using the <span style="font-family: Courier New,Courier,monospace">eina_list_sort()</span> function sorts the lists. The order can be defined using the <span style="font-family: Courier New,Courier,monospace">_fs_manager_sort_by_name_cb()</span> function and  merged into the result list using the <span style="font-family: Courier New,Courier,monospace">eina_list_merge()</span> function.</p>
<pre class="prettyprint">
int 
fs_manager_get_file_list(fs_manager *manager, const char *dir_path, Eina_List **file_list)
{
&nbsp;&nbsp;&nbsp;Eina_List *dirs = NULL;
&nbsp;&nbsp;&nbsp;Eina_List *files = NULL;
&nbsp;&nbsp;&nbsp;ret = model_utils_read_dir(dir_path, &amp;dirs, &amp;files);
&nbsp;&nbsp;&nbsp;if (ret != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to read dir &#39;%s&#39;&quot;, dir_path);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ret;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;dirs = eina_list_sort(dirs, eina_list_count(dirs), _fs_manager_sort_by_name_cb);
&nbsp;&nbsp;&nbsp;files = eina_list_sort(files, eina_list_count(files), _fs_manager_sort_by_name_cb);
&nbsp;&nbsp;&nbsp;*file_list = eina_list_merge(dirs, files);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>The folder content getter, the <span style="font-family: Courier New,Courier,monospace">model_utils_read_dir()</span> function uses the Linux <span style="font-family: Courier New,Courier,monospace">readdir_r()</span> function to read data from folders.</p>
<pre class="prettyprint">
int 
model_utils_read_dir(const char *dir_path, Eina_List **dir_list, Eina_List **file_list)
{
&nbsp;&nbsp;&nbsp;struct dirent ent_struct;
&nbsp;&nbsp;&nbsp;struct dirent *ent = NULL;
&nbsp;&nbsp;&nbsp;while ((readdir_r(pDir, &amp;ent_struct, &amp;ent) == 0) &amp;&amp; ent)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int skip = (!ent-&gt;d_name ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(strncmp(ent-&gt;d_name, &quot;.&quot;, 1) == 0) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(strncmp(ent-&gt;d_name, &quot;..&quot;, 2) == 0));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skip = skip || ((ent-&gt;d_type != DT_DIR) &amp;&amp; (ent-&gt;d_type != DT_REG));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;skip = skip || ((ent-&gt;d_type == DT_DIR) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(strcmp(dir_path, FM_PHONE_FOLDER) == 0) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(strcmp(ent-&gt;d_name, FM_DEBUG_FOLDER) == 0));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;node_info *const pNode = skip ? NULL : calloc(1, sizeof(node_info));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pNode)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode-&gt;parent_path = strdup(dir_path);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode-&gt;name = strdup(ent-&gt;d_name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode-&gt;is_selected = EINA_FALSE;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ent-&gt;d_type == DT_DIR)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pNode-&gt;type = FILE_TYPE_DIR;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model_utils_get_file_category(ent-&gt;d_name, &amp;(pNode-&gt;type));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pNode-&gt;type == FILE_TYPE_DIR)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*dir_list = eina_list_append(*dir_list, pNode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*file_list = eina_list_append(*file_list, pNode);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;closedir(pDir);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>To create a new folder in the file system, use the <span style="font-family: Courier New,Courier,monospace">fs_manager_create_folder()</span> function that uses the Linux <span style="font-family: Courier New,Courier,monospace">mkdir()</span> method.</p>
<pre class="prettyprint">
int 
fs_manager_create_folder(fs_manager *manager, const char *dir)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!manager, RESULT_TYPE_INVALID_ARG, &quot;File manager is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!dir, RESULT_TYPE_INVALID_ARG, &quot;Directory path is NULL&quot;);
&nbsp;&nbsp;&nbsp;if (mkdir(dir, DIR_MODE) &lt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to create folder &#39;%s&#39;&quot;, dir);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_FAIL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>To create a copy, or move or delete an operation, the <span style="font-family: Courier New,Courier,monospace">fs_manager</span> provides the <span style="font-family: Courier New,Courier,monospace">fs_manager_copy_files()</span>, <span style="font-family: Courier New,Courier,monospace">fs_manager_move_files()</span>,  and <span style="font-family: Courier New,Courier,monospace">fs_manager_delete_files()</span> functions. All of them call the private <span style="font-family: Courier New,Courier,monospace">_fs_manager_generate_operation()</span> function. In this method, the <span style="font-family: Courier New,Courier,monospace">fs_operation</span> instance is created.</p>
<pre class="prettyprint">
static int 
_fs_manager_generate_operation(fs_manager *manager, Eina_List *source_list, const char *dest_path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operation_type oper_type, fs_manager_complete_cb_func func, void *data)
{
&nbsp;&nbsp;&nbsp;manager-&gt;user_cb_func = func;
&nbsp;&nbsp;&nbsp;manager-&gt;user_cb_data = data;

&nbsp;&nbsp;&nbsp;manager-&gt;operation = fs_operation_create();
&nbsp;&nbsp;&nbsp;if (!manager-&gt;operation)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_fs_manager_clear_data(manager);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to allocate memory for file operation&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_FAIL_ALLOCATE_MEMORY;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int result = fs_operation_set_data(manager-&gt;operation, source_list, dest_path, oper_type);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_fs_manager_clear_data(manager);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to set operation data&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;fs_operation_cb_data *cb_data = calloc(1, sizeof(fs_operation_cb_data));
&nbsp;&nbsp;&nbsp;if (!cb_data)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_fs_manager_clear_data(manager);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to allocate memory for callback operation data&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return RESULT_TYPE_FAIL_ALLOCATE_MEMORY;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;cb_data-&gt;manager = manager;
&nbsp;&nbsp;&nbsp;cb_data-&gt;result = RESULT_TYPE_FAIL;

&nbsp;&nbsp;&nbsp;// Lock file system manager
&nbsp;&nbsp;&nbsp;manager-&gt;is_locked = EINA_TRUE;

&nbsp;&nbsp;&nbsp;result = fs_operation_execute(manager-&gt;operation, _on_operation_completed, cb_data);
&nbsp;&nbsp;&nbsp;if (result != RESULT_TYPE_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(cb_data);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_fs_manager_clear_data(manager);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;manager-&gt;is_locked = EINA_FALSE;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to execute operation&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
</li>
<li>
<p>Every file operation that is needed to be done runs separately from the main loop thread. This functionality is provided by the <span style="font-family: Courier New,Courier,monospace">fs_operation</span> API. The <span style="font-family: Courier New,Courier,monospace">fs_manager</span> creates the <span style="font-family: Courier New,Courier,monospace">fs_operation</span> instance, sets the operation data, completes the callback data, and runs this operation by calling the <span style="font-family: Courier New,Courier,monospace">fs_operation_execute()</span> function where a new instance of the <span style="font-family: Courier New,Courier,monospace">ecore_thread</span> is created.</p>
<pre class="prettyprint">
int 
fs_operation_execute(fs_operation *operation, fs_operation_cb_func cb_func, fs_operation_cb_data *cb_data)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!operation, RESULT_TYPE_INVALID_ARG, &quot;Operation object is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!operation-&gt;source_list, RESULT_TYPE_FAIL,&quot;File list not set&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(operation-&gt;oper_type == OPERATION_TYPE_NONE, RESULT_TYPE_FAIL,&quot;Type of operation not set&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!operation-&gt;dst_path &amp;&amp; (operation-&gt;oper_type != OPERATION_TYPE_DELETE),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RESULT_TYPE_FAIL, &quot;Destination path not set&quot;);

&nbsp;&nbsp;&nbsp;operation-&gt;cb_func = cb_func;
&nbsp;&nbsp;&nbsp;operation-&gt;cb_data = cb_data;

&nbsp;&nbsp;&nbsp;operation-&gt;exec_thread = ecore_thread_feedback_run(_fs_operation_run, NULL,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_fs_operation_end, NULL, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void*)operation, EINA_TRUE);

&nbsp;&nbsp;&nbsp;RETVM_IF(!operation-&gt;exec_thread, RESULT_TYPE_FAIL, &quot;Failed to create thread&quot;);

&nbsp;&nbsp;&nbsp;return RESULT_TYPE_OK;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_fs_operation_run()</span> function is the thread function that runs in the separate thread. The operation is executed in this function file. The result of the operation is set to the callback data.</p>
<pre class="prettyprint">
void 
_fs_operation_run(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;fs_operation *operation = data;
&nbsp;&nbsp;&nbsp;int res = RESULT_TYPE_FAIL;

&nbsp;&nbsp;&nbsp;switch (operation-&gt;oper_type)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case OPERATION_TYPE_COPY:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res = _fs_operation_copy(operation);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case OPERATION_TYPE_MOVE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res = _fs_operation_move(operation);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case OPERATION_TYPE_DELETE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res = _fs_operation_delete(operation);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Operation type not set&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (operation-&gt;is_canceled)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (operation-&gt;cb_data)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operation-&gt;cb_data-&gt;result = res;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">_fs_operation_end()</span> function runs after the <span style="font-family: Courier New,Courier,monospace">_fs_operation_run()</span> is finished and it runs in the main loop. In this method, the operation callback function is called and the operation result is returned to the operation caller.</p>
<pre class="prettyprint">
void 
_fs_operation_end(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;fs_operation *operation = data;
&nbsp;&nbsp;&nbsp;_fs_operation_delete_exec_thread(operation);
&nbsp;&nbsp;&nbsp;if (operation-&gt;is_canceled)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fs_operation_destroy(operation);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (operation-&gt;cb_func)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operation-&gt;cb_func(operation-&gt;cb_data);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ul>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>