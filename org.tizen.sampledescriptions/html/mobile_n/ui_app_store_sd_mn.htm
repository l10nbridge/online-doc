<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] ApplicationStore Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] ApplicationStore Sample Overview</h1> 
  <p>The [UI Sample] ApplicationStore sample application demonstrates how to implement a complex view by recursive composition of standard EFL UI components and containers in a UI component hierarchy.</p> 
  
  <p>The sample uses UI components, such as  <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> and <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_table</span> and <span style="font-family: Courier New,Courier,monospace">elm_box</span> for UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span>, <span style="font-family: Courier New,Courier,monospace">elm_label</span>, and <span style="font-family: Courier New,Courier,monospace">elm_image</span> for the content inside the view.</p>
  
  <p>The following figure illustrates the main screen of the [UI Sample] ApplicationStore, its wireframe structure, and the UI component tree.</p>
  
    <p class="figure">Figure: [UI Sample] ApplicationStore screen</p> 
  <p align="center"><img alt="[UI Sample] ApplicationStore screen" src="../images/ui_application_store_sd.png" /></p>
  <p align="center"><img alt="[UI Sample] ApplicationStore screen" src="../images/ui_application_store_sd_tree.png" /></p>
  
  <h2>Application Layout</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function is responsible for creating the application layout. It starts by creating a window, then adds <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> to it to decorate the window with an indicator. <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> is added to act as a view manager of the window and provide the window title functionality. The main view is created using the <span style="font-family: Courier New,Courier,monospace">add_main_view()</span> function and added to the naviframe.</p>
 
<pre class="prettyprint">static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;

&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_app_base_scale_set(1.8);

&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant 
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Base Layout 
&nbsp;&nbsp;&nbsp;ad-&gt;layout = elm_layout_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(ad-&gt;layout, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;layout);

&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;layout);

&nbsp;&nbsp;&nbsp;// Naviframe 
&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Main view 
&nbsp;&nbsp;&nbsp;ad-&gt;mainview = add_main_view(ad);

&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(ad-&gt;nf, &quot;Application Store&quot;, NULL, NULL, ad-&gt;mainview, NULL);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;elm.swallow.content&quot;, ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);

&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;mainview, EEXT_CALLBACK_BACK, mainview_back_cb, ad);
}
</pre>

<h2>Main View</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">add_main_view()</span> function creates the content of the view by composing a scroller and a container component (<span style="font-family: Courier New,Courier,monospace">elm_box</span>) to arrange the individual content UI component vertically. The scroller adds the scrolling facility in case the content size is bigger than the available space.</p>

<p>The individual item in the container can be a content UI component, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span>, or another container, such as <span style="font-family: Courier New,Courier,monospace">elm_table</span> or <span style="font-family: Courier New,Courier,monospace">elm_box</span> as shown in the function.</p>

<pre class="prettyprint">static Evas_Object *
add_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *scroller, *main_view, *item_table, *item_header, *item_content;
&nbsp;&nbsp;&nbsp;int content_height = ELM_SCALE_SIZE(240);
&nbsp;&nbsp;&nbsp;int grid_item_height = ELM_SCALE_SIZE(60);

&nbsp;&nbsp;&nbsp;scroller = elm_scroller_add(win);
&nbsp;&nbsp;&nbsp;elm_scroller_bounce_set(scroller, EINA_FALSE, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;evas_object_show(scroller);

&nbsp;&nbsp;&nbsp;main_view = elm_box_add(win);
&nbsp;&nbsp;&nbsp;elm_box_align_set(main_view, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(main_view, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(main_view, ELM_SCALE_SIZE(10), ELM_SCALE_SIZE(15));
&nbsp;&nbsp;&nbsp;elm_object_content_set(scroller, main_view);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;item_table = add_item_table(main_view, grid_item_height);
&nbsp;&nbsp;&nbsp;evas_object_show(item_grid);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_view, item_table);
</pre>

<p>An item header is created and added to the main box container.</p>

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;item_header = create_item_header(main_view, &quot;&lt;font_size=30&gt;New Movie releases&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(item_header);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_view, item_header);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;item_content = create_item_content(main_view, content_height, 0);
&nbsp;&nbsp;&nbsp;evas_object_show(item_content);
&nbsp;&nbsp;&nbsp;elm_box_pack_end(main_view, item_content);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">add_item_table()</span> function creates a table and packs the button component into it.</p>

<pre class="prettyprint">static Evas_Object *
add_item_table(Evas_Object *parent, int content_height)
{
&nbsp;&nbsp;&nbsp;Evas_Object *content_table, *content *ic;

&nbsp;&nbsp;&nbsp;content_table = elm_table_add(parent);
&nbsp;&nbsp;&nbsp;elm_table_homogeneous_set(content_table, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(content_table, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_table_padding_set(content_table, ELM_SCALE_SIZE(5), ELM_SCALE_SIZE(5));
&nbsp;&nbsp;&nbsp;evas_object_show(content_table);

&nbsp;&nbsp;&nbsp;ic = create_image(parent, &quot;apps.jpg&quot;, content_height);
&nbsp;&nbsp;&nbsp;content = create_button(content_table, ic);
&nbsp;&nbsp;&nbsp;evas_object_show(content);
&nbsp;&nbsp;&nbsp;elm_table_pack(content_table, content, 0, 0, 1, 1);
}

static Evas_Object*
create_button(Evas_Object *parent, Evas_Object *content)
{
&nbsp;&nbsp;&nbsp;Evas_Object *button = elm_button_add(parent);
&nbsp;&nbsp;&nbsp;elm_object_style_set(button, &quot;transparent&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, 0.0);

&nbsp;&nbsp;&nbsp;elm_object_content_set(button, content);
</pre>

<p>A listener callback for mouse events is added to the button.</p>

<pre class="prettyprint">&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;pressed&quot;, pressed_cb, content);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;unpressed&quot;, unpressed_cb, content);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, clicked_cb, content);
}
</pre>


<p>The <span style="font-family: Courier New,Courier,monospace">create_label()</span> function creates a label component.</p>

<pre class="prettyprint">static Evas_Object*
create_label(Evas_Object *parent, const char * text)
{
&nbsp;&nbsp;&nbsp;Evas_Object *text_obj = elm_label_add(button);
&nbsp;&nbsp;&nbsp;elm_object_text_set(text_obj, text);

&nbsp;&nbsp;&nbsp;return text_obj;
}
</pre>
  
<p>The <span style="font-family: Courier New,Courier,monospace">create_image()</span> function creates an image to be used as a content object within the button.</p>

<pre class="prettyprint">static Evas_Object*
create_image(Evas_Object *parent, const char *image_path, int min_height)
{
&nbsp;&nbsp;&nbsp;char path[100] = {0};
&nbsp;&nbsp;&nbsp;snprintf(path, sizeof(path), ICON_DIR&quot;/%s&quot;, image_path);
&nbsp;&nbsp;&nbsp;Evas_Object *ic = elm_image_add(button);
&nbsp;&nbsp;&nbsp;elm_image_file_set(ic, path, NULL);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(ic, 0, min_height);

&nbsp;&nbsp;&nbsp;return ic;
}
</pre>

<p>The listener callback gets the call when there is a mouse event on the button.</p>

<p>In the following snippet:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">user_data</span> is the data provided by the user during callback registration.</li>
<li><span style="font-family: Courier New,Courier,monospace">obj</span> is the handle to the object on which the event occurred.</li>
<li><span style="font-family: Courier New,Courier,monospace">event_info</span> is the data the object wants to pass to the callback function.</li>
</ul>

<pre class="prettyprint">static void
clicked_cb(void *user_data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Add your application logic
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>