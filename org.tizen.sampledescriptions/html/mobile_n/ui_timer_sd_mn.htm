<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Timer Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>

  <h1>[UI Sample] Timer Sample Overview</h1> 
  
  <p>The Timer sample demonstrates how to use the Ecore timer and adjust the specific timers in the timer list.</p> 
  
  <p>The sample uses Ecore timer functions, such as <span style="font-family: Courier New,Courier,monospace">ecore_timer_add()</span> for creating a timer to call the given function in the given period of time, <span style="font-family: Courier New,Courier,monospace">ecore_timer_del()</span> to delete the specific timer from the timer list, <span style="font-family: Courier New,Courier,monospace">ecore_timer_freeze()</span> and <span style="font-family: Courier New,Courier,monospace">ecore_timer_thaw()</span> for freezing and thawing the specific timer, and <span style="font-family: Courier New,Courier,monospace">ecore_timer_interval_set()</span> for changing the interval time to the given timer.</p>
  
  <p>The following log shows the result of the Timer sample.</p>
  
<pre class="prettyprint">
I/USR_TAG ( 2652): start the main loop.
I/USR_TAG ( 2652): Timer1 expired after 1.001 seconds.
I/USR_TAG ( 2652): Timer1 expired after 2.001 seconds.
I/USR_TAG ( 2652): Timer1 expired after 3.001 seconds.
I/USR_TAG ( 2652): Timer2 expired after 3.001 seconds.
I/USR_TAG ( 2652): Adding delay of 3.000 seconds to timer1.
I/USR_TAG ( 2652): Timer1 expired after 7.004 seconds.
I/USR_TAG ( 2652): Timer1 expired after 8.001 seconds.
I/USR_TAG ( 2652): Timer3 expired after 8.201 seconds.
I/USR_TAG ( 2652): Freezing timer1.
I/USR_TAG ( 2652): Timer4 expired after 11.003 seconds.
I/USR_TAG ( 2652): Resuming timer1, which has 0.799 seconds left to expire.
I/USR_TAG ( 2652): Timer1 expired after 11.804 seconds.
I/USR_TAG ( 2652): Timer1 expired after 12.804 seconds.
I/USR_TAG ( 2652): Timer1 expired after 13.804 seconds.
I/USR_TAG ( 2652): Timer5 expired after 14.001 seconds.
I/USR_TAG ( 2652): Changing interval of timer1 from 1.000 to 2.000 seconds.
I/USR_TAG ( 2652): Timer1 expired after 14.804 seconds.
I/USR_TAG ( 2652): Timer1 expired after 16.805 seconds.
I/USR_TAG ( 2652): Timer6 expired after 18.002 seconds.
I/USR_TAG ( 2652): Stopping timer1.
I/USR_TAG ( 2652): Starting timer7 (1.100s) and timer8 (1.200s).
I/USR_TAG ( 2652): Timer7 expired after 19.203 seconds.
I/USR_TAG ( 2652): Timer8 expired after 19.203 seconds.
</pre>

<h2>Implementation</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function creates the window that does not do anything in this sample application. However, it contains timer functions and you can see the result in the log output.</p>

<pre class="prettyprint">
#define TIMEOUT_1 1.0  // Interval for timer1
#define TIMEOUT_2 3.0  // timer2 - delay timer1
#define TIMEOUT_3 8.2  // timer3 - pause timer1
#define TIMEOUT_4 11.0 // timer4 - resume timer1
#define TIMEOUT_5 14.0 // timer5 - change interval of timer1
#define TIMEOUT_6 18.0 // Top timer1 and start timer7 and timer8 with changed precision
#define TIMEOUT_7 1.1  // Interval for timer7
#define TIMEOUT_8 1.2  // Interval for timer8
#define DELAY_1   3.0  // Delay time for timer1 - used by timer2
#define INTERVAL1 2.0  // New interval for timer1 - used by timer5

static double _initial_time = 0;

struct context
{
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer1;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer2;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer3;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer4;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer5;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer6;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer7;
&nbsp;&nbsp;&nbsp;Ecore_Timer *timer8;
};

static double
_get_current_time(void)
{
&nbsp;&nbsp;&nbsp;return ecore_time_get() - _initial_time;
}

static Eina_Bool
_timer1_cb(void *data EINA_UNUSED)
{
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer1 expired after %0.3f seconds.&quot;, _get_current_time());

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}

static Eina_Bool
_timer2_cb(void *data EINA_UNUSED)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer2 expired after %0.3f seconds.&quot;, _get_current_time());
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Adding delay of %0.3f seconds to timer1.&quot;, DELAY_1);

&nbsp;&nbsp;&nbsp;ecore_timer_delay(ctxt-&gt;timer1, DELAY_1);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer2 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer3_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer3 expired after %0.3f seconds.&quot;, _get_current_time());
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Freezing timer1.&quot;);

&nbsp;&nbsp;&nbsp;ecore_timer_freeze(ctxt-&gt;timer1);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer3 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer4_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer4 expired after %0.3f seconds.&quot;, _get_current_time());
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Resuming timer1, which has %0.3f seconds left to expire.&quot;, ecore_timer_pending_get(ctxt-&gt;timer1));

&nbsp;&nbsp;&nbsp;ecore_timer_thaw(ctxt-&gt;timer1);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer4 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer5_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;double interval = ecore_timer_interval_get(ctxt-&gt;timer1);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer5 expired after %0.3f seconds.&quot;, _get_current_time());
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Changing interval of timer1 from %0.3f to %0.3f seconds.&quot;, interval, INTERVAL1);

&nbsp;&nbsp;&nbsp;ecore_timer_interval_set(ctxt-&gt;timer1, INTERVAL1);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer5 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer7_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer7 expired after %0.3f seconds.&quot;, _get_current_time());

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer7 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer8_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer8 expired after %0.3f seconds.&quot;, _get_current_time());

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer8 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

static Eina_Bool
_timer6_cb(void *data)
{
&nbsp;&nbsp;&nbsp;struct context *ctxt = data;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Timer6 expired after %0.3f seconds.&quot;, _get_current_time());

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Stopping timer1.&quot;);

&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt-&gt;timer1);
&nbsp;&nbsp;&nbsp;ctxt-&gt;timer1 = NULL;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;Starting timer7 (%0.3fs) and timer8 (%0.3fs).&quot;, TIMEOUT_7, TIMEOUT_8);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer7 = ecore_timer_add(TIMEOUT_7, _timer7_cb, ctxt);
&nbsp;&nbsp;&nbsp;ctxt-&gt;timer8 = ecore_timer_add(TIMEOUT_8, _timer8_cb, ctxt);

&nbsp;&nbsp;&nbsp;ecore_timer_precision_set(0.2);

&nbsp;&nbsp;&nbsp;ctxt-&gt;timer6 = NULL;

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
}

struct context ctxt = {0};

static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Window 
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant 
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Timer 
&nbsp;&nbsp;&nbsp;_initial_time = ecore_time_get();
&nbsp;&nbsp;&nbsp;ctxt.timer1 = ecore_timer_add(TIMEOUT_1, _timer1_cb, &amp;ctxt);
&nbsp;&nbsp;&nbsp;ctxt.timer2 = ecore_timer_add(TIMEOUT_2, _timer2_cb, &amp;ctxt);
&nbsp;&nbsp;&nbsp;ctxt.timer3 = ecore_timer_add(TIMEOUT_3, _timer3_cb, &amp;ctxt);
&nbsp;&nbsp;&nbsp;ctxt.timer4 = ecore_timer_add(TIMEOUT_4, _timer4_cb, &amp;ctxt);
&nbsp;&nbsp;&nbsp;ctxt.timer5 = ecore_timer_add(TIMEOUT_5, _timer5_cb, &amp;ctxt);
&nbsp;&nbsp;&nbsp;ctxt.timer6 = ecore_timer_add(TIMEOUT_6, _timer6_cb, &amp;ctxt);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, &quot;USR_TAG&quot;, &quot;start the main loop.&quot;);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}

static void
app_terminate(void *data)
{
&nbsp;&nbsp;&nbsp;// Release all resources
&nbsp;&nbsp;&nbsp;if (ctxt.timer1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer1);
&nbsp;&nbsp;&nbsp;if (ctxt.timer2)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer2);
&nbsp;&nbsp;&nbsp;if (ctxt.timer3)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer3);
&nbsp;&nbsp;&nbsp;if (ctxt.timer4)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer4);
&nbsp;&nbsp;&nbsp;if (ctxt.timer5)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer5);
&nbsp;&nbsp;&nbsp;if (ctxt.timer6)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer6);
&nbsp;&nbsp;&nbsp;if (ctxt.timer7)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer7);
&nbsp;&nbsp;&nbsp;if (ctxt.timer8)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(ctxt.timer8);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>