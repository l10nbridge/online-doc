<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Resource Management Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
  </div>

  <h1>Resource Management Sample Overview</h1>

<p>The Resource Manager sample application demonstrates how you can extract objects from the application&#39;s previously created resources. The object extraction process is based on the environment the application is running in: language and the screen DPI. Currently supported objects that can be handled by the Resource Manager are images, sounds, layouts, and custom binary files. The operational principle of the Resource Manager application is to deliver an object relevant to the current application environment.</p>
<p>The sample application demonstrates how to automatically pick an image and layout matching:</p>
    <ul>
	  <li>Language changed in the Settings application</li>
	  <li>Device screen DPI</li>
	</ul>
<p>The following figure illustrates the view of the application running in four different screen DPI settings as well as different language settings.</p>
<p id="app-screenshot" class="figure">Figure: Resource Manager application screens</p>
  <p align="center">
    <img alt="Main view of the application running with the DPI=240" src="../images/resource_management_ldpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=300" src="../images/resource_management_mdpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=380" src="../images/resource_management_hdpi_initial_view.png" />
	<img alt="Main view of the application running with the DPI=480" src="../images/resource_management_xhdpi_initial_view.png" /></p>
<p align="center">
	<img alt="Main view of the application running with the DPI=240" src="../images/resource_management_en_us_lang_view.png" />
	<img alt="Main view of the application running with the DPI=300" src="../images/resource_management_ko_kr_lang_view.png" />
	<img alt="Main view of the application running with the DPI=380" src="../images/resource_management_pl_pl_lang_view.png" />
	<img alt="Main view of the application running with the DPI=480" src="../images/resource_management_fr_fr_lang_view.png" />
	</p>

<p>The Resource Manager sample application provides a user interface for automatic change preview only. To influence the application, change the environment settings:</p>
  <ul>
    <li>Language: change the display language in the Settings application by going to <strong>Settings application &gt; Language and input &gt; Display language</strong>.</li>
	<li>Screen DPI: Create a new mobile emulator image with the default density value altered with a custom one, chosen from the following ranges:
	    <ul>
		  <li>0 to 240 - LDPI</li>
		  <li>241 to 300 - MDPI</li>
		  <li>301 to 380 - HDPI</li>
		  <li>381 to 480 - XHDPI</li>
		  <li>481 to 600 - XXHDPI</li>
		</ul>
	</li>
  </ul>
<p>The following figure shows the structure of the user interface. EDJE layout scripts are used.</p>
  <p id="ui-struct" class="figure">Figure: Resource Manager layout structure</p>
  <p align="center">
    <img alt="Resource Manager layout structure" src="../images/resource_management_ui_layout_sd_mn.png" />
  </p>
<p>The final application view is created by embedding the proper components into the layout depicted above. The following figure shows the resulting UI view.</p>
  <p id="ui-view" class="figure">Figure: Resource Manager application UI view</p>
  <p align="center">
    <img alt="Resource Manager application's UI view" src="../images/resource_management_ui_view_sd_mn.png" />
  </p>

<p>The application workflow can be divided into 3 logical pipelines:</p>
  <ul>
    <li>Application startup</li>
	<li>Image extraction relevant to the screen DPI</li>
	<li>Image and layout extraction relevant to the current language</li>
  </ul>
<p>The workflow is described by the following figure.</p>
  <p id="workflow" class="figure">Figure: Resource Manager application workflow</p>
  <p align="center">
    <img alt="Application workflow" src="../images/resource_management_workflow_sd_mn.png" />
  </p>

  <h2>Prerequisites</h2>
  <p>To ensure proper application execution, the resources must be created using the <a href="../../../org.tizen.devtools/html/native_tools/resource_manager_n.htm">Resource Manager</a> tool. It enables you to create the resource structure assigned to an application.</p>
  
  <h3 id="res-man">Resource Manager</h3>
<p>The Resource Manager tool is launched by opening the <strong>Resource Manager</strong> view from the IDE menu: <strong>Window &gt; Show View &gt; Other &gt; Tizen &gt; Resource Manager</strong>. Press <img alt="Resource Manager settings button" src="../images/resource_management_res_manager_settings_sd_mn.png"/> to open the Resource Configuration Dialog, where you can define separate resource directories for languages and resolution settings. The related directory names are created automatically and are not changeable. For this sample application, the resource structure is defined as shown in the following figure.</p>
  <p class="figure">Figure: Resource Configuration Dialog view</p>
  <p align="center">
    <img alt="Resource Configuration Dialog view" src="../images/resource_management_res_conf_dlg_sd_mn.png"/>
  </p>

<p>Once the resource directory structure is created, you can add relevant resource files in the target directories. In this sample application, 2 types of images and a layout script are uploaded:</p>
    <ul>
	  <li><span style="font-family: Courier New,Courier,monospace">tizen.png</span>: The Tizen logo adapted to each resolution respectively</li>
	  <li><span style="font-family: Courier New,Courier,monospace">flag.png</span>: The national flag relevant to each supported language</li>
	  <li><span style="font-family: Courier New,Courier,monospace">language.edc</span>: The layout script relevant to each supported language</li>
	</ul>
<p>The name of each of the resolution-related files is set to <span style="font-family: Courier New,Courier,monospace">tizen.png</span> and to <span style="font-family: Courier New,Courier,monospace">flag.png</span>. The file name for the language related file is <span style="font-family: Courier New,Courier,monospace">language.edc</span> for each language-related resource.</p>

<p>During the application packaging process, the <span style="font-family: Courier New,Courier,monospace">res.xml</span> file is created and uploaded to the application resource directory. This file is populated with a set of information acquired from the Resource Manager. It cannot be edited manually, as it is replaced by the Resource Manager each time the application is rebuilt.</p>

<p>In the application source code, after the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__RESOURCE__MANAGER__MODULE.html">Resource Manager</a> API is initialized, the relevant resource file path is acquired using the <span style="font-family: Courier New,Courier,monospace">app_resource_manager_get()</span> function, where the parameters are:</p>
    <ul>
	  <li><span style="font-family: Courier New,Courier,monospace">type</span>: Type of the resource (image, sound, layout, and bin are currently supported)</li>
	  <li><span style="font-family: Courier New,Courier,monospace">id</span>: Identifier of the resource (file name with extension)</li>
	  <li><span style="font-family: Courier New,Courier,monospace">path</span>: Pointer to the path where the expected resource (file) is stored</li>
	</ul>
<p>The Resource Manager looks for the file matching the <span style="font-family: Courier New,Courier,monospace">type</span> and <span style="font-family: Courier New,Courier,monospace">id</span> with respect to the current environment (resolution and language). As a result, the appropriate file path is returned.</p>


<h2>Implementation</h2>

<h3 id="type-defs">Type Definitions</h3>

<p>The following code shows the structures used as placeholders for various application data:</p>

<pre class="prettyprint">
// General structure for application data storage
struct 
__appdata 
{
&nbsp;&nbsp;&nbsp;viewdata_s view;
};

// All Evas_Object objects represent UI components
struct 
__viewdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language;
&nbsp;&nbsp;&nbsp;Evas_Object *image_dpi;
&nbsp;&nbsp;&nbsp;Evas_Object *image_language;
};

typedef struct __viewdata viewdata_s;
</pre>

<h3 id="app-init">Application Initialization</h3>

<p>To initialize the application:</p>
<ol>
<li>Implement the entire application life-cycle in the main source file, using a common Tizen application structure:
<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, &amp;ad);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function ui_app_main() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>Initialize the application with the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on application startup:
<pre class="prettyprint">
static bool 
__create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&amp;ad-&gt;view);
}
</pre>
</li>
<li>Invoke the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function, which controls the entire initialization process. This function is responsible for:
    <ul>
	  <li>Resource Manager engine initialization (<span style="font-family: Courier New,Courier,monospace">model_init()</span>)</li>
	  <li>User interface creation (<span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span>) and initialization (<span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span>)</li>
	</ul>
<pre class="prettyprint">
bool 
controller_init(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;if (!model_init())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;__controller_init_dpi(vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
<ol type="a">
<li>
<p>Invoke the <span style="font-family: Courier New,Courier,monospace">app_resource_manager_init()</span> function with the <span style="font-family: Courier New,Courier,monospace">model_init()</span> function to get access to the Resource Manager engine:</p>
<pre class="prettyprint">
bool 
model_init(void)
{
&nbsp;&nbsp;&nbsp;return __model_init_app_resource_manager();
}

bool 
__model_init_app_resource_manager(void)
{
&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_init();
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_resource_manager_init() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Use the <span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span> function to get the <span style="font-family: Courier New,Courier,monospace">tizen.png</span> image file path from the Resource Manager and update the view with the image relevant to the screen DPI:</p>
<pre class="prettyprint">
static void 
__controller_init_dpi(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;if (!model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, &quot;tizen.png&quot;, &amp;file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;view_show_dpi_image(vd, file_path);
&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>
<p>For reference of the Model-related functions that are not listed here, see <a href="#model">Model</a>. The view-related source code is not listed here, as it is not a subject of this topic.</p>
</li>
</ol>
</li>
</ol>

<h3 id="app-finit">Application Termination</h3>

<p>To terminate the application:</p>
<ol>
<li>When the application is terminated, call the <span style="font-family: Courier New,Courier,monospace">__terminate_app()</span> callback function:
<pre class="prettyprint">
static void 
__terminate_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;controller_finit(&amp;ad-&gt;view);
}
</pre>
</li>
<li>Release the previously allocated resources with the <span style="font-family: Courier New,Courier,monospace">controller_finit()</span> function, which is responsible for closing the Resource Manager API session and destroying the UI:
<pre class="prettyprint">
void 
controller_finit(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;model_finit();
&nbsp;&nbsp;&nbsp;view_destroy_base_gui(vd);
}
</pre>
</li>
<li>Close the Resource Manager API session in the Model module within the <span style="font-family: Courier New,Courier,monospace">model_finit()</span> function, which calls the internal <span style="font-family: Courier New,Courier,monospace">__model_release_app_resource_manager()</span> function. 
<p>As the UI is not a subject for this topic, the implementation of the <span style="font-family: Courier New,Courier,monospace">view_destroy_base_gui()</span> function is omitted.</p>
<pre class="prettyprint">
bool 
model_finit(void)
{
&nbsp;&nbsp;&nbsp;return __model_release_app_resource_manager();
}

bool 
__model_release_app_resource_manager(void)
{
&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_release();
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_resource_manager_release() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
</ol>

<h3>Resource File Handling</h3>

<p>Once the resources are defined using the <a href="#res-man">Resource Manager</a> tool and appropriate resource files are uploaded to the destination folders, you can start using these files. For demonstration purposes, 3 scenarios are chosen:</p>
    <ul>
	  <li>Displaying the image related to the current DPI setting</li>
	  <li>Displaying the image related to the current locale setting</li>
	  <li>Setting the layout related to the current locale setting</li>
	</ul>

<p>In the first scenario, there are 5 image files depicting the Tizen logo with resolution label attached. Each of the images with their name set to <span style="font-family: Courier New,Courier,monospace">tizen.png</span> is stored in a different folder with respect to the DPI setting. The folders are <span style="font-family: Courier New,Courier,monospace">res/contents/LDPI</span>, <span style="font-family: Courier New,Courier,monospace">res/contents/MDPI</span>, <span style="font-family: Courier New,Courier,monospace">res/contents/HDPI</span>, <span style="font-family: Courier New,Courier,monospace">res/contents/XHDPI</span>, and <span style="font-family: Courier New,Courier,monospace">res/contents/XXHDPI</span>.</p>
<p>On application startup, during the initialization procedure (see <a href="#app-init">Application Initialization</a>), the <span style="font-family: Courier New,Courier,monospace">__controller_init_dpi()</span> function is called, which obtains the path to the relevant image based on the current screen settings. The core function performing the described task is the <span style="font-family: Courier New,Courier,monospace">model_get_app_resource()</span> function. For reference, see <a href="#model">Model</a>.</p>
<pre class="prettyprint">
static void 
__controller_init_dpi(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;// Obtains the path to the tizen.png file with respect to the current screen settings
&nbsp;&nbsp;&nbsp;if (!model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, &quot;tizen.png&quot;, &amp;file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;// Obtained image file is displayed
&nbsp;&nbsp;&nbsp;view_show_dpi_image(vd, file_path);
&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>

<p>In the second and third scenario, there are 48 image files (each name is set to <span style="font-family: Courier New,Courier,monospace">flag.png</span>) depicting the national flags, and 48 layout files (each name is set to <span style="font-family: Courier New,Courier,monospace">language.edc</span>) creating the text fields related to all supported languages. Each of the images and layouts are stored in a different folder. The folders are <span style="font-family: Courier New,Courier,monospace">res/contents/az_AZ</span>, <span style="font-family: Courier New,Courier,monospace">res/contents/ca_ES</span>, ..., <span style="font-family: Courier New,Courier,monospace">res/contents/zh_TW</span>.</p>
<p>When the current language is changed (in <strong>Settings &gt; Language and input &gt; Display language</strong>), the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function is invoked (see <a href="#app-init">Application Initialization</a>). This callback function hooks the <span style="font-family: Courier New,Courier,monospace">APP_EVENT_LANGUAGE_CHANGED</span> event. At the entry point of the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> function, the current locale is obtained using the <span style="font-family: Courier New,Courier,monospace">model_get_locale()</span> function to be later set as a current language for the application with the <span style="font-family: Courier New,Courier,monospace">elm_language_set()</span> function.</p>
<p>Finally, the <span style="font-family: Courier New,Courier,monospace">controller_set_language()</span> function is invoked, which is responsible for obtaining and displaying the language-relevant image.</p>
<pre class="prettyprint">
static void
__ui_app_lang_changed(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)user_data;
&nbsp;&nbsp;&nbsp;char *locale = NULL;

&nbsp;&nbsp;&nbsp;if (!model_get_locale(&amp;locale))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;elm_language_set(locale);

&nbsp;&nbsp;&nbsp;controller_log(DLOG_INFO, &quot;Language set to: %s.&quot;, locale);

&nbsp;&nbsp;&nbsp;if (locale)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(locale);

&nbsp;&nbsp;&nbsp;controller_set_language(&amp;ad-&gt;view);

&nbsp;&nbsp;&nbsp;return;
}

void 
controller_set_language(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;char *file_path = NULL;

&nbsp;&nbsp;&nbsp;// Obtains the path to the language.edj file with respect to the current language settings
&nbsp;&nbsp;&nbsp;if (model_get_app_resource(APP_RESOURCE_TYPE_LAYOUT, &quot;language.edj&quot;, &amp;file_path)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *rel_file_path = NULL;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Layout file path must be transformed to the relative one, as the elm_layout component does not accept absolute paths
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (__controller_get_relative_resource_file_path(file_path, &amp;rel_file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If successful, the layout file is uploaded and inserted to the PART_MAIN_BOTTOM_PANEL_LANGUAGE_PANEL swallow of the main layout
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_show_language_layout(vd, rel_file_path);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (file_path)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(file_path);

&nbsp;&nbsp;&nbsp;file_path = NULL;

&nbsp;&nbsp;&nbsp;// Obtains the path to the flag.png file with respect to the current language settings
&nbsp;&nbsp;&nbsp;if (model_get_app_resource(APP_RESOURCE_TYPE_IMAGE, &quot;flag.png&quot;, &amp;file_path))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If successful, the image is displayed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_show_language_info(vd, file_path);

&nbsp;&nbsp;&nbsp;if (file_path)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(file_path);
}
</pre>
<p>For all Model-related functions, see <a href="#model">Model</a>.</p>

<h3 id="model">Model</h3>

<p>The responsibility of the application Model module is to operate directly on the Resource Manager API. The additional benefit of this module is the simplification of the API function calling, as error checking and message logging is performed here.</p>
<p>Some of the functions implemented within the Model module were described in <a href="#app-init">Application Initialization</a> and <a href="#app-finit">Application Termination</a> sections (<span style="font-family: Courier New,Courier,monospace">model_init()</span>, <span style="font-family: Courier New,Courier,monospace">model_finit()</span>, <span style="font-family: Courier New,Courier,monospace">__model_init_app_resource_manager()</span>, and <span style="font-family: Courier New,Courier,monospace">__model_release_app_resource_manager()</span>). Other functions are described here.</p>

<p>The path to the resource file pointed by the <span style="font-family: Courier New,Courier,monospace">type</span> and <span style="font-family: Courier New,Courier,monospace">id</span> is obtained with the <span style="font-family: Courier New,Courier,monospace">model_get_app_resource()</span> function:</p>
<pre class="prettyprint">
bool 
model_get_app_resource(app_resource_e type, const char *id, char **path)
{
&nbsp;&nbsp;&nbsp;*path = NULL;

&nbsp;&nbsp;&nbsp;int ret = app_resource_manager_get(type, id, path);
&nbsp;&nbsp;&nbsp;if (ret != APP_RESOURCE_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function app_resource_manager_get() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
