<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>SelfCamera Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>

<h1>SelfCamera Sample Overview</h1> 

<p>The SelfCamera sample application demonstrates how you can use the front camera in your application.</p>
<p>The following figure illustrates the main view of the SelfCamera application in its normal state and the countdown state.</p>

<p class="figure">Figure: SelfCamera main view</p> 
<p align="center"><img alt="SelfCamera main screen" src="../images/selfcamera_start.png" /></p> 

<h2>Implementation</h2>

<p>To use the camera:</p>
<ol>
<li>Add required privileges.
<p>To use the camera, the application has to request permission by adding the corresponding privileges to the <span style="font-family: Courier New,Courier,monospace;">tizen-manifest.xml</span> file. In this case, the <span style="font-family: Courier New,Courier,monospace;">appmanager.launch</span> privilege is also added to allow the launch of other applications, such as the gallery.</p>

<pre class="prettyprint">
&lt;privileges&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/camera&lt;/privilege&gt;
&nbsp;&nbsp;&nbsp;&lt;privilege&gt;http://tizen.org/privilege/appmanager.launch&lt;/privilege&gt;
&lt;/privileges&gt;
</pre>
<p>This can also be done using the Tizen Manifest Editor.</p>
</li>

<li>Create the layout for the camera preview.
<p>The <span style="font-family: Courier New,Courier,monospace;">main_view_add()</span> function creates the main layout of the SelfCamera application and adds the <span style="font-family: Courier New,Courier,monospace;">evas_object_image</span> for displaying the camera preview.</p>

<pre class="prettyprint">
Evas_Object * main_view_add(Evas_Object *navi)
{
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;// SELF_CAMERA_LAYOUT refers to &quot;edje/self-camera.edj&quot;
&nbsp;&nbsp;&nbsp;elm_layout_file_set(view-&gt;layout, get_resource_path(SELF_CAMERA_LAYOUT), &quot;layout&quot;);
&nbsp;&nbsp;&nbsp;// Signal for default timer option to be selected
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(view-&gt;layout, &quot;mouse,clicked,1&quot;, &quot;timer_2&quot;);
&nbsp;&nbsp;&nbsp;view-&gt;preview_canvas = evas_object_image_filled_add(evas_object_evas_get(view-&gt;layout));
    
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;// view-&gt;preview_canvas is placed at &quot;elm.swallow.content&quot;
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(view-&gt;layout, &quot;elm.swallow.content&quot;, view-&gt;preview_canvas);
&nbsp;&nbsp;&nbsp;view-&gt;camera_enabled = _main_view_start_preview(view); 
    
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;_main_view_thumbnail_load(view);
&nbsp;&nbsp;&nbsp;_main_view_register_cbs(view);

&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;return view-&gt;layout;
} 
</pre>
</li>

<li>Initialize the camera and start the preview.
<p>The <span style="font-family: Courier New,Courier,monospace;">_main_view_start_preview()</span> function creates the camera handle and sets the parameters for the camera preview. It assigns a previously created image to be displayed in the camera preview and then starts the preview.</p>

<pre class="prettyprint">
static Eina_Bool _main_view_start_preview(main_view *view)
{
&nbsp;&nbsp;&nbsp;// Create camera handle for front camera (CAMERA_DEVICE_CAMERA1)
&nbsp;&nbsp;&nbsp;int result = camera_create(CAMERA_DEVICE_CAMERA1, &amp;view-&gt;camera);
&nbsp;&nbsp;&nbsp;if (CAMERA_ERROR_NONE == result)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (view-&gt;preview_canvas)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set image to be used for displaying camera preview
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = camera_set_display(view-&gt;camera, CAMERA_DISPLAY_TYPE_EVAS, GET_DISPLAY(view-&gt;preview_canvas));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CAMERA_ERROR_NONE == result)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set preview display size
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_set_display_mode(view-&gt;camera, CAMERA_DISPLAY_MODE_ORIGIN_SIZE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set preview display rotation
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_set_display_rotation(view-&gt;camera, CAMERA_ROTATION_180); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Set preview display flip
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_set_display_flip(view-&gt;camera, CAMERA_FLIP_VERTICAL); 

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Start camera preview 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = camera_start_preview(view-&gt;camera);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (CAMERA_ERROR_NONE == result)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Show preview display
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_set_display_visible(view-&gt;camera, true); 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Start camera auto-focusing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_start_focusing(view-&gt;camera, TRUE);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;return !result;
}
</pre>
</li>

<li>Start the camera capture.
<p>When the countdown reaches 0, the <span style="font-family: Courier New,Courier,monospace;">_main_view_timer_cb()</span> timer callback starts camera capture using a shot, which the <span style="font-family: Courier New,Courier,monospace;">camera_start_capture()</span> function called. This function changes the camera state from <span style="font-family: Courier New,Courier,monospace;">CAMERA_STATE_CAPTURING</span> to <span style="font-family: Courier New,Courier,monospace;">CAMERA_STATE_CAPTURED</span> automatically and the corresponding callback functions, <span style="font-family: Courier New,Courier,monospace;">_main_view_capture_cb()</span> and <span style="font-family: Courier New,Courier,monospace;">_main_view_capture_completed_cb()</span> are invoked.</p>

<pre class="prettyprint">
static Eina_Bool _main_view_timer_cb(void *data)
{
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;view-&gt;timer_count = view-&gt;timer_count - 1;
&nbsp;&nbsp;&nbsp;if (view-&gt;timer_count &gt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_main_view_stop_timer(view);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (view-&gt;camera_enabled)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;camera_start_capture(view-&gt;camera, _main_view_capture_cb, _main_view_capture_completed_cb, view);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_CANCEL;
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Save the captured image.
<p>The captured image is delivered to the <span style="font-family: Courier New,Courier,monospace;">_main_view_capture_cb()</span> function, which saves it into the file.</p>

<pre class="prettyprint">
static void _main_view_capture_cb(camera_image_data_s *image, camera_image_data_s *postview, camera_image_data_s *thumbnail, void *user_data)
{
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;if (image-&gt;format == CAMERA_PIXEL_FORMAT_JPEG)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char filename[PATH_MAX] = { &#39;\0&#39; };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t size = _main_view_get_file_path(filename, sizeof(filename));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DBG(&quot;%s&quot;, filename);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETM_IF(0 == size, &quot;_main_view_get_filename() failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FILE *file = fopen(filename, &quot;w+&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETM_IF(!file, &quot;fopen() failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = fwrite(image-&gt;data, image-&gt;size, 1, file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WARN_IF(size != 1, &quot;fwrite() failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fclose(file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_main_view_thumbnail_set(view, filename);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Restart the camera preview.
<p>The <span style="font-family: Courier New,Courier,monospace;">_main_view_capture_completed_cb()</span> callback is called when camera capture is complete. It restarts the camera preview using the <span style="font-family: Courier New,Courier,monospace;">camera_start_preview()</span> function.</p>

<pre class="prettyprint">
static void _main_view_capture_completed_cb(void *data)
{
&nbsp;&nbsp;&nbsp;...
&nbsp;&nbsp;&nbsp;camera_start_preview(view-&gt;camera);
}
</pre>
</li>

<li>Stop the camera preview and destroy the handle.
<p>The camera preview can be stopped using the <span style="font-family: Courier New,Courier,monospace;">camera_stop_preview()</span> function. The camera handle must be destroyed using the <span style="font-family: Courier New,Courier,monospace;">camera_destroy()</span> function.</p>

<pre class="prettyprint">
static void _main_view_destroy(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;main_view *view = data;
&nbsp;&nbsp;&nbsp;camera_stop_preview(view-&gt;camera);
&nbsp;&nbsp;&nbsp;camera_destroy(view-&gt;camera);
&nbsp;&nbsp;&nbsp;free(data);
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>