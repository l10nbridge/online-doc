<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Ecore Thread 5 Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>[UI Sample] Ecore Thread 5 Sample Overview</h1> 
<p>The Ecore Thread 5 sample demonstrates how to use the multi-thread functionality by EAPI.</p>
<p>The following figure illustrates the main screen of the Ecore Thread 5 sample.</p>

<p class="figure">Figure: Ecore Thread 5 screen</p> 
<p align="center"><img alt="Ecore Thread 5 screen" src="../images/ecore_thread_5.png" /></p> 


<h2 id="Implementation" name="Implementation">Implementation</h2>

<pre class="prettyprint">
typedef struct user_data 
{
&nbsp;&nbsp;&nbsp;Evas_Object *obj;
&nbsp;&nbsp;&nbsp;int *pixel;
} user_data;

static void
thread_run_cb(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;user_data *ud = data;

&nbsp;&nbsp;&nbsp;// Mandel calc is run in the worker threads so it is here
&nbsp;&nbsp;&nbsp;// to calculate something and consume cpu to demonstrate the
&nbsp;&nbsp;&nbsp;// Ecore thread worker queue. Do not pay much attention to the below code
&nbsp;&nbsp;&nbsp;double x, xx, y, cx, cy, cox, coy;
&nbsp;&nbsp;&nbsp;int iteration, hx, hy, val, r, g, b, rr, gg, bb;
&nbsp;&nbsp;&nbsp;int itermax = 10000;
&nbsp;&nbsp;&nbsp;double magnify = 0.02;
&nbsp;&nbsp;&nbsp;int w, h;

&nbsp;&nbsp;&nbsp;evas_object_image_size_get(ud-&gt;obj, &amp;w, &amp;h);

&nbsp;&nbsp;&nbsp;magnify += ((double)(rand() % 100) / 100.0) / 4.0;
&nbsp;&nbsp;&nbsp;cox = (double)(rand() % 100) / 100.0;
&nbsp;&nbsp;&nbsp;coy = (double)(rand() % 100) / 100.0;
&nbsp;&nbsp;&nbsp;cox /= (magnify * 3.0);
&nbsp;&nbsp;&nbsp;r = rand() % 255; g = rand() % 255; b = rand() % 255;
&nbsp;&nbsp;&nbsp;for (hy = 0; hy &lt; h; hy++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (hx = 0; hx &lt; w; hx++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx = (((float)hx) / ((float)w) - 0.5) / (magnify * 3.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy = (((float)hy) / ((float)h) - 0.5) / (magnify * 3.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cx += cox;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cy += coy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 0.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (iteration = 1; iteration &lt; itermax; iteration++) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xx = (x * x) - (y * y) + cx;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = (2.0 * x * y) + cy;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = xx;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (((x * x) + (y * y)) &gt; 100.0) iteration = 999999;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;val = (((x * x) + (y * y)) * 2.55) / 100.0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (val &gt; 255) val = 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (iteration &gt;= 99999) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rr = (r * val) / 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gg = (g * val) / 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bb = (b * val) / 255;   
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ud-&gt;pixel[(hy * w) + hx] = (val  &lt;&lt; 24) | (rr &lt;&lt; 16) | (gg &lt;&lt; 8) | (bb);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ud-&gt;pixel[(hy * w) + hx] = 0xffffffff;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}

static void
thread_end_cb(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;user_data *ud = data;
&nbsp;&nbsp;&nbsp;Evas_Coord w, h;

&nbsp;&nbsp;&nbsp;// Update image data; since thread_end_cb() is called from the main loop thread,
&nbsp;&nbsp;&nbsp;// you can access EAPI without considering synchronization
&nbsp;&nbsp;&nbsp;evas_object_image_size_get(ud-&gt;obj, &amp;w, &amp;h);
&nbsp;&nbsp;&nbsp;evas_object_image_data_copy_set(ud-&gt;obj, ud-&gt;pixel);
&nbsp;&nbsp;&nbsp;evas_object_image_data_update_add(ud-&gt;obj, 0, 0, w, h);

&nbsp;&nbsp;&nbsp;free(ud-&gt;pixel);
&nbsp;&nbsp;&nbsp;free(ud);
}

static void
thread_cancel_cb(void *data, Ecore_Thread *thread)
{
&nbsp;&nbsp;&nbsp;user_data *ud = data;

&nbsp;&nbsp;&nbsp;free(ud-&gt;pixel);
&nbsp;&nbsp;&nbsp;free(ud);
}

static void
mouse_down_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;user_data *ud = calloc(1, sizeof(user_data));
&nbsp;&nbsp;&nbsp;ud-&gt;obj = obj;
&nbsp;&nbsp;&nbsp;ud-&gt;pixel = malloc(256 * 256 * sizeof(int));

&nbsp;&nbsp;&nbsp;// Run a thread
&nbsp;&nbsp;&nbsp;ecore_thread_run(thread_run_cb, thread_end_cb, thread_cancel_cb, ud);
}

void
ecore_thread_run_exam(Evas_Object *win)
{
&nbsp;&nbsp;&nbsp;Evas_Object *img;

&nbsp;&nbsp;&nbsp;// Create an image
&nbsp;&nbsp;&nbsp;img = evas_object_image_filled_add(evas_object_evas_get(win));
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(img, EVAS_CALLBACK_MOUSE_DOWN, mouse_down_cb, NULL);
&nbsp;&nbsp;&nbsp;evas_object_image_size_set(img, 256, 256);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(img, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(img);

&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(win, img);
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>