<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Shortcut Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Shortcut Sample Overview</h1>
<p>The Shortcut sample application demonstrates how you can create an application shortcut on the home screen as well as  register to receive shortcut requests from other applications using the <a href="../../../org.tizen.native.mobile.apireference/group__SHORTCUT__MODULE.html">Shortcut</a> API.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the Shortcut (on the left) and the created URI shortcut displayed on the home screen (on the right).</p>

<p class="figure">Figure: Shortcut screen and home screen</p>
  <p align="center"><img alt="Shortcut main view" src="../images/shortcut_main_view.png" /> <img alt="Shortcut home screen" src="../images/shortcut_homescreen_view.png" /></p>

<p>The application opens with the main view, where the user can create 2 types of shortcuts:</p>
 <ul>
  <li>The <span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_APP</span> application shortcut is used to add the package itself as a shortcut.
<p>This means that after the shortcut is selected, the application that created it is launched or resumed.</p></li>
  <li>The <span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_URI</span> URI shortcut is used to launch the application with the given data defined by a URI passed to the function that creates the shortcut.
  <p>When a URI shortcut is selected, the application that created it is launched or resumed. The difference compared to the application shortcut is that additional data (URI) is passed to the launch request which can be later retrieved by the launched application and handled accordingly.</p></li>
</ul>

<p>For example, if the application allows the user to display pictures, you can create a feature of adding on the home screen a shortcut to a specified photo. When selected, the shortcut allows the specified file to be opened in the application. The URI can be used, for example, to pass a path to a file (such as <span style="font-family: Courier New,Courier,monospace">file:///home/myhome/Photos/1_photo.jpg</span>) or a Web site address (such as <span style="font-family: Courier New,Courier,monospace">http://www.tizen.org)</span>. As this application demonstrates the use of the Shortcut API only, instead of implementing its own URI handling, it uses the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__APP__CONTROL__MODULE.html">App Control</a> API to launch the default application for viewing the data specified by it - whether it is a picture, a video, an audio file, or a Web site.</p>  
  
  
<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
 <li>To create shortcuts:
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/shortcut</span></li>
  </ul>
  </li>
  <li>To handle URI launch requests:
  <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
  </ul>
  </li>
 </ul>

<h2>Implementation</h2>

<p>To use the functions and data types of the Shortcut API, include the <span style="font-family: Courier New,Courier,monospace">&lt;shortcut_manager.h&gt;</span> header file in your application.</p>

<h3>Creating a Shortcut</h3>

<p>You can add a shortcut of an application to the home screen to make it easier and quicker to launch. To add a shortcut, use the <span style="font-family: Courier New,Courier,monospace">shortcut_add_to_home()</span> function. It creates a shortcut request that is delivered to every application that has registered to receive such requests, including the home screen. It is up to the receiving application to create a shortcut based on the data defined in the request.</p>

<pre class="prettyprint">
int 
shortcut_add_to_home(const char *name, shortcut_type type, const char *uri, const char *icon, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int allow_duplicate, result_cb_t result_cb, void *data);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">shortcut_add_to_home()</span> function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">name</span>: The name of the shortcut.</li>
 <li><span style="font-family: Courier New,Courier,monospace">type</span>: The type of the shortcut (<span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_APP</span> or
 <span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_URI</span>).</li>
 <li><span style="font-family: Courier New,Courier,monospace">uri</span>: Additional launch data, if applicable.</li>
 <li><span style="font-family: Courier New,Courier,monospace">icon</span>: The icon of the shortcut. This parameter can be set to <span style="font-family: Courier New,Courier,monospace">NULL</span>, in which case the default icon of your application is used.</li>
 <li><span style="font-family: Courier New,Courier,monospace">allow_duplicate</span>: Variable defining whether the shortcut can be duplicated (1 - allow duplicates, 0 - only one copy of this shortcut can exist at a time).</li>
 <li><span style="font-family: Courier New,Courier,monospace">result_cb</span>: Callback function that is called when the result of adding the shortcut is received.</li>
 <li><span style="font-family: Courier New,Courier,monospace">data</span>: Additional user data passed to the <span style="font-family: Courier New,Courier,monospace">result_cb</span> function.</li>
</ul>

<p>In this sample application, a shortcut is created when one of the plus buttons is clicked. By default,
duplicated shortcuts are allowed. The application allows you to alter the name and URI of a shortcut to be created by editing the relevant <span style="font-family: Courier New,Courier,monospace">Elm_Entry</span> components visible on the screen. The icon cannot be changed and its file is located in the shared folder of the project. Remember that if you want to use an image from your application resources as an icon, it has to be included in the shared folder for other applications to be able to access it.</p>

<p>After the shortcut request has been handled, the <span style="font-family: Courier New,Courier,monospace">result_cb</span> callback is invoked, if defined. You can use it to track and handle possible errors of the shortcut creation procedure.</p>

<pre class="prettyprint">
static int 
__res_cb(int ret, void *data)
{
&nbsp;&nbsp;&nbsp;if (ret &lt; 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to add shortcut to Homescreen&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Successfully added shortcut to Homescreen&quot;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>

<h3>Registering for New Shortcut Requests</h3>

<p>Your application can register to receive shortcut requests from other applications using the <span style="font-family: Courier New,Courier,monospace">shortcut_set_request_cb()</span> function. It takes as parameters a pointer to a callback function to be invoked when there is a new shortcut request, as well as additional user data. In this sample application, a callback function that is responsible for displaying a popup with the shortcut request info is passed as the user data.</p>

<pre class="prettyprint">
int 
shortcut_controller_register_for_requests(show_request_popup req_popup_cb)
{
&nbsp;&nbsp;&nbsp;return shortcut_set_request_cb(__request_cb, req_popup_cb);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">__request_cb</span> function is called every time there is a new shortcut request. All the relevant shortcut parameters are passed as parameters to this function. This is where a new shortcut must be created. The sample application does not implement shortcut creation, but displays the received shortcut info in a popup instead. The <span style="font-family: Courier New,Courier,monospace">req_cb</span> function that was passed as additional user data is used to do that.</p>

<pre class="prettyprint">
static int 
__request_cb(const char *package_name, const char *name, int type, const char *content_info, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *icon, int pid, double period, int allow_duplicate, void *data)
{
&nbsp;&nbsp;&nbsp;show_request_popup req_cb = (show_request_popup)data;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;Received request: package name [%s] icon path [%s] shortcut name [%s]&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;package_name, icon, name);

&nbsp;&nbsp;&nbsp;if (req_cb)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req_cb(package_name, name, type, content_info, icon);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>

<p>Based on the request shortcut type, the relevant shortcut request data is displayed in the popup: name of the package that made the request, name of the shortcut, icon, and URI, if applicable.</p>

<p class="figure">Figure: Received shortcut request popup</p>
<p align="center"><img alt="Received shortcut request popup" src="../images/shortcut_uri_request.png" /></p>

<h3>Handling URI Launch Requests</h3>

<p>To handle launch requests:</p>

<ol><li>
<p>When the application receives a launch request, the <span style="font-family: Courier New,Courier,monospace">app_control</span> callback function is invoked. The function has to be first defined in a <span style="font-family: Courier New,Courier,monospace">ui_app_lifecycle_callback_s</span> structure and passed to the <span style="font-family: Courier New,Courier,monospace">ui_app_main()</span> function, which runs the main loop of the application:</p>

<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = __app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = __app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = __app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__ui_app_low_battery, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__ui_app_low_memory, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APP_EVENT_DEVICE_ORIENTATION_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__ui_app_orient_changed, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__ui_app_lang_changed, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__ui_app_region_changed, NULL);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;ui_app_main() failed. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>
<li>
<p>When a shortcut on the home screen is selected, a launch request is made by the home screen. In addition, if the selected shortcut is of the URI type, the URI is passed to the application using <span style="font-family: Courier New,Courier,monospace">app_control</span>. To retrieve it, you must invoke the <span style="font-family: Courier New,Courier,monospace">app_control_get_uri()</span> function. The URI is retrieved and if it is not <span style="font-family: Courier New,Courier,monospace">NULL</span>, it is passed to the <span style="font-family: Courier New,Courier,monospace">__launch_default_view_app()</span> function.</p>

<pre class="prettyprint">
static void 
__app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *uri = NULL;

&nbsp;&nbsp;&nbsp;app_control_get_uri(app_control, &amp;uri);

&nbsp;&nbsp;&nbsp;if (uri) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_default_view_app(uri);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>
<p>The sample application does not implement the display of its own files or Web sites. Instead, it uses the App Control API to launch the default application for every URI type using the following code. To learn more about App Control API usage, see the <a href="application_control_sd_mn.htm">Application Control</a> sample application.</p>

<pre class="prettyprint">
static void 
__launch_default_view_app(char *uri)
{
&nbsp;&nbsp;&nbsp;app_control_h service;

&nbsp;&nbsp;&nbsp;if (app_control_create(&amp;service) != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to create app control handle&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_control_set_operation(service, APP_CONTROL_OPERATION_VIEW) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_set_operation(service, APP_CONTROL_OPERATION_VIEW) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_set_uri(service, uri) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_send_launch_request(service, NULL, NULL) != APP_CONTROL_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to set app control to launch default application for %s&quot;, uri);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (app_control_destroy(service) != APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Failed to destroy app control handle&quot;);
}
</pre></li>
</ol>

<p>The following figure shows the result of selecting a URI shortcut created by the application. The default application for displaying Web pages is launched.</p>

<p class="figure">Figure: Launched URI shortcut</p>
<p align="center"><img alt="Launched URI shortcut" src="../images/shortcut_uri_launched.png" /></p>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>