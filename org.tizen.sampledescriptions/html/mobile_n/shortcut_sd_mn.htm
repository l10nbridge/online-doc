<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Shortcut Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>Shortcut Sample Overview</h1>
<p>The Shortcut sample application demonstrates how to create an application's shortcut in Homescreen as well as how to register to receive
shortcut requests from other applications using the Shortcut API.</p>

<p>There are two types of shortcuts you can create:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_APP</span> - used to add the package itself as a shortcut. That means that after the shortcut is selected, the application that created it is launched/resumed;</li>
  <li><span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_URI</span> - used to launch the application with the given data defined by URI passed to the function that creates the shortcut. When such a shortcut is selected,
the application that created it is launched/resumed. The difference is that additional data (URI) is passed to the launch request which can be later retrieved by the launched application
and handled accordingly.</li>
</ul>

<p>For example, if you have an application that allows the user to display pictures, you can create a feature of creating a shortcut on Homescreen to a specified photo. Then, when selected,
the shortcut will allow for the specified file to be opened in your application. URI can be used for example to pass a path to a file
(e.g. <span style="font-family: Courier New,Courier,monospace">file:///home/myhome/Photos/1_photo.jpg</span>) or a website address
(e.g. <span style="font-family: Courier New,Courier,monospace">http://www.tizen.org)</span>. As this is an application that demonstrates the use of Shortcut API only, instead of implementing its own URI handling, it uses App Control API to launch the default application for
viewing the data specified by it - whether it is a picture, a video, an audio file or a website.</p>

<table>
<col/>
<tr>
  <td>
  <p class="figure">Figure 1: Shortcut application view</p>
  <p align="center"><img alt="Shortcut default screen" src="../images/shortcut_main_view.png" /></p>
  </td>
  <td><p class="figure">Figure 2: Created URI shortcut displayed in Homescreen</p>
  <p align="center"><img alt="Shortcut displayed on Homescreen" src="../images/shortcut_homescreen_view.png" /></p></td>
</tr>
</table>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be specified:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/shortcut</span> - to create shortcuts;</li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span> - to handle URI launch requests.</li>
 </ul>

<h2>Implementation</h2>

In order to use the Shortcut API, you need to include the <span style="font-family: Courier New,Courier,monospace">&lt;shortcut_manager.h&gt;</span> header file in your application.

<h3>Creating a shortcut</h3>

<p>You can add a shortcut of your application to the Homescreen application to make it easier and quicker for the user to launch your application.
The <span style="font-family: Courier New,Courier,monospace">shortcut_add_to_home()</span> function can be used to do that. It creates a shortcut request
that is delivered to every application that has registered to receive such requests, including Homescreen. It's up to the receiving application
to create a shortcut based on the data defined in the request.</p>

<pre class="prettyprint">
int shortcut_add_to_home(const char *name, shortcut_type type, const char *uri, const char *icon, int allow_duplicate, result_cb_t result_cb, void *data);
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">shortcut_add_to_home()</span> function takes the following parameters:</p>
<ul>
 <li>name - the name of the shortcut;</li>
 <li>type - the type of the shortcut (<span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_APP</span> or
 <span style="font-family: Courier New,Courier,monospace">LAUNCH_BY_URI</span>, described above);</li>
 <li>uri - additional launch data, if applicable;</li>
 <li>icon - the icon of the shortcut. This parameter can be set to NULL, in which case the default icon of your application will be used.</li>
 <li>allow_duplicate - variable defining whether the shortcut can be duplicated (1 - allow duplicates, 0 - only one copy of this shortcut can exist at once);</li>
 <li>result_cb - a callback function that will be called when the result of adding the shortcut is received;</li>
 <li>data - additional user data passed to the result_cb function.</li>
</ul>

<p>In this sample application, a shortcut is created when one of the Plus buttons are clicked. By default,
duplicated shortcuts are allowed. The application allows you to alter the name and URI of a shortcut to be created by editing the relevant
<span style="font-family: Courier New,Courier,monospace">Elm_Entry</span> widgets visible on the screen. The icon
cannot be changed and its file is located in the shared folder of the project. Remember that if you want to use an image from your application's resources as an icon,
it has to be included in the shared folder for other applications to be able to access it.</p>

<p>After the shortcut request has been handled, the <span style="font-family: Courier New,Courier,monospace">result_cb</span> callback is invoked, if defined.
You can use it to track and handle possible errors of the shortcut creation procedure. An example of such a callback function is listed below.</p>

<pre class="prettyprint">
static int __res_cb(int ret, void *data)
{
&nbsp;&nbsp;&nbsp;if (ret < 0) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Failed to add shortcut to Homescreen");
&nbsp;&nbsp;&nbsp;} else {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Successfully added shortcut to Homescreen");
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>

<h3>Registering for new shortcut requests</h3>

<p>Your application can also register to receive shortcut requests from other applications. It is done using the
<span style="font-family: Courier New,Courier,monospace">shortcut_set_request_cb()</span> function. It takes a pointer to a callback function to be invoked
when there's a new shortcut request, as well as additional user data as arguments. In this sample application, a callback function that's responsible for displaying a popup
with the shortcut request info is passed as the user data.</p>

<pre class="prettyprint">
int shortcut_controller_register_for_requests(show_reqest_popup req_popup_cb)
{
&nbsp;&nbsp;&nbsp;return shortcut_set_request_cb(__request_cb, req_popup_cb);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">__request_cb</span> function is called every time there's a new shortcut request.
All the relevant shortcut's parameters are passed as arguments to this function. This is where a new shortcut should be created. The sample application
doesn't implement shortcuts creation, but displays the received shortcut info in a popup. The <span style="font-family: Courier New,Courier,monospace">req_cb</span>
function that was passed as additional user data is used to do that.</p>

<pre class="prettyprint">
static int __request_cb(const char *package_name, const char *name, int type, const char *content_info, const char *icon, int pid,
				double period, int allow_duplicate, void *data)
{
&nbsp;&nbsp;&nbsp;show_reqest_popup req_cb = (show_reqest_popup)data;

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Received request: package name [%s] icon path [%s] shortcut name [%s]", package_name, icon, name);

&nbsp;&nbsp;&nbsp;if (req_cb)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;req_cb(package_name, name, type, content_info, icon);

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>

<p>Based on the request's shortcut type, the relevant shortcut request data is displayed in the popup: name of the package that made the request,
name of the shortcut, icon and URI, if applicable.</p>

<p class="figure">Figure 3: Received shortcut request popup</p>
<p align="center"><img alt="Shortcut default screen" src="../images/shortcut_uri_request.png" /></p>

<h3>Handling URI launch requests</h3>

<p>When an application receives launch request, <span style="font-family: Courier New,Courier,monospace">app_control</span> callback function is invoked.
The function has to be first defined in an <span style="font-family: Courier New,Courier,monospace">ui_app_lifecycle_callback_s</span> structure
and passed to the <span style="font-family: Courier New,Courier,monospace">ui_app_main()</span> function which runs the main loop of the application.
Below you can see the exemplary code of the <span style="font-family: Courier New,Courier,monospace">main()</span> function which shows how the callback are attached.</p>

<pre class="prettyprint">
int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;event_callback.create = __app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.pause = __app_pause;
&nbsp;&nbsp;&nbsp;event_callback.resume = __app_resume;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __app_control;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, NULL);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, NULL);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &event_callback, NULL);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, "ui_app_main() is failed. err = %d", ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>When a shortcut in Homescreen is selected, a launch request is made by Homescreen. In addition, if the selected shortcut is of URI type, the URI
is passed to the application using <span style="font-family: Courier New,Courier,monospace">app_control</span>. To retreive it, you have to
invoke <span style="font-family: Courier New,Courier,monospace">app_control_get_uri()</span> function. The listing below shows how to do that.
First, the URI is retreived and then, if it's not NULL, it is passed to the  <span style="font-family: Courier New,Courier,monospace">__launch_default_view_app()</span>
function.</p>

<pre class="prettyprint">
static void __app_control(app_control_h app_control, void *data)
{
&nbsp;&nbsp;&nbsp;char *uri = NULL;

&nbsp;&nbsp;&nbsp;app_control_get_uri(app_control, &uri);

&nbsp;&nbsp;&nbsp;if (uri) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__launch_default_view_app(uri);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>As said before, the sample application doesn't implement its own files or websites displaying. Instead, it uses App Control API to launch the default
application for every URI type. The code below is used to do that. To learn more about App Control API usage, please refer to the Application Control sample application.</p>

<pre class="prettyprint">
static void __launch_default_view_app(char *uri)
{
&nbsp;&nbsp;&nbsp;app_control_h service;

&nbsp;&nbsp;&nbsp;if(app_control_create(&service) != APP_CONTROL_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Failed to create app control handle");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if(app_control_set_operation(service, APP_CONTROL_OPERATION_VIEW) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_set_operation(service, APP_CONTROL_OPERATION_VIEW) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_set_uri(service, uri) != APP_CONTROL_ERROR_NONE ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app_control_send_launch_request(service, NULL, NULL) != APP_CONTROL_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Failed to set app control to launch default application for %s", uri);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if(app_control_destroy(service) != APP_CONTROL_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, "Failed to destroy app control handle");
}
</pre>

<p>Below you can see the result of selecting a URI shortcut created by the application. You can see that the default application for displaying web pages is launched.</p>

<p class="figure">Figure 4: Launched URI shortcut</p>
<p align="center"><img alt="Shortcut default screen" src="../images/shortcut_uri_launched.png" /></p>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>