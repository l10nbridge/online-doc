<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Puzzle Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
	</div>
  <h1>Puzzle Sample Overview</h1>

<p>The Puzzle sample application demonstrates how to implement a complex view using recursive composition of the standard EFL components.</p>

<p>The following figure illustrates the main view of the Puzzle application in its normal state.</p>

<p class="figure">Figure: Puzzle main view</p>
<p align="center"><img src="../images/puzzle_main.png" alt="Puzzle main view" /></p>

<h2 id="implementation" name="implementation">Implementation</h2>

<p>To create the Puzzle:</p>
<ol>
<li>Add the required privileges.
<p>To use the Puzzle, the application has to request permission by adding the corresponding privileges to the <span style="font-family: Courier New,Courier,monospace">tizen-manifest.xml</span> file. In this case, the systemsettings privilege (<span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/systemsettings</span>) is added to allow getting the system setting value.</p>
</li>
<li>Create the layout for the Puzzle preview. 
<p>The <span style="font-family: Courier New,Courier,monospace">puzzle_create()</span> function creates the main layout of the Puzzle application.</p>
<pre class="prettyprint">
void puzzle_create(appdata_s *data)
{
&nbsp;&nbsp;&nbsp;_D(&quot;Puzzle_create&quot;);
&nbsp;&nbsp;&nbsp;ret_if(!data);
&nbsp;&nbsp;&nbsp;// Make a 6X6 image object
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; 37; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;piece[i] = evas_object_image_filled_add(ad-&gt;e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;piece_pos[i] = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_file_set(ad-&gt;piece[i], ad-&gt;smile_img_path, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = evas_object_image_load_error_get(ad-&gt;piece[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ret != EVAS_LOAD_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Failed to load image&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_data_set(ad-&gt;piece[i], &quot;position&quot;, (void *)i);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_image_size_get(ad-&gt;piece[36], &amp;ad-&gt;origin_image_width, &amp;ad-&gt;origin_image_height);
&nbsp;&nbsp;&nbsp;_D(&quot;The original image width: %d, height: %d&quot;, ad-&gt;origin_image_width, ad-&gt;origin_image_height);

&nbsp;&nbsp;&nbsp;// Divide the size of a real image into a puzzle
&nbsp;&nbsp;&nbsp;extract_region_width = ad-&gt;origin_image_width/PIECE;
&nbsp;&nbsp;&nbsp;extract_region_height = ad-&gt;origin_image_height/PIECE;

&nbsp;&nbsp;&nbsp;// Divide the size of the puzzle of the screen into a PIECE
&nbsp;&nbsp;&nbsp;puzzle_width = ad-&gt;full_image_width/PIECE;
&nbsp;&nbsp;&nbsp;puzzle_height = ad-&gt;full_image_height/PIECE;

&nbsp;&nbsp;&nbsp;for (y = 0; y &lt; PIECE; y++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (x = 0; x &lt; PIECE; x++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_move(ad-&gt;piece[y*PIECE + x], ad-&gt;puzzle_start_x + x*(2+puzzle_width),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;puzzle_start_y + y*(2+puzzle_height));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_load_region_set(ad-&gt;piece[y*PIECE + x], x*extract_region_width, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y*extract_region_height, extract_region_width, extract_region_height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;piece[y*PIECE + x], puzzle_width, puzzle_height);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;piece[y*PIECE + x], EVAS_CALLBACK_MOUSE_DOWN, mouse_down_cb, ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;piece[y*PIECE + x], EVAS_CALLBACK_MOUSE_UP, mouse_up_cb, ad);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (y == 3 &amp;&amp; x == 3) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_get(ad-&gt;piece[y*PIECE + x], &amp;ad-&gt;r, &amp;ad-&gt;g, &amp;ad-&gt;b, &amp;ad-&gt;a);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;piece[y*PIECE + x], ad-&gt;r, ad-&gt;g, ad-&gt;b, 0);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;white_piece = y*PIECE + x;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;piece[y*PIECE + x]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ad-&gt;size = PIECE;
&nbsp;&nbsp;&nbsp;ad-&gt;start = 0;
}
</pre>
</li>
<li>Move the piece and match the picture.
<p>The <span style="font-family: Courier New,Courier,monospace">move_***_cb()</span> function move the piece to ***. When moving the piece to ***, if there is a piece already, this function returns with no action.</p>
<pre class="prettyprint">
int move_puzzle_to_right(void *data)
{
&nbsp;&nbsp;&nbsp;retv_if(!data, 0); 

&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;int x1, y1, w1, h1; 
&nbsp;&nbsp;&nbsp;int x2, y2, w2, h2; 
&nbsp;&nbsp;&nbsp;int white_piece = ad-&gt;white_piece;
&nbsp;&nbsp;&nbsp;int size = ad-&gt;size;
&nbsp;&nbsp;&nbsp;int temp;
&nbsp;&nbsp;&nbsp;// There is a puzzle
&nbsp;&nbsp;&nbsp;if (!(white_piece%size)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return SAMPLE_APP_ERROR_OK;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_image_load_region_get(ad-&gt;piece[white_piece -1], &amp;x1, &amp;y1, &amp;w1, &amp;h1);
&nbsp;&nbsp;&nbsp;evas_object_image_load_region_get(ad-&gt;piece[white_piece], &amp;x2, &amp;y2, &amp;w2, &amp;h2);
&nbsp;&nbsp;&nbsp;// Exchange the position
&nbsp;&nbsp;&nbsp;evas_object_image_load_region_set(ad-&gt;piece[white_piece - 1], x2, y2, w2, h2);
&nbsp;&nbsp;&nbsp;evas_object_image_load_region_set(ad-&gt;piece[white_piece], x1, y1, w1, h1);

&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;piece[white_piece], ad-&gt;r, ad-&gt;g, ad-&gt;b, ad-&gt;a);
&nbsp;&nbsp;&nbsp;evas_object_color_set(ad-&gt;piece[white_piece - 1], ad-&gt;r, ad-&gt;g, ad-&gt;b, 0); 

&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;piece[white_piece]);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;piece[white_piece - 1]);

&nbsp;&nbsp;&nbsp;temp = ad-&gt;piece_pos[white_piece];
&nbsp;&nbsp;&nbsp;ad-&gt;piece_pos[white_piece] = ad-&gt;piece_pos[white_piece - 1]; 
&nbsp;&nbsp;&nbsp;ad-&gt;piece_pos[white_piece - 1] = temp;

&nbsp;&nbsp;&nbsp;ad-&gt;white_piece = white_piece - 1;

&nbsp;&nbsp;&nbsp;if (ad-&gt;piece_pos[ad-&gt;white_piece] == size*size-1 &amp;&amp; ad-&gt;start == 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;puzzle_correct_cb(ad);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 1;
}
</pre>
</li>
<li>Complete the puzzle. 
<p>If the image object is located in its original position, the <span style="font-family: Courier New,Courier,monospace">puzzle_correct_cb()</span> function is called to show the original picture of the puzzle.</p>
<pre class="prettyprint">
void puzzle_correct_cb(appdata_s *data)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; ad-&gt;size * ad-&gt;size; i++)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;piece_pos[i]!=i) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;// Make a popup for congraturations
&nbsp;&nbsp;&nbsp;popup = elm_popup_add(win);
&nbsp;&nbsp;&nbsp;elm_popup_align_set(popup, ELM_NOTIFY_ALIGN_FILL, 1.0);

&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(popup, EEXT_CALLBACK_BACK, eext_popup_back_cb, NULL);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(popup, &quot;title,text&quot;, &quot;Correct!!&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(popup, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;layout = elm_layout_add(popup);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(layout, ad-&gt;puzzle_edj_path, &quot;popup_image_list_layout&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, 0, 0);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(layout, 0, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_content_set(popup, layout);

&nbsp;&nbsp;&nbsp;// Show the original picture of the puzzle
&nbsp;&nbsp;&nbsp;img = elm_image_add(layout);
&nbsp;&nbsp;&nbsp;elm_image_file_set(img, ad-&gt;correct_img_path, NULL);
&nbsp;&nbsp;&nbsp;elm_image_aspect_fixed_set(img, EINA_FALSE);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(img, 400, 400);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_max_set(img, 400, 400);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.content&quot;, img);

&nbsp;&nbsp;&nbsp;// Make a popup delete button
&nbsp;&nbsp;&nbsp;btn = elm_button_add(popup);
&nbsp;&nbsp;&nbsp;elm_object_style_set(btn, &quot;popup&quot;);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;OK&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(popup, &quot;button1&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, con_button_clicked_cb, popup);
&nbsp;&nbsp;&nbsp;evas_object_show(popup);

&nbsp;&nbsp;&nbsp;ad-&gt;start = 0;
}
</pre>
</li>
<li>Select the level of the puzzle. 

<p class="figure">Figure: Puzzle levels</p>
<p align="center"><img src="../images/puzzle.png" alt="Puzzle levels" /></p>

<p>The user can select the level of the puzzle. Select a 4X4 puzzle or a 5X5 puzzle. To change the number of pieces, the <span style="font-family: Courier New,Courier,monospace">puzzle_change()</span> function is called. It works in the same way as the <span style="font-family: Courier New,Courier,monospace">puzzle_create()</span> function, but the value of <span style="font-family: Courier New,Courier,monospace">PIECE</span> is different.</p>
<pre class="prettyprint">
void _level_button_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;ret_if(!data);

&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;Evas_Object *popup = NULL;

&nbsp;&nbsp;&nbsp;popup = evas_object_data_get(ad-&gt;win, &quot;popup&quot;);

&nbsp;&nbsp;&nbsp;if (elm_check_state_get(ad-&gt;check1) == 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!puzzle_change(ad, 4))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Fail puzzle change&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}   
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (elm_check_state_get(ad-&gt;check2) == 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!puzzle_change(ad, 5)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_E(&quot;Fail puzzle change&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_del(popup);
}
</pre>
</li>
</ol>


  
  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
