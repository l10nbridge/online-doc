<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] LayoutSignal Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>[UI Sample] LayoutSignal Sample Overview</h1>

<p>The [UI Sample] LayoutSignal sample application demonstrates how to combine Edje code with C code, and how to manage communication between them using a signal mechanism. In this example, Edje receives a signal to display text from a button object, and returns another signal to C as a response.</p>

<p>This sample uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_layout</span> component for signaling, <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> and <span style="font-family: Courier New,Courier,monospace">elm_layout</span> for view management, and <span style="font-family: Courier New,Courier,monospace">elm_button</span> for the view content.</p>

<p>The following figure illustrates the main view of the [UI Sample] LayoutSignal sample application, its wireframe structure, and the UI component tree.</p>

<p class="figure">Figure: [UI Sample] LayoutSignal screen</p>
<p align="center"><img alt="[UI Sample] LayoutSignal screen" src="../images/ui_layout_signal_sd.png" /></p>
<p align="center"><img alt="[UI Sample] LayoutSignal screen" src="../images/ui_layout_signal_sd_tree.png" /></p>

<h2>Application Layout</h2>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function is responsible for creating the application layout:</p>

<pre class="prettyprint">static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;char edj_path[PATH_MAX] = {0, };

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win))
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Base layout
&nbsp;&nbsp;&nbsp;app_get_resource(EDJ_FILE, edj_path, (int)PATH_MAX);
&nbsp;&nbsp;&nbsp;ad-&gt;layout = elm_layout_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_layout_file_set(ad-&gt;layout, edj_path, GRP_MAIN);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;layout);

&nbsp;&nbsp;&nbsp;create_content(ad);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}</pre>

<p>The function starts by creating a window and then adds <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> to decorate the window with an indicator.</p>

<p>The sample application has its own view style, so the <span style="font-family: Courier New,Courier,monospace">app_get_resource()</span> function is used to get the <span style="font-family: Courier New,Courier,monospace">EDJ_FILE</span> path for the layout file set. The <span style="font-family: Courier New,Courier,monospace">elm_layout</span> object is added in the conformant.</p>

<h2>Main View</h2>

<p>The main view is created using the <span style="font-family: Courier New,Courier,monospace">create_content()</span> function.</p>

<p>The following code creates the main view content and adds callbacks for sending and receiving signals:</p>

<pre class="prettyprint">static void
create_content(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *btn;

&nbsp;&nbsp;&nbsp;btn = elm_button_add(ad-&gt;layout);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Send Signal&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(btn);

&nbsp;&nbsp;&nbsp;// Add callback for clicked event on the button object
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, send_clicked_cb, ad);
&nbsp;&nbsp;&nbsp;// Add callback for the signal received from Edje
&nbsp;&nbsp;&nbsp;elm_object_signal_callback_add(ad-&gt;layout, &quot;text,change&quot;, &quot;LayoutSignal&quot;, receive_clicked_cb, btn);

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;layout, &quot;center_button&quot;, btn);
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(ad-&gt;layout, &quot;text&quot;, &quot;send a signal from C to Edje&quot;);
}</pre>

<p>A button object is added to the layout for sending a signal to Edje.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_smart_callback_add()</span> function is used to get the signal when the user clicks the button.</p>
<p>The function takes the following parameters:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">btn</span>: Smart object</li>
 <li><span style="font-family: Courier New,Courier,monospace">&quot;clicked&quot;</span>: Event name</li>
 <li><span style="font-family: Courier New,Courier,monospace">send_clicked_cb()</span>: Callback function invoked when the event is triggered</li>
 <li><span style="font-family: Courier New,Courier,monospace">ad</span>: User data passed to the callback function</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">elm_object_signal_callback_add()</span> function is used to get the signal callbacks when the UI component object sends the signals. The function connects a callback function to a signal sent by the layout object. Globs can occur either in the emission name or source name.</p>

<ul>
 <li><span style="font-family: Courier New,Courier,monospace">ad-&gt;layout</span>: Target object</li>
 <li><span style="font-family: Courier New,Courier,monospace">text,change</span>: Signal emission</li>
 <li><span style="font-family: Courier New,Courier,monospace">LayoutSignal</span>: Signal source</li>
 <li><span style="font-family: Courier New,Courier,monospace">receive_clicked_cb()</span>: Callback function invoked when the signal is sent</li>
 <li><span style="font-family: Courier New,Courier,monospace">btn</span>: User data passed to the callback function</li>
</ul>

<h2>Button Clicked View</h2>

<p>The following code shows the callback function for the button clicked event:</p>

<pre class="prettyprint">static void
send_clicked_cb(void *data, Evas_Object *obj, void *event)
{
&nbsp;&nbsp;&nbsp;// Button clicked event
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;elm_object_text_set(obj, &quot;Disabled&quot;);
&nbsp;&nbsp;&nbsp;elm_object_disabled_set(obj, EINA_TRUE);

&nbsp;&nbsp;&nbsp;// Send a signal to Edje
&nbsp;&nbsp;&nbsp;elm_object_signal_emit(ad-&gt;layout, &quot;elm,state,text,show&quot;, &quot;elm&quot;);
}</pre>

<p>When the user clicks the button, the button text changes to &quot;Disabled&quot;, and the button is disabled with the <span style="font-family: Courier New,Courier,monospace">elm_object_disabled_set()</span> function. Next, the <span style="font-family: Courier New,Courier,monospace">elm_object_signal_emit()</span> function sends a signal to the Edje object. An Edje application can respond to the signal by specifying matching <span style="font-family: Courier New,Courier,monospace">signal</span> and <span style="font-family: Courier New,Courier,monospace">source</span> fields.</p>

<ul>
 <li><span style="font-family: Courier New,Courier,monospace">ad-&gt;layout</span>: Target object</li>
 <li><span style="font-family: Courier New,Courier,monospace">elm,state,text,show</span>: Signal emission</li>
 <li><span style="font-family: Courier New,Courier,monospace">elm</span>: Signal source</li>
</ul>

<p class="figure">Figure: Button clicked view</p>
<p align="center"><img alt="Button clicked view" src="../images/ui_layout_signal_sd_button_clicked.png" /></p>

<p>The <span style="font-family: Courier New,Courier,monospace">program</span> block is used to send the signal to Edje.</p>

<pre class="prettyprint">program
{
&nbsp;&nbsp;&nbsp;name: &quot;text_show&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;elm,state,text,show&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;elm&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;show&quot; 0.0;
&nbsp;&nbsp;&nbsp;transition: LINEAR ANIM_TIME;
&nbsp;&nbsp;&nbsp;target: &quot;text&quot;;
&nbsp;&nbsp;&nbsp;after: &quot;text_hide&quot;;
}</pre>

<p>In the block:</p>
<ul>
 <li><span style="font-family: Courier New,Courier,monospace">signal [signal name]</span>
  <p>Specifies the signals that cause the program to run. The signal received must match the specified source to run. Signals can be blocked, but you can only use 1 signal keyword per program.</p>
 </li>
 <li><span style="font-family: Courier New,Courier,monospace">source [source name]</span>
  <p>Source of the accepted signal. Sources can be blocked, but you can only use 1 source keyword per program.</p>
 </li>
 <li><span style="font-family: Courier New,Courier,monospace">action [type] [param1] [param2]</span>
  <p>Action to be performed by the program. Only 1 action can be specified per program.</p>
 </li>
 <li><span style="font-family: Courier New,Courier,monospace">transition [type] [length] [[interp val 1]] [[interp val 2]] [[option]]</span>
  <p>Defines how transitions occur using the <span style="font-family: Courier New,Courier,monospace">STATE_SET</span> action. <span style="font-family: Courier New,Courier,monospace">type</span> is the transition style, and <span style="font-family: Courier New,Courier,monospace">length</span> is a double specifying the time (in seconds) in which to perform the transition.</p>
 </li>
 <li><span style="font-family: Courier New,Courier,monospace">target [target]</span>
  <p>Program or part on which the specified action acts. Multiple target keywords can be specified, but only 1 per target. <span style="font-family: Courier New,Courier,monospace">SIGNAL_EMIT</span>s do not have targets.</p>
 </li>
 <li><span style="font-family: Courier New,Courier,monospace">after [after]</span>
  <p>Specifies a program to run after the current program completes. The source and signal parameters of a program run as an <span style="font-family: Courier New,Courier,monospace">after</span> are ignored. Multiple <span style="font-family: Courier New,Courier,monospace">after</span> statements can be specified per program.</p>
 </li>
</ul>

<p>For more information about the Edje blocks, see the <a href="http://docs.enlightenment.org/auto/edje/edcref.html" target="_blank">Edje Data Collection reference</a>.</p>

<p>The application first changes the state of the part and then runs the <span style="font-family: Courier New,Courier,monospace">text_hide</span> program.</p>

<pre class="prettyprint">part
{
&nbsp;&nbsp;&nbsp;name: &quot;text&quot;;
&nbsp;&nbsp;&nbsp;type: TEXT;
&nbsp;&nbsp;&nbsp;scale: 1;
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;align: 0.0 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel1 { relative: 0.0 1.0; to: middle_padding; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rel2 { relative: 0.0 1.0; to: middle_padding; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text { font: &quot;Tizen:style=regular&quot;; size: 25; min: 1 1; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Alpha value set as 255
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 0;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;description
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;state: &quot;show&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;inherit: &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;visible: 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Text show program make alpha value changed to 20 from 255
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: 0 0 0 20;
&nbsp;&nbsp;&nbsp;}
}</pre>

<p>The alpha value of the text part is changed from 255 to 20 for 3 seconds (<span style="font-family: Courier New,Courier,monospace">ANIM_TIME</span>).</p>

<pre class="prettyprint">program
{
&nbsp;&nbsp;&nbsp;name: &quot;text_hide&quot;;
&nbsp;&nbsp;&nbsp;signal: &quot;elm,state,hide,text&quot;;
&nbsp;&nbsp;&nbsp;source: &quot;elm&quot;;
&nbsp;&nbsp;&nbsp;action: STATE_SET &quot;default&quot; 0.0;
&nbsp;&nbsp;&nbsp;target: &quot;text&quot;;
&nbsp;&nbsp;&nbsp;after: &quot;text_restore&quot;;
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">text_hide</span> program renders the text part invisible. The application then runs the <span style="font-family: Courier New,Courier,monospace">text_restore</span> program.</p>

<p>The following code sends a signal to the C code:</p>

<pre class="prettyprint">program
{
&nbsp;&nbsp;&nbsp;name: &quot;text_restore&quot;;
&nbsp;&nbsp;&nbsp;action: SIGNAL_EMIT &quot;text,change&quot; &quot;LayoutSignal&quot;;
]}</pre>

<p>After the transition, the <span style="font-family: Courier New,Courier,monospace">text_restore</span> program is run to send a signal to the C code. Edje invokes the callback function in the C code. The <span style="font-family: Courier New,Courier,monospace">elm_object_text_set()</span> function changes the button text from &quot;Disabled&quot; back to &quot;Send Signal&quot;.</p>

<pre class="prettyprint">static void
receive_clicked_cb(void *data, Evas_Object *obj, const char *emission, const char *source)
{
&nbsp;&nbsp;&nbsp;// Edje sent signal to c
&nbsp;&nbsp;&nbsp;Evas_Object *btn = data;

&nbsp;&nbsp;&nbsp;elm_object_disabled_set(btn, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Send Signal&quot;);
}</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>