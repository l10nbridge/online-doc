<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Internationalization Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
  </div>

  <h1>Internationalization Sample Overview</h1>

  <p>
  The sample demonstrates how to provide multilanguage support to the application. There are two different translation machanisms applied: global and local. The global mechanism implements the
  text strings translation on language change callback via Settings application. The local mechanism demonstrates how to obtain the list of available languages and how to apply the selected one within the
  application's scope only.
  <br>
  This application demonstrates how to automatically apply the text translations:
    <ul>
	  <li>when the display language is changed via Settings &#10140; Language and input &#10140; Display language;</li>
	  <li>when the display language is changed within the application using the i18n functions.</li>
	</ul>
  </p>
  <p>The figures below illustrate the view of the application with different languages applied.</p>
  <p id="app-screenshot" class="figure">Figure: Internationalization application screens.</p>
  <p style="text-align:center;">
    <img alt="Main view of the application with en_US language set globally" height="364" hspace="20" src="../images/internationalization_global_en_us_view.png" />
	<img alt="Main view of the application with ko_KR language set globally" height="364" hspace="20" src="../images/internationalization_global_ko_kr_view.png" />
	<img alt="Main view of the application with pl_PL language set locally" height="364" hspace="20" src="../images/internationalization_local_pl_pl_view.png" />
  </p>

  <p>The sample application's user interface is divided into three sections:
  <ul>
    <li>top section - provides information on global language change method;</li>
	<li>middle section - displays the text which is a subject for translation;</li>
	<li>bottom section - provides information on local language change method and the set of widgets enabling language selection and application.</li>
  </ul>
  The structure of the user interface is depicted below (EDJE layout scripts are used).
  </p>
  <p id="ui-struct" class="figure">Figure: Internationalization layout structure.</p>
  <p style="text-align:center;">
    <img alt="Resource Manager layout structure" hspace="80" height="550" src="../images/internationalization_ui_layout_sd_mn.png" />
  </p>
  <p>
  The final application's view is created by embedding proper widgets into the layout depicted above. The resulting UI view is shown below.
  </p>
  <p id="ui-view" class="figure">Figure: Internationalization application's UI view.</p>
  <p style="text-align:center;">
    <img alt="Internationalization application's UI view" hspace="80" height="450" src="../images/internationalization_ui_view_sd_mn.png" />
  </p>
  <br>
  The application's workflow can be divided into three logical pipelines:
  <ul>
    <li>application's startup,</li>
	<li>text translation on global language change,</li>
	<li>text translation on local language change,</li>
  </ul>
  which can be described by the following figure:
  </p>
  <p id="workflow" class="figure">Figure: Internationalization application workflow.</p>
  <p style="text-align:center;">
    <img alt="Application workflow" height="600" hspace="0" src="../images/internationalization_workflow_sd_mn.png"/>
  </p>

  <h3>Prerequisites</h3>
  <p>
    <ul>
      <li>To ensure proper application execution, the strings translation files must be created using Language Explorer tool.</li>
      <li>No privilages are required.</li>
	</ul>
  </p>

<h2 id="lang-exp">Language Explorer</h2>

<h2>Implementation</h2>

<h3 id="type-defs">Type definitions</h3>

<pre class="prettyprint">
/* The general structure for application's data storage. */
struct __appdata {
&nbsp;&nbsp;&nbsp;viewdata_s view;
};

typedef struct __appdata appdata_s;
</pre>

<pre class="prettyprint">
/* The callback function of get_display_language_cb type is called on display language selection from the list of all available languages. */
typedef bool (*get_display_language_cb)(const char *locale, char **display_language);

/* The callback function of get_available_locale_cb type is called within the <a href="#model">Model</a> module while enumerating all available languages. */
typedef bool (*get_available_locale_cb)(const char *locale, void *data);
</pre>

<pre class="prettyprint">
/* All the Evas_Object objects represent UI widgets. */
struct __viewdata {
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_top;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_text_middle;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_bottom;
&nbsp;&nbsp;&nbsp;Evas_Object *hoversel;
&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;get_display_language_cb get_language_cb;
};

typedef struct __viewdata viewdata_s;
</pre>

<h3 id="app-init">Application initialization</h3>

  <p>
  The entire application's life-cycle is implemented in the main source file using a common Tizen application structure:
  </p>

<pre class="prettyprint">
int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, &ad);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &event_callback, &ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_main() failed with error = %d", ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

  <p>
  The application's initilization procedure is executed in the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on the startup.
  </p>

<pre class="prettyprint">
static bool __create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&ad->view);
}
</pre>

  <p>
  Finally, the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function is invoked, which controls the entire initialization process
  (see the code snippet below for details). This function is responsible for:
    <ul>
	  <li>creating the user interface (<span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span>);</li>
	  <li>populating relevant widget with available languages.</li>
	</ul>
  </p>

<pre class="prettyprint">
bool controller_init(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd, __get_display_language_cb))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!model_get_available_locale(__get_available_locale_cb, (void *)vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">model_get_available_locale()</span> function enumerates all languages, where the
  <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function is invoked for each language.
  </p>

  <p>
  For reference of model related functions that are not listed here refer to the <a href="#model">Model</a> section.
  </p>

<pre class="prettyprint">
static bool __get_available_locale_cb(const char *locale, void *data)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s *)data;

&nbsp;&nbsp;&nbsp;view_add_locale(vd, locale);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Within the <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function, the relevant widget is populated using the
  <span style="font-family: Courier New,Courier,monospace">view_add_locale()</span> function.
  </p>

  <p>
  The view related source code is not listed here, as it is not a subject of this document.
  </p>

<h3 id="app-finit">Application termination</h3>

<h3>Text translation files handling</h3>

<h3 id="model">Model</h3>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
