<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Internationalization Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mn_icon.png"/></p>
  </div>

  <h1>Internationalization Sample Overview</h1>

  <p>
  The sample demonstrates how to provide multilanguage support to the application. There are two different translation machanisms applied: global and local. The global mechanism implements the
  text strings translation on language change callback via Settings application. The local mechanism demonstrates how to obtain the list of available languages and how to apply the selected one within the
  application's scope only.
  <br>
  This application demonstrates how to automatically apply the text translations:
    <ul>
	  <li>when the display language is changed via Settings &#10140; Language and input &#10140; Display language;</li>
	  <li>when the display language is changed within the application using the i18n functions.</li>
	</ul>
  </p>
  <p>The figures below illustrate the view of the application with different languages applied.</p>
  <p id="app-screenshot" class="figure">Figure: Internationalization application screens.</p>
  <p style="text-align:center;">
    <img alt="Main view of the application with en_US language set globally" height="364" hspace="20" src="../images/internationalization_global_en_us_view.png" />
	<img alt="Main view of the application with ko_KR language set globally" height="364" hspace="20" src="../images/internationalization_global_ko_kr_view.png" />
	<img alt="Main view of the application with pl_PL language set locally" height="364" hspace="20" src="../images/internationalization_local_pl_pl_view.png" />
  </p>

  <p>The sample application's user interface is divided into three sections:
  <ul>
    <li>top section - provides information on global language change method;</li>
	<li>middle section - displays the text which is a subject for translation;</li>
	<li>bottom section - provides information on local language change method and the set of widgets enabling language selection and application.</li>
  </ul>
  The structure of the user interface is depicted below (EDJE layout scripts are used).
  </p>
  <p id="ui-struct" class="figure">Figure: Internationalization layout structure.</p>
  <p style="text-align:center;">
    <img alt="Resource Manager layout structure" hspace="80" height="550" src="../images/internationalization_ui_layout_sd_mn.png" />
  </p>
  <p>
  The final application's view is created by embedding proper widgets into the layout depicted above. The resulting UI view is shown below.
  </p>
  <p id="ui-view" class="figure">Figure: Internationalization application's UI view.</p>
  <p style="text-align:center;">
    <img alt="Internationalization application's UI view" hspace="80" height="450" src="../images/internationalization_ui_view_sd_mn.png" />
  </p>
  <br>
  The application's workflow can be divided into three logical pipelines:
  <ul>
    <li>application's startup,</li>
	<li>text translation on global language change,</li>
	<li>text translation on local language change,</li>
  </ul>
  which can be described by the following figure:
  </p>
  <p id="workflow" class="figure">Figure: Internationalization application workflow.</p>
  <p style="text-align:center;">
    <img alt="Application workflow" height="600" hspace="0" src="../images/internationalization_workflow_sd_mn.png"/>
  </p>

  <h3>Prerequisites</h3>
  <p>
    <ul>
      <li>To ensure proper application execution, the strings translation files must be created using Language Explorer tool.</li>
      <li>No privilages are required.</li>
	</ul>
  </p>

<h2 id="lang-exp">Language Explorer</h2>

<h2>Implementation</h2>

<h3 id="type-defs">Type definitions</h3>

<pre class="prettyprint">
/* The general structure for application's data storage. */
struct __appdata {
&nbsp;&nbsp;&nbsp;viewdata_s view;
};

typedef struct __appdata appdata_s;
</pre>

<pre class="prettyprint">
/* The callback function of get_display_language_cb type is called on display language selection from the list of all available languages. */
typedef bool (*get_display_language_cb)(const char *locale, char **display_language);

/* The callback function of get_available_locale_cb type is called within the <a href="#model">Model</a> module while enumerating all available languages. */
typedef bool (*get_available_locale_cb)(const char *locale, void *data);
</pre>

<pre class="prettyprint">
/* All the Evas_Object objects represent UI widgets. */
struct __viewdata {
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_top;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_text_middle;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_bottom;
&nbsp;&nbsp;&nbsp;Evas_Object *hoversel;
&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;get_display_language_cb get_language_cb;
};

typedef struct __viewdata viewdata_s;
</pre>

<h3 id="app-init">Application initialization</h3>

  <p>
  The entire application's life-cycle is implemented in the main source file using a common Tizen application structure:
  </p>

<pre class="prettyprint">
int main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL, };

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, &ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, &ad);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &event_callback, &ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function ui_app_main() failed with error = %d", ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

  <p>
  The application's initilization procedure is executed in the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on the startup.
  </p>

<pre class="prettyprint">
static bool __create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&ad->view);
}
</pre>

  <p>
  Finally, the <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function is invoked, which controls the entire initialization process
  (see the code snippet below for details). This function is responsible for:
    <ul>
	  <li>creating the user interface (<span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span>);</li>
	  <li>populating relevant widget with available languages.</li>
	</ul>
  </p>

<pre class="prettyprint">
bool controller_init(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd, __get_display_language_cb))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!model_get_available_locale(__get_available_locale_cb, (void *)vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">model_get_available_locale()</span> function enumerates all languages, where the
  <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function is invoked for each language.
  </p>

  <p>
  For reference of model related functions that are not listed here refer to the <a href="#model">Model</a> section.
  </p>

<pre class="prettyprint">
static bool __get_available_locale_cb(const char *locale, void *data)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s *)data;

&nbsp;&nbsp;&nbsp;view_add_locale(vd, locale);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Within the <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function, the relevant widget is populated using the
  <span style="font-family: Courier New,Courier,monospace">view_add_locale()</span> function.
  </p>

  <p>
  The view related source code is not listed here, as it is not a subject of this document.
  </p>

<h3>Text translation</h3>

  <p>
  The application demonstrates two different approaches to the text strings translation:
    <ul>
      <li>
      the first one is based on hooking the application's <span style="font-family: Courier New,Courier,monospace">APP_EVENT_LANGUAGE_CHANGED</span> event. The event's relevant callback
      function is invoked on the display language change via the Settings &#10140; Language and input &#10140; Display language. This is a procedure of global language change. It affects the entire mobile platform
	  and all of its applications.
	  </li>
	  <li>
	  The second one does not listen to any external notifications (like <span style="font-family: Courier New,Courier,monospace">APP_EVENT_LANGUAGE_CHANGED</span> event above), but it is based
	  on language selection from drop-down list. Once the language change is confirmed using the "Apply" button, the desigated text strings will be translated. This is a procedure of local language change, as
	  it affects only this application and does not influence any other component on the mobile platform.
	  </li>
    </ul>
  Both methods require that the strings translation files are available (see the <a href="#lang-exp">Language Explorer</a> section for more details).
  </p>

<h4 id="global-lang-ch">Hangling global language change</h4>

  <p>
  Once the display language is changed via the Settings &#10140; Language and input &#10140; Display language, the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span>
  callback function is invoked (see the <a href="#app-init">Application initialization</a> section for details of event hooking with the
  <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function).
  </p>

<pre class="prettyprint">
static void __ui_app_lang_changed(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)user_data;

&nbsp;&nbsp;&nbsp;char *language = NULL;

&nbsp;&nbsp;&nbsp;if (!model_get_locale_language(&language))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;view_set_language(&ad->view, language);
&nbsp;&nbsp;&nbsp;free(language);

&nbsp;&nbsp;&nbsp;return;
}
</pre>

  <p>
  When the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function is invoked, the current language has to be obtained from the system settings,
  where the Settings application stores the user's selection regarding the display language. This operation is wrapped by the
  <span style="font-family: Courier New,Courier,monospace">model_get_locale_language()</span> function (see the code snippet below for more details). The display language setting is stored
  as a key-value pair, where the valid key is identified as the <span style="font-family: Courier New,Courier,monospace">SYSTEM_SETTINGS_KEY_LOCALE_LANGUAGE</span> constant value. As a result,
  the valid localization code is returned, ex. "en_US" for English (United States) language, "ko_KR" for Korean (Republic of) language, etc.
  </p>

<pre class="prettyprint">
bool model_get_locale_language(char **language)
{
&nbsp;&nbsp;&nbsp;int ret = system_settings_get_value_string(SYSTEM_SETTINGS_KEY_LOCALE_LANGUAGE, language);
&nbsp;&nbsp;&nbsp;if (ret != SYSTEM_SETTINGS_ERROR_NONE) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Function system_settings_get_value_string() failed with error %d.", ret);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  Once the valid localization code is obtained, it is passed to the <span style="font-family: Courier New,Courier,monospace">view_set_language()</span> function, where the
  <span style="font-family: Courier New,Courier,monospace">elm_language_set()</span> function applies the language to the application's text strings.
  </p>

<pre class="prettyprint">
bool view_set_language(viewdata_s *vd, const char *locale)
{
&nbsp;&nbsp;&nbsp;if (!locale) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, "Invalid input arguments.");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;/* This portion of code appends the ".UTF-8" string to the localization code which is required by the elm_language_set() function. */
&nbsp;&nbsp;&nbsp;int str_len = strlen(locale) + strlen(".UTF-8") + 1;
&nbsp;&nbsp;&nbsp;char *localization_string = (char *)calloc(str_len, sizeof(char));
&nbsp;&nbsp;&nbsp;snprintf(localization_string, str_len, "%s.UTF-8", locale);

&nbsp;&nbsp;&nbsp;controller_log(DLOG_INFO, "Language changed to: %s (%s)", locale, localization_string);

&nbsp;&nbsp;&nbsp;elm_language_set(localization_string);
&nbsp;&nbsp;&nbsp;free(localization_string);

&nbsp;&nbsp;&nbsp;/* The text strings are translated using the i18n functions. */
&nbsp;&nbsp;&nbsp;__view_display_text_translation(vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

  <p>
  The final texts' translation and display is performed by the <span style="font-family: Courier New,Courier,monospace">__view_display_text_translation()</span> function, where the
  texts' IDs are used (<span style="font-family: Courier New,Courier,monospace">IDS_BODY_EXAMPLE_TEXT</span>,
  <span style="font-family: Courier New,Courier,monospace">IDS_BODY_HELLO_WORLD</span>) together with the <span style="font-family: Courier New,Courier,monospace">i18n_get_text()</span> function.
  </p>

<pre class="prettyprint">
static void __view_display_text_translation(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(vd->layout_text_middle, PART_TEXT_MIDDLE_LABEL_TOP, i18n_get_text("IDS_BODY_EXAMPLE_TEXT"));
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(vd->layout_text_middle, PART_TEXT_MIDDLE_LABEL_BOTTOM, i18n_get_text("IDS_BODY_HELLO_WORLD"));
}
</pre>

  <p>
  The <span style="font-family: Courier New,Courier,monospace">i18n_get_text()</span> function is responsible for proper text string selection from the po files according to the current language
  setting.
  </p>

<h4>Handling local language change</h4>

  <p>
  In order to change the language locally, the user is requested to select desired language from the drop-down list of localization codes and confirm using the "Apply" button. Once the "Apply" button is pressed,
  the <span style="font-family: Courier New,Courier,monospace">__view_apply_button_click_cb()</span> callback function is called within the View module.
  </p>

<pre class="prettyprint">
static void __view_apply_button_click_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;/* The localization code is obtained from the language selection widget. */
&nbsp;&nbsp;&nbsp;const char *locale = elm_object_text_get(__viewdata->hoversel);
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s *)data;

&nbsp;&nbsp;&nbsp;if (locale)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_language(vd, locale);
}
</pre>

  <p>
  Localization code obtained from the language selection widget is passed to the <span style="font-family: Courier New,Courier,monospace">view_set_language()</span> function as an
  argument. Further processing is strictly the same as described in the global language change procedure (for reference, see the <a href="#global-lang-ch">Hangling global language change</a> section).
  </p>

<h3 id="model">Model</h3>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
