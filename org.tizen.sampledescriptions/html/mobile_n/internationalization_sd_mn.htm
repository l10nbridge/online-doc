<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Internationalization Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
  <div id="profile">
    <p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
  </div>

  <h1>Internationalization Sample Overview</h1>

  <p>The Internationalization sample application demonstrates how you can provide multilanguage support to the application. There are 2 different translation mechanisms applied: global and local. The global mechanism implements the text string translation in a language change callback using the Settings application. The local mechanism demonstrates how to obtain the list of available languages and how to apply the selected one within the application&#39;s scope only using the i18n functions.</p>

  <p>The following figure illustrates the view of the application with different languages applied.</p>
  <p id="app-screenshot" class="figure">Figure: Internationalization application screens</p>
  <p align="center">
    <img alt="Main view of the application with en_US language set globally" src="../images/internationalization_global_en_us_view.png" />
	<img alt="Main view of the application with ko_KR language set globally" src="../images/internationalization_global_ko_kr_view.png" />
	<img alt="Main view of the application with pl_PL language set locally" src="../images/internationalization_local_pl_pl_view.png" />
  </p>

<p>The application has one screen only, in which you can apply text translations in 2 ways:</p>
    <ul>
	  <li>To use a global mechanism, go to <strong>Settings &gt; Language and input &gt; Display language</strong> and select a new display language.</li>
	  <li>To use a local mechanism, select a new display language from the drop-down list on the screen and click <strong>Apply</strong>.</li>
	</ul>  
  
  <p>The user interface is divided into 3 sections:</p>
  <ul>
    <li>Top section provides information on the global mechanism.</li>
	<li>Middle section displays the text which is subject to translation.</li>
	<li>Bottom section provides information and components for handling the local mechanism.</li>
  </ul>
  <p>The following figure shows the structure of the user interface. EDJE layout scripts are used.</p>
 
  <p id="ui-struct" class="figure">Figure: UI layout structure</p>
  <p align="center">
    <img alt="UI layout structure" src="../images/internationalization_ui_layout_sd_mn.png" />
  </p>
  <p>The final application view is created by embedding the proper UI components into the layout. The following figure shoes the resulting UI view.</p>
  <p id="ui-view" class="figure">Figure: Application UI view</p>
  <p align="center">
    <img alt="Application UI view" src="../images/internationalization_ui_view_sd_mn.png" />
  </p>

  <p>The application workflow can be divided into the following logical pipelines:</p>
  <ul>
    <li>Application startup</li>
	<li>Text translation on a global language change</li>
	<li>Text translation on a local language change</li>
  </ul>
  <p>The workflow is described in the following figure.</p>
  <p id="workflow" class="figure">Figure: Application workflow</p>
  <p align="center">
    <img alt="Application workflow" src="../images/internationalization_workflow_sd_mn.png" />
  </p>

  <h2>Prerequisites</h2>
<p>To ensure proper application execution, the string translation files must be created using the Localization Tool.</p>

<h3 id="lang-exp">Localization Tool</h3>

<p>To provide multilanguage support to the application, use the Localization tool:</p>
<ol><li>To invoke the tool, select the <strong>String Localize ...</strong> option from the project&#39;s context menu. The following figure shows the Localization tool view for this project.

  <p align="center">
    <img alt="Localization tool view" src="../images/internationalization_localization_tool_view_sd_mn.png" />
  </p></li>
  
 <li><p>Add a new language by opening the Add languages window with the <img src="../images/internationalization_add_lang_button_sd_mn.png" alt="Add language button" /> button, and selecting all the needed languages.
  </p>

  <p align="center">
    <img alt="Add languages tool view" src="../images/internationalization_add_languages_view_sd_mn.png" />
  </p>

<p>The selected language appear in the Localization tool view.</p>
</li>

<li>Use the <strong>Add string key</strong> button (<img src="../images/internationalization_add_string_button_sd_mn.png" alt="Add string key button" />) to create a new text translation identification key. In case of this application, the following keys are created:
  <ul>
    <li><span style="font-family: Courier New,Courier,monospace">IDS_BODY_EXAMPLE_TEXT</span></li>
	<li><span style="font-family: Courier New,Courier,monospace">IDS_BODY_HELLO_WORLD</span></li>
  </ul>
<p>For the created keys, you can provide text translations in all selected languages.</p></li></ol>

<p>Within the application source code, the <a href="#text-trans">translation keys must be used</a> instead of the plain texts.</p>

<h2>Implementation</h2>

<h3 id="type-defs">Type Definitions</h3>

<p>The general structure is used as the application data storage:</p>
<pre class="prettyprint">
struct 
__appdata 
{
&nbsp;&nbsp;&nbsp;viewdata_s view;
};

typedef struct __appdata appdata_s;
</pre>

<p>The callback function of the <span style="font-family: Courier New,Courier,monospace">get_display_language_cb</span> type is called when a display language is selected from the list of all available languages. The callback function of the <span style="font-family: Courier New,Courier,monospace">get_available_locale_cb</span> type is called within the <a href="#model">Model</a> module while enumerating all available languages.</p>
<pre class="prettyprint">
typedef bool (*get_display_language_cb)(const char *locale, char **display_language);

typedef bool (*get_available_locale_cb)(const char *locale, void *data);
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> objects represent the UI components in the main view:</p>
<pre class="prettyprint">
// All the Evas_Object objects represent UI components
struct 
__viewdata 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_main_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_top;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_text_middle;
&nbsp;&nbsp;&nbsp;Evas_Object *layout_language_bottom;
&nbsp;&nbsp;&nbsp;Evas_Object *hoversel;
&nbsp;&nbsp;&nbsp;Evas_Object *button;
&nbsp;&nbsp;&nbsp;get_display_language_cb get_language_cb;
};

typedef struct __viewdata viewdata_s;
</pre>

<h3 id="app-init">Application Initialization</h3>

<p>To initialize the application:</p>
<ol>
<li>
<p>Implement the application life-cycle in the main source file using a common Tizen application structure:</p>
<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;appdata_s ad = {{0,},};
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = __create_app;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __terminate_app;
&nbsp;&nbsp;&nbsp;event_callback.pause = __pause_app;
&nbsp;&nbsp;&nbsp;event_callback.resume = __resume_app;
&nbsp;&nbsp;&nbsp;event_callback.app_control = __control_app;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, __ui_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, __ui_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_DEVICE_ORIENTATION_CHANGED], APP_EVENT_DEVICE_ORIENTATION_CHANGED, __ui_app_orient_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, __ui_app_region_changed, &amp;ad);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, &amp;ad);
&nbsp;&nbsp;&nbsp;if (ret != APP_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function ui_app_main() failed with error = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>
</li>
<li>
<p>The application initialization procedure is executed in the <span style="font-family: Courier New,Courier,monospace">__create_app()</span> callback function, which is invoked on startup:</p>
<pre class="prettyprint">
static bool 
__create_app(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)data;

&nbsp;&nbsp;&nbsp;return controller_init(&amp;ad-&gt;view);
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">controller_init()</span> function controls the entire initialization process. This function is responsible for creating the user interface with the <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function, and populating the relevant component with available languages.</p>
<pre class="prettyprint">
bool 
controller_init(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;if (!view_create_base_gui(vd, __get_display_language_cb))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;if (!model_get_available_locale(__get_available_locale_cb, (void *)vd))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">model_get_available_locale()</span> function enumerates all languages, and the <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function is invoked for each language.</p>
<p>For information on the model-related functions that are not listed here, see <a href="#model">Model</a>.</p>
<pre class="prettyprint">
static bool 
__get_available_locale_cb(const char *locale, void *data)
{
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s *)data;
&nbsp;&nbsp;&nbsp;char fpath[512] = {0,};
&nbsp;&nbsp;&nbsp;char *res_path = app_get_resource_path();

&nbsp;&nbsp;&nbsp;// Limit the number of languages to those which are supported by this application
&nbsp;&nbsp;&nbsp;// To do that, the existence of relevant translation file is checked
&nbsp;&nbsp;&nbsp;snprintf(fpath, sizeof(fpath), &quot;%slocale/%s/LC_MESSAGES/$(appName).mo&quot;, res_path, locale);
&nbsp;&nbsp;&nbsp;free(res_path);

&nbsp;&nbsp;&nbsp;if (access(fpath, F_OK) != -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_INFO, &quot;Language supported: %s&quot;, locale);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_add_locale(vd, locale);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>

<p>Within the <span style="font-family: Courier New,Courier,monospace">__get_available_locale_cb()</span> callback function, the relevant component is populated using the <span style="font-family: Courier New,Courier,monospace">view_add_locale()</span> function.</p>
</li>
</ol>
<p>The view-related source code is not listed here, as it is not a subject of this topic.</p>

<h3 id="text-trans">Text Translation</h3>

<p>The application demonstrates 2 different approaches to the text string translation:</p>
    <ul>
      <li>Hooking the application <span style="font-family: Courier New,Courier,monospace">APP_EVENT_LANGUAGE_CHANGED</span> event. 
	  <p>The event&#39;s relevant callback function is invoked when the display language is changed in <strong>Settings &gt; Language and input &gt; Display language</strong>. This is a global language change procedure. It affects the entire mobile platform and all of its applications.</p>
	  </li>
	  <li>Selecting a language in a list. 
	  <p>Once the language change is confirmed using the <strong>Apply</strong> button, the designated text strings are translated. This is a local language change procedure, as it affects only this application and does not influence any other component on the mobile platform.</p>
	  </li>
    </ul>
<p>Both methods require that the <a href="#lang-exp">string translation files are available</a>.</p>

<h4 id="global-lang-ch">Handling Global Language Changes</h4>

<p>To change the language globally:</p>
<ol>
<li>
<p>Once the display language is globally changed, the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function is invoked (for event hooking with the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function, see <a href="#app-init">Application Initialization</a>).</p>
<pre class="prettyprint">
static void 
__ui_app_lang_changed(app_event_info_h event_info, void *user_data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = (appdata_s *)user_data;

&nbsp;&nbsp;&nbsp;char *language = NULL;

&nbsp;&nbsp;&nbsp;if (!model_get_locale_language(&amp;language))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;

&nbsp;&nbsp;&nbsp;view_set_language(&amp;ad-&gt;view, language);
&nbsp;&nbsp;&nbsp;free(language);

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>
<li>
<p>When the <span style="font-family: Courier New,Courier,monospace">__ui_app_lang_changed()</span> callback function is invoked, the current language has to be obtained from the system settings, where the Settings application stores the user selection regarding the display language. This operation is wrapped by the <span style="font-family: Courier New,Courier,monospace">model_get_locale_language()</span> function.</p>
<p>The display language setting is stored as a key-value pair, where the valid key is identified as the <span style="font-family: Courier New,Courier,monospace">SYSTEM_SETTINGS_KEY_LOCALE_LANGUAGE</span> constant value. As a result, the valid localization code is returned, such as <span style="font-family: Courier New,Courier,monospace">en_US</span> for US English, and <span style="font-family: Courier New,Courier,monospace">ko_KR</span> for Korean.</p>
<pre class="prettyprint">
bool 
model_get_locale_language(char **language)
{
&nbsp;&nbsp;&nbsp;int ret = system_settings_get_value_string(SYSTEM_SETTINGS_KEY_LOCALE_LANGUAGE, language);
&nbsp;&nbsp;&nbsp;if (ret != SYSTEM_SETTINGS_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function system_settings_get_value_string() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>Once the valid localization code is obtained, it is passed to the <span style="font-family: Courier New,Courier,monospace">view_set_language()</span> function, where the <span style="font-family: Courier New,Courier,monospace">elm_language_set()</span> function applies the language to the application's text strings.</p>
<pre class="prettyprint">
bool 
view_set_language(viewdata_s *vd, const char *locale)
{
&nbsp;&nbsp;&nbsp;if (!locale) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Invalid input arguments.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// This portion of code appends the &quot;.UTF-8&quot; string to the localization code which is required by the elm_language_set() function
&nbsp;&nbsp;&nbsp;int str_len = strlen(locale) + strlen(&quot;.UTF-8&quot;) + 1;
&nbsp;&nbsp;&nbsp;char *localization_string = (char *)calloc(str_len, sizeof(char));
&nbsp;&nbsp;&nbsp;snprintf(localization_string, str_len, &quot;%s.UTF-8&quot;, locale);

&nbsp;&nbsp;&nbsp;controller_log(DLOG_INFO, &quot;Language changed to: %s (%s)&quot;, locale, localization_string);

&nbsp;&nbsp;&nbsp;elm_language_set(localization_string);
&nbsp;&nbsp;&nbsp;free(localization_string);

&nbsp;&nbsp;&nbsp;// Text strings are translated using the i18n functions
&nbsp;&nbsp;&nbsp;__view_display_text_translation(vd);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>
<li>
<p>The final text translation and display is performed by the <span style="font-family: Courier New,Courier,monospace">__view_display_text_translation()</span> function, where the text IDs (<span style="font-family: Courier New,Courier,monospace">IDS_BODY_EXAMPLE_TEXT</span> and <span style="font-family: Courier New,Courier,monospace">IDS_BODY_HELLO_WORLD</span>) are used together with the <span style="font-family: Courier New,Courier,monospace">i18n_get_text()</span> function.</p>
<pre class="prettyprint">
static void 
__view_display_text_translation(viewdata_s *vd)
{
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(vd-&gt;layout_text_middle, PART_TEXT_MIDDLE_LABEL_TOP, i18n_get_text(&quot;IDS_BODY_EXAMPLE_TEXT&quot;));
&nbsp;&nbsp;&nbsp;elm_object_part_text_set(vd-&gt;layout_text_middle, PART_TEXT_MIDDLE_LABEL_BOTTOM, i18n_get_text(&quot;IDS_BODY_HELLO_WORLD&quot;));
}
</pre>

<p> The <span style="font-family: Courier New,Courier,monospace">i18n_get_text()</span> function is responsible for the proper text string selection from the <span style="font-family: Courier New,Courier,monospace">.po</span> files according to the current language setting.</p>
</li>
</ol>

<h4>Handling Local Language Changes</h4>

<p>Once the language is changed locally, the <span style="font-family: Courier New,Courier,monospace">__view_apply_button_click_cb()</span> callback function is called within the View module.</p>
<pre class="prettyprint">
static void 
__view_apply_button_click_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;// Localization code is obtained from the language selection component
&nbsp;&nbsp;&nbsp;const char *locale = elm_object_text_get(__viewdata-&gt;hoversel);
&nbsp;&nbsp;&nbsp;viewdata_s *vd = (viewdata_s *)data;

&nbsp;&nbsp;&nbsp;if (locale)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_language(vd, locale);
}
</pre>

<p>Localization code obtained from the language selection component is passed to the <span style="font-family: Courier New,Courier,monospace">view_set_language()</span> function as a parameter. Further processing is the same as described in the <a href="#global-lang-ch">global language change procedure</a>.</p>

<h3 id="model">Model</h3>

<p>The Model module operates directly on the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__BASE__UTILS__I18N__MODULE.html">i18n</a> (localization) API. The additional benefit of this module is the simplification of the API function calling, error checking, and message logging.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">model_get_locale_language()</span> function implemented within the Model module has been briefly described in <a href="#global-lang-ch">Handling Global Language Changes</a>. Other functions are presented here:</p>

<ul><li>
<p>The <span style="font-family: Courier New,Courier,monospace">model_get_available_locale()</span> function enumerates all languages with respect to their localization information. For each localization code, the callback function of the <span style="font-family: Courier New,Courier,monospace">get_available_locale_cb</span> type is called.</p>
<pre class="prettyprint">
bool 
model_get_available_locale(get_available_locale_cb func_cb, void *data)
{
&nbsp;&nbsp;&nbsp;if (!func_cb) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Wrong argument provided.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Number of available locales is acquired
&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;int32_t count = i18n_ulocale_count_available();

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; count; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Localization code is obtained by its index
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *locale = i18n_ulocale_get_available(i);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// For each localization code obtained, the provided callback function is called
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (locale &amp;&amp; !func_cb(locale, data))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">model_get_locale_display_language()</span> function obtains the readable display language name based on its localization code:</p>
<pre class="prettyprint">
bool 
model_get_locale_display_language(const char *locale, char **display_language)
{
&nbsp;&nbsp;&nbsp;i18n_uchar i18n_language[256] = {0,};

&nbsp;&nbsp;&nbsp;if (!display_language) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Wrong argument provided.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Readable display language string is obtained from the localization code
&nbsp;&nbsp;&nbsp;i18n_ulocale_get_display_language(locale, NULL, i18n_language, sizeof(i18n_language));
&nbsp;&nbsp;&nbsp;int ret = get_last_result();
&nbsp;&nbsp;&nbsp;if (ret != I18N_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function i18n_ulocale_get_display_language() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Returned display language string is stored in an array of i18n_uchar,
&nbsp;&nbsp;&nbsp;// which is represented by the 16-bit unsigned int value, so it can not be simply
&nbsp;&nbsp;&nbsp;// typecasted to the char string. The transformation to the char string
&nbsp;&nbsp;&nbsp;// requires the i18n relevant function application. To store
&nbsp;&nbsp;&nbsp;// the display language in a char string, a new memory area is reserved
&nbsp;&nbsp;&nbsp;int32_t str_len = i18n_ustring_get_length(i18n_language);
&nbsp;&nbsp;&nbsp;*display_language = (char *)calloc(str_len + 1, sizeof(char));
&nbsp;&nbsp;&nbsp;if (!(*display_language)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function calloc() failed.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Display language string of type i18n_uchar is copied to the char string
&nbsp;&nbsp;&nbsp;// while the 8 higher bits are truncated from each of the i18n_uchar character
&nbsp;&nbsp;&nbsp;i18n_ustring_copy_au_n(*display_language, i18n_language, str_len);
&nbsp;&nbsp;&nbsp;ret = get_last_result();
&nbsp;&nbsp;&nbsp;if (ret != I18N_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(*display_language);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*display_language = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller_log(DLOG_ERROR, &quot;Function i18n_ustring_copy_au_n() failed with error %d.&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre></li></ul>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
