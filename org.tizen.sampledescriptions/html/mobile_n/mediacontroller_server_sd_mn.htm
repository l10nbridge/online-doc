<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Media-controller-server Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>
  <h1>Media-controller-server Sample Overview</h1>
<p>The media-controller-server sample application demonstrates how you can create a custom media controller server type application. This sample application is based on a simple music application.</p>
<p>The following figure illustrates the main view of the media-controller-server sample application.</p>

  <p class="figure">Figure: Media-controller server main view</p>
  <p align="center">
    <img alt="Media-controller-server main view" src="../images/mediacontrol_server_sd.png" />
  </p>

  <h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privilege must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediacontroller.server</span></li>
 </ul> 
 
<h2>Implementation</h2>

<p>To use the media controller server:</p>
<ol>
<li>Create a media controller server handle in the <span style="font-family: Courier New,Courier,monospace">create_player()</span> function. The function sets the callbacks to receive commands from the media controller client. To handle the incoming playback state command, define a callback and register it using the <span style="font-family: Courier New,Courier,monospace">mc_server_set_playback_state_command_received_cb()</span> function.
<pre class="prettyprint">
static void 
create_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ret = mc_server_create(&amp;ad-&gt;player_controller);
&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;mc_server_create() failed. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;mc_server_set_playback_state_command_received_cb(ad-&gt;player_controller, _playback_state_cb, (void*)ad);
&nbsp;&nbsp;&nbsp;mc_server_set_custom_command_received_cb(ad-&gt;player_controller, __custom_command_received_cb, (void*)ad);
} 
</pre>
</li>

<li>Update the playback state, media metadata information, shuffle mode, and repeat mode in the <span style="font-family: Courier New,Courier,monospace">play_media()</span> function:
<pre class="prettyprint">
void
play_media(media_info_h media_info, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_TITLE, file_name);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_ARTIST, artist);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_ALBUM, album);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_AUTHOR, author);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_GENRE, genre);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_DURATION, duration_c);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_DATE, date);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_COPYRIGHT, copyright);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_DESCRIPTION, description);
&nbsp;&nbsp;&nbsp;mc_server_set_metadata(ad-&gt;player_controller, MC_META_MEDIA_TRACK_NUM, track_num);     
&nbsp;&nbsp;&nbsp;mc_server_update_metadata(ad-&gt;player_controller);

&nbsp;&nbsp;&nbsp;// Update shuffle mode information for clients
&nbsp;&nbsp;&nbsp;mc_server_update_shuffle_mode(ad-&gt;player_controller, MC_SHUFFLE_MODE_OFF);

&nbsp;&nbsp;&nbsp;// Update repeat mode information for clients
&nbsp;&nbsp;&nbsp;mc_server_update_repeat_mode(ad-&gt;player_controller, MC_REPEAT_MODE_ON);

&nbsp;&nbsp;&nbsp;switch (player_state) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Case when the player state is playing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_server_set_playback_state(ad-&gt;player_controller, MC_PLAYBACK_STATE_PLAYING);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_server_update_playback_info(ad-&gt;player_controller);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Case when the player state is paused
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_server_set_playback_state(ad-&gt;player_controller, MC_PLAYBACK_STATE_PAUSED);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mc_server_update_playback_info(ad-&gt;player_controller);
&nbsp;&nbsp;&nbsp;}
} 
</pre>
</li>

<li>Handle the custom command in the <span style="font-family: Courier New,Courier,monospace">mc_server_set_custom_command_received_cb()</span> function and send a reply to the media controller client application with the <span style="font-family: Courier New,Courier,monospace">mc_server_send_command_reply()</span> function: 
<pre class="prettyprint">
void 
__custom_command_received_cb(const char *client_name, const char *command, bundle *data, void *user_data)
{
&nbsp;&nbsp;&nbsp;ret = mc_server_send_command_reply(ad-&gt;player_controller, client_name, 0, bundle_reply);
&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;mc_server_send_command_reply() failed. err = %d&quot;, ret);

&nbsp;&nbsp;&nbsp;return;
}
</pre>
</li>

<li>Unset the callbacks with the <span style="font-family: Courier New,Courier,monospace">mc_client_unset_xxx_command_received_cb()</span> functions. The media controller server handle must be destroyed using the <span style="font-family: Courier New,Courier,monospace">mc_server_destroy()</span> function.
<pre class="prettyprint">
static void 
__destroy_player(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ret = mc_server_unset_playback_state_command_received_cb(ad-&gt;player_controller);
&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;mc_server_unset_playback_state_command_received_cb() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = mc_server_unset_custom_command_received_cb(ad-&gt;player_controller);
&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;mc_server_unset_playback_state_command_received_cb() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = mc_server_destroy(ad-&gt;player_controller);
&nbsp;&nbsp;&nbsp;if (ret != MEDIA_CONTROLLER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;mc_server_destroy() failed. err = %d&quot;, ret);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>