<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Data-Control-Provider Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Data-Control-Provider Sample Overview</h1>

<p>The Data-Control-Provider sample application demonstrates how you can exchange data between a consumer application and a provider service using:</p>
<ul>
	<li>Map method (key-value pairs)</li>
	<li>SQL method (SQL queries)</li>
</ul>
<p>This sample has no user interface, as it is a service application that, in the background, provides services for the <a href="data_control_consumer_sd_mn.htm">Data-Control-Consumer</a> application.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<h2>Prerequisites</h2>
<ul><li>To ensure proper application execution, the following privilege must be set:
<ul><li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/datasharing</span></li></ul></li>
<li>To ensure proper application execution, the following data-control entries must be enabled:
<ul>
	<li><span id="provider-map-id" style="font-family: Courier New,Courier,monospace">http://data-control-provider.com/datacontrol/provider/data-control-provider</span> with the SQL type and <span style="font-family: Courier New,Courier,monospace">ReadWrite</span> access rights</li>
	<li><span id="provider-sql-id" style="font-family: Courier New,Courier,monospace">http://data-control-provider.com/datacontrol/provider/data-control-providers</span> with the map type and <span style="font-family: Courier New,Courier,monospace">ReadWrite</span> access rights</li>
</ul></li></ul>

<h2>Implementation</h2>
<h3>Application Initialization</h3>

<p>The application life-cycle is implemented in the main source file using a common Tizen service structure:</p>
<pre class="prettyprint">
int 
main(int argc, char* argv[])
{
&nbsp;&nbsp;&nbsp;char ad[50] = {0,};
&nbsp;&nbsp;&nbsp;service_app_lifecycle_callback_s event_callback;
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = service_app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = service_app_terminate;
&nbsp;&nbsp;&nbsp;event_callback.app_control = service_app_control;

&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_BATTERY], APP_EVENT_LOW_BATTERY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_app_low_battery, &amp;ad);
&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;handlers[APP_EVENT_LOW_MEMORY], APP_EVENT_LOW_MEMORY, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_app_low_memory, &amp;ad);
&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], APP_EVENT_LANGUAGE_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_app_lang_changed, &amp;ad);
&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;handlers[APP_EVENT_REGION_FORMAT_CHANGED], APP_EVENT_REGION_FORMAT_CHANGED, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_app_region_changed, &amp;ad);

&nbsp;&nbsp;&nbsp;return service_app_main(argc, argv, &amp;event_callback, ad);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">service_app_create()</span> function is used to initialize the map provider and SQL provider modules.</p>


<h3>Map Module</h3>

<p>To implement the map module:</p>

<ol>
<li>Define structures.

<p>The map module uses the following structure to hold its data:</p>
<pre class="prettyprint">
static struct 
{
&nbsp;&nbsp;&nbsp;data_control_provider_map_cb map_callback; // Provider callbacks
&nbsp;&nbsp;&nbsp;Eina_Hash *data_map; // Map structure
}
</pre></li>

<li>Initialize the map module.

<p>Assign callbacks to the callback structure to provide communication with the consumer application. You must also initialize the <span style="font-family: Courier New,Courier,monospace">Eina_Hash</span> structure that holds the map data.</p>

<p>The stored data is lost when the provider application is killed.</p>

<pre class="prettyprint">
Eina_Bool 
map_provider_initialize(void)
{
&nbsp;&nbsp;&nbsp;// Assign callback functions to the callback structure
&nbsp;&nbsp;&nbsp;s_info.map_callback.get_cb = __get_value_request_cb;
&nbsp;&nbsp;&nbsp;s_info.map_callback.add_cb = __add_value_request_cb;
&nbsp;&nbsp;&nbsp;s_info.map_callback.remove_cb = __remove_value_request_cb;
&nbsp;&nbsp;&nbsp;s_info.map_callback.set_cb = __set_value_request_cb;

&nbsp;&nbsp;&nbsp;// Initialize the map provider using the callback structure
&nbsp;&nbsp;&nbsp;int result = data_control_provider_map_register_cb(&amp;s_info.map_callback, NULL);

&nbsp;&nbsp;&nbsp;s_info.data_map = eina_hash_string_djb2_new(__data_map_free_cb);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre></li>

<li>Define the callbacks:
<ul>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">__get_value_request_cb()</span> callback is invoked when a get request is sent from the consumer:</p>
<pre class="prettyprint">
static void 
__get_value_request_cb(int request_id, data_control_h provider, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *key, void *user_data)
{
&nbsp;&nbsp;&nbsp;int count = 0;
&nbsp;&nbsp;&nbsp;// Read the data assigned to the key from the hash map
&nbsp;&nbsp;&nbsp;char **entry = __data_map_get(request_id, key, &amp;count); 

&nbsp;&nbsp;&nbsp;// Send the operation result to the consumer
&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_get_value_result(request_id, entry, count); 
}
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">__set_value_request_cb()</span> callback is invoked when a set request is sent from the consumer:</p>
<pre class="prettyprint">
static void 
__set_value_request_cb(int request_id, data_control_h provider, const char *key, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *old_value, const char *new_value, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Update the hash map; if there is a key in the hash map and 
&nbsp;&nbsp;&nbsp;it holds a value equal to old_value, the value is updated to new_value
&nbsp;&nbsp;&nbsp;__data_map_set(request_id, key, old_value, new_value); 

&nbsp;&nbsp;&nbsp;// Send the operation result to the consumer
&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_result(request_id); 
}
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">__add_value_request_cb()</span> callback is invoked when an add request is sent from the consumer:</p>
<pre class="prettyprint">
static void 
__add_value_request_cb(int request_id, data_control_h provider, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *key, const char *value, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Add a new value to a key; if a key equal to &#39;key&#39; does not exist, a new key is added
&nbsp;&nbsp;&nbsp;int count = __data_map_add(request_id, key, value); 

&nbsp;&nbsp;&nbsp;// Send the operation result to the consumer
&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_result(request_id);
}
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">__remove_value_request_cb()</span> callback is invoked when a remove request is sent from the consumer:</p>
<pre class="prettyprint">
static void 
__remove_value_request_cb(int request_id, data_control_h provider, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *key, const char *value, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Remove a value from a key; if the key becomes empty after this operation, it is removed as well
&nbsp;&nbsp;&nbsp;__data_map_remove(request_id, key, value); 

&nbsp;&nbsp;&nbsp;// Send the operation result to the consumer
&nbsp;&nbsp;&nbsp;int ret = data_control_provider_send_map_result(request_id); 
}
</pre></li></ul></li>

<li>Implement the <span style="font-family: Courier New,Courier,monospace">Eina_Hash</span> functions.
<p>The map provider part of the application uses the <span style="font-family: Courier New,Courier,monospace">Eina_Hash</span> structure to store data. Every key in the hash can hold multiple values, so a simple key-value pair is not enough. Every key has an <span style="font-family: Courier New,Courier,monospace">Eina_List</span> assigned as its data.</p>

<p>There are 5 functions that interact with the hash map, and all of them are invoked by a proper callback:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">__data_map_add</span>
<p>This function adds new data to the hash map. As mentioned before, if a key does not exist, a new key is created.</p>
<pre class="prettyprint">
static int 
__data_map_add(int request_id, const char *key, const char *value)
{
&nbsp;&nbsp;&nbsp;// Find an Eina_List assigned to the passed key
&nbsp;&nbsp;&nbsp;entry = (Eina_List *)eina_hash_find(s_info.data_map, key); 

&nbsp;&nbsp;&nbsp;if (entry) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If an Eina_List is found, a new value is added to it, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and the Eina_Hash key is modified accordingly
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Data added to the Eina_List is sorted, so the eina_hash_list_* functions cannot be used
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry = eina_list_sorted_insert(entry, __data_map_item_value_comparator_cb, strdup(value));
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If an Eina_List is not found, a new list is created
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// New key is created with the new list as its value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry = eina_list_append(NULL, strdup(value));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return eina_list_count(entry);
}
</pre></li>

<li><span style="font-family: Courier New,Courier,monospace">__get_all_keys</span>
<p>This function is a special get function. When a get request with the special <a href = "data_control_consumer_sd_mn.htm#consumer-get-all-keys">key</a> is sent from the consumer, an array of all keys in the hash map is sent back instead of a value array.</p>
<pre class="prettyprint">
static char 
**__get_all_keys(int *values_count)
{
&nbsp;&nbsp;&nbsp;*values_count = eina_hash_population(s_info.data_map);
&nbsp;&nbsp;&nbsp;char **ret = calloc(*values_count, sizeof(char *));
&nbsp;&nbsp;&nbsp;eina_hash_foreach(s_info.data_map, __get_all_keys_cb, (char **)ret);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>

<li><span style="font-family: Courier New,Courier,monospace">__data_map_get</span>
<p>This function gets an array of values held by a given key.</p>
<pre class="prettyprint">
static char 
**__data_map_get(int request_id, const char *key, int *values_count)
{
&nbsp;&nbsp;&nbsp;// If the requested key is equal to #GET_ALL_KEYS, return an array of all available keys
&nbsp;&nbsp;&nbsp;if(!__str_cmp_precise(key, GET_ALL_KEYS))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return __get_all_keys(values_count);

&nbsp;&nbsp;&nbsp;// Find an Eina_List assigned to the given key
&nbsp;&nbsp;&nbsp;entry = (Eina_List *)eina_hash_find(s_info.data_map, key);
&nbsp;&nbsp;&nbsp;if (!entry) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*values_count = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If no Eina_List is found, an error message is sent
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Note that this call automatically sets the <a href = "data_control_consumer_sd_mn.htm#consumer-callback-definitions">provider_ret</a> in the consumer callback to false
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, NO_KEY_FOUND);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Prepare an array of strings with values assigned to the given key
&nbsp;&nbsp;&nbsp;*values_count = eina_list_count(entry);
&nbsp;&nbsp;&nbsp;char **ret = calloc(*values_count, sizeof(char *));

&nbsp;&nbsp;&nbsp;EINA_LIST_FOREACH(entry, l, item)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret[index] = item;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return ret;
}
</pre></li>

<li><span style="font-family: Courier New,Courier,monospace">__data_map_set</span>
<p>This function updates the value assigned to a given key.</p>
<pre class="prettyprint">
static Eina_Bool 
__data_map_set(int request_id, const char *key, const char *old, const char *new)
{
&nbsp;&nbsp;&nbsp;// Search for the value to modify
&nbsp;&nbsp;&nbsp;Eina_List *old_data_list = __search_value(entry, key, old);

&nbsp;&nbsp;&nbsp;// Remove the found value; this is used to simplify the sorted insertion to the Eina_List
&nbsp;&nbsp;&nbsp;entry = eina_list_remove_list(entry, old_data_list);
&nbsp;&nbsp;&nbsp;if (!entry)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;entry == NULL&quot;);

&nbsp;&nbsp;&nbsp;// Insert the new value
&nbsp;&nbsp;&nbsp;entry = eina_list_sorted_insert(entry, __data_map_item_value_comparator_cb, strdup(new));

&nbsp;&nbsp;&nbsp;// Modify the key
&nbsp;&nbsp;&nbsp;if (!eina_hash_modify(s_info.data_map, key, entry)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to modify a key value pair&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return EINA_FALSE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre></li>

<li><span style="font-family: Courier New,Courier,monospace">__data_map_remove</span>
<p>This function removes the value assigned to a given key.</p>
<pre class="prettyprint">
static void 
__data_map_remove(int request_id, const char* key, const char *value)
{
&nbsp;&nbsp;&nbsp;if(eina_list_count(entry) &gt; 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry = eina_list_remove_list(entry, old_data_list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!eina_hash_modify(s_info.data_map, key, entry)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to modify a key value pair&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If a key is left empty after the value removal, it is removed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!eina_hash_del_by_key(s_info.data_map, key)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed to remove a key: %s&quot;, key);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Key [%s] removed&quot;, key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text = eina_stringshare_printf(KEY_REMOVED, key);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data_control_provider_send_error(request_id, text);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eina_stringshare_del(text);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ul>
</li></ol>

<h3>SQL Module</h3>
<p>To implement the SQL module:</p>
<ol>
<li>Define structures.
<p>The SQL module uses the following structure to hold its data:</p>
<pre class="prettyprint">
static struct 
{
&nbsp;&nbsp;&nbsp;data_control_provider_sql_cb sql_callback; // Provider callbacks
&nbsp;&nbsp;&nbsp;sqlite3 *db; // SQL structure
} s_info;
</pre>
</li>
<li>Initialize the SQL module.
<p>Assign callbacks to the callback structure to provide communication with the consumer application.</p>
<p>The SQL module uses a SQLite database to hold data. As opposed to the map module, the SQL module uses an external file to store the data so it is not lost when the application is killed.</p>

<pre class="prettyprint">
void 
sql_provider_init(void)
{
&nbsp;&nbsp;&nbsp;int result = __create_database(); // Create and open a database file

&nbsp;&nbsp;&nbsp;// Assign callback functions to the callback structure
&nbsp;&nbsp;&nbsp;s_info.sql_callback.select_cb = __select_request_cb;
&nbsp;&nbsp;&nbsp;s_info.sql_callback.insert_cb = __insert_request_cb;
&nbsp;&nbsp;&nbsp;s_info.sql_callback.delete_cb = __delete_request_cb;
&nbsp;&nbsp;&nbsp;s_info.sql_callback.update_cb = __update_request_cb;

&nbsp;&nbsp;&nbsp;// Register the callbacks
&nbsp;&nbsp;&nbsp;result = data_control_provider_sql_register_cb(&amp;s_info.sql_callback, NULL);
}
</pre>
</li>
<li>Define the callbacks:

<ul>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">__insert_request_cb()</span> callback is invoked when an insert request is sent:</p>
<pre class="prettyprint">
static void 
__insert_request_cb(int request_id, data_control_h provider, bundle *insert_data, void *user_data)
{
&nbsp;&nbsp;&nbsp;// insert_data parameter contains a list of column name - value pairs. 
&nbsp;&nbsp;&nbsp;// Check the <a href = "data_control_consumer_sd_mn.htm#consumer-sql-insert-request">consumer</a> app documentation for details
&nbsp;&nbsp;&nbsp;// Based on the values stored in the bundle, a SQL INSERT query is created
&nbsp;&nbsp;&nbsp;command = data_control_provider_create_insert_statement(provider, insert_data);

&nbsp;&nbsp;&nbsp;// New row is added to the database using standard SQLite API functions 
&nbsp;&nbsp;&nbsp;ret = sqlite3_exec(s_info.db, command, NULL, NULL, NULL);

&nbsp;&nbsp;&nbsp;inserted_row_id = sqlite3_last_insert_rowid(s_info.db);

&nbsp;&nbsp;&nbsp;// Operation result is sent back to the consumer application
&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_insert_result(request_id, inserted_row_id);
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">__delete_request_cb()</span> callback is invoked when a delete request is sent:</p>
<pre class="prettyprint">
static void 
__delete_request_cb(int request_id, data_control_h provider, const char *where, void *user_data)
{
&nbsp;&nbsp;&nbsp;// &#39;where&#39; text is used to create a SQL DELETE query
&nbsp;&nbsp;&nbsp;command = data_control_provider_create_delete_statement(provider, where);

&nbsp;&nbsp;&nbsp;// Row is deleted from the database using standard SQLite API functions
&nbsp;&nbsp;&nbsp;ret = sqlite3_exec(s_info.db, command, NULL, NULL, NULL);

&nbsp;&nbsp;&nbsp;// Operation result is sent back to the consumer application
&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_delete_result(request_id);
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">__select_request_cb()</span> callback is invoked when a select request is sent:</p>
<pre class="prettyprint">
static void
__select_request_cb(int request_id, data_control_h provider, const char **column_list,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int column_count, const char *where, const char *order, void *user_data)
{
&nbsp;&nbsp;&nbsp;// SQL SELECT query is created using the callback parameters
&nbsp;&nbsp;&nbsp;// Some of the parameters can be NULL
&nbsp;&nbsp;&nbsp;// Resulting query:
&nbsp;&nbsp;&nbsp;// SELECT column_list[0], column_list[1] .. column_list[column_count - 1] 
&nbsp;&nbsp;&nbsp;// FROM Sample_Table WHERE where ORDER BY order;

&nbsp;&nbsp;&nbsp;// If the where string is NULL, no filter is used
&nbsp;&nbsp;&nbsp;// If the order string is NULL, no sorting is applied
&nbsp;&nbsp;&nbsp;command = data_control_provider_create_select_statement(provider, column_list, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;column_count, where, order);
&nbsp;&nbsp;&nbsp;if (!command) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;command == NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;command == %s&quot;, command);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// SQL statement object is created and sent to the consumer application
&nbsp;&nbsp;&nbsp;ret = sqlite3_prepare_v2(s_info.db, command, strlen(command), &amp;sql_stmt, NULL);

&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_select_result(request_id, (void *)sql_stmt);

&nbsp;&nbsp;&nbsp;sqlite3_finalize(sql_stmt);
}
</pre>
</li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">__update_request_cb()</span> callback is invoked when an update request is sent:</p>
<pre class="prettyprint">
static void 
__update_request_cb(int request_id, data_control_h provider, bundle *update_data, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *where, void *user_data)
{
&nbsp;&nbsp;&nbsp;int ret = -1;
&nbsp;&nbsp;&nbsp;char *command = NULL;

&nbsp;&nbsp;&nbsp;// SQL query is created using a bundle structure similar to the structure used in 
&nbsp;&nbsp;&nbsp;// the add query and a where string similar to the one used in the delete query
&nbsp;&nbsp;&nbsp;// Final query looks like this:
&nbsp;&nbsp;&nbsp;// UPDATE Sample_Table SET bundle_key1 = bundle_value_1, 
&nbsp;&nbsp;&nbsp;// bundle_key1 = bundle_value_1, ..., columnN = valueN WHERE where
&nbsp;&nbsp;&nbsp;command = data_control_provider_create_update_statement(provider, update_data, where);
&nbsp;&nbsp;&nbsp;if (!command) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;command == NULL&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Generated command is then used as a SQLite query
&nbsp;&nbsp;&nbsp;ret = sqlite3_exec(s_info.db, command, NULL, NULL, NULL);

&nbsp;&nbsp;&nbsp;// Information about the database update result is sent to the consumer
&nbsp;&nbsp;&nbsp;ret = data_control_provider_send_update_result(request_id);
}
</pre>
</li>
</ul>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>


</body>
</html>
