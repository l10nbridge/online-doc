<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Calculator Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>[UI Sample] Calculator Sample Overview</h1> 
  <p>The [UI Sample] Calculator sample application demonstrates how you can implement a complex view using EFL UI components and containers.</p> 
  
  <p>It uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conform</span> and <span style="font-family: Courier New,Courier,monospace">elm_panel</span> for the view management, containers, such as <span style="font-family: Courier New,Courier,monospace">elm_grid</span> and <span style="font-family: Courier New,Courier,monospace">elm_table</span> for UI component management inside the view, and UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_button</span> and <span style="font-family: Courier New,Courier,monospace">elm_entry</span> for the content inside the view.</p>
  
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  
  <p>The following figure illustrates the main screen of the Calculator, its wireframe structure, and the UI component tree.</p>
  
    <p class="figure">Figure: [UI Sample] Calculator screen</p> 
  <p align="center"><img alt="[UI Sample] Calculator screen" src="../images/ui_calculator_sd.png" /></p>
  <p align="center"><img alt="[UI Sample] Calculator screen" src="../images/ui_calculator_tree.png" /></p>

  <p>The application opens with the calculator view.</p>
  
  <h2>Implementation</h2>
  <h3>Application Layout</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function is responsible for creating the application layout. It starts by creating a window, then adds <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> to it to decorate the window with an indicator. The window contains a grid structure for the calculator entry display and its button panel. The entry display is aligned to the top of the grid and the button panel to the bottom of the grid.</p>
 
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *grid, *panel;

&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = {0, 90, 180, 270};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;wm,rotation,changed&quot;, rotation_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;win, EEXT_CALLBACK_BACK, win_back_cb, ad);

&nbsp;&nbsp;&nbsp;ad-&gt;bg = create_bg(ad-&gt;win);
&nbsp;&nbsp;&nbsp;ad-&gt;conform = create_conform(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);

&nbsp;&nbsp;&nbsp;// Grid 
&nbsp;&nbsp;&nbsp;grid = elm_grid_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(grid, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(grid, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, grid);

&nbsp;&nbsp;&nbsp;// Entry 
&nbsp;&nbsp;&nbsp;ad-&gt;entry = create_entry(grid);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, ad-&gt;entry, 5, 5, 90, 25);

&nbsp;&nbsp;&nbsp;// Panel 
&nbsp;&nbsp;&nbsp;panel = create_panel(grid, ad);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, panel, 0, 35, 100, 65);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up 
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}</pre>

<h3>Main View</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">create_entry()</span> function creates the calculator display. Input for the display is created with calculator buttons  created in the next steps, so there is no need for the software keypad. Disable the software keypad by setting the <span style="font-family: Courier New,Courier,monospace">elm_entry_editable_set()</span> function as <span style="font-family: Courier New,Courier,monospace">false</span>. The display uses a right-aligned, 50 pt font.</p>


<pre class="prettyprint">static Evas_Object*
create_entry(Evas_Object *parent)
{
&nbsp;&nbsp;&nbsp;Evas_Object *entry;

&nbsp;&nbsp;&nbsp;entry = elm_entry_add(parent);
&nbsp;&nbsp;&nbsp;elm_entry_editable_set(entry, EINA_FALSE);
&nbsp;&nbsp;&nbsp;elm_entry_entry_set(entry, &quot;&lt;font_size=50&gt;&lt;align=right&gt;&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_show(entry);

&nbsp;&nbsp;&nbsp;return entry;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_panel()</span> function creates the calculator button panel. There are 2 sets of buttons: basic buttons that are always visible, and advanced buttons that are only visible in the landscape mode.</p>

<pre class="prettyprint">
static Evas_Object*
create_panel(Evas_Object *parent, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *panel, *grid, *content;

&nbsp;&nbsp;&nbsp;// Panel 
&nbsp;&nbsp;&nbsp;panel = elm_panel_add(parent);
&nbsp;&nbsp;&nbsp;elm_panel_orient_set(panel, ELM_PANEL_ORIENT_BOTTOM);
&nbsp;&nbsp;&nbsp;evas_object_show(panel);

&nbsp;&nbsp;&nbsp;// Grid 
&nbsp;&nbsp;&nbsp;grid = elm_grid_add(panel);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(grid, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(grid, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_content_set(panel, grid);

&nbsp;&nbsp;&nbsp;// Panel basic content 
&nbsp;&nbsp;&nbsp;ad-&gt;basic_content = create_panel_basic_content(grid, ad);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;basic_content, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;basic_content, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, ad-&gt;basic_content, 3, 3, 94, 94);

&nbsp;&nbsp;&nbsp;// Panel advanced content 
&nbsp;&nbsp;&nbsp;ad-&gt;advanced_content = create_panel_advanced_content(grid, ad);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;advanced_content, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(ad-&gt;advanced_content, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_grid_pack(grid, ad-&gt;advanced_content, -100, -100, 94, 94);

&nbsp;&nbsp;&nbsp;return panel;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_panel_basic_content()</span> function creates the calculator buttons, such as number and sign buttons. The buttons are arranged in a table structure with a 10-pixel padding.</p>

<pre class="prettyprint">
static Evas_Object*
create_panel_basic_content(Evas_Object *parent, appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *table, *button;

&nbsp;&nbsp;&nbsp;table = elm_table_add(parent);
&nbsp;&nbsp;&nbsp;elm_table_padding_set(table, 10, 10);

&nbsp;&nbsp;&nbsp;button = elm_button_add(table);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;&lt;font_size = 50&gt;C&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, clicked_c_cb, ad-&gt;entry);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, button, 0, 0, 1, 1);

&nbsp;&nbsp;&nbsp;button = elm_button_add(table);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(button, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(button, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_object_text_set(button, &quot;&lt;font_size = 50&gt;/&lt;/font_size&gt;&quot;);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(button, &quot;clicked&quot;, clicked_divide_cb, ad-&gt;entry);
&nbsp;&nbsp;&nbsp;evas_object_show(button);
&nbsp;&nbsp;&nbsp;elm_table_pack(table, button, 1, 0, 1, 1);

&nbsp;&nbsp;&nbsp;evas_object_show(table);

&nbsp;&nbsp;&nbsp;return table;
}</pre>

<p>As an example, when the user clicks the <strong>0</strong> button, the <span style="font-family: Courier New,Courier,monospace">clicked_0_cb()</span> function is called. The function adds the text in the entry display.</p>

<pre class="prettyprint">
static void
clicked_0_cb(void *data, Evas_Object *obj EINA_UNUSED, void *event_info EINA_UNUSED)
{
   Evas_Object *entry = data;
   elm_entry_entry_append(entry, &quot;&lt;font_size = 50&gt;0&lt;/font_size&gt;&quot;);
}
</pre>

<p>When the user rotates the device, the <span style="font-family: Courier New,Courier,monospace">rotation_cb()</span> function is called, which changes the layout of contents. If the new layout is in the landscape mode, the advanced content is aligned at the left side of the basic content.</p>

<pre class="prettyprint">
static void
rotation_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;int current_degree = elm_win_rotation_get(obj);

&nbsp;&nbsp;&nbsp;if (current_degree != 0 &amp;&amp; current_degree != 180) 

&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;basic_content, 45, 3, 52, 94);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;advanced_content, 3, 3, 36, 94);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;basic_content, 3, 3, 94, 94);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_grid_pack_set(ad-&gt;advanced_content, -100, -100, 94, 94);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>