<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Voice Control Sample Overview</title>  

</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Voice Control Sample Overview</h1> 

<p>The Voice Control sample application demonstrates how you can use the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__UIX__VOICE__CONTROL__MODULE.html">Voice control</a> API to initialize, deinitialize, add, and remove voice commands and retrieve information. </p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screens of the Voice Control.</p>

<p class="figure">Figure: Voice control screens</p> 
<p align="center"><img alt="Voice Control views" src="../images/vc_sample_view.png" /></p> 

<p>To register commands for voice control, click <strong>Select Command List</strong> and select the commands you want to register (command lists are shown in the second screenshot above).</p>

<p>A voice manager application (created by the device manufacturer) is used to start and stop the voice control. To start or stop the voice control, use the voice button in the quick panel (third screenshot above).</p> 

<p>After the voice control has been start from the quick panel voice button, the voice manager application is shown at the bottom of the Voice Control screen (last screenshot above).</p>

<h2>Implementation</h2>
<p>To implement the Voice Control application:</p>

<ol>
<li>Initialize voice control.
<p>To use the Voice Control library, you must initialize voice control using the <span style="font-family: Courier New,Courier,monospace;">init_vc()</span> function.</p>
<p>The function sets callback functions to receive the state change events and results from the Voice Control service. The application tries to connect to the Voice Control service for handshaking information and data using the <span style="font-family: Courier New,Courier,monospace;">vc_prepare()</span> function.</p>
<pre class="prettyprint">
static void 
__vc_service_state_changed_cb(vc_service_state_e previous, vc_service_state_e current, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Callback actions
}

static void 
__vc_result_cb(vc_result_event_e event, vc_cmd_list_h vc_cmd_list, const char* result, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Callback actions
}

static int 
init_vc(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ret = vc_initialize();
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = vc_set_result_cb(__vc_result_cb, ad);
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = vc_set_service_state_changed_cb(__vc_service_state_changed_cb, ad);
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = vc_prepare();
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Create and set the command list.
<p>To set commands, create a command list and add a command on the list. You can also remove commands from the list or change the list. When you no longer need the commands, destroy the list.</p>
<pre class="prettyprint">
static void 
__vc_create_command_list(cmd_list_index_e cmd_list_idx)
{
&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_list_create(&amp;g_cmd_list)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take action
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int i;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; MAX_COMMAND_NUM; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cmd_h cmd;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_create(&amp;cmd)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take action
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_set_command(cmd, &quot;play&quot;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cmd_destroy(cmd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_set_type(cmd, VC_COMMAND_TYPE_FOREGROUND)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cmd_destroy(cmd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_list_add(g_cmd_list, cmd)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cmd_destroy(cmd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if ( 0 != vc_set_command_list(g_cmd_list, VC_COMMAND_TYPE_FOREGROUND)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_cmd_list_destroy(g_cmd_list, true);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Check the service state.
<p>If you set the service state change callback, you can check the voice control service state: ready, recording, or processing. Based on the service state, you can change the application mode, state, and look and feel.</p>
<pre class="prettyprint">
static void 
__vc_service_state_changed_cb(vc_service_state_e previous, vc_service_state_e current, void* user_data)
{
&nbsp;&nbsp;&nbsp;// Take action
}

static int 
init_vc(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ret = vc_set_service_state_changed_cb(__vc_service_state_changed_cb, ad);
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Get a recognized result.
<p>If you want to get the recognized command, you must set a result callback function.</p>
<p>You can get both the recognized result text and a command list with command information.</p>

<pre class="prettyprint">
static void 
__vc_result_cb(vc_result_event_e event, vc_cmd_list_h vc_cmd_list, const char* result, void *user_data)
{
&nbsp;&nbsp;&nbsp;// Take action
}

static int 
init_vc(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;ret = vc_set_result_cb(__vc_result_cb, ad);
&nbsp;&nbsp;&nbsp;if (VC_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return 0;
}
</pre>
</li>

<li>Deinitialize voice control.
<p>The <span style="font-family: Courier New,Courier,monospace;">deinit_vc()</span> function is called to disconnect the service and to destroy the command list when the application is terminated. If you only want to disconnect the service, use the <span style="font-family: Courier New,Courier,monospace;">vc_unprepare()</span> function.</p>
<pre class="prettyprint">
static void 
__vc_destroy_command_list(void)
{
&nbsp;&nbsp;&nbsp;if (0 != vc_cmd_list_destroy(g_cmd_list, true)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take action
&nbsp;&nbsp;&nbsp;}
}

static void 
deinit_vc(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;__vc_destroy_command_list();

&nbsp;&nbsp;&nbsp;if (0 != vc_deinitialize()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Take action
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>