<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>[UI Sample] Gallery Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>[UI Sample] Gallery Sample Overview</h1> 
  <p>The [UI Sample] Gallery sample application demonstrates how to implement a complex view by recursive composition of standard EFL UI components and containers in a UI component hierarchy.</p> 
  
<p>It uses UI components, such as <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> and <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> for the view management, containers such as <span style="font-family: Courier New,Courier,monospace">elm_box</span> and <span style="font-family: Courier New,Courier,monospace">elm_layout</span> for UI component management inside the view. And UI components such as <span style="font-family: Courier New,Courier,monospace">elm_gengrid</span> and <span style="font-family: Courier New,Courier,monospace">elm_scroller</span> for the content inside view.</p>

  <h2>Main View</h2>
  
  <p>The following figure illustrates the main view of the [UI Sample] Gallery sample application, its wireframe structure, and the UI component tree.</p>
  
    <p class="figure">Figure: [UI Sample] Gallery screen</p> 
  <p align="center"><img alt="[UI Sample] Gallery screen" src="../images/ui_gallery_sd.png" /></p>
  <p align="center"><img alt="[UI Sample] Gallery screen" src="../images/ui_gallery_tree.png" /></p>

  <p>The <span style="font-family: Courier New,Courier,monospace">create_base_gui()</span> function is responsible for creating the application layout. It starts by creating a window, then adds <span style="font-family: Courier New,Courier,monospace">elm_conformant</span> to it to decorate the window with an indicator. <span style="font-family: Courier New,Courier,monospace">elm_naviframe</span> is added to act as a view manager of the window and provide the window title functionality. The main view is created using the <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function and added to the naviframe.</p>

 
<pre class="prettyprint">
static void
create_base_gui(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *bg = NULL;

&nbsp;&nbsp;&nbsp;// Window
&nbsp;&nbsp;&nbsp;ad-&gt;win = elm_win_util_standard_add(PACKAGE, PACKAGE);
&nbsp;&nbsp;&nbsp;elm_win_conformant_set(ad-&gt;win, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_win_autodel_set(ad-&gt;win, EINA_TRUE);

&nbsp;&nbsp;&nbsp;if (elm_win_wm_rotation_supported_get(ad-&gt;win)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int rots[4] = { 0, 90, 180, 270 };
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_win_wm_rotation_available_rotations_set(ad-&gt;win, (const int *)(&amp;rots), 4);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(ad-&gt;win, &quot;delete,request&quot;, win_delete_request_cb, NULL);

&nbsp;&nbsp;&nbsp;// Conformant
&nbsp;&nbsp;&nbsp;ad-&gt;conform = elm_conformant_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;elm_win_indicator_mode_set(ad-&gt;win, ELM_WIN_INDICATOR_SHOW);
&nbsp;&nbsp;&nbsp;elm_win_indicator_opacity_set(ad-&gt;win, ELM_WIN_INDICATOR_OPAQUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(ad-&gt;conform, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_win_resize_object_add(ad-&gt;win, ad-&gt;conform);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;conform);

&nbsp;&nbsp;&nbsp;// Indicator BG
&nbsp;&nbsp;&nbsp;bg = elm_bg_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;elm_object_style_set(bg, &quot;indicator/headerbg&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(ad-&gt;conform, &quot;elm.swallow.indicator_bg&quot;, bg);
&nbsp;&nbsp;&nbsp;evas_object_show(bg);

&nbsp;&nbsp;&nbsp;// Naviframe
&nbsp;&nbsp;&nbsp;ad-&gt;nf = create_main_view(ad);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;nf);

&nbsp;&nbsp;&nbsp;// Show the window after the base GUI is set up
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;win);
}</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_main_view()</span> function creates the content of the main view. It consists of a naviframe containing a <span style="font-family: Courier New,Courier,monospace">gengrid</span>. This function returns a naviframe object pointer for content set to conformant.</p>



<pre class="prettyprint">static Evas_Object*
create_main_view(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Object_Item *nf_it;
&nbsp;&nbsp;&nbsp;Evas_Object *gengrid;

&nbsp;&nbsp;&nbsp;ad-&gt;nf = elm_naviframe_add(ad-&gt;conform);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(ad-&gt;nf, EEXT_CALLBACK_BACK, eext_naviframe_back_cb, ad);

&nbsp;&nbsp;&nbsp;gengrid = create_gengrid(ad);
&nbsp;&nbsp;&nbsp;nf_it = elm_naviframe_item_push(ad-&gt;nf, &quot;Gallery&quot;, NULL, NULL, gengrid, NULL);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_pop_cb_set(nf_it, nf_it_pop_cb, ad);

&nbsp;&nbsp;&nbsp;return ad-&gt;nf;
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_gengrid()</span> function creates the <span style="font-family: Courier New,Courier,monospace">gengrid</span> that is added in the main view (naviframe). The <span style="font-family: Courier New,Courier,monospace">gengrid</span> element&#39;s minimum size is the same as the screen width.
Each <span style="font-family: Courier New,Courier,monospace">gengrid</span> element can be resized to support different display resolutions using the <span style="font-family: Courier New,Courier,monospace">elm_gengrid_item_size_set()</span> function.</p>

<pre class="prettyprint">
static Evas_Object*
create_gengrid(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Elm_Gengrid_Item_Class *gic;
&nbsp;&nbsp;&nbsp;Evas_Object *gengrid;
&nbsp;&nbsp;&nbsp;char buf[PATH_MAX];
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;gengrid = elm_gengrid_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(gengrid, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(gengrid, EVAS_HINT_FILL, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;elm_gengrid_item_size_set(gengrid, 110 * elm_config_scale_get(), 110 * elm_config_scale_get());
&nbsp;&nbsp;&nbsp;elm_gengrid_align_set(gengrid, 0.5, 0.1);

&nbsp;&nbsp;&nbsp;gic = elm_gengrid_item_class_new();
&nbsp;&nbsp;&nbsp;gic-&gt;item_style = &quot;default&quot;;
&nbsp;&nbsp;&nbsp;gic-&gt;func.text_get = NULL;
&nbsp;&nbsp;&nbsp;gic-&gt;func.content_get = gengrid_content_get_cb;
&nbsp;&nbsp;&nbsp;gic-&gt;func.state_get = NULL;
&nbsp;&nbsp;&nbsp;gic-&gt;func.del = NULL;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; IMAGE_MAX; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;itemdata_s *id = calloc(sizeof(itemdata_s), 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s/%d.jpg&quot;, ICON_DIR, i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;index = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;path = eina_stringshare_add(buf);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id-&gt;ad = ad;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_gengrid_item_append(gengrid, gic, id, gengrid_it_cb, id);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;evas_object_show(gengrid);

&nbsp;&nbsp;&nbsp;return gengrid;
}
</pre>

<h2>Image Viewer</h2>

<p>The following figure illustrates the Image Viewer view, its wireframe structure, and the UI component tree.</p>

<p class="figure">Figure: Image viewer view</p> 
  <p align="center"><img alt="Image viewer view" src="../images/ui_imageviewer_sd.png" /></p>
  <p align="center"><img alt="Image viewer view" src="../images/ui_imageviewer_tree.png" /></p>
 
<p>When the user clicks a <span style="font-family: Courier New,Courier,monospace">gengrid</span> item, the main view changes to the Image Viewer, which shows the selected image. The view is created using the <span style="font-family: Courier New,Courier,monospace">create_page()</span> function and added to the naviframe.</p>

<pre class="prettyprint">
static void
gengrid_it_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout;
&nbsp;&nbsp;&nbsp;itemdata_s *id = data;
&nbsp;&nbsp;&nbsp;appdata_s *ad = id-&gt;ad;
&nbsp;&nbsp;&nbsp;Evas_Object *nf = ad-&gt;nf;

&nbsp;&nbsp;&nbsp;layout = create_page(nf, id-&gt;index);
&nbsp;&nbsp;&nbsp;elm_naviframe_item_push(nf, &quot;Image Viewer&quot;, NULL, NULL, layout, NULL);

&nbsp;&nbsp;&nbsp;btn = elm_button_add(nf);
&nbsp;&nbsp;&nbsp;elm_object_text_set(btn, &quot;Slide Start&quot;);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(nf, &quot;toolbar&quot;, btn);
&nbsp;&nbsp;&nbsp;evas_object_show(btn);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(btn, &quot;clicked&quot;, btn_clicked_cb, ad);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">create_page()</span> function creates the content of the view by composing a scroller structure that contains the screen elements. The scroller contains a box layout with the images.</p>

<pre class="prettyprint">
static Evas_Object*
create_page(Evas_Object *parent, int page_num)
{
&nbsp;&nbsp;&nbsp;Evas_Object *layout, *box, *page_layout, *img;
&nbsp;&nbsp;&nbsp;char buf[PATH_MAX];
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;pagedata_s *pd = calloc(1, sizeof(pagedata_s));
&nbsp;&nbsp;&nbsp;pd-&gt;slide_right = EINA_TRUE;
&nbsp;&nbsp;&nbsp;ad-&gt;pd = pd;

&nbsp;&nbsp;&nbsp;// Create Layout
&nbsp;&nbsp;&nbsp;layout = elm_layout_add(parent);
&nbsp;&nbsp;&nbsp;elm_layout_theme_set(layout, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(layout, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(layout);

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(layout, EVAS_CALLBACK_RESIZE, layout_resize_cb, pd);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(layout, EVAS_CALLBACK_DEL, layout_del_cb, pd);

&nbsp;&nbsp;&nbsp;// Create Scroller
&nbsp;&nbsp;&nbsp;pd-&gt;scroller = elm_scroller_add(layout);
&nbsp;&nbsp;&nbsp;elm_scroller_loop_set(pd-&amp;gt;scroller, EINA_FALSE, EINA_FALSE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(pd-&amp;gt;scroller, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(pd-&gt;scroller, EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_scroller_policy_set(pd-&gt;scroller, ELM_SCROLLER_POLICY_OFF, ELM_SCROLLER_POLICY_OFF);
&nbsp;&nbsp;&nbsp;elm_scroller_page_scroll_limit_set(pd-&gt;scroller, 1, 0);
&nbsp;&nbsp;&nbsp;elm_object_scroll_lock_y_set(pd-&gt;scroller, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_part_content_set(layout, &quot;elm.swallow.content&quot;, pd-&gt;scroller);

&nbsp;&nbsp;&nbsp;// Create Box
&nbsp;&nbsp;&nbsp;box = elm_box_add(pd-&gt;scroller);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(box, EINA_TRUE);
&nbsp;&nbsp;&nbsp;elm_object_content_set(pd-&gt;scroller, box);
&nbsp;&nbsp;&nbsp;evas_object_show(box);

&nbsp;&nbsp;&nbsp;// Create Pages
&nbsp;&nbsp;&nbsp;for (i = 0; i &gt; IMAGE_MAX; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;page_layout = elm_layout_add(box);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_layout_theme_set(page_layout, &quot;layout&quot;, &quot;application&quot;, &quot;default&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(page_layout, 0, 0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(page_layout, 0, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(page_layout);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;img = elm_image_add(page_layout);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;snprintf(buf, sizeof(buf), &quot;%s/%d.jpg&quot;, ICON_DIR, i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_image_file_set(img, buf, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_show(img);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd-&gt;page[i] = img;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_part_content_set(page_layout, &quot;elm.swallow.content&quot;, img);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_box_pack_end(box, page_layout);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;pd-&gt;current_page = page_num;
&nbsp;&nbsp;&nbsp;elm_scroller_page_show(pd-&gt;scroller, pd-&gt;current_page, 0);

&nbsp;&nbsp;&nbsp;return layout;
}

</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">layout_resize_cb()</span> callback is called when the layout is resized; in this example, at the layout drawing time when each page size is set. To do this, get the width and height of the layout using the <span style="font-family: Courier New,Courier,monospace">evas_object_geometry_get()</span> function and set the size for each page object.</p>

<pre class="prettyprint">
static void
layout_resize_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;pagedata_s *pd = data;
&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;int i;

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, NULL, NULL, &amp;w, &amp;h);

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; IMAGE_MAX; i++) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(pd-&gt;page[i], w, h);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;elm_scroller_page_size_set(pd-&gt;scroller, w, h);
&nbsp;&nbsp;&nbsp;elm_scroller_page_show(pd-&gt;scroller, pd-&gt;current_page, 0);
}
</pre>
 
<p>The <span style="font-family: Courier New,Courier,monospace">btn_clicked_cb()</span> callback function is called when the button is clicked; in this example, this button works like a switch for the slide show. If the <span style="font-family: Courier New,Courier,monospace">slide_timer</span> has a <span style="font-family: Courier New,Courier,monospace">null</span> value, add a timer for the callback function which is called in at specific time intervals (<span style="font-family: Courier New,Courier,monospace">SLIDE_INTERVAL</span>) using the <span style="font-family: Courier New,Courier,monospace">ecore_timer_add()</span> function, and the button text changes. Otherwise, the <span style="font-family: Courier New,Courier,monospace">timer_del()</span> callback function is called and button text changes back to the original value.</p>

<pre class="prettyprint">
static void
btn_clicked_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;pagedata_s *pd = ad-&gt;pd
&nbsp;&nbsp;&nbsp;const char *btn_text;

&nbsp;&nbsp;&nbsp;btn_text = elm_object_text_get(obj);

&nbsp;&nbsp;&nbsp;if (pd-&gt;slide_timer) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ecore_timer_del(pd-&gt;slide_timer);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd-&gt;slide_timer = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(obj, &quot;Slide Start&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd-&gt;slide_timer = ecore_timer_add(SLIDE_INTERVAL, slide_cb, pd);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_object_text_set(obj, &quot;Slide Stop&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">slide_cb()</span> callback function is called periodically (<span style="font-family: Courier New,Courier,monospace">SLIDE_INTERVAL</span>). This callback function gets the state of the page number and slide direction. Then the page is changed by the <span style="font-family: Courier New,Courier,monospace">elm_scroller_page_bring_in()</span> function.</p>

<pre class="prettyprint">
static Eina_Bool
slide_cb(void *data)
{
&nbsp;&nbsp;&nbsp;pagedata_s *pd = data;
&nbsp;&nbsp;&nbsp;int page_no;

&nbsp;&nbsp;&nbsp;elm_scroller_current_page_get(pd-&gt;scroller, &amp;page_no, NULL);

&nbsp;&nbsp;&nbsp;if (page_no == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd-&gt;slide_right = EINA_TRUE;

&nbsp;&nbsp;&nbsp;if (page_no == IMAGE_MAX -1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pd-&gt;slide_right = EINA_FALSE;

&nbsp;&nbsp;&nbsp;if (pd-&gt;slide_right)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_scroller_page_bring_in(pd-&gt;scroller, page_no + 1, 0);
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_scroller_page_bring_in(pd-&gt;scroller, page_no - 1, 0);

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>