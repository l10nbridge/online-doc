<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>SensorApp Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>SensorApp Sample Overview</h1> 

<p>The SensorApp sample application demonstrates how you can retrieve data from various Tizen sensor types, such as acceleration, device orientation, and gravity sensors, using the Tizen Sensor API.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screens of the SensorApp.</p>
  
<p class="figure">Figure: SensorApp screens</p> 
<p align="center"><img alt="Sensor List view" src="../images/sensorapp_list.png" /> <img alt="Sensor Data view with a vector chart" src="../images/sensorapp_vectorchart.png" /> <img alt="Sensor Data view with pie charts" src="../images/sensorapp_piecharts.png" /></p> 

<p>The application opens with a list of different sensors. Click a sensor type to view different types of sensor data.</p>

<h2>Source Files</h2>

<p>You can create and view the sample application project including the source files in the IDE.</p>
<table>
<caption>Table: Source files</caption>
<tbody>
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
	 <tr> 
     <td colspan="2"><strong>General</strong></td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">main.c</span></td> 
     <td>Provides an entry point to SensorApp. Creates and launches the application instance.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">main-app.c</span></td> 
     <td>Manages the application life-cycle. Creates the application main window, naviframe, and sensor list view.</td> 
	</tr>
	 <tr> 
     <td colspan="2"><strong>Utils</strong></td> 
	 </tr>
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">color-utils.h</span></td> 
     <td>Provides convenient macros for colors stored in integer.</td> 
	</tr>
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">logger.h</span></td> 
     <td>Provides convenient macros for writing log messages.</td> 
	</tr>
	 <tr> 
     <td colspan="2"><strong>Model</strong></td> 
	 </tr>
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-info.h</span></td> 
     <td>Defines data types describing various sensors.</td> 
	</tr><tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-list.c</span></td> 
     <td>Defines the sensor list provided by SensorApp.</td> 
	</tr><tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-magnetic.c</span></td> 
     <td>Defines the magnetic sensor strength calculation algorithm.</td> 
	</tr>
	 <tr> 
     <td colspan="2"><strong>View</strong></td> 
	 </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-angle-chart.c</span></td> 
     <td>Draws pie charts for representing angle values.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-data-chart.c</span></td> 
     <td>Defines basic chart drawing functionality.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-data-chart-private.h</span></td> 
     <td>Defines data chart private members for use in vector and angle charts.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-data-view.c</span></td> 
     <td>Provides the sensor data view for displaying data retrieved from sensors and their graphical representation.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-list-view.c</span></td> 
     <td>Provides the sensor list view.</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">sensor-vector-chart.c</span></td> 
     <td>Draws a vector chart for representing vector values using arrows (for X and Y and a circle (for Z).</td> 
	</tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace;">window.c</span></td> 
     <td>Provides the application main window with a background and conformant.</td> 
	</tr>
</tbody>
</table>

<h2>Implementation</h2>
<p>To implement the SensorApp:</p>
<ol>
<li>Include the Sensor API:

<pre class="prettyprint">
#include &lt;sensor.h&gt;
</pre>
</li>

<li>Retrieve the sensor handle and hardware information.
<p>The <span style="font-family: Courier New,Courier,monospace;">sensor_list_init()</span> function in the <span style="font-family: Courier New,Courier,monospace;">sensor-list.c</span> file retrieves the sensor handle and hardware information and stores them in the <span style="font-family: Courier New,Courier,monospace;">sensor_info</span> array. The retrieved information, such as sensor range and resolution, is later used to display the sensor data properly.</p>

<pre class="prettyprint">
void 
sensor_list_init()
{
&nbsp;&nbsp;&nbsp;sensor_info *info = sensors;
&nbsp;&nbsp;&nbsp;sensor_info *end = info + sensor_count;
&nbsp;&nbsp;&nbsp;for (; info != end; ++info)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float resolution = 1.0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve sensor handle using sensor type
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_default_sensor(info-&gt;type, &amp;info-&gt;sensor);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve sensor minimal and maximal values
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_min_range(info-&gt;sensor, &amp;info-&gt;value_min);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_max_range(info-&gt;sensor, &amp;info-&gt;value_max);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Retrieve sensor resolution
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_get_resolution(info-&gt;sensor, &amp;resolution);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">&lt;sensor-info.h&gt;</span> header file defines a structure for storing information about the sensor that is used to display the sensor list and sensor data.</p>

<pre class="prettyprint">
struct 
_sensor_info
{
&nbsp;&nbsp;&nbsp;sensor_h sensor; // Sensor handle
&nbsp;&nbsp;&nbsp;sensor_type_e type; // Sensor type
&nbsp;&nbsp;&nbsp;sensor_unit_e units; // Value measurement units

&nbsp;&nbsp;&nbsp;const char *name; // Sensor display name
&nbsp;&nbsp;&nbsp;const char **value_names; // Value names array of value_count size
&nbsp;&nbsp;&nbsp;int value_count; // Values count

&nbsp;&nbsp;&nbsp;float value_min; // Minimal value
&nbsp;&nbsp;&nbsp;float value_max; // Maximal value
};
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace;">sensor-list.c</span> file defines the sensor list array for storing information about each sensor.</p>

<pre class="prettyprint">
static sensor_info 
sensors[] =
{
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.type = SENSOR_ACCELEROMETER,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.units = SENSOR_UNIT_METRE_PER_SECOND_SQUARED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.name = &quot;Acceleration&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value_names = axes,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.value_count = 3,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.axes = {-1, 1, 1}
&nbsp;&nbsp;&nbsp;},
}
</pre>
</li>

<li>Check sensor availability.
<p>The <span style="font-family: Courier New,Courier,monospace;">sensor-list-view.c</span> file creates and fills <span style="font-family: Courier New,Courier,monospace;">elm_list</span> using the sensor list provided by the <span style="font-family: Courier New,Courier,monospace;">sensor-list.c</span> file. While filling the sensor list, the <span style="font-family: Courier New,Courier,monospace;">_list_view_fill()</span> function checks whether each sensor in the list is available on the device using the <span style="font-family: Courier New,Courier,monospace;">sensor_is_supported()</span> function.</p>

<pre class="prettyprint">
static void 
_list_view_fill(list_view *view)
{
&nbsp;&nbsp;&nbsp;unsigned count = 0;
&nbsp;&nbsp;&nbsp;const sensor_info *item = sensor_list_get(&amp;count);
&nbsp;&nbsp;&nbsp;const sensor_info *end = item + count;

&nbsp;&nbsp;&nbsp;RETM_IF(!item, &quot;item is NULL&quot;);
&nbsp;&nbsp;&nbsp;for (; item != end; ++item)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool is_supported = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Check whether sensor is supported by device
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_is_supported(item-&gt;type, &amp;is_supported);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (is_supported)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(view-&gt;list, item-&gt;name, NULL, NULL, _list_view_sel_cb, item);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>When a sensor is selected, the <span style="font-family: Courier New,Courier,monospace;">_list_view_sel_cb()</span> function navigates to the sensor data view passing the selected sensor information.</p>

<pre class="prettyprint">
static void 
_list_view_sel_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;sensor_info *item = data;

&nbsp;&nbsp;&nbsp;sensor_data_view_create(view-&gt;navi, item);
}
</pre>
</li>

<li>Receive sensor data.
<p>To start receiving sensor data, the <span style="font-family: Courier New,Courier,monospace;">_data_view_sensor_start()</span> function registers a sensor listener, sets the sensor event callback, and starts the sensor.</p>

<pre class="prettyprint">
static void 
_data_view_sensor_start(data_view *view)
{
&nbsp;&nbsp;&nbsp;sensor_error_e err = SENSOR_ERROR_NONE;
&nbsp;&nbsp;&nbsp;err = sensor_create_listener(view-&gt;sensor_info-&gt;sensor, &amp;view-&gt;sensor_listener);
&nbsp;&nbsp;&nbsp;RETM_IF(err != SENSOR_ERROR_NONE, &quot;sensor_create_listener() failed(%d)&quot;, err);
&nbsp;&nbsp;&nbsp;sensor_listener_set_event_cb(view-&gt;sensor_listener, SENSOR_INTERVAL, _data_view_sensor_cb, view);
&nbsp;&nbsp;&nbsp;sensor_listener_start(view-&gt;sensor_listener);
}
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace;">_data_view_sensor_cb()</span> sensor event callback is called, the <span style="font-family: Courier New,Courier,monospace;">_data_view_value_items_update()</span> function displays the received sensor data in genlist items and updates the chart, if necessary.</p>

<pre class="prettyprint">
static void 
_data_view_sensor_cb(sensor_h sensor, sensor_event_s *sensor_data, void *user_data)
{
&nbsp;&nbsp;&nbsp;data_view *view = user_data;

&nbsp;&nbsp;&nbsp;_data_view_value_items_update(view, sensor_data-&gt;values);
&nbsp;&nbsp;&nbsp;_data_view_extra_items_update(view, sensor_data-&gt;values);
}

static void 
_data_view_value_items_update(data_view *view, float *values)
{
&nbsp;&nbsp;&nbsp;bool update_chart = false;

&nbsp;&nbsp;&nbsp;// Update genlist items with values received from the sensor
&nbsp;&nbsp;&nbsp;for (; item != end; ++item, ++value)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (item-&gt;value != *value)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Chart MUST be updated if any value has changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;update_chart = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item-&gt;value = *value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Update genlist item part that displays value
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_genlist_item_fields_update(item-&gt;obj_item, PART_VALUE, ELM_GENLIST_ITEM_FIELD_TEXT);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;// Update chart if necessary
&nbsp;&nbsp;&nbsp;if (view-&gt;chart &amp;&amp; update_chart)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sensor_data_chart_update(view-&gt;chart, view-&gt;sensor_info-&gt;value_range,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view-&gt;sensor_info-&gt;axes, values, data_view_item_colors,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view-&gt;sensor_info-&gt;value_count);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Stop the sensor.
<p>To stop receiving sensor data when the sensor data view is destroyed, the <span style="font-family: Courier New,Courier,monospace;">_data_view_destroy_cb()</span> function calls the <span style="font-family: Courier New,Courier,monospace;">sensor_listener_stop()</span> function and then destroys the listener using the <span style="font-family: Courier New,Courier,monospace;">sensor_destroy_listener()</span> function.</p>

<pre class="prettyprint">
static void 
_data_view_destroy_cb(void *data, Evas *e, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;sensor_listener_stop(view-&gt;sensor_listener);
&nbsp;&nbsp;&nbsp;sensor_destroy_listener(view-&gt;sensor_listener);
}
</pre>

</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>