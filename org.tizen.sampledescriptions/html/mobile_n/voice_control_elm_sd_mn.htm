<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Voice Control for EFL Components Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Voice Control for EFL Components Sample Overview</h1> 

<p>The Voice Control for EFL Components sample application demonstrates how you can register voice commands for EFL-supported UI components. The voice commands allow the user to interact with visible UI components inside the application with their voice. The Voice Control elementary library recognizes spoken commands from registered UI components.</p>

<p>You do not need to consider how to recognize voice commands or start and stop the recognition process. A preloaded voice recognition application handles the process automatically. You only need to set the command and hint on every EFL elementary component on which you want to use the voice command.</p>

<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The following figure illustrates the main screen of the Voice Control for EFL Components. On the right side, the application screen has the Voice Control elementary features enabled. When the screen is updated, any UI components that have a registered command and hint are shown with a voice tooltip (hint). When the user speaks the hint, the callback function related to the UI component is executed.</p>

<p class="figure">Figure: Voice Control for EFL Components screen</p> 
<p align="center"><img alt="Application view" src="../images/vc-elm-sample-screenshot.png" /> <img alt="Application view" src="../images/vc-elm-sample-screenshot_hints.png" /></p> 

<h2>Implementation</h2>

<p>To implement the Voice Control elementary application:</p>
<ol>
<li>Create the layout for the application.
<p>For this sample application, the applied native components include a button, checkbox, genlist, toolbar, and slider. The <span style="font-family: Courier New,Courier,monospace;">appdata_s</span> structure and some global values have information for implementing those components. This sample concentrates on how to use the Voice Control elementary; for more information on native UI component usage, see the <a href="ui_components_sd_mn.htm">UI Components</a> sample.</p>
</li>


<li>Include the <span style="font-family: Courier New,Courier,monospace">&lt;voice_control_elm.h&gt;</span> header file in your application:
<pre class="prettyprint">
#include &lt;voice_control_elm.h&gt;
</pre>
</li>


<li>Initialize the Voice Control elementary library with the <span style="font-family: Courier New,Courier,monospace">vc_elm_initialize()</span> function:
<pre class="prettyprint">
static bool 
app_create(void *data)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;ret = vc_elm_initialize();
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>


<li>Create a handle for each UI component for which you want to set a command and hint. Use the <span style="font-family: Courier New,Courier,monospace">vc_elm_create_object()</span> function to create a handle for Evas_Objects, and the <span style="font-family: Courier New,Courier,monospace">vc_elm_create_item()</span> function for Elm_Object_Items.
<pre class="prettyprint">
static vc_elm_h first_view[7];
static vc_elm_h tabbar_view[2];

static Evas_Object*
create_basic(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;Evas_Object *button; 
	
&nbsp;&nbsp;&nbsp;// Creating Evas_Object button
&nbsp;&nbsp;&nbsp;button = elm_button_add(ad&gt;>win);
&nbsp;&nbsp;&nbsp;ret = vc_elm_create_object(button, &amp;first_view[0]);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}

static Evas_Object*
create_toolbar(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;int ret;
&nbsp;&nbsp;&nbsp;Evas_Object *toolbar;
&nbsp;&nbsp;&nbsp;Elm_Object_Item *it;

&nbsp;&nbsp;&nbsp;// Creating Elm_Object_Item toolbar
&nbsp;&nbsp;&nbsp;toolbar = elm_toolbar_add(ad-&gt;nf);
&nbsp;&nbsp;&nbsp;it = elm_toolbar_item_append(toolbar, NULL, &quot;First&quot;, toolbar_it_cb, ad);
&nbsp;&nbsp;&nbsp;ret = vc_elm_create_item(it, &amp;tabbar_view[0]);
&nbsp;&nbsp;&nbsp;if (VC_ELM_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Use the handle created for a specific UI component to set a command the user must speak to perform actions on the UI component:

<pre class="prettyprint">
static vc_elm_h first_view[7];
static vc_elm_h tabbar_view[2];

static Evas_Object*
create_basic(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;Evas_Object *button; 
	
&nbsp;&nbsp;&nbsp;// Creating Evas_Object button
&nbsp;&nbsp;&nbsp;button = elm_button_add(ad-&gt;win);
&nbsp;&nbsp;&nbsp;vc_elm_create_object(button, &amp;first_view[0]);
&nbsp;&nbsp;&nbsp;vc_elm_set_command(first_view[0], &amp;first_view_cmd[0]);

</pre>
</li>
<li>To show the command on the screen as a tooltip, set a hint (tooltip) for the UI component:

<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;vc_elm_set_command_hint(first_view[0], &amp;first_view_cmd[0]);
</pre>
</li>
<li>Set the hint direction and offset (X and Y coordinates).
<p>By default, the hint tooltip is shown so that it does not cover the underlying UI component and does not intersect with other hints.</p>
<pre class="prettyprint">
&nbsp;&nbsp;&nbsp;vc_elm_set_command_hint_direction(first_view[0], VC_ELM_DIRECTION_CENTER);
}
</pre>
</li>

<li>When voice control is no longer needed, destroy the handle and deinitialize the library:
<pre class="prettyprint">
static void 
nf_back_cb(void *data, Evas_Object *obj, void *event_info)
{
&nbsp;&nbsp;&nbsp;int index;

&nbsp;&nbsp;&nbsp;for (index = 0; index &lt; 7; ++index);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vc_elm_destroy(first_view[index]);
}

static void 
app_terminate(void *data) 
{
&nbsp;&nbsp;&nbsp;vc_elm_deinitialize();
}
</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
