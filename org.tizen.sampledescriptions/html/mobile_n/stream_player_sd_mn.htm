<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>Stream-player Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation"></div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>


	<h1>Stream-player Sample Overview</h1>
<p>The Stream-player sample application demonstrates how you can play audio and video files as well as stream media files from the Web using the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__MEDIA__PLAYER__MODULE.html">Player</a> API.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the Stream-player.</p>
<p class="figure">Figure: Stream-player screen</p>
<p align="center">
	<img alt="Stream-player screen" src="../images/stream_player_application_view.png" />
</p>

<p>The application opens with the main screen. To play a file, select it using the applicable buttons on the toolbar at the top of the screen, and click the <strong>Play</strong> icon button at the bottom.</p>

<p>The application user interface consists of a single view divided into following sections:</p>
	<ul>
		 <li>Toolbar area: Allows the user to choose a file to be played, display information about the file, or capture a screenshot from the played video.</li>
		<li>Playback options area (combination of progress and button areas): Allows the user to set the play, pause, and stop options as well as set the volume level, mute mode, and looping mode.</li>
		<li>Display or album art area: The played video or album art of a music file is displayed here. If the music file does not provide any album art, a musical note image is displayed instead.</li>

	</ul>


<p class="figure">Figure: Stream-player layout structure</p>
<p align="center">
	<img alt="Stream-player layout structure" src="../images/stream_player_layout_structure.png" />
</p>

<p>The application workflow can be divided into the following pipelines:</p>
	<ul>
		<li>Application initialization</li>
		<li>Local file playback</li>
		<li>Online file playback</li>
	</ul>

<p class="figure">Figure: Stream-player workflow</p>
<p align="center">
	<img alt="Stream-player workflow" src="../images/stream_player_application_workflow.png" />
</p>

<h2>Prerequisites</h2>
<p>To ensure proper application execution, the following privileges must be set:</p>
	<ul>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.get</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediastorage</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/internet</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.set</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/content.write</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/appmanager.launch</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.profile</span></li>
		<li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/externalstorage</span></li>
	</ul>


<h2>Implementation</h2>
<h3>Type Definitions</h3>
<p> The <span style="font-family: Courier New,Courier,monospace">view_info_s</span> structure contains references to objects created by the view module:</p>
<pre class="prettyprint">
struct 
view_info_s 
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;
&nbsp;&nbsp;&nbsp;Evas_Object *conform;
&nbsp;&nbsp;&nbsp;Evas_Object *grid;
&nbsp;&nbsp;&nbsp;Evas_Object *button_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *bottom_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *pause_play_btn;
&nbsp;&nbsp;&nbsp;Evas_Object *toolbar;
&nbsp;&nbsp;&nbsp;Evas_Object *progress_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *seek_slider;
&nbsp;&nbsp;&nbsp;Evas_Object *buffer_progress_label;
&nbsp;&nbsp;&nbsp;Evas_Object *sound_panel;
&nbsp;&nbsp;&nbsp;Evas_Object *volume_slider;
&nbsp;&nbsp;&nbsp;Evas_Object *mute_toggle;
&nbsp;&nbsp;&nbsp;Evas_Object *display;
&nbsp;&nbsp;&nbsp;Evas_Object *album_art;
&nbsp;&nbsp;&nbsp;Evas_Object *current_popup;
&nbsp;&nbsp;&nbsp;Eina_Bool play_btn_play_mode_on;
&nbsp;&nbsp;&nbsp;Eina_Bool sound_panel_visible;
&nbsp;&nbsp;&nbsp;int found_storage_id;
&nbsp;&nbsp;&nbsp;Eina_Stringshare *video_path;
&nbsp;&nbsp;&nbsp;Eina_Stringshare *audio_path;
&nbsp;&nbsp;&nbsp;Eina_Stringshare *stream_uri;
&nbsp;&nbsp;&nbsp;Eina_Bool use_stream_album_art;
&nbsp;&nbsp;&nbsp;Ecore_Timer *progress_timer;
&nbsp;&nbsp;&nbsp;Ecore_Timer *buffer_progress_display_timer;
};
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">player_s</span> structure contains the objects used in the model:</p>
<pre class="prettyprint">
struct 
player_s 
{
&nbsp;&nbsp;&nbsp;player_h player;
&nbsp;&nbsp;&nbsp;Evas_Object *display;
&nbsp;&nbsp;&nbsp;struct player_callback_s callbacks;
};
</pre>


<p>The <span style="font-family: Courier New,Courier,monospace">player_callback_s</span> structure contains pointers to callback functions used to send information from the model to the view:</p>

<pre class="prettyprint">
struct 
player_callback_s 
{
&nbsp;&nbsp;&nbsp;// Invoked when the player&#39;s state changes
&nbsp;&nbsp;&nbsp;Player_Status_Changed_cb_t player_status_changed_cb;
&nbsp;&nbsp;&nbsp;// Invoked when there is a change in the playback progress, such as after the user moves the seek slider
&nbsp;&nbsp;&nbsp;Player_Progress_Changed_cb_t player_progress_changed_cb;
&nbsp;&nbsp;&nbsp;// Invoked when the playback ends
&nbsp;&nbsp;&nbsp;// Function is not invoked when the loop mode is used
&nbsp;&nbsp;&nbsp;Player_Progress_End_cb_t player_progress_end_cb;
&nbsp;&nbsp;&nbsp;// Invoked when a screenshot is taken
&nbsp;&nbsp;&nbsp;Player_Screen_cb_t player_screen_cb;
&nbsp;&nbsp;&nbsp;// Invoked when a text message must be displayed, such as an error popup
&nbsp;&nbsp;&nbsp;Player_Message_cb_t player_msg_cb;
&nbsp;&nbsp;&nbsp;// Invoked when an online file buffer progress changes
&nbsp;&nbsp;&nbsp;Player_Buffer_progress_cb_t player_buffer_progress_cb;
};
</pre>

<h3>Application Initialization</h3>
<p>The entire application life-cycle is implemented in the <span style="font-family: Courier New,Courier,monospace">main.c</span> file, using the common Tizen application structure:</p>

<pre class="prettyprint">
int 
main(int argc, char *argv[])
{
&nbsp;&nbsp;&nbsp;int ret = 0;

&nbsp;&nbsp;&nbsp;ui_app_lifecycle_callback_s event_callback = {0,};
&nbsp;&nbsp;&nbsp;app_event_handler_h handlers[5] = {NULL,};

&nbsp;&nbsp;&nbsp;event_callback.create = __app_create;
&nbsp;&nbsp;&nbsp;event_callback.terminate = __app_terminate;

&nbsp;&nbsp;&nbsp;ui_app_add_event_handler(&amp;handlers[APP_EVENT_LANGUAGE_CHANGED], 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;APP_EVENT_LANGUAGE_CHANGED, __ui_app_lang_changed, NULL);

&nbsp;&nbsp;&nbsp;ret = ui_app_main(argc, argv, &amp;event_callback, NULL);
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>

<p>The Stream-player application initialization is done within the <span style="font-family: Courier New,Courier,monospace">__app_create()</span> callback function:</p>
<ul><li>The <span style="font-family: Courier New,Courier,monospace">player_model_init()</span> function is responsible for the model&#39;s initialization</li>
<li>The <span style="font-family: Courier New,Courier,monospace">view_create_base_gui()</span> function is used to initialize the view module.</li>
</ul> 
<p>On the application&#39;s termination, the <span style="font-family: Courier New,Courier,monospace">__app_terminate()</span> callback function is invoked, and all resources allocated within the model are freed.</p>


<h3 id="view">View</h3>

<p>The entire application UI is implemented using Elementary components and containers. As mentioned above, the layout is divided into the following sections:</p>
<ul>
   <li>Toolbar section</li>
   <li>Display section</li>
   <li>Playback options section</li>
</ul>



<table>
	<caption>Table: Base view creation code snippets and figures</caption>
	<tbody>
		<tr>
			<th>Description</th>
			<th>Code snippet</th>
			<th>Figure</th>
		</tr>

		<tr>
			<td>The toolbar section is created using the <span style="font-family: Courier New,Courier,monospace">__create_toolbar()</span> function. 
			<p>The created object is an <span style="font-family: Courier New,Courier,monospace">Elm_Toolbar</span> with 5 appended items (see the figure on the right), each with a different callback function assigned to be invoked when the item is tapped. The functions provide the user access to both video and audio files as well as the ability to stream online files. The last 2 items allow the user to capture a screenshot of the displayed video and display information about current file.</p></td>
			<td>
				<pre class="prettyprint">
static Eina_Bool 
__create_toolbar(void)
{
&nbsp;&nbsp;&nbsp;s_info.toolbar = elm_toolbar_add(s_info.grid);
&nbsp;&nbsp;&nbsp;if (!s_info.toolbar)
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_toolbar_select_mode_set(s_info.toolbar, ELM_OBJECT_SELECT_MODE_NONE);
&nbsp;&nbsp;&nbsp;elm_toolbar_shrink_mode_set(s_info.toolbar, ELM_TOOLBAR_SHRINK_EXPAND);
&nbsp;&nbsp;&nbsp;elm_toolbar_transverse_expanded_set(s_info.toolbar, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.toolbar, EVAS_HINT_EXPAND, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_EXPAND);

&nbsp;&nbsp;&nbsp;elm_grid_pack(s_info.grid, s_info.toolbar,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOOLBAR_GEOMETRY_X, TOOLBAR_GEOMETRY_Y,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TOOLBAR_GEOMETRY_W, TOOLBAR_GEOMETRY_H);

&nbsp;&nbsp;&nbsp;if (!__append_item(s_info.toolbar, AUDIO_FILE_PATH, ITEM_NAME_AUDIO_FILE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__toolbar_file_open_cb, (void*)EINA_FALSE) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!__append_item(s_info.toolbar, VIDEO_FILE_PATH, ITEM_NAME_VIDEO_FILE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__toolbar_file_open_cb, (void*)EINA_TRUE) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!__append_item(s_info.toolbar, URL_ICON_FILE, ITEM_NAME_ONLINE_FILE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__url_popup_display_btn_clicked_cb, NULL) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!__append_item(s_info.toolbar, SCREENSHOT_ICON_FILE, ITEM_NAME_CAPTURE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__screen_capture_btn_clicked_cb, NULL) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!__append_item(s_info.toolbar, INFO_ICON_FILE, ITEM_NAME_INFO,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__info_display_btn_clicked_cb, NULL))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_show(s_info.toolbar);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}

static Eina_Bool 
__append_item(Evas_Object *toolbar, char *icon_file, char *label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Smart_Cb func, const void *data)
{
&nbsp;&nbsp;&nbsp;Eina_Bool res = EINA_FALSE;
&nbsp;&nbsp;&nbsp;Eina_Stringshare *icon_path = NULL;

&nbsp;&nbsp;&nbsp;icon_path = __get_app_resource(icon_file);

&nbsp;&nbsp;&nbsp;res = (elm_toolbar_item_append(toolbar, icon_path, label, func, data) != NULL);
&nbsp;&nbsp;&nbsp;eina_stringshare_del(icon_path);

&nbsp;&nbsp;&nbsp;return res;
}
</pre>
			</td>
			<td>
				<p align="center">
					<img alt="Stream-player-toolbar-section" src="../images/stream_player_toolbar_section.png" />
				</p>
			</td>
		</tr>

		<tr id="display-section-layout">
			<td>
				The display section is made of 2 stacked objects:
				<ul>
					<li>Display (top object): Used to display the played video file.</li>
					<li>Album art (bottom object): Used to display the file&#39;s album art.</li>
				</ul>
				<p>The user can tap the display to switch pause on or off.</p>
			</td>
			<td>
				<pre class="prettyprint">
static Eina_Bool 
__add_display(void)
{
&nbsp;&nbsp;&nbsp;if (!s_info.grid)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;s_info.display = evas_object_image_add(evas_object_evas_get(s_info.grid));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_image_filled_set(s_info.display, EINA_TRUE);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(s_info.display,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_CALLBACK_MOUSE_DOWN, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__display_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;elm_grid_pack(s_info.grid, s_info.display,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISPLAY_GEOMETRY_X, DISPLAY_GEOMETRY_Y,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISPLAY_GEOMETRY_W, DISPLAY_GEOMETRY_H);
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.display);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}

static Eina_Bool 
__add_album_art(void)
{
&nbsp;&nbsp;&nbsp;if (!s_info.grid) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;s_info.album_art = elm_image_add(s_info.grid);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(s_info.display,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_CALLBACK_MOUSE_DOWN, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__display_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;elm_grid_pack(s_info.grid, s_info.album_art,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISPLAY_GEOMETRY_X, DISPLAY_GEOMETRY_Y,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DISPLAY_GEOMETRY_W, DISPLAY_GEOMETRY_H);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
			</td>
			<td>
				<p align="center">
					<img alt="Stream-player-display-section" src="../images/stream_player_display_section.png" />
				</p>
			</td>
		</tr>

		<tr id="playback-options-section-layout">
			<td>The playback options section is created from the following objects:
				<ul>
					<li><span style="font-family: Courier New,Courier,monospace">Elm_Slider</span>: Used to set the seek position.</li>
					<li>Custom push buttons: Used to pause, stop, or resume the playback. A custom button is created with the <span style="font-family: Courier New,Courier,monospace">__create_button()</span> function. The custom button layout defines its look and behavior (a specified icon, highlight on tap).</li>
					<li>Custom toggle button: Used to toggle the mute and loop modes. A custom toggle button is created with the <span style="font-family: Courier New,Courier,monospace">__create_toggle()</span> function. Apart from defining its look, the layout also stores the toggle&#39;s on/off state.</li> 
					<li>Custom layout: Used for the sound panel implementation (see the next row for details).</li>

				</ul>
				<p>The Player API does not provide a callback to be invoked when playback progress changes. In order to update the progress slider, an <span style="font-family: Courier New,Courier,monospace">Ecore_Timer</span> is used. The current playback position is read using the <span style="font-family: Courier New,Courier,monospace">player_model_get_progress()</span> function. Check <a href="#model-playback-control">Playback Control</a> for details.</p>
			</td>
			<td>
			
	
				<pre class="prettyprint">
static Eina_Bool 
__create_button_panel(void)
{
&nbsp;&nbsp;&nbsp;Evas_Object *loop_toggle = NULL;

&nbsp;&nbsp;&nbsp;s_info.button_panel = elm_box_add(s_info.grid);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.button_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.button_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_FILL, EVAS_HINT_FILL);
&nbsp;&nbsp;&nbsp;elm_box_horizontal_set(s_info.button_panel, EINA_TRUE);

&nbsp;&nbsp;&nbsp;elm_grid_pack(s_info.grid,  s_info.button_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BUTTON_PANEL_GEOMETRY_X, BUTTON_PANEL_GEOMETRY_Y,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BUTTON_PANEL_GEOMETRY_W, BUTTON_PANEL_GEOMETRY_H);

&nbsp;&nbsp;&nbsp;if (!__create_button(s_info.button_panel, SIGNAL_SET_SOUND_ICON,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__show_sound_panel, NULL))

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (!__create_button(s_info.button_panel, SIGNAL_SET_STOP_ICON,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__button_stop_clicked_cb, NULL))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;s_info.pause_play_btn = __create_button(s_info.button_panel, SIGNAL_SET_PLAY_ICON,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__button_pause_play_clicked_cb, NULL);
&nbsp;&nbsp;&nbsp;if (!s_info.pause_play_btn)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;loop_toggle = __create_toggle(s_info.button_panel, EINA_FALSE, LOOP_ICON_FILE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__playback_looping_changed_cb, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_box_pack_end(s_info.button_panel, loop_toggle);

&nbsp;&nbsp;&nbsp;evas_object_show(s_info.button_panel);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}

static Eina_Bool 
__add_seek_slider(void)
{
&nbsp;&nbsp;&nbsp;if (!s_info.progress_panel)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;s_info.seek_slider = elm_slider_add(s_info.progress_panel);
&nbsp;&nbsp;&nbsp;if (!s_info.seek_slider)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.seek_slider,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.seek_slider,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;elm_slider_step_set(s_info.seek_slider, 1.0);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(s_info.seek_slider, &quot;changed&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__seek_slider_changed_cb, NULL);

&nbsp;&nbsp;&nbsp;elm_box_pack_end(s_info.progress_panel, s_info.seek_slider);
&nbsp;&nbsp;&nbsp;evas_object_show(s_info.seek_slider);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
			</td>
			<td>
				<p align="center">
					<img alt="Stream-player-progress-panel" src="../images/stream_player_progress_panel.png" />
				</p>
				<p align="center">
					<img alt="Stream-player-button-panel" src="../images/stream_player_button_panel.png" />
				</p>
			</td>
		</tr>

		<tr>
			<td>The sound panel is a custom layout containing an <span style="font-family: Courier New,Courier,monospace">Elm_Slider</span> for controlling the playback volume and a custom toggle button for switching the mute mode on and off.
			</td>
			<td>
				<pre class="prettyprint">
static Eina_Bool 
__add_sound_panel(void)
{
&nbsp;&nbsp;&nbsp;Eina_Stringshare *edj_path = NULL;
&nbsp;&nbsp;&nbsp;Evas_Object *mute_toggle = NULL;
&nbsp;&nbsp;&nbsp;Eina_Bool res = EINA_FALSE;

&nbsp;&nbsp;&nbsp;s_info.sound_panel = elm_layout_add(s_info.grid);
&nbsp;&nbsp;&nbsp;if (!s_info.sound_panel)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;edj_path = __get_app_resource(EDJ_FILE_SOUND_PANEL);
&nbsp;&nbsp;&nbsp;res = elm_layout_file_set(s_info.sound_panel, edj_path, EDJ_GROUP_MAIN);
&nbsp;&nbsp;&nbsp;eina_stringshare_del(edj_path);
&nbsp;&nbsp;&nbsp;if (!res)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(s_info.sound_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(s_info.sound_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;elm_grid_pack(s_info.grid, s_info.sound_panel,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_PANEL_GEOMETRY_X, SOUND_PANEL_GEOMETRY_Y,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SOUND_PANEL_GEOMETRY_W, SOUND_PANEL_GEOMETRY_H);

&nbsp;&nbsp;&nbsp;s_info.volume_slider = __create_volume_slider(s_info.sound_panel);
&nbsp;&nbsp;&nbsp;if (!s_info.volume_slider)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(s_info.sound_panel, EDJ_SOUND_PANEL_PART_SLIDER,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.volume_slider);

&nbsp;&nbsp;&nbsp;mute_toggle = __create_toggle(s_info.sound_panel, EINA_TRUE, MUTE_ICON_FILE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__sound_mute_toggle_changed_cb, NULL);
&nbsp;&nbsp;&nbsp;if (!mute_toggle)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;elm_object_part_content_set(s_info.sound_panel, EDJ_SOUND_PANEL_PART_TOGGLE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mute_toggle);

&nbsp;&nbsp;&nbsp;return EINA_TRUE;
}
</pre>
			</td>
			<td>
				<p align="center">
					<img alt="Stream-player-sound-panel" src="../images/stream_player_sound_panel.png" />
				</p>
			</td>
		</tr>
	</tbody>
</table>

<h3>Information Popup</h3>

<p>The information popup displays a text message with all <a href="#model-file-information">information about a file gathered by the model</a>. The following function generates the message.</p>

<pre class="prettyprint">
static char* 
__get_stream_info(void)
{
&nbsp;&nbsp;&nbsp;// Variable declaration
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;===== Stream info =====&quot;);

&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_ALBUM,  msg, &quot;Album: &quot;);
&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_ARTIST, msg, &quot;Artist: &quot;);
&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_AUTHOR, msg, &quot;Author: &quot;);
&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_GENRE,  msg, &quot;Genre: &quot;);
&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_TITLE,  msg, &quot;Title: &quot;);
&nbsp;&nbsp;&nbsp;__append_content_info(PLAYER_CONTENT_INFO_YEAR,   msg, &quot;Year: &quot;);

&nbsp;&nbsp;&nbsp;player_model_get_codec(&amp;audio_codec, &amp;video_codec);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;CODECS Audio: %s; Video: %s&quot;, audio_codec, video_codec);

&nbsp;&nbsp;&nbsp;__append_underlined_text(msg, &quot;Codecs:&quot;);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Audio: &quot;, &quot;%s%s&quot;, audio_codec, NEW_LINE);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Video: &quot;, &quot;%s%s&quot;, video_codec, NEW_LINE);

&nbsp;&nbsp;&nbsp;free(audio_codec);
&nbsp;&nbsp;&nbsp;free(video_codec);

&nbsp;&nbsp;&nbsp;player_model_get_audio_stream_info(&amp;sample_rate, &amp;channel, &amp;bit_rate);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;AUDIO STREAM INFO: sample rate: %d; channel: %d; bit rate: %d&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sample_rate, channel, bit_rate);

&nbsp;&nbsp;&nbsp;__append_underlined_text(msg, &quot;Audio stream info:&quot;);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Sample rate: &quot;, &quot;%d%s&quot;, sample_rate, NEW_LINE);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Channel: &quot;, &quot;%d%s&quot;, channel, NEW_LINE);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Bit rate: &quot;, &quot;%d%s&quot;, bit_rate, NEW_LINE);

&nbsp;&nbsp;&nbsp;player_model_get_video_stream_info(&amp;fps, &amp;bit_rate);
&nbsp;&nbsp;&nbsp;player_model_get_video_size(&amp;width, &amp;height);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;VIDEO STREAM INFO: FPS: %d; bit_rate: %d; size=[%d, %d]&quot;, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fps, bit_rate, width, height);

&nbsp;&nbsp;&nbsp;__append_underlined_text(msg, &quot;Video stream info:&quot;);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;FPS: &quot;, &quot;%d%s&quot;, fps, NEW_LINE);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Bit rate: &quot;, &quot;%d%s&quot;, bit_rate, NEW_LINE);
&nbsp;&nbsp;&nbsp;__append_bolded_text(msg, &quot;Size: &quot;, &quot;%d x %d&quot;, width, height);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_DEBUG, LOG_TAG, &quot;===== Stream info =====&quot;);

&nbsp;&nbsp;&nbsp;eina_strbuf_replace_all(msg, &quot;&amp;&quot;, &quot;&amp;amp;amp;&quot;); // Every &#39;&amp;&#39; character has to be replaced with &#39;&amp;amp;amp;&#39;

&nbsp;&nbsp;&nbsp;ret = eina_strbuf_string_steal(msg);
&nbsp;&nbsp;&nbsp;eina_strbuf_free(msg);

&nbsp;&nbsp;&nbsp;return ret;
}
</pre>

<p>The text part of the popup uses elements similar to HTML elements. They can used to bold or underline parts of the text.</p>
<pre class="prettyprint">
static inline Eina_Stringshare* 
__bold_text(char *txt)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;// &lt;font_weight=bold&gt;%s&lt;/font_weight&gt; %s is bolded
&nbsp;&nbsp;&nbsp;return eina_stringshare_printf(&quot;&lt;font_weight=bold&gt;%s&lt;/font_weight&gt;&quot;, txt); 
}

static inline void 
__append_bolded_text(Eina_Strbuf *msg, char *key, char *format, ...)
{
&nbsp;&nbsp;&nbsp;va_list args;
&nbsp;&nbsp;&nbsp;Eina_Stringshare *bolded = __bold_text(key);
&nbsp;&nbsp;&nbsp;va_start(args, format);
&nbsp;&nbsp;&nbsp;eina_strbuf_append(msg, bolded);
&nbsp;&nbsp;&nbsp;eina_strbuf_append_vprintf(msg, format, args);
&nbsp;&nbsp;&nbsp;eina_stringshare_del(bolded);
&nbsp;&nbsp;&nbsp;va_end(args);
}

static inline Eina_Stringshare* 
__underline_text(const char *txt, const char *color)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;return eina_stringshare_printf(&quot;&lt;underline=on underline_color=%s&gt;%s&lt;/underline&gt;&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color ? color : &quot;#000000&quot;, txt);
&nbsp;&nbsp;&nbsp;// &quot;&lt;underline=on underline_color=%s&gt;%s&lt;/underline&gt; %s is underlined
&nbsp;&nbsp;&nbsp;// Note that the default color of the underline is white
}

static inline void 
__append_underlined_text(Eina_Strbuf *msg, const char *txt)
{
&nbsp;&nbsp;&nbsp;Eina_Stringshare *underlined = __underline_text(txt, &quot;#000000&quot;);
&nbsp;&nbsp;&nbsp;eina_strbuf_append_printf(msg, &quot;%s%s&quot;, underlined, NEW_LINE);
&nbsp;&nbsp;&nbsp;eina_stringshare_del(underlined);
}
</pre>
<p>For more information about the elements, see <a href="../../../org.tizen.ui.practices/html/native/efl/evas_objects_n.htm#block">Textblock</a> and <a href="../../../org.tizen.ui.practices/html/native/efl/font_setting_n.htm">Fonts</a>.</p>

<h3 id="model">Model</h3>


<p>The following image describes the typical state changes of the player.</p>

<p class="figure">Figure: Stream-player state changes</p>
<p align="center">
       <img alt="Stream-player state changes" src="../images/stream_player_state_changes.png" />
</p>

<h4>Initialization</h4>


<p>First of all, a player object has to be created using the <span style="font-family: Courier New,Courier,monospace">player_create()</span> function. If the player is created successfully, you can set all required player callbacks. Check the Player API documentation for the callback details. Also, the <span style="font-family: Courier New,Courier,monospace">view</span> module callbacks are assigned here.</p>

<pre class="prettyprint">
void 
player_model_init(Player_Status_Changed_cb_t player_status_changed_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player_Progress_Changed_cb_t player_progress_changed_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player_Progress_End_cb_t player_progress_end_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player_Screen_cb_t player_screen_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player_Message_cb_t player_msg_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Player_Buffer_progress_cb_t player_buffer_progress_cb)
{
&nbsp;&nbsp;&nbsp;int error_code = player_create(&amp;s_info.player);
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_status_changed_cb = player_status_changed_cb;
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_progress_changed_cb = player_progress_changed_cb;
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_progress_end_cb = player_progress_end_cb;
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_screen_cb = player_screen_cb;
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_msg_cb = player_msg_cb;
&nbsp;&nbsp;&nbsp;s_info.callbacks.player_buffer_progress_cb = player_buffer_progress_cb;

&nbsp;&nbsp;&nbsp;if (player_set_interrupted_cb(s_info.player, __player_interrupted_cb, NULL) != PLAYER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_completed_cb(s_info.player, __player_completed_cb, NULL) != PLAYER_ERROR_NONE) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_error_cb(s_info.player, __player_error_cb, NULL) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_buffering_cb(s_info.player, __player_buffering_cb, NULL) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_progressive_download_message_cb(s_info.player, __progressive_download_message_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_video_stream_changed_cb(s_info.player, __video_stream_changed_cb, NULL) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_media_stream_buffer_status_cb(s_info.player,  PLAYER_STREAM_TYPE_AUDIO, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__media_stream_buffer_status_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void *)PLAYER_STREAM_TYPE_AUDIO) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_media_stream_buffer_status_cb(s_info.player, PLAYER_STREAM_TYPE_VIDEO, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__media_stream_buffer_status_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void *)PLAYER_STREAM_TYPE_VIDEO) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_media_stream_seek_cb(s_info.player, PLAYER_STREAM_TYPE_AUDIO, __media_stream_seek_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void *)PLAYER_STREAM_TYPE_AUDIO) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (player_set_media_stream_seek_cb(s_info.player, PLAYER_STREAM_TYPE_VIDEO, __media_stream_seek_cb, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(void *)PLAYER_STREAM_TYPE_VIDEO) != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>


<h4>Playing a File</h4>

<p>The <span style="font-family: Courier New,Courier,monospace">player_model_play_file()</span> function is used to play a given file. There is no difference between a local video or audio file and an online file, when it comes to the implementation. Only a correct URI is required.</p>

<ol>
<li>If the player state is different than <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span>, the <span style="font-family: Courier New,Courier,monospace">player_state_unprepare()</span> function has to be called first.
<p>If not, the previously loaded file is played instead of the given one.</p></li>
<li>The mute mode has to be switched off before the new file is loaded.</li>
<li>The player is now ready to load a new file.
<p>The new file can be loaded using the <span style="font-family: Courier New,Courier,monospace">player_set_uri()</span> function.</p></li>
<li>The <span style="font-family: Courier New,Courier,monospace">Evas_Object</span> used as the display object can be set using the <span style="font-family: Courier New,Courier,monospace">player_set_display()</span> function.</li>
<li>The player can be set to the <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_READY</span> state using <span style="font-family: Courier New,Courier,monospace"> player_prepare()</span> function and the playback can be started by invoking the <span style="font-family: Courier New,Courier,monospace">player_start()</span> function.</li>
</ol>

<pre class="prettyprint">
player_error_e 
player_model_play_file(const char *file_path)
{
&nbsp;&nbsp;&nbsp;// Variables declaration
&nbsp;&nbsp;&nbsp;if (!s_info.player)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;if (!s_info.display)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;player_model_set_mute(EINA_FALSE);
&nbsp;&nbsp;&nbsp;error_code = player_get_state(s_info.player, &amp;state);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;if (state != PLAYER_STATE_IDLE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Setting player state to idle&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;error_code = player_unprepare(s_info.player);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;error_code = player_set_uri(s_info.player, file_path);
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;error_code = player_set_display(s_info.player, PLAYER_DISPLAY_TYPE_EVAS, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;GET_DISPLAY(s_info.display));
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;error_code = player_prepare(s_info.player);
&nbsp;&nbsp;&nbsp;if (error_code != PLAYER_ERROR_NONE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;error_code = player_start(s_info.player);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return PLAYER_ERROR_NONE;
}
</pre>



<h4 id="model-playback-control">Playback Control</h4>

<p>The Player API provides the basic playback control options: play, pause, and stop.</p>

<p>The options change the state of the player and can be accessed by the user using the <a href="#playback-options-section-layout">playback options section</a> components. There is also a seek option available. The view part provides the user with a slider to adjust the playback progress. Note that the <span style="font-family: Courier New,Courier,monospace">player_get_duration()</span> function can be used to get the length of the file and set the maximum value of the mentioned slider.</p>

<p>Apart from the basic playback control options, the following features are also implemented:</p>

<ul>
 <li>Mute: Set using the <span style="font-family: Courier New,Courier,monospace">player_set_mute()</span> function.</li>
 <li>Loop: Set using the <span style="font-family: Courier New,Courier,monospace">player_set_looping()</span> function.
 <p>When the loop mode is on, the <span style="font-family: Courier New,Courier,monospace">__player_completed_cb</span> callback function is not invoked.</p></li>
 <li>Volume: Set using the <span style="font-family: Courier New,Courier,monospace">player_set_volume()</span> function. The sound of the player can be set independently from the system volume settings.</li>
</ul>


<h4>Other Functionalities</h4>

<p>Some of the multimedia files provide an album art image that can be displayed during the playback. To display such an image, the <span style="font-family: Courier New,Courier,monospace">player_get_album_art()</span> function has to be invoked. Raw image data is provided after a successful call. The data can be later passed to the <span style="font-family: Courier New,Courier,monospace">elm_image_memfile_set()</span> function to create an image object that is set in the display section.</p>

<p>During the playback of a video file (local or online), a screenshot can be taken at any moment using the <span style="font-family: Courier New,Courier,monospace">player_capture_video()</span> function. If the capture is successful, the <span style="font-family: Courier New,Courier,monospace">__video_captured_cb()</span> callback function is invoked with the image size and raw data as its parameters. Then, an image file is generated using the <span style="font-family: Courier New,Courier,monospace">image_util_encode_jpeg()</span> function. The image is saved in the internal storage of the device, in the <span style="font-family: Courier New,Courier,monospace">Images</span> folder. To get the correct path to the file, use the <span style="font-family: Courier New,Courier,monospace">__get_storage_path()</span> and <span style="font-family: Courier New,Courier,monospace">__get_storage_path_cb()</span> functions.</p>

<pre class="prettyprint">
static bool 
__get_storage_path_cb(int storage_id, storage_type_e type, storage_state_e state, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const char *path, void *user_data)
{
&nbsp;&nbsp;&nbsp;if (type == STORAGE_TYPE_INTERNAL) // Check whether the storage type is internal
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s_info.found_storage_id = storage_id; // Save the internal storage key

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false; // Stop iterating
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true; // Continue iterating
}

static char* 
__get_storage_path(storage_directory_e dir)
{
&nbsp;&nbsp;&nbsp;// Variable declaration
&nbsp;&nbsp;&nbsp;// Iterate each available storage
&nbsp;&nbsp;&nbsp;error_code = storage_foreach_device_supported(__get_storage_path_cb, NULL); 
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;// Get the path to the storage
&nbsp;&nbsp;&nbsp;error_code = storage_get_directory(s_info.found_storage_id, dir, &amp;path); 

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;return path;
}
</pre>
<p>To get access to the storage of the device, the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/mediastorage</span> privilege must be set. To display the image in the gallery application, it has to be added to the media content database using the <span style="font-family: Courier New,Courier,monospace">__insert_image_info_to_db()</span> function.</p>
<pre class="prettyprint">
static void 
__insert_image_info_to_db(const char *path)
{
&nbsp;&nbsp;&nbsp;int ret = media_content_connect();
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;ret = media_content_scan_file(path);
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;ret = media_content_disconnect();
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>

<p id="model-file-information">Another feature of the sample application is displaying the file information. Multimedia files provide information about their content, and it can be accessed using the Player API. The data include:</p>
<ul>
 <li>Album name</li>
 <li>Artist name</li>
 <li>Author name</li>
 <li>Genre</li>
 <li>Title</li>
 <li>Year</li>
 <li>Audio codec name</li>
 <li>Video codec name</li>
 <li>Audio sample rate</li>
 <li>Audio channel</li>
 <li>Audio bit rate</li>
 <li>Video frames per second</li>
 <li>Video bit rate</li>
 <li>Video size</li>
</ul>

<p>The following functions are used to get the file information.</p>

<pre class="prettyprint">
char* 
player_model_get_content_info(player_content_info_e key)
{
&nbsp;&nbsp;&nbsp;char *value = NULL;

&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;player_get_content_info(s_info.player, key, &amp;value);

&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;player_model_content_info_get(%d) == %s&quot;, key, value);

&nbsp;&nbsp;&nbsp;return value;
}

void 
player_model_get_codec(char **audio_codec, char **video_codec)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;player_get_codec_info(s_info.player, audio_codec, video_codec);
}

void 
player_model_get_audio_stream_info(int *sample_rate, int *channel, int *bit_rate)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;player_get_audio_stream_info(s_info.player, sample_rate, channel, bit_rate);
}

void 
player_model_get_video_stream_info(int *fps, int *bit_rate)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;player_get_video_stream_info(s_info.player, fps, bit_rate);
}

void 
player_model_get_video_size(int *width, int *height)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;player_get_video_size(s_info.player, width, height);
}
</pre>

<p>All files do not provide all the mentioned data.</p>


<h4>Device Orientation</h4>

<p>When the device orientation changes, the <span style="font-family: Courier New,Courier,monospace">player_model_set_orientation()</span> function is invoked.</p>

<pre class="prettyprint">
void 
player_model_set_orientation(Eina_Bool is_horizontal)
{
&nbsp;&nbsp;&nbsp;if (is_horizontal) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player_set_display_mode(s_info.player, PLAYER_DISPLAY_MODE_FULL_SCREEN);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player_set_display_rotation(s_info.player, PLAYER_DISPLAY_ROTATION_NONE);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player_set_display_mode(s_info.player, PLAYER_DISPLAY_MODE_ORIGIN_OR_LETTER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;player_set_display_rotation(s_info.player, PLAYER_DISPLAY_ROTATION_NONE);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The function changes the display mode of the player object. The layout of the application is changed as well: the display section is stretched to cover the whole screen while other sections are hidden.</p>



<h4>Player Deinitialization</h4>

<p>The following function deinitializes and destroys the player object.</p>

<pre class="prettyprint">
void 
player_model_deinit(void)
{
&nbsp;&nbsp;&nbsp;// Error handling
&nbsp;&nbsp;&nbsp;error_code = player_stop(s_info.player);
&nbsp;&nbsp;&nbsp;// Error handling

&nbsp;&nbsp;&nbsp;error_code = player_unprepare(s_info.player);
&nbsp;&nbsp;&nbsp;// Error handling and callbacks deinitialization

&nbsp;&nbsp;&nbsp;error_code = player_destroy(s_info.player);
&nbsp;&nbsp;&nbsp;// Error handling
}
</pre>

<p>Any on-going playback must be stopped and the player must be put into the <span style="font-family: Courier New,Courier,monospace">PLAYER_STATE_IDLE</span> state before it can be destroyed.</p>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
