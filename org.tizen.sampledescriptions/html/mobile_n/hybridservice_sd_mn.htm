<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>HybridServiceApp Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>HybridServiceApp Sample Overview</h1> 
 
<p>The HybridServiceApp sample application demonstrates how you can communicate with a Tizen Web application (<a href="../mobile_w/hybridwebapp_mw.htm">HybridWebApp</a>) to manage the timer for the application.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>

<p>The HybridServiceApp is a service application that has no user interface. It creates the timer, and starts and stops it according to the requests received from the HybridWebApp application.</p>
<p>As HybridServiceApp is a service, call the <span style="font-family: Courier New,Courier,monospace">service_app_main()</span> function of the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__SERVICE__APP__MODULE.html">Service App</a> API to create its instance. In addition, set the service callbacks, such as <span style="font-family: Courier New,Courier,monospace">service_app_event_callback_s</span>.</p>
<pre class="prettyprint">
int 
app_run(app_data *app, int argc, char **argv)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!app, -1, &quot;Application data is NULL&quot;);

&nbsp;&nbsp;&nbsp;app_event_handler_h lmh;
&nbsp;&nbsp;&nbsp;app_event_handler_h lbh;
&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;lmh, APP_EVENT_LOW_MEMORY, _on_low_memory_cb, app);
&nbsp;&nbsp;&nbsp;service_app_add_event_handler(&amp;lbh, APP_EVENT_LOW_BATTERY, _on_low_battery_cb, app);

&nbsp;&nbsp;&nbsp;service_app_lifecycle_callback_s cbs =
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.create = _on_create_cb,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.terminate = _on_terminate_cb
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;return service_app_main(argc, argv, &amp;cbs, app);
}
</pre>

<p>To destroy the service, call the <span style="font-family: Courier New,Courier,monospace">service_app_exit()</span> function.</p>
<p>Declare the application type as service in the manifest XML file:</p>
<pre class="prettyprint">
&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;manifest xmlns=&quot;http://tizen.org/ns/packages&quot; package=&quot;org.tizen.hybridsvc&quot; version=&quot;1.0.0&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;service-application appid=&quot;org.tizen.hybridsvc&quot; exec=&quot;hybridsvc&quot; type=&quot;capp&quot; multiple=&quot;false&quot; taskmanage=&quot;false&quot; nodisplay=&quot;true&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;HybridSvc&lt;/label&gt;
&nbsp;&nbsp;&nbsp;&lt;/service-application&gt;
&lt;/manifest&gt;
</pre>
<p>The hybrid Web application must launch the service application by its application ID. Before running the hybrid Web  application in the project folder, JavaScript must open the <span style="font-family: Courier New,Courier,monospace">main.js</span> file, find the <span style="font-family: Courier New,Courier,monospace">gServiceAppId</span> initialization variable, and change its value on token from the HybridServiceApp manifest file <span style="font-family: Courier New,Courier,monospace">appid</span> value (<span style="font-family: Courier New,Courier,monospace">appid=&quot;org.tizen.hybridsvc&quot;</span>).</p>

<h2>Implementation</h2>
<p>Communication with the Web application is set using the <span style="font-family: Courier New,Courier,monospace">proxy_client</span> functionality that uses the <a href="../../../org.tizen.native.mobile.apireference/group__CAPI__MESSAGE__PORT__MODULE.html">Message Port API</a>.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">proxy_client_create()</span> function creates a proxy client instance for storing the main communication information as a local message port ID, remote application name, and its message port name.</p>
<pre class="prettyprint">
proxy_client* 
proxy_client_create()
{
&nbsp;&nbsp;&nbsp;proxy_client *const proxy = calloc(1 , sizeof(proxy_client));

&nbsp;&nbsp;&nbsp;return proxy;
}
</pre>
<p>To register the message port on the service side, use the <span style="font-family: Courier New,Courier,monospace">proxy_client_register_port()</span> function.</p>
<pre class="prettyprint">
int 
proxy_client_register_port(proxy_client *proxy_cl, const char *const port_name)
{
&nbsp;&nbsp;&nbsp;int result = SVC_RES_FAIL;

&nbsp;&nbsp;&nbsp;RETVM_IF(!proxy_cl, result, &quot;Proxy client is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!port_name, result, &quot;Message port name is NULL&quot;);

&nbsp;&nbsp;&nbsp;int temp_id = message_port_register_local_port(port_name, _on_message_received_cb);
&nbsp;&nbsp;&nbsp;if (temp_id &lt; 0)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_proxy_client_convert_msg_port_result(temp_id);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to register local message port&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_cl-&gt;local_port_id = 0;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;DBG(&quot;Message port %s registered with id: %d&quot;, port_name, temp_id);
&nbsp;&nbsp;&nbsp;proxy_cl-&gt;local_port_id = temp_id;

&nbsp;&nbsp;&nbsp;return SVC_RES_OK;
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">proxy_client_register_msg_receive_callback()</span> function is needed to register the internal <span style="font-family: Courier New,Courier,monospace">proxy_client</span> callback data and a function that is called when the registered message port receives data from the Web application.</p>
<pre class="prettyprint">
int 
proxy_client_register_msg_receive_callback(proxy_client *proxy_cl,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_client_callback_func callback_func,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void *data)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!proxy_cl, SVC_RES_FAIL, &quot;Proxy client is NULL&quot;);

&nbsp;&nbsp;&nbsp;callback_data.proxy_cl = proxy_cl;
&nbsp;&nbsp;&nbsp;callback_data.func = callback_func;
&nbsp;&nbsp;&nbsp;callback_data.data = data;

&nbsp;&nbsp;&nbsp;return SVC_RES_OK;
}
</pre>
<p>To send messages by the <span style="font-family: Courier New,Courier,monospace">proxy_client</span> callback, use the <span style="font-family: Courier New,Courier,monospace">proxy_client_send_message()</span> function. Use the <span style="font-family: Courier New,Courier,monospace">message_port_send_message_with_local_port()</span> function of the Message Port API.</p>
<pre class="prettyprint">
int 
proxy_client_send_message(proxy_client *proxy_cl, bundle *const msg)
{
&nbsp;&nbsp;&nbsp;int result = SVC_RES_FAIL;

&nbsp;&nbsp;&nbsp;RETVM_IF(!proxy_cl, result , &quot;Proxy client is NULL&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!(proxy_cl-&gt;local_port_id), result, &quot;Message port is not registered&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!(proxy_cl-&gt;remote_app_name), result, &quot;Remote application name is not registered&quot;);
&nbsp;&nbsp;&nbsp;RETVM_IF(!(proxy_cl-&gt;remote_port_name), result, &quot;Remote message port is not registered&quot;);

&nbsp;&nbsp;&nbsp;result = _proxy_client_convert_msg_port_result(message_port_send_message_with_local_port(proxy_cl-&gt;remote_app_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_cl-&gt;remote_port_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_cl-&gt;local_port_id));

&nbsp;&nbsp;&nbsp;RETVM_IF(result != SVC_RES_OK, result, &quot;Failed to send bidirectional message to: %s:%s&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_cl-&gt;remote_app_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy_cl-&gt;remote_port_name);

&nbsp;&nbsp;&nbsp;DBG(&quot;Message successfully send to: %s:%s&quot;, proxy_cl-&gt;remote_app_name, proxy_cl-&gt;remote_port_name);

&nbsp;&nbsp;&nbsp;return result;
}
</pre>
<p>The private  <span style="font-family: Courier New,Courier,monospace">_on_message_received_cb()</span> function is a registered message port callback function. This function is called if an application receives information from the Web application. The <span style="font-family: Courier New,Courier,monospace">proxy_client</span> callback function is called in this method.</p>
<pre class="prettyprint">
static void 
_on_message_received_cb(int port_id, const char *rem_app_name, const char *rem_port_name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool trusted_message, bundle *rec_msg)
{
&nbsp;&nbsp;&nbsp;DBG(&quot;Received message from port %d&quot;, port_id);

&nbsp;&nbsp;&nbsp;if (!callback_data.proxy_cl)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (port_id != callback_data.proxy_cl-&gt;local_port_id)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Receive message by unknown port id = %d&quot;, port_id);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;int res = _proxy_client_set_remote_data(callback_data.proxy_cl, rem_app_name, rem_port_name);
&nbsp;&nbsp;&nbsp;RETM_IF(res != SVC_RES_OK ,&quot;Failed to set remote data to message port&quot;);

&nbsp;&nbsp;&nbsp;if (callback_data.func)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;res = callback_data.func(callback_data.data, rec_msg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETM_IF(res != SVC_RES_OK ,&quot;Message port callback function failed&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DBG(&quot;Message port callback function not set&quot;);
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace">proxy_client</span> callback function is called, the service decides what response must be sent to the Web application (the <span style="font-family: Courier New,Courier,monospace">_app_process_received_message()</span> function) and what action must be taken on the service side (the <span style="font-family: Courier New,Courier,monospace">_app_execute_operation()</span> function).</p>
<p>For example, if a message with the <span style="font-family: Courier New,Courier,monospace">start</span> command is received, the service must run a timer that periodically notifies the Web application, and on receiving the <span style="font-family: Courier New,Courier,monospace">stop</span> command, the timer must be stopped. After that, the service sends a response to the Web application.</p>
<pre class="prettyprint">
static int 
_on_proxy_client_msg_received_cb(void *data, bundle *const rec_msg)
{
&nbsp;&nbsp;&nbsp;int result = SVC_RES_FAIL;
&nbsp;&nbsp;&nbsp;RETVM_IF(!data, result, &quot;Data is NULL&quot;);

&nbsp;&nbsp;&nbsp;app_data *app = data;
&nbsp;&nbsp;&nbsp;req_operation req_operation = REQ_OPER_NONE;

&nbsp;&nbsp;&nbsp;bundle *resp_msg = bundle_create();
&nbsp;&nbsp;&nbsp;RETVM_IF(!resp_msg, result, &quot;Failed to create bundle&quot;);

&nbsp;&nbsp;&nbsp;result = _app_process_received_message(rec_msg, resp_msg, &amp;req_operation);
&nbsp;&nbsp;&nbsp;if (result != SVC_RES_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to generate response bundle&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bundle_free(resp_msg);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return result;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;result = _app_execute_operation(app, req_operation);
&nbsp;&nbsp;&nbsp;if (result == SVC_RES_OK)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = _app_send_response(app, resp_msg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (result != SVC_RES_OK)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to send message to remote application&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ERR(&quot;Failed to execute operation&quot;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;bundle_free(resp_msg);

&nbsp;&nbsp;&nbsp;return result;
}
</pre>

<p>The timer is realized on a separate thread. When starting the application, the thread instance is created and the thread function is locked by the waiting signal to start. After the start signal is received, it starts to send notifications at 1 second intervals until the stop signal is received. The thread sleeps and waits for another notification.</p>
<pre class="prettyprint">
static void* 
_app_timer_thread_func(void *data)
{
&nbsp;&nbsp;&nbsp;RETVM_IF(!data, NULL, &quot;Data is NULL&quot;);
&nbsp;&nbsp;&nbsp;app_data *app = data;

&nbsp;&nbsp;&nbsp;pthread_mutex_lock(&amp;app-&gt;tmr_mutex);
&nbsp;&nbsp;&nbsp;bool was_timedwait = false;

&nbsp;&nbsp;&nbsp;while (app-&gt;run_svc)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (app-&gt;run_timer)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (was_timedwait)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RETVM_IF(_app_execute_operation(app, REQ_OPER_SEND_TIMER_EXP_MSG), NULL, &quot;Execute operation failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;was_timedwait = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INF(&quot;START WAITING BY TIMEOUT&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct timespec nowTs;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clock_gettime(CLOCK_REALTIME, &amp;nowTs);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nowTs.tv_sec += TIMER_INTERVAL_RUN;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_timedwait(&amp;app-&gt;tmr_cond, &amp;app-&gt;tmr_mutex, &amp;nowTs);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INF(&quot;STOP WAITING BY TIMEOUT&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;was_timedwait = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INF(&quot;START WAITING INFINIT&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pthread_cond_wait(&amp;app-&gt;tmr_cond, &amp;app-&gt;tmr_mutex);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;INF(&quot;STOP WAITING INFINIT&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;pthread_mutex_unlock(&amp;app-&gt;tmr_mutex);

&nbsp;&nbsp;&nbsp;return NULL;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>