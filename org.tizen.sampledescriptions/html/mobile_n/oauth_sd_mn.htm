<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>
	<title>LibOAuth Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
	<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
</div>

<h1>LibOAuth Sample Overview</h1>

<p>The LibOAuth sample application demonstrates how you can get access tokens from various resource owners, such as Twitter and Tumblr, who use the OAuth protocol RFC5849.</p>
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
<p>The following figure illustrates the main screen of the LibOAuth.</p>

<p class="figure"> Figure: LibOAuth screen</p>
<p align="center"> <img alt="LibOAuth main view" src="../images/oauth_main.png"/> </p>

<p>The application opens with the main screen that lists various resource providers. To get an access token from a specific provider, select the provider from the list.</p>

<h2>Prerequisites</h2>
<ul>
<li>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/network.get</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/internet</span></li>
 </ul>
 </li>
<li>Internet connection must be enabled in the device.</li> 
<li>The system time in the device must be adjusted to the respective time zone and the time must be accurate.</li>
<li>The dummy client ID and dummy client secret in the <span style="font-family: Courier New,Courier,monospace">oauth_provider_configs.h</span> file must be replaced with the respective App ID and App secret in the LibOAuth sample application.
<p>Obtain the needed client IDs and secrets from the respective resource owners. For example, the Twitter client ID and secret can be obtained from <strong>Twitter Apps</strong> as follows:</p>
<ol>
<li>Go to <a href="https://apps.twitter.com" target="_blank">Twitter Apps</a>, sign in to your Twitter account, and click <strong>Create New App</strong>.</li>
<li>Provide the application <strong>Name</strong>, <strong>Description</strong>, and <strong>URL</strong> for the LibOAuth sample and click <strong>Create your Twitter application</strong>.</li>
<li>Obtain the client ID (consumer key) and secret by selecting <strong>(manage keys and access tokens)</strong> beside <strong>Application Settings &gt; Consumer key</strong>.</li>
</ol>
</li>



</ul>

<h2 id="implementation" name="implementation">Implementation</h2>

<p>The OAuth 1.0 specification is defined in <a href="http://tools.ietf.org/html/rfc5849" target="_blank">[RFC 5849]</a> and it builds on the OAuth 1.0 [RFC 5849] deployment experience, as well as additional use cases and extensibility requirements gathered from the wider IETF community.</p>
<p>OAuth 1.0 provides a method for clients to access server resources on behalf of a resource owner (such as a different client or an end user). It also provides a process for end users to authorize third-party access to their server resources without sharing their credentials (typically, a username and password pair), using user-agent redirections.</p>

<h3 id="Twitter" name="Twitter">Twitter</h3>
<p>The following figure illustrates the 3-legged authorization process of Twitter. The 3-legged OAuth flow allows your application to obtain an access token by redirecting a user to resource provider and having them authorize your application.</p>

<p class="figure">Figure: 3-leg authorization</p>

<p align="center">
<img src="../images/oauth_twitter_3leg.png" alt="3-leg authorization" />
		
</p>

<p>After you select <strong>Twitter Login</strong> on the main screen, the sign-in window opens. To get the access token, enter your Twitter account credentials and click <strong>Sign in</strong>. Once your account gets verified, the response is displayed on the screen as a popup.</p>
<p>You can cancel the operation by pressing the back key.</p>
<p class="figure">Figure: Twitter authorization </p>

<p align="center">
	<img src="../images/oauth_twitter_login.png" alt="Twitter authorization" /> <img src="../images/oauth_twitter_response.png" alt="Twitter authorization" />
</p>

<pre class="prettyprint">
static oauth_provider_data_s*
static oauth_provider_data_s*
__create_tw_data(void)
{
&nbsp;&nbsp;&nbsp;oauth_provider_data_s *provider = calloc(1, sizeof(oauth_provider_data_s));

&nbsp;&nbsp;&nbsp;provider-&gt;app_info = calloc(1, sizeof(oauth_provider_app_info_s));
&nbsp;&nbsp;&nbsp;provider-&gt;app_info-&gt;cons_key = calloc(1, MAX_STR_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;app_info-&gt;cons_secret = calloc(1, MAX_STR_LEN);

&nbsp;&nbsp;&nbsp;provider-&gt;provider_name = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;token_url = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;auth_url = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;acc_tok_url = calloc(1, MAX_URL_LEN);

&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;provider_name, MAX_URL_LEN - 1, &quot;%s&quot;, TWITTER_NAME);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;app_info-&gt;cons_key , MAX_STR_LEN - 1, &quot;%s&quot;, TWITTER_CONS_KEY);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;app_info-&gt;cons_secret, MAX_STR_LEN - 1, &quot;%s&quot;, TWITTER_CONS_SEC);

&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;token_url, MAX_URL_LEN - 1, &quot;%s&quot;, TWITTER_REQ_TOK_URL);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;auth_url, MAX_URL_LEN - 1, &quot;%s&quot;, TWITTER_AUTH_URL);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;acc_tok_url, MAX_URL_LEN - 1, &quot;%s&quot;, TWITTER_ACC_TOK_URL);

&nbsp;&nbsp;&nbsp;return provider;
}


// Step 1: Get request token
int
get_access_token(oauth_provider_data_s *provider_data, on_access_token_received_cb cb, void *user_data)
{

&nbsp;&nbsp;&nbsp;if (__curl == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__curl = curl_easy_init();

&nbsp;&nbsp;&nbsp;oauth_provider_data_full_s *oauth_full = calloc(1, sizeof(oauth_provider_data_full_s));
&nbsp;&nbsp;&nbsp;oauth_full-&gt;provider_info = provider_data;
&nbsp;&nbsp;&nbsp;oauth_full-&gt;cb = cb;
&nbsp;&nbsp;&nbsp;oauth_full-&gt;user_data = user_data;

&nbsp;&nbsp;&nbsp;char *oauth_header = __get_oauth_header(provider_data-&gt;token_url, provider_data-&gt;app_info-&gt;cons_key, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;provider_data-&gt;app_info-&gt;cons_secret, NULL, NULL);
&nbsp;&nbsp;&nbsp;int curl_err = 0;
&nbsp;&nbsp;&nbsp;long http_code = 0;
&nbsp;&nbsp;&nbsp;char *resp = __curl_post_request(provider_data-&gt;token_url, oauth_header, NULL, &amp;curl_err, &amp;http_code);
&nbsp;&nbsp;&nbsp;if (resp == NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (curl_err == CURLE_OK)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OAUTH_ERROR_SERVER;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OAUTH_ERROR_NETWORK;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;char *token = NULL;
&nbsp;&nbsp;&nbsp;char *token_sec = NULL;

&nbsp;&nbsp;&nbsp;__parse_reply(resp, &amp;token, &amp;token_sec);
&nbsp;&nbsp;&nbsp;if ((token == NULL) || (token_sec == NULL)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(token_sec);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OAUTH_ERROR_SERVER;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;oauth_full-&gt;token_temp = token;

&nbsp;&nbsp;&nbsp;oauth_full-&gt;token = calloc(1, sizeof(oauth_provider_token_s));
&nbsp;&nbsp;&nbsp;oauth_full-&gt;token-&gt;acc_tok_secret = token_sec;

&nbsp;&nbsp;&nbsp;char url[MAX_URL_LEN] = {0,};
&nbsp;&nbsp;&nbsp;snprintf(url, MAX_URL_LEN - 1, &quot;%s?oauth_token=%s&quot;, oauth_full-&gt;provider_info-&gt;auth_url, oauth_full-&gt;token_temp);
&nbsp;&nbsp;&nbsp;__show_web_view(oauth_full, url);

&nbsp;&nbsp;&nbsp;oauth_full-&gt;loading_popup = elm_popup_add(oauth_full-&gt;login_win);
&nbsp;&nbsp;&nbsp;elm_popup_content_text_wrap_type_set(oauth_full-&gt;loading_popup, ELM_WRAP_MIXED);
&nbsp;&nbsp;&nbsp;elm_object_text_set(oauth_full-&gt;loading_popup, &quot;Loading...&quot;);
&nbsp;&nbsp;&nbsp;elm_popup_orient_set(oauth_full-&gt;loading_popup, ELM_POPUP_ORIENT_BOTTOM);

&nbsp;&nbsp;&nbsp;evas_object_show(oauth_full-&gt;loading_popup);

&nbsp;&nbsp;&nbsp;return OAUTH_ERROR_NONE;
}

// Step 2: Get authorization (user enters their credentials, and allows access to this app)
static int
__show_web_view(oauth_provider_data_full_s *oauth_full, const char *url)
{
&nbsp;&nbsp;&nbsp;int w = 400;
&nbsp;&nbsp;&nbsp;int h = 400;

&nbsp;&nbsp;&nbsp;system_info_get_platform_int(&quot;tizen.org/feature/screen.width&quot;, &amp;w);
&nbsp;&nbsp;&nbsp;system_info_get_platform_int(&quot;tizen.org/feature/screen.height&quot;, &amp;h);

&nbsp;&nbsp;&nbsp;oauth_full-&gt;login_win = elm_win_util_standard_add(&quot;Login&quot;, &quot;&quot;);
&nbsp;&nbsp;&nbsp;eext_object_event_callback_add(oauth_full-&gt;login_win, EEXT_CALLBACK_BACK, __handle_back_key, oauth_full);

&nbsp;&nbsp;&nbsp;ewk_init();

&nbsp;&nbsp;&nbsp;Evas *canvas = NULL;

&nbsp;&nbsp;&nbsp;oauth_full-&gt;content_box = elm_box_add(oauth_full-&gt;login_win);
&nbsp;&nbsp;&nbsp;elm_box_padding_set(oauth_full-&gt;content_box, 0, 3);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(oauth_full-&gt;content_box, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(oauth_full-&gt;content_box, 0.0, 0.0);
&nbsp;&nbsp;&nbsp;evas_object_show(oauth_full-&gt;content_box);

&nbsp;&nbsp;&nbsp;canvas = evas_object_evas_get(oauth_full-&gt;login_win);

&nbsp;&nbsp;&nbsp;oauth_full-&gt;ewk_view = ewk_view_add(canvas);
&nbsp;&nbsp;&nbsp;if (oauth_full-&gt;ewk_view == NULL)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return OAUTH_ERROR_SYSTEM;

&nbsp;&nbsp;&nbsp;ewk_view_url_set(oauth_full-&gt;ewk_view, url);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_min_set(oauth_full-&gt;ewk_view, w, h);

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(oauth_full-&gt;ewk_view, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_size_hint_align_set(oauth_full-&gt;ewk_view, EVAS_HINT_FILL, EVAS_HINT_FILL);

&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(oauth_full-&gt;ewk_view, &quot;url,changed&quot;, __on_web_url_change, oauth_full);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(oauth_full-&gt;ewk_view, &quot;load,error", __on_web_url_load_error, oauth_full);
&nbsp;&nbsp;&nbsp;evas_object_smart_callback_add(oauth_full-&gt;ewk_view, &quot;load,finished&quot;, __on_web_url_load_finished, oauth_full);

&nbsp;&nbsp;&nbsp;elm_box_pack_end(oauth_full-&gt;content_box, oauth_full-&gt;ewk_view);
&nbsp;&nbsp;&nbsp;evas_object_show(oauth_full-&gt;ewk_view);

&nbsp;&nbsp;&nbsp;evas_object_show(oauth_full-&gt;login_win);

&nbsp;&nbsp;&nbsp;return 0;
}

// Step 3: Get access token
static void
_on_auth_grant_received(oauth_provider_data_full_s *oauth_full, const char *reply)
{
&nbsp;&nbsp;&nbsp;if (reply == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(oauth_full-&gt;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__send_response(OAUTH_ERROR_SERVER, oauth_full);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;gchar **full_list = g_strsplit(reply,&quot;&amp;&quot;, 5);

&nbsp;&nbsp;&nbsp;char *token_full = full_list[0];
&nbsp;&nbsp;&nbsp;if (token_full == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(oauth_full-&gt;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__send_response(OAUTH_ERROR_SERVER, oauth_full);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (full_list[1] == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(oauth_full-&gt;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__send_response(OAUTH_ERROR_SERVER, oauth_full);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;char *verf_full = full_list[1];
&nbsp;&nbsp;&nbsp;if (verf_full == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(oauth_full-&gt;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__send_response(OAUTH_ERROR_SERVER, oauth_full);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;gchar **token_list = g_strsplit(token_full, &quot;=&quot;, 3);

&nbsp;&nbsp;&nbsp;if (oauth_full-&gt;token_temp != NULL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(oauth_full-&gt;token_temp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oauth_full-&gt;token_temp = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;oauth_full-&gt;token_temp = strdup(token_list[1]);

&nbsp;&nbsp;&nbsp;gchar **verf_list = g_strsplit(verf_full, &quot;=&quot;, 3);
&nbsp;&nbsp;&nbsp;if (verf_list == NULL)
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SAFE_DELETE(oauth_full-&gt;token);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__send_response(OAUTH_ERROR_SERVER, oauth_full);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;oauth_full-&gt;verifier_temp = strdup(verf_list[1]);

&nbsp;&nbsp;&nbsp;__start_access_token_request(oauth_full);
}
</pre>


<h3 id="Tumblr" name="Tumblr">Tumblr</h3>
<p>Tumblr, like Twitter, follows the 3-legged verification flow. The difference is that the user is always prompted to authorize access to the application, even if access has been previously granted.</p>

<p>After you select <strong>Tumblr Login</strong> on the main screen, the log-in window opens. To get the access token, enter your Tumblr account credentials and click <strong>Log in</strong>. Once your account gets verified, a permission window appears and you must authorize access by clicking <strong>Allow</strong>. The response is displayed on the screen as a popup.</p>

<p>You can cancel the operation by pressing the back key or by clicking <strong>No way</strong>.</p>

<p class="figure">Figure: Tumblr authorization </p>

<p align="center">
	<img src="../images/oauth_tumblr_login.png" alt="Tumblr authorization" /> <img src="../images/oauth_tumblr_permission.png" alt="Tumblr authorization" /> <img src="../images/oauth_tumblr_response.png" alt="Tumblr authorization" />
</p>

<pre class="prettyprint">
static oauth_provider_data_s*
__create_tumblr_data(void)
{
&nbsp;&nbsp;&nbsp;oauth_provider_data_s *provider = calloc(1, sizeof(oauth_provider_data_s));

&nbsp;&nbsp;&nbsp;provider-&gt;app_info = calloc(1, sizeof(oauth_provider_app_info_s));
&nbsp;&nbsp;&nbsp;provider-&gt;app_info-&gt;cons_key = calloc(1, MAX_STR_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;app_info-&gt;cons_secret = calloc(1, MAX_STR_LEN);

&nbsp;&nbsp;&nbsp;provider-&gt;provider_name = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;token_url = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;auth_url = calloc(1, MAX_URL_LEN);
&nbsp;&nbsp;&nbsp;provider-&gt;acc_tok_url = calloc(1, MAX_URL_LEN);

&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;provider_name, MAX_URL_LEN - 1, &quot;%s&quot;, TUMBLR_NAME);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;app_info-&gt;cons_key , MAX_STR_LEN - 1, &quot;%s&quot;, TUMBLR_CONS_KEY);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;app_info-&gt;cons_secret, MAX_STR_LEN - 1, &quot;%s&quot;, TUMBLR_CONS_SEC);

&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;token_url, MAX_URL_LEN - 1, &quot;%s&quot;, TUMBLR_REQ_TOK_URL);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;auth_url, MAX_URL_LEN - 1, &quot;%s&quot;, TUMBLR_AUTH_URL);
&nbsp;&nbsp;&nbsp;snprintf(provider-&gt;acc_tok_url, MAX_URL_LEN - 1, &quot;%s&quot;, TUMBLR_ACC_TOK_URL);

&nbsp;&nbsp;&nbsp;return provider;
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

</body>
</html>
