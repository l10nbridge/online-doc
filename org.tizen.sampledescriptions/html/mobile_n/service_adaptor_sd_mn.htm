<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Service Adaptor Sample Overview</title>
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

<h1>Service Adaptor Sample Overview</h1>
<p>The Service Adaptor sample demonstrates how you can download files from a cloud storage using the <a href="../../../org.tizen.native.mobile.apireference/group__SERVICE__ADAPTOR__MODULE.html">Service Adaptor</a> API.</p>
<p>The following figure illustrates the main views of the Service Adaptor application.</p>

<p class="figure">Figure : Service Adaptor main views</p>
<p align="center"><img alt="Service Adaptor main views" src="../images/service_adaptor_main.png" /> <img alt="Service Adaptor main views" src="../images/service_adaptor_file_list.png" /> <img alt="Service Adaptor main views" src="../images/service_adaptor_file_details.png" /></p>
<p align="center"><img alt="Service Adaptor main views" src="../images/service_adaptor_file_download.png" /> <img alt="Service Adaptor main views" src="../images/service_adaptor_download_progress.png" /> <img alt="Service Adaptor main views" src="../images/service_adaptor_download_complete.png" /></p>

<p>The application opens with the main screen, which lists the plugins available in the system. The sample application contains 10 dummy plugins, and if you install a cloud storage plugin (such as dropbox), it is added at the top of the list.</p>

<p>To use a plugin:</p>
<ol>
<li>On the main screen, select the plugin you want by clicking it.
<p>The list of files included in the cloud storage is displayed.</p></li>
<li>To see the file details, click the file in the file list.</li>
<li>To download a file, click <strong>Download</strong> on the file details screen.
<p>On the file download screen, click <strong> Start</strong>. When the download is complete, click <strong>OK</strong>.</p></li>
</ol>


<h2>Implementation</h2>
<p>To use the service adaptor:</p>
<ol>
<li>Connect to the service adaptor and search for any installed plugins:

<pre class="prettyprint">
static void 
foreach_plugin()
{
&nbsp;&nbsp;&nbsp;Evas_Object *list = ad.main_list;

&nbsp;&nbsp;&nbsp;int ret = 0;
&nbsp;&nbsp;&nbsp;service_adaptor_h service_adaptor = NULL;
&nbsp;&nbsp;&nbsp;ret = service_adaptor_create(&amp;service_adaptor);
&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_error(&quot;Service adaptor create failed&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;ret = service_adaptor_foreach_plugin(service_adaptor, _plugin_iterator_cb, (void *)list);
&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NO_DATA == ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_info(&quot;There is no available plugin&quot;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (SERVICE_ADAPTOR_ERROR_NONE != ret) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log_error(&quot;Plugin foreach failed&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ret = service_adaptor_destroy(service_adaptor);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_adaptor = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;g_service_adaptor = service_adaptor;

&nbsp;&nbsp;&nbsp;int i = 0;

&nbsp;&nbsp;&nbsp;while (NULL != fake_plugins[i]) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(list, fake_plugins[i], NULL, NULL, _show_plugin_view, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++i;
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If there are any installed plugins, the <span style="font-family: Courier New,Courier,monospace;">_plugin_iterator_cb()</span> callback is called and the plugin is added to the list:</p>
<pre class="prettyprint">
static bool 
_plugin_iterator_cb(char *plugin_uri, int service_mask, void *user_data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *list = (Evas_Object *)user_data;
&nbsp;&nbsp;&nbsp;log_debug(&quot;plugin uri : %s, masked : &lt;auth(%d), storage(%d)&gt;&quot;, plugin_uri,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(SERVICE_PLUGIN_SERVICE_AUTH &amp; service_mask), (SERVICE_PLUGIN_SERVICE_STORAGE &amp; service_mask));
&nbsp;&nbsp;&nbsp;if ((service_mask &amp; SERVICE_PLUGIN_SERVICE_AUTH) &amp;&amp; (service_mask &amp; SERVICE_PLUGIN_SERVICE_STORAGE)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elm_list_item_append(list, strdup(plugin_uri), NULL, NULL, _show_plugin_view, strdup(plugin_uri));
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Display the plugin file list.
<p>When a plugin is selected on the list, the cloud storage file list is shown on the next screen:</p>

<pre class="prettyprint">
static void 
_show_plugin_view(void* data, Evas_Object* obj, void* event_info)
{
&nbsp;&nbsp;&nbsp;char *plugin_uri = (char *)data;

&nbsp;&nbsp;&nbsp;Evas_Object *glist = elm_genlist_add(ad.win);
&nbsp;&nbsp;&nbsp;ad.file_list = glist;

&nbsp;&nbsp;&nbsp;if (plugin_uri) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Get the file list from the plugin
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (NULL != ad.plugin)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_destroy(ad.plugin);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad.plugin = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_adaptor_create_plugin(g_service_adaptor, plugin_uri, &amp;ad.plugin);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// TODO Hide using config file or user input, because this is security information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(ad.plugin, SERVICE_PLUGIN_PROPERTY_APP_KEY, &quot;enasvv4l8hdbmhn&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// TODO Hide using config file or user input, because this is security information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_add_property(ad.plugin, SERVICE_PLUGIN_PROPERTY_APP_SECRET, &quot;uqhl4pp8mo7hmgn&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_plugin_start(ad.plugin, (SERVICE_PLUGIN_SERVICE_AUTH | SERVICE_PLUGIN_SERVICE_STORAGE));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_get_file_list(ad.plugin, &quot;/&quot;, _service_storage_result_cb, NULL);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (NULL != fake_files[i].filename) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file_data_t *m_file = (file_data_t *)calloc(1, sizeof(file_data_t));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;filename = strdup(fake_files[i].filename);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;type = fake_files[i].type;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;size = fake_files[i].size;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;fake = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;list_item = elm_genlist_item_append(glist, ad.list_class, (void *)&amp;fake_files[i],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL, ELM_GENLIST_ITEM_NONE,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_show_file_details_view, (const void *)m_file);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;++i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_size_hint_weight_set(glist, EVAS_HINT_EXPAND, EVAS_HINT_EXPAND);
&nbsp;&nbsp;&nbsp;evas_object_show(glist);

&nbsp;&nbsp;&nbsp;ad.current_plugin_navi_item = elm_naviframe_item_push(ad.navi, &quot;File list&quot;, NULL, NULL, glist, NULL);

&nbsp;&nbsp;&nbsp;elm_list_item_selected_set(elm_list_selected_item_get(ad.main_list), EINA_FALSE);
}

</pre>
</li>

<li>Display the file details.
<p>When a file is selected on the file list, its details (filename, file path and file size) are shown on the next screen:</p>

<pre class="prettyprint">
static bool 
__file_iterator_cb(service_storage_file_h file, void *user_data)
{
&nbsp;&nbsp;&nbsp;// TODO Change logic for defend memory leak

&nbsp;&nbsp;&nbsp;file_data_t *m_file = (file_data_t *)calloc(1, sizeof(file_data_t));

&nbsp;&nbsp;&nbsp;char *name = NULL;
&nbsp;&nbsp;&nbsp;unsigned long long size = 0;
&nbsp;&nbsp;&nbsp;bool is_dir = false;

&nbsp;&nbsp;&nbsp;service_storage_file_is_dir(file, &amp;is_dir);
&nbsp;&nbsp;&nbsp;service_storage_file_get_size(file, &amp;size);
&nbsp;&nbsp;&nbsp;service_storage_file_get_logical_path(file, &amp;name);

&nbsp;&nbsp;&nbsp;m_file-&gt;filename = strdup(name);
&nbsp;&nbsp;&nbsp;m_file-&gt;type = is_dir ? &quot;directory&quot; : &quot;file&quot;;
&nbsp;&nbsp;&nbsp;m_file-&gt;size = (int)size;
&nbsp;&nbsp;&nbsp;m_file-&gt;fake = 0;
&nbsp;&nbsp;&nbsp;m_file-&gt;list_item = NULL;

&nbsp;&nbsp;&nbsp;log_info(&quot;\nfilename: \&quot;%s\&quot;\ntype: \&quot;%s\&quot;\nsize: %i\nfake: %i\nlist_item: %p\n&quot;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;filename ? m_file-&gt;filename : &quot;&quot;, m_file-&gt;type,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;size, m_file-&gt;fake,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;m_file-&gt;list_item ? m_file-&gt;list_item : 0);

&nbsp;&nbsp;&nbsp;ecore_event_add(ad.event_file_info_received, m_file, event_file_info_received_cleanup_cb, NULL);

&nbsp;&nbsp;&nbsp;return true;
}
</pre>
</li>

<li>Download a file:

<pre class="prettyprint">
static void 
start_download(void *data)
{
&nbsp;&nbsp;&nbsp;if (NULL == data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Null pointer: data&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;file_data_t *file_data = data;
&nbsp;&nbsp;&nbsp;service_storage_task_h download_task;
&nbsp;&nbsp;&nbsp;int err = SERVICE_ADAPTOR_ERROR_NONE;
&nbsp;&nbsp;&nbsp;dlog_print(DLOG_INFO, LOG_TAG, &quot;Download file path: %s&quot;, file_data-&gt;filename);

&nbsp;&nbsp;&nbsp;GString *dest_file = g_string_new(&quot;/tmp/&quot;);
&nbsp;&nbsp;&nbsp;g_string_append(dest_file, file_data-&gt;filename);

&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NONE !=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(err = service_storage_create_download_task(ad.plugin, file_data-&gt;filename, dest_file-&gt;str, &amp;download_task))) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Download task creation failed.&quot;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;switch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_PERMISSION_DENIED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Permission denied&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_INVALID_STATE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;The handle's state is invalid&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_INVALID_PARAMETER:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Invalid parameter&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_NO_DATA:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;There is no files&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_TIMED_OUT:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Timed out&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_IPC_UNSTABLE:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;IPC failed with Service Adaptor Daemon&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_NOT_SUPPORTED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Not supported API in this plugin&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_PLUGIN_FAILED:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Failed in Plugin internal&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case SERVICE_ADAPTOR_ERROR_UNKNOWN:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Unknown error&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char *msg = NULL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_adaptor_get_last_error_message(&amp;msg);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (msg) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;error msg: %s&quot;, msg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;free(msg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g_string_free(dest_file, TRUE);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;g_string_free(dest_file, TRUE);

&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NONE != 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_set_task_progress_cb(download_task, download_task_progress_cb, NULL)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Setting callback for download task failed.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_destroy_task(download_task);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NONE != 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_set_task_state_changed_cb(download_task, download_task_state_cb, NULL)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Setting callback for download task failed.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_destroy_task(download_task);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (SERVICE_ADAPTOR_ERROR_NONE != service_storage_start_task(download_task)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dlog_print(DLOG_ERROR, LOG_TAG, &quot;Starting download task failed.&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;service_storage_destroy_task(download_task);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>