<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>EvasGLCube Sample Overview</title>  
</head>

<body class="no-toc" onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
</div>	

<div id="container"><div id="contents"><div class="content">
	<div id="profile">
		<p><img alt="Mobile native" src="../images/mobile_s_n.png"/></p>
	</div>

  <h1>EvasGLCube Sample Overview</h1> 
  <p>The EvasGLCube sample application demonstrates how to implement a rotatable cube on the screen using EvasGL with the Tizen SDK. The sample shows how to handle polygon geometry, and how to write a simple vertex and fragment shader for the cube. EvasGL is similar to the EGL&#8482; layer and is related to GLView.</p>
  
  
  	  <table class="note"> 
	   <tbody> 
		<tr> 
		 <th class="note">Note</th> 
		</tr> 
		<tr> 
		 <td class="note">The application presented in this overview is not a full Tizen application, since it does not use the Application Framework. The application simply starts and runs.<p>A 3D application using the OpenGL ES must use the GLView. EvasGL can be used in special cases, such as a multi-thread.</p></td> 
		</tr> 
	   </tbody> 
	  </table> 
  
  <p>The following figure illustrates the main screen of the EvasGLCube.</p>
  
    <p class="figure">Figure: EvasGLCube screen</p> 
  <p align="center"><img alt="EvasGLCube screen" src="../images/evas_gl_sd.png" /></p>   
 
<h2>Setting up the OpenGL ES Surface</h2>
<p>The EvasGL interface is similar to the EGL interface. It can be connected to Evas so that OpenGL ES code works with Evas 2D objects.</p>
<p>This sample shows how to implement with EvasGL to use OpenGL ES:</p>

<p>Create the application:</p>
<pre class="prettyprint">
#include &lt;Evas_GL.h&gt;
#include &lt;Evas_GL_GLES2_Helpers.h&gt;
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">&lt;Evas_GL.h&gt;</span> and <span style="font-family: Courier New,Courier,monospace">&lt;Evas_GL_GLES2_Helpers.h&gt;</span> header files are needed for Evas GL applications.</p>

<pre class="prettyprint">EVAS_GL_GLOBAL_GLES2_DEFINE();</pre>

<p>The EvasGL or GLView program uses the wrapper function by the supported Evas GL. The wrapper function&#39;s interface is the same as OpenGL ES&#39;s. This macro can provide a set of convenience wrapper function tables.</p>
<pre class="prettyprint">
Evas_Object *add_win(const char *name)
{
&nbsp;&nbsp;&nbsp;Evas_Object *win;

&nbsp;&nbsp;&nbsp;elm_config_accel_preference_set(&quot;opengl&quot;);
&nbsp;&nbsp;&nbsp;win = elm_win_util_standard_add(name, &quot;UI Template&quot;);
&nbsp;&nbsp;&nbsp;if (!win)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return NULL;

&nbsp;&nbsp;&nbsp;evas_object_show(win);

&nbsp;&nbsp;&nbsp;return win;
}
</pre>
<p>Before creating the Elm Window, set the GL Rendering Engine using the <span style="font-family: Courier New,Courier,monospace">elm_config_accel_preference_set(&quot;opengl&quot;)</span> function because EvasGL runs with EvasGL Render Engine.</p>
 
<h2>Setting up Callbacks</h2>

<p>To set up callbacks:</p>
<ol>
<li>Initialize the OpenGL ES.
<p>The following example creates a shader:</p>
<pre class="prettyprint">
static void init_evasgl(appdata_s *ad)
{
&nbsp;&nbsp;&nbsp;// Set config of the surface for Evas GL
&nbsp;&nbsp;&nbsp;ad-&gt;cfg = evas_gl_config_new();
&nbsp;&nbsp;&nbsp;ad-&gt;cfg-&gt;color_format = EVAS_GL_RGB_888;
&nbsp;&nbsp;&nbsp;ad-&gt;cfg-&gt;depth_bits = EVAS_GL_DEPTH_BIT_24;
&nbsp;&nbsp;&nbsp;ad-&gt;cfg-&gt;stencil_bits = EVAS_GL_STENCIL_NONE;
&nbsp;&nbsp;&nbsp;ad-&gt;cfg-&gt;options_bits = EVAS_GL_OPTIONS_NONE;

&nbsp;&nbsp;&nbsp;// Get the window size
&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;evas_object_geometry_get(ad-&gt;win, NULL, NULL, &amp;ad-&gt;surface_w, &amp;ad-&gt;surface_h);

&nbsp;&nbsp;&nbsp;// Get the Evas GL handle for doing GL things
&nbsp;&nbsp;&nbsp;ad-&gt;evasgl = evas_gl_new(evas_object_evas_get(ad-&gt;win));

&nbsp;&nbsp;&nbsp;// Create a surface and context
&nbsp;&nbsp;&nbsp;ad-&gt;sfc = evas_gl_surface_create(ad-&gt;evasgl, ad-&gt;cfg, ad-&gt;surface_w, ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;ad-&gt;ctx = evas_gl_context_create(ad-&gt;evasgl, NULL);

&nbsp;&nbsp;&nbsp;EVAS_GL_GLOBAL_GLES2_USE(ad-&gt;evasgl, ad-&gt;ctx);

&nbsp;&nbsp;&nbsp;// Set rotation variables
&nbsp;&nbsp;&nbsp;ad-&gt;xangle = 45.0f;
&nbsp;&nbsp;&nbsp;ad-&gt;yangle = 45.0f;
&nbsp;&nbsp;&nbsp;ad-&gt;mouse_down = EINA_FALSE;
&nbsp;&nbsp;&nbsp;ad-&gt;initialized = EINA_FALSE;

&nbsp;&nbsp;&nbsp;ad-&gt;img = evas_object_image_filled_add(evas_object_evas_get(ad-&gt;conform));
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_DEL, img_del_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_image_pixels_get_callback_set(ad-&gt;img, img_pixel_cb, ad);

&nbsp;&nbsp;&nbsp;// Add mouse event callbacks
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_DOWN, mouse_down_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_UP, mouse_up_cb, ad);
&nbsp;&nbsp;&nbsp;evas_object_event_callback_add(ad-&gt;img, EVAS_CALLBACK_MOUSE_MOVE, mouse_move_cb, ad);

&nbsp;&nbsp;&nbsp;ad-&gt;ani = ecore_animator_add(animate_cb, ad-&gt;img);
&nbsp;&nbsp;&nbsp;elm_object_content_set(ad-&gt;conform, ad-&gt;img);
}
</pre>
<p>To use EvasGL, create it, set its configuration, and create the Evas GL surface and context. For rendering, connect EvasGL with the Evas Object Image using the <span style="font-family: Courier New,Courier,monospace">evas_object_image_native_surface_set()</span> function.</p>
</li>

<li>Resize callbacks.
<p>The EvasGL resize behavior is related to Evas Object Image or Elm Window. In the following example, the Elm Window resize callback is used. When resizing occurs, EvasGL Surface is recreated and reconnected to Evas Object Image.</p>
<pre class="prettyprint">
static void win_resize_cb(void *data, Evas *e , Evas_Object *obj , void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;if (ad-&gt;sfc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_native_surface_set(ad-&gt;img, NULL);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_gl_surface_destroy(ad-&gt;evasgl, ad-&gt;sfc);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;sfc = NULL;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;evas_object_geometry_get(obj, NULL, NULL, &amp;ad-&gt;surface_w, &amp;ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;evas_object_image_size_set(ad-&gt;img, ad-&gt;surface_w, ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;evas_object_resize(ad-&gt;img, ad-&gt;surface_w, ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;evas_object_show(ad-&gt;img);

&nbsp;&nbsp;&nbsp;if (!ad-&gt;sfc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Evas_Native_Surface ns;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;sfc = evas_gl_surface_create(ad-&gt;evasgl, ad-&gt;cfg, ad-&gt;surface_w, ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_gl_native_surface_get(ad-&gt;evasgl, ad-&gt;sfc, &amp;ns);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_native_surface_set(ad-&gt;img, &amp;ns);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evas_object_image_pixels_dirty_set(ad-&gt;img, EINA_TRUE);
&nbsp;&nbsp;&nbsp;}
}
</pre>
</li>

<li>Draw callbacks.
<p>The Evas GL draw callback function is registered by the following Evas Object Image function:</p>
<pre class="prettyprint">
evas_object_image_pixels_get_callback_set(ad-&gt;img, img_pixel_cb, ad);
</pre>
<p>This callback function is provided for on-demand mode. Especially, if Evas GL uses <span style="font-family: Courier New,Courier,monospace">EVAS_GL_OPTIONS_DIRECT</span>, all OpenGL ES options are called in this callback function.</p>
<pre class="prettyprint">
static void img_pixel_cb(void *data, Evas_Object *obj)
{
&nbsp;&nbsp;&nbsp;// Define the model view projection matrix
&nbsp;&nbsp;&nbsp;float model[16], mvp[16];
&nbsp;&nbsp;&nbsp;static float view[16];
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;

&nbsp;&nbsp;&nbsp;Evas_Coord w, h;
&nbsp;&nbsp;&nbsp;evas_object_image_size_get(obj, &amp;w, &amp;h);

&nbsp;&nbsp;&nbsp;// Set up the context and surface as the current one
&nbsp;&nbsp;&nbsp;evas_gl_make_current(ad-&gt;evasgl, ad-&gt;sfc, ad-&gt;ctx);

&nbsp;&nbsp;&nbsp;// Initialize GL just once
&nbsp;&nbsp;&nbsp;if (ad-&gt;initialized == EINA_FALSE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;float aspect;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_shaders(ad);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glGenBuffers(1, &amp;ad-&gt;vbo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBindBuffer(GL_ARRAY_BUFFER, ad-&gt;vbo);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glBufferData(GL_ARRAY_BUFFER, 3 * 72 * 4, cube_vertices, GL_STATIC_DRAW);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init_matrix(view);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ad-&gt;surface_w &gt; ad-&gt;surface_h) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect = (float)ad-&gt;surface_w / ad-&gt;surface_h;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_ortho(view, -1.0 * aspect, 1.0 * aspect, -1.0, 1.0, -1.0, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspect = (float)ad-&gt;surface_h / ad-&gt;surface_w;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;view_set_ortho(view, -1.0, 1.0, -1.0 * aspect,  1.0 *aspect, -1.0, 1.0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ad-&gt;initialized = EINA_TRUE;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;glViewport(0, 0, ad-&gt;surface_w, ad-&gt;surface_h);
&nbsp;&nbsp;&nbsp;glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
&nbsp;&nbsp;&nbsp;glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

&nbsp;&nbsp;&nbsp;init_matrix(model);
&nbsp;&nbsp;&nbsp;rotate_xyz(model, ad-&gt;xangle, ad-&gt;yangle, 0.0f);
&nbsp;&nbsp;&nbsp;multiply_matrix(mvp, view, model);

&nbsp;&nbsp;&nbsp;glUseProgram(ad-&gt;program);
&nbsp;&nbsp;&nbsp;glBindBuffer(GL_ARRAY_BUFFER, ad-&gt;vbo);
&nbsp;&nbsp;&nbsp;glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 6, 0);
&nbsp;&nbsp;&nbsp;glEnableVertexAttribArray(0);

&nbsp;&nbsp;&nbsp;glBindBuffer(GL_ARRAY_BUFFER, ad-&gt;vbo);
&nbsp;&nbsp;&nbsp;glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 6, (void*)(sizeof(float)*3));
&nbsp;&nbsp;&nbsp;glEnableVertexAttribArray(1);

&nbsp;&nbsp;&nbsp;glUniformMatrix4fv(glGetUniformLocation(ad-&gt;program, &quot;mvpMatrix&quot;), 1, GL_FALSE, mvp);
&nbsp;&nbsp;&nbsp;glDrawArrays(GL_TRIANGLES, 0, 36);

&nbsp;&nbsp;&nbsp;glFlush();
}
</pre>
</li>

<li>Add animators.
<p>The scene does not get updated unless the object is marked as such. Games usually use an animator to have a regular update of the scene. The following example shows the default update refresh rate.</p>

<p>The animator callback function is also triggered when the display is off. Use the <span style="font-family: Courier New,Courier,monospace">ecore_animator_freeze()</span> and <span style="font-family: Courier New,Courier,monospace">ecore_animator_thaw()</span> functions in the <span style="font-family: Courier New,Courier,monospace">app_pause_cb</span> and <span style="font-family: Courier New,Courier,monospace">app_resume_cb</span> callbacks for power saving.</p>

<pre class="prettyprint">
static Eina_Bool animate_cb(void *data)
{
&nbsp;&nbsp;&nbsp;Evas_Object *img = data;

&nbsp;&nbsp;&nbsp;// Animate here when an animation tick happens and mark the image as &quot;dirty&quot;
&nbsp;&nbsp;&nbsp;// meaning it needs an update next time Evas renders it
&nbsp;&nbsp;&nbsp;evas_object_image_pixels_dirty_set(img, EINA_TRUE);

&nbsp;&nbsp;&nbsp;return ECORE_CALLBACK_RENEW;
}

static void
app_pause(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;ecore_animator_freeze(ad-&gt;ani);
}

static void
app_resume(void *data)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;ecore_animator_thaw(ad-&gt;ani);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_dirty_set()</span> function sets the dirty bit of the Evas Object image which is connected Evas GL. After that, the <span style="font-family: Courier New,Courier,monospace">evas_object_image_pixels_get_callback_set()</span> callback function is called whenever Evas renders.</p>
</li>

<li>Delete callbacks.
<p>The delete callback is triggered when the EvasGL is destroyed from the main loop. No other callback can be called on the same object afterwards.</p>
<pre class="prettyprint">
static void img_del_cb(void *data, Evas *e , Evas_Object *obj , void *event_info)
{
&nbsp;&nbsp;&nbsp;appdata_s *ad = data;
&nbsp;&nbsp;&nbsp;ecore_animator_del(ad-&gt;ani);

&nbsp;&nbsp;&nbsp;// Free the GL resources when image object is deleted
&nbsp;&nbsp;&nbsp;evas_gl_make_current(ad-&gt;evasgl, ad-&gt;sfc, ad-&gt;ctx);

&nbsp;&nbsp;&nbsp;glDeleteShader(ad-&gt;vtx_shader);
&nbsp;&nbsp;&nbsp;glDeleteShader(ad-&gt;fgmt_shader);
&nbsp;&nbsp;&nbsp;glDeleteProgram(ad-&gt;program);
&nbsp;&nbsp;&nbsp;glDeleteBuffers(1, &amp;ad-&gt;vbo);

&nbsp;&nbsp;&nbsp;evas_gl_surface_destroy(ad-&gt;evasgl, ad-&gt;sfc);
&nbsp;&nbsp;&nbsp;evas_gl_context_destroy(ad-&gt;evasgl, ad-&gt;ctx);
&nbsp;&nbsp;&nbsp;evas_gl_config_free(ad-&gt;cfg);

&nbsp;&nbsp;&nbsp;evas_gl_free(ad-&gt;evasgl);
}</pre>
</li>
</ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>