<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Piano Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mw_icon.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/media/video_audio_w.htm">HTML5 video and audio element Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/w3c/media/video_audio_tutorial_w.htm">HTML5 video and audio element Tutorial</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#audio">HTML5 audio element API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Piano Overview</h1> 
  <p>The Piano sample application demonstrates how you can create a piano application using the W3C Audio API. </p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/w3c/media/task_piano_w.htm">Piano task</a>.</p>
  <p>The following figure illustrates the main screen of the Piano.</p> 
  <p class="figure">Figure: Piano screen</p> 
  <p align="center"><img alt="Piano screen" src="../images/piano.png" /> </p> 
  <p> The application opens with the main screen, where you can see the piano keyboard. Click the keys to hear the sound. </p> 
 
  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains the CSS styling for the application UI.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file contains the code for handling the playing functionality of the application.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">images/</span></td> 
     <td>This directory contains the images used to create the user interface.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">sounds/</span></td> 
     <td>This directory contains sounds used by the application.</td> 
    </tr> 
   </tbody> 
  </table> 
  
  <h2>Implementation</h2>
 
 <p>The Piano sample application defines the <span style="font-family: Courier New,Courier,monospace">Piano</span> class that is used after the application starts.</p>
<pre class="prettyprint">
/* main.js */
var piano;

function Piano() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;return;
}

/*  Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
}());

piano = new Piano();
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace">DOMContentLoaded</span> event occurs, the <span style="font-family: Courier New,Courier,monospace">init()</span> method of the <span style="font-family: Courier New,Courier,monospace">Piano</span> object is called. It is responsible for application initialization and calls three other methods of Piano object: <span style="font-family: Courier New,Courier,monospace">cacheImages()</span>, <span style="font-family: Courier New,Courier,monospace">bindEvents()</span>, and <span style="font-family: Courier New,Courier,monospace">audioInit()</span>.</p>

<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype.init = function init() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.cacheImages();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.bindEvents();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audioInit();
&nbsp;&nbsp;&nbsp;};
}());

document.addEventListener(&#39;DOMContentLoaded&#39;, function onDocumentReady() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;piano.init();
});
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">cacheImages()</span> method loads all of the images that are used in the application to the browser memory. It prevents flickering during the first display of each image.</p>
<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Cache for pressed white piano key image.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @type HTMLImageElement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;whiteCache: null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Cache for pressed black piano key image.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @type HTMLImageElement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;blackCache: null
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;Piano.prototype.cacheImages = function cacheImages() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.whiteCache = new Image();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.whiteCache.src = &#39;images/white_pressed.png&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.blackCache = new Image();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.blackCache.src = &#39;images/black_pressed.png&#39;;
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">audioInit()</span> function initializes array of HTML audio elements, and defines its names and audio source files. Each HTML audio element corresponds to a specified piano keyboard key and is assigned to its own audio source file. The audio files are located in <span style="font-family: Courier New,Courier,monospace">sounds</span> folder of the application project.</p>
<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Audio tags for keys.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @type Array
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio: [],
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;Piano.prototype.audioInit = function audioInit() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt;= 13; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i] = document.createElement(&#39;audio&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i].name = i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.audio[i].src = &#39;sounds/&#39; + this.audio[i].name + &#39;.wav&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">bindEvents()</span> method binds all UI events used in application to its handler functions. In order to play sounds, the application uses handlers, which correspond to touch events such as <span style="font-family: Courier New,Courier,monospace">touchstart</span>, <span style="font-family: Courier New,Courier,monospace">touchmove</span>, and <span style="font-family: Courier New,Courier,monospace">touchend</span>.</p>
<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype.bindEvents = function bindEvents() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var keys = document.getElementsByTagName(&#39;body&#39;)[0]; /* Keys container */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.addEventListener(&#39;touchstart&#39;, this.onPianoKeyTouchDown.bind(this));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.addEventListener(&#39;touchmove&#39;, this.onPianoKeyTouchDown.bind(this));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keys.addEventListener(&#39;touchend&#39;, this.onPianoKeyTouchUp.bind(this));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function onTizenHwKey(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Error: &#39;, err);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">onPianoKeyTouchDown()</span> method handles the <span style="font-family: Courier New,Courier,monospace">touchstart</span> and <span style="font-family: Courier New,Courier,monospace">touchmove</span> events on keys of the piano keyboard. It iterates through the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> array supplied with the event object. For each touch element it checks whether the selected UI element is already touched. For this purpose it uses the global <span style="font-family: Courier New,Courier,monospace">touchPianoKey</span> array that stores information about touched key and corresponded touch identifier. As a result, the sound is played at first touch on the selected key of the piano keyboard. In such case the <span style="font-family: Courier New,Courier,monospace">touchPianoKey</span> array is updated and the selected keyboard key changes appearance to pressed (pressed CSS class added to the UI element). There is also the <span style="font-family: Courier New,Courier,monospace">releaseKey()</span> method that is called with some timeout. This method changes the appearance of the keyboard key to released, if there is no information about this key in the <span style="font-family: Courier New,Courier,monospace">touchPianoKey</span> array. In this case, the <span style="font-family: Courier New,Courier,monospace">releaseKey()</span> method is useful when the <span style="font-family: Courier New,Courier,monospace">touchmove</span> event occurs and it is necessary to change the appearance of the previously touched key while touch moving through the keyboard keys.</p>
<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/**
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Maps multitouch fingers to piano keys.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @type Array
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchPianoKey: [],
&nbsp;&nbsp;&nbsp;}; 

&nbsp;&nbsp;&nbsp;Piano.prototype.onPianoKeyTouchDown = function onPianoKeyTouchDown(eventData) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eventData.preventDefault();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var touch,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = eventData.changedTouches.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastKeyId;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Find multitouch finger touch event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touch = eventData.changedTouches[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Find piano key under this finger */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = document.elementFromPoint(touch.clientX, touch.clientY);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (element &amp;&amp; this.touchPianoKey[touch.identifier] !== element.id) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add/modify mapping for multitouch finger identifier to the piano key */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastKeyId = this.touchPianoKey[touch.identifier];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.touchPianoKey[touch.identifier] = element.id;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Release the last key under this finger */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(this.releaseKey.bind(this, lastKeyId), 10);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Play audio file for this piano key */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.playAudio(element.id.substr(3));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Change key&#39;s state to pressed */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element.classList.add(&#39;pressed&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">playAudio()</span> method plays sound for given audio ID. For this purpose it uses the previously initialized array of audio tags.</p>

<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype.playAudio = function playAudio(audioId) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var audio = this.audio[audioId];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (audio) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (audio.currentTime !== 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio.currentTime = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (audio.paused) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;audio.play();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">releaseKey()</span> method checks whether the information about keyboard key with given ID is not inside the <span style="font-family: Courier New,Courier,monospace">touchPianoKey</span> array. In such case, the appearance of the key is changed to released.</p>

<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype.releaseKey = function releaseKey(keyId) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Change key&#39;s state to normal */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var stillPressed = false,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = this.touchPianoKey.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (keyId === undefined) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Check for every multitouch event fingers */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.touchPianoKey[i] === keyId) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This piano key is still pressed with another finger */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stillPressed = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If key is no longer pressed, change its state to normal */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!stillPressed) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(keyId).classList.remove(&#39;pressed&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">onPianoKeyTouchUp()</span> method handles the <span style="font-family: Courier New,Courier,monospace">touchend</span> event on the keys of the piano keyboard. It iterates through the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> array supplied with the event object. For each touch element it removes the information about the key and corresponded touch from the <span style="font-family: Courier New,Courier,monospace">touchPianoKey</span> array. At the end the <span style="font-family: Courier New,Courier,monospace">releaseKey()</span> method is called to change the appearance of the released key.</p>

<pre class="prettyprint">
/* main.js */
/* Definition of the Piano class */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;Piano.prototype.onPianoKeyTouchUp = function onPianoKeyTouchUp(eventData) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var touchId,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyId,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = eventData.changedTouches.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Find multitouch finger touch event identifier */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchId = eventData.changedTouches[i].identifier;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Find piano key that was pressed */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyId = this.touchPianoKey[touchId];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Remove mapping for multitouch finger identifier to the piano key */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.touchPianoKey[touchId] = undefined;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Release the piano key */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(this.releaseKey.bind(this, keyId), 10);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre>
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>