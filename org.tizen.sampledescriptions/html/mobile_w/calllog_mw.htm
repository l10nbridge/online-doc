<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>CallLog Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/social/call_history_w.htm">Call History Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/tizen/social/call_history_tutorial_w.htm">Call History Tutorial</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/callhistory.html">Callhistory API</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html">Contact API</a></li>
			
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>CallLog Overview</h1> 
  <p>The CallLog sample application demonstrates how you can view the detailed call history from the device or from a specific caller. </p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/tizen/social/task_calllog_w.htm">Call Log task</a>.</p>
  <p>The following figure illustrates the main screens of the CallLog.</p> 
  <p class="figure">Figure: CallLog screens</p> 
  <p align="center"><img alt="CallLog screens" src="../images/calllog.png" /> </p> 
  <p>The application opens with the main screen that shows the recent call history. On the <strong>History for caller</strong> screen, click:</p> 
  <ul> 
   <li><strong>Call</strong> to make a call.</li> 
   <li><strong>Message</strong> to send an SMS.</li> 
   <li><strong>DELETE</strong> to delete call history items.</li> 
  </ul>
  <h2>Prerequisites</h2> 
  <ul> 
   <li>An active SIM card</li> 
   <li>If the call history is empty, the application cannot be used.</li> 
   <li>The application does not work on the Emulator.</li>
    <li>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/application.launch</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/callhistory.read</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/callhistory.write</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.read</span></li>
 </ul>  </li>  
  </ul> 
  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
	  <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.config.js</span></td> 
     <td>This file allows storing the configuration values.</td> 
    </tr> 
	  <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.helpers.js</span></td> 
     <td>This file contains the helper functions used by the application.</td> 
    </tr>  
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file defines the main application class.</td> 
    </tr>  
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.model.js</span></td> 
     <td>This file handles the data used by the common part of the application.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.js</span></td> 
     <td>This file handles the application UI.</td> 
    </tr>  
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.templateManager.js</span></td> 
     <td>This file contains the <span style="font-family: Courier New,Courier,monospace">TemplateManager</span> class that manages, caches, and provides HTML templates.</td> 
    </tr> 
	<tr>  
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.templateManager.modifiers.js</span></td> 
     <td>This file contains the filters used in the templates.</td> 
    </tr> 
	<tr>
	  <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file starts the application.</td> 
    </tr> 	
	<tr>
	  <td><span style="font-family: Courier New,Courier,monospace">images/</span></td> 
     <td>This directory contains the images used to create the user interface.</td> 
    </tr> 	
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">templates/</span></td> 
     <td>This directory contains the layout for the application screens, and templates for smaller UI components.</td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr>
   </tbody> 
  </table> 
    
<h2 id="implementation">Implementation</h2>
<p>On initialization of the application layout, the Contact API is used to get phone contacts.</p>
<pre class="prettyprint">
/* app.ui.js */
init: function Ui_init() 
{
&nbsp;&nbsp;&nbsp;/* Load contacts */
&nbsp;&nbsp;&nbsp;this.loadContacts();
&nbsp;&nbsp;&nbsp;this.templateManager = new TemplateManager();
&nbsp;&nbsp;&nbsp;this.helpers = new Helpers();
&nbsp;&nbsp;&nbsp;$(document).ready(this.domInit.bind(this));
&nbsp;&nbsp;&nbsp;$.mobile.tizen.disableSelection(document);
},
</pre>
<p>On successfully getting contacts, they are assigned to UI class variable <span style="font-family: Courier New,Courier,monospace">contactsLoaded</span>.</p>
<pre class="prettyprint">
/* app.ui.js */
loadContacts: function Ui_loadContacts(callback) 
{
&nbsp;&nbsp;&nbsp;var contactsFoundCB, errorCB;

&nbsp;&nbsp;&nbsp;this.contactsLoaded = null;

&nbsp;&nbsp;&nbsp;contactsFoundCB = function onContactsFindSuccess(contacts) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.contactsLoaded = contacts;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (callback instanceof Function) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;errorCB = function onContactFindError(error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;console.error(&#39;Model_loadContacts, problem with find() method: &#39; + error.message);
&nbsp;&nbsp;&nbsp;};

/* Load contacts */
this.addressBook.find(contactsFoundCB.bind(this), errorCB);
},
</pre>
<p>The application main page uses the Callhistory API to display a list of made and received calls. The following method initializes the UI pages. The Callhistory API is used in the <span style="font-family: Courier New,Courier,monospace">app.showCallHistory()</span> method to get the call history.</p>
<pre class="prettyprint">
/* app.ui.js */
initPages: function Ui_initPages() 
{
&nbsp;&nbsp;&nbsp;var pages = [], body = $(&#39;body&#39;);

&nbsp;&nbsp;&nbsp;body
&nbsp;&nbsp;&nbsp;.append(this.templateManager.get(&#39;messageWindow&#39;))
&nbsp;&nbsp;&nbsp;.append(this.templateManager.get(&#39;errorWindow&#39;))
&nbsp;&nbsp;&nbsp;.trigger(&#39;create&#39;);
&nbsp;&nbsp;&nbsp;.append($(this.templateManager.get(&#39;callView&#39;)).children())
&nbsp;&nbsp;&nbsp;.trigger(&#39;pagecreate&#39;)
&nbsp;&nbsp;&nbsp;.trigger(&#39;pageshow&#39;);
&nbsp;&nbsp;&nbsp;pages.push(this.templateManager.get(&#39;callerHistory&#39;));
&nbsp;&nbsp;&nbsp;body.append(pages.join(&#39;&#39;));
&nbsp;&nbsp;&nbsp;this.removeSearchBarToHeader();

&nbsp;&nbsp;&nbsp;this.addEvents();

&nbsp;&nbsp;&nbsp;/* Show call history */
&nbsp;&nbsp;&nbsp;app.showCallHistory();

&nbsp;&nbsp;&nbsp;this.photoURIdefault = $(&#39;#header .photo&#39;).css(&#39;background-image&#39;);
},
</pre>

<p>The following method calls the model method. The success function <span style="font-family: Courier New,Courier,monospace">this.ui.showCallHistory.bind(this.ui)</span> is rendering the call history list method (<span style="font-family: Courier New,Courier,monospace">js/app.ui.js</span> <span style="font-family: Courier New,Courier,monospace">showCallHistory</span> shown lower).</p>
<pre class="prettyprint">
/* app.js */
showCallHistory: function App_showCallHistory() 
{
&nbsp;&nbsp;&nbsp;this.model.getCallHistory(this.ui.showCallHistory.bind(this.ui));
},    
</pre>
<p>The method sorts the list of connections by start time, where each element is a collection of data, such as a remote phone number, call start time, or call duration (see interface of <span style="font-family: Courier New,Courier,monospace">CallHistoryEntry</span>).</p>
<pre class="prettyprint">
/* app.model.js */
getCallHistory: function Model_getCallHistory(onSuccess, onError) 
{
&nbsp;&nbsp;&nbsp;if (typeof onError !== &#39;function&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError = function onCallHistoryFindError(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Model_getCallHistory error&#39;, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;tizen.callhistory.find(onSuccess, onError, null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new tizen.SortMode(&#39;startTime&#39;, &#39;DESC&#39;));
},
</pre>
    
<p>The following method call is the <span style="font-family: Courier New,Courier,monospace">onSuccess</span> function using <span style="font-family: Courier New,Courier,monospace">callEntries</span> to fill the call list. Callers are grouped by phone numbers.</p>
<pre class="prettyprint">
/* app.ui.js */
showCallHistory: function Ui_showCallHistory(callEntries) 
{
&nbsp;&nbsp;&nbsp;var self = this,

&nbsp;&nbsp;&nbsp;/* Return duplicated entries */
&nbsp;&nbsp;&nbsp;function filterForSameEntry(element) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return self.getNumber(current) === self.getNumber(element) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current.direction === element.direction;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; len; i = i + 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;current = callEntries[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = this.helpers.toNativeDate(current.startTime);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If the date is changed, create a new dayLog */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Group the entries by remote party */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterResult = dayLog.entries.filter(filterForSameEntry);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/* Create UL list with dividers */
&nbsp;&nbsp;&nbsp;calllogListContentPos = this.helpers.getScrollPosition(calllogListContent);
&nbsp;&nbsp;&nbsp;calllogList.empty().append(elements);
&nbsp;&nbsp;&nbsp;/* Searching phrase */

&nbsp;&nbsp;&nbsp;setTimeout(this.helpers.scrollTo.bind(this, calllogListContent, calllogListContentPos), 10);
},
</pre>

<p>By tapping on a list element on the main page, the page changes to the Caller details view with a list of connections. You can use a filter in the <span style="font-family: Courier New,Courier,monospace">find()</span> method to reduce the search result by a specified phone number.</p>
<pre class="prettyprint">
/* app.model.js */
getCallHistoryForCaller: function Model_getCallHistoryForCaller(phoneNumber, onSuccess) 
{
&nbsp;&nbsp;&nbsp;var filter = null, success;
&nbsp;&nbsp;&nbsp;if (phoneNumber) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter = new tizen.AttributeFilter(&#39;remoteParties.remoteParty&#39;, &#39;EXACTLY&#39;, phoneNumber);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success = onSuccess;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;success = function onCallHistoryFindSuccess(calls) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuccess(calls.filter(function onIterate(element) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!element.remoteParties[0].remoteParty) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return element;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp; tizen.callhistory.find(success, function onCallHistoryFindError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(e);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;filter,
&nbsp;&nbsp;&nbsp;new tizen.SortMode(&#39;startTime&#39;, &#39;DESC&#39;));
},
</pre>

<p>On the Caller details view the following actions can be made:</p>

<ul>
<li><p>Calling by clicking the <strong>Call</strong> button. The Application API is used to make a call. The <span style="font-family: Courier New,Courier,monospace">ApplicationControl</span> interface is used to launch other applications. To respond to the call log by calling, specify the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/dial</span> operation and the contact number as parameters.</p>
<pre class="prettyprint">
/* app.uj.js */
$(&#39;#callActionBtn&#39;).on(&#39;click&#39;, function onCallBtnClick() 
{
&nbsp;&nbsp;&nbsp;self.lockButtons(&#39;#callActionBtn, #smsActionBtn&#39;);
&nbsp;&nbsp;&nbsp;self.hideCheckboxes();
&nbsp;&nbsp;&nbsp;self.lockButtons(&#39;#deleteActionBtn&#39;);
&nbsp;&nbsp;&nbsp;app.makeCall($(&#39;#forCallerList&#39;).data(&#39;remoteParty&#39;));
});

/* app.js */
makeCall: function App_makeCall(phoneNumber) 
{
&nbsp;&nbsp;&nbsp;var self = this,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appControl = new tizen.ApplicationControl(&#39;http://tizen.org/appcontrol/operation/call&#39;, &#39;tel:&#39; + phoneNumber);
&nbsp;&nbsp;&nbsp;tizen.application.launchAppControl(
&nbsp;&nbsp;&nbsp;appControl,
&nbsp;&nbsp;&nbsp;null,
&nbsp;&nbsp;&nbsp;function onCallSuccess() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function unlockButtons() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ui.unlockButtons();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1500);
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;function onCallError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;console.error(&#39;Call to &#39; + phoneNumber + &#39; failed. Call service is unavailable.&#39;, e);
&nbsp;&nbsp;&nbsp;self.ui.showErrorPopup(&#39;Call failed. &#39; + &#39;Call service is unavailable.&#39;);  self.ui.unlockButtons();
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onsuccess: function onCallSuccess() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ui.unlockButtons();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onfailure: function onCallError(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;App_makeCall: Call to &#39; + phoneNumber + &#39; failed. Call service was busy.&#39;, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.ui.unlockButtons();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;},
</pre>
</li>
<li><p>Sending a message by clicking the <strong>Message</strong> button.</p>
<pre class="prettyprint">
/* app.ui.js */
&nbsp;&nbsp;&nbsp;$(&#39;#smsActionBtn&#39;).on(&#39;click&#39;, function onSmsBtnClick(event) 
{
&nbsp;&nbsp;&nbsp;event.stopPropagation();
&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;self.lockButtons(&#39;#smsActionBtn, #callActionBtn&#39;);
&nbsp;&nbsp;&nbsp;self.hideCheckboxes();
&nbsp;&nbsp;&nbsp;self.lockButtons(&#39;#deleteActionBtn&#39;);
&nbsp;&nbsp;&nbsp;/* Send SMS */
&nbsp;&nbsp;&nbsp;app.sendSms($(&#39;#forCallerList&#39;).data(&#39;remoteParty&#39;));
});
</pre>

<p>To respond to the call log by sending a message, specify the <span style="font-family: Courier New,Courier,monospace">http://tizen.org/appcontrol/operation/compose</span> operation and the contact number as parameters.</p>
<pre class="prettyprint">
/* app.js */
sendSms: function App_sendSms(phoneNumber) 
{
&nbsp;&nbsp;&nbsp;var self = this,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appControl = new tizen.ApplicationControl(&#39;http://tizen.org/appcontrol/operation/compose&#39;, &#39;sms:&#39; + phoneNumber);

&nbsp;&nbsp;&nbsp;tizen.application.launchAppControl(appControl, null, null, function onSendMessageError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Message launch error: &#39;, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ui.showErrorPopup(&#39;Message service is unavailable&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.unlockOptionButtons();
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onfailure: function onSendMessageError(er) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Message service launch error: &#39;, er);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.ui.showErrorPopup(&#39;Message service is unavailable&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.unlockOptionButtons();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
},
</pre>
</li>
<li><p>Deleting the log entries by clicking the <strong>DELETE</strong> button on the bottom of the screen.</p>
<p>To remove an entry from the call history, use the <span style="font-family: Courier New,Courier,monospace">tizen.callhistory.remove</span> method with <span style="font-family: Courier New,Courier,monospace">CallHistoryEntry</span> argument. Removing is realized in a loop that depends on the checked call logs to delete the checked call log entries.</p>
<p>First, there is a call to an <span style="font-family: Courier New,Courier,monospace">app.js</span> method with the specified entry.</p>
<pre class="prettyprint">
/* app.ui.js */
deleteCheckedLogs: function Ui_deleteCheckedLogs(e) 
{
&nbsp;&nbsp;&nbsp;/* If there is popup open, close it */
&nbsp;&nbsp;&nbsp;this.closePopup();

&nbsp;&nbsp;&nbsp;/* Uncheck SelectAll checkbox */
&nbsp;&nbsp;&nbsp;this.selectCheckbox($(&#39;#selectAllDetails&#39;), false);

&nbsp;&nbsp;&nbsp;/* Iterate through all entries */
&nbsp;&nbsp;&nbsp;$(&#39;#forCallerList li.call&#39;).each(function onCallEntryIterate() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If entry contains selected checkbox */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ($(this).find(&#39;form label&#39;).hasClass(&#39;ui-checkbox-on&#39;)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Remove that entry */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.deleteLog($(this).data(&#39;entries&#39;)[0]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Remove connected HTML element */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(this).remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}
</pre>
    
<p>Then, the following method calls for the model method.</p>
<pre class="prettyprint">
/* app.js */
deleteLog: function App_deleteLogs(entry) 
{
&nbsp;&nbsp;&nbsp;this.model.deleteLog(entry);
},
</pre>
<p>The following model method uses the API to delete a given entry from the call history.</p>
<pre class="prettyprint">
/* app.model.js */
deleteLog: function Model_deleteLog(entry) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.callhistory.remove(entry);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error on entry delete: &#39; + e.message);
&nbsp;&nbsp;&nbsp;}
},
</pre>
<p>The Application API is used to exit the application in the exit method of the app module.</p>
<pre class="prettyprint">
/* app.js */
exit: function App_exit(event) 
{
&nbsp;&nbsp;&nbsp;if (event instanceof Event) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event.stopPropagation();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
}
</pre>
</li>
</ul>
	
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>