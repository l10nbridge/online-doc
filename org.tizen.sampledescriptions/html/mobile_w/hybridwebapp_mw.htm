<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>HybridWebApp Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a target="_blank" href="http://www.w3.org/TR/2011/CR-websockets-20111208/">WebSocket</a></li> 
			<li><a target="_blank" href="http://api.jquery.com/">jQuery Library</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messageport.html">Message Port API</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>HybridWebApp Sample Overview</h1> 
  <p>The Hybrid Web App illustrates the communication between the applications installed on the device.</p> 
<p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p> 
 <p>The following figure illustrates the main screen of the HybridWebApp.</p> 
  <p class="figure">Figure: HybridWebApp screen</p> 
  <p align="center"><img alt="HybridWebApp screen" src="../images/hybridwebapp_sd.png" /> </p> 
  <p>The application has only one screen. The screen consists of a log list and the <strong>START</strong>, <strong>STOP</strong>, and <strong>CLEAR</strong> buttons. The <strong>START</strong> button invokes the initialization of the communication and sending the start message to the service. The <strong>STOP</strong> button invokes sending the exit message to the service and finishing the communication. The <strong>CLEAR</strong> button clears the log list.</p> 
  
  <h2>Prerequisites</h2> 
  <ul> 
   <li><p>A target with Hybrid Service Sample Application installed.</p></li>
  </ul> 
  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
  <caption>Table: Source files</caption>
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains the CSS styling for the application UI.</td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file contains the application code.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/config.js</span></td> 
     <td>This file contains the initial configuration of the UI framework executed when the application is being initialized.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr> 
   </tbody> 
  </table> 
  
<h2>Implementation</h2> 
<p>The scenario of the communication between the client Web application and the service application is as follows:</p>
<ol>
<li>When user taps the <strong>START</strong> button:
<ol type="a">
<li>Client sends the connect message.</li>
<li>Service sends back the welcome message.</li>
<li>Client sends the start message.</li>
<li>Service sends back the started message.</li>
</ol></li>
<li>When user taps the <strong>STOP</strong> button: 
<ol type="a">
<li>Client sends the stop message.</li>
<li>Service sends back the stopped message.</li>
<li>Client sends the exit message.</li>
<li>Service sends back the exit message.</li>
</ol></li></ol>

<p>The implemented methods use some constant strings, so define them at the start:</p>
<pre class="prettyprint">
var gServiceAppId = &#39;org.tizen.hybridefl&#39;,
gServicePortName = &#39;SAMPLE_PORT&#39;,
gLocalMessagePortName = &#39;SAMPLE_PORT_REPLY&#39;;
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">gServiceAppId</span> constant is the ID of the service application. The <span style="font-family: Courier New,Courier,monospace">gServicePortName</span> constant is the name of the remote message port used by the service. The <span style="font-family: Courier New,Courier,monospace">gLocalMessagePortName</span> constant is the name of the message port used by the Web application.</p>
<p>The following method is called when the <strong>START</strong> button is pressed.</p>
<pre class="prettyprint">
function start() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getAppsContext(onGetAppsContextSuccess, onGetAppsContextError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (exc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>This method calls the <span style="font-family: Courier New,Courier,monospace">tizen.application.getAppsContext()</span> method in order to obtain contexts of all apps running on the device and pass them to the specified callback.</p>

<p>The callback checks whether the service application is launched. If it is running, the <span style="font-family: Courier New,Courier,monospace">startMessagePort()</span> method is called. Otherwise the <span style="font-family: Courier New,Courier,monospace">launchServiceApp()</span> method is executed.</p>
<p>To check whether the service is running, the method checks whether any application context of the specified array has an <span style="font-family: Courier New,Courier,monospace">appId</span> equal to the <span style="font-family: Courier New,Courier,monospace">gServiceAppId</span> variable. The service launches if the values match.
</p>
<pre class="prettyprint">
function onGetAppsContextSuccess(contexts) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var i, appInfo;
&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; contexts.length; i = i + 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appInfo = tizen.application.getAppInfo(contexts[i].appId);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (exc) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (appInfo.id === gServiceAppId) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Running Service App found&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (i &gt;= contexts.length) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&#39;Running Service App not found. Trying to launch it&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;launchServiceApp();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startMessagePort();
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The following method launches the service by calling the <span style="font-family: Courier New,Courier,monospace">tizen.application.launch()</span> method with ID of the service and callbacks passed as input parameters:</p>
<pre class="prettyprint">
function launchServiceApp() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;function onSuccess() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;start();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;function onError(err) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.launch(gServiceAppId, onSuccess, onError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (exc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>When the operation is finished successfully, the <span style="font-family: Courier New,Courier,monospace">onSuccess</span> callback executes the start method again. This time the <span style="font-family: Courier New,Courier,monospace">startMessagePort()</span> method is executed by the <span style="font-family: Courier New,Courier,monospace">onGetAppsContextSuccess()</span> method because the service is launched.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">startMessagePort()</span> method:</p>
<ol>
<li>Creates local message port by calling the <span style="font-family: Courier New,Courier,monospace">tizen.messageport.requestLocalMessagePort()</span> method.</li>
<li>Registers a listener method on the port. The method calls the <span style="font-family: Courier New,Courier,monospace">onReceive()</span> method discussed further.</li>
<li>Calls the <span style="font-family: Courier New,Courier,monospace">tizen.messageport.requestRemoteMessagePort()</span> method to obtain reference to the remote message port created by the service.</li>
<li>Sends the connect command to the service by calling the <span style="font-family: Courier New,Courier,monospace">sendCommand()</span> method.</li>
</ol>

<pre class="prettyprint">
function startMessagePort() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gLocalMessagePort = tizen.messageport.requestLocalMessagePort(gLocalMessagePortName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gLocalMessagePortWatchId = gLocalMessagePort
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.addMessagePortListener(function onDataReceive(data, remote) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onReceive(data, remote);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)  
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gRemoteMessagePort = tizen.messageport
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.requestRemoteMessagePort(gServiceAppId, gServicePortName);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;sendCommand(&#39;connect&#39;);
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">sendCommand()</span> method sends a message to the service using the remote message port. The message is a JSON object in the following form:</p>
<pre class="prettyprint">
{  
&nbsp;&nbsp;&nbsp;key: &#39;command&#39;, 
&nbsp;&nbsp;&nbsp;value: value 
}
</pre>
<p>The value field is a name of the command.</p>

<pre class="prettyprint">
function sendCommand(command) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;gRemoteMessagePort.sendMessage([{key: &#39;command&#39;, value: command}], gLocalMessagePort);
}
</pre>
<p>When the <strong>STOP</strong> button is clicked, the following method is called:</p>
<pre class="prettyprint">
function onStopBtnTap() 
{
&nbsp;&nbsp;&nbsp;sendCommand(&#39;stop&#39;);
}
</pre>
<p>This method sends the stop command to the service.</p>

<p>The application receives messages from the service by the following method:</p>
<pre class="prettyprint">
function onReceive(data) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var message, i;

&nbsp;&nbsp;&nbsp;for (i in data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (data.hasOwnProperty(i) &amp;&amp; data[i].key === &#39;server&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message = data[i].value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (message === &#39;WELCOME&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendCommand(&#39;start&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (message === &#39;stopped&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendCommand(&#39;exit&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (message === &#39;exit&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gLocalMessagePort
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.removeMessagePortListener(gLocalMessagePortWatchId);            
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The method above checks the received message and sends the suitable commands to fulfill the scenario described in the beginning of the chapter.</p>
<p>After receiving the exit message from the server, the local message port is closed by calling the <span style="font-family: Courier New,Courier,monospace">removeMessagePortListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">gLocalMessagePort</span> object.</p>

  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>