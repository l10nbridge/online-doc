<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>EventManager Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/social/calendar_w.htm">Calendar Guide</a></li> 			
			<li><a href="../../../org.tizen.tutorials/html/web/tizen/social/calendar_tutorial_w.htm">Calendar Tutorial</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/calendar.html">Calendar API</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/time.html">Time API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>EventManager Overview</h1> 
  <p>The EventManager sample application demonstrates how you can add, edit, and delete calendar events in your application.</p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/tizen/social/task_eventmanager_w.htm">Event Manager task</a>.</p>
  <p>The following figure illustrates the main screens of the EventManager. </p> 
  <p class="figure">Figure: EventManager screens</p> 
  <p align="center"><img alt="EventManager screens" src="../images/eventmanager.png" /> </p> 
  <p>The application opens with the Event Manager main screen, where all registered calendar events (for specified date) are displayed with detailed info including the event name, start date, and end date. Each list entry has two buttons that allow editing or removing the selected event.</p>

<p>To show events for a specific date, click the date field below application header, select the date and confirm with the <strong>Set</strong> button. The application filters the events and shows the list for the selected date.</p>

<p>To add a new event, click the <strong>New Event</strong> button. Enter the event name, select the event type (period, all day), and select the start and end dates. To set an alarm for the event, click the <strong>Set</strong> button and select the proper time on the <strong>Set alarm</strong> screen. Finally confirm the event data with the <strong>Save</strong> button. </p>

<p>To edit an event, click the Edit icon next to the event entry on the main screen. Apply changes on the <strong>Event details</strong> screen and confirm them by clicking the <strong>Save</strong> button.</p>

<p>To remove an event, click the Remove icon next to the event entry on the main screen.</p>

  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application stars loading. It contains the layout of the application screens.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">app.js</span></td> 
     <td>This is a starting file from which the JavaScript code stars loading.</td> 
    </tr> 
	    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td> 
     <td>This directory contains the application code.</td> 
    </tr> 
    
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/duration.js</span></td> 
     <td>This file contains functions that help with the conversion to and from <span style="font-family: Courier New,Courier,monospace">tizen.TimeDuration</span> object.</td> 
    </tr> 
   
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/models/calendar.js</span></td> 
     <td>This file contains functions that help working with the Calendar API.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/models/date.js</span></td> 
     <td>This file contains functions that help working with the Time API.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/models/filter.js</span></td> 
     <td>This file contains functions that help working with the filters.</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/alarm.js</span></td> 
     <td>This file contains code that handles interaction with the alarm page.</td> 
    </tr>
	    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/edit.js</span></td> 
     <td>This file contains code that handles interaction with the edit page.</td> 
    </tr> 
    
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/main.js</span></td> 
     <td>This file contains code that handles interaction with the main page.</td> 
    </tr> 
   
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/views/popup.js</span></td> 
     <td>This file contains code that handles interaction with popups.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td> 
     <td>This directory contains the application framework.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/</span></td> 
     <td>This directory contains external libraries (TAU library).</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains the CSS styling for the application UI.</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">templates/</span></td> 
     <td>This directory contains layouts of the application screens and templates for smaller elements of the user interface.</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">images/</span></td> 
     <td>This directory contains the images used to create the user interface.</td> 
    </tr> 	
   </tbody> 
  </table> 
  
  
  <h2>Implementation</h2>
  
  <p>When the application starts, the calendar instance is retrieved.</p>
<pre class="prettyprint">
/* js/models/calendar.js */
try 
{
&nbsp;&nbsp;&nbsp;defaultCalendar = tizen.calendar.getDefaultCalendar(&#39;EVENT&#39;);
} catch (error) 
{
&nbsp;&nbsp;&nbsp;(...)
}
</pre>
<p>After that, a change listener is registered using the <span style="font-family: Courier New,Courier,monospace">addChangeListener()</span> function.</p>

<pre class="prettyprint">
/* js/views/main.js */
changeListener = 
{
&nbsp;&nbsp;&nbsp;/* Called when new items are added */
&nbsp;&nbsp;&nbsp;onitemsadded: function onItemsAdded() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getEvents();
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;/* Called when items are updated */
&nbsp;&nbsp;&nbsp;onitemsupdated: function onItemsUpdated() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getEvents();
&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;/* Called when items are removed */
&nbsp;&nbsp;&nbsp;onitemsremoved: function onItemsRemoved() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getEvents();
&nbsp;&nbsp;&nbsp;}
};

/* js/models/calendar.js */
/**
* Adds a callback for the change listener
* @param {object} changeCallback
* @returns {number} Listener id
*/
function addChangeListener(changeCallback) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return defaultCalendar.addChangeListener(changeCallback);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>At the start of the application, the <span style="font-family: Courier New,Courier,monospace">getEvents()</span> function is also invoked. It reads the value of the date picker component placed in the header on the main screen. Afterwards the <span style="font-family: Courier New,Courier,monospace">find()</span> function from the calendar is invoked with the proper callback and date filter passed as parameters.</p>
<pre class="prettyprint">
/* js/views/main.js */
/* Retrieves the filtered events from the calendar */
function getEvents() 
{
&nbsp;&nbsp;&nbsp;var eventFilter = document.getElementById(&#39;event-filter&#39;);

&nbsp;&nbsp;&nbsp;calendar.find(onEventsFound, filter.getDateFilter(new Date(eventFilter.value)));
}

/* js/models/calendar.js */
/**
* Finds events in the calendar by a given filter
* @param {function} successCB Called when find returns data
* @param {tizen.CompositeFilter} filter Filter for returned events
*/
function find(successCB, filter) 
{
&nbsp;&nbsp;&nbsp;var sortingMode = null;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortingMode = new tizen.SortMode(&#39;startDate&#39;, &#39;ASC&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultCalendar.find(successCB, errorCallback, filter, sortingMode);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The filters are very useful in finding events with a specific data. There are simple filters like <span style="font-family: Courier New,Courier,monospace">tizen.AttributeRangeFilter</span>, which is used to find data between two values. A more advanced filter, <span style="font-family: Courier New,Courier,monospace">tizen.CompositeFilter</span>, is used to group multiple filters into one.</p>

<pre class="prettyprint">
/* js/models/filter.js */
/**
* Creates a filter for selecting events on the given day
* @param {Date} date
* @return {tizen.CompositeFilter}
*/
function getDateFilter(date) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var beginOfToday = new tizen.TZDate(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endOfToday = new tizen.TZDate(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startsBeforeEndOfToday = new tizen.AttributeRangeFilter(&#39;startDate&#39;, null, endOfToday),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endsAfterBeginOfToday = new tizen.AttributeRangeFilter(&#39;endDate&#39;, beginOfToday, null);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return filtersIntersection([startsBeforeEndOfToday, endsAfterBeginOfToday]);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}

/**
* Creates an intersection of filters
* @param {AbstractFilter[]} arr
* @returns {tizen.CompositeFilter}
*/
function filtersIntersection(arr) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new tizen.CompositeFilter(&#39;INTERSECTION&#39;, arr);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>New events can be added to the calendar by clicking the <strong>New Event</strong> button on the main page. This invokes the <span style="font-family: Courier New,Courier,monospace">add()</span> function in the Calendar API. Optionally, an alarm can be set to let you know about the event.</p>

<pre class="prettyprint">
/* js/models/calendar.js */
/**
* Adds new event to default calendar
* @param {string} summary Event summary
* @param {boolean} isAllDay Is event all day
* @param {tizen.TZDate} startDate Event start date
* @param {tizen.TZDate} endDate Event end date
* @param {tizen.CalendarAlarm} alarm Event alarm
* @returns {tizen.CalendarEvent} Created calendar event
*/
function add(summary, isAllDay, startDate, endDate, alarm) 
{
&nbsp;&nbsp;&nbsp;var item = null;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item = new tizen.CalendarEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;summary: summary,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isAllDay: isAllDay,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startDate: startDate,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endDate: endDate,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alarms: [alarm]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultCalendar.add(item);
&nbsp;&nbsp;&nbsp;return item;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}

/**
* Returns an alarm object for the given time duration
* @param {tizen.TimeDuration} timeDuration Time duration
* @returns {tizen.CalendarAlarm} Created alarm
*/
function createAlarm(timeDuration) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;return new tizen.CalendarAlarm(timeDuration, &#39;SOUND&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The events can be also updated by retrieving an instance of the event from the calendar, updating the fields, and invoking the <span style="font-family: Courier New,Courier,monospace">update()</span> method.</p> 
<pre class="prettyprint">
/* js/models/calendar.js */
/**	
* Updates the calendar event
* @param {number} id Id of event to update
* @param {string} summary Event summary
* @param {boolean} isAllDay Is event all day
* @param {tizen.TZDate} startDate Event start date
* @param {tizen.TZDate} endDate Event end date
* @param {tizen.CalendarAlarm} alarm Event alarm
*/
function update(id, summary, isAllDay, startDate, endDate, alarm) 
{
&nbsp;&nbsp;&nbsp;var item = get(id);
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.summary = summary;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.isAllDay = isAllDay;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.startDate = startDate;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.endDate = endDate;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item.alarms = [alarm];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultCalendar.update(item);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}

/**
* Retrieves an event with the given ID from the calendar
* @param {number} id Event id
* @returns {tizen.CalendarEvent} Event retrieved from calendar
*/
function get(id) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return defaultCalendar.get(new tizen.CalendarEventId(id));
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>Removing an event from the calendar can be done by simply passing the event ID to the <span style="font-family: Courier New,Courier,monospace">remove()</span> function.</p>

<pre class="prettyprint">
/* js/models/calendar.js */
/**
* Removes an event with the given ID from the calendar.
* @param {number} id Event id
*/
function remove(id) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultCalendar.remove(new tizen.CalendarEventId(id));
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;}
}
</pre>
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>