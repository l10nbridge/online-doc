<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Calculator Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
		   <li><a href="../../../org.tizen.guides/html/web/tizen/system/system_info_w.htm">System Information Guide</a></li> 
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html">System Information API</a></li>
		   <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li>   
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Calculator Sample Overview</h1> 
  <p>The Calculator sample application demonstrates how you can create a calculator with basic mathematical operations.</p> 
 <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
 <p>The following figure illustrates the main screen of the Calculator.</p> 
  <p class="figure">Figure: Calculator screen</p> 
  <p align="center"><img alt="Calculator screen" src="../images/calculator_sd_mw.png" /> </p> 
  <p>The application opens with the Calculator screen, where you can perform mathematical operations by clicking the applicable buttons.</p>

  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  
  <p>The application uses a simple MVC (Model-View-Controller) architectural model.</p>
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
	<tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains the CSS styling for the application UI.</td>
  </tr>
	<tr>
    <td><span style="font-family: Courier New,Courier,monospace">img/</span></td>
    <td>This directory contains the images used to create the user interface.</td>
  </tr>  
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td> 
     <td>This directory contains the application code.</td> 
    </tr>	
	 <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file contains the code for the main application module used for initialization (Controller layer).</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/model.js</span></td> 
     <td>This file contains the application model for handling mathematical operations (Model Layer).</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/systeminfo.js</span></td> 
     <td>This file contains the battery state handling code.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/ui.js</span></td> 
     <td>This file contains the implementation code for the user interface (View layer).</td> 
    </tr> 	
   </tbody> 
  </table> 
  
<h2>Implementation</h2>
<p>All JavaScript files are loaded directly from the <span style="font-family: Courier New,Courier,monospace">index.html</span> file. There is also initialization started by calling the <span style="font-family: Courier New,Courier,monospace">init()</span> method of the <span style="font-family: Courier New,Courier,monospace">app</span> module, which acts as an application controller.</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;script src=&quot;js/systeminfo.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/app.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/ui.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;js/model.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
&nbsp;&nbsp;&nbsp;app.init();
&lt;/script&gt;
</pre>

<p>The loaded application modules are used for specific actions:</p>

<ul><li>
<p><span style="font-family: Courier New,Courier,monospace">app</span> module initializes all other modules:</p>

<pre class="prettyprint">
/* js/app.js */
init: function init() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;systeminfo.init();
&nbsp;&nbsp;&nbsp;model.init();
&nbsp;&nbsp;&nbsp;ui.init();
&nbsp;&nbsp;&nbsp;this.refreshEquation();
},

refreshEquation: function refreshEquation() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;ui.showEquation(model.equation);
}
</pre></li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">systeminfo</span> module is responsible for checking the battery. If the <span style="font-family: Courier New,Courier,monospace">level.battery</span> status is lower than 4% and the battery is not charging, the application terminates.</p>

<pre class="prettyprint">
/* js/app.js */

/* Add listener for low battery level */
listenBatteryLowState: function listenBatteryLowState() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.systeminfo.addPropertyValueChangeListener(&#39;BATTERY&#39;, function change(battery) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!battery.isCharging) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowThreshold: 0.04
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
},

/* Check low battery state */
checkBatteryLowState: function checkBatteryLowState() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.systeminfo.getPropertyValue(&#39;BATTERY&#39;, function onBatteryRead(battery) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (battery.level &lt; 0.04 &amp;&amp; !battery.isCharging) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;null);
},

/* Initialize the systeminfo module */
init: function init() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;if (typeof tizen === &#39;object&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeof tizen.systeminfo === &#39;object&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.systeminfo = tizen.systeminfo;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.checkBatteryLowState();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.listenBatteryLowState();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.warn(&#39;tizen.systeminfo not available&#39;);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">model</span> module encapsulates the calculator logic (equation state and mathematical operations).</p></li>
<li>
<p><span style="font-family: Courier New,Courier,monospace">ui</span> module is responsible for managing the UI (updating and listening to events):</p>

<ol><li>Register the event listeners:

<pre class="prettyprint">
/* js/ui.js */

/* Initialize the UI module */
init: function init() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.resultElement = document.getElementById(&#39;result&#39;);
&nbsp;&nbsp;&nbsp;this.resultValueElement = document.getElementById(&#39;resultvalue&#39;);
&nbsp;&nbsp;&nbsp;this.equationElement = document.getElementById(&#39;equation&#39;);
&nbsp;&nbsp;&nbsp;this.preloadImages();
&nbsp;&nbsp;&nbsp;this.bindEvents();
&nbsp;&nbsp;&nbsp;this.error = false;
&nbsp;&nbsp;&nbsp;this.result = false;
&nbsp;&nbsp;&nbsp;/* Disable multitouch */
&nbsp;&nbsp;&nbsp;document.body.addEventListener(&#39;touchstart&#39;, this.filterTap, true);
&nbsp;&nbsp;&nbsp;document.body.addEventListener(&#39;touchend&#39;, this.filterTap, true);
},</pre></li>
<li>
<p>Load the images and push them to the cache:</p> 
<pre class="prettyprint">
preloadImages: function preloadImages() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var i, image;
&nbsp;&nbsp;&nbsp;for (i = this.imagesToPreload.length - 1; i &gt;= 0; i -= 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image = new Image();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;image.src = this.imagesToPreload[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.imagesCache.push(image);
&nbsp;&nbsp;&nbsp;}
},
</pre></li>
<li>
<p>Bound the registered listeners to the calculator numeric keyboard:</p> 

<pre class="prettyprint">
bindEvents: function bindEvents() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var numpad = document.getElementById(&#39;numpad&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self = this;

&nbsp;&nbsp;&nbsp;numpad.addEventListener(&#39;touchstart&#39;, function onTouchStart(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle event */
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;numpad.addEventListener(&#39;touchend&#39;, function onTouchEnd(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle event */
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;numpad.addEventListener(&#39;touchcancel&#39;, function onTouchCancel(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle event */
&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;document.addEventListener(&#39;tizenhwkey&#39;, function onTizenHwKey(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
},
</pre></li>
<li>
<p>Update the equation field with a value obtained from the <span style="font-family: Courier New,Courier,monospace">model</span> module. Now, the application is ready for use and waits for user actions.</p></li></ol></li></ul>

<h3>Layout Implementation</h3>
 
<p>The Calculator screen displays the basic keyboard and equation:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;table id=...screen...&gt;
&nbsp;&nbsp;&nbsp;&lt;tr&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td id=...display... valign=...middle...&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=...overflow_top...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=...overflow_bottom...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=...equation...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=...result... class=...empty...&gt;&lt;span id=...resultvalue...&gt;&lt;/span&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/td&gt;
&nbsp;&nbsp;&nbsp;&lt;/tr&gt;
&lt;/table&gt;

&lt;div id=...numpad...&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_7... class=...key... style=...clear: both;...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_8... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_9... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_c... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_del... class=...key long-tap-repeat...&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=...key_4... class=...key... style=...clear: both;...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_5... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_6... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_div... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_mul... class=...key...&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=...key_1... class=...key... style=...clear: both;...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_2... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_3... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_sub... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_add... class=...key...&gt;&lt;/div&gt;

&nbsp;&nbsp;&nbsp;&lt;div id=...key_0... class=...key... style=...clear: both;...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_dec... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_sign... class=...key...&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=...key_eql... class=...longkey...&gt;&lt;/div&gt;
&lt;/div&gt; 
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">ui</span> module manages the layout by listening to touch events on the calculator buttons, updating their press state, and passing control to the <span style="font-family: Courier New,Courier,monospace">app</span> module to run a proper action. The <span style="font-family: Courier New,Courier,monospace">ui</span> module also allows the <span style="font-family: Courier New,Courier,monospace">app</span> module to update the equation and its result, and formats those fields.</p> 
 
<pre class="prettyprint">
/* js/ui.js */
showEquation: function showEquation(equation) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var e, element, elementText, span, equationElement, length;

&nbsp;&nbsp;&nbsp;equationElement = document.getElementById(&#39;equation&#39;);

&nbsp;&nbsp;&nbsp;equationElement.innerHTML = &#39;&#39;;

&nbsp;&nbsp;&nbsp;length = equation.length;
&nbsp;&nbsp;&nbsp;for (e = 0; e &lt; length; e += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;element = equation[e];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span = document.createElement(&#39;span&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = element;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Object.keys(this.operatorDisplays).indexOf(element) !== -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span.className = &#39;operator&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = this.operatorDisplays[element];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = app.addSeparators(elementText);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;elementText = elementText.replace(/-/g, &#39;&amp;minus;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;span.innerHTML = elementText;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;equationElement.appendChild(span);
&nbsp;&nbsp;&nbsp;}
},

show: function show(result) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;if (result === &#39;&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this.clear();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.equationElement.classList.add(&#39;top&#39;);
&nbsp;&nbsp;&nbsp;this.resultValueElement.innerHTML = result.replace(/-/g, &#39;&amp;minus;&#39;);
},

showResult: function showResult(result) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.show(result);
&nbsp;&nbsp;&nbsp;this.result = true;
},
</pre> 

<h3>Equation Logic Implementation</h3>

<p>The <span style="font-family: Courier New,Courier,monospace">model</span> module handles the calculator logic. Its internal implementation of the equation is based on an array that stores each component (such as a number or operator) as a separate string. </p>
 
<pre class="prettyprint">
/* js/model.js */
formatValue: function formatValue(value) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var formatted = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;textValue = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dotIndex = 0;

&nbsp;&nbsp;&nbsp;textValue = value.toString();
&nbsp;&nbsp;&nbsp;dotIndex = textValue.indexOf(&#39;.&#39;);
&nbsp;&nbsp;&nbsp;if (dotIndex &gt;= this.MAX_DIGITS) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* If 2 first digits of the mantissa are higher than 95, round the result */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* This is the behavior of the Calculator app in Samsung phones  */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseInt(textValue.substr(dotIndex + 1, Math.min(textValue.length, 2)), 10) &gt;= 95) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value += 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/* Set precision to match 10-digit limit */
&nbsp;&nbsp;&nbsp;formatted = value.toFixed(this.MAX_DIGITS).toString();
&nbsp;&nbsp;&nbsp;formatted = formatted.substr(0, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.MAX_DIGITS + formatted.replace(/\d/g, &#39;&#39;).length).replace(/(\.(0*[1-9])*)0+$/, &#39;$1&#39;).replace(/\.$/, &#39;&#39;);

&nbsp;&nbsp;&nbsp;/* If the number is too big (exceeds digits limit) */
&nbsp;&nbsp;&nbsp;/* or is too small (rounds to zero) */
&nbsp;&nbsp;&nbsp;/* or has scientific notation without decimals (1E23 vs 1.00000E23) */
&nbsp;&nbsp;&nbsp;/* use properly formatted scientific notation */
&nbsp;&nbsp;&nbsp;if ((formatted === &#39;0&#39; &amp;&amp; value !== 0) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value.toString().match(/[eE]/) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Math.abs(value) &gt;= Math.pow(10, 10)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;formatted = value.toExponential(5).toString();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/* Uppercase &#39;E&#39;, remove optional &#39;+&#39; from exponent */
&nbsp;&nbsp;&nbsp;formatted = formatted.toUpperCase().replace(&#39;E+&#39;, &#39;E&#39;);

&nbsp;&nbsp;&nbsp;return formatted;
},
</pre> 

<p>The <span style="font-family: Courier New,Courier,monospace">model</span> module contains the following functions to modify the equation and compute its value. It also keeps the equation state valid by refusing to add wrong components.</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">addDigit()</span> adds a single digit to the equation:

<pre class="prettyprint">/* js/model.js */
addDigit: function addDigit(digit) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = null;

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resetEquation();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;last = this.getLastComponent();

&nbsp;&nbsp;&nbsp;/* If the previous component is not a number */
&nbsp;&nbsp;&nbsp;/* start a new component */
&nbsp;&nbsp;&nbsp;/* if there is only a minus before */
&nbsp;&nbsp;&nbsp;if ((!last || this.isOperator(last)) &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(last !== &#39;-&#39; || this.equation.length &gt; 1)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(digit);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.replaceLastComponent(this.checkNegativeFormat(last));

&nbsp;&nbsp;&nbsp;if (this.isNegativeComponent(last) || last === &#39;-&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(-&#39; +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(RegExp.$2 === &#39;0&#39; ? &#39;&#39; : RegExp.$2) +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;digit + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (last === &#39;0&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = digit;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = last + digit;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (last.replace(new RegExp(&#39;[^\\d]&#39;, &#39;g&#39;), &#39;&#39;).length &lt;= this.MAX_DIGITS) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(last);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return false;
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">addOperator()</span> adds an operator (+, -, *, /) to the equation:

<pre class="prettyprint">/* js/model.js */
addOperator: function addOperator(operator) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = null;

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(this.lastCalculationResult);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;last = this.getLastComponent(true);

&nbsp;&nbsp;&nbsp;/* Operators other than &#39;-&#39; cannot be added to empty equations */
&nbsp;&nbsp;&nbsp;if (!last &amp;&amp; operator !== &#39;-&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;/* Cannot replace minus if on first position */
&nbsp;&nbsp;&nbsp;if (last === &#39;-&#39; &amp;&amp; this.equation.length === 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.replaceLastComponent(this.checkNegativeFormat(last));

&nbsp;&nbsp;&nbsp;if (this.isOperator(last)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Replace the last operator with a new one */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(operator);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Check for &#39;E&#39; being the last character of the equation */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (last &amp;&amp; last.match(/E$/)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add &#39;-&#39; to the number and ignore other operators */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (operator === &#39;-&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(last + &#39;-&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add operator */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(operator);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">addDecimal()</span> adds a decimal point to the equation:
<pre class="prettyprint">/* js/model.js */
addDecimal: function addDecimal() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = this.getLastComponent();

&nbsp;&nbsp;&nbsp;if (!last || this.isOperator(last)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(&#39;0&#39; + this.DECIMAL);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(this.checkNegativeFormat(last));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (last.indexOf(this.DECIMAL) === -1)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.isNegativeComponent(last)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(-&#39; + RegExp.$2 + this.DECIMAL + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last += this.DECIMAL;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(last);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">deleteLast()</span> Deletes the last digit or operator:

<pre class="prettyprint">/* js/model.js */
removeLastChar: function removeLastChar(str) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;return str.substring(0, str.length - 1).replace(this.EXPONENTIAL_REGEXP, &#39;&#39;);
},

/* Delete the last element from equation (digit or operator) */
deleteLast: function deleteLast() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = null, lastPositive;

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(this.lastCalculationResult);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;last = this.getLastComponent();

&nbsp;&nbsp;&nbsp;if (!last) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.replaceLastComponent(this.checkNegativeFormat(last));

&nbsp;&nbsp;&nbsp;if (this.isNegativeComponent(last)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastPositive = RegExp.$2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (lastPositive.length === 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.equation.pop();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(&#39;(-&#39; + this.removeLastChar(lastPositive) + &#39;)&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;else if (last.length === 1 || last.match(/^\-[0-9]$/)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.equation.pop();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(this.removeLastChar(last));
&nbsp;&nbsp;&nbsp;}
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">resetEquation()</span> Clears the whole equation:

<pre class="prettyprint">/* js/model.js */
resetEquation: function resetEquation() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.equation = [];
&nbsp;&nbsp;&nbsp;this.calculated = false;
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">changeSign()</span> changes the sign of the last equation component:

<pre class="prettyprint">/* js/model.js */
isNegativeComponent: function isNegativeComponent(component) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;return (new RegExp(&#39;(\\()\\-(.*?)(\\))&#39;)).test(component);
},
	
changeSign: function changeSign() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last;

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(this.lastCalculationResult);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;last = this.getLastComponent();
&nbsp;&nbsp;&nbsp;/* If there is at least one component and last component not an operator or zero */
&nbsp;&nbsp;&nbsp;if (last &amp;&amp; !this.isOperator(last) &amp;&amp; last !== &#39;0&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((/^\-/).test(last)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(&#39; + last + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.isNegativeComponent(last)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = RegExp.$2; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Assign the last matched value */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(-&#39; + last + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(last);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return false;
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">isEmpty()</span> Returns <span style="font-family: Courier New,Courier,monospace">true</span> if the equation does not contain any components:

<pre class="prettyprint">/* js/model.js */
isEmpty: function isEmpty() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;return this.equation.length === 0;
},
</pre>
</li>

<li><span style="font-family: Courier New,Courier,monospace">calculate()</span> calculates the equation value.
<p>When the user touches a button, the <span style="font-family: Courier New,Courier,monospace">ui</span> module notifies the <span style="font-family: Courier New,Courier,monospace">app</span> module by calling its <span style="font-family: Courier New,Courier,monospace">processKey()</span> function. The request is dispatched and finally the <span style="font-family: Courier New,Courier,monospace">calculate()</span> function of the <span style="font-family: Courier New,Courier,monospace">model</span> module is called. When the result is obtained, the <span style="font-family: Courier New,Courier,monospace">app</span> module requests the <span style="font-family: Courier New,Courier,monospace">ui</span> module to update the applicable field in the UI by calling the <span style="font-family: Courier New,Courier,monospace">showResult()</span> function.</p>
<pre class="prettyprint">/* js/app.js */
processKey: function processKey(key) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var keys = [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;];
&nbsp;&nbsp;&nbsp;if (ui.isResultVisible()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Object.keys(this.operatorKeys).indexOf(key) === -1 &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;del&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;eql&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key !== &#39;sign&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;ui.clearResult();
&nbsp;&nbsp;&nbsp;if (keys.indexOf(key) !== -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.pushDigits(key);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (Object.keys(this.operatorKeys).indexOf(key) !== -1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.addOperator(this.operatorKeys[key]);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;dec&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.addDecimal();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;del&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.deleteLast();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;c&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.resetEquation();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (key === &#39;sign&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.changeSign();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (key === &#39;eql&#39; &amp;&amp; !model.isEmpty()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.calculate();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.refreshEquation();
},

calculate: function calculate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var result = &#39;&#39;;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = model.calculate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = this.addSeparators(result);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;=&amp;nbsp;&#39; + result);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e instanceof EquationInvalidFormatError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;Wrong format&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e instanceof CalculationError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult(&#39;Invalid operation&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e instanceof InfinityError) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showResult((e.positive ? &#39;&#39; : &#39;&amp;minus;&#39;) + &#39;&amp;infin;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ui.showError(&#39;Unknown error.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.warn(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">calculate()</span> function checks the equation correctness and finally merges all its components into a single string and runs it as a JavaScript expression to obtain its value. The equation result is returned:</p>

<pre class="prettyprint">/* js/model.js */
calculate: function calculate() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;/* jslint evil:true */
&nbsp;&nbsp;&nbsp;/* jslint unparam: true */
&nbsp;&nbsp;&nbsp;var evaluation = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Checks whether the matched number is zero */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkDivisionByZero = function checkDivisionByZero(m, p1, number) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (parseFloat(number) === 0) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new DivisionByZeroError();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return &#39;/ &#39; + number;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLeftOperand(this.lastCalculationResult);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!this.isValidEquation()) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new EquationInvalidFormatError();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.calculated = false;

&nbsp;&nbsp;&nbsp;/* Evaluate the equation */
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation = this.equation.join(&#39; &#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluation = evaluation.replace(/\/ *(\(?\-?([0-9\.]+)\)?)/g, checkDivisionByZero);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = eval(&#39;(&#39; + evaluation + &#39;)&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Math.abs(result) &lt; 1.0E-300) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new CalculationError();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (isNaN(result)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new CalculationError();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (result === Infinity || result === -Infinity) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InfinityError(result === Infinity);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.calculated = true;
&nbsp;&nbsp;&nbsp;/* Format the result value */
&nbsp;&nbsp;&nbsp;result = this.formatValue(result);
&nbsp;&nbsp;&nbsp;/* Save the calculated result */
&nbsp;&nbsp;&nbsp;this.lastCalculationResult = result;

&nbsp;&nbsp;&nbsp;return result;
}
</pre></li>
</ul>

<p>The following example shows the support functions for the <span style="font-family: Courier New,Courier,monospace">model</span> module:</p>

<pre class="prettyprint">/* js/model.js */

/* Returns the last component of equation*/
getLastComponent: function getLastComponent(correct) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = this.equation[this.equation.length - 1] || null;
&nbsp;&nbsp;&nbsp;if (correct &amp;&amp; last &amp;&amp; last.slice(-1) === this.DECIMAL) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = last.slice(0, -1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last.replace(&#39;.)&#39;, &#39;)&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.equation[this.equation.length - 1] = last;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return last;
},

/* Replaces the last equation component with specified value */
replaceLastComponent: function replaceLastComponent(value) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var length = this.equation.length;

&nbsp;&nbsp;&nbsp;if (length &gt; 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.equation[length - 1] = value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.calculated = false;
&nbsp;&nbsp;&nbsp;}
},

/* Adds a new component to the equation */
addComponent: function addComponent(value) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.equation.push(value);
&nbsp;&nbsp;&nbsp;this.calculated = false;
},

/* Returns true if the specified value is an operator */
isOperator: function isOperator(value) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;return this.OPERATORS.indexOf(value) !== -1;
},

/* Returns true if the equation can be calculated */
isValidEquation: function isValidEquation() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last = this.getLastComponent(true);

&nbsp;&nbsp;&nbsp;return (!this.isOperator(last) &amp;&amp; !last.match(/E-?$/));
},

/* Replaces the left operand with specified value*/
replaceLeftOperand: function replaceLeftOperand(value) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var length = this.equation.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftOperandSize = 0;

&nbsp;&nbsp;&nbsp;if (length === 0) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;if (length === 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftOperandSize = 0;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (length === 2) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftOperandSize = 1;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftOperandSize = length - 3;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;this.equation.splice(0, leftOperandSize);
&nbsp;&nbsp;&nbsp;this.equation[0] = value;
&nbsp;&nbsp;&nbsp;this.calculated = false;
}

/* Checks whether the component represents a negative digit */
isNegativeComponent: function isNegativeComponent(component) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;return (new RegExp(&#39;(\\()\\-(.*?)(\\))&#39;)).test(component);
},

/* Checks whether the component is negative and fixes its format */
checkNegativeFormat: function checkNegativeFormat(component) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;if (component &amp;&amp; component.match(/^\-d+/)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;component = &#39;(&#39; + component + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return component;
},

/* Changes the sign of the last component (if applicable) */
/* Returns true if sign was changed */
changeSign: function changeSign() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;var last;

&nbsp;&nbsp;&nbsp;if (this.calculated) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.resetEquation();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.addComponent(this.lastCalculationResult);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;last = this.getLastComponent();
&nbsp;&nbsp;&nbsp;/* If there is at least one component and last component not an operator or zero */
&nbsp;&nbsp;&nbsp;if (last &amp;&amp; !this.isOperator(last) &amp;&amp; last !== &#39;0&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((/^\-/).test(last)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(&#39; + last + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.isNegativeComponent(last)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = RegExp.$2; 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Assign the last matched value */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;last = &#39;(-&#39; + last + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.replaceLastComponent(last);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return false;
},
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
