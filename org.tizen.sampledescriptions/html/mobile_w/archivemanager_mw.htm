<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>ArchiveManager Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/base/archive_w.htm">Archive Guide</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/archive.html">Archive API</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html">Filesystem API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>ArchiveManager Sample Overview</h1> 
  <p>The ArchiveManager sample application demonstrates how you can create and manage archive files. You can browse the filesystem, select files to be archived, start the compression process, browse the content of the archive file, extract the archive file, and control the compression or extraction process.</p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  
  <p>The user interface of the application is divided logically into 3 modes. Each mode is associated with specific main screen elements, such as header, footer, and content with list elements representing the filesystem elements.</p>
  <ul>
<li>Standard mode
<p>The standard mode is used to browse the filesystem and during the file compression. The following figure illustrates the root folders, file browsing, and file compression.</p>

  <p class="figure">Figure: Standard mode screens</p> 
  <p align="center"><img alt="Root folders" src="../images/archivemanager_root_mw.png" /> <img alt="Browsing files" src="../images/archivemanager_browse_mw.png" /> <img alt="Input screen" src="../images/archivemanager_input_mw.png" /> <img alt="Compressing files" src="../images/archivemanager_compress_mw.png" /></p>
  
  <p>To create a new archive, click <strong>Create archive</strong> and select the files in the archive mode. Enter the archive name in the input screen, and click <strong>Done</strong>.The progress of the compression process is indicated by a progress bar.</p>
  <p>To abort the compression process, click <strong>Abort</strong>.</p></li>
  
  
<li>Archive mode
<p>The archive mode is used to select the files to be archived. The following figure illustrates the archive mode.</p>

  <p class="figure">Figure: Archive mode screen</p> 
  <p align="center"><img alt="Archive mode" src="../images/archivemanager_archive_mw.png" /></p>
  
  <p>After selecting the files, start the compression process by clicking <strong>Compress</strong>. To return to the standard mode without compression, click <strong>Back</strong>.</p></li>
<li>Preview mode
<p>The preview mode is used to browse the archives and during the file extraction. The following figure illustrates the archive browsing and file extraction.</p>

  <p class="figure">Figure: Preview mode screens</p> 
  <p align="center"><img alt="Browsing archive entries" src="../images/archivemanager_browse_archive_mw.png" /> <img alt="Extracting confirmation" src="../images/archivemanager_confirm_mw.png" /> <img alt="Extracting files" src="../images/archivemanager_extract_mw.png" /></p>
 
<p>To browse the archives, click the zipped file to browse. The application goes to the preview mode and shows the content of the zipped file. The navigation path starts with the name of the browsed archive. The user can browse deeper, if there are folders in the archive. However, the user cannot browse another archive file that is an element of the currently browsed archive.</p> 
 <p>The user can extract ZIP files that have been prepared using any packaging software. To start the extraction process, click <strong>Extract</strong> and, in the confirmation popup, <strong>OK</strong>. Wait until the archive is extracted to a new folder. The name of the new folder corresponds to the name of the archive. If the name is already in use, the application creates another folder with the name expanded using an appropriate index in parentheses.</p></li>
</ul>

  <h2 id="source" name="source">Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
  <caption>Table: Source files</caption>
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains CSS styles for the application UI.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">images/</span></td> 
     <td>This directory contains the images used to create the UI.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td> 
     <td>This directory contains the application code.</td> 
    </tr>	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td> 
     <td>This directory contains the application framework.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/</span></td> 
     <td>This directory contains external libraries (TAU library).</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">templates/</span></td> 
     <td>This directory contains the layouts of the application screens and templates for smaller UI elements.</td> 
    </tr> 	
   </tbody> 
  </table> 
 
<h2 id="implementation" name="implementation">Implementation</h2>

<h3 id="layout" name="layout">Application Layout</h3>
<p>The application has a main screen layout, an archive name input screen layout, and a template for the filesystem item view.</p>

<p>The main screen layout consists of multiple UI elements:</p>

<ol><li><p>The main screen elements are arranged as follows:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;main&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;!--header (with a title, navigation buttons, and navigation bar)--&gt;
&nbsp;&nbsp;&nbsp;&lt;!--content (with a list of filesystem items)--&gt;
&nbsp;&nbsp;&nbsp;&lt;!--footer (with action buttons)--&gt;
&nbsp;&nbsp;&nbsp;&lt;!--popup (for displaying progress bars and messages)--&gt;
&lt;/div&gt;
</pre> </li> 

<li>
<p>The header element contains a title, 2 navigation buttons (<strong>Home</strong> and <strong>Up</strong>), and a navigation bar. The navigation buttons are visible only in the standard mode. The navigation bar with the current filesystem path is visible in the standard and preview modes. In the archive mode, the navigation bar displays a checkbox.</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;h1&gt;Archive&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; class=&quot;naviframe-button hidden&quot; id=&quot;home-button&quot;&gt;Home&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; class=&quot;naviframe-button hidden&quot; id=&quot;up-button&quot;&gt;Up&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;navigation&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;navigation-background&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;p class=&quot;navigation-path&quot; id=&quot;navigation-path&quot;&gt;/&lt;span id=&quot;navigation-path-text&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form id=&quot;select-all&quot; class=&quot;hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul data-role=&quot;listview&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;li class=&quot;ui-li-has-checkbox&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#&quot; id=&quot;select-all-area&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;checkbox&quot;/&gt;Select all
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/li&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre></li>
<li>
<p>The content element contains a list of files. Depending on the current application mode, the list can display:</p>
<ul>
<li>Filesystem items without checkboxes (standard mode)</li>
<li>Filesystem items with checkboxes (archive mode)</li>
<li>Archive entries (preview mode)</li>
</ul>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;content&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;form&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;ul id=&quot;files-list&quot; data-role=&quot;listview&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;standard-mode&quot;&gt;&lt;/ul&gt;
&nbsp;&nbsp;&nbsp;&lt;/form&gt;
&lt;/div&gt;
</pre>
<p>The template being used defines the appearance of the list items:</p> 
<pre class="prettyprint lang-html">
/* templates/row.tpl */
&lt;li id=&quot;row{{index}}&quot; label=&quot;{{label}}&quot; class=&quot;{{type}}&quot; url=&quot;{{url}}&quot; isDirectory=&quot;{{isDirectory}}&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;a href=&quot;#&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;checkbox&quot;/&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;img class=&quot;ui-li-bigicon&quot;&gt;{{label}}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;clickable&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/a&gt;
&lt;/li&gt;
</pre></li>
<li>
<p>The main screen uses 3 footers, which all contain different buttons. At any time, only a single footer is visible, depending on the current application mode:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot; id=&quot;footer-create&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;ui-disabled&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; id=&quot;create-button&quot;&gt;Create archive&lt;/div&gt;
&lt;/div&gt;
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot; id=&quot;footer-compress&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; id=&quot;compress-button&quot;&gt;Compress&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; id=&quot;back-compress-button&quot;&gt;Back&lt;/div&gt;
&lt;/div&gt;
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot; id=&quot;footer-preview&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; id=&quot;extract-preview-button&quot;&gt;Extract&lt;/div&gt;
&lt;/div&gt;
</pre></li>

<li>
<p>The pop-up element can be displayed with a progress bar during the compression and extraction process, with progress circles while preparing data to be archived, or with a message as a message popup:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;main-popup&quot; data-role=&quot;popup&quot; data-transition=&quot;none&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data-position-to=&quot;window&quot; class=&quot;center_title_1btn&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-title&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1 id=&quot;main-popup-title&quot;&gt;&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-text&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;total-frame&quot; class=&quot;progress-frame hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;progressbar&quot; id=&quot;total-progress&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;total-value&quot; class=&quot;progress-value&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;partial-frame&quot; class=&quot;progress-frame hidden&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;progressbar&quot; id=&quot;partial-progress&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;partial-value&quot; class=&quot;progress-value&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;preprogress-frame&quot; class=&quot;preprogress-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;progress&quot; data-style=&quot;circle&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id=&quot;preprogress-progress&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;span id=&quot;main-popup-message&quot; class=&quot;hidden&quot;&gt;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;ui-popup-button-bg&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; data-rel=&quot;back&quot; data-inline=&quot;true&quot; id=&quot;main-popup-ok-button&quot; class=&quot;hidden&quot;&gt;OK&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; data-rel=&quot;back&quot; data-inline=&quot;true&quot; id=&quot;main-popup-cancel-button&quot; class=&quot;hidden&quot;&gt;Cancel&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; data-rel=&quot;back&quot; data-inline=&quot;true&quot; id=&quot;main-popup-abort-button&quot; class=&quot;hidden&quot;&gt;Abort&lt;/a&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre></li></ol>

<p>The archive name input screen allows the user to enter a name for the selected data to be archived. If an archive with the typed name already exists or the name contains invalid characters, an appropriate message is displayed. When the name is valid, clicking <strong>Done</strong> on the keyboard starts the archiving process.</p>
       
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;name&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; id=&quot;name-header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;Input archive name&lt;/h1&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;name-text-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input type=&quot;text&quot; id=&quot;name-text&quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder=&quot;Enter name&quot; class=&quot;hidden invisible&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div id=&quot;name-error-message&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<h3 id="mode_switch" name="mode_switch">Mode Switching</h3>

<p>The switching between the application modes is controlled by the router module defined in the <span style="font-family: Courier New,Courier,monospace">js/helpers/router.js</span> file. It provides the following methods:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">register()</span> method registers callbacks for a given path.
<p>All routes responsible for switching between modes are registered with this method in the <span style="font-family: Courier New,Courier,monospace">js/views/pages/main.js</span> file:</p>
<pre class="prettyprint">
function registerRoutes() 
{
&nbsp;&nbsp;&nbsp;router.register(&#39;views/modes/standard/show&#39;, showStandardMode);
&nbsp;&nbsp;&nbsp;router.register(&#39;views/modes/preview/show&#39;, showPreviewMode);
&nbsp;&nbsp;&nbsp;router.register(&#39;views/modes/archive/show&#39;, showArchiveMode);
}
</pre></li>
<li><span style="font-family: Courier New,Courier,monospace">navigate()</span> calls the registered callbacks later on using a proper path as parameter.
<p>The <span style="font-family: Courier New,Courier,monospace">navigate()</span> method can be called from anywhere in the application code. The following example shows the code that changes the current mode from standard to archive when the user clicks <strong>Create archive</strong> in the standard mode:</p>
<pre class="prettyprint">
/* js/views/modes/standard.js */
function onCreateBtnClick() 
{
&nbsp;&nbsp;&nbsp;router.navigate(&#39;views/modes/archive/show&#39;);
}
</pre></li>
</ul>

<p>The following example shows other important code snippets in the router module:</p>
<pre class="prettyprint">
/* js/helpers/router.js */
var routes = [],
&nbsp;&nbsp;&nbsp;&nbsp;currentRoute = {},
&nbsp;&nbsp;&nbsp;&nbsp;Error = window.Error;

function Route(load, unload) 
{
&nbsp;&nbsp;&nbsp;this.load = load;
&nbsp;&nbsp;&nbsp;this.unload = unload;
}

function register(path, load, unload) 
{
&nbsp;&nbsp;&nbsp;if (routes[path]) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error(&#39;Route &#39; + path + &#39; is already registered&#39;);
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;routes[path] = new Route(load, unload);
}

function navigate(path, options) 
{
&nbsp;&nbsp;&nbsp;var route = routes[path];

&nbsp;&nbsp;&nbsp;if (typeof route !== &#39;object&#39; || typeof route.load !== &#39;function&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new Error(&#39;Route &#39; + path + &#39; does not exist&#39;);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (typeof currentRoute.unload === &#39;function&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentRoute.unload();
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;currentRoute = route;

&nbsp;&nbsp;&nbsp;return route.load(options || {});
} 
</pre>

<h3 id="compression" name="compression">File Compression</h3>

<p>To compress files:</p>

<ol><li><p>The compression process starts when the user clicks <strong>Done</strong> on the keyboard displayed on the input screen, and the keyboard gets hidden. To make sure that the keyboard is not visible, the application uses code from the <span style="font-family: Courier New,Courier,monospace">js/helpers/keyboard.js</span> file.</p>

<p>When initialized, the keyboard module registers an event listener, which triggers the <span style="font-family: Courier New,Courier,monospace">onKeyboardChange()</span> method every time the state of the keyboard changes. Depending on the keyboard state, the <span style="font-family: Courier New,Courier,monospace">helpers.keyboard.opened</span> or <span style="font-family: Courier New,Courier,monospace">helpers.keyboard.closed</span> event is triggered.</p> 

<pre class="prettyprint">
function onKeyboardChange(ev) 
{
&nbsp;&nbsp;&nbsp;if (ev.state === &#39;on&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;opened&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;closed&#39;);
&nbsp;&nbsp;&nbsp;}
}

function init() 
{
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;softkeyboardchange&#39;, onKeyboardChange);
}
</pre></li>

<li><p>The <span style="font-family: Courier New,Courier,monospace">js/views/pages/name.js</span> module that controls the input screen behavior, listens for the <span style="font-family: Courier New,Courier,monospace">helpers.keyboard.opened</span> and <span style="font-family: Courier New,Courier,monospace">helpers.keyboard.closed</span> events.</p>
<pre class="prettyprint">
/* helpers.keyboard.closed event triggered */
function onKeyboardClosed() 
{
&nbsp;&nbsp;&nbsp;if (enterPressed) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enterPressed = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;router.navigate(&#39;views/modes/standard/show&#39;, {start: true});
&nbsp;&nbsp;&nbsp;}
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;helpers.keyboard.closed&#39;: onKeyboardClosed,
});
</pre></li>

<li><p>Every time the <span style="font-family: Courier New,Courier,monospace">onKeyboardClosed()</span> method is called (because the keyboard gets hidden and the <span style="font-family: Courier New,Courier,monospace">helpers.keyboard.closed</span> event is triggered), the <span style="font-family: Courier New,Courier,monospace">router.navigate()</span> method is also called with the <span style="font-family: Courier New,Courier,monospace">views/modes/standard/show</span> string path as its first parameter. The <span style="font-family: Courier New,Courier,monospace">start</span> option is also set to <span style="font-family: Courier New,Courier,monospace">true</span>.</p>

<p>Since the <span style="font-family: Courier New,Courier,monospace">options.start</span> returns <span style="font-family: Courier New,Courier,monospace">true</span>, both the <span style="font-family: Courier New,Courier,monospace">activateStandardMode()</span> and <span style="font-family: Courier New,Courier,monospace">startArchiving()</span> methods are called. The <span style="font-family: Courier New,Courier,monospace">activateStandardMode()</span> method simply activates the standard mode by calling the <span style="font-family: Courier New,Courier,monospace">activate()</span> method on the <span style="font-family: Courier New,Courier,monospace">standardMode</span> object (a reference to the <span style="font-family: Courier New,Courier,monospace">views/modes/standard</span> module). It triggers a pop-up with an animated circle displaying the waiting progress. The circle is shown for as long as it takes to count the data to be archived.</p>

<pre class="prettyprint">
/* js/views/pages/main.js */
function activateStandardMode(animate) 
{
&nbsp;&nbsp;&nbsp;standardMode.activate(animate);
}

function startArchiving() 
{
&nbsp;&nbsp;&nbsp;popupView.showPreProgress();
&nbsp;&nbsp;&nbsp;countNumberOfArchivedData();
}

function showStandardMode(options) 
{
&nbsp;&nbsp;&nbsp;if (options.start) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activateStandardMode(false);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Start archiving */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startArchiving();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Show the standard mode */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activateStandardMode(true);
&nbsp;&nbsp;&nbsp;}
}

function registerRoutes() 
{
&nbsp;&nbsp;&nbsp;router.register(&#39;views/modes/standard/show&#39;, showStandardMode);
}
</pre></li>

<li><p>The application must know the amount of data to properly show the progress bar for each file being archived. The <span style="font-family: Courier New,Courier,monospace">countNumberOfArchivedData()</span> method calls the <span style="font-family: Courier New,Courier,monospace">countNumberOfData()</span> method from the <span style="font-family: Courier New,Courier,monospace">filesystem</span> module. It requires 2 parameters supplied by the <span style="font-family: Courier New,Courier,monospace">getSelectedFiles()</span> and <span style="font-family: Courier New,Courier,monospace">getPath()</span> methods from the <span style="font-family: Courier New,Courier,monospace">fileList</span> module. The <span style="font-family: Courier New,Courier,monospace">fileList</span> module contains methods that allow the application to manage the appearance of the main screen (including current path, filesystem list elements, and mode activation).</p>
<p>At the end, the <span style="font-family: Courier New,Courier,monospace">countNumberOfData()</span> method triggers the <span style="font-family: Courier New,Courier,monospace">foldersize.read</span> event.</p>
<pre class="prettyprint">
/* js/views/pages/main.js */
function countNumberOfArchivedData() 
{
&nbsp;&nbsp;&nbsp;var files = fileList.getSelectedFiles();

&nbsp;&nbsp;&nbsp;filesystem.countNumberOfData(fileList.getPath().toString(), files);
}

function createArchive(name, sizes) 
{
&nbsp;&nbsp;&nbsp;var list = fileList.getSelectedFiles(sizes),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archiveName = fileList.getPath().toString() + &#39;/&#39; + name + &#39;.zip&#39;;

&nbsp;&nbsp;&nbsp;archivingDescriptor = archive.createArchive(list, archiveName);
}

function onFolderSizeRead(ev) 
{
&nbsp;&nbsp;&nbsp;createArchive(nameView.getName(), ev.detail.sizes);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;model.filesystem.foldersize.read&#39;: onFolderSizeRead,
});
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">createArchive()</span> method from the archive module is called during the <span style="font-family: Courier New,Courier,monospace">foldersize.read</span> event to create an archive. This method requires 2 parameters, a list of files to be archived and the archive name, supplied by methods from the <span style="font-family: Courier New,Courier,monospace">fileList</span> module. It returns an <span style="font-family: Courier New,Courier,monospace">archivingDescriptor</span> object that contains information about progress and is useful when there is a need to abort the compression process. The <span style="font-family: Courier New,Courier,monospace">Progress </span> object constructor is used to create an object displaying the whole compression process.</p>

<p>The archive module located in <span style="font-family: Courier New,Courier,monospace">js/model/archive.js</span> file provides methods that have access to the Archive API. The module gives all necessary functionality for the compression process. It also supports browsing through an archive, extraction processes and abort action.</p>

<pre class="prettyprint">
/* js/model/archive.js */
function Progress(max, hasPartialInfo) 
{
&nbsp;&nbsp;&nbsp;this.hasPartialInfo = !!hasPartialInfo;

&nbsp;&nbsp;&nbsp;/* Total progress */
&nbsp;&nbsp;&nbsp;this.id = 0;
&nbsp;&nbsp;&nbsp;this.current = 0;
&nbsp;&nbsp;&nbsp;this.subTotal = 0;
&nbsp;&nbsp;&nbsp;this.max = max;

&nbsp;&nbsp;&nbsp;/* Partial progress */
&nbsp;&nbsp;&nbsp;this.partialId = 0;
&nbsp;&nbsp;&nbsp;this.partialMax = 0;
&nbsp;&nbsp;&nbsp;this.value = 0.0;
&nbsp;&nbsp;&nbsp;this.filename = &#39;&#39;;

&nbsp;&nbsp;&nbsp;this.getPartial = getPartial;
&nbsp;&nbsp;&nbsp;this.getTotal = getTotal;
}

function createArchive(files, destination) 
{
&nbsp;&nbsp;&nbsp;files = files.slice(0);

&nbsp;&nbsp;&nbsp;var progress = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = files.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalSize = 0;

&nbsp;&nbsp;&nbsp;for (i; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;totalSize += files[i].filesize;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;progress = new Progress(totalSize, true);

&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.id = tizen.archive.open(destination, WRITE_MODE, function onCreateSuccess(archive) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;create.started&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;progress&#39;, progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.archive = archive;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.destination = destination;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addToArchive(files, archive, progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (ev) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;open.error&#39;, ev);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return progress;
}
</pre></li>
<li>
<p>The above example shows that before the first call to the Archive API, the application creates a <span style="font-family: Courier New,Courier,monospace">progress</span> object. The application calls the <span style="font-family: Courier New,Courier,monospace">tizen.archive.open()</span> method, which opens the archive file.</p>
<p>After the archive creation operation, you can add or get files to and from the archive. The <span style="font-family: Courier New,Courier,monospace">tizen.archive.open()</span> method requires 3 mandatory parameters. The first one is a string path describing the archive file to be opened, and the second is also a string describing the file mode for the opened archive. The file mode determines which operations on the archive are available (the application can use <span style="font-family: Courier New,Courier,monospace">w()</span> for the write mode and <span style="font-family: Courier New,Courier,monospace">r()</span> for the read mode). The third parameter is a callback method to be invoked when the archive is opened successfully. It takes 1 parameter, the reference to the archive object. This callback fires the <span style="font-family: Courier New,Courier,monospace">create.started()</span> and <span style="font-family: Courier New,Courier,monospace">progress()</span> events, updates progress parameters, and calls the <span style="font-family: Courier New,Courier,monospace">addToArchive()</span> method to add files to the created archive.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">addToArchive()</span> method calls itself recursively as long as it is finished with each file list with file object items, which is passed as the first parameter. Every time it is called, the application checks whether the compression process was aborted or whether the process is finished, and updates the progress object and calls the <span style="font-family: Courier New,Courier,monospace">add()</span> method.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">add()</span> method adds a new member file to the archive file. It requires a single parameter, the location of the archived file. Optional parameters include the callback method to be invoked when the adding operation is completed successfully. After completion, the application updates the progress object, calls the <span style="font-family: Courier New,Courier,monospace">addToArchive()</span> method, and triggers the progress event.</p>

<pre class="prettyprint">
/* js/model/archive.js */
function addToArchive(files, archive, progress) 
{
&nbsp;&nbsp;&nbsp;var file = files.shift(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressHandler = null;

&nbsp;&nbsp;&nbsp;if (progress.aborted) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (!file) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;completed&#39;, progress);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;size = file.filesize;
&nbsp;&nbsp;&nbsp;if (file.isDirectory) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressHandler = new ArchiveDirectoryProgressHandler(size, file.path, progress);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressHandler = new ArchiveFileProgressHandler(size, progress);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;progress.value = 0;
&nbsp;&nbsp;&nbsp;progress.filename = &#39;&#39;;
&nbsp;&nbsp;&nbsp;progress.partialId = 0;
&nbsp;&nbsp;&nbsp;progress.partialId = archive.add(file.path,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onAddSuccess() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.subTotal += size;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add the rest of the files */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;addToArchive(files, archive, progress);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;progress&#39;, progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function errorHandler(ev) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.partialId = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError(ev);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressHandler.handle,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{stripSourceDirectory: true});
}
</pre></li>

<li>
<p>The <span style="font-family: Courier New,Courier,monospace">main.js</span> module listens to events to make necessary changes in the application UI:</p>
<ul><li>
The <span style="font-family: Courier New,Courier,monospace">onArchiveCreateStarted()</span> method is called at the beginning of the compression process. It changes the pop-up appearance to show 2 progress bars, partial and overall. </li>
<li>The <span style="font-family: Courier New,Courier,monospace">onArchiveProgress()</span> method updates the progress bar values and is called once at the beginning of the compression process and every time a new file is added to the archive.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">onArchiveCompleted()</span> method is called at the end of the compression process to hide the popup. It also updates the list of filesystem elements on the main screen.</li></ul>

<pre class="prettyprint">
/* js/views/pages/main.js */
function onArchiveCreateStarted() 
{
&nbsp;&nbsp;&nbsp;popupView.activateCreateProgress();
}

function onArchiveProgress(ev) 
{
&nbsp;&nbsp;&nbsp;popupView.setProgress(ev.detail);
}

function onArchiveCompleted() 
{
&nbsp;&nbsp;&nbsp;popupView.hide();
&nbsp;&nbsp;&nbsp;if (fileList.getMode() === fileList.PREVIEW_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;router.navigate(&#39;views/modes/standard/show&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileList.getPath().goToArchiveDirectory();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filesystem.getFiles(fileList.getPath().toString());
&nbsp;&nbsp;&nbsp;}
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;model.archive.progress&#39;: onArchiveProgress,
&nbsp;&nbsp;&nbsp;&#39;model.archive.create.started&#39;: onArchiveCreateStarted,

&nbsp;&nbsp;&nbsp;&#39;model.archive.completed&#39;: onArchiveCompleted,
});
</pre></li></ol>



<h3 id="browse" name="browse">Archive Browsing</h3>

<p>The list of filesystem items is wrapped in a <span style="font-family: Courier New,Courier,monospace">&lt;ul&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">id=&quot;files-list&quot;</span> attribute. The appearance and behavior of the list is controlled by the <span style="font-family: Courier New,Courier,monospace">js/views/filelist.js</span> module.</p> 
<p>The <span style="font-family: Courier New,Courier,monospace">onFilesListClick()</span> method is called every time a filesystem item on the content list is tapped. In the preview mode, the application triggers the <span style="font-family: Courier New,Courier,monospace">selected</span> event with the <span style="font-family: Courier New,Courier,monospace">object type</span> parameter. This parameter contains information about the selected file.</p>
<pre class="prettyprint">
/* js/views/filelist.js */
var filesList = null;

function onFilesListClick(ev) 
{
&nbsp;&nbsp;&nbsp;var element = domHelper.findParent(ev.target, &#39;li&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label = element.getAttribute(&#39;label&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url = element.getAttribute(&#39;url&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file = null;

&nbsp;&nbsp;&nbsp;if (mode === ARCHIVE_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;selection.changed&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;file = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label: label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;url: url,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type: &#39;&#39;
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;if (element.classList.contains(FOLDER_CLASS)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.type = FOLDER_CLASS;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (element.classList.contains(FILE_CLASS)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.type = FILE_CLASS;
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (element.classList.contains(ZIP_CLASS)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;file.type = ZIP_CLASS;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;e.fire(&#39;selected&#39;, {file: file, mode: mode});
}

function bindEvents() 
{
&nbsp;&nbsp;&nbsp;filesList.addEventListener(&#39;click&#39;, onFilesListClick);
}

function init() 
{
&nbsp;&nbsp;&nbsp;filesList = document.getElementById(&#39;files-list&#39;);

&nbsp;&nbsp;&nbsp;bindEvents();
}
</pre>

<p>When the preview mode is active, the <span style="font-family: Courier New,Courier,monospace">views.filelist.selected</span> event is listened to by the <span style="font-family: Courier New,Courier,monospace">js/views/modes/preview.js</span> module, and triggers the <span style="font-family: Courier New,Courier,monospace">onFilelistElementSelected()</span> method, which has the following condition statements:</p>
<ul>
<li>Starting browsing: executed when the selected list element is an archive and the application is in the standard mode.</li>
<li>Browsing deeper: executed when the selected list element is a folder and the application is in the preview mode.
<p>When browsing deeper through the archive, the application calls the <span style="font-family: Courier New,Courier,monospace">goDown()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/model/path.js</span> module. The path and the UI update are realized in the same way as in the starting browsing condition.</p></li>
</ul>
<pre class="prettyprint">
/* js/views/modes/preview.js */
function onFilelistElementSelected(ev) 
{
&nbsp;&nbsp;&nbsp;var data = ev.detail,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileInfo = data.file;

&nbsp;&nbsp;&nbsp;if (fileInfo.type === fileList.ZIP_CLASS &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.mode === fileList.STANDARD_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.loadEntries(fileInfo.url);
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;if (fileInfo.type === fileList.FOLDER_CLASS &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data.mode === fileList.PREVIEW_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileList.getPath().goDown(fileInfo.label);
&nbsp;&nbsp;&nbsp;}
}

e.listen(
{
&nbsp;&nbsp;&nbsp;&#39;views.filelist.selected&#39;: onFilelistElementSelected,
});
</pre>

<p>To handle the starting browsing condition:</p>

<ol><li>
<p>To start the browsing process, the application calls the <span style="font-family: Courier New,Courier,monospace">loadEntries()</span>  method from the <span style="font-family: Courier New,Courier,monospace">js/model/archive.js</span> module.</p>
<p>The application calls the <span style="font-family: Courier New,Courier,monospace">tizen.archive.open()</span> method from the Archive API. The archive is opened in the read mode to access the archived entries. When the archive is opened, the application uses the reference to the archive object to call the <span style="font-family: Courier New,Courier,monospace">getEntries()</span> method from the Archive API.</p>
<pre class="prettyprint">
function loadEntries(url) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.archive.open(url, READ_MODE, function onOpenSuccess(archive) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive.getEntries(function onGetEntriesSuccess(entries) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;prepareEntriesObject(url.split(&#39;/&#39;).pop(), entries);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (ev) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;open.error&#39;, ev);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p>Now the application has access to the list of archived objects used by the <span style="font-family: Courier New,Courier,monospace">prepareEntriesObject()</span> method. The purpose of this method is to prepare 2 important data structures: <span style="font-family: Courier New,Courier,monospace">entriesArray</span> and <span style="font-family: Courier New,Courier,monospace">entriesMap</span>.</p> 
<p>The application uses the API methods only once to obtain information about the entries in the browsed archive. This information is useful to browse deeper in the archive contents. The <span style="font-family: Courier New,Courier,monospace">entriesArray</span> contains the <span style="font-family: Courier New,Courier,monospace">entries</span> object from the root level of the archive. Each entry has a <span style="font-family: Courier New,Courier,monospace">list</span> property that contains an <span style="font-family: Courier New,Courier,monospace">entries</span> object from the second level of the archive for this root entry, and so on. As a result, the array contains all information about the archive files, directories, and structure. The <span style="font-family: Courier New,Courier,monospace">entriesMap</span> array is string-indexed and contains the same objects as the <span style="font-family: Courier New,Courier,monospace">entriesArray</span> array. It gives the application access to these objects using a URL path string.</p>
<pre class="prettyprint">
/* js/model/archive.js */
function prepareEntriesObject(name, entries) 
{
&nbsp;&nbsp;&nbsp;var lenI = entries.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lenJ = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;j = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryName = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entrySize = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryArray = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentArray = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObject = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentIndex = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endsWithSeparator = false;

&nbsp;&nbsp;&nbsp;entriesArray = [];
&nbsp;&nbsp;&nbsp;entriesMap = {};

&nbsp;&nbsp;&nbsp;for (i; i &lt; lenI; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entry = entries[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entrySize = entry.size;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;endsWithSeparator = SLASH_AT_THE_END_REGEXP.test(entry.name);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryName = entry.name.replace(SLASH_AT_THE_END_REGEXP, &#39;&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entryArray = entryName.split(&#39;/&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lenJ = entryArray.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentArray = entriesArray;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j = 0; j &lt; lenJ; j += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentIndex = findObjectInArray(currentArray, &#39;name&#39;, entryArray[j]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentIndex === -1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentObject = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name: entryArray[j],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list: [],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullPath: entryName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isFile: !((j &lt; lenJ - 1) || endsWithSeparator),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isDirectory: (j &lt; lenJ - 1) || endsWithSeparator
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entriesMap[entryName] = currentObject;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentArray.push(currentObject);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentArray = currentArray[currentIndex].list;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;e.fire(&#39;entries.loaded&#39;, {name: name});
}
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">entries.loaded</span> event is triggered and activates the preview mode:</p>
<pre class="prettyprint">
/* js/views/pages/main.js */
function activatePreviewMode(data)
{
&nbsp;&nbsp;&nbsp;previewMode.activate(data);
}

function showPreviewMode(data) 
{
&nbsp;&nbsp;&nbsp;activatePreviewMode(data);
}

function onArchiveEntriesLoaded(ev) 
{
&nbsp;&nbsp;&nbsp;router.navigate(&#39;views/modes/preview/show&#39;, ev.detail);
}

function registerRoutes() 
{
&nbsp;&nbsp;&nbsp;router.register(&#39;views/modes/preview/show&#39;, showPreviewMode);
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;model.archive.entries.loaded&#39;: onArchiveEntriesLoaded,
});
</pre>

<p>The application activates the preview mode by calling the <span style="font-family: Courier New,Courier,monospace">activate()</span> method on the <span style="font-family: Courier New,Courier,monospace">previewMode</span> object (a reference to <span style="font-family: Courier New,Courier,monospace">views/modes/preview</span> module).</p>
<p>The <span style="font-family: Courier New,Courier,monospace">activate()</span> method calls the <span style="font-family: Courier New,Courier,monospace">activatePreviewMode()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/views/filelist.js</span> module.</p>
<pre class="prettyprint">
/* js/views/modes/preview.js */
function activate(data) 
{
&nbsp;&nbsp;&nbsp;fileList.activatePreviewMode(data);
&nbsp;&nbsp;&nbsp;showFooterPreview();
}

/* js/views/filelist.js */
function activatePreviewMode(data) 
{
&nbsp;&nbsp;&nbsp;if (!data) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;mode = PREVIEW_MODE;
&nbsp;&nbsp;&nbsp;path.goDown(data.name, true);
}
</pre></li>
<li>
<p>The application calls the <span style="font-family: Courier New,Courier,monospace">goDown()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/model/path.js</span> module. This module contains the <span style="font-family: Courier New,Courier,monospace">Path</span> class that provides functionalities for maintaining the URL path of the current filesystem location.</p>
<p>At this point, any path change in this module triggers the <span style="font-family: Courier New,Courier,monospace">changed</span>event. This event is listened to by the <span style="font-family: Courier New,Courier,monospace">js/views/filelist.js</span> module:</p>
<pre class="prettyprint">
/* js/views/filelist.js */
function onPathChanged(ev) 
{
&nbsp;&nbsp;&nbsp;var currentPath = ev.detail.toString();

&nbsp;&nbsp;&nbsp;if (mode === STANDARD_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentPath === &#39;&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modelFilesystem.getStorages();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modelFilesystem.getFiles(currentPath);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (mode === PREVIEW_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentPath !== &#39;&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showFiles(archive.getEntry(currentPath).list);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showFiles(archive.getRootEntries());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;updateHeader();
&nbsp;&nbsp;&nbsp;updatePath();
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;model.path.changed&#39;: onPathChanged,
});
</pre></li>
<li>
<p>If the application is in the preview mode, the <span style="font-family: Courier New,Courier,monospace">showFiles()</span> method is called. This method is responsible for updating the UI and takes the list of archived entries as a parameter. This list can be returned by the <span style="font-family: Courier New,Courier,monospace">getEntry()</span> or <span style="font-family: Courier New,Courier,monospace">getRootEntries()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/model/archive.js</span> module. These methods return the <span style="font-family: Courier New,Courier,monospace">entriesArray</span> and <span style="font-family: Courier New,Courier,monospace">entriesMap</span> data structures.</p>
<pre class="prettyprint">
/* js/model/archive.js */
function getEntry(path) 
{
&nbsp;&nbsp;&nbsp;return entriesMap[path];
}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
function getRootEntries() 
{
&nbsp;&nbsp;&nbsp;return entriesArray;
}
</pre></li></ol>


<h2 id="extraction" name="extraction">File Extraction</h2>

<p>To extract files:</p>

<ol><li>
<p>The extraction process starts when the user clicks <strong>Extract</strong>. The <strong>Extract</strong> button behavior is handled by the <span style="font-family: Courier New,Courier,monospace">js/views/modes/preview.js</span> module:</p>
<pre class="prettyprint">
var extractPreviewBtn = null;

function onExtractPreviewBtnClick() 
{
&nbsp;&nbsp;&nbsp;popupView.showExtractConfirm(fileList.getPath().getFullArchiveName());
}

function bindEvents() 
{
&nbsp;&nbsp;&nbsp;extractPreviewBtn.addEventListener(&#39;click&#39;, onExtractPreviewBtnClick);
}

function init() 
{
&nbsp;&nbsp;&nbsp;extractPreviewBtn = document.getElementById(&#39;extract-preview-button&#39;);
&nbsp;&nbsp;&nbsp;bindEvents();
}
</pre></li>
<li>
<p>The confirmation popup is displayed by the <span style="font-family: Courier New,Courier,monospace">showExtractConfirm()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/views/popup.js</span> module.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">showExtractConfirm()</span>method is responsible for showing the confirm popup and its appearance. It takes the name of the extracted archive as a parameter. The name is displayed in the pop-up header.</p>
<pre class="prettyprint">
/* js/views/popup.js */
function showExtractConfirm(name) 
{
&nbsp;&nbsp;&nbsp;activateMessage(ZIP_ARCHIVE_EXTRACT_MESSAGE, name);
&nbsp;&nbsp;&nbsp;activateOKCancelButtons();
&nbsp;&nbsp;&nbsp;show();
}
</pre></li>

<li>
<p>The user can interrupt the extraction process by clicking <strong>Cancel</strong> in the popup. If they click <strong>OK</strong>, the extraction process continues and the <span style="font-family: Courier New,Courier,monospace">ok.button.click</span> event is triggered:</p>
<pre class="prettyprint">
/* js/views/popup.js */
function onOkBtnClick() 
{
&nbsp;&nbsp;&nbsp;if (isExitPopup) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isExitPopup = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;exit.button.click&#39;);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;ok.button.click&#39;);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">ok.button.click</span> event is listened to by the <span style="font-family: Courier New,Courier,monospace">js/views/modes/preview.js</span> module. When the vent occurs, the application tries to resolve the name of the folder to which the archive entries are extracted:</p>
<pre class="prettyprint">
/* js/views/modes/preview.js */
function onOkBtnClick() 
{
&nbsp;&nbsp;&nbsp;if (fileList.getMode() === fileList.PREVIEW_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modelFilesystem.resolveNameForPath(fileList.getPath().getArchiveName(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileList.getPath().getArchivePath());
&nbsp;&nbsp;&nbsp;}
}

e.listen(
{
&nbsp;&nbsp;&nbsp;&#39;views.popup.ok.button.click&#39;: onOkBtnClick,
});
</pre></li>
<li>
<p>If the application is in preview mode, the <span style="font-family: Courier New,Courier,monospace">resolveNameForPath()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/model/filesystem.js</span> module is called. It takes the name of the archive (without extension) and the archive file path as parameters.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">resolveNameForPath()</span> method uses the <span style="font-family: Courier New,Courier,monospace">js/core/core/filesystem.js</span> module to call the <span style="font-family: Courier New,Courier,monospace">dir()</span> method to retrieve the list of files in a given location path.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">dir()</span> method calls a function that takes the archived list of files as a parameter. Then, the <span style="font-family: Courier New,Courier,monospace">resolveName()</span> method is called to determine the name of the folder to which the archive entries are extracted.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">resolveName()</span> method operates in 2 phases. First, the method iterates through the list of files and prepares the <span style="font-family: Courier New,Courier,monospace">namesObject</span> object (associative array) indexed by file names with any value. Then, the method performs the <span style="font-family: Courier New,Courier,monospace">while</span> loop that modifies the original name of the archive as long as this name is identical to the one in the <span style="font-family: Courier New,Courier,monospace">namesObject</span> object parameters. If the original name of the archive is unique for the current filesystem location, the <span style="font-family: Courier New,Courier,monospace">while</span> loop is not performed at all and the new folder has the name that corresponds to the name of the extracted archive.</p>
<pre class="prettyprint">
/* js/model/filesystem.js */
function resolveName(name, files) 
{
&nbsp;&nbsp;&nbsp;var namesObject = {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;length = files.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newName = &#39;&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; length; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;namesObject[files[i].name] = true;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;i = 2;
&nbsp;&nbsp;&nbsp;newName = name;

&nbsp;&nbsp;&nbsp;while (namesObject.hasOwnProperty(newName)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newName = name + &#39; (&#39; + i + &#39;)&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i += 1;
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;e.fire(&#39;name.resolved&#39;, {name: newName});
}

function resolveNameForPath(name, path) 
{
&nbsp;&nbsp;&nbsp;coreFilesystem.dir(path, function onDirSuccess(files) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveName(name, files);
&nbsp;&nbsp;&nbsp;});
}
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">resolveName()</span> method triggers the <span style="font-family: Courier New,Courier,monospace">name.resolved</span> event with the resolved name string for the new folder as a parameter.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">model.filesystem.name.resolved</span> event is listened to by the <span style="font-family: Courier New,Courier,monospace">js/views/modes/preview.js</span> module. When it occurs, the application creates a new folder with the given name:</p>
<pre class="prettyprint">
/* js/views/modes/preview.js */
function onNameResolved(ev) 
{
&nbsp;&nbsp;&nbsp;modelFilesystem.createDir(ev.detail.name,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileList.getPath().getArchivePath());
}

e.listen(
{
&nbsp;&nbsp;&nbsp;&#39;model.filesystem.name.resolved&#39;: onNameResolved,
});
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">onNameResolved()</span> method calls the <span style="font-family: Courier New,Courier,monospace">createDir()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/model/filesystem.js</span> module. This method takes the resolved name for the new folder and a location path where this folder is to be created as parameters.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">createDir()</span> method uses the <span style="font-family: Courier New,Courier,monospace">js/core/core/filesystem.js</span> module to call the <span style="font-family: Courier New,Courier,monospace">openDir()</span> method, which opens the folder located on the given path. It also calls a callback to call the <span style="font-family: Courier New,Courier,monospace">createDir()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/core/core/filesystem.js</span> module.</p>

<pre class="prettyprint">
/* js/model/filesystem.js */
function createDir(name, path) 
{
&nbsp;&nbsp;&nbsp;coreFilesystem.openDir(path, function onOpenDirSuccess(dir) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;dir.created&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;dir: coreFilesystem.createDir(dir, name)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError);
}
</pre></li>
<li>
<p>The callback triggers the <span style="font-family: Courier New,Courier,monospace">dir.created</span> event containing the reference to the new folder.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">model.filesystem.dir.created</span> event is listened to by the <span style="font-family: Courier New,Courier,monospace">js/views/modes/preview.js</span> module. When it occurs, the application tries to extract the archived entries into the new created folder.</p>
<pre class="prettyprint">
/* js/views/modes/preview.js */
function onDirCreated(ev) 
{
&nbsp;&nbsp;&nbsp;archive.extractArchive(fileList.getPath().getFullArchivePath(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ev.detail.dir);
}

e.listen(
{
&nbsp;&nbsp;&nbsp;&#39;model.filesystem.dir.created&#39;: onDirCreated
});
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">extractArchive()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/core/core/archive.js</span> module is called. This method takes the full string path to the archive file and the reference to the folder as parameters.</p>

<p>Before the first call to the Archive API, the application creates a <span style="font-family: Courier New,Courier,monospace">progress</span> object, which is used during the whole extraction process. The application then calls the <span style="font-family: Courier New,Courier,monospace">tizen.archive.open()</span> method from the Archive API. This method opens the archive file in the read mode. When the archive file is opened, the application triggers the <span style="font-family: Courier New,Courier,monospace">extract.started</span> event and calls the <span style="font-family: Courier New,Courier,monospace">extractAll()</span> method of the archive object from the API.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">extractAll()</span> method extracts every file from the archive file to a given directory. It takes the location of the folder where the extracted files are stored as parameter.</p>

<pre class="prettyprint">
/* js/core/core/archive.js */
function extractArchive(archiveFullPath, destinationFolder) 
{
&nbsp;&nbsp;&nbsp;var progress = new Progress(100, false);

&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.archive.open(archiveFullPath, READ_MODE, function onOpenSuccess(archive) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;extract.started&#39;, archive.extractAll(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destinationFolder,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function extractSuccess() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;completed&#39;, progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onProgress(operationId, value, filename) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.partialId = operationId;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.value = value;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progress.filename = filename;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;progress&#39;, progress);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (ev) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;open.error&#39;, ev);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">main.js</span> module listens various events to make the necessary changes in application UI:</p>
<ul><li>The <span style="font-family: Courier New,Courier,monospace">onArchiveExtractStarted()</span> method is called to change the popup appearance to show a progress bar.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">onArchiveProgress()</span> method updates the progress bar values for each progress callback during the extraction process.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">onArchiveCompleted()</span> method is called at the end of the extraction process to hide the progress popup.</li></ul>
<pre class="prettyprint">
/* js/views/pages/main.js */
function onArchiveExtractStarted(ev) 
{
&nbsp;&nbsp;&nbsp;extractionTaskId = ev.detail;
&nbsp;&nbsp;&nbsp;popupView.showExtractProgress();
} 

function onArchiveProgress(ev) 
{
&nbsp;&nbsp;&nbsp;popupView.setProgress(ev.detail);
}

function onArchiveCompleted() 
{
&nbsp;&nbsp;&nbsp;popupView.hide();
&nbsp;&nbsp;&nbsp;if (fileList.getMode() === fileList.PREVIEW_MODE) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;router.navigate(&#39;views/modes/standard/show&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fileList.getPath().goToArchiveDirectory();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filesystem.getFiles(fileList.getPath().toString());
&nbsp;&nbsp;&nbsp;}
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;model.archive.progress&#39;: onArchiveProgress,

&nbsp;&nbsp;&nbsp;&#39;model.archive. extract.started &#39;: onArchiveExtractStarted,
&nbsp;&nbsp;&nbsp;&#39;model.archive.completed&#39;: onArchiveCompleted,
});
</pre></li></ol>


<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>