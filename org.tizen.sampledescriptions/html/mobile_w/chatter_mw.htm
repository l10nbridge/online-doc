<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>Chatter Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/communication/messaging_w.htm">Messaging Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/tizen/communication/messaging_tutorial_w.htm">Messaging Tutorial</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/messaging.html">Messaging API</a></li>		
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html">Contact API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>Chatter Overview</h1> 
  <p>The Chatter sample application demonstrates how you can send and receive text messages between devices and view the message history of a specific caller. </p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/tizen/communication/task_chatter_w.htm">Chatter task</a>.</p>
  <p>The following figure illustrates the main screens of the Chatter.</p> 
  <p class="figure">Figure: Chatter screens</p> 
  <p align="center"><img alt="Chatter screens" src="../images/chatter.png" /> </p> 
  <p> The application opens with the Chatter main screen, where a caller list is displayed. To start a chat with a caller, click the caller name on the list.</p> 
  <p>On the message screen, enter a new message and click <strong>Send</strong>. </p> 
  <p>To chat with somebody who is not listed in the caller list on the main screen, click <strong>New chat</strong> on the main screen. Enter the phone number of the person you want to chat with and click <strong>Create Chat</strong>.</p> 
  <h2>Prerequisites</h2> 
  <ul> 
   <li>2 devices with active SIM cards</li> 

<li>
<p>To ensure proper application execution, the following privileges must be set:</p>
 <ul>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/application.launch</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.read</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/contact.write</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/messaging.read</span></li>
  <li><span style="font-family: Courier New,Courier,monospace">http://tizen.org/privilege/messaging.write</span></li>
 </ul>  </li>
  </ul>
  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr>
  <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains CSS rules for the application UI.</td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.helpers.js</span></td> 
     <td>This file contains the helper functions used by the application.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file defines the main application class</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.model.js</span></td> 
     <td>This file handles the data used by the common part of the application.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.events.js</span></td> 
     <td>This file handles the user interface events.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.js</span></td> 
     <td>This file handles the application UI.</td> 
    </tr>    
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.templateManager.js</span></td> 
     <td>This file contains the <span style="font-family: Courier New,Courier,monospace">TemplateManager</span> class that manages, caches, and provides HTML templates.</td> 
    </tr> 
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file starts the application.</td> 
    </tr>
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr> 
   </tbody> 
  </table> 
  
 <h2 id="implementation">Implementation</h2>

<p>On application launch during the creation of the <span style="font-family: Courier New,Courier,monospace">model</span> module, the Contact API is used to get contacts from the phone address book. The returned result is a unified address book object.</p>
<pre class="prettyprint">
/* app.model.js */
function Model() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;/* Unified addressbook object */
&nbsp;&nbsp;&nbsp;this.addressBook = tizen.contact.getUnifiedAddressBook();

&nbsp;&nbsp;&nbsp;/* (â€¦) */
}
</pre>
<p>After that, the SMS service is initialized.</p>
<pre class="prettyprint">
/* app.model.js */
init: function Model_init() 
{
&nbsp;&nbsp;&nbsp;this.loadContacts();
&nbsp;&nbsp;&nbsp;this.initSmsService();
},

initSmsService: function Model_initSmsService() 
{
&nbsp;&nbsp;&nbsp;var self = this;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.messaging.getMessageServices(&#39;messaging.sms&#39;, function onMessageServicesFound(s) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.smsService = s[0];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Prepare the messages */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.prepareMessages(app.fillUpMessagePage.bind(app));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Add the change listener */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.messagesChangeListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error.message);
&nbsp;&nbsp;&nbsp;}
},
</pre>
<p>On success available messages are prepared and message change listener is added.</p>
<p>An event listener detects whether messages were changed, added, or removed using the <span style="font-family: Courier New,Courier,monospace">addMessagesChangeListener()</span> method of the <span style="font-family: Courier New,Courier,monospace">MessageStorage</span> interface. When messages are added or removed, the <span style="font-family: Courier New,Courier,monospace">prepareMessages()</span> method is called to refresh the message list.</p>
<p>In the <span style="font-family: Courier New,Courier,monospace">prepareMessage()</span> method the messages are retrieved using the <span style="font-family: Courier New,Courier,monospace">findMessages()</span> method of the <span style="font-family: Courier New,Courier,monospace">MessageStorage</span> interface. The first argument of the method is the <span style="font-family: Courier New,Courier,monospace">AttributeFilter</span> filter object of the Tizen API, and the second argument is an event handler for sorting the messages (the newest on top). The retrieved messages are saved in the <span style="font-family: Courier New,Courier,monospace">messagesList</span> variable and sorted by date.</p>

<pre class="prettyprint">
/* app.model.js */
messagesChangeListener: function Model_initSmsService() 
{
&nbsp;&nbsp;&nbsp;var self = this,
&nbsp;&nbsp;&nbsp;messageChangeCallback = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messagesupdated: function onMessagesUpdated(messages) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (messages[0].messageStatus !== &#39;SENDING&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.changeMessageStatus(messages[0]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messagesadded: function onMessagesAdded() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.prepareMessages(app.ui.showMessageChat);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messagesremoved: function onMessagesRemoved() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.prepareMessages(app.ui.showMessageChat);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;this.smsService.messageStorage.addMessagesChangeListener(messageChangeCallback);
},

prepareMessages: function Model_prepareMessages(callback) 
{
&nbsp;&nbsp;&nbsp;var self = this;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.smsService.messageStorage.findMessages(new tizen.AttributeFilter(&#39;type&#39;, &#39;EXACTLY&#39;, &#39;messaging.sms&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onMessagesLoaded(messages) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function compare(a, b) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.timestamp &gt; b.timestamp) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.timestamp &lt; b.timestamp) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messages.sort(compare);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.messagesList = self.groupMessages(messages);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.loadCallerList();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onError() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;prepareMessage: error&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(err);
&nbsp;&nbsp;&nbsp;}
},
</pre>

<p>Messages in <span style="font-family: Courier New,Courier,monospace">messagesList</span> are grouped according to their recipient key. Each recipient object consists of a message array and the latest message. The grouped object can be used for both main and chat screens of the Chatter application.</p>

<pre class="prettyprint">
/* app.model.js */
groupMessages: function Model_groupMessages(messages) 
{
&nbsp;&nbsp;&nbsp;var i, obj = {}, folderId;
&nbsp;&nbsp;&nbsp;for (i in messages) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (messages.hasOwnProperty(i)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folderId = messages[i].folderId;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((folderId !== null &amp;&amp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;folderId !== this.DRAFTS_FOLDER) ||
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messages[i].messageStatus === &#39;DRAFT&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (messages.hasOwnProperty(i)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj = this.groupMessagesSingle(messages[i], obj);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return obj;
},

groupMessagesSingle: function Model_groupMessagesSingle(message, obj) 
{
&nbsp;&nbsp;&nbsp;var key, j;
&nbsp;&nbsp;&nbsp;if (message.from) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = message.from;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj[key] = this.pushData(message, obj[key]);
&nbsp;&nbsp;&nbsp;} else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (j in message.to) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (message.to.hasOwnProperty(j)) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;key = message.to[j];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj[key] = this.pushData(message, obj[key]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;return obj;
},
</pre>

<p>The grouped messages are displayed as a list on the main page of the application.</p>
<p>After the application starts, there are three ways to start a chat: </p>
<ul>
<li>By tapping on the list of started conversations from the list on the main page.
<pre class="prettyprint">
/* app.ui.js */
onCallerListElementTap: function Ui_onCallerTap(event, element) 
{
&nbsp;&nbsp;&nbsp;event.preventDefault();
&nbsp;&nbsp;&nbsp;event.stopPropagation();
&nbsp;&nbsp;&nbsp;app.setCurrentNumber(element.attr(&#39;phone&#39;));
&nbsp;&nbsp;&nbsp;app.setCurrentCaller(element.attr(&#39;caller&#39;));
&nbsp;&nbsp;&nbsp;$.mobile.changePage(&#39;#chat&#39;);
},
</pre>
<pre class="prettyprint">
/* app.ui.events.js */
$(&#39;#chat, #main&#39;).on(&#39;pageshow&#39;, function onMessagePageShow() 
{
&nbsp;&nbsp;&nbsp;app.fillUpMessagePage();
});
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">app.fillUpMessagePage()</span>method is shown below.</p>
</li>
<li>	
By tapping the <strong>New chat</strong> button on the bottom of the screen, and then tapping on:
<ul>
<li>A contact from the sorted list based on <span style="font-family: Courier New,Courier,monospace">model.addressBook</span>.
<pre class="prettyprint">
/* app.js */
showContactsLoaded: function App_showContactsLoaded() 
{
&nbsp;&nbsp;&nbsp;var i, len, sortedContactList = [];

&nbsp;&nbsp;&nbsp;if (this.model.contactsLoaded !== null &amp;&amp;
&nbsp;&nbsp;&nbsp;this.model.contactsLoaded.length) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = this.model.contactsLoaded.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (this.model.contactsLoaded[i].phoneNumbers.length) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortedContactList.push(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;caller: this.helpers.getCallerName(this.model.contactsLoaded[i], &#39;no name&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number: this.model.contactsLoaded[i].primaryNumber,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;contact: this.model.contactsLoaded[i]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sortedContactList.sort(function compareContacts(a, b) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.caller &lt; b.caller) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (a.caller > b.caller) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;this.ui.fillContactList(sortedContactList);
},
</pre>
</li>
<li>The <strong>Enter number</strong> button, and then entering and accepting the phone number.</li>
</ul>
</li>
</ul>
<p>When the application opens the chat page, the page is filled with messages content.</p>
<pre class="prettyprint">
/* app.js */
fillUpMessagePage: function App_fillUpMessagePage() 
{
&nbsp;&nbsp;&nbsp;var activePageId = $.mobile.activePage.attr(&#39;id&#39;);
&nbsp;&nbsp;&nbsp;if (activePageId === &#39;main&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.loadCallerList();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else if (activePageId === &#39;contactSelect&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.showContactsLoaded();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.showMessageChat();
&nbsp;&nbsp;&nbsp;}
},
</pre>
  
<p>If there are messages, the message bubbles are shown.</p>
<pre class="prettyprint">
/* app.ui.js */
showMessageChat: function Ui_showMessageChat() 
{
&nbsp;&nbsp;&nbsp;var ul, li, i, date, data,
&nbsp;&nbsp;&nbsp;key = app.getCurrentNumber(), messages;
&nbsp;&nbsp;&nbsp;if (document.webkitVisibilityState === &#39;visible&#39; &amp;&amp;
&nbsp;&nbsp;&nbsp;$.mobile.activePage.attr(&#39;id&#39;) === &#39;chat&#39;) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Update name if changed */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Set the caller phone number */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.setCurrentCaller(app.model.getNameByNumber(key));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$(&#39;#chat-title&#39;).text(app.getCurrentCaller());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ul = $(&#39;#message-chat&#39;).empty();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (app.model.messagesList[key] !== undefined) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Get messages from prepared messages */  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messages = app.model.messagesList[key].messages;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = messages.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (i--) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date = new Date(messages[i].timestamp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;bubbleType&#39;: messages[i]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to.length === 0 ? &#39;left&#39; : &#39;right&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;label&#39;: app
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.model.getNameByNumber(messages[i].from),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;caller&#39;: messages[i].caller,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;id&#39;: messages[i].id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;plainBody&#39;: messages[i].body.plainBody,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;date&#39;: app.helpers.getDate(date),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;hour&#39;: date.getHours(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;minutes&#39;: app
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.helpers.addZeroBefore(date.getMinutes()),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;status&#39;: messages[i].messageStatus
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!messages[i].isRead) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.model.setRead(messages[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;li = $(app.ui.templateManager
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.get(&#39;normalBubble&#39;, data));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (messages[i].messageStatus === &#39;DRAFT&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;li.one(&#39;click&#39;, app.model.editDraft
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.bind(app.model, messages[i], li));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ul.append(li);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ul.listview(&#39;refresh&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.scrollToBottom();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
},
</pre>

<p>After the user writes the message and taps the <strong>Send</strong> button, the <span style="font-family: Courier New,Courier,monospace">sendMessage()</span> method is called to send the message using the <span style="font-family: Courier New,Courier,monospace">smsService</span> object. The message type and recipient information are included as arguments for the method.</p>
<p>The message text is taken from the DOM element. The phone number was stored in a variable in the app module when the chat page was displayed (in the <span style="font-family: Courier New,Courier,monospace">showMessageChat()</span> method of the UI class).</p>

<pre class="prettyprint"> 
/* app.ui.events.js */
$(&#39;#send&#39;).on(&#39;vclick&#39;, function onSendClick(event) 
{
&nbsp;&nbsp;&nbsp;var text = $(&#39;#text&#39;).blur().val();
&nbsp;&nbsp;&nbsp;event.stopPropagation();
&nbsp;&nbsp;&nbsp;self.ui.resetTextAreas();
&nbsp;&nbsp;&nbsp;self.ui.setChatCounterValue();
&nbsp;&nbsp;&nbsp;self.ui.checkChatSendButtonState();
&nbsp;&nbsp;&nbsp;/* Send message */
&nbsp;&nbsp;&nbsp;app.sendMessage(text, [app.getCurrentNumber()]);
});
</pre>

<pre class="prettyprint">
/* app.js */
getCurrentNumber: function App_getCurrentNumber() 
{
&nbsp;&nbsp;&nbsp;return this.currentNumber;
},

sendMessage: function App_sendMessage(text, numbers) 
{
&nbsp;&nbsp;&nbsp;var onError = function onError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var message = &#39;Unknown error.&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.type === &#39;NetworkError&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message = &#39;Network error.&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (e.type === &#39;&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message = &#39;Invalid number.&#39;;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;app.ui.showSendErrorPopup(message);
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;/* Send message */
&nbsp;&nbsp;&nbsp;this.model.sendMessage(numbers, text,app.model.prepareMessages.bind(
&nbsp;&nbsp;&nbsp;app.model,
&nbsp;&nbsp;&nbsp;app.ui.showMessageChat),
&nbsp;&nbsp;&nbsp;onError);
}
</pre>

<pre class="prettyprint">
/* app.model.js */
sendMessage: function Model_sendMessage(num, text, onSuc, onErr) 
{
&nbsp;&nbsp;&nbsp;var message;
&nbsp;&nbsp;&nbsp;onSuc = onSuc || function noop() 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;onErr = onErr || function noop() 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return; 
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;/* Send a message to specified number with entered text */
&nbsp;&nbsp;&nbsp;message = new tizen.Message(&#39;messaging.sms&#39;, {plainBody: text, to: [num]});
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.smsService.sendMessage(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuc,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onError(e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuc();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Could not send the message. Error: &#39; +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.name + &#39;: &#39; +  e.message, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onErr(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onSuc();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;Could not send the message. Exception: &#39; +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.name + &#39;:&#39; + e.message, e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onErr(e);
&nbsp;&nbsp;&nbsp;}
},
</pre>
<p>The Application API is used to exit the application in the <span style="font-family: Courier New,Courier,monospace">exit</span> method of the <span style="font-family: Courier New,Courier,monospace">App</span> module.</p>
<pre class="prettyprint">
/* app.js */
exit: function App_exit() 
{
&nbsp;&nbsp;&nbsp;var application = tizen.application.getCurrentApplication();
&nbsp;&nbsp;&nbsp;application.exit();
},
</pre>
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>