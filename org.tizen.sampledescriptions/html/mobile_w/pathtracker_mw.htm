<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>PathTracker Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#location">Geolocation API</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html">SystemInfo API</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
  <h1>PathTracker Sample Overview</h1>
  <p>The PathTracker sample application demonstrates how to use the W3C Geolocation API to create a Web application that gives you the direction to your destination. In the destination screen you can enter coordinates of the destination point, and the tracker screen navigates you to the destination point. It is possible to define the coordinates of the destination point using a manual selector or the Google Maps service.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure shows an example view of the destination screen and the tracker screen when the animated arrow directs you to the destination.</p>
  <p class="figure">Figure: PathTracker screens</p>
  <p align="center"><img alt="PathTracker screens" src="../images/pathtracker_set_mw.png" /></p>
  <p align="center"><img alt="PathTracker screens" src="../images/pathtracker_set2_mw.png" /></p>
  
  
  <h2>Prerequisites</h2>
  
  <ul>
	<li>Device with a GPS receiver</li>
  </ul>
 
  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p>
  <table border="1">
   <tbody>
    <tr>
     <th>File name</th>
     <th>Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
    </tr> 
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td>
     <td>This directory contains the application code.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">lib/</span></td>
     <td>This directory contains the external libraries (TAU library).</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
     <td>This file contains the CSS styling for the application UI.</td>
    </tr>	
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">images</span></td>
     <td>This directory contains the images used to create the user interface.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/core</span></td>
     <td>This directory contains the application framework.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers</span></td>
     <td>This directory contains the helper functions used by view and model modules.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/models</span></td>
     <td>This directory contains files for implementing the application models.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/views</span></td>
     <td>This directory contains files for implementing the application views.</td>
    </tr>	

   </tbody>
  </table>


  <h2>Implementation</h2>

  
  <h3>Application Layout</h3> 
  
<p>The PathTracker sample application defines the destination screen that allows the user to input coordinates of the destination point and the tracker screen that navigates the user to the destination point. The user can define the coordinates of the destination point using a manual selector or using the Google Maps service. The mode of defining the destination point can by changed at any time.</p>

<h4>Defining the Destination Screen</h4>

<p>The following code snippet shows the arrangement of the main containers of the destination screen.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;destination&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The header elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; data-scroll=&quot;none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The content elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The footer elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>To manage the containers:</p>
<ul>
<li>Header
<p>The header element contains a title of the page and a button that allows user to choose the mode of defining the destination point. The appearance of this button informs the user about the mode that is selected after click action on it.</p>
<ul>
<li><img src="../images/pathtracker_hand_mw.png" alt="Hand icon" /> The hand icon indicates that the manual mode is selected.</li>
<li><img src="../images/pathtracker_point_mw.png" alt="Point icon" /> The point icon indicates that the Google Maps mode is selected.</li>
</ul>
<p>The following code snippet shows the header element in detail.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;h2&gt;Initialization&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; data-icon=&quot;naviframe&quot; id=&quot;destination-btn&quot; class=&quot;invisible&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Content
<p>Depending on the mode of defining the destination point, the content element displays the manual selector or the map provided by Google Maps service. In both cases, the user can use it to define the destination point. Additionally, when the device is waiting for GPS or network data, the content element can display the splash screen with an appropriate message.</p>

<p>To display the map, the application uses a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">map</span> ID. This element is used as a container for the map provided by the Google Maps service. The map mode allows the user to define the coordinates of the destination point using touch gestures on the map.</p>

<p>The following code snippet illustrates the elements of the content element that are used to show the map in detail.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;
</pre>

<p>While the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">map</span> ID is hidden, the content element displays the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">content-data</span> class. This element is divided into 2 parts (elements with the <span style="font-family: Courier New,Courier,monospace">content-data-frame</span> class). The first one displays the start coordinates and does not require any user action.</p>

<p>The following example shows the element that displays the start coordinates.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;content-data&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-title&quot;&gt;Start coordinates&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group start&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Latitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-value&quot; id=&quot;start-latitude-value&quot;&gt;checking ...&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group start&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Longitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-value&quot; id=&quot;start-longitude-value&quot;&gt;checking ...&gt;/div&lt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>The manual selector consists of 2 groups of digits that represent latitude and longitude coordinate values of the destination point. The elements that display these digits are selectable. It means that user can change the value of the digit only if it is currently selected. To change the value of the selected digit, user has to turn the knob (the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with <span style="font-family: Courier New,Courier,monospace">circle-selector-frame</span> class) placed below the digits.</p>

<p>The following example shows the element that displays the destination coordinates</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;content-data&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-title&quot;&gt;Destination coordinates&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Latitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits-container&quot; id=&quot;latitude-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit sign selected&quot; data-values=&quot;-,+&quot;&gt;+&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;dot&quot;&gt;.&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Longitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits-container&quot; id=&quot;longitude-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit sign&quot; data-values=&quot;-,+&quot;&gt;+&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;dot&quot;&gt;.&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;circle-selector-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;circle-selector&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>To show the splash screen, the application uses a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">splash</span> ID, which is a container for a message displayed in the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">splash-action</span> ID.</p>

<p>The following code snippet shows the elements of the content element.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;splash&quot; class=&quot;display-flex&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;splash-action&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Footer
<p>The main screen footer contains the <strong>START</strong> button (the <span style="font-family: Courier New,Courier,monospace">&lt;a&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">destination-start-btn</span> ID). This button allows user to switch the application into the tracker screen.</p>

<p>The following code snippet shows the footer element.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; id=&quot;destination-start-btn&quot; disabled=&quot;disabled&quot;&gt;START&lt;/a&gt;
&lt;/div&gt;
</pre>
<p>The following figure shows the destination screen in different modes. The <strong>START</strong> button is enabled only when the coordinates of the destination point are defined.</p>
  <p align="center"><img alt="PathTracker start" src="../images/pathtracker_start_mw.png" /></p>
</li>
</ul>

  <h4>Defining the Tracker Screen</h4>

<p>The following code snippet shows the arrangement of the main containers of the tracker screen.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;tracker&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The header elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; data-scroll=&quot;none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The content elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>To manage the elements:</p>
<ul>
<li>Header
<p>The header element contains only a title of the page.</p>

<p>The following code snippet shows the header element.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;PathTracker&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Content
<p>The content element display consists of 2 elements:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">arrow</span> ID. This element is responsible for displaying animated image of the arrow that allows app to indicate the absolute direction to the destination point.</li> 
<li>The <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">distance</span> ID, which is used to show the absolute distance to the destination point.</li>
</ul>

<p>To calculate the angle of the animated arrow and the value of the displayed distance, the application uses the values of the start and destination coordinates and supports with the methods from the <span style="font-family: Courier New,Courier,monospace">js/helpers/calculations.js</span> module.</p>

<p>The following code snippet shows the elements of the content element on the tracker screen.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;arrow&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;distance&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;span id=&quot;distance-value&quot;&gt;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&lt;span id=&quot;distance-unit&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</pre>
<p>The following figure shows an example view of the tracker screen.</p>
  <p align="center"><img alt="PathTracker tracker" src="../images/pathtracker_tracker_mw.png" /></p>
</li>
</ul>
<h3>Accessing Geolocation Data</h3> 

<p>The PathTracker sample application is based on the W3C Geolocation API that provides scripted access to geographical location information associated with the hosting device. To use this API, the application defines the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module containing the set of methods that allow obtaining and operating on location data. The <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module is initialized after application startup.</p>

<h4>Using the <span style="font-family: Courier New,Courier,monospace">watchPosition()</span> Method</h4>

<p >When the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module is initialized, the <span style="font-family: Courier New,Courier,monospace">init()</span> method is called. The following code snippet shows the initialization process of this module.</p>
<pre class="prettyprint">
/* js/models/geo.js */
var geo = null, geoWatchId = 0;

function onWatchPositionSuccess(position) 
{
&nbsp;&nbsp;&nbsp;var coords = position.coords;

&nbsp;&nbsp;&nbsp;e.fire(&#39;change.position.success&#39;, 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latitude: coords.latitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;longitude: coords.longitude
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}

function onWatchPositionError(error) 
{
&nbsp;&nbsp;&nbsp;console.error(&#39;GEO: onWatchPositionError()&#39;, error.message);
}

function startGeoWatching() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoWatchId = geo.watchPosition(onWatchPositionSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onWatchPositionError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onWatchPositionError(error);
&nbsp;&nbsp;&nbsp;}
}

function init() 
{
&nbsp;&nbsp;&nbsp;if (navigator.geolocation) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geo = navigator.geolocation;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startGeoWatching();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">init()</span> method checks whether the <span style="font-family: Courier New,Courier,monospace">navigator.geolocation</span> object exists. If it does, it is assigned to the <span style="font-family: Courier New,Courier,monospace">geo</span> global variable. The <span style="font-family: Courier New,Courier,monospace">geo</span> object is used later for all requests to the W3C Geolocation API. At the next step, the application calls the <span style="font-family: Courier New,Courier,monospace">startGeoWatching()</span> method.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">startGeoWatching()</span> method uses the <span style="font-family: Courier New,Courier,monospace">geo</span> object to call the <span style="font-family: Courier New,Courier,monospace">watchPosition()</span> from the W3C Geolocation API. It takes 2 methods as parameters. From now on, the application calls the <span style="font-family: Courier New,Courier,monospace">onWatchPositionSuccess()</span> method every time when the coordinates of the current position of the device are being changed. The <span style="font-family: Courier New,Courier,monospace">onWatchPositionSuccess()</span> method takes the <span style="font-family: Courier New,Courier,monospace">Position</span> object as parameter, extracts coordinates data form given parameter, and fires the <span style="font-family: Courier New,Courier,monospace">change.position.success</span> event passing extracted data to this event.</p>

<p>The application listens to the <span style="font-family: Courier New,Courier,monospace">change.position.success</span> event all the time while working. The application performs appropriate actions on both destination and tracker screen when this event occurs. When the destination screen is active, this event is responsible for updating the displayed start coordinates (in case of the manual mode) or updating the yellow start pointer position (in case of the map mode). When the tracker screen is active, the <span style="font-family: Courier New,Courier,monospace">change.position.success</span> event allows the application to decide whether the angle of the animated arrow and the value of the distance to the destination point must be updated.</p>

<h4>Using the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> Method</h4>

<p>Immediately after the application startup the destination screen displays splash screen with a &quot;Waiting for GPS data&quot; message by default. At the same time the application starts to monitor the network state. This is because the application needs time to check whether the GPS signal and the data transfer for device are available. The checking process starts when the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module is called.</p>

<p>The following code snippet shows the <span style="font-family: Courier New,Courier,monospace">init()</span> method of the <span style="font-family: Courier New,Courier,monospace">js/views/destination.js</span> module.</p>
<pre class="prettyprint">
/* js/views/destination.js */
var geo = req.models.geo, /* Geo module object */
&nbsp;&nbsp;&nbsp;&nbsp;systeminfo = req.models.systeminfo, /* Systeminfo module object */ 
&nbsp;&nbsp;&nbsp;&nbsp;SPLASH_GPS_DATA = &#39;Waiting for GPS data&#39;;

function init() 
{
&nbsp;&nbsp;&nbsp;systeminfo.setNetworkValueChangeListener();
&nbsp;&nbsp;&nbsp;setSplashScreenText(SPLASH_GPS_DATA);
&nbsp;&nbsp;&nbsp;geo.getCurrentPosition();
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module calls the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from the W3C Geolocation API. This method allows the application to obtain current coordinates of the device location.</p>
<p>The following code snippet shows what happens when the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method is called.</p>
<pre class="prettyprint">
/* js/models/geo.js */
function onGetCurrentPositionSuccess(position) 
{
&nbsp;&nbsp;&nbsp;var coords = position.coords;

&nbsp;&nbsp;&nbsp;e.fire(&#39;start.position.success&#39;, 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latitude: coords.latitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;longitude: coords.longitude
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}

function onGetCurrentPositionError(error) 
{
&nbsp;&nbsp;&nbsp;e.fire(&quot;start.position.error&quot;, {error: error});
}

function getCurrentPosition() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geo.getCurrentPosition(onGetCurrentPositionSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetCurrentPositionError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetCurrentPositionError(error);
&nbsp;&nbsp;&nbsp;}
}

return 
{
&nbsp;&nbsp;&nbsp;getCurrentPosition: getCurrentPosition
};
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method takes 2 methods as parameters. These are the callbacks that are called in case of success or error. The <span style="font-family: Courier New,Courier,monospace">onGetCurrentPositionSuccess()</span> method takes the <span style="font-family: Courier New,Courier,monospace">Position</span> object as parameter, extracts coordinates data form a given parameter and fires the <span style="font-family: Courier New,Courier,monospace">start.position.success</span> event passing extracted data to this event. In case of error, the application calls the <span style="font-family: Courier New,Courier,monospace">onGetCurrentPositionError()</span> method that fires the <span style="font-family: Courier New,Courier,monospace">start.position.error</span> event passing obtained error object to this event.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">js/views/destination.js</span> module waits for the <span style="font-family: Courier New,Courier,monospace">start.position.success</span> event to call the <span style="font-family: Courier New,Courier,monospace">onStartPositionSuccess()</span> method and finish the initialization of the destination screen.</p>

<p>The following snippet shows the <span style="font-family: Courier New,Courier,monospace">onStartPositionSuccess()</span> in details.</p>
<pre class="prettyprint">
/* js/views/destination.js */
function onStartPositionSuccess(ev) 
{
&nbsp;&nbsp;&nbsp;if (page.classList.contains(&#39;ui-page-active&#39;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSplashScreenText(SPLASH_NETWORK_DATA);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systeminfo.checkNetworkType();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>On condition that the destination screen is active, the application modifies the message displayed on splash screen to &quot;Waiting for network data&quot; and calls the <span style="font-family: Courier New,Courier,monospace">checkNetworkType()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/systeminfo.js</span> module.</p>

<p>The following code snippet shows what happens when the <span style="font-family: Courier New,Courier,monospace">checkNetworkType()</span> method is called.</p>
<pre class="prettyprint">
// js/views/destination.js
var networkType = &#39;NONE&#39;;

function setNetworkType(network) 
{
&nbsp;&nbsp;&nbsp;networkType = network.networkType;
}

function onGetPropertyValueSuccess(network) 
{
&nbsp;&nbsp;&nbsp;setNetworkType(network);
&nbsp;&nbsp;&nbsp;e.fire(&#39;network.checked&#39;);
}

function checkNetworkType() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.systeminfo.getPropertyValue(&#39;NETWORK&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetPropertyValueSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onGetPropertyValueError(error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;getPropertyValue(): &#39;, error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;network.not.checked&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;getPropertyValue(): &#39;, error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;network.not.checked&#39;);
&nbsp;&nbsp;&nbsp;}
}

return
{
&nbsp;&nbsp;&nbsp;checkNetworkType: checkNetworkType,
};
</pre>

<p>The application uses the <span style="font-family: Courier New,Courier,monospace">getPropertyValue()</span> method from the Tizen System Information API to catch the moment that the network is being already checked and obtain information about the type of the available network. As a result of the <span style="font-family: Courier New,Courier,monospace">getPropertyValue()</span> method, 2 types of events can be fired. When the <span style="font-family: Courier New,Courier,monospace">onGetPropertyValueSuccess()</span> method is called, the application saves the obtained network type and fires the <span style="font-family: Courier New,Courier,monospace">network.checked</span> event. When the <span style="font-family: Courier New,Courier,monospace">onGetPropertyValueError()</span> method is called, the application fires the <span style="font-family: Courier New,Courier,monospace">network.not.checked</span> event. Both of them are expected by the <span style="font-family: Courier New,Courier,monospace">js/views.destination.js</span> module.</p>

<p>The following code snippet shows what happens when described above events occur.</p>
<pre class="prettyprint">
// js/views/destination.js
function startUI(params) 
{
&nbsp;&nbsp;&nbsp;if (params &amp;&amp; params.mapsEnabled) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showMap();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showManual();
&nbsp;&nbsp;&nbsp;}
}

function onNetworkChecked() 
{
&nbsp;&nbsp;&nbsp;startUI(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapsEnabled: systeminfo.isGoogleService()
&nbsp;&nbsp;&nbsp;});
}

function onNetworkNotChecked() 
{
&nbsp;&nbsp;&nbsp;startUI(
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mapsEnabled: false
&nbsp;&nbsp;&nbsp;});
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.systeminfo.network.checked&#39;: onNetworkChecked,
&nbsp;&nbsp;&nbsp;&#39;models.systeminfo.network.not.checked&#39;: onNetworkNotChecked
});
</pre>

<p>No matter which event occurs, the application finally calls the <span style="font-family: Courier New,Courier,monospace">startUI()</span> method. The difference is that in case of the <span style="font-family: Courier New,Courier,monospace">network.checked</span> event the application additionally calls the <span style="font-family: Courier New,Courier,monospace">isGoogleService()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/systeminfo.js</span> module to check the information about the saved network type and about the <span style="font-family: Courier New,Courier,monospace">window.google</span> object availability. When the <span style="font-family: Courier New,Courier,monospace">mapsEnabled</span> attribute of the object passed as a parameter to the <span style="font-family: Courier New,Courier,monospace">startUI()</span> method has the <span style="font-family: Courier New,Courier,monospace">true</span> value, the application displays the map selector on destination screen. Otherwise it displays the manual selector.</p>

  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
