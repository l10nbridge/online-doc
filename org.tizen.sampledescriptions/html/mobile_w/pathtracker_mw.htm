<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>PathTracker Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/location/geolocation_w.htm">Geolocation API Specification Guide</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#location">Geolocation API Specification</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html">SystemInfo API</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
  <h1>PathTracker Sample Overview</h1>
  <p>The PathTracker sample application demonstrates how you can use the Geolocation API Specification to create a Web application that gives you the direction to your destination.</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the PathTracker.</p>
  <p class="figure">Figure: PathTracker screens</p>
  <p align="center"><img alt="PathTracker screens" src="../images/pathtracker_set_mw.png" /></p>
 
  <p>The application opens with the splash screen, which is displayed while the GPS data for the current location is retrieved.</p>
  <p>When the current location is available, the destination screen appears:</p>
  <ol><li>Enter the coordinates of your destination point using a manual selector or the Google Maps service. To change the coordinate input mode, click the button in the header:
  <ul>
<li>Click <img src="../images/pathtracker_hand_mw.png" alt="Hand icon" /> to select the manual mode.</li>
<li>Click <img src="../images/pathtracker_point_mw.png" alt="Point icon" /> to select the Google Maps mode.</li>
</ul>
<p>When the user has set a destination point, the <strong>START</strong> button activates.</p></li>
<li>To start the path tracking, click <strong>START</strong>.
<p>The tracker screen navigates the user to the destination point using an animated arrow to direct them.</p> </li></ol>

  <h2>Prerequisites</h2>
  
  <p>For this sample application, you need a device with a GPS receiver.</p>
 
  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p>
  <table border="1">
  <caption>Table: Source files</caption>
   <tbody>
    <tr>
     <th>File name</th>
     <th>Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
    </tr> 
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
     <td>This file contains the CSS styling for the application UI.</td>
    </tr>	
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">images/</span></td>
     <td>This directory contains the images used to create the user interface.</td>
    </tr>	
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td>
    </tr>
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/</span></td>
     <td>This directory contains the application code.</td>
    </tr>
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/core/</span></td>
     <td>This directory contains the application framework.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/helpers/</span></td>
     <td>This directory contains the helper functions used by view and model modules.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/models/</span></td>
     <td>This directory contains the files for implementing the application models.</td>
    </tr>	
		<tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/views/</span></td>
     <td>This directory contains the files for implementing the application views.</td>
    </tr>	
	<tr>
     <td><span style="font-family: Courier New,Courier,monospace">lib/</span></td>
     <td>This directory contains the external libraries (TAU library).</td>
    </tr>
   </tbody>
  </table>


  <h2>Implementation</h2>

  
  <h3>Defining the Application Layout</h3> 
  
<p>The PathTracker sample application defines the destination screen that allows the user to input coordinates of the destination point and the tracker screen that navigates the user to the destination point:</p>

<ul><li>Destination screen

<p>The following code snippet shows the arrangement of the main containers of the destination screen:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;destination&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The header elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; data-scroll=&quot;none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The content elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The footer elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>To manage the containers:</p>
<ul>
<li>Header
<p>The header element contains a title of the page and a button that allows user to change the destination input mode:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;h2&gt;Initialization&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;button&quot; data-icon=&quot;naviframe&quot; id=&quot;destination-btn&quot; class=&quot;invisible&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Content
<p>Depending on the destination input mode, the content element displays the manual selector or the map provided by Google Maps service. Alternatively, when the device is waiting for GPS or network data, the content element can display a splash screen with an appropriate message.</p>

<p>To display the map, the application uses a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">map</span> ID. This element is used as a container for the map provided by the Google Maps service. The map mode allows the user to define the coordinates of the destination point using touch gestures on the map.</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;map&quot;&gt;&lt;/div&gt;
</pre>

<p>To display the manual selector, the application uses a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">content-data</span> class. This element is divided into 2 parts (elements with the <span style="font-family: Courier New,Courier,monospace">content-data-frame</span> class):</p>
<ul><li>The first (upper) part displays the start coordinates and requires no user action:
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;content-data&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-title&quot;&gt;Start coordinates&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group start&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Latitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-value&quot; id=&quot;start-latitude-value&quot;&gt;checking ...&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group start&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Longitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-value&quot; id=&quot;start-longitude-value&quot;&gt;checking ...&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre></li>
<li>The second (lower) part consists of 2 groups of digits that represent the latitude and longitude coordinate values of the destination point. The elements that display these digits are selectable, and the user can change the value of the digit only if it is currently selected. To change the value of the selected digit, the user turns the knob (the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">circle-selector-frame</span> class) placed below the digits.
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div class=&quot;content-data&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-title&quot;&gt;Destination coordinates&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Latitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits-container&quot; id=&quot;latitude-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit sign selected&quot; data-values=&quot;-,+&quot;&gt;+&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;dot&quot;&gt;.&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-group&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-label&quot;&gt;Longitude&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;content-data-digits-container&quot; id=&quot;longitude-digits&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit sign&quot; data-values=&quot;-,+&quot;&gt;+&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;dot&quot;&gt;.&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;digit&quot; data-values=&quot;0,1,2,3,4,5,6,7,8,9&quot;&gt;0&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;circle-selector-frame&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div class=&quot;circle-selector&quot;&gt;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre></li></ul>

<p>To show the splash screen, the application uses a <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">splash</span> ID, which is a container for a message displayed in the <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">splash-action</span> ID:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;splash&quot; class=&quot;display-flex&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div id=&quot;splash-action&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Footer
<p>The footer contains the <strong>START</strong> button (the <span style="font-family: Courier New,Courier,monospace">&lt;a&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">destination-start-btn</span> ID), which allows the user to switch the application to the tracker screen:</p>

<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;footer&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;a data-role=&quot;button&quot; id=&quot;destination-start-btn&quot; disabled=&quot;disabled&quot;&gt;START&lt;/a&gt;
&lt;/div&gt;
</pre>
</li>
</ul>
</li>
<li>Tracker screen

<p>The following code snippet shows the arrangement of the main containers of the tracker screen:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;page&quot; id=&quot;tracker&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The header elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;content&quot; data-scroll=&quot;none&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--The content elements--&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>

<p>To manage the containers:</p>
<ul>
<li>Header
<p>The header element contains only the title of the page:</p>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;div data-role=&quot;header&quot; data-position=&quot;fixed&quot;&gt;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;h2&gt;PathTracker&lt;/h2&gt;
&nbsp;&nbsp;&nbsp;&lt;/div&gt;
&lt;/div&gt;
</pre>
</li>
<li>Content
<p>The content element has 2 parts:</p>
<ul>
<li>The <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">arrow</span> ID is responsible for displaying an animated image of the arrow that indicates the absolute direction to the destination point.</li> 
<li>The <span style="font-family: Courier New,Courier,monospace">&lt;div&gt;</span> element with the <span style="font-family: Courier New,Courier,monospace">distance</span> ID is used to show the absolute distance to the destination point.</li>
</ul>
<pre class="prettyprint">
&lt;!--index.html--&gt;
&lt;div id=&quot;arrow&quot;&gt;&lt;/div&gt;
&lt;div id=&quot;distance&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;span id=&quot;distance-value&quot;&gt;&lt;/span&gt;
&nbsp;&nbsp;&nbsp;&lt;span id=&quot;distance-unit&quot;&gt;&lt;/span&gt;
&lt;/div&gt;
</pre>

<p>To calculate the angle of the animated arrow and the value of the displayed distance, the application uses the values of the start and destination coordinates and the methods from the <span style="font-family: Courier New,Courier,monospace">js/helpers/calculations.js</span> module.</p>
</li>
</ul></li></ul>

<h3>Accessing Geolocation Data</h3> 

<p>The PathTracker sample application is based on the Geolocation API Specification that provides scripted access to geographical location information associated with the hosting device. To use this API, the application defines the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module containing a set of methods that allow obtaining and operating on the location data. The <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module is initialized after application startup.</p>


<h4>Tracking the Position Changes</h4>

<p>During the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module initialization, the <span style="font-family: Courier New,Courier,monospace">init()</span> method is called:</p>

<ol>
<li>The <span style="font-family: Courier New,Courier,monospace">init()</span> method checks whether the <span style="font-family: Courier New,Courier,monospace">navigator.geolocation</span> object exists. If it does, it is assigned to the <span style="font-family: Courier New,Courier,monospace">geo</span> global variable. The <span style="font-family: Courier New,Courier,monospace">geo</span> object is used later for all requests to the Geolocation API.
<pre class="prettyprint">
/* js/models/geo.js */
var geo = null, geoWatchId = 0;
function init() 
{
&nbsp;&nbsp;&nbsp;if (navigator.geolocation) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geo = navigator.geolocation;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startGeoWatching();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>The application calls the <span style="font-family: Courier New,Courier,monospace">startGeoWatching()</span> method.
<p>The <span style="font-family: Courier New,Courier,monospace">startGeoWatching()</span> method uses the <span style="font-family: Courier New,Courier,monospace">geo</span> object to call the <span style="font-family: Courier New,Courier,monospace">watchPosition()</span> method from the Geolocation API, defining 2 callbacks as parameters.</p>
<pre class="prettyprint">
/* js/models/geo.js */
function startGeoWatching() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geoWatchId = geo.watchPosition(onWatchPositionSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onWatchPositionError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onWatchPositionError(error);
&nbsp;&nbsp;&nbsp;}
}
</pre></li>
<li>Every time the coordinates of the current position of the device change, the first callback (<span style="font-family: Courier New,Courier,monospace">onWatchPositionSuccess()</span>) is invoked.
<p>The <span style="font-family: Courier New,Courier,monospace">onWatchPositionSuccess()</span> method takes the <span style="font-family: Courier New,Courier,monospace">Position</span> object as a parameter, extracts coordinate data from the given parameter, and fires the <span style="font-family: Courier New,Courier,monospace">change.position.success</span> event passing the extracted data to this event.</p>
<pre class="prettyprint">
/* js/models/geo.js */
var geo = null, geoWatchId = 0;

function onWatchPositionSuccess(position) 
{
&nbsp;&nbsp;&nbsp;var coords = position.coords;

&nbsp;&nbsp;&nbsp;e.fire(&#39;change.position.success&#39;, 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latitude: coords.latitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;longitude: coords.longitude
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}

function onWatchPositionError(error) 
{
&nbsp;&nbsp;&nbsp;console.error(&#39;GEO: onWatchPositionError()&#39;, error.message);
}
</pre></li>
<li>The application listens to the <span style="font-family: Courier New,Courier,monospace">change.position.success</span> event all the time while working. When the event occurs, the application performs appropriate actions on both the destination and tracker screen.
<p>When the destination screen is active, the event is responsible for updating the displayed start coordinates (in case of the manual mode) or updating the yellow start pointer position (in case of the map mode). When the tracker screen is active, the event allows the application to decide whether the angle of the animated arrow and the value of the distance to the destination point must be updated.</p></li></ol>


<h4>Getting the Current Position</h4>

<p>To get the current position:</p>

<ol>
<li>Immediately after the application startup, the destination screen displays a splash screen with the <strong>Waiting for GPS data</strong> message by default. At the same time, the application starts to monitor the network state. This is because the application needs time to check whether the GPS signal and the data transfer for the device are available. The checking process starts when the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module is called.

<pre class="prettyprint">
/* js/views/destination.js */
var geo = req.models.geo, /* Geo module object */
&nbsp;&nbsp;&nbsp;&nbsp;systeminfo = req.models.systeminfo, /* Systeminfo module object */ 
&nbsp;&nbsp;&nbsp;&nbsp;SPLASH_GPS_DATA = &#39;Waiting for GPS data&#39;;

function init() 
{
&nbsp;&nbsp;&nbsp;systeminfo.setNetworkValueChangeListener();
&nbsp;&nbsp;&nbsp;setSplashScreenText(SPLASH_GPS_DATA);
&nbsp;&nbsp;&nbsp;geo.getCurrentPosition();
}
</pre></li>

<li>The <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/geo.js</span> module calls the <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method from the Geolocation API. This method allows the application to obtain the current coordinates of the device location.

<p>The <span style="font-family: Courier New,Courier,monospace">getCurrentPosition()</span> method takes 2 callbacks as parameters, called in case of success or error:</p>
<ul><li>The <span style="font-family: Courier New,Courier,monospace">onGetCurrentPositionSuccess()</span> success callback takes the <span style="font-family: Courier New,Courier,monospace">Position</span> object as parameter, extracts coordinates data from the given parameter, and fires the <span style="font-family: Courier New,Courier,monospace">start.position.success</span> event passing the extracted data to the event.</li>
<li>The <span style="font-family: Courier New,Courier,monospace">onGetCurrentPositionError()</span> error callback fires the <span style="font-family: Courier New,Courier,monospace">start.position.error</span> event passing the obtained error object to the event.</li></ul>

<pre class="prettyprint">
/* js/models/geo.js */
function onGetCurrentPositionSuccess(position) 
{
&nbsp;&nbsp;&nbsp;var coords = position.coords;

&nbsp;&nbsp;&nbsp;e.fire(&#39;start.position.success&#39;, 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;position: 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;latitude: coords.latitude,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;longitude: coords.longitude
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}

function onGetCurrentPositionError(error) 
{
&nbsp;&nbsp;&nbsp;e.fire(&quot;start.position.error&quot;, {error: error});
}

function getCurrentPosition() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geo.getCurrentPosition(onGetCurrentPositionSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetCurrentPositionError);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetCurrentPositionError(error);
&nbsp;&nbsp;&nbsp;}
}

return 
{
&nbsp;&nbsp;&nbsp;getCurrentPosition: getCurrentPosition
};
</pre></li>

<li>The <span style="font-family: Courier New,Courier,monospace">js/views/destination.js</span> module waits for the <span style="font-family: Courier New,Courier,monospace">start.position.success</span> event to call the <span style="font-family: Courier New,Courier,monospace">onStartPositionSuccess()</span> method and finish the initialization of the destination screen:
<pre class="prettyprint">
/* js/views/destination.js */
function onStartPositionSuccess(ev) 
{
&nbsp;&nbsp;&nbsp;if (page.classList.contains(&#39;ui-page-active&#39;)) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSplashScreenText(SPLASH_NETWORK_DATA);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;systeminfo.checkNetworkType();
&nbsp;&nbsp;&nbsp;}
}
</pre></li>

<li>If the destination screen is active, the application modifies the message displayed on the splash screen to <strong>Waiting for network data</strong> and calls the <span style="font-family: Courier New,Courier,monospace">checkNetworkType()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/systeminfo.js</span> module.

<p>The application uses the <span style="font-family: Courier New,Courier,monospace">getPropertyValue()</span> method from the System Information API to obtain information about the type of the available network. As a result of the <span style="font-family: Courier New,Courier,monospace">getPropertyValue()</span> method, 2 types of events can be fired:</p>
<ul>
<li>When the <span style="font-family: Courier New,Courier,monospace">onGetPropertyValueSuccess()</span> success callback is called, the application saves the obtained network type and fires the <span style="font-family: Courier New,Courier,monospace">network.checked</span> event.</li>
<li>When the <span style="font-family: Courier New,Courier,monospace">onGetPropertyValueError()</span> error callback is called, the application fires the <span style="font-family: Courier New,Courier,monospace">network.not.checked</span> event.</li>
</ul>

<pre class="prettyprint">
/* js/views/destination.js */
var networkType = &#39;NONE&#39;;

function setNetworkType(network) 
{
&nbsp;&nbsp;&nbsp;networkType = network.networkType;
}

function onGetPropertyValueSuccess(network) 
{
&nbsp;&nbsp;&nbsp;setNetworkType(network);
&nbsp;&nbsp;&nbsp;e.fire(&#39;network.checked&#39;);
}

function checkNetworkType() 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.systeminfo.getPropertyValue(&#39;NETWORK&#39;,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onGetPropertyValueSuccess,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onGetPropertyValueError(error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;getPropertyValue(): &#39;, error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;network.not.checked&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;getPropertyValue(): &#39;, error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.fire(&#39;network.not.checked&#39;);
&nbsp;&nbsp;&nbsp;}
}

return
{
&nbsp;&nbsp;&nbsp;checkNetworkType: checkNetworkType,
};
</pre></li>

<li>The <span style="font-family: Courier New,Courier,monospace">js/views.destination.js</span> module expects both the <span style="font-family: Courier New,Courier,monospace">network.checked</span> and <span style="font-family: Courier New,Courier,monospace">network.not.checked</span> events.

<p>No matter which event occurs, the application calls the <span style="font-family: Courier New,Courier,monospace">startUI()</span> method. The difference is that, in case of the <span style="font-family: Courier New,Courier,monospace">network.checked</span> event, the application additionally calls the <span style="font-family: Courier New,Courier,monospace">isGoogleService()</span> method from the <span style="font-family: Courier New,Courier,monospace">js/models/systeminfo.js</span> module to check the information about the saved network type and about the <span style="font-family: Courier New,Courier,monospace">window.google</span> object availability. When the <span style="font-family: Courier New,Courier,monospace">mapsEnabled</span> attribute of the object passed as a parameter to the <span style="font-family: Courier New,Courier,monospace">startUI()</span> method is <span style="font-family: Courier New,Courier,monospace">true</span>, the application displays the map selector on the destination screen. Otherwise, it displays the manual selector.</p>

<pre class="prettyprint">
/* js/views/destination.js */
function startUI(params) 
{
&nbsp;&nbsp;&nbsp;if (params &amp;&amp; params.mapsEnabled) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showMap();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;showManual();
&nbsp;&nbsp;&nbsp;}
}

function onNetworkChecked() 
{
&nbsp;&nbsp;&nbsp;startUI({mapsEnabled: systeminfo.isGoogleService()});
}

function onNetworkNotChecked() 
{
&nbsp;&nbsp;&nbsp;startUI({mapsEnabled: false});
}

e.listeners(
{
&nbsp;&nbsp;&nbsp;&#39;models.systeminfo.network.checked&#39;: onNetworkChecked,
&nbsp;&nbsp;&nbsp;&#39;models.systeminfo.network.not.checked&#39;: onNetworkNotChecked
});
</pre>
</li></ol>
  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
