<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>TouchPaint Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/device/touch_w.htm">Touch Events version 1 Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/w3c/device/touch_tutorial_w.htm">Touch Events version 1 Tutorial</a></li> 
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#touch">Touch Events version 1 API</a></li> 
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>TouchPaint Overview</h1> 
  <p>The TouchPaint sample application demonstrates how you can create a simple paint application using the touch events and a <a href="../../../org.tizen.guides/html/web/w3c/graphics/canvas_w.htm">Canvas</a> element.</p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Web Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/w3c/device/task_touch_paint_mw.htm">Touch Paint task</a>.</p>
  <p>The following figure illustrates the main screen of TouchPaint.</p> 
  <p class="figure">Figure: TouchPaint screens</p> 
  <p align="center"><img alt="TouchPaint screen" src="../images/touchpaint_sd.png" /> </p> 
  <p>The application opens with the main screen where you can see the canvas. You can draw on the canvas with your finger.</p> 
  <p>To change the color or line width of your drawing, use the <strong>Color</strong> and <strong>Line width</strong> controls. To clear the canvas, click the <strong>Clear</strong> button.</p>
  
  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file contains the code for handling the playing functionality of the application.</td> 
    </tr>
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td> 
     <td>This file contains the CSS styling for the application UI.</td> 
    </tr>	
   </tbody> 
  </table> 

  <h2>Implementation</h2>
<p>The <span style="font-family: Courier New,Courier,monospace">init()</span> method, which is called when the whole DOM content is loaded, initializes the application. At this point the canvas size is calculated and the event listeners for all UI elements used in the application are defined.</p>
  <pre class="prettyprint">/* main.js */
var canvas = null,
context = null,
content = null,
drawPath = {},
strokeColor = &#39;&#39;,
strokeWidth = 5;

function init() 
{
&nbsp;&nbsp;&nbsp;var strokeColorSel = document.querySelector(&#39;.color-input&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWidthSel = document.querySelector(&#39;.range-input&#39;),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearBtn = document.querySelector(&#39;.clear-input&#39;);

&nbsp;&nbsp;&nbsp;content = document.querySelector(&#39;.content&#39;);
&nbsp;&nbsp;&nbsp;canvas = document.querySelector(&#39;.canvas&#39;);
&nbsp;&nbsp;&nbsp;context = canvas.getContext(&#39;2d&#39;);

&nbsp;&nbsp;&nbsp;/* Canvas size setting */
&nbsp;&nbsp;&nbsp;canvas.width = content.clientWidth;
&nbsp;&nbsp;&nbsp;canvas.height = content.clientHeight;

&nbsp;&nbsp;&nbsp;/* Touch events handler */
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchstart&#39;, touchStartHandler, false);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchend&#39;, touchEndHandler, false);
&nbsp;&nbsp;&nbsp;canvas.addEventListener(&#39;touchmove&#39;, touchMoveHandler, false);

&nbsp;&nbsp;&nbsp;/* Apply eventHandler */
&nbsp;&nbsp;&nbsp;strokeColorSel.addEventListener(&#39;change&#39;, changeStrokeColor, false);
&nbsp;&nbsp;&nbsp;strokeWidthSel.addEventListener(&#39;change&#39;, changeStrokeWidth, false);
&nbsp;&nbsp;&nbsp;clearBtn.addEventListener(&#39;click&#39;, clearCanvas, false);

&nbsp;&nbsp;&nbsp;/* Add eventListener for tizenhwkey */
&nbsp;&nbsp;&nbsp;window.addEventListener(&#39;tizenhwkey&#39;, function onTizenHwKey(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (e.keyName === &#39;back&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error('Error: ', err);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;});
}
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace">touchstart</span> event is triggered, the <span style="font-family: Courier New,Courier,monospace">touchStartHandler()</span> method is called. It uses the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> array event property to obtain access to the data of the current touch object. From the application point of view, the most important data are the touch coordinates stored as <span style="font-family: Courier New,Courier,monospace">pageX</span> and <span style="font-family: Courier New,Courier,monospace">pageY</span> properties of the touch object. The current touch is saved to the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object, which is an associative array indexed with the <span style="font-family: Courier New,Courier,monospace">identifier</span> parameter of the current touch. The stored touch parameters are used to draw the start point when drawing a line. They are also used by the <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> method to obtain the start point while drawing line. The application draws the start point using the methods provided by the canvas context. The <span style="font-family: Courier New,Courier,monospace">fillStyle</span> parameter allows setting the color for drawing.</p>
<p> The <span style="font-family: Courier New,Courier,monospace">beginPath()</span> method begins drawing the path. The <span style="font-family: Courier New,Courier,monospace">arc()</span> method allows drawing points and circles with the given radius (<span style="font-family: Courier New,Courier,monospace">strokeWidth / 2</span>) at the location specified by the given touch coordinates. The <span style="font-family: Courier New,Courier,monospace">closePath()</span> method creates a path from the current point back to the starting point. The <span style="font-family: Courier New,Courier,monospace">fill()</span> method fills the current drawing with the previously set color.</p>

<pre class="prettyprint">
/* main.js */
function touchStartHandler(e) 
{
&nbsp;&nbsp;&nbsp;var touch = e.changedTouches[0];

&nbsp;&nbsp;&nbsp;drawPath[touch.identifier] = touch;

&nbsp;&nbsp;&nbsp;context.fillStyle = strokeColor;
&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;context.arc(drawPath[touch.identifier].pageX - content.offsetLeft, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath[touch.identifier].pageY - content.offsetTop,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;strokeWidth / 2, 0, Math.PI * 2, true);
&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;context.fill();
}
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace">touchmove</span> event is triggered, the <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> method is called. At the beginning it sets up the canvas context parameters. The <span style="font-family: Courier New,Courier,monospace">linewidth</span> parameter allows setting the width of the drawing line. The <span style="font-family: Courier New,Courier,monospace">lineJoin</span> parameter with its value set to <span style="font-family: Courier New,Courier,monospace">round</span> allows rounding the corners when the two lines meet. In the next steps the <span style="font-family: Courier New,Courier,monospace">touchHanderMethod()</span> method iterates through the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> event property and checks whether the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object contains an attribute equal to the identifier of the iterated touch. If the condition is true it means that iterated touch is still active (the finger still touches the screen) and the <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> method can continue drawing. The application uses the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> method of the canvas context to set up the start point coordinates of drawing line. It uses the last saved coordinates of the iterated touch.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">lineTo()</span> method of the canvas context adds a new point to create a line. It uses the current coordinates of the iterated touch.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">stroke()</span> method of the canvas context draws a line using the <span style="font-family: Courier New,Courier,monospace">moveTo()</span> and <span style="font-family: Courier New,Courier,monospace">lineTo()</span> methods.</p>
<p>At the end the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object parameters are updated in order to store the current touch coordinates for the next <span style="font-family: Courier New,Courier,monospace">touchMoveHandler()</span> method call.</p>
<pre class="prettyprint">/* main.js */
function touchMoveHandler(e) 
{
&nbsp;&nbsp;&nbsp;var touches = e.changedTouches,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;touchesLength = touches.length,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentDrawPath = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i = 0;

&nbsp;&nbsp;&nbsp;context.lineWidth = strokeWidth;
&nbsp;&nbsp;&nbsp;context.strokeStyle = strokeColor;
&nbsp;&nbsp;&nbsp;context.lineJoin = &#39;round&#39;;

&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; touchesLength; i += 1) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;currentDrawPath = drawPath[touches[i].identifier];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (currentDrawPath !== undefined) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.beginPath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.moveTo(currentDrawPath.pageX - content.offsetLeft, currentDrawPath.pageY - content.offsetTop);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.lineTo(touches[i].pageX - content.offsetLeft, touches[i].pageY - content.offsetTop);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.closePath();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.stroke();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;drawPath[touches[i].identifier] = touches[i];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;e.preventDefault();
}
</pre>
<p>When the <span style="font-family: Courier New,Courier,monospace">touchend</span> event is triggered, the <span style="font-family: Courier New,Courier,monospace">touchEndHandler()</span> method is called. This method updates the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object to remove the information about the touch that no longer exists.</p>
<pre class="prettyprint">/* main.js */
function touchEndHandler(e) 
{
&nbsp;&nbsp;&nbsp;var touch = e.changedTouches[0];

&nbsp;&nbsp;&nbsp;delete drawPath[touch.identifier];
}
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
