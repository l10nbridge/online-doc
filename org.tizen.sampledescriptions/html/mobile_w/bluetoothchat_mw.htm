<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>BluetoothChat Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/communication/bluetooth_w.htm">Bluetooth Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/tizen/communication/bluetooth_tutorial_w.htm">Bluetooth Tutorial</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/bluetooth.html">Bluetooth API</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/filesystem.html">Filesystem API</a></li>  
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>BluetoothChat Sample Overview</h1> 
  <p>The BluetoothChat sample application demonstrates how you can create a chat application that uses a Bluetooth connection for sending messages.</p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/tizen/communication/task_bluetoothchat_w.htm">Bluetooth Chat task</a>.</p>
  <p>The following figure illustrates the main screens of the BluetoothChat. </p> 
  <p class="figure">Figure: BluetoothChat screens</p> 
  <p align="center"><img alt="BluetoothChat screens" src="../images/bluetoothchat.png" /> </p> 
  <p>The application opens with the Bluetooth chat main screen. If Bluetooth is disabled, the <strong>Turn bluetooth on</strong> button appears and you must click it before you can create or join a server.</p>
<p>On the main screen:</p>  
  <ul> 
   <li>To use your device as a chat server, click <strong>Create server</strong>. Enter the server name and click <strong>OK</strong> to start the server. When a client wants to join your chat, accept their passkey by clicking <strong>Yes</strong>, and then allow their connection by clicking <strong>Yes</strong> again.
   <p>Remember that to be a server, you must make your Bluetooth radio visible.</p></li> 
   <li>To join a chat as a client, click <strong>Join server</strong>. Enter your client name, select the correct server from the list, and click <strong>OK</strong> to accept the passkey to confirm the connection to the server.</li> 
  </ul> 
  <p>On the chat screen, you can see the messages from other participants. To write your own messages, enter the message and click <strong>Send</strong>.</p> 
  
  <h2>Prerequisites</h2> 
  <ul> 
   <li>Target device (the Emulator does not support Bluetooth functions)</li> 
   <li>Peer device with which to connect</li> 
  </ul> 

  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.client.js</span></td> 
     <td>This file contains the code for handling the client functionality of the application.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.client.model.js</span></td> 
     <td>This file handles the data used by the client part of the application.</td> 
    </tr> 	
	    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.config.js</span></td> 
     <td>This file allows storing the configuration values.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.helpers.js</span></td> 
     <td>This file contains the helper functions used by the application.</td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span></td> 
     <td>This file defines the main application class.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.model.js</span></td> 
     <td>This file handles the data used by the common part of the application.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.server.js</span></td> 
     <td>This file contains the code for handling the server functionality of the application.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.server.model.js</span></td> 
     <td>This file handles the data used by the server part of the application.</td> 
    </tr> 	
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.events.js</span></td> 
     <td>This file handles the user interface events.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.js</span></td> 
     <td>This file handles the application UI.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.templateManager.js</span></td> 
     <td>This file contains the <span style="font-family: Courier New,Courier,monospace">TemplateManager</span> class, which manages, caches, and provides HTML templates.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td> 
     <td>This file starts the application.</td> 
    </tr> 	
	<tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span></td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr> 
   </tbody> 
  </table> 
  
  <h2 id="implementation" name="implementation">Implementation</h2>
  
<p>The implementation of Bluetooth communication can be split into three parts:</p>

<ol>
<li>Bluetooth device management implementation</li>
<li>Server side implementation</li>
<li>Client side implementation</li>
</ol>

<h3 id="device" name="device">Bluetooth Device Management Implementation</h3>

<p>The functionality of the Bluetooth device management module can be implemented as a JavaScript class:</p>
<pre class="prettyprint">
/* app.model.js */
function Model() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;this.adapter = null;
&nbsp;&nbsp;&nbsp;this.serviceUUID = &#39;5BCE9431-6C75-32AB-AFE0-2EC108A30860&#39;;
}

(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;Model.prototype = 
&nbsp;&nbsp;&nbsp;{ 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: function Model_init(callback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;powerOn: function Model_powerOn(callback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;powerOff: function Model_powerOff(callback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setAdapterName: function Model_setAdapterName(changeName, callback) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(...)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
}());
</pre> 

<p>The prototype of the class has the following functions:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">init</span> – initializes the bluetooth module.</li>
<li><span style="font-family: Courier New,Courier,monospace">powerOn</span> – turns on the module.</li>
<li><span style="font-family: Courier New,Courier,monospace">powerOff</span> – turns off the module.</li>
<li><span style="font-family: Courier New,Courier,monospace">setAdapterName</span> – sets bluetooth device name.</li>
</ul>
<p>There are also defined two private variables:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">adapter</span> – a reference to the Bluetooth adapter object obtained from Bluetooth API.</li>
<li><span style="font-family: Courier New,Courier,monospace">serviceUUID</span> – a unique string identifying the Bluetooth service.</li>
</ul>
<p>The constructor of this class defines the <span style="font-family: Courier New,Courier,monospace">serviceUUID</span> string variable that is a unique Bluetooth service identifier.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">init</span> function obtains the default Bluetooth adapter and registers a state change listener on it. The listener gives a notification that the connection is lost by calling <span style="font-family: Courier New,Courier,monospace">app.connectionLost()</span> when the adapter is powered off and there is no operation in progress.</p>
<p>If initialization fails, the suitable alert appears and the application closes.</p>
<pre class="prettyprint">
/* app.model.js */
init: function Model_init(callback) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tizen.bluetooth === undefined) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new ReferenceError(&#39;tizen.bluetooth is not available&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.adapter = tizen.bluetooth.getDefaultAdapter();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.adapter.setChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onstatechanged: function onAdapterStateChanged(powered) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!powered) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Notify that the connection is lost */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Shows the caught error */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tizen.application.getCurrentApplication().exit();
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">powerOn</span> function turns on the Bluetooth device if it is turned off. After that the callback function is executed.</p>
<pre class="prettyprint">
/* app.model.js */
powerOn: function Model_powerOn(callback) 
{
&nbsp;&nbsp;&nbsp;if (!this.adapter.powered) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.adapter.setPowered(true, function onAdapterPowerOnSuccess() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Notify UI that the adapter is on */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onAdapterPowerOnError() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.operationInProgress = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Handle the error */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">powerOff</span> function turns off the Bluetooth device if it was turned on. After that the given callback is called.</p>

<pre class="prettyprint">
/* app.model.js */
powerOff: function Model_powerOff(callback) 
{
&nbsp;&nbsp;&nbsp;if (this.adapter.powered) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.adapter.setPowered(false, function onAdapterPowerOffSuccess() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onAdapterPowerOffError() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">setAdapterName</span> function sets the Bluetooth device name as provided by the input parameter.</p>
<pre class="prettyprint">
/* app.model.js */
setAdapterName: function setAdapterName(name, onSuccess) 
{
&nbsp;&nbsp;&nbsp;this.adapter.setName(name, onSuccess);
}
</pre>


<h3 id="server" name="server">Server Side Implementation</h3>

<p>The server side functionality can be implemented as a JavaScript class:</p>
<pre class="prettyprint">
/* app.server.model.js */
/* Constructor */
function ServerModel(parent) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
}

(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;
&nbsp;&nbsp;&nbsp;ServerModel.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;registerServer: function ServerModel_registerServer(adapter, serviceUUID, callback) {},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unregisterChatServer: function ServerModel_unregisterChatServer(globalRecordHandler, successCallback, 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorCallback, showButtonsCallback) {},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendMessage: function ServerModel_sendMessage(name, socket, message, callback) {}
&nbsp;&nbsp;&nbsp;};

}());
</pre>
<p>The prototype of the class has the following functions:</p>

<ul>
<li><span style="font-family: Courier New,Courier,monospace">registerServer</span> – turns on the server and makes it visible.</li>
<li><span style="font-family: Courier New,Courier,monospace">unregisterChatServer</span> – turns off the server.</li>
<li><span style="font-family: Courier New,Courier,monospace">sendMessage</span> – sends a message to the client.</li>
</ul>

<p>The <span style="font-family: Courier New,Courier,monospace">registerServer</span> function calls the <span style="font-family: Courier New,Courier,monospace">registerRFCOMMServiceByUUID</span> method from the Bluetooth API in order to register a service record in the device service record database. After this method is successfully executed, the callback function is called with the service handler as an input parameter.</p>
<pre class="prettyprint">
/* app.server.model.js */
registerServer: function ServerModel_registerServer(adapter, serviceUUID, callback) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;adapter.registerRFCOMMServiceByUUID(serviceUUID, &#39;Chat service&#39;, callback,

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function onregisterRFCOMMServiceError(error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error.message);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>If any remote device tries to connect to this service, the <span style="font-family: Courier New,Courier,monospace">onconnect</span> function held in the service handler object is called. Therefore, the <span style="font-family: Courier New,Courier,monospace">onconnect</span> function needs to be implemented to handle the connections. The following code illustrates the implementation of the <span style="font-family: Courier New,Courier,monospace">registerServer</span> function.</p>
<p>As shown below, the <span style="font-family: Courier New,Courier,monospace">onconnect</span> function is a callback that gets a socket object as an input parameter. There are several callback functions that can be added to the socket object to handle socket events. The following code demonstrates how to add functions to receive a message from the client (<span style="font-family: Courier New,Courier,monospace">onmessage</span>), to handle connection errors (<span style="font-family: Courier New,Courier,monospace">onerror</span>), and to handle closing the socket (<span style="font-family: Courier New,Courier,monospace">onclose</span>).</p>
<pre class="prettyprint">
/* app.server.js */
registerServerSuccess: function Server_registerServerSuccess(recordHandler) 
{
&nbsp;&nbsp;&nbsp;recordHandler.onconnect = function onServerSocketConnect(socket) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.onmessage = function onServerSocketMessage() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data, (...);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = socket.readData();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Here is code parsing a client message and handling it */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.onerror = function onServerSocketError() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle error event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.onclose = function onServerSocketClose() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle close socket event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;};
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">unregisterChatServer</span> function unregisters the service identified by the record handler.</p>
<pre class="prettyprint">
/* app.server.model.js */
unregisterChatServer: function ServerModel_unregisterChatServer(globalRecordHandler, successCallback, errorCallback) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;globalRecordHandler.unregister(successCallback, errorCallback);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorCallback(error);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">sendMessage</span> function encodes the specified message and writes it to the socket.</p>
<pre class="prettyprint">
/* app.server.model.js */
sendMessage: function ServerModel_sendMessage(name, socket, message, callback) 
{
&nbsp;&nbsp;&nbsp;/* Create a JSON message from input parameters, encode it */
&nbsp;&nbsp;&nbsp;/* and change to an array of chars - sendTextMsg */
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (socket !== null &amp;&amp; socket.state === &#39;OPEN&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.writeData(sendTextMsg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;sendMessage: &#39; + error.message);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<h3 id="client" name ="client">Client Side Implementation</h3>

<p>The client side functionality can be implemented as a JavaScript class:</p>

<pre class="prettyprint">
/* app.client.model.js */
function ClientModel(parent) 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;/* Allows communicating with other models of the application */
&nbsp;&nbsp;&nbsp;this.client = parent;
}

(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;ClientModel.prototype = 
&nbsp;&nbsp;&nbsp;{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchServer: function ClientModel_searchServer() { (...) },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stopServerSearching: function ClientModel_stopServerSearching(callback{ (...) },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;startBonding: function ClientModel_startBonding(address, callback) { (...) },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;destroyBonding: function ClientModel_destroyBonding(device, restartCallback) { (...) },
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;connectToService: function ClientModel_connectToService(device, serviceUUID,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successCallback, errorCallback) {},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sendMessage: function ClientModel_sendMessage(name, socket, message, callback) { (...) }
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>Prototype of the class has the following functions:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">searchServer</span> – Searches Bluetooth devices.</li>
<li><span style="font-family: Courier New,Courier,monospace">stopServerSearching</span> – Stops searching.</li>
<li><span style="font-family: Courier New,Courier,monospace">startBonding</span> – Ask the specified Bluetooth device to bond.</li>
<li><span style="font-family: Courier New,Courier,monospace">destroyBonding</span> – Destroys bonding.</li>
<li><span style="font-family: Courier New,Courier,monospace">connectToService</span> – Connects to the service on the bonded device.</li>
<li><span style="font-family: Courier New,Courier,monospace">sendMessage</span> – Sends a message to the connected server.</li>
</ul>

<p>The constructor of this class gets the parent object as an input parameter. This object allows communicating with other modules of the application. The full implementation of the object is in the <span style="font-family: Courier New,Courier,monospace">app.client.js</span> file. For the purposes of this guide there is only needed to show the initialization of the adapter variable in the controller class:</p>
<pre class="prettyprint">
/* app.model.js */
this.adapter = tizen.bluetooth.getDefaultAdapter();
</pre>

<p>This is the adapter variable from the <span style="font-family: Courier New,Courier,monospace">app.model.js</span>. This variable is passed to app.client.js after initialization.</p>

<p>The <span style="font-family: Courier New,Courier,monospace">searchServer</span> function defines the set of callback functions and passes it to the <span style="font-family: Courier New,Courier,monospace">adapter.discoverDevices</span> function of the Bluetooth API.</p>
<pre class="prettyprint">
/* app.client.model.js */
/* Starts server searching */
searchServer: function ClientModel_searchServer() 
{
&nbsp;&nbsp;&nbsp;var discoverDevicesSuccessCallback = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onstarted: function onDevicesDiscoverStarted() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle searching started event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ondevicefound: function onDeviceFound(device) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle device found event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ondevicedisappeared: function onDeviceDisappeared() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle device disappeared event */

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onfinished: function onDevicesDiscoverFinished() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle searching finished event */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;this.client.adapter.discoverDevices(discoverDevicesSuccessCallback, function onDiscoverDevicesError() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle searching error */
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">stopServerSearchings</span> stops the searching by calling the <span style="font-family: Courier New,Courier,monospace">adapter.stopDiscovery</span> function of the Bluetooth API. When operation succeeds the given callback is executed.</p>
<pre class="prettyprint">
/* app.client.model.js */
stopServerSearching: function ClientModel_stopServerSearching(callback) 
{
&nbsp;&nbsp;&nbsp;this.client.adapter.stopDiscovery(function onStopDiscovery() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle stop searching succeeded */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback();
&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;.bind(this), function onStopDiscoveryError(e) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Error while stopDiscovery:&#39; + e.message);
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>To connect to a found Bluetooth device it is necessary to bond with this device. Bonding is implemented in the following function. The function gets an address of the device and a success callback as input parameters. The address can be obtained by calling the <span style="font-family: Courier New,Courier,monospace">searchServer</span> function described above.</p>
<pre class="prettyprint">
/* app.client.model.js */
startBonding: function ClientModel_startBonding(address, callback) 
{
&nbsp;&nbsp;&nbsp;this.client.adapter.createBonding(address, function onCreateBondingSuccess(device) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(device);
&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;function onCreateBondingError(error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;bondError: &#39; + error.message);
&nbsp;&nbsp;&nbsp;});
}
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">destroyBonding</span> function gets a device object and a success callback as input parameters. It destroys bonding by executing the <span style="font-family: Courier New,Courier,monospace">adapter.destroyBonding</span> function from the Bluetooth API and executes the given success callback when the operation succeeds.</p>
<pre class="prettyprint">
/* app.client.model.js */
destroyBonding: function ClientModel_destroyBonding(device, successCallback) 
{
&nbsp;&nbsp;&nbsp;if (device.isBonded) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.client.adapter.destroyBonding(device.address, successCallback, function onDestroyBondingError(error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;ClientModel_destroyBonding: &#39; + error);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;else 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;successCallback();
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>When the devices are bonded, it is possible to make a connection with a service identified by the UUID string. The <span style="font-family: Courier New,Courier,monospace">connectToService</span> function makes such connection. The function takes a device object, UUID string and callbacks as input parameters. In order to make a connection the <span style="font-family: Courier New,Courier,monospace">connectToServiceByUUID</span> method is called on the device object.</p>
<p>When the operation succeeds, the success callback is executed with a socket object passed as an input parameter. Otherwise an error callback is executed.</p>
<pre class="prettyprint">
/* app.client.model.js */
connectToService: function ClientModel_connectToService(device, serviceUUID, successCallback, errorCallback) 
{
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;device.connectToServiceByUUID(serviceUUID, successCallback, errorCallback);
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;connectToServiceByUUID ERROR: &#39; + error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;errorCallback();
&nbsp;&nbsp;&nbsp;}
}
</pre>
<p>After executing the connection to the service, the socket element can be accessed. It is possible to send and receive messages using this socket. The following function illustrates how to send a message to the server:</p>
<pre class="prettyprint">
/* app.client.model.js */
sendMessage: function ClientModel_sendMessage(name,  socket, message, callback) 
{
&nbsp;&nbsp;&nbsp;/* Create a JSON message from input parameters, encode it */
&nbsp;&nbsp;&nbsp;/* and change to an array of chars - sendTextMsg */
&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (socket !== null &amp;&amp; socket.state === &#39;OPEN&#39;) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.writeData(sendTextMsg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;sendMessage: &#39; + error.message);
&nbsp;&nbsp;&nbsp;}
}
</pre>

<p>In order to receive events from the socket, a bunch of callbacks need to be implemented. These callbacks must be added to the socket element as its fields. The following code illustrates a success callback function passed to the <span style="font-family: Courier New,Courier,monospace">connectToService</span> function discussed above. This function gets a socket element and adds three callbacks to it:</p>
<ul>
<li><span style="font-family: Courier New,Courier,monospace">onmessage</span>, receiving a message from the server.</li>
<li><span style="font-family: Courier New,Courier,monospace">onerror</span>, handling errors.</li>
<li><span style="font-family: Courier New,Courier,monospace">onclose</span>, handling socket close event.</li>
</ul>
<pre class="prettyprint">
/* app.client.js */
connectToServiceSuccess:
function Client_connectToServiceSuccess(device, socket) 
{
&nbsp;&nbsp;&nbsp;/* Callback function receiving a message */
&nbsp;&nbsp;&nbsp;socket.onmessage = function onSocketMessage() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var data, recvmsg = &#39;&#39;, i, len, messageObj;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;data = socket.readData();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;len = data.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (i = 0; i &lt; len; i += 1) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;recvmsg += String.fromCharCode(data[i]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;messageObj = JSON.parse(recvmsg);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Utilize received and parsed JSON message */
&nbsp;&nbsp;&nbsp;};
    
&nbsp;&nbsp;&nbsp;/* Callback function handling errors */
&nbsp;&nbsp;&nbsp;socket.onerror = function onSocketError() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;Client onerror&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;socket.close();
&nbsp;&nbsp;&nbsp;};
    
&nbsp;&nbsp;&nbsp;/* Callback function handling socket close event */
&nbsp;&nbsp;&nbsp;socket.onclose = function onSocketClose() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Handle event */
&nbsp;&nbsp;&nbsp;};
}
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">onmessage</span> callback reads and parses messages received from the socket using the socket.readData() function provided by the Bluetooth API.</p>
<p>The <span style="font-family: Courier New,Courier,monospace">onerror</span> callback closes the socket using the socket.close() function provided by the Bluetooth API.</p>

  
  
<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>