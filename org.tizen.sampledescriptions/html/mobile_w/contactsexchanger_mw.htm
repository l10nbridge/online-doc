<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>	
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>ContactsExchanger Sample Overview</title>  
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>
	
	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/tizen/communication/nfc_w.htm">NFC Guide</a></li> 
			<li><a href="../../../org.tizen.tutorials/html/web/tizen/communication/nfc_tutorial_w.htm">NFC Tutorial</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/nfc.html">NFC API</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/application.html">Application API</a></li> 
		    <li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/contact.html">Contact API</a></li>	
			<li><a href="../../../org.tizen.web.apireference/html/device_api/mobile/tizen/systeminfo.html">System Information API</a></li>
		</ul>
	</div></div>
</div>	

<div id="container"><div id="contents"><div class="content">
  <h1>ContactsExchanger Sample Overview</h1> 
  <p>The ContactsExchanger sample application demonstrates how you can share contact card details between 2 NFC (Near Field Communication) devices or through an NFC tag. </p> 
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>, and on the coding of the sample application, see <a href="../../../org.tizen.tutorials/html/web/tizen/communication/task_contactsexchanger_w.htm">Contacts Exchanger task</a>.</p>
  <p>The following figure illustrates the main screens of the ContactsExchanger.</p> 
  <p class="figure">Figure: ContactsExchanger screens</p> 
  <p align="center"><img alt="ContactsExchanger screens" src="../images/contactsexchanger.png" /> </p> 
  <p> The application opens with the main screen that shows your default contact card if you have already created one. To create a default contact card, click <strong>Create default card</strong> and select the default contact from your address book.</p> 
  <p> </p> 
  <p>When the default contact card has been created, the following tasks are available: </p> 
  <ul> 
   <li>To change the default contact, click <strong>Change your default contact</strong> and select a new contact form the address book.</li> 
   <li>To read contact data from an NFC tag, click <strong>Read from card</strong> and within 10 seconds place the device next to an NFC tag.</li> 
   <li>To write contact data to an NFC tag, click <strong>Write to card</strong> and within 10 seconds place the device next to an NFC tag.</li> 
   <li>To share the default contacts between 2 devices running the ContactsExchanger application, click <strong>Communicate with another device</strong> on both devices, and within 10 seconds, place the devices next to each other.</li> 
  </ul> 
  <p></p> 
  <h2>Prerequisites</h2> 
  <ul> 
   <li>2 NFC-enabled devices or 1 NFC-enabled device and 1 NFC tag</li> 
  </ul> 

  <h2>Source Files</h2> 
  <p>You can create and view the sample application project including the source files in the IDE.</p> 
  <table border="1"> 
   <tbody> 
    <tr> 
     <th>File name</th> 
     <th>Description</th> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td> 
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td> 
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screens.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span> </td> 
     <td>This file contains the CSS styling for the application UI.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.js</span> </td> 
     <td>This file defines the main application class.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.js</span> </td> 
     <td>This file handles the application UI.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.config.js</span> </td> 
     <td>This file allows storing the configuration values.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.ui.templateManager.js</span> </td> 
     <td>This file contains the <span style="font-family: Courier New,Courier,monospace">TemplateManager</span> class that manages, caches, and provides HTML templates.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.nfc.js</span> </td> 
     <td>This file is the main controller for NFC communication.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.nfc.card.js</span> </td> 
     <td>This file handles communication with the NFC tags.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">js/app.nfc.peer.js</span> </td> 
     <td>This file handles communication between two peers with NFC on board.</td> 
    </tr> 
    <tr> 
     <td><span style="font-family: Courier New,Courier,monospace">lib/tau/</span> </td> 
     <td>This directory contains the external libraries (TAU library).</td> 
    </tr> 
   </tbody> 
  </table> 
  
  <h2 id="implementation">Implementation</h2>
  
 <p>The ContactsExchanger sample application defines the <span style="font-family: Courier New,Courier,monospace">App</span> class. The instance is created after the application starts.</p>
<pre class="prettyprint">
/* app.js */
var App = null,
&nbsp;&nbsp;&nbsp;&nbsp;app = null; /* App instance */

(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App = function App() 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;};
}());
app = new App();
</pre>

<p>When the whole DOM content is loaded, the <span style="font-family: Courier New,Courier,monospace">init()</span> method of the <span style="font-family: Courier New,Courier,monospace">App</span> class is called. It is responsible for the application initialization. The <span style="font-family: Courier New,Courier,monospace">init()</span> method:</p>
<ul>
<li>Creates an object of the <span style="font-family: Courier New,Courier,monospace">Config</span> class which provides some important configuration data.</li>
<li>Creates an object of the <span style="font-family: Courier New,Courier,monospace">App.Ui</span> class which is responsible for the UI appearance and behavior.</li>
<li>Creates an object of the <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class which provides the NFC API functionality for the application.</li>
<li>Calls the <span style="font-family: Courier New,Courier,monospace">defineEvents()</span> method of the <span style="font-family: Courier New,Courier,monospace">App.Ui</span> class to define the UI events and its handlers.</li>
<li>Calls the <span style="font-family: Courier New,Courier,monospace">initAdressBook()</span> of the <span style="font-family: Courier New,Courier,monospace">App</span> class which uses the Contact API to obtain information about the contacts defined on the device database.</li>
</ul>
  
<pre class="prettyprint">
/* app.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: function appInit() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.config = new Config();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui = new App.Ui(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc = new App.NFCControl(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.ui.defineEvents();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.initAddressBook(this.nfc.turnOnNFC.bind(this.nfc));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;}
}());

$(document).ready(app.init.bind(app));
</pre>
<p>The constructor of the <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class calls its <span style="font-family: Courier New,Courier,monospace">init()</span> method. At the beginning the <span style="font-family: Courier New,Courier,monospace">init()</span> method calls the <span style="font-family: Courier New,Courier,monospace">checkNfcCapabilities()</span> method to check whether the NFC functionality is supported by device. Most importantly, the <span style="font-family: Courier New,Courier,monospace">init()</span> method creates the objects of <span style="font-family: Courier New,Courier,monospace">App.NFCCard</span> and <span style="font-family: Courier New,Courier,monospace">App.NFCPeer</span> class. They provide the key functionality related to NFC communication.</p>

<pre class="prettyprint">
/* app.nfc.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCControl = function NFCControl(app) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.app = app;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.init();
&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;App.NFCControl.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;init: function nfc_init() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.checkNfcCapabilities();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.card = new App.NFCCard(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.peer = new App.NFCPeer(this);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.endOfText = String.fromCharCode(3);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;}
}());
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">checkNfcCapabilities()</span> method of <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class uses the System Information API to check whether the NFC functionality is supported by device. If NFC is not supported, the application displays a warning and after confirmation closes automatically.</p>

<pre class="prettyprint">
/* app.nfc.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCControl.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkNfcCapabilities: function nfc_checkNfcCapabilities() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var isNfcSupported,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self = this;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNfcSupported = tizen.systeminfo.getCapabilities().nfc;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;nfc_checkNfcCapabilities: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNfcSupported = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isNfcSupported) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function notSupportedWarning() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;self.app.ui.showPopupWarning(&#39;NFC is not supported on &#39; +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#39;your device. Application will be closed.&#39;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}, 500);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;}
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">App.NFCCard</span> class provides functionality that allows application to exchange contacts data between the NFC device and the NFC tag. The details of the functionality are described in the following code snippets.</p>

<pre class="prettyprint">
/* app.nfc.card.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp; App.NFCCard = function nfc_NFCCard(nfc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc = nfc;
&nbsp;&nbsp;&nbsp;};
}());
</pre>

<p>When the user clicks the <strong>Read from card</strong> button, the application calls the <span style="font-family: Courier New,Courier,monospace">setTagDetectRead()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCCards</span> class. This method uses the <span style="font-family: Courier New,Courier,monospace">setTagListener()</span> method from the NFC API to define what should be done when the NFC tag is placed next to the NFC device. In this case, the <span style="font-family: Courier New,Courier,monospace">sucTagReadAttach()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCCard</span> class is called. The <span style="font-family: Courier New,Courier,monospace">sucTagReadAttach()</span> method takes the <span style="font-family: Courier New,Courier,monospace">NFCTag</span> type parameter and uses it to call the <span style="font-family: Courier New,Courier,monospace">readNDEF()</span> method from the NFC API. The <span style="font-family: Courier New,Courier,monospace">readNDEF()</span> method takes two callbacks (in case of success or failure) as parameters. In case of success the application calls the <span style="font-family: Courier New,Courier,monospace">readMessage()</span> function from the <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class. Depending on the results, the interface of the application is updated accordingly.</p>
 
<pre class="prettyprint">
/* app.nfc.card.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCCard.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sucTagReadAttach: function nfc_card_sucTagReadAttach(tag) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!tag.isSupportedNDEF) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: &#39;This tag doesn\&#39;t support NDEF&#39;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag.readNDEF(this.nfc.readMessage.bind(this.nfc),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.readMessageErr.bind(this));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.readMessageErr(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setTagDetectRead: function nfc_card_setTagDetectRead() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.unsetTagListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.setTagListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onattach: this.sucTagReadAttach.bind(this),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ondetach: this.nfc.sucDetach.bind(this.nfc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.readMessageErr(error);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;}
}());
</pre>
<p>The <span style="font-family: Courier New,Courier,monospace">readMessage()</span> function from the <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class takes the <span style="font-family: Courier New,Courier,monospace">NDEFMessages</span> type parameter and uses it to update the application data and the UI.</p>

<pre class="prettyprint">
/*app.nfc.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCControl.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;readMessage: function nfc_readMessage(message) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.fillRecordInfo(message.records[0]);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (err) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;nfc_readMessage: &#39;, err.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;};
}());
</pre>

<p>When the user clicks the <strong>Write to card</strong> button, the application calls the <span style="font-family: Courier New,Courier,monospace">setTagDetectWrite()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCCard</span> class. This method uses the <span style="font-family: Courier New,Courier,monospace">setTagListener()</span> method from the NFC API to define what should be done when the NFC tag is placed next to the NFC device. In this case, the <span style="font-family: Courier New,Courier,monospace">sucTagWriteAttach()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCCard</span> class is called. The <span style="font-family: Courier New,Courier,monospace">sucTagWriteAttach()</span> method takes the <span style="font-family: Courier New,Courier,monospace">NFCTag</span> type parameter and uses it to call the <span style="font-family: Courier New,Courier,monospace">writeNDEF()</span> method from the NFC API. The <span style="font-family: Courier New,Courier,monospace">writeNDEF()</span> method takes as parameters the previously prepared message (with contacts data) and two callbacks (in case of success or failure). Depending on the results, the interface of the application is updated accordingly.</p>
<pre class="prettyprint">
/* app.nfc.card.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCCard.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sucTagWriteAttach: function nfc_card_sucTagWriteAttach(tag) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newMessage = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullContact = &#39;&#39;;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullContact = this.nfc.prepareForNFC(localStorage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newMessage = this.nfc.phoneNumber2NDEF(fullContact);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!tag.isSupportedNDEF) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;message: &#39;This tag doesn\&#39;t support NDEF&#39;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tag.writeNDEF(newMessage, this.sucSend.bind(this), this.errSend.bind(this));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.errSend(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTagDetectWrite: function nfc_card_setTagDetectWrite() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var suc = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onattach: this.sucTagWriteAttach.bind(this),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ondetach: this.nfc.sucDetach.bind(this.nfc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.unsetTagListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.setTagListener(suc);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}());
</pre>

<p>The <span style="font-family: Courier New,Courier,monospace">App.NFCPeer</span> class provides functionality that allows the application to exchange contacts data between two NFC devices. The details of the functionality are described in the following code snippets.</p>
<pre class="prettyprint">
/* app.nfc.peer.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCPeer = function NFCPeer(nfc) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc = nfc;
&nbsp;&nbsp;&nbsp;};
}());
</pre>
<p>When the user clicks the <strong>Communicate with another device</strong> button, the application calls the <span style="font-family: Courier New,Courier,monospace">setTargetDetect()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCPeer</span> class. This method uses <span style="font-family: Courier New,Courier,monospace">setPeerListener()</span> method from the NFC API to define what should be done when the NFC device is placed next to the other NFC device. In this case, the <span style="font-family: Courier New,Courier,monospace">sucTargetAttach()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCPeer</span> class is called. The <span style="font-family: Courier New,Courier,monospace">sucTargetAttach()</span> method takes the <span style="font-family: Courier New,Courier,monospace">NFCPeer</span> type parameter and uses it to call two other methods from the NFC API (<span style="font-family: Courier New,Courier,monospace">sendNDEF()</span> and <span style="font-family: Courier New,Courier,monospace">setReceiveNDEFListener()</span>). The <span style="font-family: Courier New,Courier,monospace">sendNDEF()</span> method takes as parameters the previously prepared message (with contacts data) and two callbacks (in case of success or failure). Depending on the results of the <span style="font-family: Courier New,Courier,monospace">sendNDEF()</span> method, the interface of the application is updated accordingly. The <span style="font-family: Courier New,Courier,monospace">setReceiveNDEFListener()</span> method allows the application to read the message (with contacts data) sent by another device. It takes the <span style="font-family: Courier New,Courier,monospace">readMessage()</span> method from the <span style="font-family: Courier New,Courier,monospace">App.NFCControl</span> class to update application UI (this method was previously mentioned).</p>
<pre class="prettyprint">
/* app.nfc.peer.js */
(function strict() 
{
&nbsp;&nbsp;&nbsp;&#39;use strict&#39;;

&nbsp;&nbsp;&nbsp;App.NFCPeer.prototype = 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setReceiveFromTarget: function nfc_peer_setReceiveFromTarget() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!this.nfc.nfcTarget)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.warn(&#39;app.nfc.nfcTarget not set&#39;);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcTarget.unsetReceiveNDEFListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcTarget.setReceiveNDEFListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.readMessage.bind(this.nfc));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;setReceiveFromTarget error: &#39; + error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sucTargetAttach: function nfc_peer_sucTargetAttach(target) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var newMessage = null,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fullContact = this.nfc.prepareForNFC(localStorage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcTarget = target;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.setReceiveFromTarget();

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newMessage = this.nfc.phoneNumber2NDEF(fullContact);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.sendNDEF(newMessage, this.sucSendToTarget.bind(this), this.errSendToTarget.bind(this));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (e) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&#39;NDEFMessage problem: &#39; + e.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTargetDetect: function nfc_peer_setTargetDetect() 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var successCallbacks = 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onattach: this.sucTargetAttach.bind(this),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ondetach: this.nfc.sucDetach.bind(this.nfc)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.unsetPeerListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.nfc.nfcAdapter.setPeerListener(successCallbacks);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (error) 
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(error.message);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;}
}());
</pre>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>