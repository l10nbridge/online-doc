<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=9" />
	<link rel="stylesheet" type="text/css" href="../css/styles.css" />
	<link rel="stylesheet" type="text/css" href="../css/snippet.css" />
	<script type="text/javascript" src="../scripts/snippet.js"></script>
	<script type="text/javascript" src="../scripts/jquery.util.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/common.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/core.js" charset="utf-8"></script>
	<script type="text/javascript" src="../scripts/search.js" charset="utf-8"></script>

	<title>ShapeEditor Sample Overview</title>
</head>

<body onload="prettyPrint()" style="overflow: auto;">

<div id="toc-navigation">
	<div id="profile">
		<p><img alt="Mobile Web" src="../images/mobile_s_w.png"/></p>
	</div>

	<div id="toc_border"><div id="toc">
		<p class="toc-title">Related Info</p>
		<ul class="toc">
			<li><a href="../../../org.tizen.guides/html/web/w3c/graphics/svg_w.htm">HTML5 SVG Guide</a></li>
			<li><a href="../../../org.tizen.web.apireference/html/w3c_api/w3c_api_m.html#svg">HTML5 SVG API</a></li>
		</ul>
	</div></div>
</div>

<div id="container"><div id="contents"><div class="content">
  <h1>ShapeEditor Sample Overview</h1>
  <p>The ShapeEditor sample application demonstrates how you can create and edit various shapes using SVG (Scalable Vector Graphics).</p>
  <p>For information on creating the sample application project in the IDE, see <a href="../cover_page.htm#create">Creating Sample Applications</a>.</p>
  <p>The following figure illustrates the main screens of the ShapeEditor.</p>
  <p class="figure">Figure: ShapeEditor screens</p>
  <p align="center"><img alt="ShapeEditor screens" src="../images/shapeeditor_mw.png" /> </p>


  <p>The application opens with a blank SVG canvas with the action buttons at the bottom:</p>

<ul><li>Click <strong>Shape</strong> to select a specific shape and the size of the shape.</li>
<li>Click <strong>Color</strong> to select the color of the shape from a color picker.</li>
<li>Click <strong>Clear</strong> to remove all the shapes on the SVG canvas.</li></ul>

  <h2>Source Files</h2>
  <p>You can create and view the sample application project including the source files in the IDE.</p>
  <table border="1">
   <tbody>
    <tr>
     <th>File name</th>
     <th>Description</th>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">config.xml</span></td>
     <td>This file contains the application information for the platform to install and launch the application, including the view mode and the icon to be used in the device menu.</td>
    </tr>
    <tr>
    <td><span style="font-family: Courier New,Courier,monospace">css/style.css</span></td>
    <td>This file contains CSS styling for the application UI.</td>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">index.html</span></td>
     <td>This is a starting file from which the application starts loading. It contains the layout of the application screen.</td>
    </tr>
    <tr>
     <td><span style="font-family: Courier New,Courier,monospace">js/main.js</span></td>
     <td>This file contains the code for handling the main application functionalities.</td>
    </tr>
   </tbody>
  </table>


<h2>Implementation</h2>

<p>To implement SVG features:</p>

<ol><li>
<p>Use graphic elements to create various shapes, and define attributes, such as location, size, and color of the shapes: </p>
<pre class="prettyprint">
&lt;svg class=&quot;shape-svg&quot; viewBox=&quot;0 0 200 200&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;rect class=&quot;shape-element&quot; id=&quot;select-rect&quot; width=&quot;200&quot; height=&quot;200&quot; /&gt;
&lt;/svg&gt;
&lt;svg class=&quot;shape-svg&quot; viewBox=&quot;0 0 200 200&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;ellipse class=&quot;shape-element&quot; id=&quot;select-ellipse&quot; cx=&quot;100&quot; cy=&quot;100&quot; rx=&quot;100&quot; ry=&quot;100&quot; /&gt;
&lt;/svg&gt;
&lt;svg class=&quot;shape-svg&quot; viewBox=&quot;0 0 200 200&quot;&gt;
&nbsp;&nbsp;&nbsp;&lt;polygon class=&quot;shape-element&quot; id=&quot;select-triangle&quot; points=&quot;100,0 0,200 200,200&quot; /&gt;
&lt;/svg&gt;</pre></li>

<li>Handle touch events:
<ul><li>
<p>The <span style="font-family: Courier New,Courier,monospace">touchStartHandler()</span> method is called when the <span style="font-family: Courier New,Courier,monospace">touchstart</span> event is triggered. It uses the <span style="font-family: Courier New,Courier,monospace">changedTouches</span> array event property to access the data of the current <span style="font-family: Courier New,Courier,monospace">touch</span> object. The current touch data is saved to the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object, which is an associative array indexed with the <span style="font-family: Courier New,Courier,monospace">identifier</span> parameter of the current <span style="font-family: Courier New,Courier,monospace">touch</span> object.</p>
<pre class="prettyprint">
function bindEvents() 
{
&nbsp;&nbsp;&nbsp;svgBoard.addEventListener(&#39;touchstart&#39;, touchStartHandler, false);
}

function touchStartHandler(e) 
{
&nbsp;&nbsp;&nbsp;var touch = e.changedTouches[0];

&nbsp;&nbsp;&nbsp;drawPath[touch.identifier] = touch;
&nbsp;&nbsp;&nbsp;timer = setTimeout(longtouchHandler, touchDuration);
}</pre></li>
<li>
<p>The <span style="font-family: Courier New,Courier,monospace">touchEndHandler()</span> method is called when the <span style="font-family: Courier New,Courier,monospace">touchend</span> event is triggered, and it adds a new shape into the SVG board.
The <span style="font-family: Courier New,Courier,monospace">pageX</span> and <span style="font-family: Courier New,Courier,monospace">pageY</span> properties of the <span style="font-family: Courier New,Courier,monospace">touch</span> object represent the coordinates of the touch point. After a new shape is inserted, the method resets the <span style="font-family: Courier New,Courier,monospace">drawPath</span> object to remove the information about the touch that no longer exists.</p>
<pre class="prettyprint">
function bindEvents() 
{
&nbsp;&nbsp;&nbsp;svgBoard.addEventListener(&#x27;touchend&#x27;, touchEndHandler, false);
}

function touchEndHandler(e) 
{
&nbsp;&nbsp;&nbsp;var touch = e.changedTouches[0],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = 0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = 0;

&nbsp;&nbsp;&nbsp;/* Add a new shape into the SVG board */
&nbsp;&nbsp;&nbsp;if (!isLongTouch) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x = touch.pageX - content.offsetLeft - (0.25 * shapeSize * 100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y = touch.pageY - content.offsetTop - (0.25 * shapeSize * 100);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;innerHtmlSvg(&#x22;svg-board&#x22;, &#x22;shape&#x22; + shapeIndex, svgShapeTag, shapeSize, x, y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;delete drawPath[touch.identifier];
&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;/* Stop short touches from firing the event */
&nbsp;&nbsp;&nbsp;isLongTouch = 0;
&nbsp;&nbsp;&nbsp;if (timer) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clearTimeout(timer);
&nbsp;&nbsp;&nbsp;}
}
</pre></li></ul></li>

<li>
<p>Since SVG is essentially graphics defined in XML format, the <span style="font-family: Courier New,Courier,monospace">innerHtml</span> property is not supported in the <span style="font-family: Courier New,Courier,monospace">svg</span> elements.</p>
<p>A workaround method is used for adding new <span style="font-family: Courier New,Courier,monospace">svg</span> elements into the SVG board:</p>
<pre class="prettyprint">
function innerHtmlSvg(boardId, shapeId, shapeTag, shapeRatio, traslateX, traslateY) 
{
&nbsp;&nbsp;&nbsp;var tempDiv = document.createElement(&#39;div&#39;), /* Create a dummy tempDiv */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* Wrap the svg string to a svg object */
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svgFragment = &#39;&lt;svg&gt;&#39; + shapeTag + &#39;&lt;/svg&gt;&#39;; 

&nbsp;&nbsp;&nbsp;tempDiv.innerHTML = svgFragment; /* Add all svg to the tempDiv */
&nbsp;&nbsp;&nbsp;Array.prototype.slice.call(tempDiv.childNodes[0].childNodes).forEach(function(el) 
&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.querySelector(&#39;#&#39; + boardId).appendChild(el);
&nbsp;&nbsp;&nbsp;}); /* Copy the children of the tempDiv&#39;s SVG to the actual body&#39;s SVG */
}
</pre></li></ol>

<script type="text/javascript" src="../scripts/jquery.zclip.min.js"></script>
<script type="text/javascript" src="../scripts/showhide.js"></script>
</div></div></div>

<a class="top sms" href="#"><img src="../images/btn_top.gif" alt="Go to top" /></a>

<div id="footer">
<p class="footer">Except as noted, this content - excluding the Code Examples - is licensed under <a href="http://creativecommons.org/licenses/by/3.0/legalcode" target="_blank">Creative Commons Attribution 3.0</a> and all of the Code Examples contained herein are licensed under <a href="https://www.tizen.org/bsd-3-clause-license" target="_blank">BSD-3-Clause</a>.<br/>For details, see the <a href="https://www.tizen.org/content-license" target="_blank">Content License</a>.</p>
</div>

<script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-25976949-1']);
_gaq.push(['_trackPageview']);
(function() {
var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();
</script>

</body>
</html>
